
build/gsmbase.elf:     file format elf32-littlearm
build/gsmbase.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001d05

Program Header:
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00002ebc memsz 0x00002ebc flags r-x
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x00002ebc align 2**16
         filesz 0x00000078 memsz 0x0000051c flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ebc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  20000000  00002ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004a4  20000078  00002f34  00020078  2**3
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  4 .comment      00000079  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  5 .debug_info   000341ce  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003bb8  00000000  00000000  000542e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00005a09  00000000  00000000  00057e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000590  00000000  00000000  0005d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000938  00000000  00000000  0005de38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005ccc  00000000  00000000  0005e770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000dd8d  00000000  00000000  0006443c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001848  00000000  00000000  000721cc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000078 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_samd10.c
00000000 l    df *ABS*	00000000 crtstuff.c
0000008c l     F .text	00000000 __do_global_dtors_aux
20000078 l       .bss	00000001 completed.8911
00002eb8 l     O .text	00000000 __do_global_dtors_aux_fini_array_entry
000000b4 l     F .text	00000000 frame_dummy
2000007c l       .bss	00000018 object.8916
00002e8c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 GSM.cpp
000000d4 l     F .text	0000001c _ZL8find_numPKc
000005d8 l     F .text	00000054 _ZL9func_execP3GSMPKcS2_
00000000 l    df *ABS*	00000000 RF24.cpp
00002bf8 l     O .text	00000006 _ZL10child_pipe
00002c00 l     O .text	00000006 _ZL17child_pipe_enable
00002c08 l     O .text	00000006 _ZL18child_payload_size
00000000 l    df *ABS*	00000000 main.cpp
00000e04 l     F .text	00000078 _Z41__static_initialization_and_destruction_0ii
00000f90 l     F .text	000000fc _ZL8cmd_infoP3GSMPKcS2_
00001198 l     F .text	00000010 _GLOBAL__sub_I__ZN3Str11EmptyBufferE
20000094 l     O .bss	00000014 _ZL3gsm
200000a8 l     O .bss	00000030 _ZL3net
00000000 l    df *ABS*	00000000 spi.cpp
000013f0 l     F .text	00000034 _Z41__static_initialization_and_destruction_0ii
00001444 l     F .text	00000010 _GLOBAL__sub_I_g_spi0
00000000 l    df *ABS*	00000000 systick.c
00001454 l     F .text	00000144 initializeSystemFor48MHz
20000000 l       .data	00000000 mydelay
20000002 l       .data	00000000 mydelay1
200000e0 l     O .bss	00000008 _cycles
00000000 l    df *ABS*	00000000 uart.cpp
0000162c l     F .text	00000058 _Z41__static_initialization_and_destruction_0ii
00001b48 l     F .text	00000010 _GLOBAL__sub_I_g_uart0
00000000 l    df *ABS*	00000000 sensornet.cpp
00000000 l    df *ABS*	00000000 syscalls.c
20000500 l     O .bss	00000004 heap.4639
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _udivsi3.o
00001ddc l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strtol.c
000022b4 l     F .text	00000104 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 _thumb1_case_shi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00002ea8 l     F .text	00000010 __delay_usec_veneer
00000896 g     F .text	0000000a _ZN4RF2410get_statusEv
00002ab4 g     F .text	00000010 _malloc_usable_size_r
00000c0a g     F .text	0000002e _ZN4RF2410setPALevelEh
0000073c g     F .text	00000034 _ZN4RF2414write_registerEhh
00000b34 g     F .text	00000064 _ZN4RF2414startListeningEv
00001b58 g     F .text	0000001c _ZN9SensornetC1ERK4RF24
00000294 g     F .text	00000098 _ZN3GSM7PowerOnEv
00001d02  w    F .text	00000002 DMAC_Handler
2000050c g     O .bss	00000001 __lock___atexit_recursive_mutex
00000984 g     F .text	00000006 _ZN4RF249errNotifyEv
00001d02  w    F .text	00000002 HardFault_Handler
00001d02  w    F .text	00000002 TC2_Handler
00000a42 g     F .text	0000000a _ZN4RF249availableEv
00002454 g     F .text	00000010 __malloc_unlock
00000a0e g     F .text	0000000a _ZN4RF245writeEPKvh
00001d02  w    F .text	00000002 AC_Handler
00001610 g     F .text	0000001c SysTick_Handler
2000050d g     O .bss	00000001 __lock___arc4random_mutex
00002a8e g     F .text	00000026 memmove
00001d02  w    F .text	00000002 PendSV_Handler
00002178 g     F .text	00000068 snprintf
00001d02  w    F .text	00000002 NMI_Handler
00000efc g     F .text	00000060 _ZN3Str13appendfv_fromEiPKcSt9__va_list
00000000 g       .text	00000000 _sfixed
00001b38 g     F .text	00000010 SERCOM1_Handler
00001d02  w    F .text	00000002 ADC_Handler
20000518 g     O .bss	00000004 errno
00002ebc g       .data	00000000 _etext
000008a0 g     F .text	0000003e _ZN4RF24C2E6gpio_tS0_R5spi_t
20001000 g       .text	00000000 __top_ram
00001fdc g     F .text	00000012 memcpy
0000018c g     F .text	00000012 _ZN3GSMD1Ev
00002574 g     F .text	00000200 _svfprintf_r
00000770 g     F .text	00000078 _ZN4RF2413write_payloadEPKvhh
00001d02  w    F .text	00000002 SERCOM2_Handler
00002ebc g       .text	00000000 __fini_array_end
00001d02  w    F .text	00000002 TCC0_Handler
0000088c g     F .text	0000000a _ZN4RF248flush_txEv
00001fb4 g     F .text	00000014 malloc
000008f0 g     F .text	0000000c _ZN4RF2414setPayloadSizeEh
00001ddc g     F .text	0000010a .hidden __udivsi3
00001974 g     F .text	0000008c _ZN6uart_t4peekEi
00001d02  w    F .text	00000002 RTC_Handler
00002428 g     F .text	00000018 vsnprintf
00000408 g     F .text	000000b8 _ZN3GSM7ReadSMSEi
2000000c g     O .data	00000000 .hidden __dso_handle
00001908 g     F .text	0000002c _ZN6uart_t7rxemptyEv
00000660 g     F .text	0000005c _ZN4RF242ceEb
00000f78 g     F .text	00000018 _ZN3Str7appendfEPKcz
00002154 g     F .text	00000024 _sbrk_r
200000e8 g     O .bss	0000020c g_uart0
00001d02  w    F .text	00000002 EIC_Handler
00000f5c g     F .text	0000001c _ZN3Str8appendfvEPKcSt9__va_list
00001d02  w    F .text	00000002 WDT_Handler
200000d8 g     O .bss	00000004 g_spi0
2000050e g     O .bss	00000001 __lock___env_recursive_mutex
2000050f g     O .bss	00000001 __lock___sinit_recursive_mutex
00001ef4 g     F .text	00000050 .hidden __aeabi_lmul
00002464 g     F .text	0000004c _realloc_r
00001f6c g     F .text	00000048 __libc_init_array
00001da8 g     F .text	00000024 _sbrk
00001d02  w    F .text	00000002 TC1_Handler
00002e80 g     F .text	00000000 _init
00000a60 g     F .text	0000002e _ZN4RF2415openWritingPipeEy
000023b8 g     F .text	00000018 strtol
00000958 g     F .text	0000002c _ZN4RF247powerUpEv
00004000 g       .text	00000000 __top_flash
2000051c g       .bss	00000000 _ebss
00001d04 g     F .text	000000a4 Reset_Handler
00002428 g     F .text	00000018 vsniprintf
20000510 g     O .bss	00000001 __lock___malloc_recursive_mutex
20001000 g       *ABS*	00000000 _stack_top
00001bda g     F .text	00000086 _ZN9Sensornet10UpdateNodeERK12SensorPacket
00001d02 g     F .text	00000002 Dummy_Handler
00001cdc g     F .text	00000026 _ZN9Sensornet4PollEv
00002dec g     O .text	00000020 __sf_fake_stderr
00002178 g     F .text	00000068 sniprintf
00002442 g     F .text	00000002 __retarget_lock_release_recursive
00000860 g     F .text	00000022 _ZN4RF248spiTransEh
000024b0 g     F .text	000000c4 __ssputs_r
0000098a g     F .text	00000028 _ZN4RF2414startFastWriteEPKvhbb
000009b2 g     F .text	0000005c _ZN4RF245writeEPKvhb
00000a4c g     F .text	00000014 _ZN4RF244readEPvh
000004c0 g     F .text	000000a8 _ZN3GSM4PollEv
00002a78 g     F .text	00000016 memchr
00001ff0 g     F .text	00000094 _free_r
00001c60 g     F .text	0000007c _ZN9Sensornet13ProcessPacketER12SensorPacket
00002ac4 g     F .text	00000014 .hidden __gnu_thumb1_case_shi
000013ec g     F .text	00000004 _ZN5spi_tC2EP6Sercom
20000078 g       .bss	00000000 _bss
000018d8 g     F .text	00000030 _ZN6uart_t5printEPKci
00002288 g     F .text	0000002c strstr
200002f4 g     O .bss	0000020c g_uart1
00001d02  w    F .text	00000002 PM_Handler
000015d4 g     F .text	00000024 systick_cycles
00000bbc g     F .text	00000034 _ZN4RF2416enableAckPayloadEv
00000e7c g     F .text	00000080 _ZN3Str7reserveEi
20000010 g     O .data	00000004 _ZN3Str11EmptyBufferE
0000223e g     F .text	00000022 strncmp
00000df0  w    F .text	00000012 _ZN9SensornetD2Ev
00001598 g     F .text	0000003c systick_init
00002260 g     F .text	00000028 strncpy
0000032c g     F .text	00000084 _ZN3GSM4InitEv
000021e0 g     F .text	00000034 strcasecmp
000011a8 g     F .text	00000244 _ZN5spi_t4InitE12spi_pincfg_tt
0000018c g     F .text	00000012 _ZN3GSMD2Ev
00001424 g     F .text	00000020 _ZN5spi_t8TransferEh
00002140 g     F .text	00000014 realloc
00001934 g     F .text	00000040 _ZN6uart_t4getcEv
00000a18 g     F .text	0000002a _ZN4RF249availableEPh
00001f50 g     F .text	0000001c __cxa_atexit
00001ef0  w    F .text	00000002 .hidden __aeabi_ldiv0
00000882 g     F .text	0000000a _ZN4RF248flush_rxEv
000023d0 g     F .text	00000056 _vsnprintf_r
000001a0 g     F .text	000000b0 _ZN3GSM7CommandEPKcS1_j
00002444 g     F .text	00000010 __malloc_lock
00002eb8 g       .text	00000000 __fini_array_start
00002e0c g     O .text	00000020 __sf_fake_stdin
0000062c g     F .text	00000034 _ZN4RF243csnEb
00002440 g     F .text	00000002 __retarget_lock_acquire_recursive
0000108c g     F .text	0000010c main
00001b74 g     F .text	00000066 _ZN9Sensornet5beginEv
200000dc g     O .bss	00000004 g_spi1
00001ddc g     F .text	00000000 .hidden __aeabi_uidiv
00000568 g     F .text	00000070 _ZN3GSM7SendSMSEPKcS1_
00001d02  w    F .text	00000002 SVC_Handler
20000000 g     F .data	0000000c delay_usec
00001d02  w    F .text	00000002 EVSYS_Handler
00002e9c g       .text	00000000 __init_array_end
00002084 g     F .text	000000bc _malloc_r
000003b0 g     F .text	00000058 _ZN3GSM10ProcessSMSEPKcS1_
00001d02  w    F .text	00000002 NVMCTRL_Handler
00002e9c g     F .text	00000000 _fini
00000b98 g     F .text	00000024 _ZN4RF2415toggle_featuresEv
00001a98 g     F .text	00000090 _ZN6uart_t4readEv
00001684 g     F .text	000001e8 _ZN6uart_t4initERK13uart_pincfg_tt
00001a00 g     F .text	00000098 _ZN6uart_t4findEPKc
00001b28 g     F .text	00000010 SERCOM0_Handler
00002774 g     F .text	000000de _printf_common
20000014 g     O .data	00000004 _impure_ptr
00002e8c g       .text	00000000 __preinit_array_end
00002574 g     F .text	00000200 _svfiprintf_r
000008a0 g     F .text	0000003e _ZN4RF24C1E6gpio_tS0_R5spi_t
20000000 g       .data	00000000 _data
00000000 g     O .text	0000008c exception_table
00000df0  w    F .text	00000012 _ZN9SensornetD1Ev
00001d02  w    F .text	00000002 DAC_Handler
000006bc g     F .text	0000002c _ZN4RF2413read_registerEh
000023d0 g     F .text	00000056 _vsniprintf_r
000007e8 g     F .text	00000078 _ZN4RF2412read_payloadEPvh
000008fc g     F .text	0000005a _ZN4RF2413stopListeningEv
00001ee8 g     F .text	00000008 .hidden __aeabi_uidivmod
20000078 g       .data	00000000 _edata
2000051c g       .bss	00000000 _end
20000511 g     O .bss	00000001 __lock___at_quick_exit_mutex
00001d02  w    F .text	00000002 PTC_Handler
00001b58 g     F .text	0000001c _ZN9SensornetC2ERK4RF24
00000c8c g     F .text	00000014 _ZN4RF2410setRetriesEhh
000006e8 g     F .text	00000054 _ZN4RF2414write_registerEhPKhh
00000250 g     F .text	00000044 _ZN3GSM13RepeatCommandEPKcS1_ii
00000c38 g     F .text	00000054 _ZN4RF2411setDataRateE15rf24_datarate_e
000018bc g     F .text	0000001c _ZN6uart_t5writeEc
00002e2c g     O .text	00000020 __sf_fake_stdout
00001f44 g     F .text	0000000c atoi
00002ce8 g     O .text	00000101 _ctype_
00001ef0  w    F .text	00000002 .hidden __aeabi_idiv0
00002e8c g       .text	00000000 __init_array_start
00001ef4 g     F .text	00000050 .hidden __muldi3
20000512 g     O .bss	00000001 __lock___dd_hash_mutex
20000513 g     O .bss	00000001 __lock___tz_mutex
000000f0 g     F .text	0000009c _ZN3GSMC2E6gpio_tP6uart_t
00000b0c g     F .text	00000028 _ZN4RF2416closeReadingPipeEh
00002230 g     F .text	0000000e strlen
00002854 g     F .text	00000224 _printf_i
20000508 g     O .bss	00000004 __malloc_sbrk_start
000000f0 g     F .text	0000009c _ZN3GSMC1E6gpio_tP6uart_t
000013ec g     F .text	00000004 _ZN5spi_tC1EP6Sercom
00002214 g     F .text	0000001c strchr
20000504 g     O .bss	00000004 __malloc_free_list
00000ca0 g     F .text	00000150 _ZN4RF245beginEv
00002e8c g       .text	00000000 __preinit_array_start
00001dcc g     F .text	0000000e __aeabi_atexit
000008de g     F .text	00000012 _ZN4RF2410setChannelEh
000015f8 g     F .text	00000018 millis
00000bf0 g     F .text	0000001a _ZN4RF2410setAutoAckEb
0000186c g     F .text	00000050 _ZN6uart_t14sercom_handlerEv
00000a90 g     F .text	0000007c _ZN4RF2415openReadingPipeEhy
20000514 g     O .bss	00000001 __lock___sfp_recursive_mutex
00001fc8 g     F .text	00000014 free
00001d02  w    F .text	00000002 SYSCTRL_Handler



Disassembly of section .text:

00000000 <exception_table>:
       0:	00 10 00 20 05 1d 00 00 03 1d 00 00 03 1d 00 00     ... ............
	...
      2c:	03 1d 00 00 00 00 00 00 00 00 00 00 03 1d 00 00     ................
      3c:	11 16 00 00 03 1d 00 00 03 1d 00 00 03 1d 00 00     ................
      4c:	03 1d 00 00 03 1d 00 00 03 1d 00 00 03 1d 00 00     ................
      5c:	00 00 00 00 03 1d 00 00 29 1b 00 00 39 1b 00 00     ........)...9...
      6c:	03 1d 00 00 03 1d 00 00 03 1d 00 00 03 1d 00 00     ................
      7c:	03 1d 00 00 03 1d 00 00 03 1d 00 00 03 1d 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000078 	.word	0x20000078
      ac:	00000000 	.word	0x00000000
      b0:	00002ebc 	.word	0x00002ebc

000000b4 <frame_dummy>:
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <frame_dummy+0x14>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4903      	ldr	r1, [pc, #12]	; (cc <frame_dummy+0x18>)
      be:	4804      	ldr	r0, [pc, #16]	; (d0 <frame_dummy+0x1c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	bd10      	pop	{r4, pc}
      c6:	46c0      	nop			; (mov r8, r8)
      c8:	00000000 	.word	0x00000000
      cc:	2000007c 	.word	0x2000007c
      d0:	00002ebc 	.word	0x00002ebc

000000d4 <_ZL8find_numPKc>:
#include <strings.h>
extern "C" {
#include <systick.h>
}

static int find_num(const char* str) {
      d4:	b510      	push	{r4, lr}
    while(*str) {
      d6:	7803      	ldrb	r3, [r0, #0]
      d8:	2b00      	cmp	r3, #0
      da:	d007      	beq.n	ec <_ZL8find_numPKc+0x18>
        if(isdigit(*str))
      dc:	3b30      	subs	r3, #48	; 0x30
      de:	2b09      	cmp	r3, #9
      e0:	d901      	bls.n	e6 <_ZL8find_numPKc+0x12>
            return atoi(str);
        str++;
      e2:	3001      	adds	r0, #1
    while(*str) {
      e4:	e7f7      	b.n	d6 <_ZL8find_numPKc+0x2>
            return atoi(str);
      e6:	f001 ff2d 	bl	1f44 <atoi>
      ea:	e000      	b.n	ee <_ZL8find_numPKc+0x1a>
    }
    return 0;
      ec:	2000      	movs	r0, #0
}
      ee:	bd10      	pop	{r4, pc}

000000f0 <_ZN3GSMC1E6gpio_tP6uart_t>:
            free(resp);
        }
    }
}

GSM::GSM(const gpio_t pwrkey, uart_t* uart) :
      f0:	b5f0      	push	{r4, r5, r6, r7, lr}
      f2:	b087      	sub	sp, #28
      f4:	0004      	movs	r4, r0
      f6:	4668      	mov	r0, sp
      f8:	9100      	str	r1, [sp, #0]
      fa:	6042      	str	r2, [r0, #4]
    m_pwrkey(pwrkey), m_uart(uart)
      fc:	0026      	movs	r6, r4
      fe:	0002      	movs	r2, r0
     100:	ca22      	ldmia	r2!, {r1, r5}
     102:	c622      	stmia	r6!, {r1, r5}
     104:	0035      	movs	r5, r6
private:
    size_t m_size;
    T* m_data;

public:
    Vector() : m_size(0), m_data(NULL) {}
     106:	2200      	movs	r2, #0
     108:	60a2      	str	r2, [r4, #8]
     10a:	60e2      	str	r2, [r4, #12]
     10c:	6123      	str	r3, [r4, #16]
        } else {
            PORT->Group[port].DIRSET.reg = 1 << pin;
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
        }
    }
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     10e:	6841      	ldr	r1, [r0, #4]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     110:	3201      	adds	r2, #1
     112:	0010      	movs	r0, r2
     114:	4088      	lsls	r0, r1
     116:	6823      	ldr	r3, [r4, #0]
     118:	01db      	lsls	r3, r3, #7
     11a:	4f1a      	ldr	r7, [pc, #104]	; (184 <_ZN3GSMC1E6gpio_tP6uart_t+0x94>)
     11c:	46bc      	mov	ip, r7
     11e:	4463      	add	r3, ip
     120:	6098      	str	r0, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     122:	185b      	adds	r3, r3, r1
     124:	3340      	adds	r3, #64	; 0x40
     126:	7819      	ldrb	r1, [r3, #0]
     128:	2002      	movs	r0, #2
     12a:	4381      	bics	r1, r0
     12c:	7019      	strb	r1, [r3, #0]
    }
    inline void drvstr(const gpio_t& gp, const bool en) { drvstr(gp.port, gp.pin, en); }

    inline void set(const int port, const int pin, const bool en) {
        if(en)
            PORT->Group[port].OUTSET.reg = 1 << pin;
     12e:	6863      	ldr	r3, [r4, #4]
     130:	409a      	lsls	r2, r3
     132:	6823      	ldr	r3, [r4, #0]
     134:	01db      	lsls	r3, r3, #7
     136:	4463      	add	r3, ip
     138:	619a      	str	r2, [r3, #24]
{
    gpio::mode(m_pwrkey, GPIO_DIR_OUT); // Set pwrkey pin to output
    gpio::set(m_pwrkey, true); // Set pwrkey to high

    m_smsfuncs.push_back({"exec", func_exec, 0});
     13a:	aa03      	add	r2, sp, #12
     13c:	4b12      	ldr	r3, [pc, #72]	; (188 <_ZN3GSMC1E6gpio_tP6uart_t+0x98>)
     13e:	cb83      	ldmia	r3!, {r0, r1, r7}
     140:	c283      	stmia	r2!, {r0, r1, r7}
    ~Vector() {
        if(m_data) free(m_data);
    }

    void push_back(const T& elem) {
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     142:	6831      	ldr	r1, [r6, #0]
     144:	2900      	cmp	r1, #0
     146:	d018      	beq.n	17a <_ZN3GSMC1E6gpio_tP6uart_t+0x8a>
     148:	6870      	ldr	r0, [r6, #4]
     14a:	3101      	adds	r1, #1
     14c:	004b      	lsls	r3, r1, #1
     14e:	1859      	adds	r1, r3, r1
     150:	0089      	lsls	r1, r1, #2
     152:	f001 fff5 	bl	2140 <realloc>
        if(!new_data) return;
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <_ZN3GSMC1E6gpio_tP6uart_t+0x84>
        m_data = new_data;
     15a:	6068      	str	r0, [r5, #4]

        memcpy(m_data + m_size, &elem, sizeof(T));
     15c:	682a      	ldr	r2, [r5, #0]
     15e:	0053      	lsls	r3, r2, #1
     160:	189b      	adds	r3, r3, r2
     162:	009b      	lsls	r3, r3, #2
     164:	18c0      	adds	r0, r0, r3
     166:	220c      	movs	r2, #12
     168:	a903      	add	r1, sp, #12
     16a:	f001 ff37 	bl	1fdc <memcpy>
        m_size++;
     16e:	682b      	ldr	r3, [r5, #0]
     170:	3301      	adds	r3, #1
     172:	602b      	str	r3, [r5, #0]
}
     174:	0020      	movs	r0, r4
     176:	b007      	add	sp, #28
     178:	bdf0      	pop	{r4, r5, r6, r7, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     17a:	200c      	movs	r0, #12
     17c:	f001 ff1a 	bl	1fb4 <malloc>
     180:	e7e9      	b.n	156 <_ZN3GSMC1E6gpio_tP6uart_t+0x66>
     182:	46c0      	nop			; (mov r8, r8)
     184:	41004400 	.word	0x41004400
     188:	00002ad8 	.word	0x00002ad8

0000018c <_ZN3GSMD1Ev>:

GSM::~GSM() {
     18c:	b510      	push	{r4, lr}
     18e:	0004      	movs	r4, r0
        if(m_data) free(m_data);
     190:	68c0      	ldr	r0, [r0, #12]
     192:	2800      	cmp	r0, #0
     194:	d001      	beq.n	19a <_ZN3GSMD1Ev+0xe>
     196:	f001 ff17 	bl	1fc8 <free>
    
}
     19a:	0020      	movs	r0, r4
     19c:	bd10      	pop	{r4, pc}
     19e:	Address 0x0000019e is out of bounds.


000001a0 <_ZN3GSM7CommandEPKcS1_j>:

bool GSM::Command(const char* cmd, const char* result, unsigned int response_time) {
     1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1a2:	0004      	movs	r4, r0
     1a4:	0017      	movs	r7, r2
     1a6:	001e      	movs	r6, r3
    uint32_t start;

    m_uart->flush_rx();
     1a8:	6903      	ldr	r3, [r0, #16]
    // Allocates a buffer and reads all available data into it
    char* read();

    bool rxempty();
    void flush_rx() {
        m_rxhead = 0;
     1aa:	2200      	movs	r2, #0
     1ac:	2081      	movs	r0, #129	; 0x81
     1ae:	0080      	lsls	r0, r0, #2
     1b0:	521a      	strh	r2, [r3, r0]
        m_rxtail = 0;
     1b2:	4825      	ldr	r0, [pc, #148]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     1b4:	521a      	strh	r2, [r3, r0]
        m_rxfull = false;
     1b6:	2000      	movs	r0, #0
     1b8:	2282      	movs	r2, #130	; 0x82
     1ba:	0092      	lsls	r2, r2, #2
     1bc:	5498      	strb	r0, [r3, r2]

    m_uart->print(cmd);
     1be:	2201      	movs	r2, #1
     1c0:	4252      	negs	r2, r2
     1c2:	6920      	ldr	r0, [r4, #16]
     1c4:	f001 fb88 	bl	18d8 <_ZN6uart_t5printEPKci>
    m_uart->write('\r');
     1c8:	210d      	movs	r1, #13
     1ca:	6920      	ldr	r0, [r4, #16]
     1cc:	f001 fb76 	bl	18bc <_ZN6uart_t5writeEc>
    // Allow up to response_time milliseconds to get a response
    start = millis();
     1d0:	f001 fa12 	bl	15f8 <millis>
     1d4:	0005      	movs	r5, r0
     1d6:	e012      	b.n	1fe <_ZN3GSM7CommandEPKcS1_j+0x5e>
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
            return m_rxhead - m_rxtail;
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     1d8:	2281      	movs	r2, #129	; 0x81
     1da:	0092      	lsls	r2, r2, #2
     1dc:	5a99      	ldrh	r1, [r3, r2]
     1de:	4a1a      	ldr	r2, [pc, #104]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     1e0:	5a9b      	ldrh	r3, [r3, r2]
     1e2:	1ac9      	subs	r1, r1, r3
     1e4:	b289      	uxth	r1, r1
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	009b      	lsls	r3, r3, #2
     1ea:	469c      	mov	ip, r3
     1ec:	4461      	add	r1, ip
     1ee:	b289      	uxth	r1, r1
    while(!m_uart->available())
     1f0:	2900      	cmp	r1, #0
     1f2:	d116      	bne.n	222 <_ZN3GSM7CommandEPKcS1_j+0x82>
        if(millis() - start >= response_time)
     1f4:	f001 fa00 	bl	15f8 <millis>
     1f8:	1b40      	subs	r0, r0, r5
     1fa:	42b0      	cmp	r0, r6
     1fc:	d21f      	bcs.n	23e <_ZN3GSM7CommandEPKcS1_j+0x9e>
    while(!m_uart->available())
     1fe:	6923      	ldr	r3, [r4, #16]
        if(m_rxhead >= m_rxtail)
     200:	2281      	movs	r2, #129	; 0x81
     202:	0092      	lsls	r2, r2, #2
     204:	5a99      	ldrh	r1, [r3, r2]
     206:	b289      	uxth	r1, r1
     208:	4a0f      	ldr	r2, [pc, #60]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     20a:	5a9a      	ldrh	r2, [r3, r2]
     20c:	b292      	uxth	r2, r2
     20e:	4291      	cmp	r1, r2
     210:	d3e2      	bcc.n	1d8 <_ZN3GSM7CommandEPKcS1_j+0x38>
            return m_rxhead - m_rxtail;
     212:	2281      	movs	r2, #129	; 0x81
     214:	0092      	lsls	r2, r2, #2
     216:	5a99      	ldrh	r1, [r3, r2]
     218:	4a0b      	ldr	r2, [pc, #44]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     21a:	5a9b      	ldrh	r3, [r3, r2]
     21c:	1ac9      	subs	r1, r1, r3
     21e:	b289      	uxth	r1, r1
     220:	e7e6      	b.n	1f0 <_ZN3GSM7CommandEPKcS1_j+0x50>
            return false;
    
    delay_usec(100000); // wait 100 ms to get the whole response
     222:	480a      	ldr	r0, [pc, #40]	; (24c <_ZN3GSM7CommandEPKcS1_j+0xac>)
     224:	f002 fe40 	bl	2ea8 <__delay_usec_veneer>

    if(!result) return true;
     228:	2f00      	cmp	r7, #0
     22a:	d00a      	beq.n	242 <_ZN3GSM7CommandEPKcS1_j+0xa2>
    return m_uart->find(result) != -1;
     22c:	6920      	ldr	r0, [r4, #16]
     22e:	0039      	movs	r1, r7
     230:	f001 fbe6 	bl	1a00 <_ZN6uart_t4findEPKc>
     234:	3001      	adds	r0, #1
     236:	1e43      	subs	r3, r0, #1
     238:	4198      	sbcs	r0, r3
     23a:	b2c0      	uxtb	r0, r0
     23c:	e000      	b.n	240 <_ZN3GSM7CommandEPKcS1_j+0xa0>
            return false;
     23e:	2000      	movs	r0, #0
}
     240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!result) return true;
     242:	2001      	movs	r0, #1
     244:	e7fc      	b.n	240 <_ZN3GSM7CommandEPKcS1_j+0xa0>
     246:	46c0      	nop			; (mov r8, r8)
     248:	00000206 	.word	0x00000206
     24c:	000186a0 	.word	0x000186a0

00000250 <_ZN3GSM13RepeatCommandEPKcS1_ii>:

bool GSM::RepeatCommand(const char* cmd, const char* result, int repeats, int response_time) {
     250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     252:	46ce      	mov	lr, r9
     254:	4647      	mov	r7, r8
     256:	b580      	push	{r7, lr}
     258:	4680      	mov	r8, r0
     25a:	000f      	movs	r7, r1
     25c:	0016      	movs	r6, r2
     25e:	001d      	movs	r5, r3
     260:	9b08      	ldr	r3, [sp, #32]
     262:	4699      	mov	r9, r3
    for(int i = 0; i < repeats; i++) {
     264:	2400      	movs	r4, #0
     266:	42ac      	cmp	r4, r5
     268:	da0c      	bge.n	284 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x34>
        if(Command(cmd, result, response_time))
     26a:	464b      	mov	r3, r9
     26c:	0032      	movs	r2, r6
     26e:	0039      	movs	r1, r7
     270:	4640      	mov	r0, r8
     272:	f7ff ff95 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     276:	2800      	cmp	r0, #0
     278:	d105      	bne.n	286 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x36>
            return true;
        
        delay_usec(500000);
     27a:	4805      	ldr	r0, [pc, #20]	; (290 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x40>)
     27c:	f002 fe14 	bl	2ea8 <__delay_usec_veneer>
    for(int i = 0; i < repeats; i++) {
     280:	3401      	adds	r4, #1
     282:	e7f0      	b.n	266 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x16>
    }
    return false;
     284:	2000      	movs	r0, #0
}
     286:	bc0c      	pop	{r2, r3}
     288:	4690      	mov	r8, r2
     28a:	4699      	mov	r9, r3
     28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	0007a120 	.word	0x0007a120

00000294 <_ZN3GSM7PowerOnEv>:

bool GSM::PowerOn() {
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46c6      	mov	lr, r8
     298:	b500      	push	{lr}
     29a:	b082      	sub	sp, #8
     29c:	0004      	movs	r4, r0
    m_uart->write('\r');
     29e:	210d      	movs	r1, #13
     2a0:	6900      	ldr	r0, [r0, #16]
     2a2:	f001 fb0b 	bl	18bc <_ZN6uart_t5writeEc>

    // Check if the GSM module is already powered on
    if(Command("AT", "OK", 500))
     2a6:	23fa      	movs	r3, #250	; 0xfa
     2a8:	005b      	lsls	r3, r3, #1
     2aa:	4a1c      	ldr	r2, [pc, #112]	; (31c <_ZN3GSM7PowerOnEv+0x88>)
     2ac:	491c      	ldr	r1, [pc, #112]	; (320 <_ZN3GSM7PowerOnEv+0x8c>)
     2ae:	0020      	movs	r0, r4
     2b0:	f7ff ff76 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     2b4:	1e07      	subs	r7, r0, #0
     2b6:	d12b      	bne.n	310 <_ZN3GSM7PowerOnEv+0x7c>
        return true;
    
    // Fail after 3 attempts to power cycle
    for(int i = 0; i < 3; i++) {
     2b8:	2600      	movs	r6, #0
     2ba:	2e02      	cmp	r6, #2
     2bc:	dc28      	bgt.n	310 <_ZN3GSM7PowerOnEv+0x7c>
        else
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     2be:	2501      	movs	r5, #1
     2c0:	002a      	movs	r2, r5
     2c2:	6863      	ldr	r3, [r4, #4]
     2c4:	409a      	lsls	r2, r3
     2c6:	6823      	ldr	r3, [r4, #0]
     2c8:	01db      	lsls	r3, r3, #7
     2ca:	4916      	ldr	r1, [pc, #88]	; (324 <_ZN3GSM7PowerOnEv+0x90>)
     2cc:	468c      	mov	ip, r1
     2ce:	4463      	add	r3, ip
     2d0:	615a      	str	r2, [r3, #20]
        gpio::set(m_pwrkey, false); // Set pwrkey to low
        delay_usec(1000000); // Wait for SIM800C to register it
     2d2:	4b15      	ldr	r3, [pc, #84]	; (328 <_ZN3GSM7PowerOnEv+0x94>)
     2d4:	4698      	mov	r8, r3
     2d6:	0018      	movs	r0, r3
     2d8:	f002 fde6 	bl	2ea8 <__delay_usec_veneer>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     2dc:	6863      	ldr	r3, [r4, #4]
     2de:	409d      	lsls	r5, r3
     2e0:	6823      	ldr	r3, [r4, #0]
     2e2:	01db      	lsls	r3, r3, #7
     2e4:	4a0f      	ldr	r2, [pc, #60]	; (324 <_ZN3GSM7PowerOnEv+0x90>)
     2e6:	4694      	mov	ip, r2
     2e8:	4463      	add	r3, ip
     2ea:	619d      	str	r5, [r3, #24]
        gpio::set(m_pwrkey, true); // Set pwrkey to high
        delay_usec(1000000);
     2ec:	4640      	mov	r0, r8
     2ee:	f002 fddb 	bl	2ea8 <__delay_usec_veneer>

        // Wait for response to AT command
        if(RepeatCommand("AT", "OK", 6, 500))
     2f2:	23fa      	movs	r3, #250	; 0xfa
     2f4:	005b      	lsls	r3, r3, #1
     2f6:	9300      	str	r3, [sp, #0]
     2f8:	3bef      	subs	r3, #239	; 0xef
     2fa:	3bff      	subs	r3, #255	; 0xff
     2fc:	4a07      	ldr	r2, [pc, #28]	; (31c <_ZN3GSM7PowerOnEv+0x88>)
     2fe:	4908      	ldr	r1, [pc, #32]	; (320 <_ZN3GSM7PowerOnEv+0x8c>)
     300:	0020      	movs	r0, r4
     302:	f7ff ffa5 	bl	250 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     306:	2800      	cmp	r0, #0
     308:	d101      	bne.n	30e <_ZN3GSM7PowerOnEv+0x7a>
    for(int i = 0; i < 3; i++) {
     30a:	3601      	adds	r6, #1
     30c:	e7d5      	b.n	2ba <_ZN3GSM7PowerOnEv+0x26>
            return true;
     30e:	0007      	movs	r7, r0
    }
    return false;
}
     310:	0038      	movs	r0, r7
     312:	b002      	add	sp, #8
     314:	bc04      	pop	{r2}
     316:	4690      	mov	r8, r2
     318:	bdf0      	pop	{r4, r5, r6, r7, pc}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	00002b90 	.word	0x00002b90
     320:	00002b34 	.word	0x00002b34
     324:	41004400 	.word	0x41004400
     328:	000f4240 	.word	0x000f4240

0000032c <_ZN3GSM4InitEv>:

bool GSM::Init() {
     32c:	b570      	push	{r4, r5, r6, lr}
     32e:	b082      	sub	sp, #8
     330:	0005      	movs	r5, r0
    if(!PowerOn())
     332:	f7ff ffaf 	bl	294 <_ZN3GSM7PowerOnEv>
     336:	1e04      	subs	r4, r0, #0
     338:	d102      	bne.n	340 <_ZN3GSM4InitEv+0x14>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms

    m_uart->flush_rx();

    return true;
}
     33a:	0020      	movs	r0, r4
     33c:	b002      	add	sp, #8
     33e:	bd70      	pop	{r4, r5, r6, pc}
    Command("ATE0");
     340:	4c14      	ldr	r4, [pc, #80]	; (394 <_ZN3GSM4InitEv+0x68>)
     342:	0023      	movs	r3, r4
     344:	2200      	movs	r2, #0
     346:	4914      	ldr	r1, [pc, #80]	; (398 <_ZN3GSM4InitEv+0x6c>)
     348:	0028      	movs	r0, r5
     34a:	f7ff ff29 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    if(!RepeatCommand("AT+CREG?", "+CREG: 0,1", 25))
     34e:	9400      	str	r4, [sp, #0]
     350:	2319      	movs	r3, #25
     352:	4a12      	ldr	r2, [pc, #72]	; (39c <_ZN3GSM4InitEv+0x70>)
     354:	4912      	ldr	r1, [pc, #72]	; (3a0 <_ZN3GSM4InitEv+0x74>)
     356:	0028      	movs	r0, r5
     358:	f7ff ff7a 	bl	250 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     35c:	1e04      	subs	r4, r0, #0
     35e:	d0ec      	beq.n	33a <_ZN3GSM4InitEv+0xe>
    Command("AT+CMGF=1"); // SMS text mode
     360:	4e0c      	ldr	r6, [pc, #48]	; (394 <_ZN3GSM4InitEv+0x68>)
     362:	0033      	movs	r3, r6
     364:	2200      	movs	r2, #0
     366:	490f      	ldr	r1, [pc, #60]	; (3a4 <_ZN3GSM4InitEv+0x78>)
     368:	0028      	movs	r0, r5
     36a:	f7ff ff19 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms
     36e:	0033      	movs	r3, r6
     370:	2200      	movs	r2, #0
     372:	490d      	ldr	r1, [pc, #52]	; (3a8 <_ZN3GSM4InitEv+0x7c>)
     374:	0028      	movs	r0, r5
     376:	f7ff ff13 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    m_uart->flush_rx();
     37a:	692b      	ldr	r3, [r5, #16]
        m_rxhead = 0;
     37c:	2200      	movs	r2, #0
     37e:	2181      	movs	r1, #129	; 0x81
     380:	0089      	lsls	r1, r1, #2
     382:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     384:	4909      	ldr	r1, [pc, #36]	; (3ac <_ZN3GSM4InitEv+0x80>)
     386:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     388:	2100      	movs	r1, #0
     38a:	2282      	movs	r2, #130	; 0x82
     38c:	0092      	lsls	r2, r2, #2
     38e:	5499      	strb	r1, [r3, r2]
    return true;
     390:	e7d3      	b.n	33a <_ZN3GSM4InitEv+0xe>
     392:	46c0      	nop			; (mov r8, r8)
     394:	00000bb8 	.word	0x00000bb8
     398:	00002b38 	.word	0x00002b38
     39c:	00002b40 	.word	0x00002b40
     3a0:	00002b4c 	.word	0x00002b4c
     3a4:	00002b58 	.word	0x00002b58
     3a8:	00002b64 	.word	0x00002b64
     3ac:	00000206 	.word	0x00000206

000003b0 <_ZN3GSM10ProcessSMSEPKcS1_>:
    ProcessSMS(text, sender);

    free(data);
}

void GSM::ProcessSMS(const char* text, const char* sender) {
     3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b2:	46c6      	mov	lr, r8
     3b4:	b500      	push	{lr}
     3b6:	b082      	sub	sp, #8
     3b8:	0006      	movs	r6, r0
     3ba:	000f      	movs	r7, r1
     3bc:	9201      	str	r2, [sp, #4]
    char* args_start = strchr(text, ' ');
     3be:	2120      	movs	r1, #32
     3c0:	0038      	movs	r0, r7
     3c2:	f001 ff27 	bl	2214 <strchr>
     3c6:	4680      	mov	r8, r0
    if(args_start) {
     3c8:	2800      	cmp	r0, #0
     3ca:	d004      	beq.n	3d6 <_ZN3GSM10ProcessSMSEPKcS1_+0x26>
        *args_start = '\0';
     3cc:	2300      	movs	r3, #0
     3ce:	7003      	strb	r3, [r0, #0]
        args_start += 1;
     3d0:	3301      	adds	r3, #1
     3d2:	469c      	mov	ip, r3
     3d4:	44e0      	add	r8, ip
        if(idx >= m_size) return {};
        return *(m_data + idx);
    }

    T* begin() {
        return m_data;
     3d6:	68f4      	ldr	r4, [r6, #12]
    }

    T* end() {
        return m_data + m_size;
     3d8:	68b3      	ldr	r3, [r6, #8]
     3da:	005d      	lsls	r5, r3, #1
     3dc:	18ed      	adds	r5, r5, r3
     3de:	00ad      	lsls	r5, r5, #2
     3e0:	1965      	adds	r5, r4, r5
    }

    for(auto& func : m_smsfuncs) {
     3e2:	42ac      	cmp	r4, r5
     3e4:	d00c      	beq.n	400 <_ZN3GSM10ProcessSMSEPKcS1_+0x50>
        if(strcasecmp(func.key, text) == 0) {
     3e6:	0039      	movs	r1, r7
     3e8:	6820      	ldr	r0, [r4, #0]
     3ea:	f001 fef9 	bl	21e0 <strcasecmp>
     3ee:	2800      	cmp	r0, #0
     3f0:	d001      	beq.n	3f6 <_ZN3GSM10ProcessSMSEPKcS1_+0x46>
    for(auto& func : m_smsfuncs) {
     3f2:	340c      	adds	r4, #12
     3f4:	e7f5      	b.n	3e2 <_ZN3GSM10ProcessSMSEPKcS1_+0x32>
            func.callback(this, sender, args_start);
     3f6:	6863      	ldr	r3, [r4, #4]
     3f8:	4642      	mov	r2, r8
     3fa:	9901      	ldr	r1, [sp, #4]
     3fc:	0030      	movs	r0, r6
     3fe:	4798      	blx	r3
            break;
        }
    }
}
     400:	b002      	add	sp, #8
     402:	bc04      	pop	{r2}
     404:	4690      	mov	r8, r2
     406:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000408 <_ZN3GSM7ReadSMSEi>:
void GSM::ReadSMS(int index) {
     408:	b5f0      	push	{r4, r5, r6, r7, lr}
     40a:	b091      	sub	sp, #68	; 0x44
     40c:	0004      	movs	r4, r0
     40e:	000b      	movs	r3, r1
    snprintf(buf, sizeof(buf), "AT+CMGR=%d", index);
     410:	4a26      	ldr	r2, [pc, #152]	; (4ac <_ZN3GSM7ReadSMSEi+0xa4>)
     412:	2140      	movs	r1, #64	; 0x40
     414:	4668      	mov	r0, sp
     416:	f001 feaf 	bl	2178 <sniprintf>
    if(!Command(buf, "+CMGR"))
     41a:	4b25      	ldr	r3, [pc, #148]	; (4b0 <_ZN3GSM7ReadSMSEi+0xa8>)
     41c:	4a25      	ldr	r2, [pc, #148]	; (4b4 <_ZN3GSM7ReadSMSEi+0xac>)
     41e:	4669      	mov	r1, sp
     420:	0020      	movs	r0, r4
     422:	f7ff febd 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     426:	2800      	cmp	r0, #0
     428:	d101      	bne.n	42e <_ZN3GSM7ReadSMSEi+0x26>
}
     42a:	b011      	add	sp, #68	; 0x44
     42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    char* data = m_uart->read();
     42e:	6920      	ldr	r0, [r4, #16]
     430:	f001 fb32 	bl	1a98 <_ZN6uart_t4readEv>
     434:	1e07      	subs	r7, r0, #0
    if(!data) return;
     436:	d0f8      	beq.n	42a <_ZN3GSM7ReadSMSEi+0x22>
    char* cmgr_start = strstr(data, "+CMGR"); // this shouldn't return null
     438:	491e      	ldr	r1, [pc, #120]	; (4b4 <_ZN3GSM7ReadSMSEi+0xac>)
     43a:	f001 ff25 	bl	2288 <strstr>
     43e:	0005      	movs	r5, r0
    char* text = strchr(cmgr_start, '\n');
     440:	210a      	movs	r1, #10
     442:	f001 fee7 	bl	2214 <strchr>
    if(!text) {
     446:	2800      	cmp	r0, #0
     448:	d020      	beq.n	48c <_ZN3GSM7ReadSMSEi+0x84>
    text += 1; // ignore \n
     44a:	1c46      	adds	r6, r0, #1
    char* text_end = strstr(text, "\r\n\r\nOK");
     44c:	491a      	ldr	r1, [pc, #104]	; (4b8 <_ZN3GSM7ReadSMSEi+0xb0>)
     44e:	0030      	movs	r0, r6
     450:	f001 ff1a 	bl	2288 <strstr>
    if(!text_end) {
     454:	2800      	cmp	r0, #0
     456:	d01d      	beq.n	494 <_ZN3GSM7ReadSMSEi+0x8c>
    *text_end = '\0';
     458:	2300      	movs	r3, #0
     45a:	7003      	strb	r3, [r0, #0]
    char* sender = strstr(cmgr_start, ",\"");
     45c:	4917      	ldr	r1, [pc, #92]	; (4bc <_ZN3GSM7ReadSMSEi+0xb4>)
     45e:	0028      	movs	r0, r5
     460:	f001 ff12 	bl	2288 <strstr>
    if(!sender) {
     464:	2800      	cmp	r0, #0
     466:	d019      	beq.n	49c <_ZN3GSM7ReadSMSEi+0x94>
    sender += 2;
     468:	1c85      	adds	r5, r0, #2
    if(!strchr(sender, '"')) {
     46a:	2122      	movs	r1, #34	; 0x22
     46c:	0028      	movs	r0, r5
     46e:	f001 fed1 	bl	2214 <strchr>
     472:	2800      	cmp	r0, #0
     474:	d016      	beq.n	4a4 <_ZN3GSM7ReadSMSEi+0x9c>
    *strchr(sender, '"') = '\0';
     476:	2300      	movs	r3, #0
     478:	7003      	strb	r3, [r0, #0]
    ProcessSMS(text, sender);
     47a:	002a      	movs	r2, r5
     47c:	0031      	movs	r1, r6
     47e:	0020      	movs	r0, r4
     480:	f7ff ff96 	bl	3b0 <_ZN3GSM10ProcessSMSEPKcS1_>
    free(data);
     484:	0038      	movs	r0, r7
     486:	f001 fd9f 	bl	1fc8 <free>
     48a:	e7ce      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     48c:	0038      	movs	r0, r7
     48e:	f001 fd9b 	bl	1fc8 <free>
        return;
     492:	e7ca      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     494:	0038      	movs	r0, r7
     496:	f001 fd97 	bl	1fc8 <free>
        return;
     49a:	e7c6      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     49c:	0038      	movs	r0, r7
     49e:	f001 fd93 	bl	1fc8 <free>
        return;
     4a2:	e7c2      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     4a4:	0038      	movs	r0, r7
     4a6:	f001 fd8f 	bl	1fc8 <free>
        return;
     4aa:	e7be      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
     4ac:	00002b78 	.word	0x00002b78
     4b0:	00000bb8 	.word	0x00000bb8
     4b4:	00002b84 	.word	0x00002b84
     4b8:	00002b8c 	.word	0x00002b8c
     4bc:	00002b94 	.word	0x00002b94

000004c0 <_ZN3GSM4PollEv>:
void GSM::Poll() {
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	0004      	movs	r4, r0
    if(!m_uart->available()) return;
     4c4:	6902      	ldr	r2, [r0, #16]
        if(m_rxhead >= m_rxtail)
     4c6:	2381      	movs	r3, #129	; 0x81
     4c8:	009b      	lsls	r3, r3, #2
     4ca:	5ad1      	ldrh	r1, [r2, r3]
     4cc:	b289      	uxth	r1, r1
     4ce:	4b20      	ldr	r3, [pc, #128]	; (550 <_ZN3GSM4PollEv+0x90>)
     4d0:	5ad3      	ldrh	r3, [r2, r3]
     4d2:	b29b      	uxth	r3, r3
     4d4:	4299      	cmp	r1, r3
     4d6:	d309      	bcc.n	4ec <_ZN3GSM4PollEv+0x2c>
            return m_rxhead - m_rxtail;
     4d8:	2381      	movs	r3, #129	; 0x81
     4da:	009b      	lsls	r3, r3, #2
     4dc:	5ad3      	ldrh	r3, [r2, r3]
     4de:	491c      	ldr	r1, [pc, #112]	; (550 <_ZN3GSM4PollEv+0x90>)
     4e0:	5a52      	ldrh	r2, [r2, r1]
     4e2:	1a9b      	subs	r3, r3, r2
     4e4:	b29b      	uxth	r3, r3
     4e6:	2b00      	cmp	r3, #0
     4e8:	d10d      	bne.n	506 <_ZN3GSM4PollEv+0x46>
}
     4ea:	bd70      	pop	{r4, r5, r6, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     4ec:	2381      	movs	r3, #129	; 0x81
     4ee:	009b      	lsls	r3, r3, #2
     4f0:	5ad3      	ldrh	r3, [r2, r3]
     4f2:	4917      	ldr	r1, [pc, #92]	; (550 <_ZN3GSM4PollEv+0x90>)
     4f4:	5a52      	ldrh	r2, [r2, r1]
     4f6:	1a9b      	subs	r3, r3, r2
     4f8:	b29b      	uxth	r3, r3
     4fa:	2280      	movs	r2, #128	; 0x80
     4fc:	0092      	lsls	r2, r2, #2
     4fe:	4694      	mov	ip, r2
     500:	4463      	add	r3, ip
     502:	b29b      	uxth	r3, r3
     504:	e7ef      	b.n	4e6 <_ZN3GSM4PollEv+0x26>
    delay_usec(100000);
     506:	4813      	ldr	r0, [pc, #76]	; (554 <_ZN3GSM4PollEv+0x94>)
     508:	f002 fcce 	bl	2ea8 <__delay_usec_veneer>
    char* data = m_uart->read();
     50c:	6920      	ldr	r0, [r4, #16]
     50e:	f001 fac3 	bl	1a98 <_ZN6uart_t4readEv>
     512:	1e05      	subs	r5, r0, #0
    if(!data) return;
     514:	d0e9      	beq.n	4ea <_ZN3GSM4PollEv+0x2a>
    if(strstr(data, "RING")) {
     516:	4910      	ldr	r1, [pc, #64]	; (558 <_ZN3GSM4PollEv+0x98>)
     518:	f001 feb6 	bl	2288 <strstr>
     51c:	2800      	cmp	r0, #0
     51e:	d009      	beq.n	534 <_ZN3GSM4PollEv+0x74>
        Command("ATH"); // Disconnect call
     520:	4b0e      	ldr	r3, [pc, #56]	; (55c <_ZN3GSM4PollEv+0x9c>)
     522:	2200      	movs	r2, #0
     524:	490e      	ldr	r1, [pc, #56]	; (560 <_ZN3GSM4PollEv+0xa0>)
     526:	0020      	movs	r0, r4
     528:	f7ff fe3a 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    free(data);
     52c:	0028      	movs	r0, r5
     52e:	f001 fd4b 	bl	1fc8 <free>
     532:	e7da      	b.n	4ea <_ZN3GSM4PollEv+0x2a>
    } else if(strstr(data, "+CMTI")) {
     534:	490b      	ldr	r1, [pc, #44]	; (564 <_ZN3GSM4PollEv+0xa4>)
     536:	0028      	movs	r0, r5
     538:	f001 fea6 	bl	2288 <strstr>
     53c:	2800      	cmp	r0, #0
     53e:	d0f5      	beq.n	52c <_ZN3GSM4PollEv+0x6c>
        ReadSMS(find_num(strstr(data, "+CMTI")));
     540:	f7ff fdc8 	bl	d4 <_ZL8find_numPKc>
     544:	0001      	movs	r1, r0
     546:	0020      	movs	r0, r4
     548:	f7ff ff5e 	bl	408 <_ZN3GSM7ReadSMSEi>
     54c:	e7ee      	b.n	52c <_ZN3GSM4PollEv+0x6c>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	00000206 	.word	0x00000206
     554:	000186a0 	.word	0x000186a0
     558:	00002b98 	.word	0x00002b98
     55c:	00000bb8 	.word	0x00000bb8
     560:	00002ba0 	.word	0x00002ba0
     564:	00002ba4 	.word	0x00002ba4

00000568 <_ZN3GSM7SendSMSEPKcS1_>:

bool GSM::SendSMS(const char* number, const char* text) {
     568:	b530      	push	{r4, r5, lr}
     56a:	b091      	sub	sp, #68	; 0x44
     56c:	0004      	movs	r4, r0
     56e:	000b      	movs	r3, r1
     570:	0015      	movs	r5, r2
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+CMGS=\"%s\"", number);
     572:	4a13      	ldr	r2, [pc, #76]	; (5c0 <_ZN3GSM7SendSMSEPKcS1_+0x58>)
     574:	2140      	movs	r1, #64	; 0x40
     576:	4668      	mov	r0, sp
     578:	f001 fdfe 	bl	2178 <sniprintf>
    if(!Command(buf))
     57c:	4b11      	ldr	r3, [pc, #68]	; (5c4 <_ZN3GSM7SendSMSEPKcS1_+0x5c>)
     57e:	2200      	movs	r2, #0
     580:	4669      	mov	r1, sp
     582:	0020      	movs	r0, r4
     584:	f7ff fe0c 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     588:	2800      	cmp	r0, #0
     58a:	d101      	bne.n	590 <_ZN3GSM7SendSMSEPKcS1_+0x28>
    m_uart->print(text);

    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
    m_uart->flush_rx();
    return success;
     58c:	b011      	add	sp, #68	; 0x44
     58e:	bd30      	pop	{r4, r5, pc}
    m_uart->print(text);
     590:	2201      	movs	r2, #1
     592:	4252      	negs	r2, r2
     594:	0029      	movs	r1, r5
     596:	6920      	ldr	r0, [r4, #16]
     598:	f001 f99e 	bl	18d8 <_ZN6uart_t5printEPKci>
    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
     59c:	4b0a      	ldr	r3, [pc, #40]	; (5c8 <_ZN3GSM7SendSMSEPKcS1_+0x60>)
     59e:	4a0b      	ldr	r2, [pc, #44]	; (5cc <_ZN3GSM7SendSMSEPKcS1_+0x64>)
     5a0:	490b      	ldr	r1, [pc, #44]	; (5d0 <_ZN3GSM7SendSMSEPKcS1_+0x68>)
     5a2:	0020      	movs	r0, r4
     5a4:	f7ff fdfc 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    m_uart->flush_rx();
     5a8:	6923      	ldr	r3, [r4, #16]
        m_rxhead = 0;
     5aa:	2200      	movs	r2, #0
     5ac:	2181      	movs	r1, #129	; 0x81
     5ae:	0089      	lsls	r1, r1, #2
     5b0:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     5b2:	4908      	ldr	r1, [pc, #32]	; (5d4 <_ZN3GSM7SendSMSEPKcS1_+0x6c>)
     5b4:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     5b6:	2100      	movs	r1, #0
     5b8:	2282      	movs	r2, #130	; 0x82
     5ba:	0092      	lsls	r2, r2, #2
     5bc:	5499      	strb	r1, [r3, r2]
    return success;
     5be:	e7e5      	b.n	58c <_ZN3GSM7SendSMSEPKcS1_+0x24>
     5c0:	00002bac 	.word	0x00002bac
     5c4:	00000bb8 	.word	0x00000bb8
     5c8:	0000ea60 	.word	0x0000ea60
     5cc:	00002bbc 	.word	0x00002bbc
     5d0:	00002bc4 	.word	0x00002bc4
     5d4:	00000206 	.word	0x00000206

000005d8 <_ZL9func_execP3GSMPKcS2_>:
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     5d8:	b570      	push	{r4, r5, r6, lr}
     5da:	0004      	movs	r4, r0
     5dc:	000d      	movs	r5, r1
     5de:	0011      	movs	r1, r2
    if(!gsm->Command(args)) {
     5e0:	4b0f      	ldr	r3, [pc, #60]	; (620 <_ZL9func_execP3GSMPKcS2_+0x48>)
     5e2:	2200      	movs	r2, #0
     5e4:	f7ff fddc 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     5e8:	2800      	cmp	r0, #0
     5ea:	d105      	bne.n	5f8 <_ZL9func_execP3GSMPKcS2_+0x20>
        gsm->SendSMS(sender, "Command timed out");
     5ec:	4a0d      	ldr	r2, [pc, #52]	; (624 <_ZL9func_execP3GSMPKcS2_+0x4c>)
     5ee:	0029      	movs	r1, r5
     5f0:	0020      	movs	r0, r4
     5f2:	f7ff ffb9 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
}
     5f6:	bd70      	pop	{r4, r5, r6, pc}
        char* resp = gsm->m_uart->read();
     5f8:	6920      	ldr	r0, [r4, #16]
     5fa:	f001 fa4d 	bl	1a98 <_ZN6uart_t4readEv>
     5fe:	1e06      	subs	r6, r0, #0
        if(!resp) {
     600:	d008      	beq.n	614 <_ZL9func_execP3GSMPKcS2_+0x3c>
            gsm->SendSMS(sender, resp);
     602:	0002      	movs	r2, r0
     604:	0029      	movs	r1, r5
     606:	0020      	movs	r0, r4
     608:	f7ff ffae 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
            free(resp);
     60c:	0030      	movs	r0, r6
     60e:	f001 fcdb 	bl	1fc8 <free>
}
     612:	e7f0      	b.n	5f6 <_ZL9func_execP3GSMPKcS2_+0x1e>
            gsm->SendSMS(sender, "uart->read() returned null");
     614:	4a04      	ldr	r2, [pc, #16]	; (628 <_ZL9func_execP3GSMPKcS2_+0x50>)
     616:	0029      	movs	r1, r5
     618:	0020      	movs	r0, r4
     61a:	f7ff ffa5 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
     61e:	e7ea      	b.n	5f6 <_ZL9func_execP3GSMPKcS2_+0x1e>
     620:	00000bb8 	.word	0x00000bb8
     624:	00002bc8 	.word	0x00002bc8
     628:	00002bdc 	.word	0x00002bdc

0000062c <_ZN4RF243csnEb>:
#define pgm_read_byte(x) (*(uint8_t*)(x))

/****************************************************************************/

void RF24::csn(bool mode)
{
     62c:	b510      	push	{r4, lr}
    }
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }
     62e:	68c3      	ldr	r3, [r0, #12]
     630:	6904      	ldr	r4, [r0, #16]
        if(en)
     632:	2900      	cmp	r1, #0
     634:	d00a      	beq.n	64c <_ZN4RF243csnEb+0x20>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     636:	2201      	movs	r2, #1
     638:	40a2      	lsls	r2, r4
     63a:	01db      	lsls	r3, r3, #7
     63c:	4907      	ldr	r1, [pc, #28]	; (65c <_ZN4RF243csnEb+0x30>)
     63e:	468c      	mov	ip, r1
     640:	4463      	add	r3, ip
     642:	619a      	str	r2, [r3, #24]
      _SPI.chipSelect(csn_pin);
    #endif // defined(RF24_RPi)

    #if !defined(RF24_LINUX)
    digitalWrite(csn_pin, mode);
    delay_usec(csDelay);
     644:	6a40      	ldr	r0, [r0, #36]	; 0x24
     646:	f002 fc2f 	bl	2ea8 <__delay_usec_veneer>
    #endif // !defined(RF24_LINUX)
}
     64a:	bd10      	pop	{r4, pc}
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     64c:	2201      	movs	r2, #1
     64e:	40a2      	lsls	r2, r4
     650:	01db      	lsls	r3, r3, #7
     652:	4902      	ldr	r1, [pc, #8]	; (65c <_ZN4RF243csnEb+0x30>)
     654:	468c      	mov	ip, r1
     656:	4463      	add	r3, ip
     658:	615a      	str	r2, [r3, #20]
     65a:	e7f3      	b.n	644 <_ZN4RF243csnEb+0x18>
     65c:	41004400 	.word	0x41004400

00000660 <_ZN4RF242ceEb>:

/****************************************************************************/

void RF24::ce(bool level)
{
     660:	b570      	push	{r4, r5, r6, lr}
     662:	b084      	sub	sp, #16
     664:	0004      	movs	r4, r0
     666:	000d      	movs	r5, r1
    //Allow for 3-pin use on ATTiny
    if (ce_pin != csn_pin) {
     668:	4669      	mov	r1, sp
     66a:	0003      	movs	r3, r0
     66c:	330c      	adds	r3, #12
     66e:	000a      	movs	r2, r1
     670:	cb41      	ldmia	r3!, {r0, r6}
     672:	c241      	stmia	r2!, {r0, r6}
        return !operator==(b);
     674:	2208      	movs	r2, #8
     676:	a802      	add	r0, sp, #8
     678:	f001 fcb0 	bl	1fdc <memcpy>
        return port == b.port && pin == b.pin;
     67c:	6863      	ldr	r3, [r4, #4]
     67e:	9a02      	ldr	r2, [sp, #8]
     680:	4293      	cmp	r3, r2
     682:	d00b      	beq.n	69c <_ZN4RF242ceEb+0x3c>
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }
     684:	68a1      	ldr	r1, [r4, #8]
        if(en)
     686:	2d00      	cmp	r5, #0
     688:	d00d      	beq.n	6a6 <_ZN4RF242ceEb+0x46>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     68a:	2201      	movs	r2, #1
     68c:	408a      	lsls	r2, r1
     68e:	01db      	lsls	r3, r3, #7
     690:	4909      	ldr	r1, [pc, #36]	; (6b8 <_ZN4RF242ceEb+0x58>)
     692:	468c      	mov	ip, r1
     694:	4463      	add	r3, ip
     696:	619a      	str	r2, [r3, #24]
        digitalWrite(ce_pin, level);
    }
}
     698:	b004      	add	sp, #16
     69a:	bd70      	pop	{r4, r5, r6, pc}
        return port == b.port && pin == b.pin;
     69c:	68a2      	ldr	r2, [r4, #8]
     69e:	9903      	ldr	r1, [sp, #12]
     6a0:	428a      	cmp	r2, r1
     6a2:	d1ef      	bne.n	684 <_ZN4RF242ceEb+0x24>
     6a4:	e7f8      	b.n	698 <_ZN4RF242ceEb+0x38>
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     6a6:	2201      	movs	r2, #1
     6a8:	408a      	lsls	r2, r1
     6aa:	01db      	lsls	r3, r3, #7
     6ac:	4902      	ldr	r1, [pc, #8]	; (6b8 <_ZN4RF242ceEb+0x58>)
     6ae:	468c      	mov	ip, r1
     6b0:	4463      	add	r3, ip
     6b2:	615a      	str	r2, [r3, #20]
     6b4:	e7f0      	b.n	698 <_ZN4RF242ceEb+0x38>
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	41004400 	.word	0x41004400

000006bc <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     6bc:	b570      	push	{r4, r5, r6, lr}
     6be:	0004      	movs	r4, r0
     6c0:	000d      	movs	r5, r1
    csn(LOW);
     6c2:	2100      	movs	r1, #0
     6c4:	f7ff ffb2 	bl	62c <_ZN4RF243csnEb>

    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    _SPI.Transfer(R_REGISTER | (REGISTER_MASK & reg));
     6c8:	211f      	movs	r1, #31
     6ca:	4029      	ands	r1, r5
     6cc:	6820      	ldr	r0, [r4, #0]
     6ce:	f000 fea9 	bl	1424 <_ZN5spi_t8TransferEh>
    result = _SPI.Transfer(0xff);
     6d2:	21ff      	movs	r1, #255	; 0xff
     6d4:	6820      	ldr	r0, [r4, #0]
     6d6:	f000 fea5 	bl	1424 <_ZN5spi_t8TransferEh>
     6da:	0005      	movs	r5, r0
    csn(HIGH);
     6dc:	2101      	movs	r1, #1
     6de:	0020      	movs	r0, r4
     6e0:	f7ff ffa4 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return result;
}
     6e4:	0028      	movs	r0, r5
     6e6:	bd70      	pop	{r4, r5, r6, pc}

000006e8 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6ea:	46ce      	mov	lr, r9
     6ec:	4647      	mov	r7, r8
     6ee:	b580      	push	{r7, lr}
     6f0:	0007      	movs	r7, r0
     6f2:	000c      	movs	r4, r1
     6f4:	0016      	movs	r6, r2
     6f6:	001d      	movs	r5, r3
    csn(LOW);
     6f8:	2100      	movs	r1, #0
     6fa:	f7ff ff97 	bl	62c <_ZN4RF243csnEb>
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     6fe:	211f      	movs	r1, #31
     700:	4021      	ands	r1, r4
     702:	2320      	movs	r3, #32
     704:	4319      	orrs	r1, r3
     706:	b2c9      	uxtb	r1, r1
     708:	6838      	ldr	r0, [r7, #0]
     70a:	f000 fe8b 	bl	1424 <_ZN5spi_t8TransferEh>
     70e:	4681      	mov	r9, r0
    while (len--) {
     710:	1e6c      	subs	r4, r5, #1
     712:	b2e4      	uxtb	r4, r4
     714:	2d00      	cmp	r5, #0
     716:	d008      	beq.n	72a <_ZN4RF2414write_registerEhPKhh+0x42>
        _SPI.Transfer(*buf++);
     718:	1c73      	adds	r3, r6, #1
     71a:	4698      	mov	r8, r3
     71c:	7831      	ldrb	r1, [r6, #0]
     71e:	6838      	ldr	r0, [r7, #0]
     720:	f000 fe80 	bl	1424 <_ZN5spi_t8TransferEh>
    while (len--) {
     724:	0025      	movs	r5, r4
        _SPI.Transfer(*buf++);
     726:	4646      	mov	r6, r8
    while (len--) {
     728:	e7f2      	b.n	710 <_ZN4RF2414write_registerEhPKhh+0x28>
    csn(HIGH);
     72a:	2101      	movs	r1, #1
     72c:	0038      	movs	r0, r7
     72e:	f7ff ff7d 	bl	62c <_ZN4RF243csnEb>
    }
    endTransaction();
    #endif // !defined(RF24_LINUX)

    return status;
}
     732:	4648      	mov	r0, r9
     734:	bc0c      	pop	{r2, r3}
     736:	4690      	mov	r8, r2
     738:	4699      	mov	r9, r3
     73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000073c <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     73c:	b570      	push	{r4, r5, r6, lr}
     73e:	0004      	movs	r4, r0
     740:	000d      	movs	r5, r1
     742:	0016      	movs	r6, r2
    csn(LOW);
     744:	2100      	movs	r1, #0
     746:	f7ff ff71 	bl	62c <_ZN4RF243csnEb>
    status = *prx++; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     74a:	211f      	movs	r1, #31
     74c:	4029      	ands	r1, r5
     74e:	2320      	movs	r3, #32
     750:	4319      	orrs	r1, r3
     752:	b2c9      	uxtb	r1, r1
     754:	6820      	ldr	r0, [r4, #0]
     756:	f000 fe65 	bl	1424 <_ZN5spi_t8TransferEh>
     75a:	0005      	movs	r5, r0
    _SPI.Transfer(value);
     75c:	0031      	movs	r1, r6
     75e:	6820      	ldr	r0, [r4, #0]
     760:	f000 fe60 	bl	1424 <_ZN5spi_t8TransferEh>
    csn(HIGH);
     764:	2101      	movs	r1, #1
     766:	0020      	movs	r0, r4
     768:	f7ff ff60 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     76c:	0028      	movs	r0, r5
     76e:	bd70      	pop	{r4, r5, r6, pc}

00000770 <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
     770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     772:	46ce      	mov	lr, r9
     774:	4647      	mov	r7, r8
     776:	b580      	push	{r7, lr}
     778:	0007      	movs	r7, r0
     77a:	000c      	movs	r4, r1
     77c:	0016      	movs	r6, r2
     77e:	4698      	mov	r8, r3
    uint8_t status;
    const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

    data_len = rf24_min(data_len, payload_size);
     780:	7dc5      	ldrb	r5, [r0, #23]
     782:	4295      	cmp	r5, r2
     784:	d800      	bhi.n	788 <_ZN4RF2413write_payloadEPKvhh+0x18>
     786:	002e      	movs	r6, r5
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     788:	7e3b      	ldrb	r3, [r7, #24]
     78a:	2b00      	cmp	r3, #0
     78c:	d117      	bne.n	7be <_ZN4RF2413write_payloadEPKvhh+0x4e>
     78e:	1bad      	subs	r5, r5, r6
     790:	b2ed      	uxtb	r5, r5
    csn(LOW);
     792:	2100      	movs	r1, #0
     794:	0038      	movs	r0, r7
     796:	f7ff ff49 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(writeType);
     79a:	4641      	mov	r1, r8
     79c:	6838      	ldr	r0, [r7, #0]
     79e:	f000 fe41 	bl	1424 <_ZN5spi_t8TransferEh>
     7a2:	4680      	mov	r8, r0
    while (data_len--) {
     7a4:	1e73      	subs	r3, r6, #1
     7a6:	b2db      	uxtb	r3, r3
     7a8:	4699      	mov	r9, r3
     7aa:	2e00      	cmp	r6, #0
     7ac:	d009      	beq.n	7c2 <_ZN4RF2413write_payloadEPKvhh+0x52>
        _SPI.Transfer(*current++);
     7ae:	1c66      	adds	r6, r4, #1
     7b0:	7821      	ldrb	r1, [r4, #0]
     7b2:	6838      	ldr	r0, [r7, #0]
     7b4:	f000 fe36 	bl	1424 <_ZN5spi_t8TransferEh>
     7b8:	0034      	movs	r4, r6
    while (data_len--) {
     7ba:	464e      	mov	r6, r9
     7bc:	e7f2      	b.n	7a4 <_ZN4RF2413write_payloadEPKvhh+0x34>
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     7be:	2500      	movs	r5, #0
     7c0:	e7e7      	b.n	792 <_ZN4RF2413write_payloadEPKvhh+0x22>
    }
    while (blank_len--) {
     7c2:	1e6c      	subs	r4, r5, #1
     7c4:	b2e4      	uxtb	r4, r4
     7c6:	2d00      	cmp	r5, #0
     7c8:	d005      	beq.n	7d6 <_ZN4RF2413write_payloadEPKvhh+0x66>
        _SPI.Transfer(0);
     7ca:	2100      	movs	r1, #0
     7cc:	6838      	ldr	r0, [r7, #0]
     7ce:	f000 fe29 	bl	1424 <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     7d2:	0025      	movs	r5, r4
     7d4:	e7f5      	b.n	7c2 <_ZN4RF2413write_payloadEPKvhh+0x52>
    csn(HIGH);
     7d6:	2101      	movs	r1, #1
     7d8:	0038      	movs	r0, r7
     7da:	f7ff ff27 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     7de:	4640      	mov	r0, r8
     7e0:	bc0c      	pop	{r2, r3}
     7e2:	4690      	mov	r8, r2
     7e4:	4699      	mov	r9, r3
     7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000007e8 <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t data_len)
{
     7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7ea:	46ce      	mov	lr, r9
     7ec:	4647      	mov	r7, r8
     7ee:	b580      	push	{r7, lr}
     7f0:	0007      	movs	r7, r0
     7f2:	000c      	movs	r4, r1
     7f4:	0016      	movs	r6, r2
    uint8_t status;
    uint8_t* current = reinterpret_cast<uint8_t*>(buf);

    if (data_len > payload_size) {
     7f6:	7dc5      	ldrb	r5, [r0, #23]
     7f8:	4295      	cmp	r5, r2
     7fa:	d200      	bcs.n	7fe <_ZN4RF2412read_payloadEPvh+0x16>
        data_len = payload_size;
     7fc:	002e      	movs	r6, r5
    }
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     7fe:	7e3b      	ldrb	r3, [r7, #24]
     800:	2b00      	cmp	r3, #0
     802:	d118      	bne.n	836 <_ZN4RF2412read_payloadEPvh+0x4e>
     804:	1bad      	subs	r5, r5, r6
     806:	b2ed      	uxtb	r5, r5
    csn(LOW);
     808:	2100      	movs	r1, #0
     80a:	0038      	movs	r0, r7
     80c:	f7ff ff0e 	bl	62c <_ZN4RF243csnEb>
    }
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(R_RX_PAYLOAD);
     810:	2161      	movs	r1, #97	; 0x61
     812:	6838      	ldr	r0, [r7, #0]
     814:	f000 fe06 	bl	1424 <_ZN5spi_t8TransferEh>
     818:	4680      	mov	r8, r0
    while (data_len--) {
     81a:	1e73      	subs	r3, r6, #1
     81c:	b2db      	uxtb	r3, r3
     81e:	4699      	mov	r9, r3
     820:	2e00      	cmp	r6, #0
     822:	d00a      	beq.n	83a <_ZN4RF2412read_payloadEPvh+0x52>
        *current++ = _SPI.Transfer(0xFF);
     824:	1c66      	adds	r6, r4, #1
     826:	21ff      	movs	r1, #255	; 0xff
     828:	6838      	ldr	r0, [r7, #0]
     82a:	f000 fdfb 	bl	1424 <_ZN5spi_t8TransferEh>
     82e:	7020      	strb	r0, [r4, #0]
     830:	0034      	movs	r4, r6
    while (data_len--) {
     832:	464e      	mov	r6, r9
     834:	e7f1      	b.n	81a <_ZN4RF2412read_payloadEPvh+0x32>
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     836:	2500      	movs	r5, #0
     838:	e7e6      	b.n	808 <_ZN4RF2412read_payloadEPvh+0x20>
    }
    while (blank_len--) {
     83a:	1e6c      	subs	r4, r5, #1
     83c:	b2e4      	uxtb	r4, r4
     83e:	2d00      	cmp	r5, #0
     840:	d005      	beq.n	84e <_ZN4RF2412read_payloadEPvh+0x66>
        _SPI.Transfer(0xff);
     842:	21ff      	movs	r1, #255	; 0xff
     844:	6838      	ldr	r0, [r7, #0]
     846:	f000 fded 	bl	1424 <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     84a:	0025      	movs	r5, r4
     84c:	e7f5      	b.n	83a <_ZN4RF2412read_payloadEPvh+0x52>
    csn(HIGH);
     84e:	2101      	movs	r1, #1
     850:	0038      	movs	r0, r7
     852:	f7ff feeb 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     856:	4640      	mov	r0, r8
     858:	bc0c      	pop	{r2, r3}
     85a:	4690      	mov	r8, r2
     85c:	4699      	mov	r9, r3
     85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000860 <_ZN4RF248spiTransEh>:
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd)
{
     860:	b570      	push	{r4, r5, r6, lr}
     862:	0004      	movs	r4, r0
     864:	000d      	movs	r5, r1
    csn(LOW);
     866:	2100      	movs	r1, #0
     868:	f7ff fee0 	bl	62c <_ZN4RF243csnEb>

    uint8_t status;

    beginTransaction();
    status = _SPI.Transfer(cmd);
     86c:	0029      	movs	r1, r5
     86e:	6820      	ldr	r0, [r4, #0]
     870:	f000 fdd8 	bl	1424 <_ZN5spi_t8TransferEh>
     874:	0005      	movs	r5, r0
    csn(HIGH);
     876:	2101      	movs	r1, #1
     878:	0020      	movs	r0, r4
     87a:	f7ff fed7 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    return status;
}
     87e:	0028      	movs	r0, r5
     880:	bd70      	pop	{r4, r5, r6, pc}

00000882 <_ZN4RF248flush_rxEv>:
{
     882:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_RX);
     884:	21e2      	movs	r1, #226	; 0xe2
     886:	f7ff ffeb 	bl	860 <_ZN4RF248spiTransEh>
}
     88a:	bd10      	pop	{r4, pc}

0000088c <_ZN4RF248flush_txEv>:
{
     88c:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_TX);
     88e:	21e1      	movs	r1, #225	; 0xe1
     890:	f7ff ffe6 	bl	860 <_ZN4RF248spiTransEh>
}
     894:	bd10      	pop	{r4, pc}

00000896 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
     896:	b510      	push	{r4, lr}
    return spiTrans(RF24_NOP);
     898:	21ff      	movs	r1, #255	; 0xff
     89a:	f7ff ffe1 	bl	860 <_ZN4RF248spiTransEh>
}
     89e:	bd10      	pop	{r4, pc}

000008a0 <_ZN4RF24C1E6gpio_tS0_R5spi_t>:

#endif

/****************************************************************************/

RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     8a0:	b082      	sub	sp, #8
     8a2:	b530      	push	{r4, r5, lr}
     8a4:	b083      	sub	sp, #12
     8a6:	466c      	mov	r4, sp
     8a8:	9100      	str	r1, [sp, #0]
     8aa:	6062      	str	r2, [r4, #4]
     8ac:	aa07      	add	r2, sp, #28
     8ae:	9307      	str	r3, [sp, #28]
        :_SPI(_spi), ce_pin(_cepin), csn_pin(_cspin), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5),
         csDelay(5)//,pipe0_reading_address(0)
     8b0:	0003      	movs	r3, r0
     8b2:	9909      	ldr	r1, [sp, #36]	; 0x24
     8b4:	c302      	stmia	r3!, {r1}
     8b6:	cc22      	ldmia	r4!, {r1, r5}
     8b8:	c322      	stmia	r3!, {r1, r5}
     8ba:	0003      	movs	r3, r0
     8bc:	330c      	adds	r3, #12
     8be:	ca12      	ldmia	r2!, {r1, r4}
     8c0:	c312      	stmia	r3!, {r1, r4}
     8c2:	2300      	movs	r3, #0
     8c4:	7583      	strb	r3, [r0, #22]
     8c6:	2220      	movs	r2, #32
     8c8:	75c2      	strb	r2, [r0, #23]
     8ca:	7603      	strb	r3, [r0, #24]
     8cc:	3a1b      	subs	r2, #27
     8ce:	7782      	strb	r2, [r0, #30]
     8d0:	6242      	str	r2, [r0, #36]	; 0x24
{
    pipe0_reading_address[0] = 0;
     8d2:	7643      	strb	r3, [r0, #25]
}
     8d4:	b003      	add	sp, #12
     8d6:	bc30      	pop	{r4, r5}
     8d8:	bc08      	pop	{r3}
     8da:	b002      	add	sp, #8
     8dc:	4718      	bx	r3

000008de <_ZN4RF2410setChannelEh>:

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     8de:	b510      	push	{r4, lr}
     8e0:	000a      	movs	r2, r1
    const uint8_t max_channel = 125;
    write_register(RF_CH, rf24_min(channel, max_channel));
     8e2:	297c      	cmp	r1, #124	; 0x7c
     8e4:	d900      	bls.n	8e8 <_ZN4RF2410setChannelEh+0xa>
     8e6:	227d      	movs	r2, #125	; 0x7d
     8e8:	2105      	movs	r1, #5
     8ea:	f7ff ff27 	bl	73c <_ZN4RF2414write_registerEhh>
}
     8ee:	bd10      	pop	{r4, pc}

000008f0 <_ZN4RF2414setPayloadSizeEh>:

/****************************************************************************/

void RF24::setPayloadSize(uint8_t size)
{
    payload_size = rf24_min(size, 32);
     8f0:	1c0b      	adds	r3, r1, #0
     8f2:	2920      	cmp	r1, #32
     8f4:	d900      	bls.n	8f8 <_ZN4RF2414setPayloadSizeEh+0x8>
     8f6:	2320      	movs	r3, #32
     8f8:	75c3      	strb	r3, [r0, #23]
}
     8fa:	4770      	bx	lr

000008fc <_ZN4RF2413stopListeningEv>:
/****************************************************************************/
static const uint8_t child_pipe_enable[]
PROGMEM = {ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5};

void RF24::stopListening(void)
{
     8fc:	b510      	push	{r4, lr}
     8fe:	0004      	movs	r4, r0
    ce(LOW);
     900:	2100      	movs	r1, #0
     902:	f7ff fead 	bl	660 <_ZN4RF242ceEb>

    delay_usec(txDelay);
     906:	6a20      	ldr	r0, [r4, #32]
     908:	f002 face 	bl	2ea8 <__delay_usec_veneer>

    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
     90c:	211d      	movs	r1, #29
     90e:	0020      	movs	r0, r4
     910:	f7ff fed4 	bl	6bc <_ZN4RF2413read_registerEh>
     914:	0783      	lsls	r3, r0, #30
     916:	d417      	bmi.n	948 <_ZN4RF2413stopListeningEv+0x4c>
        delay_usec(txDelay); //200
        flush_tx();
    }
    //flush_rx();
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
     918:	2100      	movs	r1, #0
     91a:	0020      	movs	r0, r4
     91c:	f7ff fece 	bl	6bc <_ZN4RF2413read_registerEh>
     920:	2301      	movs	r3, #1
     922:	4398      	bics	r0, r3
     924:	b2c2      	uxtb	r2, r0
     926:	2100      	movs	r1, #0
     928:	0020      	movs	r0, r4
     92a:	f7ff ff07 	bl	73c <_ZN4RF2414write_registerEhh>
    if (ce_pin == csn_pin) {
      powerDown();
      powerUp();
    }
    #endif
    write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0]))); // Enable RX on pipe0
     92e:	2102      	movs	r1, #2
     930:	0020      	movs	r0, r4
     932:	f7ff fec3 	bl	6bc <_ZN4RF2413read_registerEh>
     936:	b242      	sxtb	r2, r0
     938:	2001      	movs	r0, #1
     93a:	4302      	orrs	r2, r0
     93c:	b2d2      	uxtb	r2, r2
     93e:	2102      	movs	r1, #2
     940:	0020      	movs	r0, r4
     942:	f7ff fefb 	bl	73c <_ZN4RF2414write_registerEhh>

    //delayMicroseconds(100);

}
     946:	bd10      	pop	{r4, pc}
        delay_usec(txDelay); //200
     948:	6a20      	ldr	r0, [r4, #32]
     94a:	f002 faad 	bl	2ea8 <__delay_usec_veneer>
        flush_tx();
     94e:	0020      	movs	r0, r4
     950:	f7ff ff9c 	bl	88c <_ZN4RF248flush_txEv>
     954:	e7e0      	b.n	918 <_ZN4RF2413stopListeningEv+0x1c>
     956:	Address 0x00000956 is out of bounds.


00000958 <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
     958:	b510      	push	{r4, lr}
     95a:	0004      	movs	r4, r0
    uint8_t cfg = read_register(NRF_CONFIG);
     95c:	2100      	movs	r1, #0
     95e:	f7ff fead 	bl	6bc <_ZN4RF2413read_registerEh>

    // if not powered up then power up and wait for the radio to initialize
    if (!(cfg & _BV(PWR_UP))) {
     962:	0783      	lsls	r3, r0, #30
     964:	d500      	bpl.n	968 <_ZN4RF247powerUpEv+0x10>
        // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
        // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
        // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
        delay_usec(5000);
    }
}
     966:	bd10      	pop	{r4, pc}
        write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
     968:	2202      	movs	r2, #2
     96a:	4302      	orrs	r2, r0
     96c:	b2d2      	uxtb	r2, r2
     96e:	2100      	movs	r1, #0
     970:	0020      	movs	r0, r4
     972:	f7ff fee3 	bl	73c <_ZN4RF2414write_registerEhh>
        delay_usec(5000);
     976:	4802      	ldr	r0, [pc, #8]	; (980 <_ZN4RF247powerUpEv+0x28>)
     978:	f002 fa96 	bl	2ea8 <__delay_usec_veneer>
}
     97c:	e7f3      	b.n	966 <_ZN4RF247powerUpEv+0xe>
     97e:	46c0      	nop			; (mov r8, r8)
     980:	00001388 	.word	0x00001388

00000984 <_ZN4RF249errNotifyEv>:
{
    #if defined(SERIAL_DEBUG) || defined(RF24_LINUX)
    printf_P(PSTR("RF24 HARDWARE FAIL: Radio not responding, verify pin connections, wiring, etc.\r\n"));
    #endif
    #if defined(FAILURE_HANDLING)
    failureDetected = 1;
     984:	2301      	movs	r3, #1
     986:	77c3      	strb	r3, [r0, #31]
    #else
    delay(5000);
    #endif
}
     988:	4770      	bx	lr

0000098a <_ZN4RF2414startFastWriteEPKvhbb>:
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24::startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{ //TMRh20
     98a:	b570      	push	{r4, r5, r6, lr}
     98c:	0004      	movs	r4, r0
     98e:	a804      	add	r0, sp, #16
     990:	7805      	ldrb	r5, [r0, #0]

    //write_payload( buf,len);
    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
     992:	2b00      	cmp	r3, #0
     994:	d006      	beq.n	9a4 <_ZN4RF2414startFastWriteEPKvhbb+0x1a>
     996:	23b0      	movs	r3, #176	; 0xb0
     998:	0020      	movs	r0, r4
     99a:	f7ff fee9 	bl	770 <_ZN4RF2413write_payloadEPKvhh>
    if (startTx) {
     99e:	2d00      	cmp	r5, #0
     9a0:	d102      	bne.n	9a8 <_ZN4RF2414startFastWriteEPKvhbb+0x1e>
        ce(HIGH);
    }

}
     9a2:	bd70      	pop	{r4, r5, r6, pc}
    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
     9a4:	23a0      	movs	r3, #160	; 0xa0
     9a6:	e7f7      	b.n	998 <_ZN4RF2414startFastWriteEPKvhbb+0xe>
        ce(HIGH);
     9a8:	2101      	movs	r1, #1
     9aa:	0020      	movs	r0, r4
     9ac:	f7ff fe58 	bl	660 <_ZN4RF242ceEb>
}
     9b0:	e7f7      	b.n	9a2 <_ZN4RF2414startFastWriteEPKvhbb+0x18>

000009b2 <_ZN4RF245writeEPKvhb>:
{
     9b2:	b530      	push	{r4, r5, lr}
     9b4:	b083      	sub	sp, #12
     9b6:	0004      	movs	r4, r0
    startFastWrite(buf, len, multicast);
     9b8:	2001      	movs	r0, #1
     9ba:	9000      	str	r0, [sp, #0]
     9bc:	0020      	movs	r0, r4
     9be:	f7ff ffe4 	bl	98a <_ZN4RF2414startFastWriteEPKvhbb>
    uint32_t timer = millis();
     9c2:	f000 fe19 	bl	15f8 <millis>
     9c6:	0005      	movs	r5, r0
    while (!(get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
     9c8:	0020      	movs	r0, r4
     9ca:	f7ff ff64 	bl	896 <_ZN4RF2410get_statusEv>
     9ce:	2330      	movs	r3, #48	; 0x30
     9d0:	4203      	tst	r3, r0
     9d2:	d10a      	bne.n	9ea <_ZN4RF245writeEPKvhb+0x38>
        if (millis() - timer > 95) {
     9d4:	f000 fe10 	bl	15f8 <millis>
     9d8:	1b40      	subs	r0, r0, r5
     9da:	285f      	cmp	r0, #95	; 0x5f
     9dc:	d9f4      	bls.n	9c8 <_ZN4RF245writeEPKvhb+0x16>
            errNotify();
     9de:	0020      	movs	r0, r4
     9e0:	f7ff ffd0 	bl	984 <_ZN4RF249errNotifyEv>
            return 0;
     9e4:	2000      	movs	r0, #0
}
     9e6:	b003      	add	sp, #12
     9e8:	bd30      	pop	{r4, r5, pc}
    ce(LOW);
     9ea:	2100      	movs	r1, #0
     9ec:	0020      	movs	r0, r4
     9ee:	f7ff fe37 	bl	660 <_ZN4RF242ceEb>
    uint8_t status = write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     9f2:	2270      	movs	r2, #112	; 0x70
     9f4:	2107      	movs	r1, #7
     9f6:	0020      	movs	r0, r4
     9f8:	f7ff fea0 	bl	73c <_ZN4RF2414write_registerEhh>
    if (status & _BV(MAX_RT)) {
     9fc:	06c3      	lsls	r3, r0, #27
     9fe:	d401      	bmi.n	a04 <_ZN4RF245writeEPKvhb+0x52>
    return 1;
     a00:	2001      	movs	r0, #1
     a02:	e7f0      	b.n	9e6 <_ZN4RF245writeEPKvhb+0x34>
        flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
     a04:	0020      	movs	r0, r4
     a06:	f7ff ff41 	bl	88c <_ZN4RF248flush_txEv>
        return 0;
     a0a:	2000      	movs	r0, #0
     a0c:	e7eb      	b.n	9e6 <_ZN4RF245writeEPKvhb+0x34>

00000a0e <_ZN4RF245writeEPKvh>:
{
     a0e:	b510      	push	{r4, lr}
    return write(buf, len, 0);
     a10:	2300      	movs	r3, #0
     a12:	f7ff ffce 	bl	9b2 <_ZN4RF245writeEPKvhb>
}
     a16:	bd10      	pop	{r4, pc}

00000a18 <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     a18:	b570      	push	{r4, r5, r6, lr}
     a1a:	0004      	movs	r4, r0
     a1c:	000d      	movs	r5, r1
    if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY))) {
     a1e:	2117      	movs	r1, #23
     a20:	f7ff fe4c 	bl	6bc <_ZN4RF2413read_registerEh>
     a24:	07c3      	lsls	r3, r0, #31
     a26:	d501      	bpl.n	a2c <_ZN4RF249availableEPh+0x14>
            *pipe_num = (status >> RX_P_NO) & 0x07;
        }
        return 1;
    }

    return 0;
     a28:	2000      	movs	r0, #0


}
     a2a:	bd70      	pop	{r4, r5, r6, pc}
        if (pipe_num) {
     a2c:	2d00      	cmp	r5, #0
     a2e:	d006      	beq.n	a3e <_ZN4RF249availableEPh+0x26>
            uint8_t status = get_status();
     a30:	0020      	movs	r0, r4
     a32:	f7ff ff30 	bl	896 <_ZN4RF2410get_statusEv>
            *pipe_num = (status >> RX_P_NO) & 0x07;
     a36:	1043      	asrs	r3, r0, #1
     a38:	2007      	movs	r0, #7
     a3a:	4018      	ands	r0, r3
     a3c:	7028      	strb	r0, [r5, #0]
        return 1;
     a3e:	2001      	movs	r0, #1
     a40:	e7f3      	b.n	a2a <_ZN4RF249availableEPh+0x12>

00000a42 <_ZN4RF249availableEv>:
{
     a42:	b510      	push	{r4, lr}
    return available(0);
     a44:	2100      	movs	r1, #0
     a46:	f7ff ffe7 	bl	a18 <_ZN4RF249availableEPh>
}
     a4a:	bd10      	pop	{r4, pc}

00000a4c <_ZN4RF244readEPvh>:

/****************************************************************************/

void RF24::read(void* buf, uint8_t len)
{
     a4c:	b510      	push	{r4, lr}
     a4e:	0004      	movs	r4, r0

    // Fetch the payload
    read_payload(buf, len);
     a50:	f7ff feca 	bl	7e8 <_ZN4RF2412read_payloadEPvh>

    //Clear the two possible interrupt flags with one command
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
     a54:	2270      	movs	r2, #112	; 0x70
     a56:	2107      	movs	r1, #7
     a58:	0020      	movs	r0, r4
     a5a:	f7ff fe6f 	bl	73c <_ZN4RF2414write_registerEhh>

}
     a5e:	bd10      	pop	{r4, pc}

00000a60 <_ZN4RF2415openWritingPipeEy>:
}

/****************************************************************************/

void RF24::openWritingPipe(uint64_t value)
{
     a60:	b510      	push	{r4, lr}
     a62:	b082      	sub	sp, #8
     a64:	0004      	movs	r4, r0
     a66:	9200      	str	r2, [sp, #0]
     a68:	9301      	str	r3, [sp, #4]
    // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
    // expects it LSB first too, so we're good.

    write_register(RX_ADDR_P0, reinterpret_cast<uint8_t*>(&value), addr_width);
     a6a:	7f83      	ldrb	r3, [r0, #30]
     a6c:	466a      	mov	r2, sp
     a6e:	210a      	movs	r1, #10
     a70:	f7ff fe3a 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
    write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), addr_width);
     a74:	7fa3      	ldrb	r3, [r4, #30]
     a76:	466a      	mov	r2, sp
     a78:	2110      	movs	r1, #16
     a7a:	0020      	movs	r0, r4
     a7c:	f7ff fe34 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>


    //const uint8_t max_payload_size = 32;
    //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
    write_register(RX_PW_P0, payload_size);
     a80:	7de2      	ldrb	r2, [r4, #23]
     a82:	2111      	movs	r1, #17
     a84:	0020      	movs	r0, r4
     a86:	f7ff fe59 	bl	73c <_ZN4RF2414write_registerEhh>
}
     a8a:	b002      	add	sp, #8
     a8c:	bd10      	pop	{r4, pc}
     a8e:	Address 0x00000a8e is out of bounds.


00000a90 <_ZN4RF2415openReadingPipeEhy>:
PROGMEM = {RX_ADDR_P0, RX_ADDR_P1, RX_ADDR_P2, RX_ADDR_P3, RX_ADDR_P4, RX_ADDR_P5};
static const uint8_t child_payload_size[]
PROGMEM = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};

void RF24::openReadingPipe(uint8_t child, uint64_t address)
{
     a90:	b530      	push	{r4, r5, lr}
     a92:	b083      	sub	sp, #12
     a94:	0005      	movs	r5, r0
     a96:	000c      	movs	r4, r1
     a98:	9200      	str	r2, [sp, #0]
     a9a:	9301      	str	r3, [sp, #4]
    // If this is pipe 0, cache the address.  This is needed because
    // openWritingPipe() will overwrite the pipe 0 address, so
    // startListening() will have to restore it.
    if (child == 0) {
     a9c:	2900      	cmp	r1, #0
     a9e:	d021      	beq.n	ae4 <_ZN4RF2415openReadingPipeEhy+0x54>
        memcpy(pipe0_reading_address, &address, addr_width);
    }

    if (child <= 6) {
     aa0:	2c06      	cmp	r4, #6
     aa2:	d81d      	bhi.n	ae0 <_ZN4RF2415openReadingPipeEhy+0x50>
        // For pipes 2-5, only write the LSB
        if (child < 2) {
     aa4:	2c01      	cmp	r4, #1
     aa6:	d923      	bls.n	af0 <_ZN4RF2415openReadingPipeEhy+0x60>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
        } else {
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
     aa8:	4b15      	ldr	r3, [pc, #84]	; (b00 <_ZN4RF2415openReadingPipeEhy+0x70>)
     aaa:	5d19      	ldrb	r1, [r3, r4]
     aac:	2301      	movs	r3, #1
     aae:	466a      	mov	r2, sp
     ab0:	0028      	movs	r0, r5
     ab2:	f7ff fe19 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
        }

        write_register(pgm_read_byte(&child_payload_size[child]), payload_size);
     ab6:	7dea      	ldrb	r2, [r5, #23]
     ab8:	4b12      	ldr	r3, [pc, #72]	; (b04 <_ZN4RF2415openReadingPipeEhy+0x74>)
     aba:	5d19      	ldrb	r1, [r3, r4]
     abc:	0028      	movs	r0, r5
     abe:	f7ff fe3d 	bl	73c <_ZN4RF2414write_registerEhh>

        // Note it would be more efficient to set all of the bits for all open
        // pipes at once.  However, I thought it would make the calling code
        // more simple to do it this way.
        write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
     ac2:	2102      	movs	r1, #2
     ac4:	0028      	movs	r0, r5
     ac6:	f7ff fdf9 	bl	6bc <_ZN4RF2413read_registerEh>
     aca:	b242      	sxtb	r2, r0
     acc:	4b0e      	ldr	r3, [pc, #56]	; (b08 <_ZN4RF2415openReadingPipeEhy+0x78>)
     ace:	5d1b      	ldrb	r3, [r3, r4]
     ad0:	2001      	movs	r0, #1
     ad2:	4098      	lsls	r0, r3
     ad4:	4302      	orrs	r2, r0
     ad6:	b2d2      	uxtb	r2, r2
     ad8:	2102      	movs	r1, #2
     ada:	0028      	movs	r0, r5
     adc:	f7ff fe2e 	bl	73c <_ZN4RF2414write_registerEhh>
    }
}
     ae0:	b003      	add	sp, #12
     ae2:	bd30      	pop	{r4, r5, pc}
        memcpy(pipe0_reading_address, &address, addr_width);
     ae4:	7f82      	ldrb	r2, [r0, #30]
     ae6:	4669      	mov	r1, sp
     ae8:	3019      	adds	r0, #25
     aea:	f001 fa77 	bl	1fdc <memcpy>
     aee:	e7d7      	b.n	aa0 <_ZN4RF2415openReadingPipeEhy+0x10>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
     af0:	7fab      	ldrb	r3, [r5, #30]
     af2:	4a03      	ldr	r2, [pc, #12]	; (b00 <_ZN4RF2415openReadingPipeEhy+0x70>)
     af4:	5d11      	ldrb	r1, [r2, r4]
     af6:	466a      	mov	r2, sp
     af8:	0028      	movs	r0, r5
     afa:	f7ff fdf5 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
     afe:	e7da      	b.n	ab6 <_ZN4RF2415openReadingPipeEhy+0x26>
     b00:	00002bf8 	.word	0x00002bf8
     b04:	00002c08 	.word	0x00002c08
     b08:	00002c00 	.word	0x00002c00

00000b0c <_ZN4RF2416closeReadingPipeEh>:
}

/****************************************************************************/

void RF24::closeReadingPipe(uint8_t pipe)
{
     b0c:	b570      	push	{r4, r5, r6, lr}
     b0e:	0004      	movs	r4, r0
     b10:	000d      	movs	r5, r1
    write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
     b12:	2102      	movs	r1, #2
     b14:	f7ff fdd2 	bl	6bc <_ZN4RF2413read_registerEh>
     b18:	b242      	sxtb	r2, r0
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <_ZN4RF2416closeReadingPipeEh+0x24>)
     b1c:	5d59      	ldrb	r1, [r3, r5]
     b1e:	2301      	movs	r3, #1
     b20:	408b      	lsls	r3, r1
     b22:	439a      	bics	r2, r3
     b24:	b2d2      	uxtb	r2, r2
     b26:	2102      	movs	r1, #2
     b28:	0020      	movs	r0, r4
     b2a:	f7ff fe07 	bl	73c <_ZN4RF2414write_registerEhh>
}
     b2e:	bd70      	pop	{r4, r5, r6, pc}
     b30:	00002c00 	.word	0x00002c00

00000b34 <_ZN4RF2414startListeningEv>:
{
     b34:	b510      	push	{r4, lr}
     b36:	0004      	movs	r4, r0
    powerUp();
     b38:	f7ff ff0e 	bl	958 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
     b3c:	2100      	movs	r1, #0
     b3e:	0020      	movs	r0, r4
     b40:	f7ff fdbc 	bl	6bc <_ZN4RF2413read_registerEh>
     b44:	2201      	movs	r2, #1
     b46:	4302      	orrs	r2, r0
     b48:	b2d2      	uxtb	r2, r2
     b4a:	2100      	movs	r1, #0
     b4c:	0020      	movs	r0, r4
     b4e:	f7ff fdf5 	bl	73c <_ZN4RF2414write_registerEhh>
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     b52:	2270      	movs	r2, #112	; 0x70
     b54:	2107      	movs	r1, #7
     b56:	0020      	movs	r0, r4
     b58:	f7ff fdf0 	bl	73c <_ZN4RF2414write_registerEhh>
    ce(HIGH);
     b5c:	2101      	movs	r1, #1
     b5e:	0020      	movs	r0, r4
     b60:	f7ff fd7e 	bl	660 <_ZN4RF242ceEb>
    if (pipe0_reading_address[0] > 0) {
     b64:	7e63      	ldrb	r3, [r4, #25]
     b66:	2b00      	cmp	r3, #0
     b68:	d00d      	beq.n	b86 <_ZN4RF2414startListeningEv+0x52>
        write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);
     b6a:	7fa3      	ldrb	r3, [r4, #30]
     b6c:	0022      	movs	r2, r4
     b6e:	3219      	adds	r2, #25
     b70:	210a      	movs	r1, #10
     b72:	0020      	movs	r0, r4
     b74:	f7ff fdb8 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
     b78:	211d      	movs	r1, #29
     b7a:	0020      	movs	r0, r4
     b7c:	f7ff fd9e 	bl	6bc <_ZN4RF2413read_registerEh>
     b80:	0783      	lsls	r3, r0, #30
     b82:	d405      	bmi.n	b90 <_ZN4RF2414startListeningEv+0x5c>
}
     b84:	bd10      	pop	{r4, pc}
        closeReadingPipe(0);
     b86:	2100      	movs	r1, #0
     b88:	0020      	movs	r0, r4
     b8a:	f7ff ffbf 	bl	b0c <_ZN4RF2416closeReadingPipeEh>
     b8e:	e7f3      	b.n	b78 <_ZN4RF2414startListeningEv+0x44>
        flush_tx();
     b90:	0020      	movs	r0, r4
     b92:	f7ff fe7b 	bl	88c <_ZN4RF248flush_txEv>
}
     b96:	e7f5      	b.n	b84 <_ZN4RF2414startListeningEv+0x50>

00000b98 <_ZN4RF2415toggle_featuresEv>:

/****************************************************************************/

void RF24::toggle_features(void)
{
     b98:	b510      	push	{r4, lr}
     b9a:	0004      	movs	r4, r0
    csn(LOW);
     b9c:	2100      	movs	r1, #0
     b9e:	f7ff fd45 	bl	62c <_ZN4RF243csnEb>
    beginTransaction();
    _SPI.Transfer(ACTIVATE);
     ba2:	2150      	movs	r1, #80	; 0x50
     ba4:	6820      	ldr	r0, [r4, #0]
     ba6:	f000 fc3d 	bl	1424 <_ZN5spi_t8TransferEh>
    _SPI.Transfer(0x73);
     baa:	2173      	movs	r1, #115	; 0x73
     bac:	6820      	ldr	r0, [r4, #0]
     bae:	f000 fc39 	bl	1424 <_ZN5spi_t8TransferEh>
    csn(HIGH);
     bb2:	2101      	movs	r1, #1
     bb4:	0020      	movs	r0, r4
     bb6:	f7ff fd39 	bl	62c <_ZN4RF243csnEb>
    endTransaction();
}
     bba:	bd10      	pop	{r4, pc}

00000bbc <_ZN4RF2416enableAckPayloadEv>:
}

/****************************************************************************/

void RF24::enableAckPayload(void)
{
     bbc:	b510      	push	{r4, lr}
     bbe:	0004      	movs	r4, r0
    //
    // enable ack payload and dynamic payload features
    //

    //toggle_features();
    write_register(FEATURE, read_register(FEATURE) | _BV(EN_ACK_PAY) | _BV(EN_DPL));
     bc0:	211d      	movs	r1, #29
     bc2:	f7ff fd7b 	bl	6bc <_ZN4RF2413read_registerEh>
     bc6:	2206      	movs	r2, #6
     bc8:	4302      	orrs	r2, r0
     bca:	b2d2      	uxtb	r2, r2
     bcc:	211d      	movs	r1, #29
     bce:	0020      	movs	r0, r4
     bd0:	f7ff fdb4 	bl	73c <_ZN4RF2414write_registerEhh>
    IF_SERIAL_DEBUG(printf("FEATURE=%i\r\n", read_register(FEATURE)));

    //
    // Enable dynamic payload on pipes 0 & 1
    //
    write_register(DYNPD, read_register(DYNPD) | _BV(DPL_P1) | _BV(DPL_P0));
     bd4:	211c      	movs	r1, #28
     bd6:	0020      	movs	r0, r4
     bd8:	f7ff fd70 	bl	6bc <_ZN4RF2413read_registerEh>
     bdc:	2203      	movs	r2, #3
     bde:	4302      	orrs	r2, r0
     be0:	b2d2      	uxtb	r2, r2
     be2:	211c      	movs	r1, #28
     be4:	0020      	movs	r0, r4
     be6:	f7ff fda9 	bl	73c <_ZN4RF2414write_registerEhh>
    dynamic_payloads_enabled = true;
     bea:	2301      	movs	r3, #1
     bec:	7623      	strb	r3, [r4, #24]
}
     bee:	bd10      	pop	{r4, pc}

00000bf0 <_ZN4RF2410setAutoAckEb>:
}

/****************************************************************************/

void RF24::setAutoAck(bool enable)
{
     bf0:	b510      	push	{r4, lr}
    if (enable) {
     bf2:	2900      	cmp	r1, #0
     bf4:	d004      	beq.n	c00 <_ZN4RF2410setAutoAckEb+0x10>
        write_register(EN_AA, 0x3F);
     bf6:	223f      	movs	r2, #63	; 0x3f
     bf8:	2101      	movs	r1, #1
     bfa:	f7ff fd9f 	bl	73c <_ZN4RF2414write_registerEhh>
    } else {
        write_register(EN_AA, 0);
    }
}
     bfe:	bd10      	pop	{r4, pc}
        write_register(EN_AA, 0);
     c00:	2200      	movs	r2, #0
     c02:	2101      	movs	r1, #1
     c04:	f7ff fd9a 	bl	73c <_ZN4RF2414write_registerEhh>
}
     c08:	e7f9      	b.n	bfe <_ZN4RF2410setAutoAckEb+0xe>

00000c0a <_ZN4RF2410setPALevelEh>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
     c0a:	b570      	push	{r4, r5, r6, lr}
     c0c:	0005      	movs	r5, r0
     c0e:	000c      	movs	r4, r1

    uint8_t setup = read_register(RF_SETUP) & 0xF8;
     c10:	2106      	movs	r1, #6
     c12:	f7ff fd53 	bl	6bc <_ZN4RF2413read_registerEh>
     c16:	2307      	movs	r3, #7
     c18:	4398      	bics	r0, r3
     c1a:	b2c0      	uxtb	r0, r0

    if (level > 3) {                        // If invalid level, go to max PA
     c1c:	2c03      	cmp	r4, #3
     c1e:	d809      	bhi.n	c34 <_ZN4RF2410setPALevelEh+0x2a>
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
    } else {
        level = (level << 1) + 1;            // Else set level as requested
     c20:	0064      	lsls	r4, r4, #1
     c22:	b2e2      	uxtb	r2, r4
     c24:	3201      	adds	r2, #1
     c26:	b2d2      	uxtb	r2, r2
    }

    write_register(RF_SETUP, setup |= level);    // Write it to the chip
     c28:	4302      	orrs	r2, r0
     c2a:	2106      	movs	r1, #6
     c2c:	0028      	movs	r0, r5
     c2e:	f7ff fd85 	bl	73c <_ZN4RF2414write_registerEhh>
}
     c32:	bd70      	pop	{r4, r5, r6, pc}
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
     c34:	2207      	movs	r2, #7
     c36:	e7f7      	b.n	c28 <_ZN4RF2410setPALevelEh+0x1e>

00000c38 <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     c38:	b570      	push	{r4, r5, r6, lr}
     c3a:	0006      	movs	r6, r0
     c3c:	000d      	movs	r5, r1
    bool result = false;
    uint8_t setup = read_register(RF_SETUP);
     c3e:	2106      	movs	r1, #6
     c40:	f7ff fd3c 	bl	6bc <_ZN4RF2413read_registerEh>

    // HIGH and LOW '00' is 1Mbs - our default
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
     c44:	2328      	movs	r3, #40	; 0x28
     c46:	4398      	bics	r0, r3
     c48:	b2c4      	uxtb	r4, r0

    #if !defined(F_CPU) || F_CPU > 20000000
    txDelay = 250;
     c4a:	33d2      	adds	r3, #210	; 0xd2
     c4c:	6233      	str	r3, [r6, #32]
    #else //16Mhz Arduino
    txDelay=85;
    #endif
    if (speed == RF24_250KBPS) {
     c4e:	2d02      	cmp	r5, #2
     c50:	d00e      	beq.n	c70 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x38>
        txDelay = 155;
        #endif
    } else {
        // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
        // Making it '01'
        if (speed == RF24_2MBPS) {
     c52:	2d01      	cmp	r5, #1
     c54:	d012      	beq.n	c7c <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
            #else // 16Mhz Arduino
            txDelay = 65;
            #endif
        }
    }
    write_register(RF_SETUP, setup);
     c56:	0022      	movs	r2, r4
     c58:	2106      	movs	r1, #6
     c5a:	0030      	movs	r0, r6
     c5c:	f7ff fd6e 	bl	73c <_ZN4RF2414write_registerEhh>

    // Verify our result
    if (read_register(RF_SETUP) == setup) {
     c60:	2106      	movs	r1, #6
     c62:	0030      	movs	r0, r6
     c64:	f7ff fd2a 	bl	6bc <_ZN4RF2413read_registerEh>
     c68:	42a0      	cmp	r0, r4
     c6a:	d00d      	beq.n	c88 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x50>
    bool result = false;
     c6c:	2000      	movs	r0, #0
        result = true;
    }
    return result;
}
     c6e:	bd70      	pop	{r4, r5, r6, pc}
        setup |= _BV(RF_DR_LOW);
     c70:	2020      	movs	r0, #32
     c72:	4304      	orrs	r4, r0
     c74:	b2e4      	uxtb	r4, r4
        txDelay = 450;
     c76:	33c8      	adds	r3, #200	; 0xc8
     c78:	6233      	str	r3, [r6, #32]
     c7a:	e7ec      	b.n	c56 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1e>
            setup |= _BV(RF_DR_HIGH);
     c7c:	2008      	movs	r0, #8
     c7e:	4304      	orrs	r4, r0
     c80:	b2e4      	uxtb	r4, r4
            txDelay = 190;
     c82:	23be      	movs	r3, #190	; 0xbe
     c84:	6233      	str	r3, [r6, #32]
     c86:	e7e6      	b.n	c56 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1e>
        result = true;
     c88:	2001      	movs	r0, #1
     c8a:	e7f0      	b.n	c6e <_ZN4RF2411setDataRateE15rf24_datarate_e+0x36>

00000c8c <_ZN4RF2410setRetriesEhh>:
    write_register(NRF_CONFIG, disable);
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
     c8c:	b510      	push	{r4, lr}
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
     c8e:	0109      	lsls	r1, r1, #4
     c90:	230f      	movs	r3, #15
     c92:	4013      	ands	r3, r2
     c94:	430b      	orrs	r3, r1
     c96:	b2da      	uxtb	r2, r3
     c98:	2104      	movs	r1, #4
     c9a:	f7ff fd4f 	bl	73c <_ZN4RF2414write_registerEhh>
}
     c9e:	bd10      	pop	{r4, pc}

00000ca0 <_ZN4RF245beginEv>:
{
     ca0:	b570      	push	{r4, r5, r6, lr}
     ca2:	b084      	sub	sp, #16
     ca4:	0004      	movs	r4, r0
    if (ce_pin != csn_pin) {
     ca6:	4669      	mov	r1, sp
     ca8:	0003      	movs	r3, r0
     caa:	330c      	adds	r3, #12
     cac:	000a      	movs	r2, r1
     cae:	cb21      	ldmia	r3!, {r0, r5}
     cb0:	c221      	stmia	r2!, {r0, r5}
        return !operator==(b);
     cb2:	2208      	movs	r2, #8
     cb4:	a802      	add	r0, sp, #8
     cb6:	f001 f991 	bl	1fdc <memcpy>
        return port == b.port && pin == b.pin;
     cba:	6863      	ldr	r3, [r4, #4]
     cbc:	9a02      	ldr	r2, [sp, #8]
     cbe:	429a      	cmp	r2, r3
     cc0:	d100      	bne.n	cc4 <_ZN4RF245beginEv+0x24>
     cc2:	e085      	b.n	dd0 <_ZN4RF245beginEv+0x130>
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     cc4:	68a1      	ldr	r1, [r4, #8]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     cc6:	2201      	movs	r2, #1
     cc8:	408a      	lsls	r2, r1
     cca:	01db      	lsls	r3, r3, #7
     ccc:	4846      	ldr	r0, [pc, #280]	; (de8 <_ZN4RF245beginEv+0x148>)
     cce:	4684      	mov	ip, r0
     cd0:	4463      	add	r3, ip
     cd2:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     cd4:	185b      	adds	r3, r3, r1
     cd6:	3340      	adds	r3, #64	; 0x40
     cd8:	781a      	ldrb	r2, [r3, #0]
     cda:	2102      	movs	r1, #2
     cdc:	438a      	bics	r2, r1
     cde:	701a      	strb	r2, [r3, #0]
    if (ce_pin != csn_pin)
     ce0:	4669      	mov	r1, sp
     ce2:	0023      	movs	r3, r4
     ce4:	330c      	adds	r3, #12
     ce6:	000a      	movs	r2, r1
     ce8:	cb21      	ldmia	r3!, {r0, r5}
     cea:	c221      	stmia	r2!, {r0, r5}
        return !operator==(b);
     cec:	2208      	movs	r2, #8
     cee:	a802      	add	r0, sp, #8
     cf0:	f001 f974 	bl	1fdc <memcpy>
        return port == b.port && pin == b.pin;
     cf4:	6863      	ldr	r3, [r4, #4]
     cf6:	9a02      	ldr	r2, [sp, #8]
     cf8:	4293      	cmp	r3, r2
     cfa:	d100      	bne.n	cfe <_ZN4RF245beginEv+0x5e>
     cfc:	e06e      	b.n	ddc <_ZN4RF245beginEv+0x13c>
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     cfe:	6921      	ldr	r1, [r4, #16]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     d00:	2201      	movs	r2, #1
     d02:	408a      	lsls	r2, r1
     d04:	68e3      	ldr	r3, [r4, #12]
     d06:	01db      	lsls	r3, r3, #7
     d08:	4837      	ldr	r0, [pc, #220]	; (de8 <_ZN4RF245beginEv+0x148>)
     d0a:	4684      	mov	ip, r0
     d0c:	4463      	add	r3, ip
     d0e:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     d10:	185b      	adds	r3, r3, r1
     d12:	3340      	adds	r3, #64	; 0x40
     d14:	781a      	ldrb	r2, [r3, #0]
     d16:	2102      	movs	r1, #2
     d18:	438a      	bics	r2, r1
     d1a:	701a      	strb	r2, [r3, #0]
    ce(LOW);
     d1c:	2100      	movs	r1, #0
     d1e:	0020      	movs	r0, r4
     d20:	f7ff fc9e 	bl	660 <_ZN4RF242ceEb>
    csn(HIGH);
     d24:	2101      	movs	r1, #1
     d26:	0020      	movs	r0, r4
     d28:	f7ff fc80 	bl	62c <_ZN4RF243csnEb>
    delay_usec(5000);
     d2c:	482f      	ldr	r0, [pc, #188]	; (dec <_ZN4RF245beginEv+0x14c>)
     d2e:	f002 f8bb 	bl	2ea8 <__delay_usec_veneer>
    write_register(NRF_CONFIG, 0x0C);
     d32:	220c      	movs	r2, #12
     d34:	2100      	movs	r1, #0
     d36:	0020      	movs	r0, r4
     d38:	f7ff fd00 	bl	73c <_ZN4RF2414write_registerEhh>
    setRetries(5, 15);
     d3c:	220f      	movs	r2, #15
     d3e:	2105      	movs	r1, #5
     d40:	0020      	movs	r0, r4
     d42:	f7ff ffa3 	bl	c8c <_ZN4RF2410setRetriesEhh>
    if (setDataRate(RF24_250KBPS)) {
     d46:	2102      	movs	r1, #2
     d48:	0020      	movs	r0, r4
     d4a:	f7ff ff75 	bl	c38 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     d4e:	2800      	cmp	r0, #0
     d50:	d001      	beq.n	d56 <_ZN4RF245beginEv+0xb6>
        p_variant = true;
     d52:	2301      	movs	r3, #1
     d54:	75a3      	strb	r3, [r4, #22]
    setup = read_register(RF_SETUP);
     d56:	2106      	movs	r1, #6
     d58:	0020      	movs	r0, r4
     d5a:	f7ff fcaf 	bl	6bc <_ZN4RF2413read_registerEh>
     d5e:	0006      	movs	r6, r0
    setDataRate(RF24_1MBPS);
     d60:	2100      	movs	r1, #0
     d62:	0020      	movs	r0, r4
     d64:	f7ff ff68 	bl	c38 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    toggle_features();
     d68:	0020      	movs	r0, r4
     d6a:	f7ff ff15 	bl	b98 <_ZN4RF2415toggle_featuresEv>
    write_register(FEATURE, 0);
     d6e:	2200      	movs	r2, #0
     d70:	211d      	movs	r1, #29
     d72:	0020      	movs	r0, r4
     d74:	f7ff fce2 	bl	73c <_ZN4RF2414write_registerEhh>
    write_register(DYNPD, 0);
     d78:	2200      	movs	r2, #0
     d7a:	211c      	movs	r1, #28
     d7c:	0020      	movs	r0, r4
     d7e:	f7ff fcdd 	bl	73c <_ZN4RF2414write_registerEhh>
    dynamic_payloads_enabled = false;
     d82:	2500      	movs	r5, #0
     d84:	7625      	strb	r5, [r4, #24]
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     d86:	2270      	movs	r2, #112	; 0x70
     d88:	2107      	movs	r1, #7
     d8a:	0020      	movs	r0, r4
     d8c:	f7ff fcd6 	bl	73c <_ZN4RF2414write_registerEhh>
    setChannel(76);
     d90:	214c      	movs	r1, #76	; 0x4c
     d92:	0020      	movs	r0, r4
     d94:	f7ff fda3 	bl	8de <_ZN4RF2410setChannelEh>
    flush_rx();
     d98:	0020      	movs	r0, r4
     d9a:	f7ff fd72 	bl	882 <_ZN4RF248flush_rxEv>
    flush_tx();
     d9e:	0020      	movs	r0, r4
     da0:	f7ff fd74 	bl	88c <_ZN4RF248flush_txEv>
    powerUp(); //Power up by default when begin() is called
     da4:	0020      	movs	r0, r4
     da6:	f7ff fdd7 	bl	958 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
     daa:	2100      	movs	r1, #0
     dac:	0020      	movs	r0, r4
     dae:	f7ff fc85 	bl	6bc <_ZN4RF2413read_registerEh>
     db2:	2301      	movs	r3, #1
     db4:	4398      	bics	r0, r3
     db6:	b2c2      	uxtb	r2, r0
     db8:	2100      	movs	r1, #0
     dba:	0020      	movs	r0, r4
     dbc:	f7ff fcbe 	bl	73c <_ZN4RF2414write_registerEhh>
    return (setup != 0 && setup != 0xff);
     dc0:	3e01      	subs	r6, #1
     dc2:	b2f6      	uxtb	r6, r6
     dc4:	23fd      	movs	r3, #253	; 0xfd
     dc6:	42b3      	cmp	r3, r6
     dc8:	416d      	adcs	r5, r5
     dca:	b2e8      	uxtb	r0, r5
}
     dcc:	b004      	add	sp, #16
     dce:	bd70      	pop	{r4, r5, r6, pc}
        return port == b.port && pin == b.pin;
     dd0:	68a2      	ldr	r2, [r4, #8]
     dd2:	9903      	ldr	r1, [sp, #12]
     dd4:	428a      	cmp	r2, r1
     dd6:	d000      	beq.n	dda <_ZN4RF245beginEv+0x13a>
     dd8:	e774      	b.n	cc4 <_ZN4RF245beginEv+0x24>
     dda:	e781      	b.n	ce0 <_ZN4RF245beginEv+0x40>
     ddc:	68a3      	ldr	r3, [r4, #8]
     dde:	9a03      	ldr	r2, [sp, #12]
     de0:	4293      	cmp	r3, r2
     de2:	d000      	beq.n	de6 <_ZN4RF245beginEv+0x146>
     de4:	e78b      	b.n	cfe <_ZN4RF245beginEv+0x5e>
     de6:	e799      	b.n	d1c <_ZN4RF245beginEv+0x7c>
     de8:	41004400 	.word	0x41004400
     dec:	00001388 	.word	0x00001388

00000df0 <_ZN9SensornetD1Ev>:
	char name[8]; // 8 bytes
	uint8_t type; // 1 byte
	uint8_t data[22]; // total 32 bytes (max nrf24l01 packet size)
};

class Sensornet {
     df0:	b510      	push	{r4, lr}
     df2:	0004      	movs	r4, r0
        if(m_data) free(m_data);
     df4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     df6:	2800      	cmp	r0, #0
     df8:	d001      	beq.n	dfe <_ZN9SensornetD1Ev+0xe>
     dfa:	f001 f8e5 	bl	1fc8 <free>
     dfe:	0020      	movs	r0, r4
     e00:	bd10      	pop	{r4, pc}
     e02:	Address 0x00000e02 is out of bounds.


00000e04 <_Z41__static_initialization_and_destruction_0ii>:
        
        gpio::toggle(led);
        //auto start = millis();
        //while(millis() - start < 500);
    }
     e04:	b570      	push	{r4, r5, r6, lr}
     e06:	b092      	sub	sp, #72	; 0x48
     e08:	2801      	cmp	r0, #1
     e0a:	d001      	beq.n	e10 <_Z41__static_initialization_and_destruction_0ii+0xc>
     e0c:	b012      	add	sp, #72	; 0x48
     e0e:	bd70      	pop	{r4, r5, r6, pc}
     e10:	4b12      	ldr	r3, [pc, #72]	; (e5c <_Z41__static_initialization_and_destruction_0ii+0x58>)
     e12:	4299      	cmp	r1, r3
     e14:	d1fa      	bne.n	e0c <_Z41__static_initialization_and_destruction_0ii+0x8>
);
     e16:	2400      	movs	r4, #0
     e18:	4e11      	ldr	r6, [pc, #68]	; (e60 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     e1a:	4b12      	ldr	r3, [pc, #72]	; (e64 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     e1c:	0021      	movs	r1, r4
     e1e:	2202      	movs	r2, #2
     e20:	0030      	movs	r0, r6
     e22:	f7ff f965 	bl	f0 <_ZN3GSMC1E6gpio_tP6uart_t>
static GSM gsm(
     e26:	4d10      	ldr	r5, [pc, #64]	; (e68 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     e28:	002a      	movs	r2, r5
     e2a:	4910      	ldr	r1, [pc, #64]	; (e6c <_Z41__static_initialization_and_destruction_0ii+0x68>)
     e2c:	0030      	movs	r0, r6
     e2e:	f000 ffcd 	bl	1dcc <__aeabi_atexit>
static Sensornet net(RF24({ GPIO_PORTA, 14 }, { GPIO_PORTA, 15 }, g_spi0));
     e32:	4b0f      	ldr	r3, [pc, #60]	; (e70 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     e34:	9301      	str	r3, [sp, #4]
     e36:	230f      	movs	r3, #15
     e38:	9300      	str	r3, [sp, #0]
     e3a:	0023      	movs	r3, r4
     e3c:	0021      	movs	r1, r4
     e3e:	220e      	movs	r2, #14
     e40:	a802      	add	r0, sp, #8
     e42:	f7ff fd2d 	bl	8a0 <_ZN4RF24C1E6gpio_tS0_R5spi_t>
     e46:	4c0b      	ldr	r4, [pc, #44]	; (e74 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     e48:	a902      	add	r1, sp, #8
     e4a:	0020      	movs	r0, r4
     e4c:	f000 fe84 	bl	1b58 <_ZN9SensornetC1ERK4RF24>
     e50:	002a      	movs	r2, r5
     e52:	4909      	ldr	r1, [pc, #36]	; (e78 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     e54:	0020      	movs	r0, r4
     e56:	f000 ffb9 	bl	1dcc <__aeabi_atexit>
     e5a:	e7d7      	b.n	e0c <_Z41__static_initialization_and_destruction_0ii+0x8>
     e5c:	0000ffff 	.word	0x0000ffff
     e60:	20000094 	.word	0x20000094
     e64:	200002f4 	.word	0x200002f4
     e68:	2000000c 	.word	0x2000000c
     e6c:	0000018d 	.word	0x0000018d
     e70:	200000d8 	.word	0x200000d8
     e74:	200000a8 	.word	0x200000a8
     e78:	00000df1 	.word	0x00000df1

00000e7c <_ZN3Str7reserveEi>:
    }
}

// Reserve memory, preserving the current of the buffer
void    Str::reserve(int new_capacity)
{
     e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e7e:	0004      	movs	r4, r0
     e80:	000e      	movs	r6, r1
    if (new_capacity <= Capacity)
     e82:	6843      	ldr	r3, [r0, #4]
     e84:	02db      	lsls	r3, r3, #11
     e86:	0adb      	lsrs	r3, r3, #11
     e88:	428b      	cmp	r3, r1
     e8a:	da20      	bge.n	ece <_ZN3Str7reserveEi+0x52>
        return;

    char* new_data;
    if (new_capacity < LocalBufSize)
     e8c:	88c5      	ldrh	r5, [r0, #6]
     e8e:	046d      	lsls	r5, r5, #17
     e90:	0dad      	lsrs	r5, r5, #22
     e92:	428d      	cmp	r5, r1
     e94:	dd1c      	ble.n	ed0 <_ZN3Str7reserveEi+0x54>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
     e96:	0007      	movs	r7, r0
     e98:	3708      	adds	r7, #8
        // Disowned or LocalBuf -> Heap
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    }

    // string in Data might be longer than new_capacity if it wasn't owned, don't copy too much
    strncpy(new_data, Data, new_capacity - 1);
     e9a:	1e6e      	subs	r6, r5, #1
     e9c:	0032      	movs	r2, r6
     e9e:	6821      	ldr	r1, [r4, #0]
     ea0:	0038      	movs	r0, r7
     ea2:	f001 f9dd 	bl	2260 <strncpy>
    new_data[new_capacity - 1] = 0;
     ea6:	19be      	adds	r6, r7, r6
     ea8:	2300      	movs	r3, #0
     eaa:	7033      	strb	r3, [r6, #0]

    if (Owned && !is_using_local_buf())
     eac:	2307      	movs	r3, #7
     eae:	56e3      	ldrsb	r3, [r4, r3]
     eb0:	2b00      	cmp	r3, #0
     eb2:	db13      	blt.n	edc <_ZN3Str7reserveEi+0x60>
        STR_MEMFREE(Data);

    Data = new_data;
     eb4:	6027      	str	r7, [r4, #0]
    Capacity = new_capacity;
     eb6:	02ed      	lsls	r5, r5, #11
     eb8:	0aed      	lsrs	r5, r5, #11
     eba:	6863      	ldr	r3, [r4, #4]
     ebc:	0d5b      	lsrs	r3, r3, #21
     ebe:	055b      	lsls	r3, r3, #21
     ec0:	431d      	orrs	r5, r3
     ec2:	6065      	str	r5, [r4, #4]
    Owned = 1;
     ec4:	0e1b      	lsrs	r3, r3, #24
     ec6:	2280      	movs	r2, #128	; 0x80
     ec8:	4252      	negs	r2, r2
     eca:	4313      	orrs	r3, r2
     ecc:	71e3      	strb	r3, [r4, #7]
}
     ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
     ed0:	0008      	movs	r0, r1
     ed2:	f001 f86f 	bl	1fb4 <malloc>
     ed6:	0007      	movs	r7, r0
     ed8:	0035      	movs	r5, r6
     eda:	e7de      	b.n	e9a <_ZN3Str7reserveEi+0x1e>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     edc:	6820      	ldr	r0, [r4, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
     ede:	0023      	movs	r3, r4
     ee0:	3308      	adds	r3, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     ee2:	4298      	cmp	r0, r3
     ee4:	d002      	beq.n	eec <_ZN3Str7reserveEi+0x70>
        STR_MEMFREE(Data);
     ee6:	f001 f86f 	bl	1fc8 <free>
     eea:	e7e3      	b.n	eb4 <_ZN3Str7reserveEi+0x38>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     eec:	88e2      	ldrh	r2, [r4, #6]
     eee:	4b02      	ldr	r3, [pc, #8]	; (ef8 <_ZN3Str7reserveEi+0x7c>)
     ef0:	421a      	tst	r2, r3
     ef2:	d1df      	bne.n	eb4 <_ZN3Str7reserveEi+0x38>
     ef4:	e7f7      	b.n	ee6 <_ZN3Str7reserveEi+0x6a>
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00007fe0 	.word	0x00007fe0

00000efc <_ZN3Str13appendfv_fromEiPKcSt9__va_list>:
    return add_len;
}

// FIXME: merge setfv() and appendfv()?
int     Str::appendfv_from(int idx, const char* fmt, va_list args)
{
     efc:	b5f0      	push	{r4, r5, r6, r7, lr}
     efe:	b083      	sub	sp, #12
     f00:	0005      	movs	r5, r0
     f02:	000e      	movs	r6, r1
     f04:	0017      	movs	r7, r2
    // Needed for portability on platforms where va_list are passed by reference and modified by functions
    va_list args2;
    va_copy(args2, args);
     f06:	9301      	str	r3, [sp, #4]
    if (Capacity < idx + add_len + 1)
        reserve(idx + add_len + 1);
    add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
#else
    // First try
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
     f08:	2207      	movs	r2, #7
     f0a:	5682      	ldrsb	r2, [r0, r2]
     f0c:	2a00      	cmp	r2, #0
     f0e:	db10      	blt.n	f32 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x36>
     f10:	2000      	movs	r0, #0
     f12:	2a00      	cmp	r2, #0
     f14:	db10      	blt.n	f38 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x3c>
     f16:	2100      	movs	r1, #0
     f18:	003a      	movs	r2, r7
     f1a:	f001 fa85 	bl	2428 <vsniprintf>
     f1e:	0004      	movs	r4, r0
    STR_ASSERT(add_len >= 0);

    if (Capacity < idx + add_len + 1)
     f20:	1831      	adds	r1, r6, r0
     f22:	686b      	ldr	r3, [r5, #4]
     f24:	02db      	lsls	r3, r3, #11
     f26:	0adb      	lsrs	r3, r3, #11
     f28:	4299      	cmp	r1, r3
     f2a:	da0a      	bge.n	f42 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x46>
    }
#endif

    STR_ASSERT(Owned);
    return add_len;
}
     f2c:	0020      	movs	r0, r4
     f2e:	b003      	add	sp, #12
     f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
     f32:	6801      	ldr	r1, [r0, #0]
     f34:	1988      	adds	r0, r1, r6
     f36:	e7ec      	b.n	f12 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x16>
     f38:	686a      	ldr	r2, [r5, #4]
     f3a:	02d1      	lsls	r1, r2, #11
     f3c:	0ac9      	lsrs	r1, r1, #11
     f3e:	1b89      	subs	r1, r1, r6
     f40:	e7ea      	b.n	f18 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x1c>
        reserve(idx + add_len + 1);
     f42:	3101      	adds	r1, #1
     f44:	0028      	movs	r0, r5
     f46:	f7ff ff99 	bl	e7c <_ZN3Str7reserveEi>
        add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
     f4a:	6828      	ldr	r0, [r5, #0]
     f4c:	1c61      	adds	r1, r4, #1
     f4e:	1980      	adds	r0, r0, r6
     f50:	9b01      	ldr	r3, [sp, #4]
     f52:	003a      	movs	r2, r7
     f54:	f001 fa68 	bl	2428 <vsniprintf>
     f58:	0004      	movs	r4, r0
    return add_len;
     f5a:	e7e7      	b.n	f2c <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x30>

00000f5c <_ZN3Str8appendfvEPKcSt9__va_list>:
    int cur_len = length();
    return append_from(cur_len, s, s_end);
}

int     Str::appendfv(const char* fmt, va_list args)
{
     f5c:	b570      	push	{r4, r5, r6, lr}
     f5e:	0004      	movs	r4, r0
     f60:	000d      	movs	r5, r1
     f62:	0016      	movs	r6, r2
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
     f64:	6800      	ldr	r0, [r0, #0]
     f66:	f001 f963 	bl	2230 <strlen>
     f6a:	0001      	movs	r1, r0
    int cur_len = length();
    return appendfv_from(cur_len, fmt, args);
     f6c:	0033      	movs	r3, r6
     f6e:	002a      	movs	r2, r5
     f70:	0020      	movs	r0, r4
     f72:	f7ff ffc3 	bl	efc <_ZN3Str13appendfv_fromEiPKcSt9__va_list>
}
     f76:	bd70      	pop	{r4, r5, r6, pc}

00000f78 <_ZN3Str7appendfEPKcz>:

int     Str::appendf(const char* fmt, ...)
{
     f78:	b40e      	push	{r1, r2, r3}
     f7a:	b500      	push	{lr}
     f7c:	b082      	sub	sp, #8
     f7e:	aa03      	add	r2, sp, #12
     f80:	ca02      	ldmia	r2!, {r1}
    va_list args;
    va_start(args, fmt);
     f82:	9201      	str	r2, [sp, #4]
    int len = appendfv(fmt, args);
     f84:	f7ff ffea 	bl	f5c <_ZN3Str8appendfvEPKcSt9__va_list>
    va_end(args);
    return len;
}
     f88:	b002      	add	sp, #8
     f8a:	bc08      	pop	{r3}
     f8c:	b003      	add	sp, #12
     f8e:	4718      	bx	r3

00000f90 <_ZL8cmd_infoP3GSMPKcS2_>:
static void cmd_info(GSM* gsm, const char* sender, const char* args) {
     f90:	b5f0      	push	{r4, r5, r6, r7, lr}
     f92:	46d6      	mov	lr, sl
     f94:	464f      	mov	r7, r9
     f96:	4646      	mov	r6, r8
     f98:	b5c0      	push	{r6, r7, lr}
     f9a:	b084      	sub	sp, #16
     f9c:	4681      	mov	r9, r0
     f9e:	4688      	mov	r8, r1
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     fa0:	aa02      	add	r2, sp, #8
     fa2:	4b32      	ldr	r3, [pc, #200]	; (106c <_ZL8cmd_infoP3GSMPKcS2_+0xdc>)
     fa4:	681b      	ldr	r3, [r3, #0]
     fa6:	9302      	str	r3, [sp, #8]
    Capacity = 0;
     fa8:	9b03      	ldr	r3, [sp, #12]
     faa:	0d5b      	lsrs	r3, r3, #21
     fac:	0559      	lsls	r1, r3, #21
     fae:	9103      	str	r1, [sp, #12]
    LocalBufSize = 0;
     fb0:	015b      	lsls	r3, r3, #5
     fb2:	492f      	ldr	r1, [pc, #188]	; (1070 <_ZL8cmd_infoP3GSMPKcS2_+0xe0>)
     fb4:	400b      	ands	r3, r1
     fb6:	80d3      	strh	r3, [r2, #6]
    Owned = 0;
     fb8:	2300      	movs	r3, #0
     fba:	71d3      	strb	r3, [r2, #7]
        return m_data;
     fbc:	4b2d      	ldr	r3, [pc, #180]	; (1074 <_ZL8cmd_infoP3GSMPKcS2_+0xe4>)
     fbe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
        return m_data + m_size;
     fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fc2:	00de      	lsls	r6, r3, #3
     fc4:	18f6      	adds	r6, r6, r3
     fc6:	00b6      	lsls	r6, r6, #2
     fc8:	19a6      	adds	r6, r4, r6
     fca:	e006      	b.n	fda <_ZL8cmd_infoP3GSMPKcS2_+0x4a>
                    ((Sensors::TempHum*)node.data.data)->temperature, ((Sensors::TempHum*)node.data.data)->humidity);
     fcc:	8962      	ldrh	r2, [r4, #10]
     fce:	89a3      	ldrh	r3, [r4, #12]
                str.appendf(" Temperature + humidity sensor:\n  Temperature: %d\n  Humidity: %d\n",
     fd0:	4929      	ldr	r1, [pc, #164]	; (1078 <_ZL8cmd_infoP3GSMPKcS2_+0xe8>)
     fd2:	a802      	add	r0, sp, #8
     fd4:	f7ff ffd0 	bl	f78 <_ZN3Str7appendfEPKcz>
    for(auto& node : net.m_nodes) {
     fd8:	3424      	adds	r4, #36	; 0x24
     fda:	42b4      	cmp	r4, r6
     fdc:	d028      	beq.n	1030 <_ZL8cmd_infoP3GSMPKcS2_+0xa0>
            node.data.id, node.data.name, node.data.type, (millis() - node.last_seen) / 1000);
     fde:	2700      	movs	r7, #0
     fe0:	57e7      	ldrsb	r7, [r4, r7]
     fe2:	1c65      	adds	r5, r4, #1
     fe4:	7a63      	ldrb	r3, [r4, #9]
     fe6:	469a      	mov	sl, r3
     fe8:	f000 fb06 	bl	15f8 <millis>
     fec:	6a23      	ldr	r3, [r4, #32]
     fee:	1ac0      	subs	r0, r0, r3
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
     ff0:	21fa      	movs	r1, #250	; 0xfa
     ff2:	0089      	lsls	r1, r1, #2
     ff4:	f000 fef2 	bl	1ddc <__udivsi3>
     ff8:	9001      	str	r0, [sp, #4]
     ffa:	4653      	mov	r3, sl
     ffc:	9300      	str	r3, [sp, #0]
     ffe:	002b      	movs	r3, r5
    1000:	003a      	movs	r2, r7
    1002:	491e      	ldr	r1, [pc, #120]	; (107c <_ZL8cmd_infoP3GSMPKcS2_+0xec>)
    1004:	a802      	add	r0, sp, #8
    1006:	f7ff ffb7 	bl	f78 <_ZN3Str7appendfEPKcz>
        switch(node.data.type) {
    100a:	7a63      	ldrb	r3, [r4, #9]
    100c:	2b02      	cmp	r3, #2
    100e:	d0dd      	beq.n	fcc <_ZL8cmd_infoP3GSMPKcS2_+0x3c>
    1010:	2b03      	cmp	r3, #3
    1012:	d007      	beq.n	1024 <_ZL8cmd_infoP3GSMPKcS2_+0x94>
    1014:	2b01      	cmp	r3, #1
    1016:	d1df      	bne.n	fd8 <_ZL8cmd_infoP3GSMPKcS2_+0x48>
                str.appendf(" Soil moisture sensor:\n  Moisture: %d\n", ((Sensors::Soil*)node.data.data)->moisture);
    1018:	8962      	ldrh	r2, [r4, #10]
    101a:	4919      	ldr	r1, [pc, #100]	; (1080 <_ZL8cmd_infoP3GSMPKcS2_+0xf0>)
    101c:	a802      	add	r0, sp, #8
    101e:	f7ff ffab 	bl	f78 <_ZN3Str7appendfEPKcz>
                break;
    1022:	e7d9      	b.n	fd8 <_ZL8cmd_infoP3GSMPKcS2_+0x48>
                    ((Sensors::Temp*)node.data.data)->temperature);
    1024:	8962      	ldrh	r2, [r4, #10]
                str.appendf(" Temperature sensor:\n  Temperature: %d\n",
    1026:	4917      	ldr	r1, [pc, #92]	; (1084 <_ZL8cmd_infoP3GSMPKcS2_+0xf4>)
    1028:	a802      	add	r0, sp, #8
    102a:	f7ff ffa5 	bl	f78 <_ZN3Str7appendfEPKcz>
                break;
    102e:	e7d3      	b.n	fd8 <_ZL8cmd_infoP3GSMPKcS2_+0x48>
    gsm->SendSMS(sender, str.c_str());
    1030:	9a02      	ldr	r2, [sp, #8]
    1032:	4641      	mov	r1, r8
    1034:	4648      	mov	r0, r9
    1036:	f7ff fa97 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
        if (Owned && !is_using_local_buf())
    103a:	ab02      	add	r3, sp, #8
    103c:	79db      	ldrb	r3, [r3, #7]
    103e:	b25b      	sxtb	r3, r3
    1040:	2b00      	cmp	r3, #0
    1042:	db05      	blt.n	1050 <_ZL8cmd_infoP3GSMPKcS2_+0xc0>
}
    1044:	b004      	add	sp, #16
    1046:	bc1c      	pop	{r2, r3, r4}
    1048:	4690      	mov	r8, r2
    104a:	4699      	mov	r9, r3
    104c:	46a2      	mov	sl, r4
    104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1050:	9802      	ldr	r0, [sp, #8]
    1052:	ab04      	add	r3, sp, #16
    1054:	4298      	cmp	r0, r3
    1056:	d002      	beq.n	105e <_ZL8cmd_infoP3GSMPKcS2_+0xce>
            STR_MEMFREE(Data);
    1058:	f000 ffb6 	bl	1fc8 <free>
    105c:	e7f2      	b.n	1044 <_ZL8cmd_infoP3GSMPKcS2_+0xb4>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    105e:	ab02      	add	r3, sp, #8
    1060:	88da      	ldrh	r2, [r3, #6]
    1062:	4b09      	ldr	r3, [pc, #36]	; (1088 <_ZL8cmd_infoP3GSMPKcS2_+0xf8>)
    1064:	421a      	tst	r2, r3
    1066:	d1ed      	bne.n	1044 <_ZL8cmd_infoP3GSMPKcS2_+0xb4>
    1068:	e7f6      	b.n	1058 <_ZL8cmd_infoP3GSMPKcS2_+0xc8>
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	20000010 	.word	0x20000010
    1070:	ffff801f 	.word	0xffff801f
    1074:	200000a8 	.word	0x200000a8
    1078:	00002c7c 	.word	0x00002c7c
    107c:	00002c18 	.word	0x00002c18
    1080:	00002c54 	.word	0x00002c54
    1084:	00002cc0 	.word	0x00002cc0
    1088:	00007fe0 	.word	0x00007fe0

0000108c <main>:
int main() {
    108c:	b570      	push	{r4, r5, r6, lr}
    108e:	b096      	sub	sp, #88	; 0x58
    g_uart1.init({{GPIO_PORTA, 24}, {GPIO_PORTA, 25}, UART_SER1_TXPO_PA24, UART_SER1_RXPO_PA25}, CALC_BAUD(115200));
    1090:	a90e      	add	r1, sp, #56	; 0x38
    1092:	4c38      	ldr	r4, [pc, #224]	; (1174 <main+0xe8>)
    1094:	000b      	movs	r3, r1
    1096:	0022      	movs	r2, r4
    1098:	ca61      	ldmia	r2!, {r0, r5, r6}
    109a:	c361      	stmia	r3!, {r0, r5, r6}
    109c:	ca21      	ldmia	r2!, {r0, r5}
    109e:	c321      	stmia	r3!, {r0, r5}
    10a0:	4a35      	ldr	r2, [pc, #212]	; (1178 <main+0xec>)
    10a2:	4836      	ldr	r0, [pc, #216]	; (117c <main+0xf0>)
    10a4:	f000 faee 	bl	1684 <_ZN6uart_t4initERK13uart_pincfg_tt>
    g_spi0.Init({
    10a8:	a806      	add	r0, sp, #24
    10aa:	3414      	adds	r4, #20
    10ac:	0002      	movs	r2, r0
    10ae:	cc2a      	ldmia	r4!, {r1, r3, r5}
    10b0:	c22a      	stmia	r2!, {r1, r3, r5}
    10b2:	cc2a      	ldmia	r4!, {r1, r3, r5}
    10b4:	c22a      	stmia	r2!, {r1, r3, r5}
    10b6:	cc0a      	ldmia	r4!, {r1, r3}
    10b8:	c20a      	stmia	r2!, {r1, r3}
    10ba:	2314      	movs	r3, #20
    10bc:	9305      	str	r3, [sp, #20]
    10be:	ab09      	add	r3, sp, #36	; 0x24
    10c0:	466a      	mov	r2, sp
    10c2:	cb32      	ldmia	r3!, {r1, r4, r5}
    10c4:	c232      	stmia	r2!, {r1, r4, r5}
    10c6:	cb12      	ldmia	r3!, {r1, r4}
    10c8:	c212      	stmia	r2!, {r1, r4}
    10ca:	9906      	ldr	r1, [sp, #24]
    10cc:	9a07      	ldr	r2, [sp, #28]
    10ce:	9b08      	ldr	r3, [sp, #32]
    10d0:	482b      	ldr	r0, [pc, #172]	; (1180 <main+0xf4>)
    10d2:	f000 f869 	bl	11a8 <_ZN5spi_t4InitE12spi_pincfg_tt>
            PORT->Group[port].DIRSET.reg = 1 << pin;
    10d6:	4b2b      	ldr	r3, [pc, #172]	; (1184 <main+0xf8>)
    10d8:	2210      	movs	r2, #16
    10da:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    10dc:	2144      	movs	r1, #68	; 0x44
    10de:	5c5a      	ldrb	r2, [r3, r1]
    10e0:	2002      	movs	r0, #2
    10e2:	4382      	bics	r2, r0
    10e4:	545a      	strb	r2, [r3, r1]
    if(!net.begin()) {
    10e6:	4828      	ldr	r0, [pc, #160]	; (1188 <main+0xfc>)
    10e8:	f000 fd44 	bl	1b74 <_ZN9Sensornet5beginEv>
    10ec:	2800      	cmp	r0, #0
    10ee:	d106      	bne.n	10fe <main+0x72>

    inline void toggle(const int port, const int pin) {
        PORT->Group[port].OUTTGL.reg = 1 << pin;
    10f0:	4b24      	ldr	r3, [pc, #144]	; (1184 <main+0xf8>)
    10f2:	2210      	movs	r2, #16
    10f4:	61da      	str	r2, [r3, #28]
            delay_usec(800000);
    10f6:	4825      	ldr	r0, [pc, #148]	; (118c <main+0x100>)
    10f8:	f001 fed6 	bl	2ea8 <__delay_usec_veneer>
        while(1) {
    10fc:	e7f8      	b.n	10f0 <main+0x64>
    if(!gsm.Init()) {
    10fe:	4824      	ldr	r0, [pc, #144]	; (1190 <main+0x104>)
    1100:	f7ff f914 	bl	32c <_ZN3GSM4InitEv>
    1104:	2800      	cmp	r0, #0
    1106:	d109      	bne.n	111c <main+0x90>
            net.Poll();
    1108:	481f      	ldr	r0, [pc, #124]	; (1188 <main+0xfc>)
    110a:	f000 fde7 	bl	1cdc <_ZN9Sensornet4PollEv>
    110e:	4b1d      	ldr	r3, [pc, #116]	; (1184 <main+0xf8>)
    1110:	2210      	movs	r2, #16
    1112:	61da      	str	r2, [r3, #28]
            delay_usec(200000);
    1114:	481f      	ldr	r0, [pc, #124]	; (1194 <main+0x108>)
    1116:	f001 fec7 	bl	2ea8 <__delay_usec_veneer>
        while(1) {
    111a:	e7f5      	b.n	1108 <main+0x7c>
    gsm.AddSMSFunc({ "info", cmd_info, 0 });
    111c:	aa13      	add	r2, sp, #76	; 0x4c
    111e:	4b15      	ldr	r3, [pc, #84]	; (1174 <main+0xe8>)
    1120:	3334      	adds	r3, #52	; 0x34
    1122:	cb13      	ldmia	r3!, {r0, r1, r4}
    1124:	c213      	stmia	r2!, {r0, r1, r4}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1126:	4b1a      	ldr	r3, [pc, #104]	; (1190 <main+0x104>)
    1128:	689b      	ldr	r3, [r3, #8]
    112a:	2b00      	cmp	r3, #0
    112c:	d01e      	beq.n	116c <main+0xe0>
    112e:	4a18      	ldr	r2, [pc, #96]	; (1190 <main+0x104>)
    1130:	68d0      	ldr	r0, [r2, #12]
    1132:	3301      	adds	r3, #1
    1134:	210c      	movs	r1, #12
    1136:	4359      	muls	r1, r3
    1138:	f001 f802 	bl	2140 <realloc>
        if(!new_data) return;
    113c:	2800      	cmp	r0, #0
    113e:	d00b      	beq.n	1158 <main+0xcc>
        m_data = new_data;
    1140:	4c13      	ldr	r4, [pc, #76]	; (1190 <main+0x104>)
    1142:	60e0      	str	r0, [r4, #12]
        memcpy(m_data + m_size, &elem, sizeof(T));
    1144:	220c      	movs	r2, #12
    1146:	68a3      	ldr	r3, [r4, #8]
    1148:	4353      	muls	r3, r2
    114a:	18c0      	adds	r0, r0, r3
    114c:	a913      	add	r1, sp, #76	; 0x4c
    114e:	f000 ff45 	bl	1fdc <memcpy>
        m_size++;
    1152:	68a3      	ldr	r3, [r4, #8]
    1154:	3301      	adds	r3, #1
    1156:	60a3      	str	r3, [r4, #8]
        gsm.Poll();
    1158:	480d      	ldr	r0, [pc, #52]	; (1190 <main+0x104>)
    115a:	f7ff f9b1 	bl	4c0 <_ZN3GSM4PollEv>
        net.Poll();
    115e:	480a      	ldr	r0, [pc, #40]	; (1188 <main+0xfc>)
    1160:	f000 fdbc 	bl	1cdc <_ZN9Sensornet4PollEv>
    1164:	4b07      	ldr	r3, [pc, #28]	; (1184 <main+0xf8>)
    1166:	2210      	movs	r2, #16
    1168:	61da      	str	r2, [r3, #28]
    116a:	e7f5      	b.n	1158 <main+0xcc>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    116c:	200c      	movs	r0, #12
    116e:	f000 ff21 	bl	1fb4 <malloc>
    1172:	e7e3      	b.n	113c <main+0xb0>
    1174:	00002ae4 	.word	0x00002ae4
    1178:	0000f62b 	.word	0x0000f62b
    117c:	200002f4 	.word	0x200002f4
    1180:	200000d8 	.word	0x200000d8
    1184:	41004400 	.word	0x41004400
    1188:	200000a8 	.word	0x200000a8
    118c:	000c3500 	.word	0x000c3500
    1190:	20000094 	.word	0x20000094
    1194:	00030d40 	.word	0x00030d40

00001198 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE>:
    1198:	b510      	push	{r4, lr}
    119a:	4902      	ldr	r1, [pc, #8]	; (11a4 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0xc>)
    119c:	2001      	movs	r0, #1
    119e:	f7ff fe31 	bl	e04 <_Z41__static_initialization_and_destruction_0ii>
    11a2:	bd10      	pop	{r4, pc}
    11a4:	0000ffff 	.word	0x0000ffff

000011a8 <_ZN5spi_t4InitE12spi_pincfg_tt>:
#include "spi.h"

spi_t g_spi0(SERCOM0);
spi_t g_spi1(SERCOM1);

void spi_t::Init(spi_pincfg_t pincfg, uint16_t speed) {
    11a8:	b084      	sub	sp, #16
    11aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ac:	46c6      	mov	lr, r8
    11ae:	b500      	push	{lr}
    11b0:	9107      	str	r1, [sp, #28]
    11b2:	9208      	str	r2, [sp, #32]
    11b4:	9309      	str	r3, [sp, #36]	; 0x24
    11b6:	ab0f      	add	r3, sp, #60	; 0x3c
    11b8:	881b      	ldrh	r3, [r3, #0]
    11ba:	4698      	mov	r8, r3
    if(m_sercom == SERCOM1) {
    11bc:	4b83      	ldr	r3, [pc, #524]	; (13cc <_ZN5spi_t4InitE12spi_pincfg_tt+0x224>)
    11be:	6802      	ldr	r2, [r0, #0]
    11c0:	429a      	cmp	r2, r3
    11c2:	d100      	bne.n	11c6 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1e>
    11c4:	e0c1      	b.n	134a <_ZN5spi_t4InitE12spi_pincfg_tt+0x1a2>
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);*/
        PM->APBCMASK.bit.SERCOM1_ = 1;
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
        while(GCLK->STATUS.bit.SYNCBUSY);
    } else {
        PM->APBCMASK.bit.SERCOM0_ = 1;
    11c6:	4a82      	ldr	r2, [pc, #520]	; (13d0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x228>)
    11c8:	6a13      	ldr	r3, [r2, #32]
    11ca:	2404      	movs	r4, #4
    11cc:	4323      	orrs	r3, r4
    11ce:	6213      	str	r3, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    11d0:	4b80      	ldr	r3, [pc, #512]	; (13d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    11d2:	4a81      	ldr	r2, [pc, #516]	; (13d8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x230>)
    11d4:	805a      	strh	r2, [r3, #2]
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
        while(GCLK->STATUS.bit.SYNCBUSY);
    11d6:	4b7f      	ldr	r3, [pc, #508]	; (13d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    11d8:	785b      	ldrb	r3, [r3, #1]
    11da:	09db      	lsrs	r3, r3, #7
    11dc:	d1fb      	bne.n	11d6 <_ZN5spi_t4InitE12spi_pincfg_tt+0x2e>
    }
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    11de:	ab07      	add	r3, sp, #28
    11e0:	7e1b      	ldrb	r3, [r3, #24]
    11e2:	2b00      	cmp	r3, #0
    11e4:	d100      	bne.n	11e8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x40>
    11e6:	e0bd      	b.n	1364 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1bc>
    11e8:	2503      	movs	r5, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    11ea:	9a07      	ldr	r2, [sp, #28]
    11ec:	9c08      	ldr	r4, [sp, #32]
        if(pin & 1)
    11ee:	07e3      	lsls	r3, r4, #31
    11f0:	d400      	bmi.n	11f4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x4c>
    11f2:	e0b9      	b.n	1368 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1c0>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    11f4:	0fe3      	lsrs	r3, r4, #31
    11f6:	191b      	adds	r3, r3, r4
    11f8:	105f      	asrs	r7, r3, #1
    11fa:	260f      	movs	r6, #15
    11fc:	4035      	ands	r5, r6
    11fe:	01d3      	lsls	r3, r2, #7
    1200:	4976      	ldr	r1, [pc, #472]	; (13dc <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1202:	468c      	mov	ip, r1
    1204:	4463      	add	r3, ip
    1206:	19db      	adds	r3, r3, r7
    1208:	3330      	adds	r3, #48	; 0x30
    120a:	781f      	ldrb	r7, [r3, #0]
    120c:	012d      	lsls	r5, r5, #4
    120e:	403e      	ands	r6, r7
    1210:	432e      	orrs	r6, r5
    1212:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1214:	01d3      	lsls	r3, r2, #7
    1216:	4a71      	ldr	r2, [pc, #452]	; (13dc <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1218:	4694      	mov	ip, r2
    121a:	4463      	add	r3, ip
    121c:	191b      	adds	r3, r3, r4
    121e:	3340      	adds	r3, #64	; 0x40
    1220:	781a      	ldrb	r2, [r3, #0]
    1222:	2401      	movs	r4, #1
    1224:	4322      	orrs	r2, r4
    1226:	701a      	strb	r2, [r3, #0]
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1228:	ab07      	add	r3, sp, #28
    122a:	7e5b      	ldrb	r3, [r3, #25]
    122c:	2b00      	cmp	r3, #0
    122e:	d100      	bne.n	1232 <_ZN5spi_t4InitE12spi_pincfg_tt+0x8a>
    1230:	e0a9      	b.n	1386 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1de>
    1232:	2503      	movs	r5, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1234:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1236:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        if(pin & 1)
    1238:	07e3      	lsls	r3, r4, #31
    123a:	d400      	bmi.n	123e <_ZN5spi_t4InitE12spi_pincfg_tt+0x96>
    123c:	e0a5      	b.n	138a <_ZN5spi_t4InitE12spi_pincfg_tt+0x1e2>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    123e:	0fe3      	lsrs	r3, r4, #31
    1240:	191b      	adds	r3, r3, r4
    1242:	105f      	asrs	r7, r3, #1
    1244:	260f      	movs	r6, #15
    1246:	4035      	ands	r5, r6
    1248:	01d3      	lsls	r3, r2, #7
    124a:	4964      	ldr	r1, [pc, #400]	; (13dc <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    124c:	468c      	mov	ip, r1
    124e:	4463      	add	r3, ip
    1250:	19db      	adds	r3, r3, r7
    1252:	3330      	adds	r3, #48	; 0x30
    1254:	781f      	ldrb	r7, [r3, #0]
    1256:	012d      	lsls	r5, r5, #4
    1258:	403e      	ands	r6, r7
    125a:	432e      	orrs	r6, r5
    125c:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    125e:	01d3      	lsls	r3, r2, #7
    1260:	4a5e      	ldr	r2, [pc, #376]	; (13dc <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1262:	4694      	mov	ip, r2
    1264:	4463      	add	r3, ip
    1266:	191b      	adds	r3, r3, r4
    1268:	3340      	adds	r3, #64	; 0x40
    126a:	781a      	ldrb	r2, [r3, #0]
    126c:	2401      	movs	r4, #1
    126e:	4322      	orrs	r2, r4
    1270:	701a      	strb	r2, [r3, #0]
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1272:	ab07      	add	r3, sp, #28
    1274:	7e9b      	ldrb	r3, [r3, #26]
    1276:	2b00      	cmp	r3, #0
    1278:	d100      	bne.n	127c <_ZN5spi_t4InitE12spi_pincfg_tt+0xd4>
    127a:	e095      	b.n	13a8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x200>
    127c:	2503      	movs	r5, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    127e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1280:	9c0c      	ldr	r4, [sp, #48]	; 0x30
        if(pin & 1)
    1282:	07e3      	lsls	r3, r4, #31
    1284:	d400      	bmi.n	1288 <_ZN5spi_t4InitE12spi_pincfg_tt+0xe0>
    1286:	e091      	b.n	13ac <_ZN5spi_t4InitE12spi_pincfg_tt+0x204>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1288:	0fe3      	lsrs	r3, r4, #31
    128a:	191b      	adds	r3, r3, r4
    128c:	105f      	asrs	r7, r3, #1
    128e:	260f      	movs	r6, #15
    1290:	4035      	ands	r5, r6
    1292:	01d3      	lsls	r3, r2, #7
    1294:	4951      	ldr	r1, [pc, #324]	; (13dc <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1296:	468c      	mov	ip, r1
    1298:	4463      	add	r3, ip
    129a:	19db      	adds	r3, r3, r7
    129c:	3330      	adds	r3, #48	; 0x30
    129e:	781f      	ldrb	r7, [r3, #0]
    12a0:	012d      	lsls	r5, r5, #4
    12a2:	403e      	ands	r6, r7
    12a4:	432e      	orrs	r6, r5
    12a6:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    12a8:	01d3      	lsls	r3, r2, #7
    12aa:	4a4c      	ldr	r2, [pc, #304]	; (13dc <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    12ac:	4694      	mov	ip, r2
    12ae:	4463      	add	r3, ip
    12b0:	191b      	adds	r3, r3, r4
    12b2:	3340      	adds	r3, #64	; 0x40
    12b4:	781a      	ldrb	r2, [r3, #0]
    12b6:	2401      	movs	r4, #1
    12b8:	4322      	orrs	r2, r4
    12ba:	701a      	strb	r2, [r3, #0]

    m_sercom->SPI.CTRLA.bit.ENABLE = 0;
    12bc:	6802      	ldr	r2, [r0, #0]
    12be:	6813      	ldr	r3, [r2, #0]
    12c0:	2402      	movs	r4, #2
    12c2:	43a3      	bics	r3, r4
    12c4:	6013      	str	r3, [r2, #0]
	m_sercom->SPI.CTRLA.bit.SWRST = 1;
    12c6:	6802      	ldr	r2, [r0, #0]
    12c8:	6813      	ldr	r3, [r2, #0]
    12ca:	3c01      	subs	r4, #1
    12cc:	4323      	orrs	r3, r4
    12ce:	6013      	str	r3, [r2, #0]
	while(m_sercom->SPI.CTRLA.bit.SWRST);
    12d0:	6803      	ldr	r3, [r0, #0]
    12d2:	681a      	ldr	r2, [r3, #0]
    12d4:	07d2      	lsls	r2, r2, #31
    12d6:	d4fb      	bmi.n	12d0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x128>

	m_sercom->SPI.CTRLA.bit.MODE = SERCOM_SPI_CTRLA_MODE_SPI_MASTER_Val;
    12d8:	681a      	ldr	r2, [r3, #0]
    12da:	241c      	movs	r4, #28
    12dc:	43a2      	bics	r2, r4
    12de:	3c10      	subs	r4, #16
    12e0:	4322      	orrs	r2, r4
    12e2:	601a      	str	r2, [r3, #0]
	m_sercom->SPI.CTRLA.bit.DOPO = pincfg.mosisckpad;
    12e4:	6806      	ldr	r6, [r0, #0]
    12e6:	ad07      	add	r5, sp, #28
    12e8:	7f2c      	ldrb	r4, [r5, #28]
    12ea:	2303      	movs	r3, #3
    12ec:	401c      	ands	r4, r3
    12ee:	6832      	ldr	r2, [r6, #0]
    12f0:	0424      	lsls	r4, r4, #16
    12f2:	4f3b      	ldr	r7, [pc, #236]	; (13e0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x238>)
    12f4:	403a      	ands	r2, r7
    12f6:	4322      	orrs	r2, r4
    12f8:	6032      	str	r2, [r6, #0]
	m_sercom->SPI.CTRLA.bit.DIPO = pincfg.misopad;
    12fa:	6804      	ldr	r4, [r0, #0]
    12fc:	7eed      	ldrb	r5, [r5, #27]
    12fe:	6822      	ldr	r2, [r4, #0]
    1300:	402b      	ands	r3, r5
    1302:	051b      	lsls	r3, r3, #20
    1304:	4d37      	ldr	r5, [pc, #220]	; (13e4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x23c>)
    1306:	402a      	ands	r2, r5
    1308:	4313      	orrs	r3, r2
    130a:	6023      	str	r3, [r4, #0]

    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    130c:	6803      	ldr	r3, [r0, #0]
    130e:	69da      	ldr	r2, [r3, #28]
    1310:	0752      	lsls	r2, r2, #29
    1312:	d4fb      	bmi.n	130c <_ZN5spi_t4InitE12spi_pincfg_tt+0x164>
    /* SPI receiver is enabled */
    m_sercom->SPI.CTRLB.bit.RXEN = 1;
    1314:	685c      	ldr	r4, [r3, #4]
    1316:	2280      	movs	r2, #128	; 0x80
    1318:	0292      	lsls	r2, r2, #10
    131a:	4322      	orrs	r2, r4
    131c:	605a      	str	r2, [r3, #4]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    131e:	6803      	ldr	r3, [r0, #0]
    1320:	69da      	ldr	r2, [r3, #28]
    1322:	0752      	lsls	r2, r2, #29
    1324:	d4fb      	bmi.n	131e <_ZN5spi_t4InitE12spi_pincfg_tt+0x176>

    /* baud register value corresponds to the SPI speed */
    m_sercom->SPI.BAUD.reg = speed;
    1326:	4642      	mov	r2, r8
    1328:	b2d1      	uxtb	r1, r2
    132a:	7319      	strb	r1, [r3, #12]
    /* SERCOM peripheral enabled */
    m_sercom->SPI.CTRLA.bit.ENABLE = 1;
    132c:	6802      	ldr	r2, [r0, #0]
    132e:	6813      	ldr	r3, [r2, #0]
    1330:	2102      	movs	r1, #2
    1332:	430b      	orrs	r3, r1
    1334:	6013      	str	r3, [r2, #0]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.ENABLE);
    1336:	6803      	ldr	r3, [r0, #0]
    1338:	69db      	ldr	r3, [r3, #28]
    133a:	079b      	lsls	r3, r3, #30
    133c:	d4fb      	bmi.n	1336 <_ZN5spi_t4InitE12spi_pincfg_tt+0x18e>
}
    133e:	bc04      	pop	{r2}
    1340:	4690      	mov	r8, r2
    1342:	bcf0      	pop	{r4, r5, r6, r7}
    1344:	bc08      	pop	{r3}
    1346:	b004      	add	sp, #16
    1348:	4718      	bx	r3
        PM->APBCMASK.bit.SERCOM1_ = 1;
    134a:	4a21      	ldr	r2, [pc, #132]	; (13d0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x228>)
    134c:	6a13      	ldr	r3, [r2, #32]
    134e:	2408      	movs	r4, #8
    1350:	4323      	orrs	r3, r4
    1352:	6213      	str	r3, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    1354:	4b1f      	ldr	r3, [pc, #124]	; (13d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    1356:	4a24      	ldr	r2, [pc, #144]	; (13e8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x240>)
    1358:	805a      	strh	r2, [r3, #2]
        while(GCLK->STATUS.bit.SYNCBUSY);
    135a:	4b1e      	ldr	r3, [pc, #120]	; (13d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    135c:	785b      	ldrb	r3, [r3, #1]
    135e:	09db      	lsrs	r3, r3, #7
    1360:	d1fb      	bne.n	135a <_ZN5spi_t4InitE12spi_pincfg_tt+0x1b2>
    1362:	e73c      	b.n	11de <_ZN5spi_t4InitE12spi_pincfg_tt+0x36>
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1364:	2502      	movs	r5, #2
    1366:	e740      	b.n	11ea <_ZN5spi_t4InitE12spi_pincfg_tt+0x42>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    1368:	0fe3      	lsrs	r3, r4, #31
    136a:	191b      	adds	r3, r3, r4
    136c:	105e      	asrs	r6, r3, #1
    136e:	01d3      	lsls	r3, r2, #7
    1370:	491a      	ldr	r1, [pc, #104]	; (13dc <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1372:	468c      	mov	ip, r1
    1374:	4463      	add	r3, ip
    1376:	199b      	adds	r3, r3, r6
    1378:	3330      	adds	r3, #48	; 0x30
    137a:	781e      	ldrb	r6, [r3, #0]
    137c:	270f      	movs	r7, #15
    137e:	43be      	bics	r6, r7
    1380:	4335      	orrs	r5, r6
    1382:	701d      	strb	r5, [r3, #0]
    1384:	e746      	b.n	1214 <_ZN5spi_t4InitE12spi_pincfg_tt+0x6c>
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1386:	2502      	movs	r5, #2
    1388:	e754      	b.n	1234 <_ZN5spi_t4InitE12spi_pincfg_tt+0x8c>
    138a:	0fe3      	lsrs	r3, r4, #31
    138c:	191b      	adds	r3, r3, r4
    138e:	105e      	asrs	r6, r3, #1
    1390:	01d3      	lsls	r3, r2, #7
    1392:	4912      	ldr	r1, [pc, #72]	; (13dc <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1394:	468c      	mov	ip, r1
    1396:	4463      	add	r3, ip
    1398:	199b      	adds	r3, r3, r6
    139a:	3330      	adds	r3, #48	; 0x30
    139c:	781e      	ldrb	r6, [r3, #0]
    139e:	270f      	movs	r7, #15
    13a0:	43be      	bics	r6, r7
    13a2:	4335      	orrs	r5, r6
    13a4:	701d      	strb	r5, [r3, #0]
    13a6:	e75a      	b.n	125e <_ZN5spi_t4InitE12spi_pincfg_tt+0xb6>
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    13a8:	2502      	movs	r5, #2
    13aa:	e768      	b.n	127e <_ZN5spi_t4InitE12spi_pincfg_tt+0xd6>
    13ac:	0fe3      	lsrs	r3, r4, #31
    13ae:	191b      	adds	r3, r3, r4
    13b0:	105e      	asrs	r6, r3, #1
    13b2:	01d3      	lsls	r3, r2, #7
    13b4:	4909      	ldr	r1, [pc, #36]	; (13dc <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    13b6:	468c      	mov	ip, r1
    13b8:	4463      	add	r3, ip
    13ba:	199b      	adds	r3, r3, r6
    13bc:	3330      	adds	r3, #48	; 0x30
    13be:	781e      	ldrb	r6, [r3, #0]
    13c0:	270f      	movs	r7, #15
    13c2:	43be      	bics	r6, r7
    13c4:	4335      	orrs	r5, r6
    13c6:	701d      	strb	r5, [r3, #0]
    13c8:	e76e      	b.n	12a8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x100>
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	42000c00 	.word	0x42000c00
    13d0:	40000400 	.word	0x40000400
    13d4:	40000c00 	.word	0x40000c00
    13d8:	0000400e 	.word	0x0000400e
    13dc:	41004400 	.word	0x41004400
    13e0:	fffcffff 	.word	0xfffcffff
    13e4:	ffcfffff 	.word	0xffcfffff
    13e8:	0000400f 	.word	0x0000400f

000013ec <_ZN5spi_tC1EP6Sercom>:

spi_t::spi_t(Sercom* sercom) {
    m_sercom = sercom;
    13ec:	6001      	str	r1, [r0, #0]
}
    13ee:	4770      	bx	lr

000013f0 <_Z41__static_initialization_and_destruction_0ii>:
    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    //m_sercom->SPI.INTFLAG.bit.RXC = 1; // Clear RXC flag by setting it to 1
    m_sercom->SPI.DATA.reg = b;
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
	return m_sercom->SPI.DATA.reg;
    13f0:	b510      	push	{r4, lr}
    13f2:	2801      	cmp	r0, #1
    13f4:	d000      	beq.n	13f8 <_Z41__static_initialization_and_destruction_0ii+0x8>
    13f6:	bd10      	pop	{r4, pc}
    13f8:	4b05      	ldr	r3, [pc, #20]	; (1410 <_Z41__static_initialization_and_destruction_0ii+0x20>)
    13fa:	4299      	cmp	r1, r3
    13fc:	d1fb      	bne.n	13f6 <_Z41__static_initialization_and_destruction_0ii+0x6>
spi_t g_spi0(SERCOM0);
    13fe:	4905      	ldr	r1, [pc, #20]	; (1414 <_Z41__static_initialization_and_destruction_0ii+0x24>)
    1400:	4805      	ldr	r0, [pc, #20]	; (1418 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    1402:	f7ff fff3 	bl	13ec <_ZN5spi_tC1EP6Sercom>
spi_t g_spi1(SERCOM1);
    1406:	4905      	ldr	r1, [pc, #20]	; (141c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    1408:	4805      	ldr	r0, [pc, #20]	; (1420 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    140a:	f7ff ffef 	bl	13ec <_ZN5spi_tC1EP6Sercom>
    140e:	e7f2      	b.n	13f6 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1410:	0000ffff 	.word	0x0000ffff
    1414:	42000800 	.word	0x42000800
    1418:	200000d8 	.word	0x200000d8
    141c:	42000c00 	.word	0x42000c00
    1420:	200000dc 	.word	0x200000dc

00001424 <_ZN5spi_t8TransferEh>:
    if(!m_sercom) return 0xFF;
    1424:	6802      	ldr	r2, [r0, #0]
    1426:	2a00      	cmp	r2, #0
    1428:	d00a      	beq.n	1440 <_ZN5spi_t8TransferEh+0x1c>
    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    142a:	7e13      	ldrb	r3, [r2, #24]
    142c:	07db      	lsls	r3, r3, #31
    142e:	d5fc      	bpl.n	142a <_ZN5spi_t8TransferEh+0x6>
    m_sercom->SPI.DATA.reg = b;
    1430:	6291      	str	r1, [r2, #40]	; 0x28
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
    1432:	6803      	ldr	r3, [r0, #0]
    1434:	7e1a      	ldrb	r2, [r3, #24]
    1436:	0752      	lsls	r2, r2, #29
    1438:	d5fb      	bpl.n	1432 <_ZN5spi_t8TransferEh+0xe>
	return m_sercom->SPI.DATA.reg;
    143a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    143c:	b2c0      	uxtb	r0, r0
    143e:	4770      	bx	lr
    if(!m_sercom) return 0xFF;
    1440:	20ff      	movs	r0, #255	; 0xff
    1442:	e7fc      	b.n	143e <_ZN5spi_t8TransferEh+0x1a>

00001444 <_GLOBAL__sub_I_g_spi0>:
    1444:	b510      	push	{r4, lr}
    1446:	4902      	ldr	r1, [pc, #8]	; (1450 <_GLOBAL__sub_I_g_spi0+0xc>)
    1448:	2001      	movs	r0, #1
    144a:	f7ff ffd1 	bl	13f0 <_Z41__static_initialization_and_destruction_0ii>
    144e:	bd10      	pop	{r4, pc}
    1450:	0000ffff 	.word	0x0000ffff

00001454 <initializeSystemFor48MHz>:

static volatile uint64_t _cycles;

static void initializeSystemFor48MHz()
{
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    1454:	4a48      	ldr	r2, [pc, #288]	; (1578 <initializeSystemFor48MHz+0x124>)
    1456:	6a11      	ldr	r1, [r2, #32]
    1458:	23c0      	movs	r3, #192	; 0xc0
    145a:	009b      	lsls	r3, r3, #2
    145c:	430b      	orrs	r3, r1
    145e:	6213      	str	r3, [r2, #32]
	// Change the timing of the NVM access
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
    1460:	4946      	ldr	r1, [pc, #280]	; (157c <initializeSystemFor48MHz+0x128>)
    1462:	684a      	ldr	r2, [r1, #4]
    1464:	231e      	movs	r3, #30
    1466:	439a      	bics	r2, r3
    1468:	3b1c      	subs	r3, #28
    146a:	4313      	orrs	r3, r2
    146c:	604b      	str	r3, [r1, #4]

	// Enable the bus clock for the clock system.
	PM->APBAMASK.bit.GCLK_ = 1;
    146e:	4a44      	ldr	r2, [pc, #272]	; (1580 <initializeSystemFor48MHz+0x12c>)
    1470:	6991      	ldr	r1, [r2, #24]
    1472:	2308      	movs	r3, #8
    1474:	430b      	orrs	r3, r1
    1476:	6193      	str	r3, [r2, #24]

	// Initialise the DFLL to run in closed-loop mode at 48MHz
	// 1. Make a software reset of the clock system.
	GCLK->CTRL.bit.SWRST = 1;
    1478:	4a42      	ldr	r2, [pc, #264]	; (1584 <initializeSystemFor48MHz+0x130>)
    147a:	7813      	ldrb	r3, [r2, #0]
    147c:	2101      	movs	r1, #1
    147e:	430b      	orrs	r3, r1
    1480:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.bit.SWRST && GCLK->STATUS.bit.SYNCBUSY) {};
    1482:	4b40      	ldr	r3, [pc, #256]	; (1584 <initializeSystemFor48MHz+0x130>)
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	07db      	lsls	r3, r3, #31
    1488:	d503      	bpl.n	1492 <initializeSystemFor48MHz+0x3e>
    148a:	4b3e      	ldr	r3, [pc, #248]	; (1584 <initializeSystemFor48MHz+0x130>)
    148c:	785b      	ldrb	r3, [r3, #1]
    148e:	09db      	lsrs	r3, r3, #7
    1490:	d1f7      	bne.n	1482 <initializeSystemFor48MHz+0x2e>
	// 2. Make sure the OCM8M keeps running.
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
    1492:	4b39      	ldr	r3, [pc, #228]	; (1578 <initializeSystemFor48MHz+0x124>)
    1494:	6a19      	ldr	r1, [r3, #32]
    1496:	2280      	movs	r2, #128	; 0x80
    1498:	4391      	bics	r1, r2
    149a:	6219      	str	r1, [r3, #32]
	// 3. Set the division factor to 64, which reduces the 1MHz source to 15.625kHz
	GCLK->GENDIV.reg =
    149c:	4b39      	ldr	r3, [pc, #228]	; (1584 <initializeSystemFor48MHz+0x130>)
    149e:	4a3a      	ldr	r2, [pc, #232]	; (1588 <initializeSystemFor48MHz+0x134>)
    14a0:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(3) | // Select generator 3
	GCLK_GENDIV_DIV(64); // Set the division factor to 64
	// 4. Create generic clock generator 3 for the 15KHz signal of the DFLL
	GCLK->GENCTRL.reg =
    14a2:	4a3a      	ldr	r2, [pc, #232]	; (158c <initializeSystemFor48MHz+0x138>)
    14a4:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(3) | // Select generator 3
	GCLK_GENCTRL_SRC_OSC8M | // Select source OSC8M
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    14a6:	4b37      	ldr	r3, [pc, #220]	; (1584 <initializeSystemFor48MHz+0x130>)
    14a8:	785b      	ldrb	r3, [r3, #1]
    14aa:	09db      	lsrs	r3, r3, #7
    14ac:	d1fb      	bne.n	14a6 <initializeSystemFor48MHz+0x52>
	// 5. Configure DFLL with the
	GCLK->CLKCTRL.reg =
    14ae:	4b35      	ldr	r3, [pc, #212]	; (1584 <initializeSystemFor48MHz+0x130>)
    14b0:	2286      	movs	r2, #134	; 0x86
    14b2:	01d2      	lsls	r2, r2, #7
    14b4:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID_DFLL48 | // Target is DFLL48M
	GCLK_CLKCTRL_GEN(3) | // Select generator 3 as source.
	GCLK_CLKCTRL_CLKEN; // Enable the DFLL48M
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    14b6:	4b33      	ldr	r3, [pc, #204]	; (1584 <initializeSystemFor48MHz+0x130>)
    14b8:	785b      	ldrb	r3, [r3, #1]
    14ba:	09db      	lsrs	r3, r3, #7
    14bc:	d1fb      	bne.n	14b6 <initializeSystemFor48MHz+0x62>
	// 6. Workaround to be able to configure the DFLL.
	SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
    14be:	4a2e      	ldr	r2, [pc, #184]	; (1578 <initializeSystemFor48MHz+0x124>)
    14c0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    14c2:	2180      	movs	r1, #128	; 0x80
    14c4:	438b      	bics	r3, r1
    14c6:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    14c8:	4b2b      	ldr	r3, [pc, #172]	; (1578 <initializeSystemFor48MHz+0x124>)
    14ca:	68db      	ldr	r3, [r3, #12]
    14cc:	06db      	lsls	r3, r3, #27
    14ce:	d5fb      	bpl.n	14c8 <initializeSystemFor48MHz+0x74>
	// 7. Change the multiplication factor.
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
    14d0:	4b29      	ldr	r3, [pc, #164]	; (1578 <initializeSystemFor48MHz+0x124>)
    14d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    14d4:	0c12      	lsrs	r2, r2, #16
    14d6:	0412      	lsls	r2, r2, #16
    14d8:	21c0      	movs	r1, #192	; 0xc0
    14da:	0109      	lsls	r1, r1, #4
    14dc:	4311      	orrs	r1, r2
    14de:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
    14e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    14e2:	0192      	lsls	r2, r2, #6
    14e4:	0992      	lsrs	r2, r2, #6
    14e6:	2180      	movs	r1, #128	; 0x80
    14e8:	04c9      	lsls	r1, r1, #19
    14ea:	4311      	orrs	r1, r2
    14ec:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.FSTEP = 1; // Fine step = 1
    14ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    14f0:	4a27      	ldr	r2, [pc, #156]	; (1590 <initializeSystemFor48MHz+0x13c>)
    14f2:	4011      	ands	r1, r2
    14f4:	2280      	movs	r2, #128	; 0x80
    14f6:	0252      	lsls	r2, r2, #9
    14f8:	430a      	orrs	r2, r1
    14fa:	62da      	str	r2, [r3, #44]	; 0x2c
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    14fc:	4b1e      	ldr	r3, [pc, #120]	; (1578 <initializeSystemFor48MHz+0x124>)
    14fe:	68db      	ldr	r3, [r3, #12]
    1500:	06db      	lsls	r3, r3, #27
    1502:	d5fb      	bpl.n	14fc <initializeSystemFor48MHz+0xa8>
	// 8. Start closed-loop mode
	SYSCTRL->DFLLCTRL.reg |=
    1504:	4a1c      	ldr	r2, [pc, #112]	; (1578 <initializeSystemFor48MHz+0x124>)
    1506:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1508:	2181      	movs	r1, #129	; 0x81
    150a:	0089      	lsls	r1, r1, #2
    150c:	430b      	orrs	r3, r1
    150e:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_MODE | // 1 = Closed loop mode.
	SYSCTRL_DFLLCTRL_QLDIS; // 1 = Disable quick lock.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1510:	4b19      	ldr	r3, [pc, #100]	; (1578 <initializeSystemFor48MHz+0x124>)
    1512:	68db      	ldr	r3, [r3, #12]
    1514:	06db      	lsls	r3, r3, #27
    1516:	d5fb      	bpl.n	1510 <initializeSystemFor48MHz+0xbc>
	// 9. Clear the lock flags.
	SYSCTRL->INTFLAG.bit.DFLLLCKC = 1;
    1518:	4b17      	ldr	r3, [pc, #92]	; (1578 <initializeSystemFor48MHz+0x124>)
    151a:	6899      	ldr	r1, [r3, #8]
    151c:	2280      	movs	r2, #128	; 0x80
    151e:	430a      	orrs	r2, r1
    1520:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLLCKF = 1;
    1522:	6899      	ldr	r1, [r3, #8]
    1524:	2240      	movs	r2, #64	; 0x40
    1526:	430a      	orrs	r2, r1
    1528:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLRDY = 1;
    152a:	6899      	ldr	r1, [r3, #8]
    152c:	2210      	movs	r2, #16
    152e:	430a      	orrs	r2, r1
    1530:	609a      	str	r2, [r3, #8]
	// 10. Enable the DFLL
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
    1532:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    1534:	2102      	movs	r1, #2
    1536:	430a      	orrs	r2, r1
    1538:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    153a:	4b0f      	ldr	r3, [pc, #60]	; (1578 <initializeSystemFor48MHz+0x124>)
    153c:	68db      	ldr	r3, [r3, #12]
    153e:	06db      	lsls	r3, r3, #27
    1540:	d5fb      	bpl.n	153a <initializeSystemFor48MHz+0xe6>
	// 11. Wait for the fine and coarse locks.
	while (!SYSCTRL->INTFLAG.bit.DFLLLCKC && !SYSCTRL->INTFLAG.bit.DFLLLCKF) {};
    1542:	4b0d      	ldr	r3, [pc, #52]	; (1578 <initializeSystemFor48MHz+0x124>)
    1544:	689b      	ldr	r3, [r3, #8]
    1546:	061b      	lsls	r3, r3, #24
    1548:	d403      	bmi.n	1552 <initializeSystemFor48MHz+0xfe>
    154a:	4b0b      	ldr	r3, [pc, #44]	; (1578 <initializeSystemFor48MHz+0x124>)
    154c:	689b      	ldr	r3, [r3, #8]
    154e:	065b      	lsls	r3, r3, #25
    1550:	d5f7      	bpl.n	1542 <initializeSystemFor48MHz+0xee>
	// 12. Wait until the DFLL is ready.
	while (!SYSCTRL->INTFLAG.bit.DFLLRDY) {};
    1552:	4b09      	ldr	r3, [pc, #36]	; (1578 <initializeSystemFor48MHz+0x124>)
    1554:	689b      	ldr	r3, [r3, #8]
    1556:	06db      	lsls	r3, r3, #27
    1558:	d5fb      	bpl.n	1552 <initializeSystemFor48MHz+0xfe>

	// Switch the main clock speed.
	// 1. Set the divisor of generic clock 0 to 0
	GCLK->GENDIV.reg =
    155a:	4b0a      	ldr	r3, [pc, #40]	; (1584 <initializeSystemFor48MHz+0x130>)
    155c:	2200      	movs	r2, #0
    155e:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(0) | // Select generator 0
	GCLK_GENDIV_DIV(0);
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1560:	4b08      	ldr	r3, [pc, #32]	; (1584 <initializeSystemFor48MHz+0x130>)
    1562:	785b      	ldrb	r3, [r3, #1]
    1564:	09db      	lsrs	r3, r3, #7
    1566:	d1fb      	bne.n	1560 <initializeSystemFor48MHz+0x10c>
	// 2. Switch generic clock 0 to the DFLL
	GCLK->GENCTRL.reg =
    1568:	4b06      	ldr	r3, [pc, #24]	; (1584 <initializeSystemFor48MHz+0x130>)
    156a:	4a0a      	ldr	r2, [pc, #40]	; (1594 <initializeSystemFor48MHz+0x140>)
    156c:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(0) | // Select generator 0
	GCLK_GENCTRL_SRC_DFLL48M | // Select source DFLL
	GCLK_GENCTRL_IDC | // Set improved duty cycle 50/50
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    156e:	4b05      	ldr	r3, [pc, #20]	; (1584 <initializeSystemFor48MHz+0x130>)
    1570:	785b      	ldrb	r3, [r3, #1]
    1572:	09db      	lsrs	r3, r3, #7
    1574:	d1fb      	bne.n	156e <initializeSystemFor48MHz+0x11a>
}
    1576:	4770      	bx	lr
    1578:	40000800 	.word	0x40000800
    157c:	41004000 	.word	0x41004000
    1580:	40000400 	.word	0x40000400
    1584:	40000c00 	.word	0x40000c00
    1588:	00004003 	.word	0x00004003
    158c:	00010603 	.word	0x00010603
    1590:	fc00ffff 	.word	0xfc00ffff
    1594:	00030700 	.word	0x00030700

00001598 <systick_init>:

void systick_init() {
    1598:	b510      	push	{r4, lr}
	initializeSystemFor48MHz();
    159a:	f7ff ff5b 	bl	1454 <initializeSystemFor48MHz>
	
	_cycles = 0;
    159e:	4b09      	ldr	r3, [pc, #36]	; (15c4 <systick_init+0x2c>)
    15a0:	2000      	movs	r0, #0
    15a2:	2100      	movs	r1, #0
    15a4:	6018      	str	r0, [r3, #0]
    15a6:	6059      	str	r1, [r3, #4]

	SysTick->CTRL = 0;
    15a8:	4b07      	ldr	r3, [pc, #28]	; (15c8 <systick_init+0x30>)
    15aa:	2200      	movs	r2, #0
    15ac:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0xFFFFFF;
    15ae:	4a07      	ldr	r2, [pc, #28]	; (15cc <systick_init+0x34>)
    15b0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0xFFFFFF;
    15b2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
    15b4:	2207      	movs	r2, #7
    15b6:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    15b8:	4b05      	ldr	r3, [pc, #20]	; (15d0 <systick_init+0x38>)
    15ba:	2280      	movs	r2, #128	; 0x80
    15bc:	0612      	lsls	r2, r2, #24
    15be:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(SysTick_IRQn);
}
    15c0:	bd10      	pop	{r4, pc}
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	200000e0 	.word	0x200000e0
    15c8:	e000e010 	.word	0xe000e010
    15cc:	00ffffff 	.word	0x00ffffff
    15d0:	e000e100 	.word	0xe000e100

000015d4 <systick_cycles>:

uint64_t systick_cycles() {
	return _cycles + (0xFFFFFF - SysTick->VAL);
    15d4:	4b05      	ldr	r3, [pc, #20]	; (15ec <systick_cycles+0x18>)
    15d6:	689b      	ldr	r3, [r3, #8]
    15d8:	4a05      	ldr	r2, [pc, #20]	; (15f0 <systick_cycles+0x1c>)
    15da:	1ad0      	subs	r0, r2, r3
    15dc:	2100      	movs	r1, #0
    15de:	4b05      	ldr	r3, [pc, #20]	; (15f4 <systick_cycles+0x20>)
    15e0:	681a      	ldr	r2, [r3, #0]
    15e2:	685b      	ldr	r3, [r3, #4]
    15e4:	1880      	adds	r0, r0, r2
    15e6:	4159      	adcs	r1, r3
}
    15e8:	4770      	bx	lr
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	e000e010 	.word	0xe000e010
    15f0:	00ffffff 	.word	0x00ffffff
    15f4:	200000e0 	.word	0x200000e0

000015f8 <millis>:
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000000) + 0.99999999 );
	ticks >>= 35;
	return (uint32_t)ticks;
}

uint32_t millis() {
    15f8:	b510      	push	{r4, lr}
	// https://en.wikipedia.org/wiki/Division_algorithm#Division_by_a_constant
	uint64_t ticks = systick_cycles();
    15fa:	f7ff ffeb 	bl	15d4 <systick_cycles>
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000) + 0.99999999 );
    15fe:	4a03      	ldr	r2, [pc, #12]	; (160c <millis+0x14>)
    1600:	2300      	movs	r3, #0
    1602:	f000 fc77 	bl	1ef4 <__aeabi_lmul>
	ticks >>= 35;
    1606:	08c8      	lsrs	r0, r1, #3
	return (uint32_t)ticks;
}
    1608:	bd10      	pop	{r4, pc}
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	000aec34 	.word	0x000aec34

00001610 <SysTick_Handler>:

void SysTick_Handler() {
    1610:	b530      	push	{r4, r5, lr}
	_cycles += 0x1000000;
    1612:	4905      	ldr	r1, [pc, #20]	; (1628 <SysTick_Handler+0x18>)
    1614:	680a      	ldr	r2, [r1, #0]
    1616:	684b      	ldr	r3, [r1, #4]
    1618:	2480      	movs	r4, #128	; 0x80
    161a:	0464      	lsls	r4, r4, #17
    161c:	2500      	movs	r5, #0
    161e:	1912      	adds	r2, r2, r4
    1620:	416b      	adcs	r3, r5
    1622:	600a      	str	r2, [r1, #0]
    1624:	604b      	str	r3, [r1, #4]
    1626:	bd30      	pop	{r4, r5, pc}
    1628:	200000e0 	.word	0x200000e0

0000162c <_Z41__static_initialization_and_destruction_0ii>:
    g_uart0.sercom_handler();
}

void SERCOM1_Handler() {
    g_uart1.sercom_handler();
    162c:	b570      	push	{r4, r5, r6, lr}
    162e:	2801      	cmp	r0, #1
    1630:	d000      	beq.n	1634 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1632:	bd70      	pop	{r4, r5, r6, pc}
    1634:	4b0c      	ldr	r3, [pc, #48]	; (1668 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1636:	4299      	cmp	r1, r3
    1638:	d1fb      	bne.n	1632 <_Z41__static_initialization_and_destruction_0ii+0x6>
    volatile bool m_rxfull = false;

    bool m_used = false;

public:
    uart_t(Sercom* sercom) { m_sercom = sercom; }
    163a:	4a0c      	ldr	r2, [pc, #48]	; (166c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    163c:	2581      	movs	r5, #129	; 0x81
    163e:	00ad      	lsls	r5, r5, #2
    1640:	2300      	movs	r3, #0
    1642:	5353      	strh	r3, [r2, r5]
    1644:	4c0a      	ldr	r4, [pc, #40]	; (1670 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1646:	5313      	strh	r3, [r2, r4]
    1648:	2082      	movs	r0, #130	; 0x82
    164a:	0080      	lsls	r0, r0, #2
    164c:	5413      	strb	r3, [r2, r0]
    164e:	4909      	ldr	r1, [pc, #36]	; (1674 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1650:	5453      	strb	r3, [r2, r1]
    1652:	4e09      	ldr	r6, [pc, #36]	; (1678 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    1654:	6016      	str	r6, [r2, #0]
    1656:	4a09      	ldr	r2, [pc, #36]	; (167c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    1658:	5353      	strh	r3, [r2, r5]
    165a:	5313      	strh	r3, [r2, r4]
    165c:	5413      	strb	r3, [r2, r0]
    165e:	5453      	strb	r3, [r2, r1]
    1660:	4b07      	ldr	r3, [pc, #28]	; (1680 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1662:	6013      	str	r3, [r2, #0]
    1664:	e7e5      	b.n	1632 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	0000ffff 	.word	0x0000ffff
    166c:	200000e8 	.word	0x200000e8
    1670:	00000206 	.word	0x00000206
    1674:	00000209 	.word	0x00000209
    1678:	42000800 	.word	0x42000800
    167c:	200002f4 	.word	0x200002f4
    1680:	42000c00 	.word	0x42000c00

00001684 <_ZN6uart_t4initERK13uart_pincfg_tt>:
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
    1684:	b5f0      	push	{r4, r5, r6, r7, lr}
    1686:	46ce      	mov	lr, r9
    1688:	4647      	mov	r7, r8
    168a:	b580      	push	{r7, lr}
    168c:	4691      	mov	r9, r2
    if(m_sercom == SERCOM1) {
    168e:	4b6c      	ldr	r3, [pc, #432]	; (1840 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
    1690:	6804      	ldr	r4, [r0, #0]
    1692:	429c      	cmp	r4, r3
    1694:	d100      	bne.n	1698 <_ZN6uart_t4initERK13uart_pincfg_tt+0x14>
    1696:	e09d      	b.n	17d4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x150>
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
    1698:	4c6a      	ldr	r4, [pc, #424]	; (1844 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
    169a:	6a23      	ldr	r3, [r4, #32]
    169c:	2504      	movs	r5, #4
    169e:	432b      	orrs	r3, r5
    16a0:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    16a2:	4b69      	ldr	r3, [pc, #420]	; (1848 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
    16a4:	4c69      	ldr	r4, [pc, #420]	; (184c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c8>)
    16a6:	805c      	strh	r4, [r3, #2]
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    16a8:	7c8b      	ldrb	r3, [r1, #18]
    16aa:	2b00      	cmp	r3, #0
    16ac:	d100      	bne.n	16b0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x2c>
    16ae:	e09a      	b.n	17e6 <_ZN6uart_t4initERK13uart_pincfg_tt+0x162>
    16b0:	2603      	movs	r6, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    16b2:	680c      	ldr	r4, [r1, #0]
    16b4:	684d      	ldr	r5, [r1, #4]
        if(pin & 1)
    16b6:	07eb      	lsls	r3, r5, #31
    16b8:	d400      	bmi.n	16bc <_ZN6uart_t4initERK13uart_pincfg_tt+0x38>
    16ba:	e096      	b.n	17ea <_ZN6uart_t4initERK13uart_pincfg_tt+0x166>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    16bc:	0feb      	lsrs	r3, r5, #31
    16be:	195b      	adds	r3, r3, r5
    16c0:	105b      	asrs	r3, r3, #1
    16c2:	469c      	mov	ip, r3
    16c4:	270f      	movs	r7, #15
    16c6:	403e      	ands	r6, r7
    16c8:	01e3      	lsls	r3, r4, #7
    16ca:	4a61      	ldr	r2, [pc, #388]	; (1850 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    16cc:	4690      	mov	r8, r2
    16ce:	4443      	add	r3, r8
    16d0:	4463      	add	r3, ip
    16d2:	3330      	adds	r3, #48	; 0x30
    16d4:	781a      	ldrb	r2, [r3, #0]
    16d6:	0136      	lsls	r6, r6, #4
    16d8:	4017      	ands	r7, r2
    16da:	4337      	orrs	r7, r6
    16dc:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    16de:	01e3      	lsls	r3, r4, #7
    16e0:	4c5b      	ldr	r4, [pc, #364]	; (1850 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    16e2:	46a4      	mov	ip, r4
    16e4:	4463      	add	r3, ip
    16e6:	195b      	adds	r3, r3, r5
    16e8:	3340      	adds	r3, #64	; 0x40
    16ea:	781c      	ldrb	r4, [r3, #0]
    16ec:	2501      	movs	r5, #1
    16ee:	432c      	orrs	r4, r5
    16f0:	701c      	strb	r4, [r3, #0]
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    16f2:	7ccb      	ldrb	r3, [r1, #19]
    16f4:	2b00      	cmp	r3, #0
    16f6:	d100      	bne.n	16fa <_ZN6uart_t4initERK13uart_pincfg_tt+0x76>
    16f8:	e086      	b.n	1808 <_ZN6uart_t4initERK13uart_pincfg_tt+0x184>
    16fa:	2603      	movs	r6, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    16fc:	688c      	ldr	r4, [r1, #8]
    16fe:	68cd      	ldr	r5, [r1, #12]
        if(pin & 1)
    1700:	07eb      	lsls	r3, r5, #31
    1702:	d400      	bmi.n	1706 <_ZN6uart_t4initERK13uart_pincfg_tt+0x82>
    1704:	e082      	b.n	180c <_ZN6uart_t4initERK13uart_pincfg_tt+0x188>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1706:	0feb      	lsrs	r3, r5, #31
    1708:	195b      	adds	r3, r3, r5
    170a:	105b      	asrs	r3, r3, #1
    170c:	469c      	mov	ip, r3
    170e:	270f      	movs	r7, #15
    1710:	403e      	ands	r6, r7
    1712:	01e3      	lsls	r3, r4, #7
    1714:	4a4e      	ldr	r2, [pc, #312]	; (1850 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1716:	4690      	mov	r8, r2
    1718:	4443      	add	r3, r8
    171a:	4463      	add	r3, ip
    171c:	3330      	adds	r3, #48	; 0x30
    171e:	781a      	ldrb	r2, [r3, #0]
    1720:	0136      	lsls	r6, r6, #4
    1722:	4017      	ands	r7, r2
    1724:	4337      	orrs	r7, r6
    1726:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1728:	01e3      	lsls	r3, r4, #7
    172a:	4c49      	ldr	r4, [pc, #292]	; (1850 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    172c:	46a4      	mov	ip, r4
    172e:	4463      	add	r3, ip
    1730:	195b      	adds	r3, r3, r5
    1732:	3340      	adds	r3, #64	; 0x40
    1734:	781c      	ldrb	r4, [r3, #0]
    1736:	2501      	movs	r5, #1
    1738:	432c      	orrs	r4, r5
    173a:	701c      	strb	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.ENABLE = 0;
    173c:	6804      	ldr	r4, [r0, #0]
    173e:	6823      	ldr	r3, [r4, #0]
    1740:	2502      	movs	r5, #2
    1742:	43ab      	bics	r3, r5
    1744:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.SWRST = 1;
    1746:	6804      	ldr	r4, [r0, #0]
    1748:	6823      	ldr	r3, [r4, #0]
    174a:	3d01      	subs	r5, #1
    174c:	432b      	orrs	r3, r5
    174e:	6023      	str	r3, [r4, #0]
    while(m_sercom->USART.CTRLA.bit.SWRST);
    1750:	6803      	ldr	r3, [r0, #0]
    1752:	681c      	ldr	r4, [r3, #0]
    1754:	07e4      	lsls	r4, r4, #31
    1756:	d4fb      	bmi.n	1750 <_ZN6uart_t4initERK13uart_pincfg_tt+0xcc>
    m_sercom->USART.CTRLA.bit.MODE = SERCOM_USART_CTRLA_MODE_USART_INT_CLK_Val;
    1758:	681c      	ldr	r4, [r3, #0]
    175a:	251c      	movs	r5, #28
    175c:	43ac      	bics	r4, r5
    175e:	3d18      	subs	r5, #24
    1760:	432c      	orrs	r4, r5
    1762:	601c      	str	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.DORD = 1;
    1764:	6804      	ldr	r4, [r0, #0]
    1766:	6825      	ldr	r5, [r4, #0]
    1768:	2380      	movs	r3, #128	; 0x80
    176a:	05db      	lsls	r3, r3, #23
    176c:	432b      	orrs	r3, r5
    176e:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.TXPO = pincfg.tx_pad;
    1770:	6806      	ldr	r6, [r0, #0]
    1772:	7c0d      	ldrb	r5, [r1, #16]
    1774:	2303      	movs	r3, #3
    1776:	401d      	ands	r5, r3
    1778:	6834      	ldr	r4, [r6, #0]
    177a:	042d      	lsls	r5, r5, #16
    177c:	4f35      	ldr	r7, [pc, #212]	; (1854 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d0>)
    177e:	403c      	ands	r4, r7
    1780:	432c      	orrs	r4, r5
    1782:	6034      	str	r4, [r6, #0]
    m_sercom->USART.CTRLA.bit.RXPO = pincfg.rx_pad;
    1784:	6804      	ldr	r4, [r0, #0]
    1786:	7c4d      	ldrb	r5, [r1, #17]
    1788:	6821      	ldr	r1, [r4, #0]
    178a:	402b      	ands	r3, r5
    178c:	051b      	lsls	r3, r3, #20
    178e:	4d32      	ldr	r5, [pc, #200]	; (1858 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d4>)
    1790:	4029      	ands	r1, r5
    1792:	430b      	orrs	r3, r1
    1794:	6023      	str	r3, [r4, #0]
    m_sercom->USART.BAUD.reg = speed;
    1796:	6803      	ldr	r3, [r0, #0]
    1798:	464a      	mov	r2, r9
    179a:	819a      	strh	r2, [r3, #12]
    m_sercom->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
    179c:	6803      	ldr	r3, [r0, #0]
    179e:	22c0      	movs	r2, #192	; 0xc0
    17a0:	0292      	lsls	r2, r2, #10
    17a2:	605a      	str	r2, [r3, #4]
    m_sercom->USART.INTENSET.bit.RXC = 1;
    17a4:	6802      	ldr	r2, [r0, #0]
    17a6:	7d93      	ldrb	r3, [r2, #22]
    17a8:	2104      	movs	r1, #4
    17aa:	430b      	orrs	r3, r1
    17ac:	7593      	strb	r3, [r2, #22]
    if(m_sercom == SERCOM0)
    17ae:	6803      	ldr	r3, [r0, #0]
    17b0:	4a2a      	ldr	r2, [pc, #168]	; (185c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d8>)
    17b2:	4293      	cmp	r3, r2
    17b4:	d039      	beq.n	182a <_ZN6uart_t4initERK13uart_pincfg_tt+0x1a6>
    else if(m_sercom == SERCOM1)
    17b6:	4a22      	ldr	r2, [pc, #136]	; (1840 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
    17b8:	4293      	cmp	r3, r2
    17ba:	d03b      	beq.n	1834 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1b0>
    m_sercom->USART.CTRLA.bit.ENABLE = 1;
    17bc:	6802      	ldr	r2, [r0, #0]
    17be:	6813      	ldr	r3, [r2, #0]
    17c0:	2102      	movs	r1, #2
    17c2:	430b      	orrs	r3, r1
    17c4:	6013      	str	r3, [r2, #0]
    m_used = true;
    17c6:	4b26      	ldr	r3, [pc, #152]	; (1860 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1dc>)
    17c8:	2201      	movs	r2, #1
    17ca:	54c2      	strb	r2, [r0, r3]
}
    17cc:	bc0c      	pop	{r2, r3}
    17ce:	4690      	mov	r8, r2
    17d0:	4699      	mov	r9, r3
    17d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
    17d4:	4c1b      	ldr	r4, [pc, #108]	; (1844 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
    17d6:	6a23      	ldr	r3, [r4, #32]
    17d8:	2508      	movs	r5, #8
    17da:	432b      	orrs	r3, r5
    17dc:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) |
    17de:	4b1a      	ldr	r3, [pc, #104]	; (1848 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
    17e0:	4c20      	ldr	r4, [pc, #128]	; (1864 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e0>)
    17e2:	805c      	strh	r4, [r3, #2]
    17e4:	e760      	b.n	16a8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x24>
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    17e6:	2602      	movs	r6, #2
    17e8:	e763      	b.n	16b2 <_ZN6uart_t4initERK13uart_pincfg_tt+0x2e>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    17ea:	0feb      	lsrs	r3, r5, #31
    17ec:	195b      	adds	r3, r3, r5
    17ee:	105f      	asrs	r7, r3, #1
    17f0:	01e3      	lsls	r3, r4, #7
    17f2:	4a17      	ldr	r2, [pc, #92]	; (1850 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    17f4:	4694      	mov	ip, r2
    17f6:	4463      	add	r3, ip
    17f8:	19db      	adds	r3, r3, r7
    17fa:	3330      	adds	r3, #48	; 0x30
    17fc:	781f      	ldrb	r7, [r3, #0]
    17fe:	220f      	movs	r2, #15
    1800:	4397      	bics	r7, r2
    1802:	433e      	orrs	r6, r7
    1804:	701e      	strb	r6, [r3, #0]
    1806:	e76a      	b.n	16de <_ZN6uart_t4initERK13uart_pincfg_tt+0x5a>
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1808:	2602      	movs	r6, #2
    180a:	e777      	b.n	16fc <_ZN6uart_t4initERK13uart_pincfg_tt+0x78>
    180c:	0feb      	lsrs	r3, r5, #31
    180e:	195b      	adds	r3, r3, r5
    1810:	105f      	asrs	r7, r3, #1
    1812:	01e3      	lsls	r3, r4, #7
    1814:	4a0e      	ldr	r2, [pc, #56]	; (1850 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1816:	4694      	mov	ip, r2
    1818:	4463      	add	r3, ip
    181a:	19db      	adds	r3, r3, r7
    181c:	3330      	adds	r3, #48	; 0x30
    181e:	781f      	ldrb	r7, [r3, #0]
    1820:	220f      	movs	r2, #15
    1822:	4397      	bics	r7, r2
    1824:	433e      	orrs	r6, r7
    1826:	701e      	strb	r6, [r3, #0]
    1828:	e77e      	b.n	1728 <_ZN6uart_t4initERK13uart_pincfg_tt+0xa4>
    182a:	4b0f      	ldr	r3, [pc, #60]	; (1868 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
    182c:	2280      	movs	r2, #128	; 0x80
    182e:	0092      	lsls	r2, r2, #2
    1830:	601a      	str	r2, [r3, #0]
}
    1832:	e7c3      	b.n	17bc <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1834:	4b0c      	ldr	r3, [pc, #48]	; (1868 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
    1836:	2280      	movs	r2, #128	; 0x80
    1838:	00d2      	lsls	r2, r2, #3
    183a:	601a      	str	r2, [r3, #0]
}
    183c:	e7be      	b.n	17bc <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	42000c00 	.word	0x42000c00
    1844:	40000400 	.word	0x40000400
    1848:	40000c00 	.word	0x40000c00
    184c:	0000400e 	.word	0x0000400e
    1850:	41004400 	.word	0x41004400
    1854:	fffcffff 	.word	0xfffcffff
    1858:	ffcfffff 	.word	0xffcfffff
    185c:	42000800 	.word	0x42000800
    1860:	00000209 	.word	0x00000209
    1864:	0000400f 	.word	0x0000400f
    1868:	e000e100 	.word	0xe000e100

0000186c <_ZN6uart_t14sercom_handlerEv>:
    if(!m_used) return;
    186c:	4b11      	ldr	r3, [pc, #68]	; (18b4 <_ZN6uart_t14sercom_handlerEv+0x48>)
    186e:	5cc3      	ldrb	r3, [r0, r3]
    1870:	2b00      	cmp	r3, #0
    1872:	d01b      	beq.n	18ac <_ZN6uart_t14sercom_handlerEv+0x40>
    if(!m_rxfull) {
    1874:	2382      	movs	r3, #130	; 0x82
    1876:	009b      	lsls	r3, r3, #2
    1878:	5cc3      	ldrb	r3, [r0, r3]
    187a:	2b00      	cmp	r3, #0
    187c:	d117      	bne.n	18ae <_ZN6uart_t14sercom_handlerEv+0x42>
		m_rxbuf[m_rxhead] = m_sercom->USART.DATA.reg;
    187e:	6803      	ldr	r3, [r0, #0]
    1880:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    1882:	2281      	movs	r2, #129	; 0x81
    1884:	0092      	lsls	r2, r2, #2
    1886:	5a83      	ldrh	r3, [r0, r2]
    1888:	b2c9      	uxtb	r1, r1
    188a:	18c3      	adds	r3, r0, r3
    188c:	7119      	strb	r1, [r3, #4]
		m_rxhead = (m_rxhead+1) % sizeof(m_rxbuf);
    188e:	5a83      	ldrh	r3, [r0, r2]
    1890:	3301      	adds	r3, #1
    1892:	05db      	lsls	r3, r3, #23
    1894:	0ddb      	lsrs	r3, r3, #23
    1896:	5283      	strh	r3, [r0, r2]
		m_rxfull = m_rxtail == m_rxhead;
    1898:	4b07      	ldr	r3, [pc, #28]	; (18b8 <_ZN6uart_t14sercom_handlerEv+0x4c>)
    189a:	5ac3      	ldrh	r3, [r0, r3]
    189c:	5a82      	ldrh	r2, [r0, r2]
    189e:	1a9b      	subs	r3, r3, r2
    18a0:	425a      	negs	r2, r3
    18a2:	4153      	adcs	r3, r2
    18a4:	b2db      	uxtb	r3, r3
    18a6:	2282      	movs	r2, #130	; 0x82
    18a8:	0092      	lsls	r2, r2, #2
    18aa:	5483      	strb	r3, [r0, r2]
}
    18ac:	4770      	bx	lr
		(void)m_sercom->USART.DATA.reg; // Clear RX flag
    18ae:	6803      	ldr	r3, [r0, #0]
    18b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    18b2:	e7fb      	b.n	18ac <_ZN6uart_t14sercom_handlerEv+0x40>
    18b4:	00000209 	.word	0x00000209
    18b8:	00000206 	.word	0x00000206

000018bc <_ZN6uart_t5writeEc>:
    if(!m_used) return;
    18bc:	4b05      	ldr	r3, [pc, #20]	; (18d4 <_ZN6uart_t5writeEc+0x18>)
    18be:	5cc3      	ldrb	r3, [r0, r3]
    18c0:	2b00      	cmp	r3, #0
    18c2:	d006      	beq.n	18d2 <_ZN6uart_t5writeEc+0x16>
    m_sercom->USART.DATA.reg = c;
    18c4:	b289      	uxth	r1, r1
    18c6:	6803      	ldr	r3, [r0, #0]
    18c8:	8519      	strh	r1, [r3, #40]	; 0x28
	while(!m_sercom->USART.INTFLAG.bit.DRE);
    18ca:	6803      	ldr	r3, [r0, #0]
    18cc:	7e1b      	ldrb	r3, [r3, #24]
    18ce:	07db      	lsls	r3, r3, #31
    18d0:	d5fb      	bpl.n	18ca <_ZN6uart_t5writeEc+0xe>
}
    18d2:	4770      	bx	lr
    18d4:	00000209 	.word	0x00000209

000018d8 <_ZN6uart_t5printEPKci>:
void uart_t::print(const char* str, int len) {
    18d8:	b570      	push	{r4, r5, r6, lr}
    18da:	0006      	movs	r6, r0
    18dc:	0014      	movs	r4, r2
    if(!m_used) return;
    18de:	4b09      	ldr	r3, [pc, #36]	; (1904 <_ZN6uart_t5printEPKci+0x2c>)
    18e0:	5cc3      	ldrb	r3, [r0, r3]
    18e2:	2b00      	cmp	r3, #0
    18e4:	d10a      	bne.n	18fc <_ZN6uart_t5printEPKci+0x24>
}
    18e6:	bd70      	pop	{r4, r5, r6, pc}
    while((len == -1) ? *str : len--) write(*str++);
    18e8:	0023      	movs	r3, r4
    18ea:	3c01      	subs	r4, #1
    18ec:	2b00      	cmp	r3, #0
    18ee:	d0fa      	beq.n	18e6 <_ZN6uart_t5printEPKci+0xe>
    18f0:	1c4d      	adds	r5, r1, #1
    18f2:	7809      	ldrb	r1, [r1, #0]
    18f4:	0030      	movs	r0, r6
    18f6:	f7ff ffe1 	bl	18bc <_ZN6uart_t5writeEc>
    18fa:	0029      	movs	r1, r5
    18fc:	1c63      	adds	r3, r4, #1
    18fe:	d1f3      	bne.n	18e8 <_ZN6uart_t5printEPKci+0x10>
    1900:	780b      	ldrb	r3, [r1, #0]
    1902:	e7f3      	b.n	18ec <_ZN6uart_t5printEPKci+0x14>
    1904:	00000209 	.word	0x00000209

00001908 <_ZN6uart_t7rxemptyEv>:
	return (!m_rxfull && (m_rxhead == m_rxtail));
    1908:	2382      	movs	r3, #130	; 0x82
    190a:	009b      	lsls	r3, r3, #2
    190c:	5cc3      	ldrb	r3, [r0, r3]
    190e:	2b00      	cmp	r3, #0
    1910:	d10a      	bne.n	1928 <_ZN6uart_t7rxemptyEv+0x20>
    1912:	2381      	movs	r3, #129	; 0x81
    1914:	009b      	lsls	r3, r3, #2
    1916:	5ac2      	ldrh	r2, [r0, r3]
    1918:	b292      	uxth	r2, r2
    191a:	4b05      	ldr	r3, [pc, #20]	; (1930 <_ZN6uart_t7rxemptyEv+0x28>)
    191c:	5ac3      	ldrh	r3, [r0, r3]
    191e:	b29b      	uxth	r3, r3
    1920:	429a      	cmp	r2, r3
    1922:	d003      	beq.n	192c <_ZN6uart_t7rxemptyEv+0x24>
    1924:	2000      	movs	r0, #0
    1926:	e000      	b.n	192a <_ZN6uart_t7rxemptyEv+0x22>
    1928:	2000      	movs	r0, #0
}
    192a:	4770      	bx	lr
	return (!m_rxfull && (m_rxhead == m_rxtail));
    192c:	2001      	movs	r0, #1
    192e:	e7fc      	b.n	192a <_ZN6uart_t7rxemptyEv+0x22>
    1930:	00000206 	.word	0x00000206

00001934 <_ZN6uart_t4getcEv>:
char uart_t::getc() {
    1934:	b510      	push	{r4, lr}
    1936:	0004      	movs	r4, r0
    if(!m_used) return '\0';
    1938:	4b0c      	ldr	r3, [pc, #48]	; (196c <_ZN6uart_t4getcEv+0x38>)
    193a:	5cc3      	ldrb	r3, [r0, r3]
    193c:	2b00      	cmp	r3, #0
    193e:	d013      	beq.n	1968 <_ZN6uart_t4getcEv+0x34>
	while(rxempty());
    1940:	0020      	movs	r0, r4
    1942:	f7ff ffe1 	bl	1908 <_ZN6uart_t7rxemptyEv>
    1946:	2800      	cmp	r0, #0
    1948:	d1fa      	bne.n	1940 <_ZN6uart_t4getcEv+0xc>
	uint8_t c = m_rxbuf[m_rxtail];
    194a:	4a09      	ldr	r2, [pc, #36]	; (1970 <_ZN6uart_t4getcEv+0x3c>)
    194c:	5aa3      	ldrh	r3, [r4, r2]
    194e:	18e3      	adds	r3, r4, r3
    1950:	7918      	ldrb	r0, [r3, #4]
    1952:	b2c0      	uxtb	r0, r0
	m_rxfull = false;
    1954:	2382      	movs	r3, #130	; 0x82
    1956:	009b      	lsls	r3, r3, #2
    1958:	2100      	movs	r1, #0
    195a:	54e1      	strb	r1, [r4, r3]
	m_rxtail = (m_rxtail+1) % sizeof(m_rxbuf);
    195c:	5aa3      	ldrh	r3, [r4, r2]
    195e:	3301      	adds	r3, #1
    1960:	05db      	lsls	r3, r3, #23
    1962:	0ddb      	lsrs	r3, r3, #23
    1964:	52a3      	strh	r3, [r4, r2]
}
    1966:	bd10      	pop	{r4, pc}
    if(!m_used) return '\0';
    1968:	2000      	movs	r0, #0
    196a:	e7fc      	b.n	1966 <_ZN6uart_t4getcEv+0x32>
    196c:	00000209 	.word	0x00000209
    1970:	00000206 	.word	0x00000206

00001974 <_ZN6uart_t4peekEi>:
char uart_t::peek(int pos) {
    1974:	b570      	push	{r4, r5, r6, lr}
    1976:	0004      	movs	r4, r0
    1978:	000d      	movs	r5, r1
    if(!m_used) return '\0';
    197a:	4b1f      	ldr	r3, [pc, #124]	; (19f8 <_ZN6uart_t4peekEi+0x84>)
    197c:	5cc3      	ldrb	r3, [r0, r3]
    197e:	2b00      	cmp	r3, #0
    1980:	d101      	bne.n	1986 <_ZN6uart_t4peekEi+0x12>
    1982:	2000      	movs	r0, #0
}
    1984:	bd70      	pop	{r4, r5, r6, pc}
    if(rxempty() || pos >= available()) return '\0';
    1986:	f7ff ffbf 	bl	1908 <_ZN6uart_t7rxemptyEv>
    198a:	2800      	cmp	r0, #0
    198c:	d12f      	bne.n	19ee <_ZN6uart_t4peekEi+0x7a>
        m_rxhead = 0;
        m_rxtail = 0;
        m_rxfull = false;
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
    198e:	2381      	movs	r3, #129	; 0x81
    1990:	009b      	lsls	r3, r3, #2
    1992:	5ae2      	ldrh	r2, [r4, r3]
    1994:	b292      	uxth	r2, r2
    1996:	4b19      	ldr	r3, [pc, #100]	; (19fc <_ZN6uart_t4peekEi+0x88>)
    1998:	5ae3      	ldrh	r3, [r4, r3]
    199a:	b29b      	uxth	r3, r3
    199c:	429a      	cmp	r2, r3
    199e:	d313      	bcc.n	19c8 <_ZN6uart_t4peekEi+0x54>
            return m_rxhead - m_rxtail;
    19a0:	2381      	movs	r3, #129	; 0x81
    19a2:	009b      	lsls	r3, r3, #2
    19a4:	5ae3      	ldrh	r3, [r4, r3]
    19a6:	4a15      	ldr	r2, [pc, #84]	; (19fc <_ZN6uart_t4peekEi+0x88>)
    19a8:	5aa2      	ldrh	r2, [r4, r2]
    19aa:	1a9b      	subs	r3, r3, r2
    19ac:	b29b      	uxth	r3, r3
    19ae:	42ab      	cmp	r3, r5
    19b0:	dd1f      	ble.n	19f2 <_ZN6uart_t4peekEi+0x7e>
    if(pos == -1)
    19b2:	1c6b      	adds	r3, r5, #1
    19b4:	d015      	beq.n	19e2 <_ZN6uart_t4peekEi+0x6e>
        return m_rxbuf[(m_rxtail + pos) % sizeof(m_rxbuf)];
    19b6:	4b11      	ldr	r3, [pc, #68]	; (19fc <_ZN6uart_t4peekEi+0x88>)
    19b8:	5ae0      	ldrh	r0, [r4, r3]
    19ba:	1940      	adds	r0, r0, r5
    19bc:	05c0      	lsls	r0, r0, #23
    19be:	0dc0      	lsrs	r0, r0, #23
    19c0:	1824      	adds	r4, r4, r0
    19c2:	7920      	ldrb	r0, [r4, #4]
    19c4:	b2c0      	uxtb	r0, r0
    19c6:	e7dd      	b.n	1984 <_ZN6uart_t4peekEi+0x10>
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    19c8:	2381      	movs	r3, #129	; 0x81
    19ca:	009b      	lsls	r3, r3, #2
    19cc:	5ae3      	ldrh	r3, [r4, r3]
    19ce:	4a0b      	ldr	r2, [pc, #44]	; (19fc <_ZN6uart_t4peekEi+0x88>)
    19d0:	5aa2      	ldrh	r2, [r4, r2]
    19d2:	1a9b      	subs	r3, r3, r2
    19d4:	b29b      	uxth	r3, r3
    19d6:	2280      	movs	r2, #128	; 0x80
    19d8:	0092      	lsls	r2, r2, #2
    19da:	4694      	mov	ip, r2
    19dc:	4463      	add	r3, ip
    19de:	b29b      	uxth	r3, r3
    19e0:	e7e5      	b.n	19ae <_ZN6uart_t4peekEi+0x3a>
        return m_rxbuf[m_rxtail];
    19e2:	4b06      	ldr	r3, [pc, #24]	; (19fc <_ZN6uart_t4peekEi+0x88>)
    19e4:	5ae0      	ldrh	r0, [r4, r3]
    19e6:	1824      	adds	r4, r4, r0
    19e8:	7920      	ldrb	r0, [r4, #4]
    19ea:	b2c0      	uxtb	r0, r0
    19ec:	e7ca      	b.n	1984 <_ZN6uart_t4peekEi+0x10>
    if(rxempty() || pos >= available()) return '\0';
    19ee:	2000      	movs	r0, #0
    19f0:	e7c8      	b.n	1984 <_ZN6uart_t4peekEi+0x10>
    19f2:	2000      	movs	r0, #0
    19f4:	e7c6      	b.n	1984 <_ZN6uart_t4peekEi+0x10>
    19f6:	46c0      	nop			; (mov r8, r8)
    19f8:	00000209 	.word	0x00000209
    19fc:	00000206 	.word	0x00000206

00001a00 <_ZN6uart_t4findEPKc>:
int uart_t::find(const char* str) {
    1a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a02:	46c6      	mov	lr, r8
    1a04:	b500      	push	{lr}
    1a06:	0007      	movs	r7, r0
    1a08:	000d      	movs	r5, r1
    if(!m_used) return -1;
    1a0a:	4b21      	ldr	r3, [pc, #132]	; (1a90 <_ZN6uart_t4findEPKc+0x90>)
    1a0c:	5cc3      	ldrb	r3, [r0, r3]
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d035      	beq.n	1a7e <_ZN6uart_t4findEPKc+0x7e>
    for(int i = 0; i < available(); i++) {
    1a12:	2300      	movs	r3, #0
    1a14:	4698      	mov	r8, r3
        if(m_rxhead >= m_rxtail)
    1a16:	2381      	movs	r3, #129	; 0x81
    1a18:	009b      	lsls	r3, r3, #2
    1a1a:	5afa      	ldrh	r2, [r7, r3]
    1a1c:	b292      	uxth	r2, r2
    1a1e:	4b1d      	ldr	r3, [pc, #116]	; (1a94 <_ZN6uart_t4findEPKc+0x94>)
    1a20:	5afb      	ldrh	r3, [r7, r3]
    1a22:	b29b      	uxth	r3, r3
    1a24:	429a      	cmp	r2, r3
    1a26:	d319      	bcc.n	1a5c <_ZN6uart_t4findEPKc+0x5c>
            return m_rxhead - m_rxtail;
    1a28:	2381      	movs	r3, #129	; 0x81
    1a2a:	009b      	lsls	r3, r3, #2
    1a2c:	5afb      	ldrh	r3, [r7, r3]
    1a2e:	4a19      	ldr	r2, [pc, #100]	; (1a94 <_ZN6uart_t4findEPKc+0x94>)
    1a30:	5aba      	ldrh	r2, [r7, r2]
    1a32:	1a9b      	subs	r3, r3, r2
    1a34:	b29b      	uxth	r3, r3
    1a36:	4543      	cmp	r3, r8
    1a38:	dd25      	ble.n	1a86 <_ZN6uart_t4findEPKc+0x86>
        int search_idx = 0;
    1a3a:	2400      	movs	r4, #0
        while(str[search_idx] == peek(i + search_idx))
    1a3c:	5d2e      	ldrb	r6, [r5, r4]
    1a3e:	4643      	mov	r3, r8
    1a40:	1919      	adds	r1, r3, r4
    1a42:	0038      	movs	r0, r7
    1a44:	f7ff ff96 	bl	1974 <_ZN6uart_t4peekEi>
    1a48:	4286      	cmp	r6, r0
    1a4a:	d114      	bne.n	1a76 <_ZN6uart_t4findEPKc+0x76>
            if(!str[++search_idx]) return i;
    1a4c:	3401      	adds	r4, #1
    1a4e:	5d2b      	ldrb	r3, [r5, r4]
    1a50:	2b00      	cmp	r3, #0
    1a52:	d1f3      	bne.n	1a3c <_ZN6uart_t4findEPKc+0x3c>
}
    1a54:	4640      	mov	r0, r8
    1a56:	bc04      	pop	{r2}
    1a58:	4690      	mov	r8, r2
    1a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1a5c:	2381      	movs	r3, #129	; 0x81
    1a5e:	009b      	lsls	r3, r3, #2
    1a60:	5afb      	ldrh	r3, [r7, r3]
    1a62:	4a0c      	ldr	r2, [pc, #48]	; (1a94 <_ZN6uart_t4findEPKc+0x94>)
    1a64:	5aba      	ldrh	r2, [r7, r2]
    1a66:	1a9b      	subs	r3, r3, r2
    1a68:	b29b      	uxth	r3, r3
    1a6a:	2280      	movs	r2, #128	; 0x80
    1a6c:	0092      	lsls	r2, r2, #2
    1a6e:	4694      	mov	ip, r2
    1a70:	4463      	add	r3, ip
    1a72:	b29b      	uxth	r3, r3
    1a74:	e7df      	b.n	1a36 <_ZN6uart_t4findEPKc+0x36>
    for(int i = 0; i < available(); i++) {
    1a76:	2301      	movs	r3, #1
    1a78:	469c      	mov	ip, r3
    1a7a:	44e0      	add	r8, ip
    1a7c:	e7cb      	b.n	1a16 <_ZN6uart_t4findEPKc+0x16>
    if(!m_used) return -1;
    1a7e:	2301      	movs	r3, #1
    1a80:	425b      	negs	r3, r3
    1a82:	4698      	mov	r8, r3
    1a84:	e7e6      	b.n	1a54 <_ZN6uart_t4findEPKc+0x54>
    return -1;
    1a86:	2301      	movs	r3, #1
    1a88:	425b      	negs	r3, r3
    1a8a:	4698      	mov	r8, r3
    1a8c:	e7e2      	b.n	1a54 <_ZN6uart_t4findEPKc+0x54>
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	00000209 	.word	0x00000209
    1a94:	00000206 	.word	0x00000206

00001a98 <_ZN6uart_t4readEv>:
char* uart_t::read() {
    1a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a9a:	46c6      	mov	lr, r8
    1a9c:	b500      	push	{lr}
    1a9e:	0005      	movs	r5, r0
    if(!m_used) return NULL;
    1aa0:	4b1f      	ldr	r3, [pc, #124]	; (1b20 <_ZN6uart_t4readEv+0x88>)
    1aa2:	5cc3      	ldrb	r3, [r0, r3]
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	d036      	beq.n	1b16 <_ZN6uart_t4readEv+0x7e>
        if(m_rxhead >= m_rxtail)
    1aa8:	2381      	movs	r3, #129	; 0x81
    1aaa:	009b      	lsls	r3, r3, #2
    1aac:	5ac2      	ldrh	r2, [r0, r3]
    1aae:	b292      	uxth	r2, r2
    1ab0:	4b1c      	ldr	r3, [pc, #112]	; (1b24 <_ZN6uart_t4readEv+0x8c>)
    1ab2:	5ac3      	ldrh	r3, [r0, r3]
    1ab4:	b29b      	uxth	r3, r3
    1ab6:	429a      	cmp	r2, r3
    1ab8:	d310      	bcc.n	1adc <_ZN6uart_t4readEv+0x44>
            return m_rxhead - m_rxtail;
    1aba:	2381      	movs	r3, #129	; 0x81
    1abc:	009b      	lsls	r3, r3, #2
    1abe:	5ac0      	ldrh	r0, [r0, r3]
    1ac0:	4b18      	ldr	r3, [pc, #96]	; (1b24 <_ZN6uart_t4readEv+0x8c>)
    1ac2:	5aeb      	ldrh	r3, [r5, r3]
    1ac4:	1ac0      	subs	r0, r0, r3
    1ac6:	b280      	uxth	r0, r0
    size_t avail = available();
    1ac8:	4680      	mov	r8, r0
    if(!avail) return NULL;
    1aca:	2800      	cmp	r0, #0
    1acc:	d025      	beq.n	1b1a <_ZN6uart_t4readEv+0x82>
    char* data = (char*)malloc(avail + 1);
    1ace:	3001      	adds	r0, #1
    1ad0:	f000 fa70 	bl	1fb4 <malloc>
    1ad4:	1e07      	subs	r7, r0, #0
    if(!data) return NULL;
    1ad6:	d01a      	beq.n	1b0e <_ZN6uart_t4readEv+0x76>
    for(size_t i = 0; i < avail; i++)
    1ad8:	2400      	movs	r4, #0
    1ada:	e012      	b.n	1b02 <_ZN6uart_t4readEv+0x6a>
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1adc:	2381      	movs	r3, #129	; 0x81
    1ade:	009b      	lsls	r3, r3, #2
    1ae0:	5ac0      	ldrh	r0, [r0, r3]
    1ae2:	4b10      	ldr	r3, [pc, #64]	; (1b24 <_ZN6uart_t4readEv+0x8c>)
    1ae4:	5aeb      	ldrh	r3, [r5, r3]
    1ae6:	1ac0      	subs	r0, r0, r3
    1ae8:	b280      	uxth	r0, r0
    1aea:	2380      	movs	r3, #128	; 0x80
    1aec:	009b      	lsls	r3, r3, #2
    1aee:	469c      	mov	ip, r3
    1af0:	4460      	add	r0, ip
    1af2:	b280      	uxth	r0, r0
    1af4:	e7e8      	b.n	1ac8 <_ZN6uart_t4readEv+0x30>
        data[i] = getc();
    1af6:	193e      	adds	r6, r7, r4
    1af8:	0028      	movs	r0, r5
    1afa:	f7ff ff1b 	bl	1934 <_ZN6uart_t4getcEv>
    1afe:	7030      	strb	r0, [r6, #0]
    for(size_t i = 0; i < avail; i++)
    1b00:	3401      	adds	r4, #1
    1b02:	4544      	cmp	r4, r8
    1b04:	d3f7      	bcc.n	1af6 <_ZN6uart_t4readEv+0x5e>
    data[avail] = '\0';
    1b06:	4643      	mov	r3, r8
    1b08:	18fb      	adds	r3, r7, r3
    1b0a:	2200      	movs	r2, #0
    1b0c:	701a      	strb	r2, [r3, #0]
}
    1b0e:	0038      	movs	r0, r7
    1b10:	bc04      	pop	{r2}
    1b12:	4690      	mov	r8, r2
    1b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!m_used) return NULL;
    1b16:	2700      	movs	r7, #0
    1b18:	e7f9      	b.n	1b0e <_ZN6uart_t4readEv+0x76>
    if(!avail) return NULL;
    1b1a:	2700      	movs	r7, #0
    1b1c:	e7f7      	b.n	1b0e <_ZN6uart_t4readEv+0x76>
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	00000209 	.word	0x00000209
    1b24:	00000206 	.word	0x00000206

00001b28 <SERCOM0_Handler>:
void SERCOM0_Handler() {
    1b28:	b510      	push	{r4, lr}
    g_uart0.sercom_handler();
    1b2a:	4802      	ldr	r0, [pc, #8]	; (1b34 <SERCOM0_Handler+0xc>)
    1b2c:	f7ff fe9e 	bl	186c <_ZN6uart_t14sercom_handlerEv>
}
    1b30:	bd10      	pop	{r4, pc}
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	200000e8 	.word	0x200000e8

00001b38 <SERCOM1_Handler>:
void SERCOM1_Handler() {
    1b38:	b510      	push	{r4, lr}
    g_uart1.sercom_handler();
    1b3a:	4802      	ldr	r0, [pc, #8]	; (1b44 <SERCOM1_Handler+0xc>)
    1b3c:	f7ff fe96 	bl	186c <_ZN6uart_t14sercom_handlerEv>
    1b40:	bd10      	pop	{r4, pc}
    1b42:	46c0      	nop			; (mov r8, r8)
    1b44:	200002f4 	.word	0x200002f4

00001b48 <_GLOBAL__sub_I_g_uart0>:
    1b48:	b510      	push	{r4, lr}
    1b4a:	4902      	ldr	r1, [pc, #8]	; (1b54 <_GLOBAL__sub_I_g_uart0+0xc>)
    1b4c:	2001      	movs	r0, #1
    1b4e:	f7ff fd6d 	bl	162c <_Z41__static_initialization_and_destruction_0ii>
    1b52:	bd10      	pop	{r4, pc}
    1b54:	0000ffff 	.word	0x0000ffff

00001b58 <_ZN9SensornetC1ERK4RF24>:

extern "C" {
#include <systick.h>
}

Sensornet::Sensornet(const RF24& radio) :
    1b58:	b530      	push	{r4, r5, lr}
    m_radio(radio)
    1b5a:	0003      	movs	r3, r0
    1b5c:	c934      	ldmia	r1!, {r2, r4, r5}
    1b5e:	c334      	stmia	r3!, {r2, r4, r5}
    1b60:	c934      	ldmia	r1!, {r2, r4, r5}
    1b62:	c334      	stmia	r3!, {r2, r4, r5}
    1b64:	c934      	ldmia	r1!, {r2, r4, r5}
    1b66:	c334      	stmia	r3!, {r2, r4, r5}
    1b68:	680a      	ldr	r2, [r1, #0]
    1b6a:	601a      	str	r2, [r3, #0]
    Vector() : m_size(0), m_data(NULL) {}
    1b6c:	2300      	movs	r3, #0
    1b6e:	6283      	str	r3, [r0, #40]	; 0x28
    1b70:	62c3      	str	r3, [r0, #44]	; 0x2c
        },
        millis()
    };

    m_nodes.push_back(node2);*/
}
    1b72:	bd30      	pop	{r4, r5, pc}

00001b74 <_ZN9Sensornet5beginEv>:

bool Sensornet::begin() {
    1b74:	b570      	push	{r4, r5, r6, lr}
    1b76:	0004      	movs	r4, r0
    if(!m_radio.begin())
    1b78:	f7ff f892 	bl	ca0 <_ZN4RF245beginEv>
    1b7c:	1e05      	subs	r5, r0, #0
    1b7e:	d101      	bne.n	1b84 <_ZN9Sensornet5beginEv+0x10>
    m_radio.openReadingPipe(1, (uint64_t)55);

    m_radio.startListening();

    return true;
}
    1b80:	0028      	movs	r0, r5
    1b82:	bd70      	pop	{r4, r5, r6, pc}
    m_radio.setChannel(120);
    1b84:	2178      	movs	r1, #120	; 0x78
    1b86:	0020      	movs	r0, r4
    1b88:	f7fe fea9 	bl	8de <_ZN4RF2410setChannelEh>
    m_radio.setAutoAck(true);
    1b8c:	2101      	movs	r1, #1
    1b8e:	0020      	movs	r0, r4
    1b90:	f7ff f82e 	bl	bf0 <_ZN4RF2410setAutoAckEb>
    m_radio.enableAckPayload();
    1b94:	0020      	movs	r0, r4
    1b96:	f7ff f811 	bl	bbc <_ZN4RF2416enableAckPayloadEv>
    m_radio.setRetries(5, 15);
    1b9a:	220f      	movs	r2, #15
    1b9c:	2105      	movs	r1, #5
    1b9e:	0020      	movs	r0, r4
    1ba0:	f7ff f874 	bl	c8c <_ZN4RF2410setRetriesEhh>
    m_radio.setPayloadSize(32);
    1ba4:	2120      	movs	r1, #32
    1ba6:	0020      	movs	r0, r4
    1ba8:	f7fe fea2 	bl	8f0 <_ZN4RF2414setPayloadSizeEh>
    m_radio.setPALevel(RF24_PA_MAX);
    1bac:	2103      	movs	r1, #3
    1bae:	0020      	movs	r0, r4
    1bb0:	f7ff f82b 	bl	c0a <_ZN4RF2410setPALevelEh>
    m_radio.setDataRate(RF24_1MBPS);
    1bb4:	2100      	movs	r1, #0
    1bb6:	0020      	movs	r0, r4
    1bb8:	f7ff f83e 	bl	c38 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    m_radio.openWritingPipe((uint64_t)56);
    1bbc:	2238      	movs	r2, #56	; 0x38
    1bbe:	2300      	movs	r3, #0
    1bc0:	0020      	movs	r0, r4
    1bc2:	f7fe ff4d 	bl	a60 <_ZN4RF2415openWritingPipeEy>
    m_radio.openReadingPipe(1, (uint64_t)55);
    1bc6:	2237      	movs	r2, #55	; 0x37
    1bc8:	2300      	movs	r3, #0
    1bca:	2101      	movs	r1, #1
    1bcc:	0020      	movs	r0, r4
    1bce:	f7fe ff5f 	bl	a90 <_ZN4RF2415openReadingPipeEhy>
    m_radio.startListening();
    1bd2:	0020      	movs	r0, r4
    1bd4:	f7fe ffae 	bl	b34 <_ZN4RF2414startListeningEv>
    return true;
    1bd8:	e7d2      	b.n	1b80 <_ZN9Sensornet5beginEv+0xc>

00001bda <_ZN9Sensornet10UpdateNodeERK12SensorPacket>:
    } else {
        UpdateNode(pkt);
    }
}

void Sensornet::UpdateNode(const SensorPacket& pkt) {
    1bda:	b570      	push	{r4, r5, r6, lr}
    1bdc:	b08a      	sub	sp, #40	; 0x28
    1bde:	0006      	movs	r6, r0
        return m_data;
    1be0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
        return m_data + m_size;
    1be2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1be4:	00dd      	lsls	r5, r3, #3
    1be6:	18ed      	adds	r5, r5, r3
    1be8:	00ad      	lsls	r5, r5, #2
    1bea:	1965      	adds	r5, r4, r5
    for(auto& node : m_nodes) {
    1bec:	42ac      	cmp	r4, r5
    1bee:	d00f      	beq.n	1c10 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x36>
        if(node.data.id == pkt.id) {
    1bf0:	2200      	movs	r2, #0
    1bf2:	56a2      	ldrsb	r2, [r4, r2]
    1bf4:	2300      	movs	r3, #0
    1bf6:	56cb      	ldrsb	r3, [r1, r3]
    1bf8:	429a      	cmp	r2, r3
    1bfa:	d001      	beq.n	1c00 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x26>
    for(auto& node : m_nodes) {
    1bfc:	3424      	adds	r4, #36	; 0x24
    1bfe:	e7f5      	b.n	1bec <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x12>
            memcpy(&node.data, &pkt, sizeof(SensorPacket));
    1c00:	2220      	movs	r2, #32
    1c02:	0020      	movs	r0, r4
    1c04:	f000 f9ea 	bl	1fdc <memcpy>
            node.last_seen = millis();
    1c08:	f7ff fcf6 	bl	15f8 <millis>
    1c0c:	6220      	str	r0, [r4, #32]
            return;
    1c0e:	e021      	b.n	1c54 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x7a>
        }
    }

    m_nodes.push_back({ pkt, millis() });
    1c10:	0034      	movs	r4, r6
    1c12:	3428      	adds	r4, #40	; 0x28
    1c14:	2220      	movs	r2, #32
    1c16:	a801      	add	r0, sp, #4
    1c18:	f000 f9e0 	bl	1fdc <memcpy>
    1c1c:	f7ff fcec 	bl	15f8 <millis>
    1c20:	9009      	str	r0, [sp, #36]	; 0x24
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1c22:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1c24:	2900      	cmp	r1, #0
    1c26:	d017      	beq.n	1c58 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x7e>
    1c28:	3101      	adds	r1, #1
    1c2a:	00cb      	lsls	r3, r1, #3
    1c2c:	1859      	adds	r1, r3, r1
    1c2e:	0089      	lsls	r1, r1, #2
    1c30:	6860      	ldr	r0, [r4, #4]
    1c32:	f000 fa85 	bl	2140 <realloc>
        if(!new_data) return;
    1c36:	2800      	cmp	r0, #0
    1c38:	d00c      	beq.n	1c54 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x7a>
        m_data = new_data;
    1c3a:	6060      	str	r0, [r4, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
    1c3c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    1c3e:	00d3      	lsls	r3, r2, #3
    1c40:	189b      	adds	r3, r3, r2
    1c42:	009b      	lsls	r3, r3, #2
    1c44:	18c0      	adds	r0, r0, r3
    1c46:	2224      	movs	r2, #36	; 0x24
    1c48:	a901      	add	r1, sp, #4
    1c4a:	f000 f9c7 	bl	1fdc <memcpy>
        m_size++;
    1c4e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1c50:	3301      	adds	r3, #1
    1c52:	62b3      	str	r3, [r6, #40]	; 0x28
    1c54:	b00a      	add	sp, #40	; 0x28
    1c56:	bd70      	pop	{r4, r5, r6, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1c58:	2024      	movs	r0, #36	; 0x24
    1c5a:	f000 f9ab 	bl	1fb4 <malloc>
    1c5e:	e7ea      	b.n	1c36 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x5c>

00001c60 <_ZN9Sensornet13ProcessPacketER12SensorPacket>:
void Sensornet::ProcessPacket(SensorPacket& pkt) {
    1c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c62:	0007      	movs	r7, r0
    1c64:	000d      	movs	r5, r1
    if(pkt.id == 0) {
    1c66:	2300      	movs	r3, #0
    1c68:	56cb      	ldrsb	r3, [r1, r3]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d133      	bne.n	1cd6 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x76>
        pkt.id = 1;
    1c6e:	3301      	adds	r3, #1
    1c70:	700b      	strb	r3, [r1, #0]
        return m_data;
    1c72:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
        return m_data + m_size;
    1c74:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1c76:	00de      	lsls	r6, r3, #3
    1c78:	18f6      	adds	r6, r6, r3
    1c7a:	00b6      	lsls	r6, r6, #2
    1c7c:	19a6      	adds	r6, r4, r6
    1c7e:	e017      	b.n	1cb0 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x50>
                pkt.id = node.data.id;
    1c80:	2300      	movs	r3, #0
    1c82:	56e3      	ldrsb	r3, [r4, r3]
    1c84:	702b      	strb	r3, [r5, #0]
        UpdateNode(pkt);
    1c86:	0029      	movs	r1, r5
    1c88:	0038      	movs	r0, r7
    1c8a:	f7ff ffa6 	bl	1bda <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
        m_radio.stopListening();
    1c8e:	0038      	movs	r0, r7
    1c90:	f7fe fe34 	bl	8fc <_ZN4RF2413stopListeningEv>
        pkt.type = Sensors::TYPE_COMMAND;
    1c94:	23ff      	movs	r3, #255	; 0xff
    1c96:	726b      	strb	r3, [r5, #9]
        pkt.data[0] = Sensors::COMMAND_SET_ID;
    1c98:	3bfe      	subs	r3, #254	; 0xfe
    1c9a:	72ab      	strb	r3, [r5, #10]
        m_radio.write(&pkt, 32);
    1c9c:	2220      	movs	r2, #32
    1c9e:	0029      	movs	r1, r5
    1ca0:	0038      	movs	r0, r7
    1ca2:	f7fe feb4 	bl	a0e <_ZN4RF245writeEPKvh>
        m_radio.startListening();
    1ca6:	0038      	movs	r0, r7
    1ca8:	f7fe ff44 	bl	b34 <_ZN4RF2414startListeningEv>
}
    1cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(auto& node : m_nodes) {
    1cae:	3424      	adds	r4, #36	; 0x24
    1cb0:	42b4      	cmp	r4, r6
    1cb2:	d0e8      	beq.n	1c86 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x26>
            if(strncmp(node.data.name, pkt.name, sizeof(SensorPacket::name)) == 0) {
    1cb4:	1c60      	adds	r0, r4, #1
    1cb6:	1c69      	adds	r1, r5, #1
    1cb8:	2208      	movs	r2, #8
    1cba:	f000 fac0 	bl	223e <strncmp>
    1cbe:	2800      	cmp	r0, #0
    1cc0:	d0de      	beq.n	1c80 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x20>
            if(node.data.id >= pkt.id) pkt.id = node.data.id + 1;
    1cc2:	2300      	movs	r3, #0
    1cc4:	56e3      	ldrsb	r3, [r4, r3]
    1cc6:	2200      	movs	r2, #0
    1cc8:	56aa      	ldrsb	r2, [r5, r2]
    1cca:	4293      	cmp	r3, r2
    1ccc:	dbef      	blt.n	1cae <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x4e>
    1cce:	b2db      	uxtb	r3, r3
    1cd0:	3301      	adds	r3, #1
    1cd2:	702b      	strb	r3, [r5, #0]
    1cd4:	e7eb      	b.n	1cae <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x4e>
        UpdateNode(pkt);
    1cd6:	f7ff ff80 	bl	1bda <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
}
    1cda:	e7e7      	b.n	1cac <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x4c>

00001cdc <_ZN9Sensornet4PollEv>:
void Sensornet::Poll() {
    1cdc:	b510      	push	{r4, lr}
    1cde:	b088      	sub	sp, #32
    1ce0:	0004      	movs	r4, r0
    if(m_radio.available()) {
    1ce2:	f7fe feae 	bl	a42 <_ZN4RF249availableEv>
    1ce6:	2800      	cmp	r0, #0
    1ce8:	d101      	bne.n	1cee <_ZN9Sensornet4PollEv+0x12>
}
    1cea:	b008      	add	sp, #32
    1cec:	bd10      	pop	{r4, pc}
        m_radio.read(&pkt, 32);
    1cee:	2220      	movs	r2, #32
    1cf0:	4669      	mov	r1, sp
    1cf2:	0020      	movs	r0, r4
    1cf4:	f7fe feaa 	bl	a4c <_ZN4RF244readEPvh>
        ProcessPacket(pkt);
    1cf8:	4669      	mov	r1, sp
    1cfa:	0020      	movs	r0, r4
    1cfc:	f7ff ffb0 	bl	1c60 <_ZN9Sensornet13ProcessPacketER12SensorPacket>
}
    1d00:	e7f3      	b.n	1cea <_ZN9Sensornet4PollEv+0xe>

00001d02 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
    1d02:	e7fe      	b.n	1d02 <Dummy_Handler>

00001d04 <Reset_Handler>:
{
    1d04:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1d06:	4a1e      	ldr	r2, [pc, #120]	; (1d80 <Reset_Handler+0x7c>)
    1d08:	4b1e      	ldr	r3, [pc, #120]	; (1d84 <Reset_Handler+0x80>)
    1d0a:	429a      	cmp	r2, r3
    1d0c:	d007      	beq.n	1d1e <Reset_Handler+0x1a>
        pDest = &_data;
    1d0e:	4b1d      	ldr	r3, [pc, #116]	; (1d84 <Reset_Handler+0x80>)
        pSrc = &_etext;
    1d10:	4a1b      	ldr	r2, [pc, #108]	; (1d80 <Reset_Handler+0x7c>)
    1d12:	e001      	b.n	1d18 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
    1d14:	ca02      	ldmia	r2!, {r1}
    1d16:	c302      	stmia	r3!, {r1}
                for (; pDest < &_edata;) {
    1d18:	491b      	ldr	r1, [pc, #108]	; (1d88 <Reset_Handler+0x84>)
    1d1a:	428b      	cmp	r3, r1
    1d1c:	d3fa      	bcc.n	1d14 <Reset_Handler+0x10>
        pSrc = &_etext;
    1d1e:	4b1b      	ldr	r3, [pc, #108]	; (1d8c <Reset_Handler+0x88>)
    1d20:	e001      	b.n	1d26 <Reset_Handler+0x22>
                *pDest++ = 0;
    1d22:	2200      	movs	r2, #0
    1d24:	c304      	stmia	r3!, {r2}
        for (pDest = &_bss; pDest < &_ebss;) {
    1d26:	4a1a      	ldr	r2, [pc, #104]	; (1d90 <Reset_Handler+0x8c>)
    1d28:	4293      	cmp	r3, r2
    1d2a:	d3fa      	bcc.n	1d22 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1d2c:	4b19      	ldr	r3, [pc, #100]	; (1d94 <Reset_Handler+0x90>)
    1d2e:	227f      	movs	r2, #127	; 0x7f
    1d30:	4393      	bics	r3, r2
    1d32:	4a19      	ldr	r2, [pc, #100]	; (1d98 <Reset_Handler+0x94>)
    1d34:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1d36:	4a19      	ldr	r2, [pc, #100]	; (1d9c <Reset_Handler+0x98>)
    1d38:	2390      	movs	r3, #144	; 0x90
    1d3a:	005b      	lsls	r3, r3, #1
    1d3c:	2102      	movs	r1, #2
    1d3e:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1d40:	4b17      	ldr	r3, [pc, #92]	; (1da0 <Reset_Handler+0x9c>)
    1d42:	7b9a      	ldrb	r2, [r3, #14]
    1d44:	312e      	adds	r1, #46	; 0x2e
    1d46:	438a      	bics	r2, r1
    1d48:	2120      	movs	r1, #32
    1d4a:	430a      	orrs	r2, r1
    1d4c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1d4e:	7b9a      	ldrb	r2, [r3, #14]
    1d50:	210c      	movs	r1, #12
    1d52:	438a      	bics	r2, r1
    1d54:	2108      	movs	r1, #8
    1d56:	430a      	orrs	r2, r1
    1d58:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1d5a:	7b9a      	ldrb	r2, [r3, #14]
    1d5c:	2103      	movs	r1, #3
    1d5e:	438a      	bics	r2, r1
    1d60:	2102      	movs	r1, #2
    1d62:	430a      	orrs	r2, r1
    1d64:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1d66:	4a0f      	ldr	r2, [pc, #60]	; (1da4 <Reset_Handler+0xa0>)
    1d68:	6851      	ldr	r1, [r2, #4]
    1d6a:	2380      	movs	r3, #128	; 0x80
    1d6c:	430b      	orrs	r3, r1
    1d6e:	6053      	str	r3, [r2, #4]
        systick_init();
    1d70:	f7ff fc12 	bl	1598 <systick_init>
        __libc_init_array();
    1d74:	f000 f8fa 	bl	1f6c <__libc_init_array>
        main();
    1d78:	f7ff f988 	bl	108c <main>
        while (1);
    1d7c:	e7fe      	b.n	1d7c <Reset_Handler+0x78>
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	00002ebc 	.word	0x00002ebc
    1d84:	20000000 	.word	0x20000000
    1d88:	20000078 	.word	0x20000078
    1d8c:	20000078 	.word	0x20000078
    1d90:	2000051c 	.word	0x2000051c
    1d94:	00000000 	.word	0x00000000
    1d98:	e000ed00 	.word	0xe000ed00
    1d9c:	41007000 	.word	0x41007000
    1da0:	41004800 	.word	0x41004800
    1da4:	41004000 	.word	0x41004000

00001da8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1da8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1daa:	4a06      	ldr	r2, [pc, #24]	; (1dc4 <_sbrk+0x1c>)
    1dac:	6812      	ldr	r2, [r2, #0]
    1dae:	2a00      	cmp	r2, #0
    1db0:	d004      	beq.n	1dbc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1db2:	4a04      	ldr	r2, [pc, #16]	; (1dc4 <_sbrk+0x1c>)
    1db4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1db6:	18c3      	adds	r3, r0, r3
    1db8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1dba:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1dbc:	4a01      	ldr	r2, [pc, #4]	; (1dc4 <_sbrk+0x1c>)
    1dbe:	4902      	ldr	r1, [pc, #8]	; (1dc8 <_sbrk+0x20>)
    1dc0:	6011      	str	r1, [r2, #0]
    1dc2:	e7f6      	b.n	1db2 <_sbrk+0xa>
    1dc4:	20000500 	.word	0x20000500
    1dc8:	2000051c 	.word	0x2000051c

00001dcc <__aeabi_atexit>:
    1dcc:	0003      	movs	r3, r0
    1dce:	b510      	push	{r4, lr}
    1dd0:	0008      	movs	r0, r1
    1dd2:	0019      	movs	r1, r3
    1dd4:	f000 f8bc 	bl	1f50 <__cxa_atexit>
    1dd8:	bd10      	pop	{r4, pc}
    1dda:	Address 0x00001dda is out of bounds.


00001ddc <__udivsi3>:
    1ddc:	2200      	movs	r2, #0
    1dde:	0843      	lsrs	r3, r0, #1
    1de0:	428b      	cmp	r3, r1
    1de2:	d374      	bcc.n	1ece <__udivsi3+0xf2>
    1de4:	0903      	lsrs	r3, r0, #4
    1de6:	428b      	cmp	r3, r1
    1de8:	d35f      	bcc.n	1eaa <__udivsi3+0xce>
    1dea:	0a03      	lsrs	r3, r0, #8
    1dec:	428b      	cmp	r3, r1
    1dee:	d344      	bcc.n	1e7a <__udivsi3+0x9e>
    1df0:	0b03      	lsrs	r3, r0, #12
    1df2:	428b      	cmp	r3, r1
    1df4:	d328      	bcc.n	1e48 <__udivsi3+0x6c>
    1df6:	0c03      	lsrs	r3, r0, #16
    1df8:	428b      	cmp	r3, r1
    1dfa:	d30d      	bcc.n	1e18 <__udivsi3+0x3c>
    1dfc:	22ff      	movs	r2, #255	; 0xff
    1dfe:	0209      	lsls	r1, r1, #8
    1e00:	ba12      	rev	r2, r2
    1e02:	0c03      	lsrs	r3, r0, #16
    1e04:	428b      	cmp	r3, r1
    1e06:	d302      	bcc.n	1e0e <__udivsi3+0x32>
    1e08:	1212      	asrs	r2, r2, #8
    1e0a:	0209      	lsls	r1, r1, #8
    1e0c:	d065      	beq.n	1eda <__udivsi3+0xfe>
    1e0e:	0b03      	lsrs	r3, r0, #12
    1e10:	428b      	cmp	r3, r1
    1e12:	d319      	bcc.n	1e48 <__udivsi3+0x6c>
    1e14:	e000      	b.n	1e18 <__udivsi3+0x3c>
    1e16:	0a09      	lsrs	r1, r1, #8
    1e18:	0bc3      	lsrs	r3, r0, #15
    1e1a:	428b      	cmp	r3, r1
    1e1c:	d301      	bcc.n	1e22 <__udivsi3+0x46>
    1e1e:	03cb      	lsls	r3, r1, #15
    1e20:	1ac0      	subs	r0, r0, r3
    1e22:	4152      	adcs	r2, r2
    1e24:	0b83      	lsrs	r3, r0, #14
    1e26:	428b      	cmp	r3, r1
    1e28:	d301      	bcc.n	1e2e <__udivsi3+0x52>
    1e2a:	038b      	lsls	r3, r1, #14
    1e2c:	1ac0      	subs	r0, r0, r3
    1e2e:	4152      	adcs	r2, r2
    1e30:	0b43      	lsrs	r3, r0, #13
    1e32:	428b      	cmp	r3, r1
    1e34:	d301      	bcc.n	1e3a <__udivsi3+0x5e>
    1e36:	034b      	lsls	r3, r1, #13
    1e38:	1ac0      	subs	r0, r0, r3
    1e3a:	4152      	adcs	r2, r2
    1e3c:	0b03      	lsrs	r3, r0, #12
    1e3e:	428b      	cmp	r3, r1
    1e40:	d301      	bcc.n	1e46 <__udivsi3+0x6a>
    1e42:	030b      	lsls	r3, r1, #12
    1e44:	1ac0      	subs	r0, r0, r3
    1e46:	4152      	adcs	r2, r2
    1e48:	0ac3      	lsrs	r3, r0, #11
    1e4a:	428b      	cmp	r3, r1
    1e4c:	d301      	bcc.n	1e52 <__udivsi3+0x76>
    1e4e:	02cb      	lsls	r3, r1, #11
    1e50:	1ac0      	subs	r0, r0, r3
    1e52:	4152      	adcs	r2, r2
    1e54:	0a83      	lsrs	r3, r0, #10
    1e56:	428b      	cmp	r3, r1
    1e58:	d301      	bcc.n	1e5e <__udivsi3+0x82>
    1e5a:	028b      	lsls	r3, r1, #10
    1e5c:	1ac0      	subs	r0, r0, r3
    1e5e:	4152      	adcs	r2, r2
    1e60:	0a43      	lsrs	r3, r0, #9
    1e62:	428b      	cmp	r3, r1
    1e64:	d301      	bcc.n	1e6a <__udivsi3+0x8e>
    1e66:	024b      	lsls	r3, r1, #9
    1e68:	1ac0      	subs	r0, r0, r3
    1e6a:	4152      	adcs	r2, r2
    1e6c:	0a03      	lsrs	r3, r0, #8
    1e6e:	428b      	cmp	r3, r1
    1e70:	d301      	bcc.n	1e76 <__udivsi3+0x9a>
    1e72:	020b      	lsls	r3, r1, #8
    1e74:	1ac0      	subs	r0, r0, r3
    1e76:	4152      	adcs	r2, r2
    1e78:	d2cd      	bcs.n	1e16 <__udivsi3+0x3a>
    1e7a:	09c3      	lsrs	r3, r0, #7
    1e7c:	428b      	cmp	r3, r1
    1e7e:	d301      	bcc.n	1e84 <__udivsi3+0xa8>
    1e80:	01cb      	lsls	r3, r1, #7
    1e82:	1ac0      	subs	r0, r0, r3
    1e84:	4152      	adcs	r2, r2
    1e86:	0983      	lsrs	r3, r0, #6
    1e88:	428b      	cmp	r3, r1
    1e8a:	d301      	bcc.n	1e90 <__udivsi3+0xb4>
    1e8c:	018b      	lsls	r3, r1, #6
    1e8e:	1ac0      	subs	r0, r0, r3
    1e90:	4152      	adcs	r2, r2
    1e92:	0943      	lsrs	r3, r0, #5
    1e94:	428b      	cmp	r3, r1
    1e96:	d301      	bcc.n	1e9c <__udivsi3+0xc0>
    1e98:	014b      	lsls	r3, r1, #5
    1e9a:	1ac0      	subs	r0, r0, r3
    1e9c:	4152      	adcs	r2, r2
    1e9e:	0903      	lsrs	r3, r0, #4
    1ea0:	428b      	cmp	r3, r1
    1ea2:	d301      	bcc.n	1ea8 <__udivsi3+0xcc>
    1ea4:	010b      	lsls	r3, r1, #4
    1ea6:	1ac0      	subs	r0, r0, r3
    1ea8:	4152      	adcs	r2, r2
    1eaa:	08c3      	lsrs	r3, r0, #3
    1eac:	428b      	cmp	r3, r1
    1eae:	d301      	bcc.n	1eb4 <__udivsi3+0xd8>
    1eb0:	00cb      	lsls	r3, r1, #3
    1eb2:	1ac0      	subs	r0, r0, r3
    1eb4:	4152      	adcs	r2, r2
    1eb6:	0883      	lsrs	r3, r0, #2
    1eb8:	428b      	cmp	r3, r1
    1eba:	d301      	bcc.n	1ec0 <__udivsi3+0xe4>
    1ebc:	008b      	lsls	r3, r1, #2
    1ebe:	1ac0      	subs	r0, r0, r3
    1ec0:	4152      	adcs	r2, r2
    1ec2:	0843      	lsrs	r3, r0, #1
    1ec4:	428b      	cmp	r3, r1
    1ec6:	d301      	bcc.n	1ecc <__udivsi3+0xf0>
    1ec8:	004b      	lsls	r3, r1, #1
    1eca:	1ac0      	subs	r0, r0, r3
    1ecc:	4152      	adcs	r2, r2
    1ece:	1a41      	subs	r1, r0, r1
    1ed0:	d200      	bcs.n	1ed4 <__udivsi3+0xf8>
    1ed2:	4601      	mov	r1, r0
    1ed4:	4152      	adcs	r2, r2
    1ed6:	4610      	mov	r0, r2
    1ed8:	4770      	bx	lr
    1eda:	e7ff      	b.n	1edc <__udivsi3+0x100>
    1edc:	b501      	push	{r0, lr}
    1ede:	2000      	movs	r0, #0
    1ee0:	f000 f806 	bl	1ef0 <__aeabi_idiv0>
    1ee4:	bd02      	pop	{r1, pc}
    1ee6:	46c0      	nop			; (mov r8, r8)

00001ee8 <__aeabi_uidivmod>:
    1ee8:	2900      	cmp	r1, #0
    1eea:	d0f7      	beq.n	1edc <__udivsi3+0x100>
    1eec:	e776      	b.n	1ddc <__udivsi3>
    1eee:	4770      	bx	lr

00001ef0 <__aeabi_idiv0>:
    1ef0:	4770      	bx	lr
    1ef2:	46c0      	nop			; (mov r8, r8)

00001ef4 <__aeabi_lmul>:
    1ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ef6:	0415      	lsls	r5, r2, #16
    1ef8:	0c2d      	lsrs	r5, r5, #16
    1efa:	000f      	movs	r7, r1
    1efc:	0001      	movs	r1, r0
    1efe:	002e      	movs	r6, r5
    1f00:	46c6      	mov	lr, r8
    1f02:	4684      	mov	ip, r0
    1f04:	0400      	lsls	r0, r0, #16
    1f06:	0c14      	lsrs	r4, r2, #16
    1f08:	0c00      	lsrs	r0, r0, #16
    1f0a:	0c09      	lsrs	r1, r1, #16
    1f0c:	4346      	muls	r6, r0
    1f0e:	434d      	muls	r5, r1
    1f10:	4360      	muls	r0, r4
    1f12:	4361      	muls	r1, r4
    1f14:	1940      	adds	r0, r0, r5
    1f16:	0c34      	lsrs	r4, r6, #16
    1f18:	1824      	adds	r4, r4, r0
    1f1a:	b500      	push	{lr}
    1f1c:	42a5      	cmp	r5, r4
    1f1e:	d903      	bls.n	1f28 <__aeabi_lmul+0x34>
    1f20:	2080      	movs	r0, #128	; 0x80
    1f22:	0240      	lsls	r0, r0, #9
    1f24:	4680      	mov	r8, r0
    1f26:	4441      	add	r1, r8
    1f28:	0c25      	lsrs	r5, r4, #16
    1f2a:	186d      	adds	r5, r5, r1
    1f2c:	4661      	mov	r1, ip
    1f2e:	4359      	muls	r1, r3
    1f30:	437a      	muls	r2, r7
    1f32:	0430      	lsls	r0, r6, #16
    1f34:	1949      	adds	r1, r1, r5
    1f36:	0424      	lsls	r4, r4, #16
    1f38:	0c00      	lsrs	r0, r0, #16
    1f3a:	1820      	adds	r0, r4, r0
    1f3c:	1889      	adds	r1, r1, r2
    1f3e:	bc04      	pop	{r2}
    1f40:	4690      	mov	r8, r2
    1f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001f44 <atoi>:
    1f44:	b510      	push	{r4, lr}
    1f46:	220a      	movs	r2, #10
    1f48:	2100      	movs	r1, #0
    1f4a:	f000 fa35 	bl	23b8 <strtol>
    1f4e:	bd10      	pop	{r4, pc}

00001f50 <__cxa_atexit>:
    1f50:	b510      	push	{r4, lr}
    1f52:	0004      	movs	r4, r0
    1f54:	4804      	ldr	r0, [pc, #16]	; (1f68 <__cxa_atexit+0x18>)
    1f56:	0013      	movs	r3, r2
    1f58:	2800      	cmp	r0, #0
    1f5a:	d004      	beq.n	1f66 <__cxa_atexit+0x16>
    1f5c:	000a      	movs	r2, r1
    1f5e:	2002      	movs	r0, #2
    1f60:	0021      	movs	r1, r4
    1f62:	e000      	b.n	1f66 <__cxa_atexit+0x16>
    1f64:	bf00      	nop
    1f66:	bd10      	pop	{r4, pc}
    1f68:	00000000 	.word	0x00000000

00001f6c <__libc_init_array>:
    1f6c:	b570      	push	{r4, r5, r6, lr}
    1f6e:	2600      	movs	r6, #0
    1f70:	4d0c      	ldr	r5, [pc, #48]	; (1fa4 <__libc_init_array+0x38>)
    1f72:	4c0d      	ldr	r4, [pc, #52]	; (1fa8 <__libc_init_array+0x3c>)
    1f74:	1b64      	subs	r4, r4, r5
    1f76:	10a4      	asrs	r4, r4, #2
    1f78:	42a6      	cmp	r6, r4
    1f7a:	d109      	bne.n	1f90 <__libc_init_array+0x24>
    1f7c:	2600      	movs	r6, #0
    1f7e:	f000 ff7f 	bl	2e80 <_init>
    1f82:	4d0a      	ldr	r5, [pc, #40]	; (1fac <__libc_init_array+0x40>)
    1f84:	4c0a      	ldr	r4, [pc, #40]	; (1fb0 <__libc_init_array+0x44>)
    1f86:	1b64      	subs	r4, r4, r5
    1f88:	10a4      	asrs	r4, r4, #2
    1f8a:	42a6      	cmp	r6, r4
    1f8c:	d105      	bne.n	1f9a <__libc_init_array+0x2e>
    1f8e:	bd70      	pop	{r4, r5, r6, pc}
    1f90:	00b3      	lsls	r3, r6, #2
    1f92:	58eb      	ldr	r3, [r5, r3]
    1f94:	4798      	blx	r3
    1f96:	3601      	adds	r6, #1
    1f98:	e7ee      	b.n	1f78 <__libc_init_array+0xc>
    1f9a:	00b3      	lsls	r3, r6, #2
    1f9c:	58eb      	ldr	r3, [r5, r3]
    1f9e:	4798      	blx	r3
    1fa0:	3601      	adds	r6, #1
    1fa2:	e7f2      	b.n	1f8a <__libc_init_array+0x1e>
    1fa4:	00002e8c 	.word	0x00002e8c
    1fa8:	00002e8c 	.word	0x00002e8c
    1fac:	00002e8c 	.word	0x00002e8c
    1fb0:	00002e9c 	.word	0x00002e9c

00001fb4 <malloc>:
    1fb4:	b510      	push	{r4, lr}
    1fb6:	4b03      	ldr	r3, [pc, #12]	; (1fc4 <malloc+0x10>)
    1fb8:	0001      	movs	r1, r0
    1fba:	6818      	ldr	r0, [r3, #0]
    1fbc:	f000 f862 	bl	2084 <_malloc_r>
    1fc0:	bd10      	pop	{r4, pc}
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	20000014 	.word	0x20000014

00001fc8 <free>:
    1fc8:	b510      	push	{r4, lr}
    1fca:	4b03      	ldr	r3, [pc, #12]	; (1fd8 <free+0x10>)
    1fcc:	0001      	movs	r1, r0
    1fce:	6818      	ldr	r0, [r3, #0]
    1fd0:	f000 f80e 	bl	1ff0 <_free_r>
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	20000014 	.word	0x20000014

00001fdc <memcpy>:
    1fdc:	2300      	movs	r3, #0
    1fde:	b510      	push	{r4, lr}
    1fe0:	429a      	cmp	r2, r3
    1fe2:	d100      	bne.n	1fe6 <memcpy+0xa>
    1fe4:	bd10      	pop	{r4, pc}
    1fe6:	5ccc      	ldrb	r4, [r1, r3]
    1fe8:	54c4      	strb	r4, [r0, r3]
    1fea:	3301      	adds	r3, #1
    1fec:	e7f8      	b.n	1fe0 <memcpy+0x4>
    1fee:	Address 0x00001fee is out of bounds.


00001ff0 <_free_r>:
    1ff0:	b570      	push	{r4, r5, r6, lr}
    1ff2:	0005      	movs	r5, r0
    1ff4:	2900      	cmp	r1, #0
    1ff6:	d010      	beq.n	201a <_free_r+0x2a>
    1ff8:	1f0c      	subs	r4, r1, #4
    1ffa:	6823      	ldr	r3, [r4, #0]
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	da00      	bge.n	2002 <_free_r+0x12>
    2000:	18e4      	adds	r4, r4, r3
    2002:	0028      	movs	r0, r5
    2004:	f000 fa1e 	bl	2444 <__malloc_lock>
    2008:	4a1d      	ldr	r2, [pc, #116]	; (2080 <_free_r+0x90>)
    200a:	6813      	ldr	r3, [r2, #0]
    200c:	2b00      	cmp	r3, #0
    200e:	d105      	bne.n	201c <_free_r+0x2c>
    2010:	6063      	str	r3, [r4, #4]
    2012:	6014      	str	r4, [r2, #0]
    2014:	0028      	movs	r0, r5
    2016:	f000 fa1d 	bl	2454 <__malloc_unlock>
    201a:	bd70      	pop	{r4, r5, r6, pc}
    201c:	42a3      	cmp	r3, r4
    201e:	d908      	bls.n	2032 <_free_r+0x42>
    2020:	6821      	ldr	r1, [r4, #0]
    2022:	1860      	adds	r0, r4, r1
    2024:	4283      	cmp	r3, r0
    2026:	d1f3      	bne.n	2010 <_free_r+0x20>
    2028:	6818      	ldr	r0, [r3, #0]
    202a:	685b      	ldr	r3, [r3, #4]
    202c:	1841      	adds	r1, r0, r1
    202e:	6021      	str	r1, [r4, #0]
    2030:	e7ee      	b.n	2010 <_free_r+0x20>
    2032:	001a      	movs	r2, r3
    2034:	685b      	ldr	r3, [r3, #4]
    2036:	2b00      	cmp	r3, #0
    2038:	d001      	beq.n	203e <_free_r+0x4e>
    203a:	42a3      	cmp	r3, r4
    203c:	d9f9      	bls.n	2032 <_free_r+0x42>
    203e:	6811      	ldr	r1, [r2, #0]
    2040:	1850      	adds	r0, r2, r1
    2042:	42a0      	cmp	r0, r4
    2044:	d10b      	bne.n	205e <_free_r+0x6e>
    2046:	6820      	ldr	r0, [r4, #0]
    2048:	1809      	adds	r1, r1, r0
    204a:	1850      	adds	r0, r2, r1
    204c:	6011      	str	r1, [r2, #0]
    204e:	4283      	cmp	r3, r0
    2050:	d1e0      	bne.n	2014 <_free_r+0x24>
    2052:	6818      	ldr	r0, [r3, #0]
    2054:	685b      	ldr	r3, [r3, #4]
    2056:	1841      	adds	r1, r0, r1
    2058:	6011      	str	r1, [r2, #0]
    205a:	6053      	str	r3, [r2, #4]
    205c:	e7da      	b.n	2014 <_free_r+0x24>
    205e:	42a0      	cmp	r0, r4
    2060:	d902      	bls.n	2068 <_free_r+0x78>
    2062:	230c      	movs	r3, #12
    2064:	602b      	str	r3, [r5, #0]
    2066:	e7d5      	b.n	2014 <_free_r+0x24>
    2068:	6821      	ldr	r1, [r4, #0]
    206a:	1860      	adds	r0, r4, r1
    206c:	4283      	cmp	r3, r0
    206e:	d103      	bne.n	2078 <_free_r+0x88>
    2070:	6818      	ldr	r0, [r3, #0]
    2072:	685b      	ldr	r3, [r3, #4]
    2074:	1841      	adds	r1, r0, r1
    2076:	6021      	str	r1, [r4, #0]
    2078:	6063      	str	r3, [r4, #4]
    207a:	6054      	str	r4, [r2, #4]
    207c:	e7ca      	b.n	2014 <_free_r+0x24>
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	20000504 	.word	0x20000504

00002084 <_malloc_r>:
    2084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2086:	2303      	movs	r3, #3
    2088:	1ccd      	adds	r5, r1, #3
    208a:	439d      	bics	r5, r3
    208c:	3508      	adds	r5, #8
    208e:	0006      	movs	r6, r0
    2090:	2d0c      	cmp	r5, #12
    2092:	d21f      	bcs.n	20d4 <_malloc_r+0x50>
    2094:	250c      	movs	r5, #12
    2096:	42a9      	cmp	r1, r5
    2098:	d81e      	bhi.n	20d8 <_malloc_r+0x54>
    209a:	0030      	movs	r0, r6
    209c:	f000 f9d2 	bl	2444 <__malloc_lock>
    20a0:	4925      	ldr	r1, [pc, #148]	; (2138 <_malloc_r+0xb4>)
    20a2:	680a      	ldr	r2, [r1, #0]
    20a4:	0014      	movs	r4, r2
    20a6:	2c00      	cmp	r4, #0
    20a8:	d11a      	bne.n	20e0 <_malloc_r+0x5c>
    20aa:	4f24      	ldr	r7, [pc, #144]	; (213c <_malloc_r+0xb8>)
    20ac:	683b      	ldr	r3, [r7, #0]
    20ae:	2b00      	cmp	r3, #0
    20b0:	d104      	bne.n	20bc <_malloc_r+0x38>
    20b2:	0021      	movs	r1, r4
    20b4:	0030      	movs	r0, r6
    20b6:	f000 f84d 	bl	2154 <_sbrk_r>
    20ba:	6038      	str	r0, [r7, #0]
    20bc:	0029      	movs	r1, r5
    20be:	0030      	movs	r0, r6
    20c0:	f000 f848 	bl	2154 <_sbrk_r>
    20c4:	1c43      	adds	r3, r0, #1
    20c6:	d12b      	bne.n	2120 <_malloc_r+0x9c>
    20c8:	230c      	movs	r3, #12
    20ca:	0030      	movs	r0, r6
    20cc:	6033      	str	r3, [r6, #0]
    20ce:	f000 f9c1 	bl	2454 <__malloc_unlock>
    20d2:	e003      	b.n	20dc <_malloc_r+0x58>
    20d4:	2d00      	cmp	r5, #0
    20d6:	dade      	bge.n	2096 <_malloc_r+0x12>
    20d8:	230c      	movs	r3, #12
    20da:	6033      	str	r3, [r6, #0]
    20dc:	2000      	movs	r0, #0
    20de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20e0:	6823      	ldr	r3, [r4, #0]
    20e2:	1b5b      	subs	r3, r3, r5
    20e4:	d419      	bmi.n	211a <_malloc_r+0x96>
    20e6:	2b0b      	cmp	r3, #11
    20e8:	d903      	bls.n	20f2 <_malloc_r+0x6e>
    20ea:	6023      	str	r3, [r4, #0]
    20ec:	18e4      	adds	r4, r4, r3
    20ee:	6025      	str	r5, [r4, #0]
    20f0:	e003      	b.n	20fa <_malloc_r+0x76>
    20f2:	6863      	ldr	r3, [r4, #4]
    20f4:	42a2      	cmp	r2, r4
    20f6:	d10e      	bne.n	2116 <_malloc_r+0x92>
    20f8:	600b      	str	r3, [r1, #0]
    20fa:	0030      	movs	r0, r6
    20fc:	f000 f9aa 	bl	2454 <__malloc_unlock>
    2100:	0020      	movs	r0, r4
    2102:	2207      	movs	r2, #7
    2104:	300b      	adds	r0, #11
    2106:	1d23      	adds	r3, r4, #4
    2108:	4390      	bics	r0, r2
    210a:	1ac2      	subs	r2, r0, r3
    210c:	4298      	cmp	r0, r3
    210e:	d0e6      	beq.n	20de <_malloc_r+0x5a>
    2110:	1a1b      	subs	r3, r3, r0
    2112:	50a3      	str	r3, [r4, r2]
    2114:	e7e3      	b.n	20de <_malloc_r+0x5a>
    2116:	6053      	str	r3, [r2, #4]
    2118:	e7ef      	b.n	20fa <_malloc_r+0x76>
    211a:	0022      	movs	r2, r4
    211c:	6864      	ldr	r4, [r4, #4]
    211e:	e7c2      	b.n	20a6 <_malloc_r+0x22>
    2120:	2303      	movs	r3, #3
    2122:	1cc4      	adds	r4, r0, #3
    2124:	439c      	bics	r4, r3
    2126:	42a0      	cmp	r0, r4
    2128:	d0e1      	beq.n	20ee <_malloc_r+0x6a>
    212a:	1a21      	subs	r1, r4, r0
    212c:	0030      	movs	r0, r6
    212e:	f000 f811 	bl	2154 <_sbrk_r>
    2132:	1c43      	adds	r3, r0, #1
    2134:	d1db      	bne.n	20ee <_malloc_r+0x6a>
    2136:	e7c7      	b.n	20c8 <_malloc_r+0x44>
    2138:	20000504 	.word	0x20000504
    213c:	20000508 	.word	0x20000508

00002140 <realloc>:
    2140:	b510      	push	{r4, lr}
    2142:	4b03      	ldr	r3, [pc, #12]	; (2150 <realloc+0x10>)
    2144:	000a      	movs	r2, r1
    2146:	0001      	movs	r1, r0
    2148:	6818      	ldr	r0, [r3, #0]
    214a:	f000 f98b 	bl	2464 <_realloc_r>
    214e:	bd10      	pop	{r4, pc}
    2150:	20000014 	.word	0x20000014

00002154 <_sbrk_r>:
    2154:	2300      	movs	r3, #0
    2156:	b570      	push	{r4, r5, r6, lr}
    2158:	4d06      	ldr	r5, [pc, #24]	; (2174 <_sbrk_r+0x20>)
    215a:	0004      	movs	r4, r0
    215c:	0008      	movs	r0, r1
    215e:	602b      	str	r3, [r5, #0]
    2160:	f7ff fe22 	bl	1da8 <_sbrk>
    2164:	1c43      	adds	r3, r0, #1
    2166:	d103      	bne.n	2170 <_sbrk_r+0x1c>
    2168:	682b      	ldr	r3, [r5, #0]
    216a:	2b00      	cmp	r3, #0
    216c:	d000      	beq.n	2170 <_sbrk_r+0x1c>
    216e:	6023      	str	r3, [r4, #0]
    2170:	bd70      	pop	{r4, r5, r6, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	20000518 	.word	0x20000518

00002178 <sniprintf>:
    2178:	b40c      	push	{r2, r3}
    217a:	b530      	push	{r4, r5, lr}
    217c:	4b17      	ldr	r3, [pc, #92]	; (21dc <sniprintf+0x64>)
    217e:	000c      	movs	r4, r1
    2180:	681d      	ldr	r5, [r3, #0]
    2182:	b09d      	sub	sp, #116	; 0x74
    2184:	2900      	cmp	r1, #0
    2186:	da08      	bge.n	219a <sniprintf+0x22>
    2188:	238b      	movs	r3, #139	; 0x8b
    218a:	2001      	movs	r0, #1
    218c:	602b      	str	r3, [r5, #0]
    218e:	4240      	negs	r0, r0
    2190:	b01d      	add	sp, #116	; 0x74
    2192:	bc30      	pop	{r4, r5}
    2194:	bc08      	pop	{r3}
    2196:	b002      	add	sp, #8
    2198:	4718      	bx	r3
    219a:	2382      	movs	r3, #130	; 0x82
    219c:	466a      	mov	r2, sp
    219e:	009b      	lsls	r3, r3, #2
    21a0:	8293      	strh	r3, [r2, #20]
    21a2:	2300      	movs	r3, #0
    21a4:	9002      	str	r0, [sp, #8]
    21a6:	9006      	str	r0, [sp, #24]
    21a8:	4299      	cmp	r1, r3
    21aa:	d000      	beq.n	21ae <sniprintf+0x36>
    21ac:	1e4b      	subs	r3, r1, #1
    21ae:	9304      	str	r3, [sp, #16]
    21b0:	9307      	str	r3, [sp, #28]
    21b2:	2301      	movs	r3, #1
    21b4:	466a      	mov	r2, sp
    21b6:	425b      	negs	r3, r3
    21b8:	82d3      	strh	r3, [r2, #22]
    21ba:	0028      	movs	r0, r5
    21bc:	ab21      	add	r3, sp, #132	; 0x84
    21be:	9a20      	ldr	r2, [sp, #128]	; 0x80
    21c0:	a902      	add	r1, sp, #8
    21c2:	9301      	str	r3, [sp, #4]
    21c4:	f000 f9d6 	bl	2574 <_svfiprintf_r>
    21c8:	1c43      	adds	r3, r0, #1
    21ca:	da01      	bge.n	21d0 <sniprintf+0x58>
    21cc:	238b      	movs	r3, #139	; 0x8b
    21ce:	602b      	str	r3, [r5, #0]
    21d0:	2c00      	cmp	r4, #0
    21d2:	d0dd      	beq.n	2190 <sniprintf+0x18>
    21d4:	2300      	movs	r3, #0
    21d6:	9a02      	ldr	r2, [sp, #8]
    21d8:	7013      	strb	r3, [r2, #0]
    21da:	e7d9      	b.n	2190 <sniprintf+0x18>
    21dc:	20000014 	.word	0x20000014

000021e0 <strcasecmp>:
    21e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21e2:	0005      	movs	r5, r0
    21e4:	2400      	movs	r4, #0
    21e6:	2703      	movs	r7, #3
    21e8:	4e09      	ldr	r6, [pc, #36]	; (2210 <strcasecmp+0x30>)
    21ea:	5d2a      	ldrb	r2, [r5, r4]
    21ec:	5cb3      	ldrb	r3, [r6, r2]
    21ee:	403b      	ands	r3, r7
    21f0:	2b01      	cmp	r3, #1
    21f2:	d100      	bne.n	21f6 <strcasecmp+0x16>
    21f4:	3220      	adds	r2, #32
    21f6:	5d0b      	ldrb	r3, [r1, r4]
    21f8:	5cf0      	ldrb	r0, [r6, r3]
    21fa:	4038      	ands	r0, r7
    21fc:	2801      	cmp	r0, #1
    21fe:	d100      	bne.n	2202 <strcasecmp+0x22>
    2200:	3320      	adds	r3, #32
    2202:	1ad0      	subs	r0, r2, r3
    2204:	429a      	cmp	r2, r3
    2206:	d102      	bne.n	220e <strcasecmp+0x2e>
    2208:	3401      	adds	r4, #1
    220a:	2b00      	cmp	r3, #0
    220c:	d1ed      	bne.n	21ea <strcasecmp+0xa>
    220e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2210:	00002ce9 	.word	0x00002ce9

00002214 <strchr>:
    2214:	b2c9      	uxtb	r1, r1
    2216:	7803      	ldrb	r3, [r0, #0]
    2218:	2b00      	cmp	r3, #0
    221a:	d004      	beq.n	2226 <strchr+0x12>
    221c:	428b      	cmp	r3, r1
    221e:	d100      	bne.n	2222 <strchr+0xe>
    2220:	4770      	bx	lr
    2222:	3001      	adds	r0, #1
    2224:	e7f7      	b.n	2216 <strchr+0x2>
    2226:	424b      	negs	r3, r1
    2228:	4159      	adcs	r1, r3
    222a:	4249      	negs	r1, r1
    222c:	4008      	ands	r0, r1
    222e:	e7f7      	b.n	2220 <strchr+0xc>

00002230 <strlen>:
    2230:	2300      	movs	r3, #0
    2232:	5cc2      	ldrb	r2, [r0, r3]
    2234:	3301      	adds	r3, #1
    2236:	2a00      	cmp	r2, #0
    2238:	d1fb      	bne.n	2232 <strlen+0x2>
    223a:	1e58      	subs	r0, r3, #1
    223c:	4770      	bx	lr

0000223e <strncmp>:
    223e:	b530      	push	{r4, r5, lr}
    2240:	0005      	movs	r5, r0
    2242:	1e10      	subs	r0, r2, #0
    2244:	d00b      	beq.n	225e <strncmp+0x20>
    2246:	2400      	movs	r4, #0
    2248:	3a01      	subs	r2, #1
    224a:	5d2b      	ldrb	r3, [r5, r4]
    224c:	5d08      	ldrb	r0, [r1, r4]
    224e:	4283      	cmp	r3, r0
    2250:	d104      	bne.n	225c <strncmp+0x1e>
    2252:	4294      	cmp	r4, r2
    2254:	d002      	beq.n	225c <strncmp+0x1e>
    2256:	3401      	adds	r4, #1
    2258:	2b00      	cmp	r3, #0
    225a:	d1f6      	bne.n	224a <strncmp+0xc>
    225c:	1a18      	subs	r0, r3, r0
    225e:	bd30      	pop	{r4, r5, pc}

00002260 <strncpy>:
    2260:	0003      	movs	r3, r0
    2262:	b530      	push	{r4, r5, lr}
    2264:	001d      	movs	r5, r3
    2266:	2a00      	cmp	r2, #0
    2268:	d006      	beq.n	2278 <strncpy+0x18>
    226a:	780c      	ldrb	r4, [r1, #0]
    226c:	3a01      	subs	r2, #1
    226e:	3301      	adds	r3, #1
    2270:	702c      	strb	r4, [r5, #0]
    2272:	3101      	adds	r1, #1
    2274:	2c00      	cmp	r4, #0
    2276:	d1f5      	bne.n	2264 <strncpy+0x4>
    2278:	2100      	movs	r1, #0
    227a:	189a      	adds	r2, r3, r2
    227c:	4293      	cmp	r3, r2
    227e:	d100      	bne.n	2282 <strncpy+0x22>
    2280:	bd30      	pop	{r4, r5, pc}
    2282:	7019      	strb	r1, [r3, #0]
    2284:	3301      	adds	r3, #1
    2286:	e7f9      	b.n	227c <strncpy+0x1c>

00002288 <strstr>:
    2288:	780a      	ldrb	r2, [r1, #0]
    228a:	b530      	push	{r4, r5, lr}
    228c:	2a00      	cmp	r2, #0
    228e:	d10c      	bne.n	22aa <strstr+0x22>
    2290:	bd30      	pop	{r4, r5, pc}
    2292:	429a      	cmp	r2, r3
    2294:	d108      	bne.n	22a8 <strstr+0x20>
    2296:	2301      	movs	r3, #1
    2298:	5ccc      	ldrb	r4, [r1, r3]
    229a:	2c00      	cmp	r4, #0
    229c:	d0f8      	beq.n	2290 <strstr+0x8>
    229e:	5cc5      	ldrb	r5, [r0, r3]
    22a0:	42a5      	cmp	r5, r4
    22a2:	d101      	bne.n	22a8 <strstr+0x20>
    22a4:	3301      	adds	r3, #1
    22a6:	e7f7      	b.n	2298 <strstr+0x10>
    22a8:	3001      	adds	r0, #1
    22aa:	7803      	ldrb	r3, [r0, #0]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d1f0      	bne.n	2292 <strstr+0xa>
    22b0:	0018      	movs	r0, r3
    22b2:	e7ed      	b.n	2290 <strstr+0x8>

000022b4 <_strtol_l.isra.0>:
    22b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22b6:	001e      	movs	r6, r3
    22b8:	4b3d      	ldr	r3, [pc, #244]	; (23b0 <_strtol_l.isra.0+0xfc>)
    22ba:	b087      	sub	sp, #28
    22bc:	9005      	str	r0, [sp, #20]
    22be:	9202      	str	r2, [sp, #8]
    22c0:	0008      	movs	r0, r1
    22c2:	469c      	mov	ip, r3
    22c4:	2208      	movs	r2, #8
    22c6:	9101      	str	r1, [sp, #4]
    22c8:	0003      	movs	r3, r0
    22ca:	4661      	mov	r1, ip
    22cc:	781c      	ldrb	r4, [r3, #0]
    22ce:	1c45      	adds	r5, r0, #1
    22d0:	5d09      	ldrb	r1, [r1, r4]
    22d2:	0028      	movs	r0, r5
    22d4:	000f      	movs	r7, r1
    22d6:	4017      	ands	r7, r2
    22d8:	4211      	tst	r1, r2
    22da:	d1f5      	bne.n	22c8 <_strtol_l.isra.0+0x14>
    22dc:	2c2d      	cmp	r4, #45	; 0x2d
    22de:	d133      	bne.n	2348 <_strtol_l.isra.0+0x94>
    22e0:	2701      	movs	r7, #1
    22e2:	782c      	ldrb	r4, [r5, #0]
    22e4:	1c9d      	adds	r5, r3, #2
    22e6:	2e00      	cmp	r6, #0
    22e8:	d05d      	beq.n	23a6 <_strtol_l.isra.0+0xf2>
    22ea:	2e10      	cmp	r6, #16
    22ec:	d109      	bne.n	2302 <_strtol_l.isra.0+0x4e>
    22ee:	2c30      	cmp	r4, #48	; 0x30
    22f0:	d107      	bne.n	2302 <_strtol_l.isra.0+0x4e>
    22f2:	2220      	movs	r2, #32
    22f4:	782b      	ldrb	r3, [r5, #0]
    22f6:	4393      	bics	r3, r2
    22f8:	2b58      	cmp	r3, #88	; 0x58
    22fa:	d14f      	bne.n	239c <_strtol_l.isra.0+0xe8>
    22fc:	2610      	movs	r6, #16
    22fe:	786c      	ldrb	r4, [r5, #1]
    2300:	3502      	adds	r5, #2
    2302:	4b2c      	ldr	r3, [pc, #176]	; (23b4 <_strtol_l.isra.0+0x100>)
    2304:	0031      	movs	r1, r6
    2306:	18fb      	adds	r3, r7, r3
    2308:	0018      	movs	r0, r3
    230a:	9303      	str	r3, [sp, #12]
    230c:	f7ff fdec 	bl	1ee8 <__aeabi_uidivmod>
    2310:	2300      	movs	r3, #0
    2312:	2201      	movs	r2, #1
    2314:	4684      	mov	ip, r0
    2316:	0018      	movs	r0, r3
    2318:	9104      	str	r1, [sp, #16]
    231a:	4252      	negs	r2, r2
    231c:	0021      	movs	r1, r4
    231e:	3930      	subs	r1, #48	; 0x30
    2320:	2909      	cmp	r1, #9
    2322:	d816      	bhi.n	2352 <_strtol_l.isra.0+0x9e>
    2324:	000c      	movs	r4, r1
    2326:	42a6      	cmp	r6, r4
    2328:	dd1f      	ble.n	236a <_strtol_l.isra.0+0xb6>
    232a:	1c59      	adds	r1, r3, #1
    232c:	d009      	beq.n	2342 <_strtol_l.isra.0+0x8e>
    232e:	0013      	movs	r3, r2
    2330:	4584      	cmp	ip, r0
    2332:	d306      	bcc.n	2342 <_strtol_l.isra.0+0x8e>
    2334:	d102      	bne.n	233c <_strtol_l.isra.0+0x88>
    2336:	9904      	ldr	r1, [sp, #16]
    2338:	42a1      	cmp	r1, r4
    233a:	db02      	blt.n	2342 <_strtol_l.isra.0+0x8e>
    233c:	2301      	movs	r3, #1
    233e:	4370      	muls	r0, r6
    2340:	1820      	adds	r0, r4, r0
    2342:	782c      	ldrb	r4, [r5, #0]
    2344:	3501      	adds	r5, #1
    2346:	e7e9      	b.n	231c <_strtol_l.isra.0+0x68>
    2348:	2c2b      	cmp	r4, #43	; 0x2b
    234a:	d1cc      	bne.n	22e6 <_strtol_l.isra.0+0x32>
    234c:	782c      	ldrb	r4, [r5, #0]
    234e:	1c9d      	adds	r5, r3, #2
    2350:	e7c9      	b.n	22e6 <_strtol_l.isra.0+0x32>
    2352:	0021      	movs	r1, r4
    2354:	3941      	subs	r1, #65	; 0x41
    2356:	2919      	cmp	r1, #25
    2358:	d801      	bhi.n	235e <_strtol_l.isra.0+0xaa>
    235a:	3c37      	subs	r4, #55	; 0x37
    235c:	e7e3      	b.n	2326 <_strtol_l.isra.0+0x72>
    235e:	0021      	movs	r1, r4
    2360:	3961      	subs	r1, #97	; 0x61
    2362:	2919      	cmp	r1, #25
    2364:	d801      	bhi.n	236a <_strtol_l.isra.0+0xb6>
    2366:	3c57      	subs	r4, #87	; 0x57
    2368:	e7dd      	b.n	2326 <_strtol_l.isra.0+0x72>
    236a:	1c5a      	adds	r2, r3, #1
    236c:	d108      	bne.n	2380 <_strtol_l.isra.0+0xcc>
    236e:	9a05      	ldr	r2, [sp, #20]
    2370:	3323      	adds	r3, #35	; 0x23
    2372:	6013      	str	r3, [r2, #0]
    2374:	9b02      	ldr	r3, [sp, #8]
    2376:	9803      	ldr	r0, [sp, #12]
    2378:	2b00      	cmp	r3, #0
    237a:	d109      	bne.n	2390 <_strtol_l.isra.0+0xdc>
    237c:	b007      	add	sp, #28
    237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2380:	2f00      	cmp	r7, #0
    2382:	d000      	beq.n	2386 <_strtol_l.isra.0+0xd2>
    2384:	4240      	negs	r0, r0
    2386:	9a02      	ldr	r2, [sp, #8]
    2388:	2a00      	cmp	r2, #0
    238a:	d0f7      	beq.n	237c <_strtol_l.isra.0+0xc8>
    238c:	2b00      	cmp	r3, #0
    238e:	d001      	beq.n	2394 <_strtol_l.isra.0+0xe0>
    2390:	1e6b      	subs	r3, r5, #1
    2392:	9301      	str	r3, [sp, #4]
    2394:	9b02      	ldr	r3, [sp, #8]
    2396:	9a01      	ldr	r2, [sp, #4]
    2398:	601a      	str	r2, [r3, #0]
    239a:	e7ef      	b.n	237c <_strtol_l.isra.0+0xc8>
    239c:	2430      	movs	r4, #48	; 0x30
    239e:	2e00      	cmp	r6, #0
    23a0:	d1af      	bne.n	2302 <_strtol_l.isra.0+0x4e>
    23a2:	3608      	adds	r6, #8
    23a4:	e7ad      	b.n	2302 <_strtol_l.isra.0+0x4e>
    23a6:	2c30      	cmp	r4, #48	; 0x30
    23a8:	d0a3      	beq.n	22f2 <_strtol_l.isra.0+0x3e>
    23aa:	260a      	movs	r6, #10
    23ac:	e7a9      	b.n	2302 <_strtol_l.isra.0+0x4e>
    23ae:	46c0      	nop			; (mov r8, r8)
    23b0:	00002ce9 	.word	0x00002ce9
    23b4:	7fffffff 	.word	0x7fffffff

000023b8 <strtol>:
    23b8:	b510      	push	{r4, lr}
    23ba:	0013      	movs	r3, r2
    23bc:	000a      	movs	r2, r1
    23be:	0001      	movs	r1, r0
    23c0:	4802      	ldr	r0, [pc, #8]	; (23cc <strtol+0x14>)
    23c2:	6800      	ldr	r0, [r0, #0]
    23c4:	f7ff ff76 	bl	22b4 <_strtol_l.isra.0>
    23c8:	bd10      	pop	{r4, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	20000014 	.word	0x20000014

000023d0 <_vsniprintf_r>:
    23d0:	b530      	push	{r4, r5, lr}
    23d2:	0014      	movs	r4, r2
    23d4:	0005      	movs	r5, r0
    23d6:	001a      	movs	r2, r3
    23d8:	b09b      	sub	sp, #108	; 0x6c
    23da:	2c00      	cmp	r4, #0
    23dc:	da05      	bge.n	23ea <_vsniprintf_r+0x1a>
    23de:	238b      	movs	r3, #139	; 0x8b
    23e0:	6003      	str	r3, [r0, #0]
    23e2:	2001      	movs	r0, #1
    23e4:	4240      	negs	r0, r0
    23e6:	b01b      	add	sp, #108	; 0x6c
    23e8:	bd30      	pop	{r4, r5, pc}
    23ea:	2382      	movs	r3, #130	; 0x82
    23ec:	4668      	mov	r0, sp
    23ee:	009b      	lsls	r3, r3, #2
    23f0:	8183      	strh	r3, [r0, #12]
    23f2:	2300      	movs	r3, #0
    23f4:	9100      	str	r1, [sp, #0]
    23f6:	9104      	str	r1, [sp, #16]
    23f8:	429c      	cmp	r4, r3
    23fa:	d000      	beq.n	23fe <_vsniprintf_r+0x2e>
    23fc:	1e63      	subs	r3, r4, #1
    23fe:	9302      	str	r3, [sp, #8]
    2400:	9305      	str	r3, [sp, #20]
    2402:	2301      	movs	r3, #1
    2404:	4669      	mov	r1, sp
    2406:	425b      	negs	r3, r3
    2408:	81cb      	strh	r3, [r1, #14]
    240a:	0028      	movs	r0, r5
    240c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    240e:	f000 f8b1 	bl	2574 <_svfiprintf_r>
    2412:	1c43      	adds	r3, r0, #1
    2414:	da01      	bge.n	241a <_vsniprintf_r+0x4a>
    2416:	238b      	movs	r3, #139	; 0x8b
    2418:	602b      	str	r3, [r5, #0]
    241a:	2c00      	cmp	r4, #0
    241c:	d0e3      	beq.n	23e6 <_vsniprintf_r+0x16>
    241e:	2300      	movs	r3, #0
    2420:	9a00      	ldr	r2, [sp, #0]
    2422:	7013      	strb	r3, [r2, #0]
    2424:	e7df      	b.n	23e6 <_vsniprintf_r+0x16>
    2426:	Address 0x00002426 is out of bounds.


00002428 <vsniprintf>:
    2428:	b507      	push	{r0, r1, r2, lr}
    242a:	9300      	str	r3, [sp, #0]
    242c:	0013      	movs	r3, r2
    242e:	000a      	movs	r2, r1
    2430:	0001      	movs	r1, r0
    2432:	4802      	ldr	r0, [pc, #8]	; (243c <vsniprintf+0x14>)
    2434:	6800      	ldr	r0, [r0, #0]
    2436:	f7ff ffcb 	bl	23d0 <_vsniprintf_r>
    243a:	bd0e      	pop	{r1, r2, r3, pc}
    243c:	20000014 	.word	0x20000014

00002440 <__retarget_lock_acquire_recursive>:
    2440:	4770      	bx	lr

00002442 <__retarget_lock_release_recursive>:
    2442:	4770      	bx	lr

00002444 <__malloc_lock>:
    2444:	b510      	push	{r4, lr}
    2446:	4802      	ldr	r0, [pc, #8]	; (2450 <__malloc_lock+0xc>)
    2448:	f7ff fffa 	bl	2440 <__retarget_lock_acquire_recursive>
    244c:	bd10      	pop	{r4, pc}
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	20000510 	.word	0x20000510

00002454 <__malloc_unlock>:
    2454:	b510      	push	{r4, lr}
    2456:	4802      	ldr	r0, [pc, #8]	; (2460 <__malloc_unlock+0xc>)
    2458:	f7ff fff3 	bl	2442 <__retarget_lock_release_recursive>
    245c:	bd10      	pop	{r4, pc}
    245e:	46c0      	nop			; (mov r8, r8)
    2460:	20000510 	.word	0x20000510

00002464 <_realloc_r>:
    2464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2466:	0007      	movs	r7, r0
    2468:	000d      	movs	r5, r1
    246a:	0016      	movs	r6, r2
    246c:	2900      	cmp	r1, #0
    246e:	d105      	bne.n	247c <_realloc_r+0x18>
    2470:	0011      	movs	r1, r2
    2472:	f7ff fe07 	bl	2084 <_malloc_r>
    2476:	0004      	movs	r4, r0
    2478:	0020      	movs	r0, r4
    247a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    247c:	2a00      	cmp	r2, #0
    247e:	d103      	bne.n	2488 <_realloc_r+0x24>
    2480:	f7ff fdb6 	bl	1ff0 <_free_r>
    2484:	0034      	movs	r4, r6
    2486:	e7f7      	b.n	2478 <_realloc_r+0x14>
    2488:	f000 fb14 	bl	2ab4 <_malloc_usable_size_r>
    248c:	002c      	movs	r4, r5
    248e:	42b0      	cmp	r0, r6
    2490:	d2f2      	bcs.n	2478 <_realloc_r+0x14>
    2492:	0031      	movs	r1, r6
    2494:	0038      	movs	r0, r7
    2496:	f7ff fdf5 	bl	2084 <_malloc_r>
    249a:	1e04      	subs	r4, r0, #0
    249c:	d0ec      	beq.n	2478 <_realloc_r+0x14>
    249e:	0029      	movs	r1, r5
    24a0:	0032      	movs	r2, r6
    24a2:	f7ff fd9b 	bl	1fdc <memcpy>
    24a6:	0029      	movs	r1, r5
    24a8:	0038      	movs	r0, r7
    24aa:	f7ff fda1 	bl	1ff0 <_free_r>
    24ae:	e7e3      	b.n	2478 <_realloc_r+0x14>

000024b0 <__ssputs_r>:
    24b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24b2:	688e      	ldr	r6, [r1, #8]
    24b4:	b085      	sub	sp, #20
    24b6:	0007      	movs	r7, r0
    24b8:	000c      	movs	r4, r1
    24ba:	9203      	str	r2, [sp, #12]
    24bc:	9301      	str	r3, [sp, #4]
    24be:	429e      	cmp	r6, r3
    24c0:	d83c      	bhi.n	253c <__ssputs_r+0x8c>
    24c2:	2390      	movs	r3, #144	; 0x90
    24c4:	898a      	ldrh	r2, [r1, #12]
    24c6:	00db      	lsls	r3, r3, #3
    24c8:	421a      	tst	r2, r3
    24ca:	d034      	beq.n	2536 <__ssputs_r+0x86>
    24cc:	2503      	movs	r5, #3
    24ce:	6909      	ldr	r1, [r1, #16]
    24d0:	6823      	ldr	r3, [r4, #0]
    24d2:	1a5b      	subs	r3, r3, r1
    24d4:	9302      	str	r3, [sp, #8]
    24d6:	6963      	ldr	r3, [r4, #20]
    24d8:	9802      	ldr	r0, [sp, #8]
    24da:	435d      	muls	r5, r3
    24dc:	0feb      	lsrs	r3, r5, #31
    24de:	195d      	adds	r5, r3, r5
    24e0:	9b01      	ldr	r3, [sp, #4]
    24e2:	106d      	asrs	r5, r5, #1
    24e4:	3301      	adds	r3, #1
    24e6:	181b      	adds	r3, r3, r0
    24e8:	42ab      	cmp	r3, r5
    24ea:	d900      	bls.n	24ee <__ssputs_r+0x3e>
    24ec:	001d      	movs	r5, r3
    24ee:	0553      	lsls	r3, r2, #21
    24f0:	d532      	bpl.n	2558 <__ssputs_r+0xa8>
    24f2:	0029      	movs	r1, r5
    24f4:	0038      	movs	r0, r7
    24f6:	f7ff fdc5 	bl	2084 <_malloc_r>
    24fa:	1e06      	subs	r6, r0, #0
    24fc:	d109      	bne.n	2512 <__ssputs_r+0x62>
    24fe:	230c      	movs	r3, #12
    2500:	603b      	str	r3, [r7, #0]
    2502:	2340      	movs	r3, #64	; 0x40
    2504:	2001      	movs	r0, #1
    2506:	89a2      	ldrh	r2, [r4, #12]
    2508:	4240      	negs	r0, r0
    250a:	4313      	orrs	r3, r2
    250c:	81a3      	strh	r3, [r4, #12]
    250e:	b005      	add	sp, #20
    2510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2512:	9a02      	ldr	r2, [sp, #8]
    2514:	6921      	ldr	r1, [r4, #16]
    2516:	f7ff fd61 	bl	1fdc <memcpy>
    251a:	89a3      	ldrh	r3, [r4, #12]
    251c:	4a14      	ldr	r2, [pc, #80]	; (2570 <__ssputs_r+0xc0>)
    251e:	401a      	ands	r2, r3
    2520:	2380      	movs	r3, #128	; 0x80
    2522:	4313      	orrs	r3, r2
    2524:	81a3      	strh	r3, [r4, #12]
    2526:	9b02      	ldr	r3, [sp, #8]
    2528:	6126      	str	r6, [r4, #16]
    252a:	18f6      	adds	r6, r6, r3
    252c:	6026      	str	r6, [r4, #0]
    252e:	6165      	str	r5, [r4, #20]
    2530:	9e01      	ldr	r6, [sp, #4]
    2532:	1aed      	subs	r5, r5, r3
    2534:	60a5      	str	r5, [r4, #8]
    2536:	9b01      	ldr	r3, [sp, #4]
    2538:	429e      	cmp	r6, r3
    253a:	d900      	bls.n	253e <__ssputs_r+0x8e>
    253c:	9e01      	ldr	r6, [sp, #4]
    253e:	0032      	movs	r2, r6
    2540:	9903      	ldr	r1, [sp, #12]
    2542:	6820      	ldr	r0, [r4, #0]
    2544:	f000 faa3 	bl	2a8e <memmove>
    2548:	68a3      	ldr	r3, [r4, #8]
    254a:	2000      	movs	r0, #0
    254c:	1b9b      	subs	r3, r3, r6
    254e:	60a3      	str	r3, [r4, #8]
    2550:	6823      	ldr	r3, [r4, #0]
    2552:	199e      	adds	r6, r3, r6
    2554:	6026      	str	r6, [r4, #0]
    2556:	e7da      	b.n	250e <__ssputs_r+0x5e>
    2558:	002a      	movs	r2, r5
    255a:	0038      	movs	r0, r7
    255c:	f7ff ff82 	bl	2464 <_realloc_r>
    2560:	1e06      	subs	r6, r0, #0
    2562:	d1e0      	bne.n	2526 <__ssputs_r+0x76>
    2564:	0038      	movs	r0, r7
    2566:	6921      	ldr	r1, [r4, #16]
    2568:	f7ff fd42 	bl	1ff0 <_free_r>
    256c:	e7c7      	b.n	24fe <__ssputs_r+0x4e>
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	fffffb7f 	.word	0xfffffb7f

00002574 <_svfiprintf_r>:
    2574:	b5f0      	push	{r4, r5, r6, r7, lr}
    2576:	b0a1      	sub	sp, #132	; 0x84
    2578:	9003      	str	r0, [sp, #12]
    257a:	001d      	movs	r5, r3
    257c:	898b      	ldrh	r3, [r1, #12]
    257e:	000f      	movs	r7, r1
    2580:	0016      	movs	r6, r2
    2582:	061b      	lsls	r3, r3, #24
    2584:	d511      	bpl.n	25aa <_svfiprintf_r+0x36>
    2586:	690b      	ldr	r3, [r1, #16]
    2588:	2b00      	cmp	r3, #0
    258a:	d10e      	bne.n	25aa <_svfiprintf_r+0x36>
    258c:	2140      	movs	r1, #64	; 0x40
    258e:	f7ff fd79 	bl	2084 <_malloc_r>
    2592:	6038      	str	r0, [r7, #0]
    2594:	6138      	str	r0, [r7, #16]
    2596:	2800      	cmp	r0, #0
    2598:	d105      	bne.n	25a6 <_svfiprintf_r+0x32>
    259a:	230c      	movs	r3, #12
    259c:	9a03      	ldr	r2, [sp, #12]
    259e:	3801      	subs	r0, #1
    25a0:	6013      	str	r3, [r2, #0]
    25a2:	b021      	add	sp, #132	; 0x84
    25a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25a6:	2340      	movs	r3, #64	; 0x40
    25a8:	617b      	str	r3, [r7, #20]
    25aa:	2300      	movs	r3, #0
    25ac:	ac08      	add	r4, sp, #32
    25ae:	6163      	str	r3, [r4, #20]
    25b0:	3320      	adds	r3, #32
    25b2:	7663      	strb	r3, [r4, #25]
    25b4:	3310      	adds	r3, #16
    25b6:	76a3      	strb	r3, [r4, #26]
    25b8:	9507      	str	r5, [sp, #28]
    25ba:	0035      	movs	r5, r6
    25bc:	782b      	ldrb	r3, [r5, #0]
    25be:	2b00      	cmp	r3, #0
    25c0:	d001      	beq.n	25c6 <_svfiprintf_r+0x52>
    25c2:	2b25      	cmp	r3, #37	; 0x25
    25c4:	d147      	bne.n	2656 <_svfiprintf_r+0xe2>
    25c6:	1bab      	subs	r3, r5, r6
    25c8:	9305      	str	r3, [sp, #20]
    25ca:	42b5      	cmp	r5, r6
    25cc:	d00c      	beq.n	25e8 <_svfiprintf_r+0x74>
    25ce:	0032      	movs	r2, r6
    25d0:	0039      	movs	r1, r7
    25d2:	9803      	ldr	r0, [sp, #12]
    25d4:	f7ff ff6c 	bl	24b0 <__ssputs_r>
    25d8:	1c43      	adds	r3, r0, #1
    25da:	d100      	bne.n	25de <_svfiprintf_r+0x6a>
    25dc:	e0ae      	b.n	273c <_svfiprintf_r+0x1c8>
    25de:	6962      	ldr	r2, [r4, #20]
    25e0:	9b05      	ldr	r3, [sp, #20]
    25e2:	4694      	mov	ip, r2
    25e4:	4463      	add	r3, ip
    25e6:	6163      	str	r3, [r4, #20]
    25e8:	782b      	ldrb	r3, [r5, #0]
    25ea:	2b00      	cmp	r3, #0
    25ec:	d100      	bne.n	25f0 <_svfiprintf_r+0x7c>
    25ee:	e0a5      	b.n	273c <_svfiprintf_r+0x1c8>
    25f0:	2201      	movs	r2, #1
    25f2:	2300      	movs	r3, #0
    25f4:	4252      	negs	r2, r2
    25f6:	6062      	str	r2, [r4, #4]
    25f8:	a904      	add	r1, sp, #16
    25fa:	3254      	adds	r2, #84	; 0x54
    25fc:	1852      	adds	r2, r2, r1
    25fe:	1c6e      	adds	r6, r5, #1
    2600:	6023      	str	r3, [r4, #0]
    2602:	60e3      	str	r3, [r4, #12]
    2604:	60a3      	str	r3, [r4, #8]
    2606:	7013      	strb	r3, [r2, #0]
    2608:	65a3      	str	r3, [r4, #88]	; 0x58
    260a:	2205      	movs	r2, #5
    260c:	7831      	ldrb	r1, [r6, #0]
    260e:	4854      	ldr	r0, [pc, #336]	; (2760 <_svfiprintf_r+0x1ec>)
    2610:	f000 fa32 	bl	2a78 <memchr>
    2614:	1c75      	adds	r5, r6, #1
    2616:	2800      	cmp	r0, #0
    2618:	d11f      	bne.n	265a <_svfiprintf_r+0xe6>
    261a:	6822      	ldr	r2, [r4, #0]
    261c:	06d3      	lsls	r3, r2, #27
    261e:	d504      	bpl.n	262a <_svfiprintf_r+0xb6>
    2620:	2353      	movs	r3, #83	; 0x53
    2622:	a904      	add	r1, sp, #16
    2624:	185b      	adds	r3, r3, r1
    2626:	2120      	movs	r1, #32
    2628:	7019      	strb	r1, [r3, #0]
    262a:	0713      	lsls	r3, r2, #28
    262c:	d504      	bpl.n	2638 <_svfiprintf_r+0xc4>
    262e:	2353      	movs	r3, #83	; 0x53
    2630:	a904      	add	r1, sp, #16
    2632:	185b      	adds	r3, r3, r1
    2634:	212b      	movs	r1, #43	; 0x2b
    2636:	7019      	strb	r1, [r3, #0]
    2638:	7833      	ldrb	r3, [r6, #0]
    263a:	2b2a      	cmp	r3, #42	; 0x2a
    263c:	d016      	beq.n	266c <_svfiprintf_r+0xf8>
    263e:	0035      	movs	r5, r6
    2640:	2100      	movs	r1, #0
    2642:	200a      	movs	r0, #10
    2644:	68e3      	ldr	r3, [r4, #12]
    2646:	782a      	ldrb	r2, [r5, #0]
    2648:	1c6e      	adds	r6, r5, #1
    264a:	3a30      	subs	r2, #48	; 0x30
    264c:	2a09      	cmp	r2, #9
    264e:	d94e      	bls.n	26ee <_svfiprintf_r+0x17a>
    2650:	2900      	cmp	r1, #0
    2652:	d111      	bne.n	2678 <_svfiprintf_r+0x104>
    2654:	e017      	b.n	2686 <_svfiprintf_r+0x112>
    2656:	3501      	adds	r5, #1
    2658:	e7b0      	b.n	25bc <_svfiprintf_r+0x48>
    265a:	4b41      	ldr	r3, [pc, #260]	; (2760 <_svfiprintf_r+0x1ec>)
    265c:	6822      	ldr	r2, [r4, #0]
    265e:	1ac0      	subs	r0, r0, r3
    2660:	2301      	movs	r3, #1
    2662:	4083      	lsls	r3, r0
    2664:	4313      	orrs	r3, r2
    2666:	002e      	movs	r6, r5
    2668:	6023      	str	r3, [r4, #0]
    266a:	e7ce      	b.n	260a <_svfiprintf_r+0x96>
    266c:	9b07      	ldr	r3, [sp, #28]
    266e:	1d19      	adds	r1, r3, #4
    2670:	681b      	ldr	r3, [r3, #0]
    2672:	9107      	str	r1, [sp, #28]
    2674:	2b00      	cmp	r3, #0
    2676:	db01      	blt.n	267c <_svfiprintf_r+0x108>
    2678:	930b      	str	r3, [sp, #44]	; 0x2c
    267a:	e004      	b.n	2686 <_svfiprintf_r+0x112>
    267c:	425b      	negs	r3, r3
    267e:	60e3      	str	r3, [r4, #12]
    2680:	2302      	movs	r3, #2
    2682:	4313      	orrs	r3, r2
    2684:	6023      	str	r3, [r4, #0]
    2686:	782b      	ldrb	r3, [r5, #0]
    2688:	2b2e      	cmp	r3, #46	; 0x2e
    268a:	d10a      	bne.n	26a2 <_svfiprintf_r+0x12e>
    268c:	786b      	ldrb	r3, [r5, #1]
    268e:	2b2a      	cmp	r3, #42	; 0x2a
    2690:	d135      	bne.n	26fe <_svfiprintf_r+0x18a>
    2692:	9b07      	ldr	r3, [sp, #28]
    2694:	3502      	adds	r5, #2
    2696:	1d1a      	adds	r2, r3, #4
    2698:	681b      	ldr	r3, [r3, #0]
    269a:	9207      	str	r2, [sp, #28]
    269c:	2b00      	cmp	r3, #0
    269e:	db2b      	blt.n	26f8 <_svfiprintf_r+0x184>
    26a0:	9309      	str	r3, [sp, #36]	; 0x24
    26a2:	4e30      	ldr	r6, [pc, #192]	; (2764 <_svfiprintf_r+0x1f0>)
    26a4:	2203      	movs	r2, #3
    26a6:	0030      	movs	r0, r6
    26a8:	7829      	ldrb	r1, [r5, #0]
    26aa:	f000 f9e5 	bl	2a78 <memchr>
    26ae:	2800      	cmp	r0, #0
    26b0:	d006      	beq.n	26c0 <_svfiprintf_r+0x14c>
    26b2:	2340      	movs	r3, #64	; 0x40
    26b4:	1b80      	subs	r0, r0, r6
    26b6:	4083      	lsls	r3, r0
    26b8:	6822      	ldr	r2, [r4, #0]
    26ba:	3501      	adds	r5, #1
    26bc:	4313      	orrs	r3, r2
    26be:	6023      	str	r3, [r4, #0]
    26c0:	7829      	ldrb	r1, [r5, #0]
    26c2:	2206      	movs	r2, #6
    26c4:	4828      	ldr	r0, [pc, #160]	; (2768 <_svfiprintf_r+0x1f4>)
    26c6:	1c6e      	adds	r6, r5, #1
    26c8:	7621      	strb	r1, [r4, #24]
    26ca:	f000 f9d5 	bl	2a78 <memchr>
    26ce:	2800      	cmp	r0, #0
    26d0:	d03c      	beq.n	274c <_svfiprintf_r+0x1d8>
    26d2:	4b26      	ldr	r3, [pc, #152]	; (276c <_svfiprintf_r+0x1f8>)
    26d4:	2b00      	cmp	r3, #0
    26d6:	d125      	bne.n	2724 <_svfiprintf_r+0x1b0>
    26d8:	2207      	movs	r2, #7
    26da:	9b07      	ldr	r3, [sp, #28]
    26dc:	3307      	adds	r3, #7
    26de:	4393      	bics	r3, r2
    26e0:	3308      	adds	r3, #8
    26e2:	9307      	str	r3, [sp, #28]
    26e4:	6963      	ldr	r3, [r4, #20]
    26e6:	9a04      	ldr	r2, [sp, #16]
    26e8:	189b      	adds	r3, r3, r2
    26ea:	6163      	str	r3, [r4, #20]
    26ec:	e765      	b.n	25ba <_svfiprintf_r+0x46>
    26ee:	4343      	muls	r3, r0
    26f0:	0035      	movs	r5, r6
    26f2:	2101      	movs	r1, #1
    26f4:	189b      	adds	r3, r3, r2
    26f6:	e7a6      	b.n	2646 <_svfiprintf_r+0xd2>
    26f8:	2301      	movs	r3, #1
    26fa:	425b      	negs	r3, r3
    26fc:	e7d0      	b.n	26a0 <_svfiprintf_r+0x12c>
    26fe:	2300      	movs	r3, #0
    2700:	200a      	movs	r0, #10
    2702:	001a      	movs	r2, r3
    2704:	3501      	adds	r5, #1
    2706:	6063      	str	r3, [r4, #4]
    2708:	7829      	ldrb	r1, [r5, #0]
    270a:	1c6e      	adds	r6, r5, #1
    270c:	3930      	subs	r1, #48	; 0x30
    270e:	2909      	cmp	r1, #9
    2710:	d903      	bls.n	271a <_svfiprintf_r+0x1a6>
    2712:	2b00      	cmp	r3, #0
    2714:	d0c5      	beq.n	26a2 <_svfiprintf_r+0x12e>
    2716:	9209      	str	r2, [sp, #36]	; 0x24
    2718:	e7c3      	b.n	26a2 <_svfiprintf_r+0x12e>
    271a:	4342      	muls	r2, r0
    271c:	0035      	movs	r5, r6
    271e:	2301      	movs	r3, #1
    2720:	1852      	adds	r2, r2, r1
    2722:	e7f1      	b.n	2708 <_svfiprintf_r+0x194>
    2724:	ab07      	add	r3, sp, #28
    2726:	9300      	str	r3, [sp, #0]
    2728:	003a      	movs	r2, r7
    272a:	0021      	movs	r1, r4
    272c:	4b10      	ldr	r3, [pc, #64]	; (2770 <_svfiprintf_r+0x1fc>)
    272e:	9803      	ldr	r0, [sp, #12]
    2730:	e000      	b.n	2734 <_svfiprintf_r+0x1c0>
    2732:	bf00      	nop
    2734:	9004      	str	r0, [sp, #16]
    2736:	9b04      	ldr	r3, [sp, #16]
    2738:	3301      	adds	r3, #1
    273a:	d1d3      	bne.n	26e4 <_svfiprintf_r+0x170>
    273c:	89bb      	ldrh	r3, [r7, #12]
    273e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2740:	065b      	lsls	r3, r3, #25
    2742:	d400      	bmi.n	2746 <_svfiprintf_r+0x1d2>
    2744:	e72d      	b.n	25a2 <_svfiprintf_r+0x2e>
    2746:	2001      	movs	r0, #1
    2748:	4240      	negs	r0, r0
    274a:	e72a      	b.n	25a2 <_svfiprintf_r+0x2e>
    274c:	ab07      	add	r3, sp, #28
    274e:	9300      	str	r3, [sp, #0]
    2750:	003a      	movs	r2, r7
    2752:	0021      	movs	r1, r4
    2754:	4b06      	ldr	r3, [pc, #24]	; (2770 <_svfiprintf_r+0x1fc>)
    2756:	9803      	ldr	r0, [sp, #12]
    2758:	f000 f87c 	bl	2854 <_printf_i>
    275c:	e7ea      	b.n	2734 <_svfiprintf_r+0x1c0>
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	00002e4c 	.word	0x00002e4c
    2764:	00002e52 	.word	0x00002e52
    2768:	00002e56 	.word	0x00002e56
    276c:	00000000 	.word	0x00000000
    2770:	000024b1 	.word	0x000024b1

00002774 <_printf_common>:
    2774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2776:	0015      	movs	r5, r2
    2778:	9301      	str	r3, [sp, #4]
    277a:	688a      	ldr	r2, [r1, #8]
    277c:	690b      	ldr	r3, [r1, #16]
    277e:	000c      	movs	r4, r1
    2780:	9000      	str	r0, [sp, #0]
    2782:	4293      	cmp	r3, r2
    2784:	da00      	bge.n	2788 <_printf_common+0x14>
    2786:	0013      	movs	r3, r2
    2788:	0022      	movs	r2, r4
    278a:	602b      	str	r3, [r5, #0]
    278c:	3243      	adds	r2, #67	; 0x43
    278e:	7812      	ldrb	r2, [r2, #0]
    2790:	2a00      	cmp	r2, #0
    2792:	d001      	beq.n	2798 <_printf_common+0x24>
    2794:	3301      	adds	r3, #1
    2796:	602b      	str	r3, [r5, #0]
    2798:	6823      	ldr	r3, [r4, #0]
    279a:	069b      	lsls	r3, r3, #26
    279c:	d502      	bpl.n	27a4 <_printf_common+0x30>
    279e:	682b      	ldr	r3, [r5, #0]
    27a0:	3302      	adds	r3, #2
    27a2:	602b      	str	r3, [r5, #0]
    27a4:	6822      	ldr	r2, [r4, #0]
    27a6:	2306      	movs	r3, #6
    27a8:	0017      	movs	r7, r2
    27aa:	401f      	ands	r7, r3
    27ac:	421a      	tst	r2, r3
    27ae:	d027      	beq.n	2800 <_printf_common+0x8c>
    27b0:	0023      	movs	r3, r4
    27b2:	3343      	adds	r3, #67	; 0x43
    27b4:	781b      	ldrb	r3, [r3, #0]
    27b6:	1e5a      	subs	r2, r3, #1
    27b8:	4193      	sbcs	r3, r2
    27ba:	6822      	ldr	r2, [r4, #0]
    27bc:	0692      	lsls	r2, r2, #26
    27be:	d430      	bmi.n	2822 <_printf_common+0xae>
    27c0:	0022      	movs	r2, r4
    27c2:	9901      	ldr	r1, [sp, #4]
    27c4:	9800      	ldr	r0, [sp, #0]
    27c6:	9e08      	ldr	r6, [sp, #32]
    27c8:	3243      	adds	r2, #67	; 0x43
    27ca:	47b0      	blx	r6
    27cc:	1c43      	adds	r3, r0, #1
    27ce:	d025      	beq.n	281c <_printf_common+0xa8>
    27d0:	2306      	movs	r3, #6
    27d2:	6820      	ldr	r0, [r4, #0]
    27d4:	682a      	ldr	r2, [r5, #0]
    27d6:	68e1      	ldr	r1, [r4, #12]
    27d8:	2500      	movs	r5, #0
    27da:	4003      	ands	r3, r0
    27dc:	2b04      	cmp	r3, #4
    27de:	d103      	bne.n	27e8 <_printf_common+0x74>
    27e0:	1a8d      	subs	r5, r1, r2
    27e2:	43eb      	mvns	r3, r5
    27e4:	17db      	asrs	r3, r3, #31
    27e6:	401d      	ands	r5, r3
    27e8:	68a3      	ldr	r3, [r4, #8]
    27ea:	6922      	ldr	r2, [r4, #16]
    27ec:	4293      	cmp	r3, r2
    27ee:	dd01      	ble.n	27f4 <_printf_common+0x80>
    27f0:	1a9b      	subs	r3, r3, r2
    27f2:	18ed      	adds	r5, r5, r3
    27f4:	2700      	movs	r7, #0
    27f6:	42bd      	cmp	r5, r7
    27f8:	d120      	bne.n	283c <_printf_common+0xc8>
    27fa:	2000      	movs	r0, #0
    27fc:	e010      	b.n	2820 <_printf_common+0xac>
    27fe:	3701      	adds	r7, #1
    2800:	68e3      	ldr	r3, [r4, #12]
    2802:	682a      	ldr	r2, [r5, #0]
    2804:	1a9b      	subs	r3, r3, r2
    2806:	42bb      	cmp	r3, r7
    2808:	ddd2      	ble.n	27b0 <_printf_common+0x3c>
    280a:	0022      	movs	r2, r4
    280c:	2301      	movs	r3, #1
    280e:	9901      	ldr	r1, [sp, #4]
    2810:	9800      	ldr	r0, [sp, #0]
    2812:	9e08      	ldr	r6, [sp, #32]
    2814:	3219      	adds	r2, #25
    2816:	47b0      	blx	r6
    2818:	1c43      	adds	r3, r0, #1
    281a:	d1f0      	bne.n	27fe <_printf_common+0x8a>
    281c:	2001      	movs	r0, #1
    281e:	4240      	negs	r0, r0
    2820:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2822:	2030      	movs	r0, #48	; 0x30
    2824:	18e1      	adds	r1, r4, r3
    2826:	3143      	adds	r1, #67	; 0x43
    2828:	7008      	strb	r0, [r1, #0]
    282a:	0021      	movs	r1, r4
    282c:	1c5a      	adds	r2, r3, #1
    282e:	3145      	adds	r1, #69	; 0x45
    2830:	7809      	ldrb	r1, [r1, #0]
    2832:	18a2      	adds	r2, r4, r2
    2834:	3243      	adds	r2, #67	; 0x43
    2836:	3302      	adds	r3, #2
    2838:	7011      	strb	r1, [r2, #0]
    283a:	e7c1      	b.n	27c0 <_printf_common+0x4c>
    283c:	0022      	movs	r2, r4
    283e:	2301      	movs	r3, #1
    2840:	9901      	ldr	r1, [sp, #4]
    2842:	9800      	ldr	r0, [sp, #0]
    2844:	9e08      	ldr	r6, [sp, #32]
    2846:	321a      	adds	r2, #26
    2848:	47b0      	blx	r6
    284a:	1c43      	adds	r3, r0, #1
    284c:	d0e6      	beq.n	281c <_printf_common+0xa8>
    284e:	3701      	adds	r7, #1
    2850:	e7d1      	b.n	27f6 <_printf_common+0x82>
    2852:	Address 0x00002852 is out of bounds.


00002854 <_printf_i>:
    2854:	b5f0      	push	{r4, r5, r6, r7, lr}
    2856:	b08b      	sub	sp, #44	; 0x2c
    2858:	9206      	str	r2, [sp, #24]
    285a:	000a      	movs	r2, r1
    285c:	3243      	adds	r2, #67	; 0x43
    285e:	9307      	str	r3, [sp, #28]
    2860:	9005      	str	r0, [sp, #20]
    2862:	9204      	str	r2, [sp, #16]
    2864:	7e0a      	ldrb	r2, [r1, #24]
    2866:	000c      	movs	r4, r1
    2868:	9b10      	ldr	r3, [sp, #64]	; 0x40
    286a:	2a78      	cmp	r2, #120	; 0x78
    286c:	d806      	bhi.n	287c <_printf_i+0x28>
    286e:	2a62      	cmp	r2, #98	; 0x62
    2870:	d808      	bhi.n	2884 <_printf_i+0x30>
    2872:	2a00      	cmp	r2, #0
    2874:	d100      	bne.n	2878 <_printf_i+0x24>
    2876:	e0c0      	b.n	29fa <_printf_i+0x1a6>
    2878:	2a58      	cmp	r2, #88	; 0x58
    287a:	d052      	beq.n	2922 <_printf_i+0xce>
    287c:	0026      	movs	r6, r4
    287e:	3642      	adds	r6, #66	; 0x42
    2880:	7032      	strb	r2, [r6, #0]
    2882:	e022      	b.n	28ca <_printf_i+0x76>
    2884:	0010      	movs	r0, r2
    2886:	3863      	subs	r0, #99	; 0x63
    2888:	2815      	cmp	r0, #21
    288a:	d8f7      	bhi.n	287c <_printf_i+0x28>
    288c:	f000 f91a 	bl	2ac4 <__gnu_thumb1_case_shi>
    2890:	001f0016 	.word	0x001f0016
    2894:	fff6fff6 	.word	0xfff6fff6
    2898:	fff6fff6 	.word	0xfff6fff6
    289c:	fff6001f 	.word	0xfff6001f
    28a0:	fff6fff6 	.word	0xfff6fff6
    28a4:	00a8fff6 	.word	0x00a8fff6
    28a8:	009a0036 	.word	0x009a0036
    28ac:	fff6fff6 	.word	0xfff6fff6
    28b0:	fff600b9 	.word	0xfff600b9
    28b4:	fff60036 	.word	0xfff60036
    28b8:	009efff6 	.word	0x009efff6
    28bc:	0026      	movs	r6, r4
    28be:	681a      	ldr	r2, [r3, #0]
    28c0:	3642      	adds	r6, #66	; 0x42
    28c2:	1d11      	adds	r1, r2, #4
    28c4:	6019      	str	r1, [r3, #0]
    28c6:	6813      	ldr	r3, [r2, #0]
    28c8:	7033      	strb	r3, [r6, #0]
    28ca:	2301      	movs	r3, #1
    28cc:	e0a7      	b.n	2a1e <_printf_i+0x1ca>
    28ce:	6808      	ldr	r0, [r1, #0]
    28d0:	6819      	ldr	r1, [r3, #0]
    28d2:	1d0a      	adds	r2, r1, #4
    28d4:	0605      	lsls	r5, r0, #24
    28d6:	d50b      	bpl.n	28f0 <_printf_i+0x9c>
    28d8:	680d      	ldr	r5, [r1, #0]
    28da:	601a      	str	r2, [r3, #0]
    28dc:	2d00      	cmp	r5, #0
    28de:	da03      	bge.n	28e8 <_printf_i+0x94>
    28e0:	232d      	movs	r3, #45	; 0x2d
    28e2:	9a04      	ldr	r2, [sp, #16]
    28e4:	426d      	negs	r5, r5
    28e6:	7013      	strb	r3, [r2, #0]
    28e8:	4b61      	ldr	r3, [pc, #388]	; (2a70 <_printf_i+0x21c>)
    28ea:	270a      	movs	r7, #10
    28ec:	9303      	str	r3, [sp, #12]
    28ee:	e032      	b.n	2956 <_printf_i+0x102>
    28f0:	680d      	ldr	r5, [r1, #0]
    28f2:	601a      	str	r2, [r3, #0]
    28f4:	0641      	lsls	r1, r0, #25
    28f6:	d5f1      	bpl.n	28dc <_printf_i+0x88>
    28f8:	b22d      	sxth	r5, r5
    28fa:	e7ef      	b.n	28dc <_printf_i+0x88>
    28fc:	680d      	ldr	r5, [r1, #0]
    28fe:	6819      	ldr	r1, [r3, #0]
    2900:	1d08      	adds	r0, r1, #4
    2902:	6018      	str	r0, [r3, #0]
    2904:	062e      	lsls	r6, r5, #24
    2906:	d501      	bpl.n	290c <_printf_i+0xb8>
    2908:	680d      	ldr	r5, [r1, #0]
    290a:	e003      	b.n	2914 <_printf_i+0xc0>
    290c:	066d      	lsls	r5, r5, #25
    290e:	d5fb      	bpl.n	2908 <_printf_i+0xb4>
    2910:	680d      	ldr	r5, [r1, #0]
    2912:	b2ad      	uxth	r5, r5
    2914:	4b56      	ldr	r3, [pc, #344]	; (2a70 <_printf_i+0x21c>)
    2916:	270a      	movs	r7, #10
    2918:	9303      	str	r3, [sp, #12]
    291a:	2a6f      	cmp	r2, #111	; 0x6f
    291c:	d117      	bne.n	294e <_printf_i+0xfa>
    291e:	2708      	movs	r7, #8
    2920:	e015      	b.n	294e <_printf_i+0xfa>
    2922:	3145      	adds	r1, #69	; 0x45
    2924:	700a      	strb	r2, [r1, #0]
    2926:	4a52      	ldr	r2, [pc, #328]	; (2a70 <_printf_i+0x21c>)
    2928:	9203      	str	r2, [sp, #12]
    292a:	681a      	ldr	r2, [r3, #0]
    292c:	6821      	ldr	r1, [r4, #0]
    292e:	ca20      	ldmia	r2!, {r5}
    2930:	601a      	str	r2, [r3, #0]
    2932:	0608      	lsls	r0, r1, #24
    2934:	d550      	bpl.n	29d8 <_printf_i+0x184>
    2936:	07cb      	lsls	r3, r1, #31
    2938:	d502      	bpl.n	2940 <_printf_i+0xec>
    293a:	2320      	movs	r3, #32
    293c:	4319      	orrs	r1, r3
    293e:	6021      	str	r1, [r4, #0]
    2940:	2710      	movs	r7, #16
    2942:	2d00      	cmp	r5, #0
    2944:	d103      	bne.n	294e <_printf_i+0xfa>
    2946:	2320      	movs	r3, #32
    2948:	6822      	ldr	r2, [r4, #0]
    294a:	439a      	bics	r2, r3
    294c:	6022      	str	r2, [r4, #0]
    294e:	0023      	movs	r3, r4
    2950:	2200      	movs	r2, #0
    2952:	3343      	adds	r3, #67	; 0x43
    2954:	701a      	strb	r2, [r3, #0]
    2956:	6863      	ldr	r3, [r4, #4]
    2958:	60a3      	str	r3, [r4, #8]
    295a:	2b00      	cmp	r3, #0
    295c:	db03      	blt.n	2966 <_printf_i+0x112>
    295e:	2204      	movs	r2, #4
    2960:	6821      	ldr	r1, [r4, #0]
    2962:	4391      	bics	r1, r2
    2964:	6021      	str	r1, [r4, #0]
    2966:	2d00      	cmp	r5, #0
    2968:	d102      	bne.n	2970 <_printf_i+0x11c>
    296a:	9e04      	ldr	r6, [sp, #16]
    296c:	2b00      	cmp	r3, #0
    296e:	d00c      	beq.n	298a <_printf_i+0x136>
    2970:	9e04      	ldr	r6, [sp, #16]
    2972:	0028      	movs	r0, r5
    2974:	0039      	movs	r1, r7
    2976:	f7ff fab7 	bl	1ee8 <__aeabi_uidivmod>
    297a:	9b03      	ldr	r3, [sp, #12]
    297c:	3e01      	subs	r6, #1
    297e:	5c5b      	ldrb	r3, [r3, r1]
    2980:	7033      	strb	r3, [r6, #0]
    2982:	002b      	movs	r3, r5
    2984:	0005      	movs	r5, r0
    2986:	429f      	cmp	r7, r3
    2988:	d9f3      	bls.n	2972 <_printf_i+0x11e>
    298a:	2f08      	cmp	r7, #8
    298c:	d109      	bne.n	29a2 <_printf_i+0x14e>
    298e:	6823      	ldr	r3, [r4, #0]
    2990:	07db      	lsls	r3, r3, #31
    2992:	d506      	bpl.n	29a2 <_printf_i+0x14e>
    2994:	6863      	ldr	r3, [r4, #4]
    2996:	6922      	ldr	r2, [r4, #16]
    2998:	4293      	cmp	r3, r2
    299a:	dc02      	bgt.n	29a2 <_printf_i+0x14e>
    299c:	2330      	movs	r3, #48	; 0x30
    299e:	3e01      	subs	r6, #1
    29a0:	7033      	strb	r3, [r6, #0]
    29a2:	9b04      	ldr	r3, [sp, #16]
    29a4:	1b9b      	subs	r3, r3, r6
    29a6:	6123      	str	r3, [r4, #16]
    29a8:	9b07      	ldr	r3, [sp, #28]
    29aa:	0021      	movs	r1, r4
    29ac:	9300      	str	r3, [sp, #0]
    29ae:	9805      	ldr	r0, [sp, #20]
    29b0:	9b06      	ldr	r3, [sp, #24]
    29b2:	aa09      	add	r2, sp, #36	; 0x24
    29b4:	f7ff fede 	bl	2774 <_printf_common>
    29b8:	1c43      	adds	r3, r0, #1
    29ba:	d135      	bne.n	2a28 <_printf_i+0x1d4>
    29bc:	2001      	movs	r0, #1
    29be:	4240      	negs	r0, r0
    29c0:	b00b      	add	sp, #44	; 0x2c
    29c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29c4:	2220      	movs	r2, #32
    29c6:	6809      	ldr	r1, [r1, #0]
    29c8:	430a      	orrs	r2, r1
    29ca:	6022      	str	r2, [r4, #0]
    29cc:	0022      	movs	r2, r4
    29ce:	2178      	movs	r1, #120	; 0x78
    29d0:	3245      	adds	r2, #69	; 0x45
    29d2:	7011      	strb	r1, [r2, #0]
    29d4:	4a27      	ldr	r2, [pc, #156]	; (2a74 <_printf_i+0x220>)
    29d6:	e7a7      	b.n	2928 <_printf_i+0xd4>
    29d8:	0648      	lsls	r0, r1, #25
    29da:	d5ac      	bpl.n	2936 <_printf_i+0xe2>
    29dc:	b2ad      	uxth	r5, r5
    29de:	e7aa      	b.n	2936 <_printf_i+0xe2>
    29e0:	681a      	ldr	r2, [r3, #0]
    29e2:	680d      	ldr	r5, [r1, #0]
    29e4:	1d10      	adds	r0, r2, #4
    29e6:	6949      	ldr	r1, [r1, #20]
    29e8:	6018      	str	r0, [r3, #0]
    29ea:	6813      	ldr	r3, [r2, #0]
    29ec:	062e      	lsls	r6, r5, #24
    29ee:	d501      	bpl.n	29f4 <_printf_i+0x1a0>
    29f0:	6019      	str	r1, [r3, #0]
    29f2:	e002      	b.n	29fa <_printf_i+0x1a6>
    29f4:	066d      	lsls	r5, r5, #25
    29f6:	d5fb      	bpl.n	29f0 <_printf_i+0x19c>
    29f8:	8019      	strh	r1, [r3, #0]
    29fa:	2300      	movs	r3, #0
    29fc:	9e04      	ldr	r6, [sp, #16]
    29fe:	6123      	str	r3, [r4, #16]
    2a00:	e7d2      	b.n	29a8 <_printf_i+0x154>
    2a02:	681a      	ldr	r2, [r3, #0]
    2a04:	1d11      	adds	r1, r2, #4
    2a06:	6019      	str	r1, [r3, #0]
    2a08:	6816      	ldr	r6, [r2, #0]
    2a0a:	2100      	movs	r1, #0
    2a0c:	0030      	movs	r0, r6
    2a0e:	6862      	ldr	r2, [r4, #4]
    2a10:	f000 f832 	bl	2a78 <memchr>
    2a14:	2800      	cmp	r0, #0
    2a16:	d001      	beq.n	2a1c <_printf_i+0x1c8>
    2a18:	1b80      	subs	r0, r0, r6
    2a1a:	6060      	str	r0, [r4, #4]
    2a1c:	6863      	ldr	r3, [r4, #4]
    2a1e:	6123      	str	r3, [r4, #16]
    2a20:	2300      	movs	r3, #0
    2a22:	9a04      	ldr	r2, [sp, #16]
    2a24:	7013      	strb	r3, [r2, #0]
    2a26:	e7bf      	b.n	29a8 <_printf_i+0x154>
    2a28:	6923      	ldr	r3, [r4, #16]
    2a2a:	0032      	movs	r2, r6
    2a2c:	9906      	ldr	r1, [sp, #24]
    2a2e:	9805      	ldr	r0, [sp, #20]
    2a30:	9d07      	ldr	r5, [sp, #28]
    2a32:	47a8      	blx	r5
    2a34:	1c43      	adds	r3, r0, #1
    2a36:	d0c1      	beq.n	29bc <_printf_i+0x168>
    2a38:	6823      	ldr	r3, [r4, #0]
    2a3a:	079b      	lsls	r3, r3, #30
    2a3c:	d415      	bmi.n	2a6a <_printf_i+0x216>
    2a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a40:	68e0      	ldr	r0, [r4, #12]
    2a42:	4298      	cmp	r0, r3
    2a44:	dabc      	bge.n	29c0 <_printf_i+0x16c>
    2a46:	0018      	movs	r0, r3
    2a48:	e7ba      	b.n	29c0 <_printf_i+0x16c>
    2a4a:	0022      	movs	r2, r4
    2a4c:	2301      	movs	r3, #1
    2a4e:	9906      	ldr	r1, [sp, #24]
    2a50:	9805      	ldr	r0, [sp, #20]
    2a52:	9e07      	ldr	r6, [sp, #28]
    2a54:	3219      	adds	r2, #25
    2a56:	47b0      	blx	r6
    2a58:	1c43      	adds	r3, r0, #1
    2a5a:	d0af      	beq.n	29bc <_printf_i+0x168>
    2a5c:	3501      	adds	r5, #1
    2a5e:	68e3      	ldr	r3, [r4, #12]
    2a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2a62:	1a9b      	subs	r3, r3, r2
    2a64:	42ab      	cmp	r3, r5
    2a66:	dcf0      	bgt.n	2a4a <_printf_i+0x1f6>
    2a68:	e7e9      	b.n	2a3e <_printf_i+0x1ea>
    2a6a:	2500      	movs	r5, #0
    2a6c:	e7f7      	b.n	2a5e <_printf_i+0x20a>
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	00002e5d 	.word	0x00002e5d
    2a74:	00002e6e 	.word	0x00002e6e

00002a78 <memchr>:
    2a78:	b2c9      	uxtb	r1, r1
    2a7a:	1882      	adds	r2, r0, r2
    2a7c:	4290      	cmp	r0, r2
    2a7e:	d101      	bne.n	2a84 <memchr+0xc>
    2a80:	2000      	movs	r0, #0
    2a82:	4770      	bx	lr
    2a84:	7803      	ldrb	r3, [r0, #0]
    2a86:	428b      	cmp	r3, r1
    2a88:	d0fb      	beq.n	2a82 <memchr+0xa>
    2a8a:	3001      	adds	r0, #1
    2a8c:	e7f6      	b.n	2a7c <memchr+0x4>

00002a8e <memmove>:
    2a8e:	b510      	push	{r4, lr}
    2a90:	4288      	cmp	r0, r1
    2a92:	d902      	bls.n	2a9a <memmove+0xc>
    2a94:	188b      	adds	r3, r1, r2
    2a96:	4298      	cmp	r0, r3
    2a98:	d303      	bcc.n	2aa2 <memmove+0x14>
    2a9a:	2300      	movs	r3, #0
    2a9c:	e007      	b.n	2aae <memmove+0x20>
    2a9e:	5c8b      	ldrb	r3, [r1, r2]
    2aa0:	5483      	strb	r3, [r0, r2]
    2aa2:	3a01      	subs	r2, #1
    2aa4:	d2fb      	bcs.n	2a9e <memmove+0x10>
    2aa6:	bd10      	pop	{r4, pc}
    2aa8:	5ccc      	ldrb	r4, [r1, r3]
    2aaa:	54c4      	strb	r4, [r0, r3]
    2aac:	3301      	adds	r3, #1
    2aae:	429a      	cmp	r2, r3
    2ab0:	d1fa      	bne.n	2aa8 <memmove+0x1a>
    2ab2:	e7f8      	b.n	2aa6 <memmove+0x18>

00002ab4 <_malloc_usable_size_r>:
    2ab4:	1f0b      	subs	r3, r1, #4
    2ab6:	681b      	ldr	r3, [r3, #0]
    2ab8:	1f18      	subs	r0, r3, #4
    2aba:	2b00      	cmp	r3, #0
    2abc:	da01      	bge.n	2ac2 <_malloc_usable_size_r+0xe>
    2abe:	580b      	ldr	r3, [r1, r0]
    2ac0:	18c0      	adds	r0, r0, r3
    2ac2:	4770      	bx	lr

00002ac4 <__gnu_thumb1_case_shi>:
    2ac4:	b403      	push	{r0, r1}
    2ac6:	4671      	mov	r1, lr
    2ac8:	0849      	lsrs	r1, r1, #1
    2aca:	0040      	lsls	r0, r0, #1
    2acc:	0049      	lsls	r1, r1, #1
    2ace:	5e09      	ldrsh	r1, [r1, r0]
    2ad0:	0049      	lsls	r1, r1, #1
    2ad2:	448e      	add	lr, r1
    2ad4:	bc03      	pop	{r0, r1}
    2ad6:	4770      	bx	lr
    2ad8:	00002b2c 	.word	0x00002b2c
    2adc:	000005d9 	.word	0x000005d9
	...
    2ae8:	00000018 	.word	0x00000018
    2aec:	00000000 	.word	0x00000000
    2af0:	00000019 	.word	0x00000019
    2af4:	00000301 	.word	0x00000301
    2af8:	00000000 	.word	0x00000000
    2afc:	00000005 	.word	0x00000005
    2b00:	00000000 	.word	0x00000000
    2b04:	00000008 	.word	0x00000008
    2b08:	00000000 	.word	0x00000000
    2b0c:	00000009 	.word	0x00000009
    2b10:	01010101 	.word	0x01010101
    2b14:	00000001 	.word	0x00000001
    2b18:	00002c10 	.word	0x00002c10
    2b1c:	00000f91 	.word	0x00000f91
    2b20:	00000000 	.word	0x00000000
    2b24:	4c554e00 	.word	0x4c554e00
    2b28:	ffff004c 	.word	0xffff004c
    2b2c:	63657865 	.word	0x63657865
    2b30:	ffffff00 	.word	0xffffff00
    2b34:	ff005441 	.word	0xff005441
    2b38:	30455441 	.word	0x30455441
    2b3c:	00000000 	.word	0x00000000
    2b40:	4552432b 	.word	0x4552432b
    2b44:	30203a47 	.word	0x30203a47
    2b48:	0000312c 	.word	0x0000312c
    2b4c:	432b5441 	.word	0x432b5441
    2b50:	3f474552 	.word	0x3f474552
    2b54:	00000000 	.word	0x00000000
    2b58:	432b5441 	.word	0x432b5441
    2b5c:	3d46474d 	.word	0x3d46474d
    2b60:	00000031 	.word	0x00000031
    2b64:	432b5441 	.word	0x432b5441
    2b68:	4144474d 	.word	0x4144474d
    2b6c:	4544223d 	.word	0x4544223d
    2b70:	4c41204c 	.word	0x4c41204c
    2b74:	ff00224c 	.word	0xff00224c
    2b78:	432b5441 	.word	0x432b5441
    2b7c:	3d52474d 	.word	0x3d52474d
    2b80:	00006425 	.word	0x00006425
    2b84:	474d432b 	.word	0x474d432b
    2b88:	00000052 	.word	0x00000052
    2b8c:	0a0d0a0d 	.word	0x0a0d0a0d
    2b90:	00004b4f 	.word	0x00004b4f
    2b94:	ff00222c 	.word	0xff00222c
    2b98:	474e4952 	.word	0x474e4952
    2b9c:	00000000 	.word	0x00000000
    2ba0:	00485441 	.word	0x00485441
    2ba4:	544d432b 	.word	0x544d432b
    2ba8:	ffff0049 	.word	0xffff0049
    2bac:	432b5441 	.word	0x432b5441
    2bb0:	3d53474d 	.word	0x3d53474d
    2bb4:	22732522 	.word	0x22732522
    2bb8:	00000000 	.word	0x00000000
    2bbc:	474d432b 	.word	0x474d432b
    2bc0:	00000053 	.word	0x00000053
    2bc4:	ffff001a 	.word	0xffff001a
    2bc8:	6d6d6f43 	.word	0x6d6d6f43
    2bcc:	20646e61 	.word	0x20646e61
    2bd0:	656d6974 	.word	0x656d6974
    2bd4:	756f2064 	.word	0x756f2064
    2bd8:	00000074 	.word	0x00000074
    2bdc:	74726175 	.word	0x74726175
    2be0:	65723e2d 	.word	0x65723e2d
    2be4:	29286461 	.word	0x29286461
    2be8:	74657220 	.word	0x74657220
    2bec:	656e7275 	.word	0x656e7275
    2bf0:	756e2064 	.word	0x756e2064
    2bf4:	ff006c6c 	.word	0xff006c6c

00002bf8 <_ZL10child_pipe>:
    2bf8:	0d0c0b0a ffff0f0e                       ........

00002c00 <_ZL17child_pipe_enable>:
    2c00:	03020100 ffff0504                       ........

00002c08 <_ZL18child_payload_size>:
    2c08:	14131211 ffff1615 6f666e69 ffffff00     ........info....
    2c18:	65646f4e 49200a3a 25203a44 4e200a64     Node:. ID: %d. N
    2c28:	3a656d61 0a732520 70795420 25203a65     ame: %s. Type: %
    2c38:	4c200a64 20747361 6e656573 6425203a     d. Last seen: %d
    2c48:	63657320 6f676120 0000000a 696f5320      sec ago.... Soi
    2c58:	6f6d206c 75747369 73206572 6f736e65     l moisture senso
    2c68:	200a3a72 696f4d20 72757473 25203a65     r:.  Moisture: %
    2c78:	00000a64 6d655420 61726570 65727574     d... Temperature
    2c88:	68202b20 64696d75 20797469 736e6573      + humidity sens
    2c98:	0a3a726f 65542020 7265706d 72757461     or:.  Temperatur
    2ca8:	25203a65 20200a64 696d7548 79746964     e: %d.  Humidity
    2cb8:	6425203a 0000000a 6d655420 61726570     : %d.... Tempera
    2cc8:	65727574 6e657320 3a726f73 5420200a     ture sensor:.  T
    2cd8:	65706d65 75746172 203a6572 000a6425     emperature: %d..

00002ce8 <_ctype_>:
    2ce8:	20202000 20202020 28282020 20282828     .         ((((( 
    2cf8:	20202020 20202020 20202020 20202020                     
    2d08:	10108820 10101010 10101010 10101010      ...............
    2d18:	04040410 04040404 10040404 10101010     ................
    2d28:	41411010 41414141 01010101 01010101     ..AAAAAA........
    2d38:	01010101 01010101 01010101 10101010     ................
    2d48:	42421010 42424242 02020202 02020202     ..BBBBBB........
    2d58:	02020202 02020202 02020202 10101010     ................
    2d68:	00000020 00000000 00000000 00000000      ...............
	...
    2de8:	ffffff00                                ....

00002dec <__sf_fake_stderr>:
	...

00002e0c <__sf_fake_stdin>:
	...

00002e2c <__sf_fake_stdout>:
	...
    2e4c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2e5c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2e6c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2e7c:	ff006665                                ef..

00002e80 <_init>:
    2e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e86:	bc08      	pop	{r3}
    2e88:	469e      	mov	lr, r3
    2e8a:	4770      	bx	lr

00002e8c <__init_array_start>:
    2e8c:	000000b5 	.word	0x000000b5
    2e90:	00001199 	.word	0x00001199
    2e94:	00001445 	.word	0x00001445
    2e98:	00001b49 	.word	0x00001b49

00002e9c <_fini>:
    2e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e9e:	46c0      	nop			; (mov r8, r8)
    2ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2ea2:	bc08      	pop	{r3}
    2ea4:	469e      	mov	lr, r3
    2ea6:	4770      	bx	lr

00002ea8 <__delay_usec_veneer>:
    2ea8:	b401      	push	{r0}
    2eaa:	4802      	ldr	r0, [pc, #8]	; (2eb4 <__delay_usec_veneer+0xc>)
    2eac:	4684      	mov	ip, r0
    2eae:	bc01      	pop	{r0}
    2eb0:	4760      	bx	ip
    2eb2:	bf00      	nop
    2eb4:	20000001 	.word	0x20000001

00002eb8 <__fini_array_start>:
    2eb8:	0000008d 	.word	0x0000008d

Disassembly of section .data:

20000000 <delay_usec>:
	__asm (
20000000:	210f      	movs	r1, #15

20000002 <mydelay1>:
20000002:	3901      	subs	r1, #1
20000004:	d1fd      	bne.n	20000002 <mydelay1>
20000006:	3801      	subs	r0, #1
20000008:	d1fa      	bne.n	20000000 <delay_usec>
}
2000000a:	4770      	bx	lr

2000000c <__dso_handle>:
2000000c:	0000 0000                                   ....

20000010 <_ZN3Str11EmptyBufferE>:
20000010:	2b24 0000                                   $+..

20000014 <_impure_ptr>:
20000014:	0018 2000                                   ... 

20000018 <impure_data>:
20000018:	0000 0000 2e0c 0000 2e2c 0000 2dec 0000     ........,....-..
	...
