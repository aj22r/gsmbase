
build/gsmbase.elf:     file format elf32-littlearm
build/gsmbase.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000242d

Program Header:
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0000384c memsz 0x0000384c flags r-x
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x0000384c align 2**16
         filesz 0x00000078 memsz 0x00000524 flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000384c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  20000000  0000384c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004ac  20000078  000038c4  00020078  2**3
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  4 .comment      00000079  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  5 .debug_info   0003acbd  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004106  00000000  00000000  0005add6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00006de7  00000000  00000000  0005eedc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000005e8  00000000  00000000  00065cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000b28  00000000  00000000  000662ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000067ba  00000000  00000000  00066dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000e272  00000000  00000000  0006d58d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001acc  00000000  00000000  0007b800  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000078 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_samd10.c
00000000 l    df *ABS*	00000000 crtstuff.c
0000008c l     F .text	00000000 __do_global_dtors_aux
20000078 l       .bss	00000001 completed.8911
00003848 l     O .text	00000000 __do_global_dtors_aux_fini_array_entry
000000b4 l     F .text	00000000 frame_dummy
2000007c l       .bss	00000018 object.8916
0000381c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 GSM.cpp
000000d4 l     F .text	0000001c _ZL8find_numPKc
000004e4 l     F .text	00000054 _ZL9func_execP3GSMPKcS2_
00000650 l     F .text	00000094 _ZL11func_setnumP3GSMPKcS2_
00000710 l     F .text	0000001c _ZL11func_delnumP3GSMPKcS2_
000007f4 l     F .text	000000e0 _ZL12func_listnumP3GSMPKcS2_
00000000 l    df *ABS*	00000000 RF24.cpp
0000354c l     O .text	00000006 _ZL10child_pipe
00003554 l     O .text	00000006 _ZL17child_pipe_enable
0000355c l     O .text	00000006 _ZL18child_payload_size
00000000 l    df *ABS*	00000000 main.cpp
00001234 l     F .text	00000024 _ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_
00001274 l     F .text	00000014 _ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_
00001288 l     F .text	00000078 _Z41__static_initialization_and_destruction_0ii
00001488 l     F .text	00000128 _ZL8cmd_infoP3GSMPKcS2_
00001708 l     F .text	00000010 _GLOBAL__sub_I__ZN3Str11EmptyBufferE
20000094 l     O .bss	00000014 _ZL3gsm
200000a8 l     O .bss	00000038 _ZL3net
00000000 l    df *ABS*	00000000 spi.cpp
00001960 l     F .text	00000034 _Z41__static_initialization_and_destruction_0ii
000019b4 l     F .text	00000010 _GLOBAL__sub_I_g_spi0
00000000 l    df *ABS*	00000000 systick.c
000019c4 l     F .text	00000144 initializeSystemFor48MHz
20000000 l       .data	00000000 mydelay
20000002 l       .data	00000000 mydelay1
200000e8 l     O .bss	00000008 _cycles
00000000 l    df *ABS*	00000000 uart.cpp
00001b9c l     F .text	00000058 _Z41__static_initialization_and_destruction_0ii
000020b8 l     F .text	00000010 _GLOBAL__sub_I_g_uart0
00000000 l    df *ABS*	00000000 sensornet.cpp
00000000 l    df *ABS*	00000000 syscalls.c
20000508 l     O .bss	00000004 heap.4639
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _udivsi3.o
00002504 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00002af0 l     F .text	00000104 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 _thumb1_case_shi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00003838 l     F .text	00000010 __delay_usec_veneer
00000d0e g     F .text	0000000a _ZN4RF2410get_statusEv
000032f0 g     F .text	00000010 _malloc_usable_size_r
0000104e g     F .text	0000002e _ZN4RF2410setPALevelEh
000029ac g     F .text	00000010 strcpy
00000bb4 g     F .text	00000034 _ZN4RF2414write_registerEhh
00000fac g     F .text	00000064 _ZN4RF2414startListeningEv
000020c8 g     F .text	00000020 _ZN9SensornetC1ERK4RF24
00000358 g     F .text	00000098 _ZN3GSM7PowerOnEv
00002428  w    F .text	00000002 DMAC_Handler
20000514 g     O .bss	00000001 __lock___atexit_recursive_mutex
00000dfc g     F .text	00000006 _ZN4RF249errNotifyEv
00002428  w    F .text	00000002 HardFault_Handler
00002428  w    F .text	00000002 TC2_Handler
00000eba g     F .text	0000000a _ZN4RF249availableEv
00002c90 g     F .text	00000010 __malloc_unlock
00000e86 g     F .text	0000000a _ZN4RF245writeEPKvh
00002428  w    F .text	00000002 AC_Handler
00001b80 g     F .text	0000001c SysTick_Handler
20000515 g     O .bss	00000001 __lock___arc4random_mutex
000032ca g     F .text	00000026 memmove
00002428  w    F .text	00000002 PendSV_Handler
000028e0 g     F .text	00000068 snprintf
00002428  w    F .text	00000002 NMI_Handler
00002a90 g     F .text	0000005e __strtok_r
000015b0  w    F .text	00000042 _ZN6VectorI7SMSFuncE9push_backERKS0_
000013f4 g     F .text	00000060 _ZN3Str13appendfv_fromEiPKcSt9__va_list
00000000 g       .text	00000000 _sfixed
000020a8 g     F .text	00000010 SERCOM1_Handler
00002428  w    F .text	00000002 ADC_Handler
20000520 g     O .bss	00000004 errno
0000384c g       .data	00000000 _etext
00000d18 g     F .text	0000003e _ZN4RF24C2E6gpio_tS0_R5spi_t
20001000 g       .text	00000000 __top_ram
00002718 g     F .text	00000012 memcpy
00000250 g     F .text	00000012 _ZN3GSMD1Ev
00002db0 g     F .text	00000200 _svfprintf_r
00000be8 g     F .text	00000078 _ZN4RF2413write_payloadEPKvhh
00002428  w    F .text	00000002 SERCOM2_Handler
0000384c g       .text	00000000 __fini_array_end
00002428  w    F .text	00000002 TCC0_Handler
00000d04 g     F .text	0000000a _ZN4RF248flush_txEv
000026f0 g     F .text	00000014 malloc
00000d68 g     F .text	0000000c _ZN4RF2414setPayloadSizeEh
00002504 g     F .text	0000010a .hidden __udivsi3
00001ee4 g     F .text	0000008c _ZN6uart_t4peekEi
00002428  w    F .text	00000002 RTC_Handler
00002c64 g     F .text	00000018 vsnprintf
00000944 g     F .text	000000b8 _ZN3GSM7ReadSMSEi
2000000c g     O .data	00000000 .hidden __dso_handle
00001e78 g     F .text	0000002c _ZN6uart_t7rxemptyEv
00000ad8 g     F .text	0000005c _ZN4RF242ceEb
00001470 g     F .text	00000018 _ZN3Str7appendfEPKcz
000028bc g     F .text	00000024 _sbrk_r
200000f0 g     O .bss	0000020c g_uart0
00002428  w    F .text	00000002 EIC_Handler
00001454 g     F .text	0000001c _ZN3Str8appendfvEPKcSt9__va_list
00001380 g     F .text	00000074 _ZN3Str15reserve_discardEi
00002428  w    F .text	00000002 WDT_Handler
200000e0 g     O .bss	00000004 g_spi0
20000516 g     O .bss	00000001 __lock___env_recursive_mutex
20000517 g     O .bss	00000001 __lock___sinit_recursive_mutex
0000261c g     F .text	00000050 .hidden __aeabi_lmul
00002ca0 g     F .text	0000004c _realloc_r
000026a8 g     F .text	00000048 __libc_init_array
000024d0 g     F .text	00000024 _sbrk
00002428  w    F .text	00000002 TC1_Handler
00003810 g     F .text	00000000 _init
00000ed8 g     F .text	0000002e _ZN4RF2415openWritingPipeEy
00002bf4 g     F .text	00000018 strtol
00000dd0 g     F .text	0000002c _ZN4RF247powerUpEv
00004000 g       .text	00000000 __top_flash
20000524 g       .bss	00000000 _ebss
0000242c g     F .text	000000a4 Reset_Handler
00002c64 g     F .text	00000018 vsniprintf
00002678 g     F .text	00000014 calloc
20000518 g     O .bss	00000001 __lock___malloc_recursive_mutex
20001000 g       *ABS*	00000000 _stack_top
00002144 g     F .text	0000008c _ZN9Sensornet10UpdateNodeERK12SensorPacket
00002428 g     F .text	00000002 Dummy_Handler
00002308 g     F .text	0000002c _ZN9Sensornet4PollEv
0000377c g     O .text	00000020 __sf_fake_stderr
000028e0 g     F .text	00000068 sniprintf
0000072c g     F .text	000000c8 _ZN3GSM9GetAllNumEP6VectorIPcE
000005e0 g     F .text	00000070 _ZN3GSM11SetNumLevelEPKcc
00002c7e g     F .text	00000002 __retarget_lock_release_recursive
00000cd8 g     F .text	00000022 _ZN4RF248spiTransEh
00002cec g     F .text	000000c4 __ssputs_r
00000e02 g     F .text	00000028 _ZN4RF2414startFastWriteEPKvhbb
00000e2a g     F .text	0000005c _ZN4RF245writeEPKvhb
00002334 g     F .text	000000f4 _ZN9Sensornet10CMDSetNameEP3GSMPKcS3_
00000ec4 g     F .text	00000014 _ZN4RF244readEPvh
000009fc g     F .text	000000a8 _ZN3GSM4PollEv
000032b4 g     F .text	00000016 memchr
00002758 g     F .text	00000094 _free_r
000021d0 g     F .text	00000138 _ZN9Sensornet13ProcessPacketER12SensorPacket
00003300 g     F .text	00000014 .hidden __gnu_thumb1_case_shi
0000195c g     F .text	00000004 _ZN5spi_tC2EP6Sercom
20000078 g       .bss	00000000 _bss
00001e48 g     F .text	00000030 _ZN6uart_t5printEPKci
00002a14 g     F .text	0000002c strstr
200002fc g     O .bss	0000020c g_uart1
00002428  w    F .text	00000002 PM_Handler
00001b44 g     F .text	00000024 systick_cycles
00001300 g     F .text	00000080 _ZN3Str7reserveEi
20000010 g     O .data	00000004 _ZN3Str11EmptyBufferE
000029ca g     F .text	00000022 strncmp
00001258  w    F .text	0000001c _ZN9SensornetD2Ev
00001b08 g     F .text	0000003c systick_init
000029ec g     F .text	00000028 strncpy
000003f0 g     F .text	00000084 _ZN3GSM4InitEv
00002948 g     F .text	00000034 strcasecmp
00001718 g     F .text	00000244 _ZN5spi_t4InitE12spi_pincfg_tt
00000250 g     F .text	00000012 _ZN3GSMD2Ev
00001994 g     F .text	00000020 _ZN5spi_t8TransferEh
000028a8 g     F .text	00000014 realloc
00001ea4 g     F .text	00000040 _ZN6uart_t4getcEv
00000e90 g     F .text	0000002a _ZN4RF249availableEPh
0000268c g     F .text	0000001c __cxa_atexit
00002a40 g     F .text	00000050 strtok
00002618  w    F .text	00000002 .hidden __aeabi_ldiv0
00000cfa g     F .text	0000000a _ZN4RF248flush_rxEv
00002c0c g     F .text	00000056 _vsnprintf_r
00000264 g     F .text	000000b0 _ZN3GSM7CommandEPKcS1_j
00002c80 g     F .text	00000010 __malloc_lock
00003848 g       .text	00000000 __fini_array_start
0000273a g     F .text	0000001c _calloc_r
0000379c g     O .text	00000020 __sf_fake_stdin
00000aa4 g     F .text	00000034 _ZN4RF243csnEb
00002c7c g     F .text	00000002 __retarget_lock_acquire_recursive
0000272a g     F .text	00000010 memset
000015f4 g     F .text	00000114 main
000020e8 g     F .text	0000005c _ZN9Sensornet5beginEv
200000e4 g     O .bss	00000004 g_spi1
00002504 g     F .text	00000000 .hidden __aeabi_uidiv
00000474 g     F .text	00000070 _ZN3GSM7SendSMSEPKcS1_
00002428  w    F .text	00000002 SVC_Handler
20000000 g     F .data	0000000c delay_usec
00002428  w    F .text	00000002 EVSYS_Handler
0000382c g       .text	00000000 __init_array_end
000027ec g     F .text	000000bc _malloc_r
000008d4 g     F .text	00000070 _ZN3GSM10ProcessSMSEPKcS1_
00002998 g     F .text	00000014 strcmp
00002428  w    F .text	00000002 NVMCTRL_Handler
0000382c g     F .text	00000000 _fini
00001010 g     F .text	00000024 _ZN4RF2415toggle_featuresEv
00002008 g     F .text	00000090 _ZN6uart_t4readEv
000006e4 g     F .text	0000002c _ZN3GSM9RemoveNumEPKc
00001bf4 g     F .text	000001e8 _ZN6uart_t4initERK13uart_pincfg_tt
00001f70 g     F .text	00000098 _ZN6uart_t4findEPKc
00002098 g     F .text	00000010 SERCOM0_Handler
00002fb0 g     F .text	000000de _printf_common
20000014 g     O .data	00000004 _impure_ptr
0000381c g       .text	00000000 __preinit_array_end
00002db0 g     F .text	00000200 _svfiprintf_r
00000d18 g     F .text	0000003e _ZN4RF24C1E6gpio_tS0_R5spi_t
20000000 g       .data	00000000 _data
00000000 g     O .text	0000008c exception_table
00001258  w    F .text	0000001c _ZN9SensornetD1Ev
00002428  w    F .text	00000002 DAC_Handler
00000b34 g     F .text	0000002c _ZN4RF2413read_registerEh
00002c0c g     F .text	00000056 _vsniprintf_r
00000c60 g     F .text	00000078 _ZN4RF2412read_payloadEPvh
00000d74 g     F .text	0000005a _ZN4RF2413stopListeningEv
00002610 g     F .text	00000008 .hidden __aeabi_uidivmod
20000078 g       .data	00000000 _edata
20000524 g       .bss	00000000 _end
20000519 g     O .bss	00000001 __lock___at_quick_exit_mutex
00002428  w    F .text	00000002 PTC_Handler
000020c8 g     F .text	00000020 _ZN9SensornetC2ERK4RF24
000010d0 g     F .text	00000014 _ZN4RF2410setRetriesEhh
00000b60 g     F .text	00000054 _ZN4RF2414write_registerEhPKhh
00000314 g     F .text	00000044 _ZN3GSM13RepeatCommandEPKcS1_ii
0000107c g     F .text	00000054 _ZN4RF2411setDataRateE15rf24_datarate_e
00001e2c g     F .text	0000001c _ZN6uart_t5writeEc
000037bc g     O .text	00000020 __sf_fake_stdout
0000266c g     F .text	0000000c atoi
0000367b g     O .text	00000101 _ctype_
00002618  w    F .text	00000002 .hidden __aeabi_idiv0
0000381c g       .text	00000000 __init_array_start
0000261c g     F .text	00000050 .hidden __muldi3
00000538 g     F .text	000000a8 _ZN3GSM11GetNumLevelEPKc
2000051a g     O .bss	00000001 __lock___dd_hash_mutex
2000051b g     O .bss	00000001 __lock___tz_mutex
000000f0 g     F .text	00000160 _ZN3GSMC2E6gpio_tP6uart_t
00000f84 g     F .text	00000028 _ZN4RF2416closeReadingPipeEh
000029bc g     F .text	0000000e strlen
00003090 g     F .text	00000224 _printf_i
20000510 g     O .bss	00000004 __malloc_sbrk_start
000000f0 g     F .text	00000160 _ZN3GSMC1E6gpio_tP6uart_t
0000195c g     F .text	00000004 _ZN5spi_tC1EP6Sercom
0000297c g     F .text	0000001c strchr
2000050c g     O .bss	00000004 __malloc_free_list
000010e4 g     F .text	00000150 _ZN4RF245beginEv
0000381c g       .text	00000000 __preinit_array_start
000024f4 g     F .text	0000000e __aeabi_atexit
00000d56 g     F .text	00000012 _ZN4RF2410setChannelEh
00001b68 g     F .text	00000018 millis
00001034 g     F .text	0000001a _ZN4RF2410setAutoAckEb
00001ddc g     F .text	00000050 _ZN6uart_t14sercom_handlerEv
00000f08 g     F .text	0000007c _ZN4RF2415openReadingPipeEhy
2000051c g     O .bss	00000001 __lock___sfp_recursive_mutex
00002704 g     F .text	00000014 free
00002428  w    F .text	00000002 SYSCTRL_Handler



Disassembly of section .text:

00000000 <exception_table>:
       0:	00 10 00 20 2d 24 00 00 29 24 00 00 29 24 00 00     ... -$..)$..)$..
	...
      2c:	29 24 00 00 00 00 00 00 00 00 00 00 29 24 00 00     )$..........)$..
      3c:	81 1b 00 00 29 24 00 00 29 24 00 00 29 24 00 00     ....)$..)$..)$..
      4c:	29 24 00 00 29 24 00 00 29 24 00 00 29 24 00 00     )$..)$..)$..)$..
      5c:	00 00 00 00 29 24 00 00 99 20 00 00 a9 20 00 00     ....)$... ... ..
      6c:	29 24 00 00 29 24 00 00 29 24 00 00 29 24 00 00     )$..)$..)$..)$..
      7c:	29 24 00 00 29 24 00 00 29 24 00 00 29 24 00 00     )$..)$..)$..)$..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000078 	.word	0x20000078
      ac:	00000000 	.word	0x00000000
      b0:	0000384c 	.word	0x0000384c

000000b4 <frame_dummy>:
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <frame_dummy+0x14>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4903      	ldr	r1, [pc, #12]	; (cc <frame_dummy+0x18>)
      be:	4804      	ldr	r0, [pc, #16]	; (d0 <frame_dummy+0x1c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	bd10      	pop	{r4, pc}
      c6:	46c0      	nop			; (mov r8, r8)
      c8:	00000000 	.word	0x00000000
      cc:	2000007c 	.word	0x2000007c
      d0:	0000384c 	.word	0x0000384c

000000d4 <_ZL8find_numPKc>:
#include <strings.h>
extern "C" {
#include <systick.h>
}

static int find_num(const char* str) {
      d4:	b510      	push	{r4, lr}
    while(*str) {
      d6:	7803      	ldrb	r3, [r0, #0]
      d8:	2b00      	cmp	r3, #0
      da:	d007      	beq.n	ec <_ZL8find_numPKc+0x18>
        if(isdigit(*str))
      dc:	3b30      	subs	r3, #48	; 0x30
      de:	2b09      	cmp	r3, #9
      e0:	d901      	bls.n	e6 <_ZL8find_numPKc+0x12>
            return atoi(str);
        str++;
      e2:	3001      	adds	r0, #1
    while(*str) {
      e4:	e7f7      	b.n	d6 <_ZL8find_numPKc+0x2>
            return atoi(str);
      e6:	f002 fac1 	bl	266c <atoi>
      ea:	e000      	b.n	ee <_ZL8find_numPKc+0x1a>
    }
    return 0;
      ec:	2000      	movs	r0, #0
}
      ee:	bd10      	pop	{r4, pc}

000000f0 <_ZN3GSMC1E6gpio_tP6uart_t>:
    }

    gsm->SendSMS(sender, str.c_str());
}

GSM::GSM(const gpio_t pwrkey, uart_t* uart) :
      f0:	b5f0      	push	{r4, r5, r6, r7, lr}
      f2:	b08f      	sub	sp, #60	; 0x3c
      f4:	0005      	movs	r5, r0
      f6:	4668      	mov	r0, sp
      f8:	9100      	str	r1, [sp, #0]
      fa:	6042      	str	r2, [r0, #4]
    m_pwrkey(pwrkey), m_uart(uart)
      fc:	002e      	movs	r6, r5
      fe:	0002      	movs	r2, r0
     100:	ca12      	ldmia	r2!, {r1, r4}
     102:	c612      	stmia	r6!, {r1, r4}
     104:	0034      	movs	r4, r6
private:
    size_t m_size;
    T* m_data;

public:
    Vector() : m_size(0), m_data(NULL) {}
     106:	2200      	movs	r2, #0
     108:	60aa      	str	r2, [r5, #8]
     10a:	60ea      	str	r2, [r5, #12]
     10c:	612b      	str	r3, [r5, #16]
        } else {
            PORT->Group[port].DIRSET.reg = 1 << pin;
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
        }
    }
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     10e:	6841      	ldr	r1, [r0, #4]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     110:	3201      	adds	r2, #1
     112:	0010      	movs	r0, r2
     114:	4088      	lsls	r0, r1
     116:	682b      	ldr	r3, [r5, #0]
     118:	01db      	lsls	r3, r3, #7
     11a:	4f4b      	ldr	r7, [pc, #300]	; (248 <_ZN3GSMC1E6gpio_tP6uart_t+0x158>)
     11c:	46bc      	mov	ip, r7
     11e:	4463      	add	r3, ip
     120:	6098      	str	r0, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     122:	185b      	adds	r3, r3, r1
     124:	3340      	adds	r3, #64	; 0x40
     126:	7819      	ldrb	r1, [r3, #0]
     128:	2002      	movs	r0, #2
     12a:	4381      	bics	r1, r0
     12c:	7019      	strb	r1, [r3, #0]
    }
    inline void drvstr(const gpio_t& gp, const bool en) { drvstr(gp.port, gp.pin, en); }

    inline void set(const int port, const int pin, const bool en) {
        if(en)
            PORT->Group[port].OUTSET.reg = 1 << pin;
     12e:	686b      	ldr	r3, [r5, #4]
     130:	409a      	lsls	r2, r3
     132:	682b      	ldr	r3, [r5, #0]
     134:	01db      	lsls	r3, r3, #7
     136:	4463      	add	r3, ip
     138:	619a      	str	r2, [r3, #24]
{
    gpio::mode(m_pwrkey, GPIO_DIR_OUT); // Set pwrkey pin to output
    gpio::set(m_pwrkey, true); // Set pwrkey to high

    m_smsfuncs.push_back({"exec", func_exec, LEVEL_ADMIN});
     13a:	aa02      	add	r2, sp, #8
     13c:	4b43      	ldr	r3, [pc, #268]	; (24c <_ZN3GSMC1E6gpio_tP6uart_t+0x15c>)
     13e:	cb83      	ldmia	r3!, {r0, r1, r7}
     140:	c283      	stmia	r2!, {r0, r1, r7}
    ~Vector() {
        if(m_data) free(m_data);
    }

    void push_back(const T& elem) {
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     142:	6831      	ldr	r1, [r6, #0]
     144:	2900      	cmp	r1, #0
     146:	d100      	bne.n	14a <_ZN3GSMC1E6gpio_tP6uart_t+0x5a>
     148:	e06e      	b.n	228 <_ZN3GSMC1E6gpio_tP6uart_t+0x138>
     14a:	6870      	ldr	r0, [r6, #4]
     14c:	3101      	adds	r1, #1
     14e:	004b      	lsls	r3, r1, #1
     150:	1859      	adds	r1, r3, r1
     152:	0089      	lsls	r1, r1, #2
     154:	f002 fba8 	bl	28a8 <realloc>
        if(!new_data) return;
     158:	2800      	cmp	r0, #0
     15a:	d00b      	beq.n	174 <_ZN3GSMC1E6gpio_tP6uart_t+0x84>
        m_data = new_data;
     15c:	6060      	str	r0, [r4, #4]

        //memcpy(m_data + m_size, &elem, sizeof(T));
        *(m_data + m_size) = elem;
     15e:	6823      	ldr	r3, [r4, #0]
     160:	005a      	lsls	r2, r3, #1
     162:	18d2      	adds	r2, r2, r3
     164:	0092      	lsls	r2, r2, #2
     166:	ab02      	add	r3, sp, #8
     168:	1880      	adds	r0, r0, r2
     16a:	cb46      	ldmia	r3!, {r1, r2, r6}
     16c:	c046      	stmia	r0!, {r1, r2, r6}
        m_size++;
     16e:	6823      	ldr	r3, [r4, #0]
     170:	3301      	adds	r3, #1
     172:	6023      	str	r3, [r4, #0]
    m_smsfuncs.push_back({"setnum", func_setnum, LEVEL_ADMIN});
     174:	aa05      	add	r2, sp, #20
     176:	4b35      	ldr	r3, [pc, #212]	; (24c <_ZN3GSMC1E6gpio_tP6uart_t+0x15c>)
     178:	330c      	adds	r3, #12
     17a:	cb43      	ldmia	r3!, {r0, r1, r6}
     17c:	c243      	stmia	r2!, {r0, r1, r6}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     17e:	6821      	ldr	r1, [r4, #0]
     180:	2900      	cmp	r1, #0
     182:	d055      	beq.n	230 <_ZN3GSMC1E6gpio_tP6uart_t+0x140>
     184:	3101      	adds	r1, #1
     186:	004b      	lsls	r3, r1, #1
     188:	1859      	adds	r1, r3, r1
     18a:	0089      	lsls	r1, r1, #2
     18c:	6860      	ldr	r0, [r4, #4]
     18e:	f002 fb8b 	bl	28a8 <realloc>
        if(!new_data) return;
     192:	2800      	cmp	r0, #0
     194:	d00b      	beq.n	1ae <_ZN3GSMC1E6gpio_tP6uart_t+0xbe>
        m_data = new_data;
     196:	6060      	str	r0, [r4, #4]
        *(m_data + m_size) = elem;
     198:	6823      	ldr	r3, [r4, #0]
     19a:	005a      	lsls	r2, r3, #1
     19c:	18d2      	adds	r2, r2, r3
     19e:	0092      	lsls	r2, r2, #2
     1a0:	ab05      	add	r3, sp, #20
     1a2:	1880      	adds	r0, r0, r2
     1a4:	cb46      	ldmia	r3!, {r1, r2, r6}
     1a6:	c046      	stmia	r0!, {r1, r2, r6}
        m_size++;
     1a8:	6823      	ldr	r3, [r4, #0]
     1aa:	3301      	adds	r3, #1
     1ac:	6023      	str	r3, [r4, #0]
    m_smsfuncs.push_back({"delnum", func_delnum, LEVEL_ADMIN});
     1ae:	aa08      	add	r2, sp, #32
     1b0:	4b26      	ldr	r3, [pc, #152]	; (24c <_ZN3GSMC1E6gpio_tP6uart_t+0x15c>)
     1b2:	3318      	adds	r3, #24
     1b4:	cb43      	ldmia	r3!, {r0, r1, r6}
     1b6:	c243      	stmia	r2!, {r0, r1, r6}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     1b8:	6821      	ldr	r1, [r4, #0]
     1ba:	2900      	cmp	r1, #0
     1bc:	d03c      	beq.n	238 <_ZN3GSMC1E6gpio_tP6uart_t+0x148>
     1be:	3101      	adds	r1, #1
     1c0:	004b      	lsls	r3, r1, #1
     1c2:	1859      	adds	r1, r3, r1
     1c4:	0089      	lsls	r1, r1, #2
     1c6:	6860      	ldr	r0, [r4, #4]
     1c8:	f002 fb6e 	bl	28a8 <realloc>
        if(!new_data) return;
     1cc:	2800      	cmp	r0, #0
     1ce:	d00b      	beq.n	1e8 <_ZN3GSMC1E6gpio_tP6uart_t+0xf8>
        m_data = new_data;
     1d0:	6060      	str	r0, [r4, #4]
        *(m_data + m_size) = elem;
     1d2:	6823      	ldr	r3, [r4, #0]
     1d4:	005a      	lsls	r2, r3, #1
     1d6:	18d2      	adds	r2, r2, r3
     1d8:	0092      	lsls	r2, r2, #2
     1da:	ab08      	add	r3, sp, #32
     1dc:	1880      	adds	r0, r0, r2
     1de:	cb46      	ldmia	r3!, {r1, r2, r6}
     1e0:	c046      	stmia	r0!, {r1, r2, r6}
        m_size++;
     1e2:	6823      	ldr	r3, [r4, #0]
     1e4:	3301      	adds	r3, #1
     1e6:	6023      	str	r3, [r4, #0]
    m_smsfuncs.push_back({"listnum", func_listnum, LEVEL_USER});
     1e8:	aa0b      	add	r2, sp, #44	; 0x2c
     1ea:	4b18      	ldr	r3, [pc, #96]	; (24c <_ZN3GSMC1E6gpio_tP6uart_t+0x15c>)
     1ec:	3324      	adds	r3, #36	; 0x24
     1ee:	cb43      	ldmia	r3!, {r0, r1, r6}
     1f0:	c243      	stmia	r2!, {r0, r1, r6}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     1f2:	6821      	ldr	r1, [r4, #0]
     1f4:	2900      	cmp	r1, #0
     1f6:	d023      	beq.n	240 <_ZN3GSMC1E6gpio_tP6uart_t+0x150>
     1f8:	3101      	adds	r1, #1
     1fa:	004b      	lsls	r3, r1, #1
     1fc:	1859      	adds	r1, r3, r1
     1fe:	0089      	lsls	r1, r1, #2
     200:	6860      	ldr	r0, [r4, #4]
     202:	f002 fb51 	bl	28a8 <realloc>
        if(!new_data) return;
     206:	2800      	cmp	r0, #0
     208:	d00b      	beq.n	222 <_ZN3GSMC1E6gpio_tP6uart_t+0x132>
        m_data = new_data;
     20a:	6060      	str	r0, [r4, #4]
        *(m_data + m_size) = elem;
     20c:	6823      	ldr	r3, [r4, #0]
     20e:	005a      	lsls	r2, r3, #1
     210:	18d2      	adds	r2, r2, r3
     212:	0092      	lsls	r2, r2, #2
     214:	ab0b      	add	r3, sp, #44	; 0x2c
     216:	1880      	adds	r0, r0, r2
     218:	cb46      	ldmia	r3!, {r1, r2, r6}
     21a:	c046      	stmia	r0!, {r1, r2, r6}
        m_size++;
     21c:	6823      	ldr	r3, [r4, #0]
     21e:	3301      	adds	r3, #1
     220:	6023      	str	r3, [r4, #0]
}
     222:	0028      	movs	r0, r5
     224:	b00f      	add	sp, #60	; 0x3c
     226:	bdf0      	pop	{r4, r5, r6, r7, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     228:	200c      	movs	r0, #12
     22a:	f002 fa61 	bl	26f0 <malloc>
     22e:	e793      	b.n	158 <_ZN3GSMC1E6gpio_tP6uart_t+0x68>
     230:	200c      	movs	r0, #12
     232:	f002 fa5d 	bl	26f0 <malloc>
     236:	e7ac      	b.n	192 <_ZN3GSMC1E6gpio_tP6uart_t+0xa2>
     238:	200c      	movs	r0, #12
     23a:	f002 fa59 	bl	26f0 <malloc>
     23e:	e7c5      	b.n	1cc <_ZN3GSMC1E6gpio_tP6uart_t+0xdc>
     240:	200c      	movs	r0, #12
     242:	f002 fa55 	bl	26f0 <malloc>
     246:	e7de      	b.n	206 <_ZN3GSMC1E6gpio_tP6uart_t+0x116>
     248:	41004400 	.word	0x41004400
     24c:	00003314 	.word	0x00003314

00000250 <_ZN3GSMD1Ev>:

GSM::~GSM() {
     250:	b510      	push	{r4, lr}
     252:	0004      	movs	r4, r0
        if(m_data) free(m_data);
     254:	68c0      	ldr	r0, [r0, #12]
     256:	2800      	cmp	r0, #0
     258:	d001      	beq.n	25e <_ZN3GSMD1Ev+0xe>
     25a:	f002 fa53 	bl	2704 <free>
    
}
     25e:	0020      	movs	r0, r4
     260:	bd10      	pop	{r4, pc}
     262:	Address 0x00000262 is out of bounds.


00000264 <_ZN3GSM7CommandEPKcS1_j>:

bool GSM::Command(const char* cmd, const char* result, unsigned int response_time) {
     264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     266:	0004      	movs	r4, r0
     268:	0017      	movs	r7, r2
     26a:	001e      	movs	r6, r3
    uint32_t start;

    m_uart->flush_rx();
     26c:	6903      	ldr	r3, [r0, #16]
    // Allocates a buffer and reads all available data into it
    char* read();

    bool rxempty();
    void flush_rx() {
        m_rxhead = 0;
     26e:	2200      	movs	r2, #0
     270:	2081      	movs	r0, #129	; 0x81
     272:	0080      	lsls	r0, r0, #2
     274:	521a      	strh	r2, [r3, r0]
        m_rxtail = 0;
     276:	4825      	ldr	r0, [pc, #148]	; (30c <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     278:	521a      	strh	r2, [r3, r0]
        m_rxfull = false;
     27a:	2000      	movs	r0, #0
     27c:	2282      	movs	r2, #130	; 0x82
     27e:	0092      	lsls	r2, r2, #2
     280:	5498      	strb	r0, [r3, r2]

    m_uart->print(cmd);
     282:	2201      	movs	r2, #1
     284:	4252      	negs	r2, r2
     286:	6920      	ldr	r0, [r4, #16]
     288:	f001 fdde 	bl	1e48 <_ZN6uart_t5printEPKci>
    m_uart->write('\r');
     28c:	210d      	movs	r1, #13
     28e:	6920      	ldr	r0, [r4, #16]
     290:	f001 fdcc 	bl	1e2c <_ZN6uart_t5writeEc>
    // Allow up to response_time milliseconds to get a response
    start = millis();
     294:	f001 fc68 	bl	1b68 <millis>
     298:	0005      	movs	r5, r0
     29a:	e012      	b.n	2c2 <_ZN3GSM7CommandEPKcS1_j+0x5e>
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
            return m_rxhead - m_rxtail;
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     29c:	2281      	movs	r2, #129	; 0x81
     29e:	0092      	lsls	r2, r2, #2
     2a0:	5a99      	ldrh	r1, [r3, r2]
     2a2:	4a1a      	ldr	r2, [pc, #104]	; (30c <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     2a4:	5a9b      	ldrh	r3, [r3, r2]
     2a6:	1ac9      	subs	r1, r1, r3
     2a8:	b289      	uxth	r1, r1
     2aa:	2380      	movs	r3, #128	; 0x80
     2ac:	009b      	lsls	r3, r3, #2
     2ae:	469c      	mov	ip, r3
     2b0:	4461      	add	r1, ip
     2b2:	b289      	uxth	r1, r1
    while(!m_uart->available())
     2b4:	2900      	cmp	r1, #0
     2b6:	d116      	bne.n	2e6 <_ZN3GSM7CommandEPKcS1_j+0x82>
        if(millis() - start >= response_time)
     2b8:	f001 fc56 	bl	1b68 <millis>
     2bc:	1b40      	subs	r0, r0, r5
     2be:	42b0      	cmp	r0, r6
     2c0:	d21f      	bcs.n	302 <_ZN3GSM7CommandEPKcS1_j+0x9e>
    while(!m_uart->available())
     2c2:	6923      	ldr	r3, [r4, #16]
        if(m_rxhead >= m_rxtail)
     2c4:	2281      	movs	r2, #129	; 0x81
     2c6:	0092      	lsls	r2, r2, #2
     2c8:	5a99      	ldrh	r1, [r3, r2]
     2ca:	b289      	uxth	r1, r1
     2cc:	4a0f      	ldr	r2, [pc, #60]	; (30c <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     2ce:	5a9a      	ldrh	r2, [r3, r2]
     2d0:	b292      	uxth	r2, r2
     2d2:	4291      	cmp	r1, r2
     2d4:	d3e2      	bcc.n	29c <_ZN3GSM7CommandEPKcS1_j+0x38>
            return m_rxhead - m_rxtail;
     2d6:	2281      	movs	r2, #129	; 0x81
     2d8:	0092      	lsls	r2, r2, #2
     2da:	5a99      	ldrh	r1, [r3, r2]
     2dc:	4a0b      	ldr	r2, [pc, #44]	; (30c <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     2de:	5a9b      	ldrh	r3, [r3, r2]
     2e0:	1ac9      	subs	r1, r1, r3
     2e2:	b289      	uxth	r1, r1
     2e4:	e7e6      	b.n	2b4 <_ZN3GSM7CommandEPKcS1_j+0x50>
            return false;
    
    delay_usec(100000); // wait 100 ms to get the whole response
     2e6:	480a      	ldr	r0, [pc, #40]	; (310 <_ZN3GSM7CommandEPKcS1_j+0xac>)
     2e8:	f003 faa6 	bl	3838 <__delay_usec_veneer>

    if(!result) return true;
     2ec:	2f00      	cmp	r7, #0
     2ee:	d00a      	beq.n	306 <_ZN3GSM7CommandEPKcS1_j+0xa2>
    return m_uart->find(result) != -1;
     2f0:	6920      	ldr	r0, [r4, #16]
     2f2:	0039      	movs	r1, r7
     2f4:	f001 fe3c 	bl	1f70 <_ZN6uart_t4findEPKc>
     2f8:	3001      	adds	r0, #1
     2fa:	1e43      	subs	r3, r0, #1
     2fc:	4198      	sbcs	r0, r3
     2fe:	b2c0      	uxtb	r0, r0
     300:	e000      	b.n	304 <_ZN3GSM7CommandEPKcS1_j+0xa0>
            return false;
     302:	2000      	movs	r0, #0
}
     304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!result) return true;
     306:	2001      	movs	r0, #1
     308:	e7fc      	b.n	304 <_ZN3GSM7CommandEPKcS1_j+0xa0>
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	00000206 	.word	0x00000206
     310:	000186a0 	.word	0x000186a0

00000314 <_ZN3GSM13RepeatCommandEPKcS1_ii>:

bool GSM::RepeatCommand(const char* cmd, const char* result, int repeats, int response_time) {
     314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     316:	46ce      	mov	lr, r9
     318:	4647      	mov	r7, r8
     31a:	b580      	push	{r7, lr}
     31c:	4680      	mov	r8, r0
     31e:	000f      	movs	r7, r1
     320:	0016      	movs	r6, r2
     322:	001d      	movs	r5, r3
     324:	9b08      	ldr	r3, [sp, #32]
     326:	4699      	mov	r9, r3
    for(int i = 0; i < repeats; i++) {
     328:	2400      	movs	r4, #0
     32a:	42ac      	cmp	r4, r5
     32c:	da0c      	bge.n	348 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x34>
        if(Command(cmd, result, response_time))
     32e:	464b      	mov	r3, r9
     330:	0032      	movs	r2, r6
     332:	0039      	movs	r1, r7
     334:	4640      	mov	r0, r8
     336:	f7ff ff95 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
     33a:	2800      	cmp	r0, #0
     33c:	d105      	bne.n	34a <_ZN3GSM13RepeatCommandEPKcS1_ii+0x36>
            return true;
        
        delay_usec(500000);
     33e:	4805      	ldr	r0, [pc, #20]	; (354 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x40>)
     340:	f003 fa7a 	bl	3838 <__delay_usec_veneer>
    for(int i = 0; i < repeats; i++) {
     344:	3401      	adds	r4, #1
     346:	e7f0      	b.n	32a <_ZN3GSM13RepeatCommandEPKcS1_ii+0x16>
    }
    return false;
     348:	2000      	movs	r0, #0
}
     34a:	bc0c      	pop	{r2, r3}
     34c:	4690      	mov	r8, r2
     34e:	4699      	mov	r9, r3
     350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     352:	46c0      	nop			; (mov r8, r8)
     354:	0007a120 	.word	0x0007a120

00000358 <_ZN3GSM7PowerOnEv>:

bool GSM::PowerOn() {
     358:	b5f0      	push	{r4, r5, r6, r7, lr}
     35a:	46c6      	mov	lr, r8
     35c:	b500      	push	{lr}
     35e:	b082      	sub	sp, #8
     360:	0004      	movs	r4, r0
    m_uart->write('\r');
     362:	210d      	movs	r1, #13
     364:	6900      	ldr	r0, [r0, #16]
     366:	f001 fd61 	bl	1e2c <_ZN6uart_t5writeEc>

    // Check if the GSM module is already powered on
    if(Command("AT", "OK", 500))
     36a:	23fa      	movs	r3, #250	; 0xfa
     36c:	005b      	lsls	r3, r3, #1
     36e:	4a1c      	ldr	r2, [pc, #112]	; (3e0 <_ZN3GSM7PowerOnEv+0x88>)
     370:	491c      	ldr	r1, [pc, #112]	; (3e4 <_ZN3GSM7PowerOnEv+0x8c>)
     372:	0020      	movs	r0, r4
     374:	f7ff ff76 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
     378:	1e07      	subs	r7, r0, #0
     37a:	d12b      	bne.n	3d4 <_ZN3GSM7PowerOnEv+0x7c>
        return true;
    
    // Fail after 3 attempts to power cycle
    for(int i = 0; i < 3; i++) {
     37c:	2600      	movs	r6, #0
     37e:	2e02      	cmp	r6, #2
     380:	dc28      	bgt.n	3d4 <_ZN3GSM7PowerOnEv+0x7c>
        else
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     382:	2501      	movs	r5, #1
     384:	002a      	movs	r2, r5
     386:	6863      	ldr	r3, [r4, #4]
     388:	409a      	lsls	r2, r3
     38a:	6823      	ldr	r3, [r4, #0]
     38c:	01db      	lsls	r3, r3, #7
     38e:	4916      	ldr	r1, [pc, #88]	; (3e8 <_ZN3GSM7PowerOnEv+0x90>)
     390:	468c      	mov	ip, r1
     392:	4463      	add	r3, ip
     394:	615a      	str	r2, [r3, #20]
        gpio::set(m_pwrkey, false); // Set pwrkey to low
        delay_usec(1000000); // Wait for SIM800C to register it
     396:	4b15      	ldr	r3, [pc, #84]	; (3ec <_ZN3GSM7PowerOnEv+0x94>)
     398:	4698      	mov	r8, r3
     39a:	0018      	movs	r0, r3
     39c:	f003 fa4c 	bl	3838 <__delay_usec_veneer>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     3a0:	6863      	ldr	r3, [r4, #4]
     3a2:	409d      	lsls	r5, r3
     3a4:	6823      	ldr	r3, [r4, #0]
     3a6:	01db      	lsls	r3, r3, #7
     3a8:	4a0f      	ldr	r2, [pc, #60]	; (3e8 <_ZN3GSM7PowerOnEv+0x90>)
     3aa:	4694      	mov	ip, r2
     3ac:	4463      	add	r3, ip
     3ae:	619d      	str	r5, [r3, #24]
        gpio::set(m_pwrkey, true); // Set pwrkey to high
        delay_usec(1000000);
     3b0:	4640      	mov	r0, r8
     3b2:	f003 fa41 	bl	3838 <__delay_usec_veneer>

        // Wait for response to AT command
        if(RepeatCommand("AT", "OK", 6, 500))
     3b6:	23fa      	movs	r3, #250	; 0xfa
     3b8:	005b      	lsls	r3, r3, #1
     3ba:	9300      	str	r3, [sp, #0]
     3bc:	3bef      	subs	r3, #239	; 0xef
     3be:	3bff      	subs	r3, #255	; 0xff
     3c0:	4a07      	ldr	r2, [pc, #28]	; (3e0 <_ZN3GSM7PowerOnEv+0x88>)
     3c2:	4908      	ldr	r1, [pc, #32]	; (3e4 <_ZN3GSM7PowerOnEv+0x8c>)
     3c4:	0020      	movs	r0, r4
     3c6:	f7ff ffa5 	bl	314 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     3ca:	2800      	cmp	r0, #0
     3cc:	d101      	bne.n	3d2 <_ZN3GSM7PowerOnEv+0x7a>
    for(int i = 0; i < 3; i++) {
     3ce:	3601      	adds	r6, #1
     3d0:	e7d5      	b.n	37e <_ZN3GSM7PowerOnEv+0x26>
            return true;
     3d2:	0007      	movs	r7, r0
    }
    return false;
}
     3d4:	0038      	movs	r0, r7
     3d6:	b002      	add	sp, #8
     3d8:	bc04      	pop	{r2}
     3da:	4690      	mov	r8, r2
     3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	00003530 	.word	0x00003530
     3e4:	000033ac 	.word	0x000033ac
     3e8:	41004400 	.word	0x41004400
     3ec:	000f4240 	.word	0x000f4240

000003f0 <_ZN3GSM4InitEv>:

bool GSM::Init() {
     3f0:	b570      	push	{r4, r5, r6, lr}
     3f2:	b082      	sub	sp, #8
     3f4:	0005      	movs	r5, r0
    if(!PowerOn())
     3f6:	f7ff ffaf 	bl	358 <_ZN3GSM7PowerOnEv>
     3fa:	1e04      	subs	r4, r0, #0
     3fc:	d102      	bne.n	404 <_ZN3GSM4InitEv+0x14>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms

    m_uart->flush_rx();

    return true;
}
     3fe:	0020      	movs	r0, r4
     400:	b002      	add	sp, #8
     402:	bd70      	pop	{r4, r5, r6, pc}
    Command("ATE0");
     404:	4c14      	ldr	r4, [pc, #80]	; (458 <_ZN3GSM4InitEv+0x68>)
     406:	0023      	movs	r3, r4
     408:	2200      	movs	r2, #0
     40a:	4914      	ldr	r1, [pc, #80]	; (45c <_ZN3GSM4InitEv+0x6c>)
     40c:	0028      	movs	r0, r5
     40e:	f7ff ff29 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
    if(!RepeatCommand("AT+CREG?", "+CREG: 0,1", 25))
     412:	9400      	str	r4, [sp, #0]
     414:	2319      	movs	r3, #25
     416:	4a12      	ldr	r2, [pc, #72]	; (460 <_ZN3GSM4InitEv+0x70>)
     418:	4912      	ldr	r1, [pc, #72]	; (464 <_ZN3GSM4InitEv+0x74>)
     41a:	0028      	movs	r0, r5
     41c:	f7ff ff7a 	bl	314 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     420:	1e04      	subs	r4, r0, #0
     422:	d0ec      	beq.n	3fe <_ZN3GSM4InitEv+0xe>
    Command("AT+CMGF=1"); // SMS text mode
     424:	4e0c      	ldr	r6, [pc, #48]	; (458 <_ZN3GSM4InitEv+0x68>)
     426:	0033      	movs	r3, r6
     428:	2200      	movs	r2, #0
     42a:	490f      	ldr	r1, [pc, #60]	; (468 <_ZN3GSM4InitEv+0x78>)
     42c:	0028      	movs	r0, r5
     42e:	f7ff ff19 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms
     432:	0033      	movs	r3, r6
     434:	2200      	movs	r2, #0
     436:	490d      	ldr	r1, [pc, #52]	; (46c <_ZN3GSM4InitEv+0x7c>)
     438:	0028      	movs	r0, r5
     43a:	f7ff ff13 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
    m_uart->flush_rx();
     43e:	692b      	ldr	r3, [r5, #16]
        m_rxhead = 0;
     440:	2200      	movs	r2, #0
     442:	2181      	movs	r1, #129	; 0x81
     444:	0089      	lsls	r1, r1, #2
     446:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     448:	4909      	ldr	r1, [pc, #36]	; (470 <_ZN3GSM4InitEv+0x80>)
     44a:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     44c:	2100      	movs	r1, #0
     44e:	2282      	movs	r2, #130	; 0x82
     450:	0092      	lsls	r2, r2, #2
     452:	5499      	strb	r1, [r3, r2]
    return true;
     454:	e7d3      	b.n	3fe <_ZN3GSM4InitEv+0xe>
     456:	46c0      	nop			; (mov r8, r8)
     458:	00000bb8 	.word	0x00000bb8
     45c:	000033b0 	.word	0x000033b0
     460:	000033b8 	.word	0x000033b8
     464:	000033c4 	.word	0x000033c4
     468:	000033d0 	.word	0x000033d0
     46c:	000033dc 	.word	0x000033dc
     470:	00000206 	.word	0x00000206

00000474 <_ZN3GSM7SendSMSEPKcS1_>:
            break;
        }
    }
}

bool GSM::SendSMS(const char* number, const char* text) {
     474:	b530      	push	{r4, r5, lr}
     476:	b091      	sub	sp, #68	; 0x44
     478:	0004      	movs	r4, r0
     47a:	000b      	movs	r3, r1
     47c:	0015      	movs	r5, r2
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+CMGS=\"%s\"", number);
     47e:	4a13      	ldr	r2, [pc, #76]	; (4cc <_ZN3GSM7SendSMSEPKcS1_+0x58>)
     480:	2140      	movs	r1, #64	; 0x40
     482:	4668      	mov	r0, sp
     484:	f002 fa2c 	bl	28e0 <sniprintf>
    if(!Command(buf))
     488:	4b11      	ldr	r3, [pc, #68]	; (4d0 <_ZN3GSM7SendSMSEPKcS1_+0x5c>)
     48a:	2200      	movs	r2, #0
     48c:	4669      	mov	r1, sp
     48e:	0020      	movs	r0, r4
     490:	f7ff fee8 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
     494:	2800      	cmp	r0, #0
     496:	d101      	bne.n	49c <_ZN3GSM7SendSMSEPKcS1_+0x28>
    m_uart->print(text);

    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
    m_uart->flush_rx();
    return success;
}
     498:	b011      	add	sp, #68	; 0x44
     49a:	bd30      	pop	{r4, r5, pc}
    m_uart->print(text);
     49c:	2201      	movs	r2, #1
     49e:	4252      	negs	r2, r2
     4a0:	0029      	movs	r1, r5
     4a2:	6920      	ldr	r0, [r4, #16]
     4a4:	f001 fcd0 	bl	1e48 <_ZN6uart_t5printEPKci>
    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
     4a8:	4b0a      	ldr	r3, [pc, #40]	; (4d4 <_ZN3GSM7SendSMSEPKcS1_+0x60>)
     4aa:	4a0b      	ldr	r2, [pc, #44]	; (4d8 <_ZN3GSM7SendSMSEPKcS1_+0x64>)
     4ac:	490b      	ldr	r1, [pc, #44]	; (4dc <_ZN3GSM7SendSMSEPKcS1_+0x68>)
     4ae:	0020      	movs	r0, r4
     4b0:	f7ff fed8 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
    m_uart->flush_rx();
     4b4:	6923      	ldr	r3, [r4, #16]
        m_rxhead = 0;
     4b6:	2200      	movs	r2, #0
     4b8:	2181      	movs	r1, #129	; 0x81
     4ba:	0089      	lsls	r1, r1, #2
     4bc:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     4be:	4908      	ldr	r1, [pc, #32]	; (4e0 <_ZN3GSM7SendSMSEPKcS1_+0x6c>)
     4c0:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     4c2:	2100      	movs	r1, #0
     4c4:	2282      	movs	r2, #130	; 0x82
     4c6:	0092      	lsls	r2, r2, #2
     4c8:	5499      	strb	r1, [r3, r2]
    return success;
     4ca:	e7e5      	b.n	498 <_ZN3GSM7SendSMSEPKcS1_+0x24>
     4cc:	000033f0 	.word	0x000033f0
     4d0:	00000bb8 	.word	0x00000bb8
     4d4:	0000ea60 	.word	0x0000ea60
     4d8:	00003400 	.word	0x00003400
     4dc:	00003408 	.word	0x00003408
     4e0:	00000206 	.word	0x00000206

000004e4 <_ZL9func_execP3GSMPKcS2_>:
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     4e4:	b570      	push	{r4, r5, r6, lr}
     4e6:	0004      	movs	r4, r0
     4e8:	000d      	movs	r5, r1
     4ea:	0011      	movs	r1, r2
    if(!gsm->Command(args)) {
     4ec:	4b0f      	ldr	r3, [pc, #60]	; (52c <_ZL9func_execP3GSMPKcS2_+0x48>)
     4ee:	2200      	movs	r2, #0
     4f0:	f7ff feb8 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
     4f4:	2800      	cmp	r0, #0
     4f6:	d105      	bne.n	504 <_ZL9func_execP3GSMPKcS2_+0x20>
        gsm->SendSMS(sender, "Command timed out");
     4f8:	4a0d      	ldr	r2, [pc, #52]	; (530 <_ZL9func_execP3GSMPKcS2_+0x4c>)
     4fa:	0029      	movs	r1, r5
     4fc:	0020      	movs	r0, r4
     4fe:	f7ff ffb9 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
}
     502:	bd70      	pop	{r4, r5, r6, pc}
        char* resp = gsm->m_uart->read();
     504:	6920      	ldr	r0, [r4, #16]
     506:	f001 fd7f 	bl	2008 <_ZN6uart_t4readEv>
     50a:	1e06      	subs	r6, r0, #0
        if(!resp) {
     50c:	d008      	beq.n	520 <_ZL9func_execP3GSMPKcS2_+0x3c>
            gsm->SendSMS(sender, resp);
     50e:	0002      	movs	r2, r0
     510:	0029      	movs	r1, r5
     512:	0020      	movs	r0, r4
     514:	f7ff ffae 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
            free(resp);
     518:	0030      	movs	r0, r6
     51a:	f002 f8f3 	bl	2704 <free>
}
     51e:	e7f0      	b.n	502 <_ZL9func_execP3GSMPKcS2_+0x1e>
            gsm->SendSMS(sender, "uart->read() returned null");
     520:	4a04      	ldr	r2, [pc, #16]	; (534 <_ZL9func_execP3GSMPKcS2_+0x50>)
     522:	0029      	movs	r1, r5
     524:	0020      	movs	r0, r4
     526:	f7ff ffa5 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
     52a:	e7ea      	b.n	502 <_ZL9func_execP3GSMPKcS2_+0x1e>
     52c:	00000bb8 	.word	0x00000bb8
     530:	0000340c 	.word	0x0000340c
     534:	00003420 	.word	0x00003420

00000538 <_ZN3GSM11GetNumLevelEPKc>:

char GSM::GetNumLevel(const char* num) {
     538:	b510      	push	{r4, lr}
     53a:	b090      	sub	sp, #64	; 0x40
     53c:	0004      	movs	r4, r0
     53e:	000b      	movs	r3, r1
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+FSREAD=C:\\%s.txt,0,1,0", num);
     540:	4a23      	ldr	r2, [pc, #140]	; (5d0 <_ZN3GSM11GetNumLevelEPKc+0x98>)
     542:	2140      	movs	r1, #64	; 0x40
     544:	4668      	mov	r0, sp
     546:	f002 f9cb 	bl	28e0 <sniprintf>
    if(!Command(buf, "OK"))
     54a:	4b22      	ldr	r3, [pc, #136]	; (5d4 <_ZN3GSM11GetNumLevelEPKc+0x9c>)
     54c:	4a22      	ldr	r2, [pc, #136]	; (5d8 <_ZN3GSM11GetNumLevelEPKc+0xa0>)
     54e:	4669      	mov	r1, sp
     550:	0020      	movs	r0, r4
     552:	f7ff fe87 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
     556:	2800      	cmp	r0, #0
     558:	d036      	beq.n	5c8 <_ZN3GSM11GetNumLevelEPKc+0x90>
        return 0;
    if(m_uart->available() < 3) return 0;
     55a:	6920      	ldr	r0, [r4, #16]
        if(m_rxhead >= m_rxtail)
     55c:	2381      	movs	r3, #129	; 0x81
     55e:	009b      	lsls	r3, r3, #2
     560:	5ac2      	ldrh	r2, [r0, r3]
     562:	b292      	uxth	r2, r2
     564:	4b1d      	ldr	r3, [pc, #116]	; (5dc <_ZN3GSM11GetNumLevelEPKc+0xa4>)
     566:	5ac3      	ldrh	r3, [r0, r3]
     568:	b29b      	uxth	r3, r3
     56a:	429a      	cmp	r2, r3
     56c:	d30a      	bcc.n	584 <_ZN3GSM11GetNumLevelEPKc+0x4c>
            return m_rxhead - m_rxtail;
     56e:	2381      	movs	r3, #129	; 0x81
     570:	009b      	lsls	r3, r3, #2
     572:	5ac3      	ldrh	r3, [r0, r3]
     574:	4a19      	ldr	r2, [pc, #100]	; (5dc <_ZN3GSM11GetNumLevelEPKc+0xa4>)
     576:	5a82      	ldrh	r2, [r0, r2]
     578:	1a9b      	subs	r3, r3, r2
     57a:	b29b      	uxth	r3, r3
     57c:	2b02      	cmp	r3, #2
     57e:	d80e      	bhi.n	59e <_ZN3GSM11GetNumLevelEPKc+0x66>
     580:	2000      	movs	r0, #0
     582:	e022      	b.n	5ca <_ZN3GSM11GetNumLevelEPKc+0x92>
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     584:	2381      	movs	r3, #129	; 0x81
     586:	009b      	lsls	r3, r3, #2
     588:	5ac3      	ldrh	r3, [r0, r3]
     58a:	4a14      	ldr	r2, [pc, #80]	; (5dc <_ZN3GSM11GetNumLevelEPKc+0xa4>)
     58c:	5a82      	ldrh	r2, [r0, r2]
     58e:	1a9b      	subs	r3, r3, r2
     590:	b29b      	uxth	r3, r3
     592:	2280      	movs	r2, #128	; 0x80
     594:	0092      	lsls	r2, r2, #2
     596:	4694      	mov	ip, r2
     598:	4463      	add	r3, ip
     59a:	b29b      	uxth	r3, r3
     59c:	e7ee      	b.n	57c <_ZN3GSM11GetNumLevelEPKc+0x44>

    m_uart->getc(); m_uart->getc(); // skip \r\n
     59e:	f001 fc81 	bl	1ea4 <_ZN6uart_t4getcEv>
     5a2:	6920      	ldr	r0, [r4, #16]
     5a4:	f001 fc7e 	bl	1ea4 <_ZN6uart_t4getcEv>

    char level = m_uart->getc();
     5a8:	6920      	ldr	r0, [r4, #16]
     5aa:	f001 fc7b 	bl	1ea4 <_ZN6uart_t4getcEv>
    m_uart->flush_rx();
     5ae:	6923      	ldr	r3, [r4, #16]
        m_rxhead = 0;
     5b0:	2200      	movs	r2, #0
     5b2:	2181      	movs	r1, #129	; 0x81
     5b4:	0089      	lsls	r1, r1, #2
     5b6:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     5b8:	4908      	ldr	r1, [pc, #32]	; (5dc <_ZN3GSM11GetNumLevelEPKc+0xa4>)
     5ba:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     5bc:	2100      	movs	r1, #0
     5be:	2282      	movs	r2, #130	; 0x82
     5c0:	0092      	lsls	r2, r2, #2
     5c2:	5499      	strb	r1, [r3, r2]

    asm volatile("nop");
     5c4:	46c0      	nop			; (mov r8, r8)

    return level;
     5c6:	e000      	b.n	5ca <_ZN3GSM11GetNumLevelEPKc+0x92>
        return 0;
     5c8:	2000      	movs	r0, #0
}
     5ca:	b010      	add	sp, #64	; 0x40
     5cc:	bd10      	pop	{r4, pc}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	0000343c 	.word	0x0000343c
     5d4:	00000bb8 	.word	0x00000bb8
     5d8:	00003530 	.word	0x00003530
     5dc:	00000206 	.word	0x00000206

000005e0 <_ZN3GSM11SetNumLevelEPKcc>:

void GSM::SetNumLevel(const char* num, char level) {
     5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5e2:	b091      	sub	sp, #68	; 0x44
     5e4:	0004      	movs	r4, r0
     5e6:	000d      	movs	r5, r1
     5e8:	0016      	movs	r6, r2
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+FSCREATE=C:\\%s.txt", num);
     5ea:	000b      	movs	r3, r1
     5ec:	4a13      	ldr	r2, [pc, #76]	; (63c <_ZN3GSM11SetNumLevelEPKcc+0x5c>)
     5ee:	2140      	movs	r1, #64	; 0x40
     5f0:	4668      	mov	r0, sp
     5f2:	f002 f975 	bl	28e0 <sniprintf>
    Command(buf);
     5f6:	4f12      	ldr	r7, [pc, #72]	; (640 <_ZN3GSM11SetNumLevelEPKcc+0x60>)
     5f8:	003b      	movs	r3, r7
     5fa:	2200      	movs	r2, #0
     5fc:	4669      	mov	r1, sp
     5fe:	0020      	movs	r0, r4
     600:	f7ff fe30 	bl	264 <_ZN3GSM7CommandEPKcS1_j>

    snprintf(buf, sizeof(buf), "AT+FSWRITE=C:\\%s.txt,0,1,1", num);
     604:	002b      	movs	r3, r5
     606:	4a0f      	ldr	r2, [pc, #60]	; (644 <_ZN3GSM11SetNumLevelEPKcc+0x64>)
     608:	2140      	movs	r1, #64	; 0x40
     60a:	4668      	mov	r0, sp
     60c:	f002 f968 	bl	28e0 <sniprintf>
    if(!Command(buf, ">"))
     610:	003b      	movs	r3, r7
     612:	4a0d      	ldr	r2, [pc, #52]	; (648 <_ZN3GSM11SetNumLevelEPKcc+0x68>)
     614:	4669      	mov	r1, sp
     616:	0020      	movs	r0, r4
     618:	f7ff fe24 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
     61c:	2800      	cmp	r0, #0
     61e:	d101      	bne.n	624 <_ZN3GSM11SetNumLevelEPKcc+0x44>
        return;

    m_uart->write(level);

    Command("\r\n");
}
     620:	b011      	add	sp, #68	; 0x44
     622:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_uart->write(level);
     624:	0031      	movs	r1, r6
     626:	6920      	ldr	r0, [r4, #16]
     628:	f001 fc00 	bl	1e2c <_ZN6uart_t5writeEc>
    Command("\r\n");
     62c:	003b      	movs	r3, r7
     62e:	2200      	movs	r2, #0
     630:	4906      	ldr	r1, [pc, #24]	; (64c <_ZN3GSM11SetNumLevelEPKcc+0x6c>)
     632:	0020      	movs	r0, r4
     634:	f7ff fe16 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
     638:	e7f2      	b.n	620 <_ZN3GSM11SetNumLevelEPKcc+0x40>
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	00003458 	.word	0x00003458
     640:	00000bb8 	.word	0x00000bb8
     644:	00003470 	.word	0x00003470
     648:	0000348c 	.word	0x0000348c
     64c:	00003490 	.word	0x00003490

00000650 <_ZL11func_setnumP3GSMPKcS2_>:
static void func_setnum(GSM* gsm, const char* sender, const char* c_args) {
     650:	b5f0      	push	{r4, r5, r6, r7, lr}
     652:	46c6      	mov	lr, r8
     654:	b500      	push	{lr}
     656:	0006      	movs	r6, r0
     658:	000f      	movs	r7, r1
     65a:	1e14      	subs	r4, r2, #0
    if(c_args) {
     65c:	d029      	beq.n	6b2 <_ZL11func_setnumP3GSMPKcS2_+0x62>
        args = (char*)malloc(strlen(c_args));
     65e:	0010      	movs	r0, r2
     660:	f002 f9ac 	bl	29bc <strlen>
     664:	f002 f844 	bl	26f0 <malloc>
     668:	1e05      	subs	r5, r0, #0
        if(!args) {
     66a:	d01c      	beq.n	6a6 <_ZL11func_setnumP3GSMPKcS2_+0x56>
        strcpy(args, c_args);
     66c:	0021      	movs	r1, r4
     66e:	f002 f99d 	bl	29ac <strcpy>
        num = strtok(args, " ");
     672:	4b18      	ldr	r3, [pc, #96]	; (6d4 <_ZL11func_setnumP3GSMPKcS2_+0x84>)
     674:	4698      	mov	r8, r3
     676:	0019      	movs	r1, r3
     678:	0028      	movs	r0, r5
     67a:	f002 f9e1 	bl	2a40 <strtok>
     67e:	0004      	movs	r4, r0
        level = strtok(NULL, " ");
     680:	4641      	mov	r1, r8
     682:	2000      	movs	r0, #0
     684:	f002 f9dc 	bl	2a40 <strtok>
    if(num && level) {
     688:	2c00      	cmp	r4, #0
     68a:	d015      	beq.n	6b8 <_ZL11func_setnumP3GSMPKcS2_+0x68>
     68c:	2800      	cmp	r0, #0
     68e:	d013      	beq.n	6b8 <_ZL11func_setnumP3GSMPKcS2_+0x68>
        gsm->SetNumLevel(num, *level);
     690:	7802      	ldrb	r2, [r0, #0]
     692:	0021      	movs	r1, r4
     694:	0030      	movs	r0, r6
     696:	f7ff ffa3 	bl	5e0 <_ZN3GSM11SetNumLevelEPKcc>
        gsm->SendSMS(sender, "OK");
     69a:	4a0f      	ldr	r2, [pc, #60]	; (6d8 <_ZL11func_setnumP3GSMPKcS2_+0x88>)
     69c:	0039      	movs	r1, r7
     69e:	0030      	movs	r0, r6
     6a0:	f7ff fee8 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
     6a4:	e00d      	b.n	6c2 <_ZL11func_setnumP3GSMPKcS2_+0x72>
            gsm->SendSMS(sender, "malloc failed");
     6a6:	4a0d      	ldr	r2, [pc, #52]	; (6dc <_ZL11func_setnumP3GSMPKcS2_+0x8c>)
     6a8:	0039      	movs	r1, r7
     6aa:	0030      	movs	r0, r6
     6ac:	f7ff fee2 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
            return;
     6b0:	e00c      	b.n	6cc <_ZL11func_setnumP3GSMPKcS2_+0x7c>
    char* args = NULL;
     6b2:	0015      	movs	r5, r2
    char* level = NULL;
     6b4:	0010      	movs	r0, r2
     6b6:	e7e7      	b.n	688 <_ZL11func_setnumP3GSMPKcS2_+0x38>
        gsm->SendSMS(sender, "Usage: setnum <number> <level>");
     6b8:	4a09      	ldr	r2, [pc, #36]	; (6e0 <_ZL11func_setnumP3GSMPKcS2_+0x90>)
     6ba:	0039      	movs	r1, r7
     6bc:	0030      	movs	r0, r6
     6be:	f7ff fed9 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
     6c2:	2d00      	cmp	r5, #0
     6c4:	d002      	beq.n	6cc <_ZL11func_setnumP3GSMPKcS2_+0x7c>
     6c6:	0028      	movs	r0, r5
     6c8:	f002 f81c 	bl	2704 <free>
}
     6cc:	bc04      	pop	{r2}
     6ce:	4690      	mov	r8, r2
     6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	000034a4 	.word	0x000034a4
     6d8:	00003530 	.word	0x00003530
     6dc:	00003494 	.word	0x00003494
     6e0:	000034a8 	.word	0x000034a8

000006e4 <_ZN3GSM9RemoveNumEPKc>:

void GSM::RemoveNum(const char* num) {
     6e4:	b510      	push	{r4, lr}
     6e6:	b090      	sub	sp, #64	; 0x40
     6e8:	0004      	movs	r4, r0
     6ea:	000b      	movs	r3, r1
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+FSDEL=C:\\%s.txt", num);
     6ec:	4a06      	ldr	r2, [pc, #24]	; (708 <_ZN3GSM9RemoveNumEPKc+0x24>)
     6ee:	2140      	movs	r1, #64	; 0x40
     6f0:	4668      	mov	r0, sp
     6f2:	f002 f8f5 	bl	28e0 <sniprintf>
    Command(buf);
     6f6:	4b05      	ldr	r3, [pc, #20]	; (70c <_ZN3GSM9RemoveNumEPKc+0x28>)
     6f8:	2200      	movs	r2, #0
     6fa:	4669      	mov	r1, sp
     6fc:	0020      	movs	r0, r4
     6fe:	f7ff fdb1 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
}
     702:	b010      	add	sp, #64	; 0x40
     704:	bd10      	pop	{r4, pc}
     706:	46c0      	nop			; (mov r8, r8)
     708:	000034c8 	.word	0x000034c8
     70c:	00000bb8 	.word	0x00000bb8

00000710 <_ZL11func_delnumP3GSMPKcS2_>:
static void func_delnum(GSM* gsm, const char* sender, const char* args) {
     710:	b510      	push	{r4, lr}
     712:	000b      	movs	r3, r1
     714:	1e11      	subs	r1, r2, #0
    if(!args) {
     716:	d002      	beq.n	71e <_ZL11func_delnumP3GSMPKcS2_+0xe>
    gsm->RemoveNum(args);
     718:	f7ff ffe4 	bl	6e4 <_ZN3GSM9RemoveNumEPKc>
}
     71c:	bd10      	pop	{r4, pc}
        gsm->SendSMS(sender, "Usage: delnum <number>");
     71e:	4a02      	ldr	r2, [pc, #8]	; (728 <_ZL11func_delnumP3GSMPKcS2_+0x18>)
     720:	0019      	movs	r1, r3
     722:	f7ff fea7 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
        return;
     726:	e7f9      	b.n	71c <_ZL11func_delnumP3GSMPKcS2_+0xc>
     728:	000034dc 	.word	0x000034dc

0000072c <_ZN3GSM9GetAllNumEP6VectorIPcE>:

int GSM::GetAllNum(Vector<char*>* list) {
     72c:	b5f0      	push	{r4, r5, r6, r7, lr}
     72e:	46c6      	mov	lr, r8
     730:	b500      	push	{lr}
     732:	0004      	movs	r4, r0
     734:	000e      	movs	r6, r1
    if(!Command("AT+FSLS=C:\\"))
     736:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xb8>)
     738:	2200      	movs	r2, #0
     73a:	492b      	ldr	r1, [pc, #172]	; (7e8 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xbc>)
     73c:	f7ff fd92 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
     740:	2800      	cmp	r0, #0
     742:	d104      	bne.n	74e <_ZN3GSM9GetAllNumEP6VectorIPcE+0x22>
        return 0;
     744:	2700      	movs	r7, #0
    }

    free(data);

    return count;
     746:	0038      	movs	r0, r7
     748:	bc04      	pop	{r2}
     74a:	4690      	mov	r8, r2
     74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    char* data = m_uart->read();
     74e:	6920      	ldr	r0, [r4, #16]
     750:	f001 fc5a 	bl	2008 <_ZN6uart_t4readEv>
     754:	4680      	mov	r8, r0
    if(!data) return 0;
     756:	2800      	cmp	r0, #0
     758:	d042      	beq.n	7e0 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xb4>
    char* entry = strtok(data, "\r\n");
     75a:	4924      	ldr	r1, [pc, #144]	; (7ec <_ZN3GSM9GetAllNumEP6VectorIPcE+0xc0>)
     75c:	f002 f970 	bl	2a40 <strtok>
     760:	0004      	movs	r4, r0
    int count = 0;
     762:	2700      	movs	r7, #0
     764:	e010      	b.n	788 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x5c>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     766:	2004      	movs	r0, #4
     768:	f001 ffc2 	bl	26f0 <malloc>
        if(!new_data) return;
     76c:	2800      	cmp	r0, #0
     76e:	d006      	beq.n	77e <_ZN3GSM9GetAllNumEP6VectorIPcE+0x52>
        m_data = new_data;
     770:	6070      	str	r0, [r6, #4]
        *(m_data + m_size) = elem;
     772:	6833      	ldr	r3, [r6, #0]
     774:	009b      	lsls	r3, r3, #2
     776:	50c5      	str	r5, [r0, r3]
        m_size++;
     778:	6833      	ldr	r3, [r6, #0]
     77a:	3301      	adds	r3, #1
     77c:	6033      	str	r3, [r6, #0]
        entry = strtok(NULL, "\r\n");
     77e:	491b      	ldr	r1, [pc, #108]	; (7ec <_ZN3GSM9GetAllNumEP6VectorIPcE+0xc0>)
     780:	2000      	movs	r0, #0
     782:	f002 f95d 	bl	2a40 <strtok>
     786:	0004      	movs	r4, r0
    while(entry) {
     788:	2c00      	cmp	r4, #0
     78a:	d025      	beq.n	7d8 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xac>
        if(strlen(entry) > 4 && strcmp(entry + strlen(entry) - 4, ".txt") == 0) {
     78c:	0020      	movs	r0, r4
     78e:	f002 f915 	bl	29bc <strlen>
     792:	0005      	movs	r5, r0
     794:	2804      	cmp	r0, #4
     796:	d9f2      	bls.n	77e <_ZN3GSM9GetAllNumEP6VectorIPcE+0x52>
     798:	3804      	subs	r0, #4
     79a:	1820      	adds	r0, r4, r0
     79c:	4914      	ldr	r1, [pc, #80]	; (7f0 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xc4>)
     79e:	f002 f8fb 	bl	2998 <strcmp>
     7a2:	2800      	cmp	r0, #0
     7a4:	d1eb      	bne.n	77e <_ZN3GSM9GetAllNumEP6VectorIPcE+0x52>
            count++;
     7a6:	3701      	adds	r7, #1
            if(list) {
     7a8:	2e00      	cmp	r6, #0
     7aa:	d0e8      	beq.n	77e <_ZN3GSM9GetAllNumEP6VectorIPcE+0x52>
                char* file = (char*)calloc(strlen(entry) - 4 + 1, 1);
     7ac:	1ee8      	subs	r0, r5, #3
     7ae:	2101      	movs	r1, #1
     7b0:	f001 ff62 	bl	2678 <calloc>
     7b4:	0005      	movs	r5, r0
                memcpy(file, entry, strlen(entry) - 4);
     7b6:	0020      	movs	r0, r4
     7b8:	f002 f900 	bl	29bc <strlen>
     7bc:	1f02      	subs	r2, r0, #4
     7be:	0021      	movs	r1, r4
     7c0:	0028      	movs	r0, r5
     7c2:	f001 ffa9 	bl	2718 <memcpy>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     7c6:	6831      	ldr	r1, [r6, #0]
     7c8:	2900      	cmp	r1, #0
     7ca:	d0cc      	beq.n	766 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x3a>
     7cc:	3101      	adds	r1, #1
     7ce:	0089      	lsls	r1, r1, #2
     7d0:	6870      	ldr	r0, [r6, #4]
     7d2:	f002 f869 	bl	28a8 <realloc>
     7d6:	e7c9      	b.n	76c <_ZN3GSM9GetAllNumEP6VectorIPcE+0x40>
    free(data);
     7d8:	4640      	mov	r0, r8
     7da:	f001 ff93 	bl	2704 <free>
    return count;
     7de:	e7b2      	b.n	746 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x1a>
    if(!data) return 0;
     7e0:	2700      	movs	r7, #0
     7e2:	e7b0      	b.n	746 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x1a>
     7e4:	00000bb8 	.word	0x00000bb8
     7e8:	000034f4 	.word	0x000034f4
     7ec:	00003490 	.word	0x00003490
     7f0:	00003500 	.word	0x00003500

000007f4 <_ZL12func_listnumP3GSMPKcS2_>:
static void func_listnum(GSM* gsm, const char* sender, const char* args) {
     7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7f6:	46c6      	mov	lr, r8
     7f8:	b500      	push	{lr}
     7fa:	b084      	sub	sp, #16
     7fc:	0007      	movs	r7, r0
     7fe:	4688      	mov	r8, r1
    Owned = 0;
}

Str::Str()
{
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     800:	aa02      	add	r2, sp, #8
     802:	4b2f      	ldr	r3, [pc, #188]	; (8c0 <_ZL12func_listnumP3GSMPKcS2_+0xcc>)
     804:	681b      	ldr	r3, [r3, #0]
     806:	9302      	str	r3, [sp, #8]
    Capacity = 0;
     808:	9b03      	ldr	r3, [sp, #12]
     80a:	0d5b      	lsrs	r3, r3, #21
     80c:	0559      	lsls	r1, r3, #21
     80e:	9103      	str	r1, [sp, #12]
    LocalBufSize = 0;
     810:	015b      	lsls	r3, r3, #5
     812:	492c      	ldr	r1, [pc, #176]	; (8c4 <_ZL12func_listnumP3GSMPKcS2_+0xd0>)
     814:	400b      	ands	r3, r1
     816:	80d3      	strh	r3, [r2, #6]
    Owned = 0;
     818:	2300      	movs	r3, #0
     81a:	71d3      	strb	r3, [r2, #7]
    if ((int)Capacity < buf_len)
     81c:	9b03      	ldr	r3, [sp, #12]
     81e:	02db      	lsls	r3, r3, #11
     820:	0adb      	lsrs	r3, r3, #11
     822:	2b06      	cmp	r3, #6
     824:	d926      	bls.n	874 <_ZL12func_listnumP3GSMPKcS2_+0x80>
    memcpy(Data, src, buf_len);
     826:	ac02      	add	r4, sp, #8
     828:	2207      	movs	r2, #7
     82a:	4927      	ldr	r1, [pc, #156]	; (8c8 <_ZL12func_listnumP3GSMPKcS2_+0xd4>)
     82c:	9802      	ldr	r0, [sp, #8]
     82e:	f001 ff73 	bl	2718 <memcpy>
    Owned = 1;
     832:	79e2      	ldrb	r2, [r4, #7]
     834:	2380      	movs	r3, #128	; 0x80
     836:	425b      	negs	r3, r3
     838:	4313      	orrs	r3, r2
     83a:	71e3      	strb	r3, [r4, #7]
    Vector() : m_size(0), m_data(NULL) {}
     83c:	2300      	movs	r3, #0
     83e:	9300      	str	r3, [sp, #0]
     840:	9301      	str	r3, [sp, #4]
    gsm->GetAllNum(&list);
     842:	4669      	mov	r1, sp
     844:	0038      	movs	r0, r7
     846:	f7ff ff71 	bl	72c <_ZN3GSM9GetAllNumEP6VectorIPcE>
    T& operator[](size_t idx) {
        return *(m_data + idx);
    }

    T* begin() {
        return m_data;
     84a:	9d01      	ldr	r5, [sp, #4]
    }

    T* end() {
        return m_data + m_size;
     84c:	9b00      	ldr	r3, [sp, #0]
     84e:	009e      	lsls	r6, r3, #2
     850:	19ae      	adds	r6, r5, r6
    for(auto num : list) {
     852:	42b5      	cmp	r5, r6
     854:	d013      	beq.n	87e <_ZL12func_listnumP3GSMPKcS2_+0x8a>
     856:	cd10      	ldmia	r5!, {r4}
        str.appendf("%s: %c\n", num, gsm->GetNumLevel(num));
     858:	0021      	movs	r1, r4
     85a:	0038      	movs	r0, r7
     85c:	f7ff fe6c 	bl	538 <_ZN3GSM11GetNumLevelEPKc>
     860:	0003      	movs	r3, r0
     862:	0022      	movs	r2, r4
     864:	4919      	ldr	r1, [pc, #100]	; (8cc <_ZL12func_listnumP3GSMPKcS2_+0xd8>)
     866:	a802      	add	r0, sp, #8
     868:	f000 fe02 	bl	1470 <_ZN3Str7appendfEPKcz>
        free(num);
     86c:	0020      	movs	r0, r4
     86e:	f001 ff49 	bl	2704 <free>
    for(auto num : list) {
     872:	e7ee      	b.n	852 <_ZL12func_listnumP3GSMPKcS2_+0x5e>
        reserve_discard(buf_len);
     874:	2107      	movs	r1, #7
     876:	0010      	movs	r0, r2
     878:	f000 fd82 	bl	1380 <_ZN3Str15reserve_discardEi>
     87c:	e7d3      	b.n	826 <_ZL12func_listnumP3GSMPKcS2_+0x32>
    gsm->SendSMS(sender, str.c_str());
     87e:	9a02      	ldr	r2, [sp, #8]
     880:	4641      	mov	r1, r8
     882:	0038      	movs	r0, r7
     884:	f7ff fdf6 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
        if(m_data) free(m_data);
     888:	9801      	ldr	r0, [sp, #4]
     88a:	2800      	cmp	r0, #0
     88c:	d001      	beq.n	892 <_ZL12func_listnumP3GSMPKcS2_+0x9e>
     88e:	f001 ff39 	bl	2704 <free>
        if (Owned && !is_using_local_buf())
     892:	ab02      	add	r3, sp, #8
     894:	79db      	ldrb	r3, [r3, #7]
     896:	b25b      	sxtb	r3, r3
     898:	2b00      	cmp	r3, #0
     89a:	db03      	blt.n	8a4 <_ZL12func_listnumP3GSMPKcS2_+0xb0>
}
     89c:	b004      	add	sp, #16
     89e:	bc04      	pop	{r2}
     8a0:	4690      	mov	r8, r2
     8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     8a4:	9802      	ldr	r0, [sp, #8]
     8a6:	ab04      	add	r3, sp, #16
     8a8:	4298      	cmp	r0, r3
     8aa:	d002      	beq.n	8b2 <_ZL12func_listnumP3GSMPKcS2_+0xbe>
            STR_MEMFREE(Data);
     8ac:	f001 ff2a 	bl	2704 <free>
     8b0:	e7f4      	b.n	89c <_ZL12func_listnumP3GSMPKcS2_+0xa8>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     8b2:	ab02      	add	r3, sp, #8
     8b4:	88da      	ldrh	r2, [r3, #6]
     8b6:	4b06      	ldr	r3, [pc, #24]	; (8d0 <_ZL12func_listnumP3GSMPKcS2_+0xdc>)
     8b8:	421a      	tst	r2, r3
     8ba:	d1ef      	bne.n	89c <_ZL12func_listnumP3GSMPKcS2_+0xa8>
     8bc:	e7f6      	b.n	8ac <_ZL12func_listnumP3GSMPKcS2_+0xb8>
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	20000010 	.word	0x20000010
     8c4:	ffff801f 	.word	0xffff801f
     8c8:	00003508 	.word	0x00003508
     8cc:	00003510 	.word	0x00003510
     8d0:	00007fe0 	.word	0x00007fe0

000008d4 <_ZN3GSM10ProcessSMSEPKcS1_>:
void GSM::ProcessSMS(const char* text, const char* sender) {
     8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8d6:	46ce      	mov	lr, r9
     8d8:	4647      	mov	r7, r8
     8da:	b580      	push	{r7, lr}
     8dc:	4680      	mov	r8, r0
     8de:	000e      	movs	r6, r1
     8e0:	4691      	mov	r9, r2
    char* args_start = strchr(text, ' ');
     8e2:	2120      	movs	r1, #32
     8e4:	0030      	movs	r0, r6
     8e6:	f002 f849 	bl	297c <strchr>
     8ea:	1e07      	subs	r7, r0, #0
    if(args_start) {
     8ec:	d002      	beq.n	8f4 <_ZN3GSM10ProcessSMSEPKcS1_+0x20>
        *args_start = '\0';
     8ee:	2300      	movs	r3, #0
     8f0:	7003      	strb	r3, [r0, #0]
        args_start += 1;
     8f2:	3701      	adds	r7, #1
        return m_data;
     8f4:	4643      	mov	r3, r8
     8f6:	68dc      	ldr	r4, [r3, #12]
        return m_data + m_size;
     8f8:	689b      	ldr	r3, [r3, #8]
     8fa:	005d      	lsls	r5, r3, #1
     8fc:	18ed      	adds	r5, r5, r3
     8fe:	00ad      	lsls	r5, r5, #2
     900:	1965      	adds	r5, r4, r5
    for(auto& func : m_smsfuncs) {
     902:	42ac      	cmp	r4, r5
     904:	d013      	beq.n	92e <_ZN3GSM10ProcessSMSEPKcS1_+0x5a>
        if(strcasecmp(func.key, text) == 0) {
     906:	0031      	movs	r1, r6
     908:	6820      	ldr	r0, [r4, #0]
     90a:	f002 f81d 	bl	2948 <strcasecmp>
     90e:	2800      	cmp	r0, #0
     910:	d001      	beq.n	916 <_ZN3GSM10ProcessSMSEPKcS1_+0x42>
    for(auto& func : m_smsfuncs) {
     912:	340c      	adds	r4, #12
     914:	e7f5      	b.n	902 <_ZN3GSM10ProcessSMSEPKcS1_+0x2e>
            if(GetNumLevel(sender) >= func.level || GetAllNum() == 0)
     916:	4649      	mov	r1, r9
     918:	4640      	mov	r0, r8
     91a:	f7ff fe0d 	bl	538 <_ZN3GSM11GetNumLevelEPKc>
     91e:	7a23      	ldrb	r3, [r4, #8]
     920:	4298      	cmp	r0, r3
     922:	d308      	bcc.n	936 <_ZN3GSM10ProcessSMSEPKcS1_+0x62>
                func.callback(this, sender, args_start);
     924:	6863      	ldr	r3, [r4, #4]
     926:	003a      	movs	r2, r7
     928:	4649      	mov	r1, r9
     92a:	4640      	mov	r0, r8
     92c:	4798      	blx	r3
}
     92e:	bc0c      	pop	{r2, r3}
     930:	4690      	mov	r8, r2
     932:	4699      	mov	r9, r3
     934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(GetNumLevel(sender) >= func.level || GetAllNum() == 0)
     936:	2100      	movs	r1, #0
     938:	4640      	mov	r0, r8
     93a:	f7ff fef7 	bl	72c <_ZN3GSM9GetAllNumEP6VectorIPcE>
     93e:	2800      	cmp	r0, #0
     940:	d1f5      	bne.n	92e <_ZN3GSM10ProcessSMSEPKcS1_+0x5a>
     942:	e7ef      	b.n	924 <_ZN3GSM10ProcessSMSEPKcS1_+0x50>

00000944 <_ZN3GSM7ReadSMSEi>:
void GSM::ReadSMS(int index) {
     944:	b5f0      	push	{r4, r5, r6, r7, lr}
     946:	b091      	sub	sp, #68	; 0x44
     948:	0004      	movs	r4, r0
     94a:	000b      	movs	r3, r1
    snprintf(buf, sizeof(buf), "AT+CMGR=%d", index);
     94c:	4a26      	ldr	r2, [pc, #152]	; (9e8 <_ZN3GSM7ReadSMSEi+0xa4>)
     94e:	2140      	movs	r1, #64	; 0x40
     950:	4668      	mov	r0, sp
     952:	f001 ffc5 	bl	28e0 <sniprintf>
    if(!Command(buf, "+CMGR"))
     956:	4b25      	ldr	r3, [pc, #148]	; (9ec <_ZN3GSM7ReadSMSEi+0xa8>)
     958:	4a25      	ldr	r2, [pc, #148]	; (9f0 <_ZN3GSM7ReadSMSEi+0xac>)
     95a:	4669      	mov	r1, sp
     95c:	0020      	movs	r0, r4
     95e:	f7ff fc81 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
     962:	2800      	cmp	r0, #0
     964:	d101      	bne.n	96a <_ZN3GSM7ReadSMSEi+0x26>
}
     966:	b011      	add	sp, #68	; 0x44
     968:	bdf0      	pop	{r4, r5, r6, r7, pc}
    char* data = m_uart->read();
     96a:	6920      	ldr	r0, [r4, #16]
     96c:	f001 fb4c 	bl	2008 <_ZN6uart_t4readEv>
     970:	1e07      	subs	r7, r0, #0
    if(!data) return;
     972:	d0f8      	beq.n	966 <_ZN3GSM7ReadSMSEi+0x22>
    char* cmgr_start = strstr(data, "+CMGR"); // this shouldn't return null
     974:	491e      	ldr	r1, [pc, #120]	; (9f0 <_ZN3GSM7ReadSMSEi+0xac>)
     976:	f002 f84d 	bl	2a14 <strstr>
     97a:	0005      	movs	r5, r0
    char* text = strchr(cmgr_start, '\n');
     97c:	210a      	movs	r1, #10
     97e:	f001 fffd 	bl	297c <strchr>
    if(!text) {
     982:	2800      	cmp	r0, #0
     984:	d020      	beq.n	9c8 <_ZN3GSM7ReadSMSEi+0x84>
    text += 1; // ignore \n
     986:	1c46      	adds	r6, r0, #1
    char* text_end = strstr(text, "\r\n\r\nOK");
     988:	491a      	ldr	r1, [pc, #104]	; (9f4 <_ZN3GSM7ReadSMSEi+0xb0>)
     98a:	0030      	movs	r0, r6
     98c:	f002 f842 	bl	2a14 <strstr>
    if(!text_end) {
     990:	2800      	cmp	r0, #0
     992:	d01d      	beq.n	9d0 <_ZN3GSM7ReadSMSEi+0x8c>
    *text_end = '\0';
     994:	2300      	movs	r3, #0
     996:	7003      	strb	r3, [r0, #0]
    char* sender = strstr(cmgr_start, ",\"");
     998:	4917      	ldr	r1, [pc, #92]	; (9f8 <_ZN3GSM7ReadSMSEi+0xb4>)
     99a:	0028      	movs	r0, r5
     99c:	f002 f83a 	bl	2a14 <strstr>
    if(!sender) {
     9a0:	2800      	cmp	r0, #0
     9a2:	d019      	beq.n	9d8 <_ZN3GSM7ReadSMSEi+0x94>
    sender += 2;
     9a4:	1c85      	adds	r5, r0, #2
    if(!strchr(sender, '"')) {
     9a6:	2122      	movs	r1, #34	; 0x22
     9a8:	0028      	movs	r0, r5
     9aa:	f001 ffe7 	bl	297c <strchr>
     9ae:	2800      	cmp	r0, #0
     9b0:	d016      	beq.n	9e0 <_ZN3GSM7ReadSMSEi+0x9c>
    *strchr(sender, '"') = '\0';
     9b2:	2300      	movs	r3, #0
     9b4:	7003      	strb	r3, [r0, #0]
    ProcessSMS(text, sender);
     9b6:	002a      	movs	r2, r5
     9b8:	0031      	movs	r1, r6
     9ba:	0020      	movs	r0, r4
     9bc:	f7ff ff8a 	bl	8d4 <_ZN3GSM10ProcessSMSEPKcS1_>
    free(data);
     9c0:	0038      	movs	r0, r7
     9c2:	f001 fe9f 	bl	2704 <free>
     9c6:	e7ce      	b.n	966 <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     9c8:	0038      	movs	r0, r7
     9ca:	f001 fe9b 	bl	2704 <free>
        return;
     9ce:	e7ca      	b.n	966 <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     9d0:	0038      	movs	r0, r7
     9d2:	f001 fe97 	bl	2704 <free>
        return;
     9d6:	e7c6      	b.n	966 <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     9d8:	0038      	movs	r0, r7
     9da:	f001 fe93 	bl	2704 <free>
        return;
     9de:	e7c2      	b.n	966 <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     9e0:	0038      	movs	r0, r7
     9e2:	f001 fe8f 	bl	2704 <free>
        return;
     9e6:	e7be      	b.n	966 <_ZN3GSM7ReadSMSEi+0x22>
     9e8:	00003518 	.word	0x00003518
     9ec:	00000bb8 	.word	0x00000bb8
     9f0:	00003524 	.word	0x00003524
     9f4:	0000352c 	.word	0x0000352c
     9f8:	00003534 	.word	0x00003534

000009fc <_ZN3GSM4PollEv>:
void GSM::Poll() {
     9fc:	b570      	push	{r4, r5, r6, lr}
     9fe:	0004      	movs	r4, r0
    if(!m_uart->available()) return;
     a00:	6902      	ldr	r2, [r0, #16]
        if(m_rxhead >= m_rxtail)
     a02:	2381      	movs	r3, #129	; 0x81
     a04:	009b      	lsls	r3, r3, #2
     a06:	5ad1      	ldrh	r1, [r2, r3]
     a08:	b289      	uxth	r1, r1
     a0a:	4b20      	ldr	r3, [pc, #128]	; (a8c <_ZN3GSM4PollEv+0x90>)
     a0c:	5ad3      	ldrh	r3, [r2, r3]
     a0e:	b29b      	uxth	r3, r3
     a10:	4299      	cmp	r1, r3
     a12:	d309      	bcc.n	a28 <_ZN3GSM4PollEv+0x2c>
            return m_rxhead - m_rxtail;
     a14:	2381      	movs	r3, #129	; 0x81
     a16:	009b      	lsls	r3, r3, #2
     a18:	5ad3      	ldrh	r3, [r2, r3]
     a1a:	491c      	ldr	r1, [pc, #112]	; (a8c <_ZN3GSM4PollEv+0x90>)
     a1c:	5a52      	ldrh	r2, [r2, r1]
     a1e:	1a9b      	subs	r3, r3, r2
     a20:	b29b      	uxth	r3, r3
     a22:	2b00      	cmp	r3, #0
     a24:	d10d      	bne.n	a42 <_ZN3GSM4PollEv+0x46>
}
     a26:	bd70      	pop	{r4, r5, r6, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     a28:	2381      	movs	r3, #129	; 0x81
     a2a:	009b      	lsls	r3, r3, #2
     a2c:	5ad3      	ldrh	r3, [r2, r3]
     a2e:	4917      	ldr	r1, [pc, #92]	; (a8c <_ZN3GSM4PollEv+0x90>)
     a30:	5a52      	ldrh	r2, [r2, r1]
     a32:	1a9b      	subs	r3, r3, r2
     a34:	b29b      	uxth	r3, r3
     a36:	2280      	movs	r2, #128	; 0x80
     a38:	0092      	lsls	r2, r2, #2
     a3a:	4694      	mov	ip, r2
     a3c:	4463      	add	r3, ip
     a3e:	b29b      	uxth	r3, r3
     a40:	e7ef      	b.n	a22 <_ZN3GSM4PollEv+0x26>
    delay_usec(100000);
     a42:	4813      	ldr	r0, [pc, #76]	; (a90 <_ZN3GSM4PollEv+0x94>)
     a44:	f002 fef8 	bl	3838 <__delay_usec_veneer>
    char* data = m_uart->read();
     a48:	6920      	ldr	r0, [r4, #16]
     a4a:	f001 fadd 	bl	2008 <_ZN6uart_t4readEv>
     a4e:	1e05      	subs	r5, r0, #0
    if(!data) return;
     a50:	d0e9      	beq.n	a26 <_ZN3GSM4PollEv+0x2a>
    if(strstr(data, "RING")) {
     a52:	4910      	ldr	r1, [pc, #64]	; (a94 <_ZN3GSM4PollEv+0x98>)
     a54:	f001 ffde 	bl	2a14 <strstr>
     a58:	2800      	cmp	r0, #0
     a5a:	d009      	beq.n	a70 <_ZN3GSM4PollEv+0x74>
        Command("ATH"); // Disconnect call
     a5c:	4b0e      	ldr	r3, [pc, #56]	; (a98 <_ZN3GSM4PollEv+0x9c>)
     a5e:	2200      	movs	r2, #0
     a60:	490e      	ldr	r1, [pc, #56]	; (a9c <_ZN3GSM4PollEv+0xa0>)
     a62:	0020      	movs	r0, r4
     a64:	f7ff fbfe 	bl	264 <_ZN3GSM7CommandEPKcS1_j>
    free(data);
     a68:	0028      	movs	r0, r5
     a6a:	f001 fe4b 	bl	2704 <free>
     a6e:	e7da      	b.n	a26 <_ZN3GSM4PollEv+0x2a>
    } else if(strstr(data, "+CMTI")) {
     a70:	490b      	ldr	r1, [pc, #44]	; (aa0 <_ZN3GSM4PollEv+0xa4>)
     a72:	0028      	movs	r0, r5
     a74:	f001 ffce 	bl	2a14 <strstr>
     a78:	2800      	cmp	r0, #0
     a7a:	d0f5      	beq.n	a68 <_ZN3GSM4PollEv+0x6c>
        ReadSMS(find_num(strstr(data, "+CMTI")));
     a7c:	f7ff fb2a 	bl	d4 <_ZL8find_numPKc>
     a80:	0001      	movs	r1, r0
     a82:	0020      	movs	r0, r4
     a84:	f7ff ff5e 	bl	944 <_ZN3GSM7ReadSMSEi>
     a88:	e7ee      	b.n	a68 <_ZN3GSM4PollEv+0x6c>
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	00000206 	.word	0x00000206
     a90:	000186a0 	.word	0x000186a0
     a94:	00003538 	.word	0x00003538
     a98:	00000bb8 	.word	0x00000bb8
     a9c:	00003540 	.word	0x00003540
     aa0:	00003544 	.word	0x00003544

00000aa4 <_ZN4RF243csnEb>:
#define pgm_read_byte(x) (*(uint8_t*)(x))

/****************************************************************************/

void RF24::csn(bool mode)
{
     aa4:	b510      	push	{r4, lr}
    }
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }
     aa6:	68c3      	ldr	r3, [r0, #12]
     aa8:	6904      	ldr	r4, [r0, #16]
        if(en)
     aaa:	2900      	cmp	r1, #0
     aac:	d00a      	beq.n	ac4 <_ZN4RF243csnEb+0x20>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     aae:	2201      	movs	r2, #1
     ab0:	40a2      	lsls	r2, r4
     ab2:	01db      	lsls	r3, r3, #7
     ab4:	4907      	ldr	r1, [pc, #28]	; (ad4 <_ZN4RF243csnEb+0x30>)
     ab6:	468c      	mov	ip, r1
     ab8:	4463      	add	r3, ip
     aba:	619a      	str	r2, [r3, #24]
      _SPI.chipSelect(csn_pin);
    #endif // defined(RF24_RPi)

    #if !defined(RF24_LINUX)
    digitalWrite(csn_pin, mode);
    delay_usec(csDelay);
     abc:	6a40      	ldr	r0, [r0, #36]	; 0x24
     abe:	f002 febb 	bl	3838 <__delay_usec_veneer>
    #endif // !defined(RF24_LINUX)
}
     ac2:	bd10      	pop	{r4, pc}
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     ac4:	2201      	movs	r2, #1
     ac6:	40a2      	lsls	r2, r4
     ac8:	01db      	lsls	r3, r3, #7
     aca:	4902      	ldr	r1, [pc, #8]	; (ad4 <_ZN4RF243csnEb+0x30>)
     acc:	468c      	mov	ip, r1
     ace:	4463      	add	r3, ip
     ad0:	615a      	str	r2, [r3, #20]
     ad2:	e7f3      	b.n	abc <_ZN4RF243csnEb+0x18>
     ad4:	41004400 	.word	0x41004400

00000ad8 <_ZN4RF242ceEb>:

/****************************************************************************/

void RF24::ce(bool level)
{
     ad8:	b570      	push	{r4, r5, r6, lr}
     ada:	b084      	sub	sp, #16
     adc:	0004      	movs	r4, r0
     ade:	000d      	movs	r5, r1
    //Allow for 3-pin use on ATTiny
    if (ce_pin != csn_pin) {
     ae0:	4669      	mov	r1, sp
     ae2:	0003      	movs	r3, r0
     ae4:	330c      	adds	r3, #12
     ae6:	000a      	movs	r2, r1
     ae8:	cb41      	ldmia	r3!, {r0, r6}
     aea:	c241      	stmia	r2!, {r0, r6}
        return !operator==(b);
     aec:	2208      	movs	r2, #8
     aee:	a802      	add	r0, sp, #8
     af0:	f001 fe12 	bl	2718 <memcpy>
        return port == b.port && pin == b.pin;
     af4:	6863      	ldr	r3, [r4, #4]
     af6:	9a02      	ldr	r2, [sp, #8]
     af8:	4293      	cmp	r3, r2
     afa:	d00b      	beq.n	b14 <_ZN4RF242ceEb+0x3c>
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }
     afc:	68a1      	ldr	r1, [r4, #8]
        if(en)
     afe:	2d00      	cmp	r5, #0
     b00:	d00d      	beq.n	b1e <_ZN4RF242ceEb+0x46>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     b02:	2201      	movs	r2, #1
     b04:	408a      	lsls	r2, r1
     b06:	01db      	lsls	r3, r3, #7
     b08:	4909      	ldr	r1, [pc, #36]	; (b30 <_ZN4RF242ceEb+0x58>)
     b0a:	468c      	mov	ip, r1
     b0c:	4463      	add	r3, ip
     b0e:	619a      	str	r2, [r3, #24]
        digitalWrite(ce_pin, level);
    }
}
     b10:	b004      	add	sp, #16
     b12:	bd70      	pop	{r4, r5, r6, pc}
        return port == b.port && pin == b.pin;
     b14:	68a2      	ldr	r2, [r4, #8]
     b16:	9903      	ldr	r1, [sp, #12]
     b18:	428a      	cmp	r2, r1
     b1a:	d1ef      	bne.n	afc <_ZN4RF242ceEb+0x24>
     b1c:	e7f8      	b.n	b10 <_ZN4RF242ceEb+0x38>
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     b1e:	2201      	movs	r2, #1
     b20:	408a      	lsls	r2, r1
     b22:	01db      	lsls	r3, r3, #7
     b24:	4902      	ldr	r1, [pc, #8]	; (b30 <_ZN4RF242ceEb+0x58>)
     b26:	468c      	mov	ip, r1
     b28:	4463      	add	r3, ip
     b2a:	615a      	str	r2, [r3, #20]
     b2c:	e7f0      	b.n	b10 <_ZN4RF242ceEb+0x38>
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	41004400 	.word	0x41004400

00000b34 <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     b34:	b570      	push	{r4, r5, r6, lr}
     b36:	0004      	movs	r4, r0
     b38:	000d      	movs	r5, r1
    csn(LOW);
     b3a:	2100      	movs	r1, #0
     b3c:	f7ff ffb2 	bl	aa4 <_ZN4RF243csnEb>

    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    _SPI.Transfer(R_REGISTER | (REGISTER_MASK & reg));
     b40:	211f      	movs	r1, #31
     b42:	4029      	ands	r1, r5
     b44:	6820      	ldr	r0, [r4, #0]
     b46:	f000 ff25 	bl	1994 <_ZN5spi_t8TransferEh>
    result = _SPI.Transfer(0xff);
     b4a:	21ff      	movs	r1, #255	; 0xff
     b4c:	6820      	ldr	r0, [r4, #0]
     b4e:	f000 ff21 	bl	1994 <_ZN5spi_t8TransferEh>
     b52:	0005      	movs	r5, r0
    csn(HIGH);
     b54:	2101      	movs	r1, #1
     b56:	0020      	movs	r0, r4
     b58:	f7ff ffa4 	bl	aa4 <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return result;
}
     b5c:	0028      	movs	r0, r5
     b5e:	bd70      	pop	{r4, r5, r6, pc}

00000b60 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b62:	46ce      	mov	lr, r9
     b64:	4647      	mov	r7, r8
     b66:	b580      	push	{r7, lr}
     b68:	0007      	movs	r7, r0
     b6a:	000c      	movs	r4, r1
     b6c:	0016      	movs	r6, r2
     b6e:	001d      	movs	r5, r3
    csn(LOW);
     b70:	2100      	movs	r1, #0
     b72:	f7ff ff97 	bl	aa4 <_ZN4RF243csnEb>
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     b76:	211f      	movs	r1, #31
     b78:	4021      	ands	r1, r4
     b7a:	2320      	movs	r3, #32
     b7c:	4319      	orrs	r1, r3
     b7e:	b2c9      	uxtb	r1, r1
     b80:	6838      	ldr	r0, [r7, #0]
     b82:	f000 ff07 	bl	1994 <_ZN5spi_t8TransferEh>
     b86:	4681      	mov	r9, r0
    while (len--) {
     b88:	1e6c      	subs	r4, r5, #1
     b8a:	b2e4      	uxtb	r4, r4
     b8c:	2d00      	cmp	r5, #0
     b8e:	d008      	beq.n	ba2 <_ZN4RF2414write_registerEhPKhh+0x42>
        _SPI.Transfer(*buf++);
     b90:	1c73      	adds	r3, r6, #1
     b92:	4698      	mov	r8, r3
     b94:	7831      	ldrb	r1, [r6, #0]
     b96:	6838      	ldr	r0, [r7, #0]
     b98:	f000 fefc 	bl	1994 <_ZN5spi_t8TransferEh>
    while (len--) {
     b9c:	0025      	movs	r5, r4
        _SPI.Transfer(*buf++);
     b9e:	4646      	mov	r6, r8
    while (len--) {
     ba0:	e7f2      	b.n	b88 <_ZN4RF2414write_registerEhPKhh+0x28>
    csn(HIGH);
     ba2:	2101      	movs	r1, #1
     ba4:	0038      	movs	r0, r7
     ba6:	f7ff ff7d 	bl	aa4 <_ZN4RF243csnEb>
    }
    endTransaction();
    #endif // !defined(RF24_LINUX)

    return status;
}
     baa:	4648      	mov	r0, r9
     bac:	bc0c      	pop	{r2, r3}
     bae:	4690      	mov	r8, r2
     bb0:	4699      	mov	r9, r3
     bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000bb4 <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     bb4:	b570      	push	{r4, r5, r6, lr}
     bb6:	0004      	movs	r4, r0
     bb8:	000d      	movs	r5, r1
     bba:	0016      	movs	r6, r2
    csn(LOW);
     bbc:	2100      	movs	r1, #0
     bbe:	f7ff ff71 	bl	aa4 <_ZN4RF243csnEb>
    status = *prx++; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     bc2:	211f      	movs	r1, #31
     bc4:	4029      	ands	r1, r5
     bc6:	2320      	movs	r3, #32
     bc8:	4319      	orrs	r1, r3
     bca:	b2c9      	uxtb	r1, r1
     bcc:	6820      	ldr	r0, [r4, #0]
     bce:	f000 fee1 	bl	1994 <_ZN5spi_t8TransferEh>
     bd2:	0005      	movs	r5, r0
    _SPI.Transfer(value);
     bd4:	0031      	movs	r1, r6
     bd6:	6820      	ldr	r0, [r4, #0]
     bd8:	f000 fedc 	bl	1994 <_ZN5spi_t8TransferEh>
    csn(HIGH);
     bdc:	2101      	movs	r1, #1
     bde:	0020      	movs	r0, r4
     be0:	f7ff ff60 	bl	aa4 <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     be4:	0028      	movs	r0, r5
     be6:	bd70      	pop	{r4, r5, r6, pc}

00000be8 <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
     be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bea:	46ce      	mov	lr, r9
     bec:	4647      	mov	r7, r8
     bee:	b580      	push	{r7, lr}
     bf0:	0007      	movs	r7, r0
     bf2:	000c      	movs	r4, r1
     bf4:	0016      	movs	r6, r2
     bf6:	4698      	mov	r8, r3
    uint8_t status;
    const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

    data_len = rf24_min(data_len, payload_size);
     bf8:	7dc5      	ldrb	r5, [r0, #23]
     bfa:	4295      	cmp	r5, r2
     bfc:	d800      	bhi.n	c00 <_ZN4RF2413write_payloadEPKvhh+0x18>
     bfe:	002e      	movs	r6, r5
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     c00:	7e3b      	ldrb	r3, [r7, #24]
     c02:	2b00      	cmp	r3, #0
     c04:	d117      	bne.n	c36 <_ZN4RF2413write_payloadEPKvhh+0x4e>
     c06:	1bad      	subs	r5, r5, r6
     c08:	b2ed      	uxtb	r5, r5
    csn(LOW);
     c0a:	2100      	movs	r1, #0
     c0c:	0038      	movs	r0, r7
     c0e:	f7ff ff49 	bl	aa4 <_ZN4RF243csnEb>
    endTransaction();

    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(writeType);
     c12:	4641      	mov	r1, r8
     c14:	6838      	ldr	r0, [r7, #0]
     c16:	f000 febd 	bl	1994 <_ZN5spi_t8TransferEh>
     c1a:	4680      	mov	r8, r0
    while (data_len--) {
     c1c:	1e73      	subs	r3, r6, #1
     c1e:	b2db      	uxtb	r3, r3
     c20:	4699      	mov	r9, r3
     c22:	2e00      	cmp	r6, #0
     c24:	d009      	beq.n	c3a <_ZN4RF2413write_payloadEPKvhh+0x52>
        _SPI.Transfer(*current++);
     c26:	1c66      	adds	r6, r4, #1
     c28:	7821      	ldrb	r1, [r4, #0]
     c2a:	6838      	ldr	r0, [r7, #0]
     c2c:	f000 feb2 	bl	1994 <_ZN5spi_t8TransferEh>
     c30:	0034      	movs	r4, r6
    while (data_len--) {
     c32:	464e      	mov	r6, r9
     c34:	e7f2      	b.n	c1c <_ZN4RF2413write_payloadEPKvhh+0x34>
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     c36:	2500      	movs	r5, #0
     c38:	e7e7      	b.n	c0a <_ZN4RF2413write_payloadEPKvhh+0x22>
    }
    while (blank_len--) {
     c3a:	1e6c      	subs	r4, r5, #1
     c3c:	b2e4      	uxtb	r4, r4
     c3e:	2d00      	cmp	r5, #0
     c40:	d005      	beq.n	c4e <_ZN4RF2413write_payloadEPKvhh+0x66>
        _SPI.Transfer(0);
     c42:	2100      	movs	r1, #0
     c44:	6838      	ldr	r0, [r7, #0]
     c46:	f000 fea5 	bl	1994 <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     c4a:	0025      	movs	r5, r4
     c4c:	e7f5      	b.n	c3a <_ZN4RF2413write_payloadEPKvhh+0x52>
    csn(HIGH);
     c4e:	2101      	movs	r1, #1
     c50:	0038      	movs	r0, r7
     c52:	f7ff ff27 	bl	aa4 <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     c56:	4640      	mov	r0, r8
     c58:	bc0c      	pop	{r2, r3}
     c5a:	4690      	mov	r8, r2
     c5c:	4699      	mov	r9, r3
     c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000c60 <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t data_len)
{
     c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c62:	46ce      	mov	lr, r9
     c64:	4647      	mov	r7, r8
     c66:	b580      	push	{r7, lr}
     c68:	0007      	movs	r7, r0
     c6a:	000c      	movs	r4, r1
     c6c:	0016      	movs	r6, r2
    uint8_t status;
    uint8_t* current = reinterpret_cast<uint8_t*>(buf);

    if (data_len > payload_size) {
     c6e:	7dc5      	ldrb	r5, [r0, #23]
     c70:	4295      	cmp	r5, r2
     c72:	d200      	bcs.n	c76 <_ZN4RF2412read_payloadEPvh+0x16>
        data_len = payload_size;
     c74:	002e      	movs	r6, r5
    }
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     c76:	7e3b      	ldrb	r3, [r7, #24]
     c78:	2b00      	cmp	r3, #0
     c7a:	d118      	bne.n	cae <_ZN4RF2412read_payloadEPvh+0x4e>
     c7c:	1bad      	subs	r5, r5, r6
     c7e:	b2ed      	uxtb	r5, r5
    csn(LOW);
     c80:	2100      	movs	r1, #0
     c82:	0038      	movs	r0, r7
     c84:	f7ff ff0e 	bl	aa4 <_ZN4RF243csnEb>
    }
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(R_RX_PAYLOAD);
     c88:	2161      	movs	r1, #97	; 0x61
     c8a:	6838      	ldr	r0, [r7, #0]
     c8c:	f000 fe82 	bl	1994 <_ZN5spi_t8TransferEh>
     c90:	4680      	mov	r8, r0
    while (data_len--) {
     c92:	1e73      	subs	r3, r6, #1
     c94:	b2db      	uxtb	r3, r3
     c96:	4699      	mov	r9, r3
     c98:	2e00      	cmp	r6, #0
     c9a:	d00a      	beq.n	cb2 <_ZN4RF2412read_payloadEPvh+0x52>
        *current++ = _SPI.Transfer(0xFF);
     c9c:	1c66      	adds	r6, r4, #1
     c9e:	21ff      	movs	r1, #255	; 0xff
     ca0:	6838      	ldr	r0, [r7, #0]
     ca2:	f000 fe77 	bl	1994 <_ZN5spi_t8TransferEh>
     ca6:	7020      	strb	r0, [r4, #0]
     ca8:	0034      	movs	r4, r6
    while (data_len--) {
     caa:	464e      	mov	r6, r9
     cac:	e7f1      	b.n	c92 <_ZN4RF2412read_payloadEPvh+0x32>
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     cae:	2500      	movs	r5, #0
     cb0:	e7e6      	b.n	c80 <_ZN4RF2412read_payloadEPvh+0x20>
    }
    while (blank_len--) {
     cb2:	1e6c      	subs	r4, r5, #1
     cb4:	b2e4      	uxtb	r4, r4
     cb6:	2d00      	cmp	r5, #0
     cb8:	d005      	beq.n	cc6 <_ZN4RF2412read_payloadEPvh+0x66>
        _SPI.Transfer(0xff);
     cba:	21ff      	movs	r1, #255	; 0xff
     cbc:	6838      	ldr	r0, [r7, #0]
     cbe:	f000 fe69 	bl	1994 <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     cc2:	0025      	movs	r5, r4
     cc4:	e7f5      	b.n	cb2 <_ZN4RF2412read_payloadEPvh+0x52>
    csn(HIGH);
     cc6:	2101      	movs	r1, #1
     cc8:	0038      	movs	r0, r7
     cca:	f7ff feeb 	bl	aa4 <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     cce:	4640      	mov	r0, r8
     cd0:	bc0c      	pop	{r2, r3}
     cd2:	4690      	mov	r8, r2
     cd4:	4699      	mov	r9, r3
     cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000cd8 <_ZN4RF248spiTransEh>:
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd)
{
     cd8:	b570      	push	{r4, r5, r6, lr}
     cda:	0004      	movs	r4, r0
     cdc:	000d      	movs	r5, r1
    csn(LOW);
     cde:	2100      	movs	r1, #0
     ce0:	f7ff fee0 	bl	aa4 <_ZN4RF243csnEb>

    uint8_t status;

    beginTransaction();
    status = _SPI.Transfer(cmd);
     ce4:	0029      	movs	r1, r5
     ce6:	6820      	ldr	r0, [r4, #0]
     ce8:	f000 fe54 	bl	1994 <_ZN5spi_t8TransferEh>
     cec:	0005      	movs	r5, r0
    csn(HIGH);
     cee:	2101      	movs	r1, #1
     cf0:	0020      	movs	r0, r4
     cf2:	f7ff fed7 	bl	aa4 <_ZN4RF243csnEb>
    endTransaction();

    return status;
}
     cf6:	0028      	movs	r0, r5
     cf8:	bd70      	pop	{r4, r5, r6, pc}

00000cfa <_ZN4RF248flush_rxEv>:
{
     cfa:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_RX);
     cfc:	21e2      	movs	r1, #226	; 0xe2
     cfe:	f7ff ffeb 	bl	cd8 <_ZN4RF248spiTransEh>
}
     d02:	bd10      	pop	{r4, pc}

00000d04 <_ZN4RF248flush_txEv>:
{
     d04:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_TX);
     d06:	21e1      	movs	r1, #225	; 0xe1
     d08:	f7ff ffe6 	bl	cd8 <_ZN4RF248spiTransEh>
}
     d0c:	bd10      	pop	{r4, pc}

00000d0e <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
     d0e:	b510      	push	{r4, lr}
    return spiTrans(RF24_NOP);
     d10:	21ff      	movs	r1, #255	; 0xff
     d12:	f7ff ffe1 	bl	cd8 <_ZN4RF248spiTransEh>
}
     d16:	bd10      	pop	{r4, pc}

00000d18 <_ZN4RF24C1E6gpio_tS0_R5spi_t>:

#endif

/****************************************************************************/

RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     d18:	b082      	sub	sp, #8
     d1a:	b530      	push	{r4, r5, lr}
     d1c:	b083      	sub	sp, #12
     d1e:	466c      	mov	r4, sp
     d20:	9100      	str	r1, [sp, #0]
     d22:	6062      	str	r2, [r4, #4]
     d24:	aa07      	add	r2, sp, #28
     d26:	9307      	str	r3, [sp, #28]
        :_SPI(_spi), ce_pin(_cepin), csn_pin(_cspin), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5),
         csDelay(5)//,pipe0_reading_address(0)
     d28:	0003      	movs	r3, r0
     d2a:	9909      	ldr	r1, [sp, #36]	; 0x24
     d2c:	c302      	stmia	r3!, {r1}
     d2e:	cc22      	ldmia	r4!, {r1, r5}
     d30:	c322      	stmia	r3!, {r1, r5}
     d32:	0003      	movs	r3, r0
     d34:	330c      	adds	r3, #12
     d36:	ca12      	ldmia	r2!, {r1, r4}
     d38:	c312      	stmia	r3!, {r1, r4}
     d3a:	2300      	movs	r3, #0
     d3c:	7583      	strb	r3, [r0, #22]
     d3e:	2220      	movs	r2, #32
     d40:	75c2      	strb	r2, [r0, #23]
     d42:	7603      	strb	r3, [r0, #24]
     d44:	3a1b      	subs	r2, #27
     d46:	7782      	strb	r2, [r0, #30]
     d48:	6242      	str	r2, [r0, #36]	; 0x24
{
    pipe0_reading_address[0] = 0;
     d4a:	7643      	strb	r3, [r0, #25]
}
     d4c:	b003      	add	sp, #12
     d4e:	bc30      	pop	{r4, r5}
     d50:	bc08      	pop	{r3}
     d52:	b002      	add	sp, #8
     d54:	4718      	bx	r3

00000d56 <_ZN4RF2410setChannelEh>:

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     d56:	b510      	push	{r4, lr}
     d58:	000a      	movs	r2, r1
    const uint8_t max_channel = 125;
    write_register(RF_CH, rf24_min(channel, max_channel));
     d5a:	297c      	cmp	r1, #124	; 0x7c
     d5c:	d900      	bls.n	d60 <_ZN4RF2410setChannelEh+0xa>
     d5e:	227d      	movs	r2, #125	; 0x7d
     d60:	2105      	movs	r1, #5
     d62:	f7ff ff27 	bl	bb4 <_ZN4RF2414write_registerEhh>
}
     d66:	bd10      	pop	{r4, pc}

00000d68 <_ZN4RF2414setPayloadSizeEh>:

/****************************************************************************/

void RF24::setPayloadSize(uint8_t size)
{
    payload_size = rf24_min(size, 32);
     d68:	1c0b      	adds	r3, r1, #0
     d6a:	2920      	cmp	r1, #32
     d6c:	d900      	bls.n	d70 <_ZN4RF2414setPayloadSizeEh+0x8>
     d6e:	2320      	movs	r3, #32
     d70:	75c3      	strb	r3, [r0, #23]
}
     d72:	4770      	bx	lr

00000d74 <_ZN4RF2413stopListeningEv>:
/****************************************************************************/
static const uint8_t child_pipe_enable[]
PROGMEM = {ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5};

void RF24::stopListening(void)
{
     d74:	b510      	push	{r4, lr}
     d76:	0004      	movs	r4, r0
    ce(LOW);
     d78:	2100      	movs	r1, #0
     d7a:	f7ff fead 	bl	ad8 <_ZN4RF242ceEb>

    delay_usec(txDelay);
     d7e:	6a20      	ldr	r0, [r4, #32]
     d80:	f002 fd5a 	bl	3838 <__delay_usec_veneer>

    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
     d84:	211d      	movs	r1, #29
     d86:	0020      	movs	r0, r4
     d88:	f7ff fed4 	bl	b34 <_ZN4RF2413read_registerEh>
     d8c:	0783      	lsls	r3, r0, #30
     d8e:	d417      	bmi.n	dc0 <_ZN4RF2413stopListeningEv+0x4c>
        delay_usec(txDelay); //200
        flush_tx();
    }
    //flush_rx();
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
     d90:	2100      	movs	r1, #0
     d92:	0020      	movs	r0, r4
     d94:	f7ff fece 	bl	b34 <_ZN4RF2413read_registerEh>
     d98:	2301      	movs	r3, #1
     d9a:	4398      	bics	r0, r3
     d9c:	b2c2      	uxtb	r2, r0
     d9e:	2100      	movs	r1, #0
     da0:	0020      	movs	r0, r4
     da2:	f7ff ff07 	bl	bb4 <_ZN4RF2414write_registerEhh>
    if (ce_pin == csn_pin) {
      powerDown();
      powerUp();
    }
    #endif
    write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0]))); // Enable RX on pipe0
     da6:	2102      	movs	r1, #2
     da8:	0020      	movs	r0, r4
     daa:	f7ff fec3 	bl	b34 <_ZN4RF2413read_registerEh>
     dae:	b242      	sxtb	r2, r0
     db0:	2001      	movs	r0, #1
     db2:	4302      	orrs	r2, r0
     db4:	b2d2      	uxtb	r2, r2
     db6:	2102      	movs	r1, #2
     db8:	0020      	movs	r0, r4
     dba:	f7ff fefb 	bl	bb4 <_ZN4RF2414write_registerEhh>

    //delayMicroseconds(100);

}
     dbe:	bd10      	pop	{r4, pc}
        delay_usec(txDelay); //200
     dc0:	6a20      	ldr	r0, [r4, #32]
     dc2:	f002 fd39 	bl	3838 <__delay_usec_veneer>
        flush_tx();
     dc6:	0020      	movs	r0, r4
     dc8:	f7ff ff9c 	bl	d04 <_ZN4RF248flush_txEv>
     dcc:	e7e0      	b.n	d90 <_ZN4RF2413stopListeningEv+0x1c>
     dce:	Address 0x00000dce is out of bounds.


00000dd0 <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
     dd0:	b510      	push	{r4, lr}
     dd2:	0004      	movs	r4, r0
    uint8_t cfg = read_register(NRF_CONFIG);
     dd4:	2100      	movs	r1, #0
     dd6:	f7ff fead 	bl	b34 <_ZN4RF2413read_registerEh>

    // if not powered up then power up and wait for the radio to initialize
    if (!(cfg & _BV(PWR_UP))) {
     dda:	0783      	lsls	r3, r0, #30
     ddc:	d500      	bpl.n	de0 <_ZN4RF247powerUpEv+0x10>
        // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
        // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
        // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
        delay_usec(5000);
    }
}
     dde:	bd10      	pop	{r4, pc}
        write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
     de0:	2202      	movs	r2, #2
     de2:	4302      	orrs	r2, r0
     de4:	b2d2      	uxtb	r2, r2
     de6:	2100      	movs	r1, #0
     de8:	0020      	movs	r0, r4
     dea:	f7ff fee3 	bl	bb4 <_ZN4RF2414write_registerEhh>
        delay_usec(5000);
     dee:	4802      	ldr	r0, [pc, #8]	; (df8 <_ZN4RF247powerUpEv+0x28>)
     df0:	f002 fd22 	bl	3838 <__delay_usec_veneer>
}
     df4:	e7f3      	b.n	dde <_ZN4RF247powerUpEv+0xe>
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	00001388 	.word	0x00001388

00000dfc <_ZN4RF249errNotifyEv>:
{
    #if defined(SERIAL_DEBUG) || defined(RF24_LINUX)
    printf_P(PSTR("RF24 HARDWARE FAIL: Radio not responding, verify pin connections, wiring, etc.\r\n"));
    #endif
    #if defined(FAILURE_HANDLING)
    failureDetected = 1;
     dfc:	2301      	movs	r3, #1
     dfe:	77c3      	strb	r3, [r0, #31]
    #else
    delay(5000);
    #endif
}
     e00:	4770      	bx	lr

00000e02 <_ZN4RF2414startFastWriteEPKvhbb>:
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24::startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{ //TMRh20
     e02:	b570      	push	{r4, r5, r6, lr}
     e04:	0004      	movs	r4, r0
     e06:	a804      	add	r0, sp, #16
     e08:	7805      	ldrb	r5, [r0, #0]

    //write_payload( buf,len);
    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
     e0a:	2b00      	cmp	r3, #0
     e0c:	d006      	beq.n	e1c <_ZN4RF2414startFastWriteEPKvhbb+0x1a>
     e0e:	23b0      	movs	r3, #176	; 0xb0
     e10:	0020      	movs	r0, r4
     e12:	f7ff fee9 	bl	be8 <_ZN4RF2413write_payloadEPKvhh>
    if (startTx) {
     e16:	2d00      	cmp	r5, #0
     e18:	d102      	bne.n	e20 <_ZN4RF2414startFastWriteEPKvhbb+0x1e>
        ce(HIGH);
    }

}
     e1a:	bd70      	pop	{r4, r5, r6, pc}
    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
     e1c:	23a0      	movs	r3, #160	; 0xa0
     e1e:	e7f7      	b.n	e10 <_ZN4RF2414startFastWriteEPKvhbb+0xe>
        ce(HIGH);
     e20:	2101      	movs	r1, #1
     e22:	0020      	movs	r0, r4
     e24:	f7ff fe58 	bl	ad8 <_ZN4RF242ceEb>
}
     e28:	e7f7      	b.n	e1a <_ZN4RF2414startFastWriteEPKvhbb+0x18>

00000e2a <_ZN4RF245writeEPKvhb>:
{
     e2a:	b530      	push	{r4, r5, lr}
     e2c:	b083      	sub	sp, #12
     e2e:	0004      	movs	r4, r0
    startFastWrite(buf, len, multicast);
     e30:	2001      	movs	r0, #1
     e32:	9000      	str	r0, [sp, #0]
     e34:	0020      	movs	r0, r4
     e36:	f7ff ffe4 	bl	e02 <_ZN4RF2414startFastWriteEPKvhbb>
    uint32_t timer = millis();
     e3a:	f000 fe95 	bl	1b68 <millis>
     e3e:	0005      	movs	r5, r0
    while (!(get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
     e40:	0020      	movs	r0, r4
     e42:	f7ff ff64 	bl	d0e <_ZN4RF2410get_statusEv>
     e46:	2330      	movs	r3, #48	; 0x30
     e48:	4203      	tst	r3, r0
     e4a:	d10a      	bne.n	e62 <_ZN4RF245writeEPKvhb+0x38>
        if (millis() - timer > 95) {
     e4c:	f000 fe8c 	bl	1b68 <millis>
     e50:	1b40      	subs	r0, r0, r5
     e52:	285f      	cmp	r0, #95	; 0x5f
     e54:	d9f4      	bls.n	e40 <_ZN4RF245writeEPKvhb+0x16>
            errNotify();
     e56:	0020      	movs	r0, r4
     e58:	f7ff ffd0 	bl	dfc <_ZN4RF249errNotifyEv>
            return 0;
     e5c:	2000      	movs	r0, #0
}
     e5e:	b003      	add	sp, #12
     e60:	bd30      	pop	{r4, r5, pc}
    ce(LOW);
     e62:	2100      	movs	r1, #0
     e64:	0020      	movs	r0, r4
     e66:	f7ff fe37 	bl	ad8 <_ZN4RF242ceEb>
    uint8_t status = write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     e6a:	2270      	movs	r2, #112	; 0x70
     e6c:	2107      	movs	r1, #7
     e6e:	0020      	movs	r0, r4
     e70:	f7ff fea0 	bl	bb4 <_ZN4RF2414write_registerEhh>
    if (status & _BV(MAX_RT)) {
     e74:	06c3      	lsls	r3, r0, #27
     e76:	d401      	bmi.n	e7c <_ZN4RF245writeEPKvhb+0x52>
    return 1;
     e78:	2001      	movs	r0, #1
     e7a:	e7f0      	b.n	e5e <_ZN4RF245writeEPKvhb+0x34>
        flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
     e7c:	0020      	movs	r0, r4
     e7e:	f7ff ff41 	bl	d04 <_ZN4RF248flush_txEv>
        return 0;
     e82:	2000      	movs	r0, #0
     e84:	e7eb      	b.n	e5e <_ZN4RF245writeEPKvhb+0x34>

00000e86 <_ZN4RF245writeEPKvh>:
{
     e86:	b510      	push	{r4, lr}
    return write(buf, len, 0);
     e88:	2300      	movs	r3, #0
     e8a:	f7ff ffce 	bl	e2a <_ZN4RF245writeEPKvhb>
}
     e8e:	bd10      	pop	{r4, pc}

00000e90 <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     e90:	b570      	push	{r4, r5, r6, lr}
     e92:	0004      	movs	r4, r0
     e94:	000d      	movs	r5, r1
    if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY))) {
     e96:	2117      	movs	r1, #23
     e98:	f7ff fe4c 	bl	b34 <_ZN4RF2413read_registerEh>
     e9c:	07c3      	lsls	r3, r0, #31
     e9e:	d501      	bpl.n	ea4 <_ZN4RF249availableEPh+0x14>
            *pipe_num = (status >> RX_P_NO) & 0x07;
        }
        return 1;
    }

    return 0;
     ea0:	2000      	movs	r0, #0


}
     ea2:	bd70      	pop	{r4, r5, r6, pc}
        if (pipe_num) {
     ea4:	2d00      	cmp	r5, #0
     ea6:	d006      	beq.n	eb6 <_ZN4RF249availableEPh+0x26>
            uint8_t status = get_status();
     ea8:	0020      	movs	r0, r4
     eaa:	f7ff ff30 	bl	d0e <_ZN4RF2410get_statusEv>
            *pipe_num = (status >> RX_P_NO) & 0x07;
     eae:	1043      	asrs	r3, r0, #1
     eb0:	2007      	movs	r0, #7
     eb2:	4018      	ands	r0, r3
     eb4:	7028      	strb	r0, [r5, #0]
        return 1;
     eb6:	2001      	movs	r0, #1
     eb8:	e7f3      	b.n	ea2 <_ZN4RF249availableEPh+0x12>

00000eba <_ZN4RF249availableEv>:
{
     eba:	b510      	push	{r4, lr}
    return available(0);
     ebc:	2100      	movs	r1, #0
     ebe:	f7ff ffe7 	bl	e90 <_ZN4RF249availableEPh>
}
     ec2:	bd10      	pop	{r4, pc}

00000ec4 <_ZN4RF244readEPvh>:

/****************************************************************************/

void RF24::read(void* buf, uint8_t len)
{
     ec4:	b510      	push	{r4, lr}
     ec6:	0004      	movs	r4, r0

    // Fetch the payload
    read_payload(buf, len);
     ec8:	f7ff feca 	bl	c60 <_ZN4RF2412read_payloadEPvh>

    //Clear the two possible interrupt flags with one command
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
     ecc:	2270      	movs	r2, #112	; 0x70
     ece:	2107      	movs	r1, #7
     ed0:	0020      	movs	r0, r4
     ed2:	f7ff fe6f 	bl	bb4 <_ZN4RF2414write_registerEhh>

}
     ed6:	bd10      	pop	{r4, pc}

00000ed8 <_ZN4RF2415openWritingPipeEy>:
}

/****************************************************************************/

void RF24::openWritingPipe(uint64_t value)
{
     ed8:	b510      	push	{r4, lr}
     eda:	b082      	sub	sp, #8
     edc:	0004      	movs	r4, r0
     ede:	9200      	str	r2, [sp, #0]
     ee0:	9301      	str	r3, [sp, #4]
    // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
    // expects it LSB first too, so we're good.

    write_register(RX_ADDR_P0, reinterpret_cast<uint8_t*>(&value), addr_width);
     ee2:	7f83      	ldrb	r3, [r0, #30]
     ee4:	466a      	mov	r2, sp
     ee6:	210a      	movs	r1, #10
     ee8:	f7ff fe3a 	bl	b60 <_ZN4RF2414write_registerEhPKhh>
    write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), addr_width);
     eec:	7fa3      	ldrb	r3, [r4, #30]
     eee:	466a      	mov	r2, sp
     ef0:	2110      	movs	r1, #16
     ef2:	0020      	movs	r0, r4
     ef4:	f7ff fe34 	bl	b60 <_ZN4RF2414write_registerEhPKhh>


    //const uint8_t max_payload_size = 32;
    //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
    write_register(RX_PW_P0, payload_size);
     ef8:	7de2      	ldrb	r2, [r4, #23]
     efa:	2111      	movs	r1, #17
     efc:	0020      	movs	r0, r4
     efe:	f7ff fe59 	bl	bb4 <_ZN4RF2414write_registerEhh>
}
     f02:	b002      	add	sp, #8
     f04:	bd10      	pop	{r4, pc}
     f06:	Address 0x00000f06 is out of bounds.


00000f08 <_ZN4RF2415openReadingPipeEhy>:
PROGMEM = {RX_ADDR_P0, RX_ADDR_P1, RX_ADDR_P2, RX_ADDR_P3, RX_ADDR_P4, RX_ADDR_P5};
static const uint8_t child_payload_size[]
PROGMEM = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};

void RF24::openReadingPipe(uint8_t child, uint64_t address)
{
     f08:	b530      	push	{r4, r5, lr}
     f0a:	b083      	sub	sp, #12
     f0c:	0005      	movs	r5, r0
     f0e:	000c      	movs	r4, r1
     f10:	9200      	str	r2, [sp, #0]
     f12:	9301      	str	r3, [sp, #4]
    // If this is pipe 0, cache the address.  This is needed because
    // openWritingPipe() will overwrite the pipe 0 address, so
    // startListening() will have to restore it.
    if (child == 0) {
     f14:	2900      	cmp	r1, #0
     f16:	d021      	beq.n	f5c <_ZN4RF2415openReadingPipeEhy+0x54>
        memcpy(pipe0_reading_address, &address, addr_width);
    }

    if (child <= 6) {
     f18:	2c06      	cmp	r4, #6
     f1a:	d81d      	bhi.n	f58 <_ZN4RF2415openReadingPipeEhy+0x50>
        // For pipes 2-5, only write the LSB
        if (child < 2) {
     f1c:	2c01      	cmp	r4, #1
     f1e:	d923      	bls.n	f68 <_ZN4RF2415openReadingPipeEhy+0x60>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
        } else {
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
     f20:	4b15      	ldr	r3, [pc, #84]	; (f78 <_ZN4RF2415openReadingPipeEhy+0x70>)
     f22:	5d19      	ldrb	r1, [r3, r4]
     f24:	2301      	movs	r3, #1
     f26:	466a      	mov	r2, sp
     f28:	0028      	movs	r0, r5
     f2a:	f7ff fe19 	bl	b60 <_ZN4RF2414write_registerEhPKhh>
        }

        write_register(pgm_read_byte(&child_payload_size[child]), payload_size);
     f2e:	7dea      	ldrb	r2, [r5, #23]
     f30:	4b12      	ldr	r3, [pc, #72]	; (f7c <_ZN4RF2415openReadingPipeEhy+0x74>)
     f32:	5d19      	ldrb	r1, [r3, r4]
     f34:	0028      	movs	r0, r5
     f36:	f7ff fe3d 	bl	bb4 <_ZN4RF2414write_registerEhh>

        // Note it would be more efficient to set all of the bits for all open
        // pipes at once.  However, I thought it would make the calling code
        // more simple to do it this way.
        write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
     f3a:	2102      	movs	r1, #2
     f3c:	0028      	movs	r0, r5
     f3e:	f7ff fdf9 	bl	b34 <_ZN4RF2413read_registerEh>
     f42:	b242      	sxtb	r2, r0
     f44:	4b0e      	ldr	r3, [pc, #56]	; (f80 <_ZN4RF2415openReadingPipeEhy+0x78>)
     f46:	5d1b      	ldrb	r3, [r3, r4]
     f48:	2001      	movs	r0, #1
     f4a:	4098      	lsls	r0, r3
     f4c:	4302      	orrs	r2, r0
     f4e:	b2d2      	uxtb	r2, r2
     f50:	2102      	movs	r1, #2
     f52:	0028      	movs	r0, r5
     f54:	f7ff fe2e 	bl	bb4 <_ZN4RF2414write_registerEhh>
    }
}
     f58:	b003      	add	sp, #12
     f5a:	bd30      	pop	{r4, r5, pc}
        memcpy(pipe0_reading_address, &address, addr_width);
     f5c:	7f82      	ldrb	r2, [r0, #30]
     f5e:	4669      	mov	r1, sp
     f60:	3019      	adds	r0, #25
     f62:	f001 fbd9 	bl	2718 <memcpy>
     f66:	e7d7      	b.n	f18 <_ZN4RF2415openReadingPipeEhy+0x10>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
     f68:	7fab      	ldrb	r3, [r5, #30]
     f6a:	4a03      	ldr	r2, [pc, #12]	; (f78 <_ZN4RF2415openReadingPipeEhy+0x70>)
     f6c:	5d11      	ldrb	r1, [r2, r4]
     f6e:	466a      	mov	r2, sp
     f70:	0028      	movs	r0, r5
     f72:	f7ff fdf5 	bl	b60 <_ZN4RF2414write_registerEhPKhh>
     f76:	e7da      	b.n	f2e <_ZN4RF2415openReadingPipeEhy+0x26>
     f78:	0000354c 	.word	0x0000354c
     f7c:	0000355c 	.word	0x0000355c
     f80:	00003554 	.word	0x00003554

00000f84 <_ZN4RF2416closeReadingPipeEh>:
}

/****************************************************************************/

void RF24::closeReadingPipe(uint8_t pipe)
{
     f84:	b570      	push	{r4, r5, r6, lr}
     f86:	0004      	movs	r4, r0
     f88:	000d      	movs	r5, r1
    write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
     f8a:	2102      	movs	r1, #2
     f8c:	f7ff fdd2 	bl	b34 <_ZN4RF2413read_registerEh>
     f90:	b242      	sxtb	r2, r0
     f92:	4b05      	ldr	r3, [pc, #20]	; (fa8 <_ZN4RF2416closeReadingPipeEh+0x24>)
     f94:	5d59      	ldrb	r1, [r3, r5]
     f96:	2301      	movs	r3, #1
     f98:	408b      	lsls	r3, r1
     f9a:	439a      	bics	r2, r3
     f9c:	b2d2      	uxtb	r2, r2
     f9e:	2102      	movs	r1, #2
     fa0:	0020      	movs	r0, r4
     fa2:	f7ff fe07 	bl	bb4 <_ZN4RF2414write_registerEhh>
}
     fa6:	bd70      	pop	{r4, r5, r6, pc}
     fa8:	00003554 	.word	0x00003554

00000fac <_ZN4RF2414startListeningEv>:
{
     fac:	b510      	push	{r4, lr}
     fae:	0004      	movs	r4, r0
    powerUp();
     fb0:	f7ff ff0e 	bl	dd0 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
     fb4:	2100      	movs	r1, #0
     fb6:	0020      	movs	r0, r4
     fb8:	f7ff fdbc 	bl	b34 <_ZN4RF2413read_registerEh>
     fbc:	2201      	movs	r2, #1
     fbe:	4302      	orrs	r2, r0
     fc0:	b2d2      	uxtb	r2, r2
     fc2:	2100      	movs	r1, #0
     fc4:	0020      	movs	r0, r4
     fc6:	f7ff fdf5 	bl	bb4 <_ZN4RF2414write_registerEhh>
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     fca:	2270      	movs	r2, #112	; 0x70
     fcc:	2107      	movs	r1, #7
     fce:	0020      	movs	r0, r4
     fd0:	f7ff fdf0 	bl	bb4 <_ZN4RF2414write_registerEhh>
    ce(HIGH);
     fd4:	2101      	movs	r1, #1
     fd6:	0020      	movs	r0, r4
     fd8:	f7ff fd7e 	bl	ad8 <_ZN4RF242ceEb>
    if (pipe0_reading_address[0] > 0) {
     fdc:	7e63      	ldrb	r3, [r4, #25]
     fde:	2b00      	cmp	r3, #0
     fe0:	d00d      	beq.n	ffe <_ZN4RF2414startListeningEv+0x52>
        write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);
     fe2:	7fa3      	ldrb	r3, [r4, #30]
     fe4:	0022      	movs	r2, r4
     fe6:	3219      	adds	r2, #25
     fe8:	210a      	movs	r1, #10
     fea:	0020      	movs	r0, r4
     fec:	f7ff fdb8 	bl	b60 <_ZN4RF2414write_registerEhPKhh>
    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
     ff0:	211d      	movs	r1, #29
     ff2:	0020      	movs	r0, r4
     ff4:	f7ff fd9e 	bl	b34 <_ZN4RF2413read_registerEh>
     ff8:	0783      	lsls	r3, r0, #30
     ffa:	d405      	bmi.n	1008 <_ZN4RF2414startListeningEv+0x5c>
}
     ffc:	bd10      	pop	{r4, pc}
        closeReadingPipe(0);
     ffe:	2100      	movs	r1, #0
    1000:	0020      	movs	r0, r4
    1002:	f7ff ffbf 	bl	f84 <_ZN4RF2416closeReadingPipeEh>
    1006:	e7f3      	b.n	ff0 <_ZN4RF2414startListeningEv+0x44>
        flush_tx();
    1008:	0020      	movs	r0, r4
    100a:	f7ff fe7b 	bl	d04 <_ZN4RF248flush_txEv>
}
    100e:	e7f5      	b.n	ffc <_ZN4RF2414startListeningEv+0x50>

00001010 <_ZN4RF2415toggle_featuresEv>:

/****************************************************************************/

void RF24::toggle_features(void)
{
    1010:	b510      	push	{r4, lr}
    1012:	0004      	movs	r4, r0
    csn(LOW);
    1014:	2100      	movs	r1, #0
    1016:	f7ff fd45 	bl	aa4 <_ZN4RF243csnEb>
    beginTransaction();
    _SPI.Transfer(ACTIVATE);
    101a:	2150      	movs	r1, #80	; 0x50
    101c:	6820      	ldr	r0, [r4, #0]
    101e:	f000 fcb9 	bl	1994 <_ZN5spi_t8TransferEh>
    _SPI.Transfer(0x73);
    1022:	2173      	movs	r1, #115	; 0x73
    1024:	6820      	ldr	r0, [r4, #0]
    1026:	f000 fcb5 	bl	1994 <_ZN5spi_t8TransferEh>
    csn(HIGH);
    102a:	2101      	movs	r1, #1
    102c:	0020      	movs	r0, r4
    102e:	f7ff fd39 	bl	aa4 <_ZN4RF243csnEb>
    endTransaction();
}
    1032:	bd10      	pop	{r4, pc}

00001034 <_ZN4RF2410setAutoAckEb>:
}

/****************************************************************************/

void RF24::setAutoAck(bool enable)
{
    1034:	b510      	push	{r4, lr}
    if (enable) {
    1036:	2900      	cmp	r1, #0
    1038:	d004      	beq.n	1044 <_ZN4RF2410setAutoAckEb+0x10>
        write_register(EN_AA, 0x3F);
    103a:	223f      	movs	r2, #63	; 0x3f
    103c:	2101      	movs	r1, #1
    103e:	f7ff fdb9 	bl	bb4 <_ZN4RF2414write_registerEhh>
    } else {
        write_register(EN_AA, 0);
    }
}
    1042:	bd10      	pop	{r4, pc}
        write_register(EN_AA, 0);
    1044:	2200      	movs	r2, #0
    1046:	2101      	movs	r1, #1
    1048:	f7ff fdb4 	bl	bb4 <_ZN4RF2414write_registerEhh>
}
    104c:	e7f9      	b.n	1042 <_ZN4RF2410setAutoAckEb+0xe>

0000104e <_ZN4RF2410setPALevelEh>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
    104e:	b570      	push	{r4, r5, r6, lr}
    1050:	0005      	movs	r5, r0
    1052:	000c      	movs	r4, r1

    uint8_t setup = read_register(RF_SETUP) & 0xF8;
    1054:	2106      	movs	r1, #6
    1056:	f7ff fd6d 	bl	b34 <_ZN4RF2413read_registerEh>
    105a:	2307      	movs	r3, #7
    105c:	4398      	bics	r0, r3
    105e:	b2c0      	uxtb	r0, r0

    if (level > 3) {                        // If invalid level, go to max PA
    1060:	2c03      	cmp	r4, #3
    1062:	d809      	bhi.n	1078 <_ZN4RF2410setPALevelEh+0x2a>
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
    } else {
        level = (level << 1) + 1;            // Else set level as requested
    1064:	0064      	lsls	r4, r4, #1
    1066:	b2e2      	uxtb	r2, r4
    1068:	3201      	adds	r2, #1
    106a:	b2d2      	uxtb	r2, r2
    }

    write_register(RF_SETUP, setup |= level);    // Write it to the chip
    106c:	4302      	orrs	r2, r0
    106e:	2106      	movs	r1, #6
    1070:	0028      	movs	r0, r5
    1072:	f7ff fd9f 	bl	bb4 <_ZN4RF2414write_registerEhh>
}
    1076:	bd70      	pop	{r4, r5, r6, pc}
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
    1078:	2207      	movs	r2, #7
    107a:	e7f7      	b.n	106c <_ZN4RF2410setPALevelEh+0x1e>

0000107c <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
    107c:	b570      	push	{r4, r5, r6, lr}
    107e:	0006      	movs	r6, r0
    1080:	000d      	movs	r5, r1
    bool result = false;
    uint8_t setup = read_register(RF_SETUP);
    1082:	2106      	movs	r1, #6
    1084:	f7ff fd56 	bl	b34 <_ZN4RF2413read_registerEh>

    // HIGH and LOW '00' is 1Mbs - our default
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
    1088:	2328      	movs	r3, #40	; 0x28
    108a:	4398      	bics	r0, r3
    108c:	b2c4      	uxtb	r4, r0

    #if !defined(F_CPU) || F_CPU > 20000000
    txDelay = 250;
    108e:	33d2      	adds	r3, #210	; 0xd2
    1090:	6233      	str	r3, [r6, #32]
    #else //16Mhz Arduino
    txDelay=85;
    #endif
    if (speed == RF24_250KBPS) {
    1092:	2d02      	cmp	r5, #2
    1094:	d00e      	beq.n	10b4 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x38>
        txDelay = 155;
        #endif
    } else {
        // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
        // Making it '01'
        if (speed == RF24_2MBPS) {
    1096:	2d01      	cmp	r5, #1
    1098:	d012      	beq.n	10c0 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
            #else // 16Mhz Arduino
            txDelay = 65;
            #endif
        }
    }
    write_register(RF_SETUP, setup);
    109a:	0022      	movs	r2, r4
    109c:	2106      	movs	r1, #6
    109e:	0030      	movs	r0, r6
    10a0:	f7ff fd88 	bl	bb4 <_ZN4RF2414write_registerEhh>

    // Verify our result
    if (read_register(RF_SETUP) == setup) {
    10a4:	2106      	movs	r1, #6
    10a6:	0030      	movs	r0, r6
    10a8:	f7ff fd44 	bl	b34 <_ZN4RF2413read_registerEh>
    10ac:	42a0      	cmp	r0, r4
    10ae:	d00d      	beq.n	10cc <_ZN4RF2411setDataRateE15rf24_datarate_e+0x50>
    bool result = false;
    10b0:	2000      	movs	r0, #0
        result = true;
    }
    return result;
}
    10b2:	bd70      	pop	{r4, r5, r6, pc}
        setup |= _BV(RF_DR_LOW);
    10b4:	2020      	movs	r0, #32
    10b6:	4304      	orrs	r4, r0
    10b8:	b2e4      	uxtb	r4, r4
        txDelay = 450;
    10ba:	33c8      	adds	r3, #200	; 0xc8
    10bc:	6233      	str	r3, [r6, #32]
    10be:	e7ec      	b.n	109a <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1e>
            setup |= _BV(RF_DR_HIGH);
    10c0:	2008      	movs	r0, #8
    10c2:	4304      	orrs	r4, r0
    10c4:	b2e4      	uxtb	r4, r4
            txDelay = 190;
    10c6:	23be      	movs	r3, #190	; 0xbe
    10c8:	6233      	str	r3, [r6, #32]
    10ca:	e7e6      	b.n	109a <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1e>
        result = true;
    10cc:	2001      	movs	r0, #1
    10ce:	e7f0      	b.n	10b2 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x36>

000010d0 <_ZN4RF2410setRetriesEhh>:
    write_register(NRF_CONFIG, disable);
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
    10d0:	b510      	push	{r4, lr}
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
    10d2:	0109      	lsls	r1, r1, #4
    10d4:	230f      	movs	r3, #15
    10d6:	4013      	ands	r3, r2
    10d8:	430b      	orrs	r3, r1
    10da:	b2da      	uxtb	r2, r3
    10dc:	2104      	movs	r1, #4
    10de:	f7ff fd69 	bl	bb4 <_ZN4RF2414write_registerEhh>
}
    10e2:	bd10      	pop	{r4, pc}

000010e4 <_ZN4RF245beginEv>:
{
    10e4:	b570      	push	{r4, r5, r6, lr}
    10e6:	b084      	sub	sp, #16
    10e8:	0004      	movs	r4, r0
    if (ce_pin != csn_pin) {
    10ea:	4669      	mov	r1, sp
    10ec:	0003      	movs	r3, r0
    10ee:	330c      	adds	r3, #12
    10f0:	000a      	movs	r2, r1
    10f2:	cb21      	ldmia	r3!, {r0, r5}
    10f4:	c221      	stmia	r2!, {r0, r5}
        return !operator==(b);
    10f6:	2208      	movs	r2, #8
    10f8:	a802      	add	r0, sp, #8
    10fa:	f001 fb0d 	bl	2718 <memcpy>
        return port == b.port && pin == b.pin;
    10fe:	6863      	ldr	r3, [r4, #4]
    1100:	9a02      	ldr	r2, [sp, #8]
    1102:	429a      	cmp	r2, r3
    1104:	d100      	bne.n	1108 <_ZN4RF245beginEv+0x24>
    1106:	e085      	b.n	1214 <_ZN4RF245beginEv+0x130>
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
    1108:	68a1      	ldr	r1, [r4, #8]
            PORT->Group[port].DIRSET.reg = 1 << pin;
    110a:	2201      	movs	r2, #1
    110c:	408a      	lsls	r2, r1
    110e:	01db      	lsls	r3, r3, #7
    1110:	4846      	ldr	r0, [pc, #280]	; (122c <_ZN4RF245beginEv+0x148>)
    1112:	4684      	mov	ip, r0
    1114:	4463      	add	r3, ip
    1116:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    1118:	185b      	adds	r3, r3, r1
    111a:	3340      	adds	r3, #64	; 0x40
    111c:	781a      	ldrb	r2, [r3, #0]
    111e:	2102      	movs	r1, #2
    1120:	438a      	bics	r2, r1
    1122:	701a      	strb	r2, [r3, #0]
    if (ce_pin != csn_pin)
    1124:	4669      	mov	r1, sp
    1126:	0023      	movs	r3, r4
    1128:	330c      	adds	r3, #12
    112a:	000a      	movs	r2, r1
    112c:	cb21      	ldmia	r3!, {r0, r5}
    112e:	c221      	stmia	r2!, {r0, r5}
        return !operator==(b);
    1130:	2208      	movs	r2, #8
    1132:	a802      	add	r0, sp, #8
    1134:	f001 faf0 	bl	2718 <memcpy>
        return port == b.port && pin == b.pin;
    1138:	6863      	ldr	r3, [r4, #4]
    113a:	9a02      	ldr	r2, [sp, #8]
    113c:	4293      	cmp	r3, r2
    113e:	d100      	bne.n	1142 <_ZN4RF245beginEv+0x5e>
    1140:	e06e      	b.n	1220 <_ZN4RF245beginEv+0x13c>
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
    1142:	6921      	ldr	r1, [r4, #16]
            PORT->Group[port].DIRSET.reg = 1 << pin;
    1144:	2201      	movs	r2, #1
    1146:	408a      	lsls	r2, r1
    1148:	68e3      	ldr	r3, [r4, #12]
    114a:	01db      	lsls	r3, r3, #7
    114c:	4837      	ldr	r0, [pc, #220]	; (122c <_ZN4RF245beginEv+0x148>)
    114e:	4684      	mov	ip, r0
    1150:	4463      	add	r3, ip
    1152:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    1154:	185b      	adds	r3, r3, r1
    1156:	3340      	adds	r3, #64	; 0x40
    1158:	781a      	ldrb	r2, [r3, #0]
    115a:	2102      	movs	r1, #2
    115c:	438a      	bics	r2, r1
    115e:	701a      	strb	r2, [r3, #0]
    ce(LOW);
    1160:	2100      	movs	r1, #0
    1162:	0020      	movs	r0, r4
    1164:	f7ff fcb8 	bl	ad8 <_ZN4RF242ceEb>
    csn(HIGH);
    1168:	2101      	movs	r1, #1
    116a:	0020      	movs	r0, r4
    116c:	f7ff fc9a 	bl	aa4 <_ZN4RF243csnEb>
    delay_usec(5000);
    1170:	482f      	ldr	r0, [pc, #188]	; (1230 <_ZN4RF245beginEv+0x14c>)
    1172:	f002 fb61 	bl	3838 <__delay_usec_veneer>
    write_register(NRF_CONFIG, 0x0C);
    1176:	220c      	movs	r2, #12
    1178:	2100      	movs	r1, #0
    117a:	0020      	movs	r0, r4
    117c:	f7ff fd1a 	bl	bb4 <_ZN4RF2414write_registerEhh>
    setRetries(5, 15);
    1180:	220f      	movs	r2, #15
    1182:	2105      	movs	r1, #5
    1184:	0020      	movs	r0, r4
    1186:	f7ff ffa3 	bl	10d0 <_ZN4RF2410setRetriesEhh>
    if (setDataRate(RF24_250KBPS)) {
    118a:	2102      	movs	r1, #2
    118c:	0020      	movs	r0, r4
    118e:	f7ff ff75 	bl	107c <_ZN4RF2411setDataRateE15rf24_datarate_e>
    1192:	2800      	cmp	r0, #0
    1194:	d001      	beq.n	119a <_ZN4RF245beginEv+0xb6>
        p_variant = true;
    1196:	2301      	movs	r3, #1
    1198:	75a3      	strb	r3, [r4, #22]
    setup = read_register(RF_SETUP);
    119a:	2106      	movs	r1, #6
    119c:	0020      	movs	r0, r4
    119e:	f7ff fcc9 	bl	b34 <_ZN4RF2413read_registerEh>
    11a2:	0006      	movs	r6, r0
    setDataRate(RF24_1MBPS);
    11a4:	2100      	movs	r1, #0
    11a6:	0020      	movs	r0, r4
    11a8:	f7ff ff68 	bl	107c <_ZN4RF2411setDataRateE15rf24_datarate_e>
    toggle_features();
    11ac:	0020      	movs	r0, r4
    11ae:	f7ff ff2f 	bl	1010 <_ZN4RF2415toggle_featuresEv>
    write_register(FEATURE, 0);
    11b2:	2200      	movs	r2, #0
    11b4:	211d      	movs	r1, #29
    11b6:	0020      	movs	r0, r4
    11b8:	f7ff fcfc 	bl	bb4 <_ZN4RF2414write_registerEhh>
    write_register(DYNPD, 0);
    11bc:	2200      	movs	r2, #0
    11be:	211c      	movs	r1, #28
    11c0:	0020      	movs	r0, r4
    11c2:	f7ff fcf7 	bl	bb4 <_ZN4RF2414write_registerEhh>
    dynamic_payloads_enabled = false;
    11c6:	2500      	movs	r5, #0
    11c8:	7625      	strb	r5, [r4, #24]
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
    11ca:	2270      	movs	r2, #112	; 0x70
    11cc:	2107      	movs	r1, #7
    11ce:	0020      	movs	r0, r4
    11d0:	f7ff fcf0 	bl	bb4 <_ZN4RF2414write_registerEhh>
    setChannel(76);
    11d4:	214c      	movs	r1, #76	; 0x4c
    11d6:	0020      	movs	r0, r4
    11d8:	f7ff fdbd 	bl	d56 <_ZN4RF2410setChannelEh>
    flush_rx();
    11dc:	0020      	movs	r0, r4
    11de:	f7ff fd8c 	bl	cfa <_ZN4RF248flush_rxEv>
    flush_tx();
    11e2:	0020      	movs	r0, r4
    11e4:	f7ff fd8e 	bl	d04 <_ZN4RF248flush_txEv>
    powerUp(); //Power up by default when begin() is called
    11e8:	0020      	movs	r0, r4
    11ea:	f7ff fdf1 	bl	dd0 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
    11ee:	2100      	movs	r1, #0
    11f0:	0020      	movs	r0, r4
    11f2:	f7ff fc9f 	bl	b34 <_ZN4RF2413read_registerEh>
    11f6:	2301      	movs	r3, #1
    11f8:	4398      	bics	r0, r3
    11fa:	b2c2      	uxtb	r2, r0
    11fc:	2100      	movs	r1, #0
    11fe:	0020      	movs	r0, r4
    1200:	f7ff fcd8 	bl	bb4 <_ZN4RF2414write_registerEhh>
    return (setup != 0 && setup != 0xff);
    1204:	3e01      	subs	r6, #1
    1206:	b2f6      	uxtb	r6, r6
    1208:	23fd      	movs	r3, #253	; 0xfd
    120a:	42b3      	cmp	r3, r6
    120c:	416d      	adcs	r5, r5
    120e:	b2e8      	uxtb	r0, r5
}
    1210:	b004      	add	sp, #16
    1212:	bd70      	pop	{r4, r5, r6, pc}
        return port == b.port && pin == b.pin;
    1214:	68a2      	ldr	r2, [r4, #8]
    1216:	9903      	ldr	r1, [sp, #12]
    1218:	428a      	cmp	r2, r1
    121a:	d000      	beq.n	121e <_ZN4RF245beginEv+0x13a>
    121c:	e774      	b.n	1108 <_ZN4RF245beginEv+0x24>
    121e:	e781      	b.n	1124 <_ZN4RF245beginEv+0x40>
    1220:	68a3      	ldr	r3, [r4, #8]
    1222:	9a03      	ldr	r2, [sp, #12]
    1224:	4293      	cmp	r3, r2
    1226:	d000      	beq.n	122a <_ZN4RF245beginEv+0x146>
    1228:	e78b      	b.n	1142 <_ZN4RF245beginEv+0x5e>
    122a:	e799      	b.n	1160 <_ZN4RF245beginEv+0x7c>
    122c:	41004400 	.word	0x41004400
    1230:	00001388 	.word	0x00001388

00001234 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_>:
        }
    }

    gsm.AddSMSFunc({ "info", cmd_info, GSM::LEVEL_USER });
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, GSM::LEVEL_USER });
    gsm.AddSMSFunc({ "clear", [](GSM* gsm, const char* sender, const char* args) { net.m_nodes.clear(); }, GSM::LEVEL_USER });
    1234:	b510      	push	{r4, lr}
    size_t size() {
        return m_size;
    }

    void clear() {
        if(m_data && m_size) free(m_data);
    1236:	4b07      	ldr	r3, [pc, #28]	; (1254 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x20>)
    1238:	6b58      	ldr	r0, [r3, #52]	; 0x34
    123a:	2800      	cmp	r0, #0
    123c:	d002      	beq.n	1244 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x10>
    123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1240:	2b00      	cmp	r3, #0
    1242:	d104      	bne.n	124e <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x1a>
        m_data = NULL;
    1244:	4b03      	ldr	r3, [pc, #12]	; (1254 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x20>)
    1246:	2200      	movs	r2, #0
    1248:	635a      	str	r2, [r3, #52]	; 0x34
        m_size = 0;
    124a:	631a      	str	r2, [r3, #48]	; 0x30
    124c:	bd10      	pop	{r4, pc}
        if(m_data && m_size) free(m_data);
    124e:	f001 fa59 	bl	2704 <free>
    1252:	e7f7      	b.n	1244 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x10>
    1254:	200000a8 	.word	0x200000a8

00001258 <_ZN9SensornetD1Ev>:
	char name[8]; // 8 bytes
	uint8_t type; // 1 byte
	uint8_t data[22]; // total 32 bytes (max nrf24l01 packet size)
};

class Sensornet {
    1258:	b510      	push	{r4, lr}
    125a:	0004      	movs	r4, r0
        if(m_data) free(m_data);
    125c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    125e:	2800      	cmp	r0, #0
    1260:	d001      	beq.n	1266 <_ZN9SensornetD1Ev+0xe>
    1262:	f001 fa4f 	bl	2704 <free>
    1266:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1268:	2800      	cmp	r0, #0
    126a:	d001      	beq.n	1270 <_ZN9SensornetD1Ev+0x18>
    126c:	f001 fa4a 	bl	2704 <free>
    1270:	0020      	movs	r0, r4
    1272:	bd10      	pop	{r4, pc}

00001274 <_ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_>:
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, GSM::LEVEL_USER });
    1274:	b510      	push	{r4, lr}
    1276:	0013      	movs	r3, r2
    1278:	000a      	movs	r2, r1
    127a:	0001      	movs	r1, r0
    127c:	4801      	ldr	r0, [pc, #4]	; (1284 <_ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_+0x10>)
    127e:	f001 f859 	bl	2334 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_>
    1282:	bd10      	pop	{r4, pc}
    1284:	200000a8 	.word	0x200000a8

00001288 <_Z41__static_initialization_and_destruction_0ii>:
        
        gpio::toggle(led);
        //auto start = millis();
        //while(millis() - start < 500);
    }
    1288:	b570      	push	{r4, r5, r6, lr}
    128a:	b092      	sub	sp, #72	; 0x48
    128c:	2801      	cmp	r0, #1
    128e:	d001      	beq.n	1294 <_Z41__static_initialization_and_destruction_0ii+0xc>
    1290:	b012      	add	sp, #72	; 0x48
    1292:	bd70      	pop	{r4, r5, r6, pc}
    1294:	4b12      	ldr	r3, [pc, #72]	; (12e0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    1296:	4299      	cmp	r1, r3
    1298:	d1fa      	bne.n	1290 <_Z41__static_initialization_and_destruction_0ii+0x8>
);
    129a:	2400      	movs	r4, #0
    129c:	4e11      	ldr	r6, [pc, #68]	; (12e4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    129e:	4b12      	ldr	r3, [pc, #72]	; (12e8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    12a0:	0021      	movs	r1, r4
    12a2:	2202      	movs	r2, #2
    12a4:	0030      	movs	r0, r6
    12a6:	f7fe ff23 	bl	f0 <_ZN3GSMC1E6gpio_tP6uart_t>
static GSM gsm(
    12aa:	4d10      	ldr	r5, [pc, #64]	; (12ec <_Z41__static_initialization_and_destruction_0ii+0x64>)
    12ac:	002a      	movs	r2, r5
    12ae:	4910      	ldr	r1, [pc, #64]	; (12f0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    12b0:	0030      	movs	r0, r6
    12b2:	f001 f91f 	bl	24f4 <__aeabi_atexit>
static Sensornet net(RF24({ GPIO_PORTA, 14 }, { GPIO_PORTA, 15 }, g_spi0));
    12b6:	4b0f      	ldr	r3, [pc, #60]	; (12f4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    12b8:	9301      	str	r3, [sp, #4]
    12ba:	230f      	movs	r3, #15
    12bc:	9300      	str	r3, [sp, #0]
    12be:	0023      	movs	r3, r4
    12c0:	0021      	movs	r1, r4
    12c2:	220e      	movs	r2, #14
    12c4:	a802      	add	r0, sp, #8
    12c6:	f7ff fd27 	bl	d18 <_ZN4RF24C1E6gpio_tS0_R5spi_t>
    12ca:	4c0b      	ldr	r4, [pc, #44]	; (12f8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    12cc:	a902      	add	r1, sp, #8
    12ce:	0020      	movs	r0, r4
    12d0:	f000 fefa 	bl	20c8 <_ZN9SensornetC1ERK4RF24>
    12d4:	002a      	movs	r2, r5
    12d6:	4909      	ldr	r1, [pc, #36]	; (12fc <_Z41__static_initialization_and_destruction_0ii+0x74>)
    12d8:	0020      	movs	r0, r4
    12da:	f001 f90b 	bl	24f4 <__aeabi_atexit>
    12de:	e7d7      	b.n	1290 <_Z41__static_initialization_and_destruction_0ii+0x8>
    12e0:	0000ffff 	.word	0x0000ffff
    12e4:	20000094 	.word	0x20000094
    12e8:	200002fc 	.word	0x200002fc
    12ec:	2000000c 	.word	0x2000000c
    12f0:	00000251 	.word	0x00000251
    12f4:	200000e0 	.word	0x200000e0
    12f8:	200000a8 	.word	0x200000a8
    12fc:	00001259 	.word	0x00001259

00001300 <_ZN3Str7reserveEi>:
    }
}

// Reserve memory, preserving the current of the buffer
void    Str::reserve(int new_capacity)
{
    1300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1302:	0004      	movs	r4, r0
    1304:	000e      	movs	r6, r1
    if (new_capacity <= Capacity)
    1306:	6843      	ldr	r3, [r0, #4]
    1308:	02db      	lsls	r3, r3, #11
    130a:	0adb      	lsrs	r3, r3, #11
    130c:	428b      	cmp	r3, r1
    130e:	da20      	bge.n	1352 <_ZN3Str7reserveEi+0x52>
        return;

    char* new_data;
    if (new_capacity < LocalBufSize)
    1310:	88c5      	ldrh	r5, [r0, #6]
    1312:	046d      	lsls	r5, r5, #17
    1314:	0dad      	lsrs	r5, r5, #22
    1316:	428d      	cmp	r5, r1
    1318:	dd1c      	ble.n	1354 <_ZN3Str7reserveEi+0x54>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
    131a:	0007      	movs	r7, r0
    131c:	3708      	adds	r7, #8
        // Disowned or LocalBuf -> Heap
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    }

    // string in Data might be longer than new_capacity if it wasn't owned, don't copy too much
    strncpy(new_data, Data, new_capacity - 1);
    131e:	1e6e      	subs	r6, r5, #1
    1320:	0032      	movs	r2, r6
    1322:	6821      	ldr	r1, [r4, #0]
    1324:	0038      	movs	r0, r7
    1326:	f001 fb61 	bl	29ec <strncpy>
    new_data[new_capacity - 1] = 0;
    132a:	19be      	adds	r6, r7, r6
    132c:	2300      	movs	r3, #0
    132e:	7033      	strb	r3, [r6, #0]

    if (Owned && !is_using_local_buf())
    1330:	2307      	movs	r3, #7
    1332:	56e3      	ldrsb	r3, [r4, r3]
    1334:	2b00      	cmp	r3, #0
    1336:	db13      	blt.n	1360 <_ZN3Str7reserveEi+0x60>
        STR_MEMFREE(Data);

    Data = new_data;
    1338:	6027      	str	r7, [r4, #0]
    Capacity = new_capacity;
    133a:	02ed      	lsls	r5, r5, #11
    133c:	0aed      	lsrs	r5, r5, #11
    133e:	6863      	ldr	r3, [r4, #4]
    1340:	0d5b      	lsrs	r3, r3, #21
    1342:	055b      	lsls	r3, r3, #21
    1344:	431d      	orrs	r5, r3
    1346:	6065      	str	r5, [r4, #4]
    Owned = 1;
    1348:	0e1b      	lsrs	r3, r3, #24
    134a:	2280      	movs	r2, #128	; 0x80
    134c:	4252      	negs	r2, r2
    134e:	4313      	orrs	r3, r2
    1350:	71e3      	strb	r3, [r4, #7]
}
    1352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    1354:	0008      	movs	r0, r1
    1356:	f001 f9cb 	bl	26f0 <malloc>
    135a:	0007      	movs	r7, r0
    135c:	0035      	movs	r5, r6
    135e:	e7de      	b.n	131e <_ZN3Str7reserveEi+0x1e>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1360:	6820      	ldr	r0, [r4, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
    1362:	0023      	movs	r3, r4
    1364:	3308      	adds	r3, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1366:	4298      	cmp	r0, r3
    1368:	d002      	beq.n	1370 <_ZN3Str7reserveEi+0x70>
        STR_MEMFREE(Data);
    136a:	f001 f9cb 	bl	2704 <free>
    136e:	e7e3      	b.n	1338 <_ZN3Str7reserveEi+0x38>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1370:	88e2      	ldrh	r2, [r4, #6]
    1372:	4b02      	ldr	r3, [pc, #8]	; (137c <_ZN3Str7reserveEi+0x7c>)
    1374:	421a      	tst	r2, r3
    1376:	d1df      	bne.n	1338 <_ZN3Str7reserveEi+0x38>
    1378:	e7f7      	b.n	136a <_ZN3Str7reserveEi+0x6a>
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	00007fe0 	.word	0x00007fe0

00001380 <_ZN3Str15reserve_discardEi>:

// Reserve memory, discarding the current of the buffer (if we expect to be fully rewritten)
void    Str::reserve_discard(int new_capacity)
{
    1380:	b570      	push	{r4, r5, r6, lr}
    1382:	0004      	movs	r4, r0
    1384:	000d      	movs	r5, r1
    if (new_capacity <= Capacity)
    1386:	6843      	ldr	r3, [r0, #4]
    1388:	02db      	lsls	r3, r3, #11
    138a:	0adb      	lsrs	r3, r3, #11
    138c:	428b      	cmp	r3, r1
    138e:	da15      	bge.n	13bc <_ZN3Str15reserve_discardEi+0x3c>
        return;

    if (Owned && !is_using_local_buf())
    1390:	2307      	movs	r3, #7
    1392:	56c3      	ldrsb	r3, [r0, r3]
    1394:	2b00      	cmp	r3, #0
    1396:	db12      	blt.n	13be <_ZN3Str15reserve_discardEi+0x3e>
        STR_MEMFREE(Data);

    if (new_capacity < LocalBufSize)
    1398:	88e3      	ldrh	r3, [r4, #6]
    139a:	045b      	lsls	r3, r3, #17
    139c:	0d9b      	lsrs	r3, r3, #22
    139e:	42ab      	cmp	r3, r5
    13a0:	dd1a      	ble.n	13d8 <_ZN3Str15reserve_discardEi+0x58>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
    13a2:	0022      	movs	r2, r4
    13a4:	3208      	adds	r2, #8
    {
        // Disowned -> LocalBuf
        Data = local_buf();
    13a6:	6022      	str	r2, [r4, #0]
        Capacity = LocalBufSize;
    13a8:	6862      	ldr	r2, [r4, #4]
    13aa:	0d52      	lsrs	r2, r2, #21
    13ac:	0552      	lsls	r2, r2, #21
    13ae:	4313      	orrs	r3, r2
    13b0:	6063      	str	r3, [r4, #4]
    {
        // Disowned or LocalBuf -> Heap
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
        Capacity = new_capacity;
    }
    Owned = 1;
    13b2:	79e2      	ldrb	r2, [r4, #7]
    13b4:	2380      	movs	r3, #128	; 0x80
    13b6:	425b      	negs	r3, r3
    13b8:	4313      	orrs	r3, r2
    13ba:	71e3      	strb	r3, [r4, #7]
}
    13bc:	bd70      	pop	{r4, r5, r6, pc}
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    13be:	6800      	ldr	r0, [r0, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
    13c0:	0023      	movs	r3, r4
    13c2:	3308      	adds	r3, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    13c4:	4283      	cmp	r3, r0
    13c6:	d002      	beq.n	13ce <_ZN3Str15reserve_discardEi+0x4e>
        STR_MEMFREE(Data);
    13c8:	f001 f99c 	bl	2704 <free>
    13cc:	e7e4      	b.n	1398 <_ZN3Str15reserve_discardEi+0x18>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    13ce:	88e2      	ldrh	r2, [r4, #6]
    13d0:	4b07      	ldr	r3, [pc, #28]	; (13f0 <_ZN3Str15reserve_discardEi+0x70>)
    13d2:	421a      	tst	r2, r3
    13d4:	d1e0      	bne.n	1398 <_ZN3Str15reserve_discardEi+0x18>
    13d6:	e7f7      	b.n	13c8 <_ZN3Str15reserve_discardEi+0x48>
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    13d8:	0028      	movs	r0, r5
    13da:	f001 f989 	bl	26f0 <malloc>
    13de:	6020      	str	r0, [r4, #0]
        Capacity = new_capacity;
    13e0:	02ed      	lsls	r5, r5, #11
    13e2:	0aed      	lsrs	r5, r5, #11
    13e4:	6863      	ldr	r3, [r4, #4]
    13e6:	0d59      	lsrs	r1, r3, #21
    13e8:	0549      	lsls	r1, r1, #21
    13ea:	430d      	orrs	r5, r1
    13ec:	6065      	str	r5, [r4, #4]
    13ee:	e7e0      	b.n	13b2 <_ZN3Str15reserve_discardEi+0x32>
    13f0:	00007fe0 	.word	0x00007fe0

000013f4 <_ZN3Str13appendfv_fromEiPKcSt9__va_list>:
    return add_len;
}

// FIXME: merge setfv() and appendfv()?
int     Str::appendfv_from(int idx, const char* fmt, va_list args)
{
    13f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13f6:	b083      	sub	sp, #12
    13f8:	0005      	movs	r5, r0
    13fa:	000e      	movs	r6, r1
    13fc:	0017      	movs	r7, r2
    // Needed for portability on platforms where va_list are passed by reference and modified by functions
    va_list args2;
    va_copy(args2, args);
    13fe:	9301      	str	r3, [sp, #4]
    if (Capacity < idx + add_len + 1)
        reserve(idx + add_len + 1);
    add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
#else
    // First try
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    1400:	2207      	movs	r2, #7
    1402:	5682      	ldrsb	r2, [r0, r2]
    1404:	2a00      	cmp	r2, #0
    1406:	db10      	blt.n	142a <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x36>
    1408:	2000      	movs	r0, #0
    140a:	2a00      	cmp	r2, #0
    140c:	db10      	blt.n	1430 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x3c>
    140e:	2100      	movs	r1, #0
    1410:	003a      	movs	r2, r7
    1412:	f001 fc27 	bl	2c64 <vsniprintf>
    1416:	0004      	movs	r4, r0
    STR_ASSERT(add_len >= 0);

    if (Capacity < idx + add_len + 1)
    1418:	1831      	adds	r1, r6, r0
    141a:	686b      	ldr	r3, [r5, #4]
    141c:	02db      	lsls	r3, r3, #11
    141e:	0adb      	lsrs	r3, r3, #11
    1420:	4299      	cmp	r1, r3
    1422:	da0a      	bge.n	143a <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x46>
    }
#endif

    STR_ASSERT(Owned);
    return add_len;
}
    1424:	0020      	movs	r0, r4
    1426:	b003      	add	sp, #12
    1428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    142a:	6801      	ldr	r1, [r0, #0]
    142c:	1988      	adds	r0, r1, r6
    142e:	e7ec      	b.n	140a <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x16>
    1430:	686a      	ldr	r2, [r5, #4]
    1432:	02d1      	lsls	r1, r2, #11
    1434:	0ac9      	lsrs	r1, r1, #11
    1436:	1b89      	subs	r1, r1, r6
    1438:	e7ea      	b.n	1410 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x1c>
        reserve(idx + add_len + 1);
    143a:	3101      	adds	r1, #1
    143c:	0028      	movs	r0, r5
    143e:	f7ff ff5f 	bl	1300 <_ZN3Str7reserveEi>
        add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
    1442:	6828      	ldr	r0, [r5, #0]
    1444:	1c61      	adds	r1, r4, #1
    1446:	1980      	adds	r0, r0, r6
    1448:	9b01      	ldr	r3, [sp, #4]
    144a:	003a      	movs	r2, r7
    144c:	f001 fc0a 	bl	2c64 <vsniprintf>
    1450:	0004      	movs	r4, r0
    return add_len;
    1452:	e7e7      	b.n	1424 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x30>

00001454 <_ZN3Str8appendfvEPKcSt9__va_list>:
    int cur_len = length();
    return append_from(cur_len, s, s_end);
}

int     Str::appendfv(const char* fmt, va_list args)
{
    1454:	b570      	push	{r4, r5, r6, lr}
    1456:	0004      	movs	r4, r0
    1458:	000d      	movs	r5, r1
    145a:	0016      	movs	r6, r2
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
    145c:	6800      	ldr	r0, [r0, #0]
    145e:	f001 faad 	bl	29bc <strlen>
    1462:	0001      	movs	r1, r0
    int cur_len = length();
    return appendfv_from(cur_len, fmt, args);
    1464:	0033      	movs	r3, r6
    1466:	002a      	movs	r2, r5
    1468:	0020      	movs	r0, r4
    146a:	f7ff ffc3 	bl	13f4 <_ZN3Str13appendfv_fromEiPKcSt9__va_list>
}
    146e:	bd70      	pop	{r4, r5, r6, pc}

00001470 <_ZN3Str7appendfEPKcz>:

int     Str::appendf(const char* fmt, ...)
{
    1470:	b40e      	push	{r1, r2, r3}
    1472:	b500      	push	{lr}
    1474:	b082      	sub	sp, #8
    1476:	aa03      	add	r2, sp, #12
    1478:	ca02      	ldmia	r2!, {r1}
    va_list args;
    va_start(args, fmt);
    147a:	9201      	str	r2, [sp, #4]
    int len = appendfv(fmt, args);
    147c:	f7ff ffea 	bl	1454 <_ZN3Str8appendfvEPKcSt9__va_list>
    va_end(args);
    return len;
}
    1480:	b002      	add	sp, #8
    1482:	bc08      	pop	{r3}
    1484:	b003      	add	sp, #12
    1486:	4718      	bx	r3

00001488 <_ZL8cmd_infoP3GSMPKcS2_>:
static void cmd_info(GSM* gsm, const char* sender, const char* args) {
    1488:	b5f0      	push	{r4, r5, r6, r7, lr}
    148a:	46d6      	mov	lr, sl
    148c:	464f      	mov	r7, r9
    148e:	4646      	mov	r6, r8
    1490:	b5c0      	push	{r6, r7, lr}
    1492:	b084      	sub	sp, #16
    1494:	4681      	mov	r9, r0
    1496:	4688      	mov	r8, r1
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
    1498:	aa02      	add	r2, sp, #8
    149a:	4b3c      	ldr	r3, [pc, #240]	; (158c <_ZL8cmd_infoP3GSMPKcS2_+0x104>)
    149c:	681b      	ldr	r3, [r3, #0]
    149e:	9302      	str	r3, [sp, #8]
    Capacity = 0;
    14a0:	9b03      	ldr	r3, [sp, #12]
    14a2:	0d5b      	lsrs	r3, r3, #21
    14a4:	0559      	lsls	r1, r3, #21
    14a6:	9103      	str	r1, [sp, #12]
    LocalBufSize = 0;
    14a8:	015b      	lsls	r3, r3, #5
    14aa:	4939      	ldr	r1, [pc, #228]	; (1590 <_ZL8cmd_infoP3GSMPKcS2_+0x108>)
    14ac:	400b      	ands	r3, r1
    14ae:	80d3      	strh	r3, [r2, #6]
    Owned = 0;
    14b0:	2300      	movs	r3, #0
    14b2:	71d3      	strb	r3, [r2, #7]
    if ((int)Capacity < buf_len)
    14b4:	9b03      	ldr	r3, [sp, #12]
    14b6:	02db      	lsls	r3, r3, #11
    14b8:	0adb      	lsrs	r3, r3, #11
    14ba:	2b06      	cmp	r3, #6
    14bc:	d912      	bls.n	14e4 <_ZL8cmd_infoP3GSMPKcS2_+0x5c>
    memcpy(Data, src, buf_len);
    14be:	ac02      	add	r4, sp, #8
    14c0:	2207      	movs	r2, #7
    14c2:	4934      	ldr	r1, [pc, #208]	; (1594 <_ZL8cmd_infoP3GSMPKcS2_+0x10c>)
    14c4:	9802      	ldr	r0, [sp, #8]
    14c6:	f001 f927 	bl	2718 <memcpy>
    Owned = 1;
    14ca:	79e2      	ldrb	r2, [r4, #7]
    14cc:	2380      	movs	r3, #128	; 0x80
    14ce:	425b      	negs	r3, r3
    14d0:	4313      	orrs	r3, r2
    14d2:	71e3      	strb	r3, [r4, #7]
        return m_data;
    14d4:	4b30      	ldr	r3, [pc, #192]	; (1598 <_ZL8cmd_infoP3GSMPKcS2_+0x110>)
    14d6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
        return m_data + m_size;
    14d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    14da:	00de      	lsls	r6, r3, #3
    14dc:	18f6      	adds	r6, r6, r3
    14de:	00b6      	lsls	r6, r6, #2
    14e0:	19a6      	adds	r6, r4, r6
    14e2:	e00b      	b.n	14fc <_ZL8cmd_infoP3GSMPKcS2_+0x74>
        reserve_discard(buf_len);
    14e4:	2107      	movs	r1, #7
    14e6:	0010      	movs	r0, r2
    14e8:	f7ff ff4a 	bl	1380 <_ZN3Str15reserve_discardEi>
    14ec:	e7e7      	b.n	14be <_ZL8cmd_infoP3GSMPKcS2_+0x36>
                    ((Sensors::TempHum*)node.data.data)->temperature, ((Sensors::TempHum*)node.data.data)->humidity);
    14ee:	8962      	ldrh	r2, [r4, #10]
    14f0:	89a3      	ldrh	r3, [r4, #12]
                str.appendf(" Temperature + humidity sensor:\n  Temperature: %d\n  Humidity: %d\n",
    14f2:	492a      	ldr	r1, [pc, #168]	; (159c <_ZL8cmd_infoP3GSMPKcS2_+0x114>)
    14f4:	a802      	add	r0, sp, #8
    14f6:	f7ff ffbb 	bl	1470 <_ZN3Str7appendfEPKcz>
    for(auto& node : net.m_nodes) {
    14fa:	3424      	adds	r4, #36	; 0x24
    14fc:	42b4      	cmp	r4, r6
    14fe:	d028      	beq.n	1552 <_ZL8cmd_infoP3GSMPKcS2_+0xca>
            node.data.id, node.data.name, node.data.type, (millis() - node.last_seen) / 1000);
    1500:	2700      	movs	r7, #0
    1502:	57e7      	ldrsb	r7, [r4, r7]
    1504:	1c65      	adds	r5, r4, #1
    1506:	7a63      	ldrb	r3, [r4, #9]
    1508:	469a      	mov	sl, r3
    150a:	f000 fb2d 	bl	1b68 <millis>
    150e:	6a23      	ldr	r3, [r4, #32]
    1510:	1ac0      	subs	r0, r0, r3
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    1512:	21fa      	movs	r1, #250	; 0xfa
    1514:	0089      	lsls	r1, r1, #2
    1516:	f000 fff5 	bl	2504 <__udivsi3>
    151a:	9001      	str	r0, [sp, #4]
    151c:	4653      	mov	r3, sl
    151e:	9300      	str	r3, [sp, #0]
    1520:	002b      	movs	r3, r5
    1522:	003a      	movs	r2, r7
    1524:	491e      	ldr	r1, [pc, #120]	; (15a0 <_ZL8cmd_infoP3GSMPKcS2_+0x118>)
    1526:	a802      	add	r0, sp, #8
    1528:	f7ff ffa2 	bl	1470 <_ZN3Str7appendfEPKcz>
        switch(node.data.type) {
    152c:	7a63      	ldrb	r3, [r4, #9]
    152e:	2b02      	cmp	r3, #2
    1530:	d0dd      	beq.n	14ee <_ZL8cmd_infoP3GSMPKcS2_+0x66>
    1532:	2b03      	cmp	r3, #3
    1534:	d007      	beq.n	1546 <_ZL8cmd_infoP3GSMPKcS2_+0xbe>
    1536:	2b01      	cmp	r3, #1
    1538:	d1df      	bne.n	14fa <_ZL8cmd_infoP3GSMPKcS2_+0x72>
                str.appendf(" Soil moisture sensor:\n  Moisture: %d\n", ((Sensors::Soil*)node.data.data)->moisture);
    153a:	8962      	ldrh	r2, [r4, #10]
    153c:	4919      	ldr	r1, [pc, #100]	; (15a4 <_ZL8cmd_infoP3GSMPKcS2_+0x11c>)
    153e:	a802      	add	r0, sp, #8
    1540:	f7ff ff96 	bl	1470 <_ZN3Str7appendfEPKcz>
                break;
    1544:	e7d9      	b.n	14fa <_ZL8cmd_infoP3GSMPKcS2_+0x72>
                    ((Sensors::Temp*)node.data.data)->temperature);
    1546:	8962      	ldrh	r2, [r4, #10]
                str.appendf(" Temperature sensor:\n  Temperature: %d\n",
    1548:	4917      	ldr	r1, [pc, #92]	; (15a8 <_ZL8cmd_infoP3GSMPKcS2_+0x120>)
    154a:	a802      	add	r0, sp, #8
    154c:	f7ff ff90 	bl	1470 <_ZN3Str7appendfEPKcz>
                break;
    1550:	e7d3      	b.n	14fa <_ZL8cmd_infoP3GSMPKcS2_+0x72>
    gsm->SendSMS(sender, str.c_str());
    1552:	9a02      	ldr	r2, [sp, #8]
    1554:	4641      	mov	r1, r8
    1556:	4648      	mov	r0, r9
    1558:	f7fe ff8c 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
        if (Owned && !is_using_local_buf())
    155c:	ab02      	add	r3, sp, #8
    155e:	79db      	ldrb	r3, [r3, #7]
    1560:	b25b      	sxtb	r3, r3
    1562:	2b00      	cmp	r3, #0
    1564:	db05      	blt.n	1572 <_ZL8cmd_infoP3GSMPKcS2_+0xea>
}
    1566:	b004      	add	sp, #16
    1568:	bc1c      	pop	{r2, r3, r4}
    156a:	4690      	mov	r8, r2
    156c:	4699      	mov	r9, r3
    156e:	46a2      	mov	sl, r4
    1570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1572:	9802      	ldr	r0, [sp, #8]
    1574:	ab04      	add	r3, sp, #16
    1576:	4298      	cmp	r0, r3
    1578:	d002      	beq.n	1580 <_ZL8cmd_infoP3GSMPKcS2_+0xf8>
            STR_MEMFREE(Data);
    157a:	f001 f8c3 	bl	2704 <free>
    157e:	e7f2      	b.n	1566 <_ZL8cmd_infoP3GSMPKcS2_+0xde>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1580:	ab02      	add	r3, sp, #8
    1582:	88da      	ldrh	r2, [r3, #6]
    1584:	4b09      	ldr	r3, [pc, #36]	; (15ac <_ZL8cmd_infoP3GSMPKcS2_+0x124>)
    1586:	421a      	tst	r2, r3
    1588:	d1ed      	bne.n	1566 <_ZL8cmd_infoP3GSMPKcS2_+0xde>
    158a:	e7f6      	b.n	157a <_ZL8cmd_infoP3GSMPKcS2_+0xf2>
    158c:	20000010 	.word	0x20000010
    1590:	ffff801f 	.word	0xffff801f
    1594:	00003508 	.word	0x00003508
    1598:	200000a8 	.word	0x200000a8
    159c:	000035d0 	.word	0x000035d0
    15a0:	0000356c 	.word	0x0000356c
    15a4:	000035a8 	.word	0x000035a8
    15a8:	00003614 	.word	0x00003614
    15ac:	00007fe0 	.word	0x00007fe0

000015b0 <_ZN6VectorI7SMSFuncE9push_backERKS0_>:
    void push_back(const T& elem) {
    15b0:	b570      	push	{r4, r5, r6, lr}
    15b2:	0004      	movs	r4, r0
    15b4:	000d      	movs	r5, r1
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    15b6:	6801      	ldr	r1, [r0, #0]
    15b8:	2900      	cmp	r1, #0
    15ba:	d015      	beq.n	15e8 <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x38>
    15bc:	3101      	adds	r1, #1
    15be:	004b      	lsls	r3, r1, #1
    15c0:	1859      	adds	r1, r3, r1
    15c2:	0089      	lsls	r1, r1, #2
    15c4:	6840      	ldr	r0, [r0, #4]
    15c6:	f001 f96f 	bl	28a8 <realloc>
    15ca:	0003      	movs	r3, r0
        if(!new_data) return;
    15cc:	2b00      	cmp	r3, #0
    15ce:	d00a      	beq.n	15e6 <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x36>
        m_data = new_data;
    15d0:	6063      	str	r3, [r4, #4]
        *(m_data + m_size) = elem;
    15d2:	6822      	ldr	r2, [r4, #0]
    15d4:	0050      	lsls	r0, r2, #1
    15d6:	1880      	adds	r0, r0, r2
    15d8:	0080      	lsls	r0, r0, #2
    15da:	181b      	adds	r3, r3, r0
    15dc:	cd07      	ldmia	r5!, {r0, r1, r2}
    15de:	c307      	stmia	r3!, {r0, r1, r2}
        m_size++;
    15e0:	6823      	ldr	r3, [r4, #0]
    15e2:	3301      	adds	r3, #1
    15e4:	6023      	str	r3, [r4, #0]
    }
    15e6:	bd70      	pop	{r4, r5, r6, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    15e8:	200c      	movs	r0, #12
    15ea:	f001 f881 	bl	26f0 <malloc>
    15ee:	0003      	movs	r3, r0
    15f0:	e7ec      	b.n	15cc <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x1c>
    15f2:	Address 0x000015f2 is out of bounds.


000015f4 <main>:
int main() {
    15f4:	b570      	push	{r4, r5, r6, lr}
    15f6:	b09c      	sub	sp, #112	; 0x70
    g_uart1.init({{GPIO_PORTA, 24}, {GPIO_PORTA, 25}, UART_SER1_TXPO_PA24, UART_SER1_RXPO_PA25}, CALC_BAUD(115200));
    15f8:	a90e      	add	r1, sp, #56	; 0x38
    15fa:	4c36      	ldr	r4, [pc, #216]	; (16d4 <main+0xe0>)
    15fc:	000b      	movs	r3, r1
    15fe:	0022      	movs	r2, r4
    1600:	ca61      	ldmia	r2!, {r0, r5, r6}
    1602:	c361      	stmia	r3!, {r0, r5, r6}
    1604:	ca21      	ldmia	r2!, {r0, r5}
    1606:	c321      	stmia	r3!, {r0, r5}
    1608:	4a33      	ldr	r2, [pc, #204]	; (16d8 <main+0xe4>)
    160a:	4834      	ldr	r0, [pc, #208]	; (16dc <main+0xe8>)
    160c:	f000 faf2 	bl	1bf4 <_ZN6uart_t4initERK13uart_pincfg_tt>
    g_spi0.Init({
    1610:	a806      	add	r0, sp, #24
    1612:	3414      	adds	r4, #20
    1614:	0002      	movs	r2, r0
    1616:	cc2a      	ldmia	r4!, {r1, r3, r5}
    1618:	c22a      	stmia	r2!, {r1, r3, r5}
    161a:	cc2a      	ldmia	r4!, {r1, r3, r5}
    161c:	c22a      	stmia	r2!, {r1, r3, r5}
    161e:	cc0a      	ldmia	r4!, {r1, r3}
    1620:	c20a      	stmia	r2!, {r1, r3}
    1622:	2314      	movs	r3, #20
    1624:	9305      	str	r3, [sp, #20]
    1626:	ab09      	add	r3, sp, #36	; 0x24
    1628:	466a      	mov	r2, sp
    162a:	cb32      	ldmia	r3!, {r1, r4, r5}
    162c:	c232      	stmia	r2!, {r1, r4, r5}
    162e:	cb12      	ldmia	r3!, {r1, r4}
    1630:	c212      	stmia	r2!, {r1, r4}
    1632:	9906      	ldr	r1, [sp, #24]
    1634:	9a07      	ldr	r2, [sp, #28]
    1636:	9b08      	ldr	r3, [sp, #32]
    1638:	4829      	ldr	r0, [pc, #164]	; (16e0 <main+0xec>)
    163a:	f000 f86d 	bl	1718 <_ZN5spi_t4InitE12spi_pincfg_tt>
            PORT->Group[port].DIRSET.reg = 1 << pin;
    163e:	4b29      	ldr	r3, [pc, #164]	; (16e4 <main+0xf0>)
    1640:	2210      	movs	r2, #16
    1642:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    1644:	2144      	movs	r1, #68	; 0x44
    1646:	5c5a      	ldrb	r2, [r3, r1]
    1648:	2002      	movs	r0, #2
    164a:	4382      	bics	r2, r0
    164c:	545a      	strb	r2, [r3, r1]
    if(!net.begin()) {
    164e:	4826      	ldr	r0, [pc, #152]	; (16e8 <main+0xf4>)
    1650:	f000 fd4a 	bl	20e8 <_ZN9Sensornet5beginEv>
    1654:	2800      	cmp	r0, #0
    1656:	d106      	bne.n	1666 <main+0x72>

    inline void toggle(const int port, const int pin) {
        PORT->Group[port].OUTTGL.reg = 1 << pin;
    1658:	4b22      	ldr	r3, [pc, #136]	; (16e4 <main+0xf0>)
    165a:	2210      	movs	r2, #16
    165c:	61da      	str	r2, [r3, #28]
            delay_usec(800000);
    165e:	4823      	ldr	r0, [pc, #140]	; (16ec <main+0xf8>)
    1660:	f002 f8ea 	bl	3838 <__delay_usec_veneer>
        while(1) {
    1664:	e7f8      	b.n	1658 <main+0x64>
    if(!gsm.Init()) {
    1666:	4822      	ldr	r0, [pc, #136]	; (16f0 <main+0xfc>)
    1668:	f7fe fec2 	bl	3f0 <_ZN3GSM4InitEv>
    166c:	2800      	cmp	r0, #0
    166e:	d109      	bne.n	1684 <main+0x90>
            net.Poll();
    1670:	481d      	ldr	r0, [pc, #116]	; (16e8 <main+0xf4>)
    1672:	f000 fe49 	bl	2308 <_ZN9Sensornet4PollEv>
    1676:	4b1b      	ldr	r3, [pc, #108]	; (16e4 <main+0xf0>)
    1678:	2210      	movs	r2, #16
    167a:	61da      	str	r2, [r3, #28]
            delay_usec(200000);
    167c:	481d      	ldr	r0, [pc, #116]	; (16f4 <main+0x100>)
    167e:	f002 f8db 	bl	3838 <__delay_usec_veneer>
        while(1) {
    1682:	e7f5      	b.n	1670 <main+0x7c>
    gsm.AddSMSFunc({ "info", cmd_info, GSM::LEVEL_USER });
    1684:	a913      	add	r1, sp, #76	; 0x4c
    1686:	4b13      	ldr	r3, [pc, #76]	; (16d4 <main+0xe0>)
    1688:	3334      	adds	r3, #52	; 0x34
    168a:	000a      	movs	r2, r1
    168c:	cb31      	ldmia	r3!, {r0, r4, r5}
    168e:	c231      	stmia	r2!, {r0, r4, r5}

    void ReadSMS(int index);
    void ProcessSMS(const char* text, const char* sender);
    bool SendSMS(const char* number, const char* text);

    void AddSMSFunc(const SMSFunc& func) { m_smsfuncs.push_back(func); }
    1690:	4c17      	ldr	r4, [pc, #92]	; (16f0 <main+0xfc>)
    1692:	3408      	adds	r4, #8
    1694:	0020      	movs	r0, r4
    1696:	f7ff ff8b 	bl	15b0 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, GSM::LEVEL_USER });
    169a:	a916      	add	r1, sp, #88	; 0x58
    169c:	4b16      	ldr	r3, [pc, #88]	; (16f8 <main+0x104>)
    169e:	9316      	str	r3, [sp, #88]	; 0x58
    16a0:	4b16      	ldr	r3, [pc, #88]	; (16fc <main+0x108>)
    16a2:	604b      	str	r3, [r1, #4]
    16a4:	2561      	movs	r5, #97	; 0x61
    16a6:	720d      	strb	r5, [r1, #8]
    16a8:	0020      	movs	r0, r4
    16aa:	f7ff ff81 	bl	15b0 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    gsm.AddSMSFunc({ "clear", [](GSM* gsm, const char* sender, const char* args) { net.m_nodes.clear(); }, GSM::LEVEL_USER });
    16ae:	a919      	add	r1, sp, #100	; 0x64
    16b0:	4b13      	ldr	r3, [pc, #76]	; (1700 <main+0x10c>)
    16b2:	9319      	str	r3, [sp, #100]	; 0x64
    16b4:	4b13      	ldr	r3, [pc, #76]	; (1704 <main+0x110>)
    16b6:	604b      	str	r3, [r1, #4]
    16b8:	720d      	strb	r5, [r1, #8]
    16ba:	0020      	movs	r0, r4
    16bc:	f7ff ff78 	bl	15b0 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
        gsm.Poll();
    16c0:	480b      	ldr	r0, [pc, #44]	; (16f0 <main+0xfc>)
    16c2:	f7ff f99b 	bl	9fc <_ZN3GSM4PollEv>
        net.Poll();
    16c6:	4808      	ldr	r0, [pc, #32]	; (16e8 <main+0xf4>)
    16c8:	f000 fe1e 	bl	2308 <_ZN9Sensornet4PollEv>
    16cc:	4b05      	ldr	r3, [pc, #20]	; (16e4 <main+0xf0>)
    16ce:	2210      	movs	r2, #16
    16d0:	61da      	str	r2, [r3, #28]
    16d2:	e7f5      	b.n	16c0 <main+0xcc>
    16d4:	00003344 	.word	0x00003344
    16d8:	0000f62b 	.word	0x0000f62b
    16dc:	200002fc 	.word	0x200002fc
    16e0:	200000e0 	.word	0x200000e0
    16e4:	41004400 	.word	0x41004400
    16e8:	200000a8 	.word	0x200000a8
    16ec:	000c3500 	.word	0x000c3500
    16f0:	20000094 	.word	0x20000094
    16f4:	00030d40 	.word	0x00030d40
    16f8:	0000363c 	.word	0x0000363c
    16fc:	00001275 	.word	0x00001275
    1700:	00003644 	.word	0x00003644
    1704:	00001235 	.word	0x00001235

00001708 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE>:
    1708:	b510      	push	{r4, lr}
    170a:	4902      	ldr	r1, [pc, #8]	; (1714 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0xc>)
    170c:	2001      	movs	r0, #1
    170e:	f7ff fdbb 	bl	1288 <_Z41__static_initialization_and_destruction_0ii>
    1712:	bd10      	pop	{r4, pc}
    1714:	0000ffff 	.word	0x0000ffff

00001718 <_ZN5spi_t4InitE12spi_pincfg_tt>:
#include "spi.h"

spi_t g_spi0(SERCOM0);
spi_t g_spi1(SERCOM1);

void spi_t::Init(spi_pincfg_t pincfg, uint16_t speed) {
    1718:	b084      	sub	sp, #16
    171a:	b5f0      	push	{r4, r5, r6, r7, lr}
    171c:	46c6      	mov	lr, r8
    171e:	b500      	push	{lr}
    1720:	9107      	str	r1, [sp, #28]
    1722:	9208      	str	r2, [sp, #32]
    1724:	9309      	str	r3, [sp, #36]	; 0x24
    1726:	ab0f      	add	r3, sp, #60	; 0x3c
    1728:	881b      	ldrh	r3, [r3, #0]
    172a:	4698      	mov	r8, r3
    if(m_sercom == SERCOM1) {
    172c:	4b83      	ldr	r3, [pc, #524]	; (193c <_ZN5spi_t4InitE12spi_pincfg_tt+0x224>)
    172e:	6802      	ldr	r2, [r0, #0]
    1730:	429a      	cmp	r2, r3
    1732:	d100      	bne.n	1736 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1e>
    1734:	e0c1      	b.n	18ba <_ZN5spi_t4InitE12spi_pincfg_tt+0x1a2>
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);*/
        PM->APBCMASK.bit.SERCOM1_ = 1;
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
        while(GCLK->STATUS.bit.SYNCBUSY);
    } else {
        PM->APBCMASK.bit.SERCOM0_ = 1;
    1736:	4a82      	ldr	r2, [pc, #520]	; (1940 <_ZN5spi_t4InitE12spi_pincfg_tt+0x228>)
    1738:	6a13      	ldr	r3, [r2, #32]
    173a:	2404      	movs	r4, #4
    173c:	4323      	orrs	r3, r4
    173e:	6213      	str	r3, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    1740:	4b80      	ldr	r3, [pc, #512]	; (1944 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    1742:	4a81      	ldr	r2, [pc, #516]	; (1948 <_ZN5spi_t4InitE12spi_pincfg_tt+0x230>)
    1744:	805a      	strh	r2, [r3, #2]
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
        while(GCLK->STATUS.bit.SYNCBUSY);
    1746:	4b7f      	ldr	r3, [pc, #508]	; (1944 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    1748:	785b      	ldrb	r3, [r3, #1]
    174a:	09db      	lsrs	r3, r3, #7
    174c:	d1fb      	bne.n	1746 <_ZN5spi_t4InitE12spi_pincfg_tt+0x2e>
    }
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    174e:	ab07      	add	r3, sp, #28
    1750:	7e1b      	ldrb	r3, [r3, #24]
    1752:	2b00      	cmp	r3, #0
    1754:	d100      	bne.n	1758 <_ZN5spi_t4InitE12spi_pincfg_tt+0x40>
    1756:	e0bd      	b.n	18d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1bc>
    1758:	2503      	movs	r5, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    175a:	9a07      	ldr	r2, [sp, #28]
    175c:	9c08      	ldr	r4, [sp, #32]
        if(pin & 1)
    175e:	07e3      	lsls	r3, r4, #31
    1760:	d400      	bmi.n	1764 <_ZN5spi_t4InitE12spi_pincfg_tt+0x4c>
    1762:	e0b9      	b.n	18d8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1c0>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1764:	0fe3      	lsrs	r3, r4, #31
    1766:	191b      	adds	r3, r3, r4
    1768:	105f      	asrs	r7, r3, #1
    176a:	260f      	movs	r6, #15
    176c:	4035      	ands	r5, r6
    176e:	01d3      	lsls	r3, r2, #7
    1770:	4976      	ldr	r1, [pc, #472]	; (194c <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1772:	468c      	mov	ip, r1
    1774:	4463      	add	r3, ip
    1776:	19db      	adds	r3, r3, r7
    1778:	3330      	adds	r3, #48	; 0x30
    177a:	781f      	ldrb	r7, [r3, #0]
    177c:	012d      	lsls	r5, r5, #4
    177e:	403e      	ands	r6, r7
    1780:	432e      	orrs	r6, r5
    1782:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1784:	01d3      	lsls	r3, r2, #7
    1786:	4a71      	ldr	r2, [pc, #452]	; (194c <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1788:	4694      	mov	ip, r2
    178a:	4463      	add	r3, ip
    178c:	191b      	adds	r3, r3, r4
    178e:	3340      	adds	r3, #64	; 0x40
    1790:	781a      	ldrb	r2, [r3, #0]
    1792:	2401      	movs	r4, #1
    1794:	4322      	orrs	r2, r4
    1796:	701a      	strb	r2, [r3, #0]
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1798:	ab07      	add	r3, sp, #28
    179a:	7e5b      	ldrb	r3, [r3, #25]
    179c:	2b00      	cmp	r3, #0
    179e:	d100      	bne.n	17a2 <_ZN5spi_t4InitE12spi_pincfg_tt+0x8a>
    17a0:	e0a9      	b.n	18f6 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1de>
    17a2:	2503      	movs	r5, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    17a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    17a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        if(pin & 1)
    17a8:	07e3      	lsls	r3, r4, #31
    17aa:	d400      	bmi.n	17ae <_ZN5spi_t4InitE12spi_pincfg_tt+0x96>
    17ac:	e0a5      	b.n	18fa <_ZN5spi_t4InitE12spi_pincfg_tt+0x1e2>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    17ae:	0fe3      	lsrs	r3, r4, #31
    17b0:	191b      	adds	r3, r3, r4
    17b2:	105f      	asrs	r7, r3, #1
    17b4:	260f      	movs	r6, #15
    17b6:	4035      	ands	r5, r6
    17b8:	01d3      	lsls	r3, r2, #7
    17ba:	4964      	ldr	r1, [pc, #400]	; (194c <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    17bc:	468c      	mov	ip, r1
    17be:	4463      	add	r3, ip
    17c0:	19db      	adds	r3, r3, r7
    17c2:	3330      	adds	r3, #48	; 0x30
    17c4:	781f      	ldrb	r7, [r3, #0]
    17c6:	012d      	lsls	r5, r5, #4
    17c8:	403e      	ands	r6, r7
    17ca:	432e      	orrs	r6, r5
    17cc:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    17ce:	01d3      	lsls	r3, r2, #7
    17d0:	4a5e      	ldr	r2, [pc, #376]	; (194c <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    17d2:	4694      	mov	ip, r2
    17d4:	4463      	add	r3, ip
    17d6:	191b      	adds	r3, r3, r4
    17d8:	3340      	adds	r3, #64	; 0x40
    17da:	781a      	ldrb	r2, [r3, #0]
    17dc:	2401      	movs	r4, #1
    17de:	4322      	orrs	r2, r4
    17e0:	701a      	strb	r2, [r3, #0]
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    17e2:	ab07      	add	r3, sp, #28
    17e4:	7e9b      	ldrb	r3, [r3, #26]
    17e6:	2b00      	cmp	r3, #0
    17e8:	d100      	bne.n	17ec <_ZN5spi_t4InitE12spi_pincfg_tt+0xd4>
    17ea:	e095      	b.n	1918 <_ZN5spi_t4InitE12spi_pincfg_tt+0x200>
    17ec:	2503      	movs	r5, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    17ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    17f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
        if(pin & 1)
    17f2:	07e3      	lsls	r3, r4, #31
    17f4:	d400      	bmi.n	17f8 <_ZN5spi_t4InitE12spi_pincfg_tt+0xe0>
    17f6:	e091      	b.n	191c <_ZN5spi_t4InitE12spi_pincfg_tt+0x204>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    17f8:	0fe3      	lsrs	r3, r4, #31
    17fa:	191b      	adds	r3, r3, r4
    17fc:	105f      	asrs	r7, r3, #1
    17fe:	260f      	movs	r6, #15
    1800:	4035      	ands	r5, r6
    1802:	01d3      	lsls	r3, r2, #7
    1804:	4951      	ldr	r1, [pc, #324]	; (194c <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1806:	468c      	mov	ip, r1
    1808:	4463      	add	r3, ip
    180a:	19db      	adds	r3, r3, r7
    180c:	3330      	adds	r3, #48	; 0x30
    180e:	781f      	ldrb	r7, [r3, #0]
    1810:	012d      	lsls	r5, r5, #4
    1812:	403e      	ands	r6, r7
    1814:	432e      	orrs	r6, r5
    1816:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1818:	01d3      	lsls	r3, r2, #7
    181a:	4a4c      	ldr	r2, [pc, #304]	; (194c <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    181c:	4694      	mov	ip, r2
    181e:	4463      	add	r3, ip
    1820:	191b      	adds	r3, r3, r4
    1822:	3340      	adds	r3, #64	; 0x40
    1824:	781a      	ldrb	r2, [r3, #0]
    1826:	2401      	movs	r4, #1
    1828:	4322      	orrs	r2, r4
    182a:	701a      	strb	r2, [r3, #0]

    m_sercom->SPI.CTRLA.bit.ENABLE = 0;
    182c:	6802      	ldr	r2, [r0, #0]
    182e:	6813      	ldr	r3, [r2, #0]
    1830:	2402      	movs	r4, #2
    1832:	43a3      	bics	r3, r4
    1834:	6013      	str	r3, [r2, #0]
	m_sercom->SPI.CTRLA.bit.SWRST = 1;
    1836:	6802      	ldr	r2, [r0, #0]
    1838:	6813      	ldr	r3, [r2, #0]
    183a:	3c01      	subs	r4, #1
    183c:	4323      	orrs	r3, r4
    183e:	6013      	str	r3, [r2, #0]
	while(m_sercom->SPI.CTRLA.bit.SWRST);
    1840:	6803      	ldr	r3, [r0, #0]
    1842:	681a      	ldr	r2, [r3, #0]
    1844:	07d2      	lsls	r2, r2, #31
    1846:	d4fb      	bmi.n	1840 <_ZN5spi_t4InitE12spi_pincfg_tt+0x128>

	m_sercom->SPI.CTRLA.bit.MODE = SERCOM_SPI_CTRLA_MODE_SPI_MASTER_Val;
    1848:	681a      	ldr	r2, [r3, #0]
    184a:	241c      	movs	r4, #28
    184c:	43a2      	bics	r2, r4
    184e:	3c10      	subs	r4, #16
    1850:	4322      	orrs	r2, r4
    1852:	601a      	str	r2, [r3, #0]
	m_sercom->SPI.CTRLA.bit.DOPO = pincfg.mosisckpad;
    1854:	6806      	ldr	r6, [r0, #0]
    1856:	ad07      	add	r5, sp, #28
    1858:	7f2c      	ldrb	r4, [r5, #28]
    185a:	2303      	movs	r3, #3
    185c:	401c      	ands	r4, r3
    185e:	6832      	ldr	r2, [r6, #0]
    1860:	0424      	lsls	r4, r4, #16
    1862:	4f3b      	ldr	r7, [pc, #236]	; (1950 <_ZN5spi_t4InitE12spi_pincfg_tt+0x238>)
    1864:	403a      	ands	r2, r7
    1866:	4322      	orrs	r2, r4
    1868:	6032      	str	r2, [r6, #0]
	m_sercom->SPI.CTRLA.bit.DIPO = pincfg.misopad;
    186a:	6804      	ldr	r4, [r0, #0]
    186c:	7eed      	ldrb	r5, [r5, #27]
    186e:	6822      	ldr	r2, [r4, #0]
    1870:	402b      	ands	r3, r5
    1872:	051b      	lsls	r3, r3, #20
    1874:	4d37      	ldr	r5, [pc, #220]	; (1954 <_ZN5spi_t4InitE12spi_pincfg_tt+0x23c>)
    1876:	402a      	ands	r2, r5
    1878:	4313      	orrs	r3, r2
    187a:	6023      	str	r3, [r4, #0]

    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    187c:	6803      	ldr	r3, [r0, #0]
    187e:	69da      	ldr	r2, [r3, #28]
    1880:	0752      	lsls	r2, r2, #29
    1882:	d4fb      	bmi.n	187c <_ZN5spi_t4InitE12spi_pincfg_tt+0x164>
    /* SPI receiver is enabled */
    m_sercom->SPI.CTRLB.bit.RXEN = 1;
    1884:	685c      	ldr	r4, [r3, #4]
    1886:	2280      	movs	r2, #128	; 0x80
    1888:	0292      	lsls	r2, r2, #10
    188a:	4322      	orrs	r2, r4
    188c:	605a      	str	r2, [r3, #4]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    188e:	6803      	ldr	r3, [r0, #0]
    1890:	69da      	ldr	r2, [r3, #28]
    1892:	0752      	lsls	r2, r2, #29
    1894:	d4fb      	bmi.n	188e <_ZN5spi_t4InitE12spi_pincfg_tt+0x176>

    /* baud register value corresponds to the SPI speed */
    m_sercom->SPI.BAUD.reg = speed;
    1896:	4642      	mov	r2, r8
    1898:	b2d1      	uxtb	r1, r2
    189a:	7319      	strb	r1, [r3, #12]
    /* SERCOM peripheral enabled */
    m_sercom->SPI.CTRLA.bit.ENABLE = 1;
    189c:	6802      	ldr	r2, [r0, #0]
    189e:	6813      	ldr	r3, [r2, #0]
    18a0:	2102      	movs	r1, #2
    18a2:	430b      	orrs	r3, r1
    18a4:	6013      	str	r3, [r2, #0]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.ENABLE);
    18a6:	6803      	ldr	r3, [r0, #0]
    18a8:	69db      	ldr	r3, [r3, #28]
    18aa:	079b      	lsls	r3, r3, #30
    18ac:	d4fb      	bmi.n	18a6 <_ZN5spi_t4InitE12spi_pincfg_tt+0x18e>
}
    18ae:	bc04      	pop	{r2}
    18b0:	4690      	mov	r8, r2
    18b2:	bcf0      	pop	{r4, r5, r6, r7}
    18b4:	bc08      	pop	{r3}
    18b6:	b004      	add	sp, #16
    18b8:	4718      	bx	r3
        PM->APBCMASK.bit.SERCOM1_ = 1;
    18ba:	4a21      	ldr	r2, [pc, #132]	; (1940 <_ZN5spi_t4InitE12spi_pincfg_tt+0x228>)
    18bc:	6a13      	ldr	r3, [r2, #32]
    18be:	2408      	movs	r4, #8
    18c0:	4323      	orrs	r3, r4
    18c2:	6213      	str	r3, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    18c4:	4b1f      	ldr	r3, [pc, #124]	; (1944 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    18c6:	4a24      	ldr	r2, [pc, #144]	; (1958 <_ZN5spi_t4InitE12spi_pincfg_tt+0x240>)
    18c8:	805a      	strh	r2, [r3, #2]
        while(GCLK->STATUS.bit.SYNCBUSY);
    18ca:	4b1e      	ldr	r3, [pc, #120]	; (1944 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    18cc:	785b      	ldrb	r3, [r3, #1]
    18ce:	09db      	lsrs	r3, r3, #7
    18d0:	d1fb      	bne.n	18ca <_ZN5spi_t4InitE12spi_pincfg_tt+0x1b2>
    18d2:	e73c      	b.n	174e <_ZN5spi_t4InitE12spi_pincfg_tt+0x36>
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    18d4:	2502      	movs	r5, #2
    18d6:	e740      	b.n	175a <_ZN5spi_t4InitE12spi_pincfg_tt+0x42>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    18d8:	0fe3      	lsrs	r3, r4, #31
    18da:	191b      	adds	r3, r3, r4
    18dc:	105e      	asrs	r6, r3, #1
    18de:	01d3      	lsls	r3, r2, #7
    18e0:	491a      	ldr	r1, [pc, #104]	; (194c <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    18e2:	468c      	mov	ip, r1
    18e4:	4463      	add	r3, ip
    18e6:	199b      	adds	r3, r3, r6
    18e8:	3330      	adds	r3, #48	; 0x30
    18ea:	781e      	ldrb	r6, [r3, #0]
    18ec:	270f      	movs	r7, #15
    18ee:	43be      	bics	r6, r7
    18f0:	4335      	orrs	r5, r6
    18f2:	701d      	strb	r5, [r3, #0]
    18f4:	e746      	b.n	1784 <_ZN5spi_t4InitE12spi_pincfg_tt+0x6c>
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    18f6:	2502      	movs	r5, #2
    18f8:	e754      	b.n	17a4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x8c>
    18fa:	0fe3      	lsrs	r3, r4, #31
    18fc:	191b      	adds	r3, r3, r4
    18fe:	105e      	asrs	r6, r3, #1
    1900:	01d3      	lsls	r3, r2, #7
    1902:	4912      	ldr	r1, [pc, #72]	; (194c <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1904:	468c      	mov	ip, r1
    1906:	4463      	add	r3, ip
    1908:	199b      	adds	r3, r3, r6
    190a:	3330      	adds	r3, #48	; 0x30
    190c:	781e      	ldrb	r6, [r3, #0]
    190e:	270f      	movs	r7, #15
    1910:	43be      	bics	r6, r7
    1912:	4335      	orrs	r5, r6
    1914:	701d      	strb	r5, [r3, #0]
    1916:	e75a      	b.n	17ce <_ZN5spi_t4InitE12spi_pincfg_tt+0xb6>
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1918:	2502      	movs	r5, #2
    191a:	e768      	b.n	17ee <_ZN5spi_t4InitE12spi_pincfg_tt+0xd6>
    191c:	0fe3      	lsrs	r3, r4, #31
    191e:	191b      	adds	r3, r3, r4
    1920:	105e      	asrs	r6, r3, #1
    1922:	01d3      	lsls	r3, r2, #7
    1924:	4909      	ldr	r1, [pc, #36]	; (194c <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1926:	468c      	mov	ip, r1
    1928:	4463      	add	r3, ip
    192a:	199b      	adds	r3, r3, r6
    192c:	3330      	adds	r3, #48	; 0x30
    192e:	781e      	ldrb	r6, [r3, #0]
    1930:	270f      	movs	r7, #15
    1932:	43be      	bics	r6, r7
    1934:	4335      	orrs	r5, r6
    1936:	701d      	strb	r5, [r3, #0]
    1938:	e76e      	b.n	1818 <_ZN5spi_t4InitE12spi_pincfg_tt+0x100>
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	42000c00 	.word	0x42000c00
    1940:	40000400 	.word	0x40000400
    1944:	40000c00 	.word	0x40000c00
    1948:	0000400e 	.word	0x0000400e
    194c:	41004400 	.word	0x41004400
    1950:	fffcffff 	.word	0xfffcffff
    1954:	ffcfffff 	.word	0xffcfffff
    1958:	0000400f 	.word	0x0000400f

0000195c <_ZN5spi_tC1EP6Sercom>:

spi_t::spi_t(Sercom* sercom) {
    m_sercom = sercom;
    195c:	6001      	str	r1, [r0, #0]
}
    195e:	4770      	bx	lr

00001960 <_Z41__static_initialization_and_destruction_0ii>:
    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    //m_sercom->SPI.INTFLAG.bit.RXC = 1; // Clear RXC flag by setting it to 1
    m_sercom->SPI.DATA.reg = b;
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
	return m_sercom->SPI.DATA.reg;
    1960:	b510      	push	{r4, lr}
    1962:	2801      	cmp	r0, #1
    1964:	d000      	beq.n	1968 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1966:	bd10      	pop	{r4, pc}
    1968:	4b05      	ldr	r3, [pc, #20]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0x20>)
    196a:	4299      	cmp	r1, r3
    196c:	d1fb      	bne.n	1966 <_Z41__static_initialization_and_destruction_0ii+0x6>
spi_t g_spi0(SERCOM0);
    196e:	4905      	ldr	r1, [pc, #20]	; (1984 <_Z41__static_initialization_and_destruction_0ii+0x24>)
    1970:	4805      	ldr	r0, [pc, #20]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    1972:	f7ff fff3 	bl	195c <_ZN5spi_tC1EP6Sercom>
spi_t g_spi1(SERCOM1);
    1976:	4905      	ldr	r1, [pc, #20]	; (198c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    1978:	4805      	ldr	r0, [pc, #20]	; (1990 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    197a:	f7ff ffef 	bl	195c <_ZN5spi_tC1EP6Sercom>
    197e:	e7f2      	b.n	1966 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1980:	0000ffff 	.word	0x0000ffff
    1984:	42000800 	.word	0x42000800
    1988:	200000e0 	.word	0x200000e0
    198c:	42000c00 	.word	0x42000c00
    1990:	200000e4 	.word	0x200000e4

00001994 <_ZN5spi_t8TransferEh>:
    if(!m_sercom) return 0xFF;
    1994:	6802      	ldr	r2, [r0, #0]
    1996:	2a00      	cmp	r2, #0
    1998:	d00a      	beq.n	19b0 <_ZN5spi_t8TransferEh+0x1c>
    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    199a:	7e13      	ldrb	r3, [r2, #24]
    199c:	07db      	lsls	r3, r3, #31
    199e:	d5fc      	bpl.n	199a <_ZN5spi_t8TransferEh+0x6>
    m_sercom->SPI.DATA.reg = b;
    19a0:	6291      	str	r1, [r2, #40]	; 0x28
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
    19a2:	6803      	ldr	r3, [r0, #0]
    19a4:	7e1a      	ldrb	r2, [r3, #24]
    19a6:	0752      	lsls	r2, r2, #29
    19a8:	d5fb      	bpl.n	19a2 <_ZN5spi_t8TransferEh+0xe>
	return m_sercom->SPI.DATA.reg;
    19aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
    19ac:	b2c0      	uxtb	r0, r0
    19ae:	4770      	bx	lr
    if(!m_sercom) return 0xFF;
    19b0:	20ff      	movs	r0, #255	; 0xff
    19b2:	e7fc      	b.n	19ae <_ZN5spi_t8TransferEh+0x1a>

000019b4 <_GLOBAL__sub_I_g_spi0>:
    19b4:	b510      	push	{r4, lr}
    19b6:	4902      	ldr	r1, [pc, #8]	; (19c0 <_GLOBAL__sub_I_g_spi0+0xc>)
    19b8:	2001      	movs	r0, #1
    19ba:	f7ff ffd1 	bl	1960 <_Z41__static_initialization_and_destruction_0ii>
    19be:	bd10      	pop	{r4, pc}
    19c0:	0000ffff 	.word	0x0000ffff

000019c4 <initializeSystemFor48MHz>:

static volatile uint64_t _cycles;

static void initializeSystemFor48MHz()
{
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    19c4:	4a48      	ldr	r2, [pc, #288]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    19c6:	6a11      	ldr	r1, [r2, #32]
    19c8:	23c0      	movs	r3, #192	; 0xc0
    19ca:	009b      	lsls	r3, r3, #2
    19cc:	430b      	orrs	r3, r1
    19ce:	6213      	str	r3, [r2, #32]
	// Change the timing of the NVM access
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
    19d0:	4946      	ldr	r1, [pc, #280]	; (1aec <initializeSystemFor48MHz+0x128>)
    19d2:	684a      	ldr	r2, [r1, #4]
    19d4:	231e      	movs	r3, #30
    19d6:	439a      	bics	r2, r3
    19d8:	3b1c      	subs	r3, #28
    19da:	4313      	orrs	r3, r2
    19dc:	604b      	str	r3, [r1, #4]

	// Enable the bus clock for the clock system.
	PM->APBAMASK.bit.GCLK_ = 1;
    19de:	4a44      	ldr	r2, [pc, #272]	; (1af0 <initializeSystemFor48MHz+0x12c>)
    19e0:	6991      	ldr	r1, [r2, #24]
    19e2:	2308      	movs	r3, #8
    19e4:	430b      	orrs	r3, r1
    19e6:	6193      	str	r3, [r2, #24]

	// Initialise the DFLL to run in closed-loop mode at 48MHz
	// 1. Make a software reset of the clock system.
	GCLK->CTRL.bit.SWRST = 1;
    19e8:	4a42      	ldr	r2, [pc, #264]	; (1af4 <initializeSystemFor48MHz+0x130>)
    19ea:	7813      	ldrb	r3, [r2, #0]
    19ec:	2101      	movs	r1, #1
    19ee:	430b      	orrs	r3, r1
    19f0:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.bit.SWRST && GCLK->STATUS.bit.SYNCBUSY) {};
    19f2:	4b40      	ldr	r3, [pc, #256]	; (1af4 <initializeSystemFor48MHz+0x130>)
    19f4:	781b      	ldrb	r3, [r3, #0]
    19f6:	07db      	lsls	r3, r3, #31
    19f8:	d503      	bpl.n	1a02 <initializeSystemFor48MHz+0x3e>
    19fa:	4b3e      	ldr	r3, [pc, #248]	; (1af4 <initializeSystemFor48MHz+0x130>)
    19fc:	785b      	ldrb	r3, [r3, #1]
    19fe:	09db      	lsrs	r3, r3, #7
    1a00:	d1f7      	bne.n	19f2 <initializeSystemFor48MHz+0x2e>
	// 2. Make sure the OCM8M keeps running.
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
    1a02:	4b39      	ldr	r3, [pc, #228]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1a04:	6a19      	ldr	r1, [r3, #32]
    1a06:	2280      	movs	r2, #128	; 0x80
    1a08:	4391      	bics	r1, r2
    1a0a:	6219      	str	r1, [r3, #32]
	// 3. Set the division factor to 64, which reduces the 1MHz source to 15.625kHz
	GCLK->GENDIV.reg =
    1a0c:	4b39      	ldr	r3, [pc, #228]	; (1af4 <initializeSystemFor48MHz+0x130>)
    1a0e:	4a3a      	ldr	r2, [pc, #232]	; (1af8 <initializeSystemFor48MHz+0x134>)
    1a10:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(3) | // Select generator 3
	GCLK_GENDIV_DIV(64); // Set the division factor to 64
	// 4. Create generic clock generator 3 for the 15KHz signal of the DFLL
	GCLK->GENCTRL.reg =
    1a12:	4a3a      	ldr	r2, [pc, #232]	; (1afc <initializeSystemFor48MHz+0x138>)
    1a14:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(3) | // Select generator 3
	GCLK_GENCTRL_SRC_OSC8M | // Select source OSC8M
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1a16:	4b37      	ldr	r3, [pc, #220]	; (1af4 <initializeSystemFor48MHz+0x130>)
    1a18:	785b      	ldrb	r3, [r3, #1]
    1a1a:	09db      	lsrs	r3, r3, #7
    1a1c:	d1fb      	bne.n	1a16 <initializeSystemFor48MHz+0x52>
	// 5. Configure DFLL with the
	GCLK->CLKCTRL.reg =
    1a1e:	4b35      	ldr	r3, [pc, #212]	; (1af4 <initializeSystemFor48MHz+0x130>)
    1a20:	2286      	movs	r2, #134	; 0x86
    1a22:	01d2      	lsls	r2, r2, #7
    1a24:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID_DFLL48 | // Target is DFLL48M
	GCLK_CLKCTRL_GEN(3) | // Select generator 3 as source.
	GCLK_CLKCTRL_CLKEN; // Enable the DFLL48M
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1a26:	4b33      	ldr	r3, [pc, #204]	; (1af4 <initializeSystemFor48MHz+0x130>)
    1a28:	785b      	ldrb	r3, [r3, #1]
    1a2a:	09db      	lsrs	r3, r3, #7
    1a2c:	d1fb      	bne.n	1a26 <initializeSystemFor48MHz+0x62>
	// 6. Workaround to be able to configure the DFLL.
	SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
    1a2e:	4a2e      	ldr	r2, [pc, #184]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1a30:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1a32:	2180      	movs	r1, #128	; 0x80
    1a34:	438b      	bics	r3, r1
    1a36:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1a38:	4b2b      	ldr	r3, [pc, #172]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1a3a:	68db      	ldr	r3, [r3, #12]
    1a3c:	06db      	lsls	r3, r3, #27
    1a3e:	d5fb      	bpl.n	1a38 <initializeSystemFor48MHz+0x74>
	// 7. Change the multiplication factor.
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
    1a40:	4b29      	ldr	r3, [pc, #164]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a44:	0c12      	lsrs	r2, r2, #16
    1a46:	0412      	lsls	r2, r2, #16
    1a48:	21c0      	movs	r1, #192	; 0xc0
    1a4a:	0109      	lsls	r1, r1, #4
    1a4c:	4311      	orrs	r1, r2
    1a4e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
    1a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a52:	0192      	lsls	r2, r2, #6
    1a54:	0992      	lsrs	r2, r2, #6
    1a56:	2180      	movs	r1, #128	; 0x80
    1a58:	04c9      	lsls	r1, r1, #19
    1a5a:	4311      	orrs	r1, r2
    1a5c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.FSTEP = 1; // Fine step = 1
    1a5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1a60:	4a27      	ldr	r2, [pc, #156]	; (1b00 <initializeSystemFor48MHz+0x13c>)
    1a62:	4011      	ands	r1, r2
    1a64:	2280      	movs	r2, #128	; 0x80
    1a66:	0252      	lsls	r2, r2, #9
    1a68:	430a      	orrs	r2, r1
    1a6a:	62da      	str	r2, [r3, #44]	; 0x2c
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1a6c:	4b1e      	ldr	r3, [pc, #120]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1a6e:	68db      	ldr	r3, [r3, #12]
    1a70:	06db      	lsls	r3, r3, #27
    1a72:	d5fb      	bpl.n	1a6c <initializeSystemFor48MHz+0xa8>
	// 8. Start closed-loop mode
	SYSCTRL->DFLLCTRL.reg |=
    1a74:	4a1c      	ldr	r2, [pc, #112]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1a76:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1a78:	2181      	movs	r1, #129	; 0x81
    1a7a:	0089      	lsls	r1, r1, #2
    1a7c:	430b      	orrs	r3, r1
    1a7e:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_MODE | // 1 = Closed loop mode.
	SYSCTRL_DFLLCTRL_QLDIS; // 1 = Disable quick lock.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1a80:	4b19      	ldr	r3, [pc, #100]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1a82:	68db      	ldr	r3, [r3, #12]
    1a84:	06db      	lsls	r3, r3, #27
    1a86:	d5fb      	bpl.n	1a80 <initializeSystemFor48MHz+0xbc>
	// 9. Clear the lock flags.
	SYSCTRL->INTFLAG.bit.DFLLLCKC = 1;
    1a88:	4b17      	ldr	r3, [pc, #92]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1a8a:	6899      	ldr	r1, [r3, #8]
    1a8c:	2280      	movs	r2, #128	; 0x80
    1a8e:	430a      	orrs	r2, r1
    1a90:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLLCKF = 1;
    1a92:	6899      	ldr	r1, [r3, #8]
    1a94:	2240      	movs	r2, #64	; 0x40
    1a96:	430a      	orrs	r2, r1
    1a98:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLRDY = 1;
    1a9a:	6899      	ldr	r1, [r3, #8]
    1a9c:	2210      	movs	r2, #16
    1a9e:	430a      	orrs	r2, r1
    1aa0:	609a      	str	r2, [r3, #8]
	// 10. Enable the DFLL
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
    1aa2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    1aa4:	2102      	movs	r1, #2
    1aa6:	430a      	orrs	r2, r1
    1aa8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1aaa:	4b0f      	ldr	r3, [pc, #60]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1aac:	68db      	ldr	r3, [r3, #12]
    1aae:	06db      	lsls	r3, r3, #27
    1ab0:	d5fb      	bpl.n	1aaa <initializeSystemFor48MHz+0xe6>
	// 11. Wait for the fine and coarse locks.
	while (!SYSCTRL->INTFLAG.bit.DFLLLCKC && !SYSCTRL->INTFLAG.bit.DFLLLCKF) {};
    1ab2:	4b0d      	ldr	r3, [pc, #52]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1ab4:	689b      	ldr	r3, [r3, #8]
    1ab6:	061b      	lsls	r3, r3, #24
    1ab8:	d403      	bmi.n	1ac2 <initializeSystemFor48MHz+0xfe>
    1aba:	4b0b      	ldr	r3, [pc, #44]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1abc:	689b      	ldr	r3, [r3, #8]
    1abe:	065b      	lsls	r3, r3, #25
    1ac0:	d5f7      	bpl.n	1ab2 <initializeSystemFor48MHz+0xee>
	// 12. Wait until the DFLL is ready.
	while (!SYSCTRL->INTFLAG.bit.DFLLRDY) {};
    1ac2:	4b09      	ldr	r3, [pc, #36]	; (1ae8 <initializeSystemFor48MHz+0x124>)
    1ac4:	689b      	ldr	r3, [r3, #8]
    1ac6:	06db      	lsls	r3, r3, #27
    1ac8:	d5fb      	bpl.n	1ac2 <initializeSystemFor48MHz+0xfe>

	// Switch the main clock speed.
	// 1. Set the divisor of generic clock 0 to 0
	GCLK->GENDIV.reg =
    1aca:	4b0a      	ldr	r3, [pc, #40]	; (1af4 <initializeSystemFor48MHz+0x130>)
    1acc:	2200      	movs	r2, #0
    1ace:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(0) | // Select generator 0
	GCLK_GENDIV_DIV(0);
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1ad0:	4b08      	ldr	r3, [pc, #32]	; (1af4 <initializeSystemFor48MHz+0x130>)
    1ad2:	785b      	ldrb	r3, [r3, #1]
    1ad4:	09db      	lsrs	r3, r3, #7
    1ad6:	d1fb      	bne.n	1ad0 <initializeSystemFor48MHz+0x10c>
	// 2. Switch generic clock 0 to the DFLL
	GCLK->GENCTRL.reg =
    1ad8:	4b06      	ldr	r3, [pc, #24]	; (1af4 <initializeSystemFor48MHz+0x130>)
    1ada:	4a0a      	ldr	r2, [pc, #40]	; (1b04 <initializeSystemFor48MHz+0x140>)
    1adc:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(0) | // Select generator 0
	GCLK_GENCTRL_SRC_DFLL48M | // Select source DFLL
	GCLK_GENCTRL_IDC | // Set improved duty cycle 50/50
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1ade:	4b05      	ldr	r3, [pc, #20]	; (1af4 <initializeSystemFor48MHz+0x130>)
    1ae0:	785b      	ldrb	r3, [r3, #1]
    1ae2:	09db      	lsrs	r3, r3, #7
    1ae4:	d1fb      	bne.n	1ade <initializeSystemFor48MHz+0x11a>
}
    1ae6:	4770      	bx	lr
    1ae8:	40000800 	.word	0x40000800
    1aec:	41004000 	.word	0x41004000
    1af0:	40000400 	.word	0x40000400
    1af4:	40000c00 	.word	0x40000c00
    1af8:	00004003 	.word	0x00004003
    1afc:	00010603 	.word	0x00010603
    1b00:	fc00ffff 	.word	0xfc00ffff
    1b04:	00030700 	.word	0x00030700

00001b08 <systick_init>:

void systick_init() {
    1b08:	b510      	push	{r4, lr}
	initializeSystemFor48MHz();
    1b0a:	f7ff ff5b 	bl	19c4 <initializeSystemFor48MHz>
	
	_cycles = 0;
    1b0e:	4b09      	ldr	r3, [pc, #36]	; (1b34 <systick_init+0x2c>)
    1b10:	2000      	movs	r0, #0
    1b12:	2100      	movs	r1, #0
    1b14:	6018      	str	r0, [r3, #0]
    1b16:	6059      	str	r1, [r3, #4]

	SysTick->CTRL = 0;
    1b18:	4b07      	ldr	r3, [pc, #28]	; (1b38 <systick_init+0x30>)
    1b1a:	2200      	movs	r2, #0
    1b1c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0xFFFFFF;
    1b1e:	4a07      	ldr	r2, [pc, #28]	; (1b3c <systick_init+0x34>)
    1b20:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0xFFFFFF;
    1b22:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
    1b24:	2207      	movs	r2, #7
    1b26:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1b28:	4b05      	ldr	r3, [pc, #20]	; (1b40 <systick_init+0x38>)
    1b2a:	2280      	movs	r2, #128	; 0x80
    1b2c:	0612      	lsls	r2, r2, #24
    1b2e:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(SysTick_IRQn);
}
    1b30:	bd10      	pop	{r4, pc}
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	200000e8 	.word	0x200000e8
    1b38:	e000e010 	.word	0xe000e010
    1b3c:	00ffffff 	.word	0x00ffffff
    1b40:	e000e100 	.word	0xe000e100

00001b44 <systick_cycles>:

uint64_t systick_cycles() {
	return _cycles + (0xFFFFFF - SysTick->VAL);
    1b44:	4b05      	ldr	r3, [pc, #20]	; (1b5c <systick_cycles+0x18>)
    1b46:	689b      	ldr	r3, [r3, #8]
    1b48:	4a05      	ldr	r2, [pc, #20]	; (1b60 <systick_cycles+0x1c>)
    1b4a:	1ad0      	subs	r0, r2, r3
    1b4c:	2100      	movs	r1, #0
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <systick_cycles+0x20>)
    1b50:	681a      	ldr	r2, [r3, #0]
    1b52:	685b      	ldr	r3, [r3, #4]
    1b54:	1880      	adds	r0, r0, r2
    1b56:	4159      	adcs	r1, r3
}
    1b58:	4770      	bx	lr
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	e000e010 	.word	0xe000e010
    1b60:	00ffffff 	.word	0x00ffffff
    1b64:	200000e8 	.word	0x200000e8

00001b68 <millis>:
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000000) + 0.99999999 );
	ticks >>= 35;
	return (uint32_t)ticks;
}

uint32_t millis() {
    1b68:	b510      	push	{r4, lr}
	// https://en.wikipedia.org/wiki/Division_algorithm#Division_by_a_constant
	uint64_t ticks = systick_cycles();
    1b6a:	f7ff ffeb 	bl	1b44 <systick_cycles>
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000) + 0.99999999 );
    1b6e:	4a03      	ldr	r2, [pc, #12]	; (1b7c <millis+0x14>)
    1b70:	2300      	movs	r3, #0
    1b72:	f000 fd53 	bl	261c <__aeabi_lmul>
	ticks >>= 35;
    1b76:	08c8      	lsrs	r0, r1, #3
	return (uint32_t)ticks;
}
    1b78:	bd10      	pop	{r4, pc}
    1b7a:	46c0      	nop			; (mov r8, r8)
    1b7c:	000aec34 	.word	0x000aec34

00001b80 <SysTick_Handler>:

void SysTick_Handler() {
    1b80:	b530      	push	{r4, r5, lr}
	_cycles += 0x1000000;
    1b82:	4905      	ldr	r1, [pc, #20]	; (1b98 <SysTick_Handler+0x18>)
    1b84:	680a      	ldr	r2, [r1, #0]
    1b86:	684b      	ldr	r3, [r1, #4]
    1b88:	2480      	movs	r4, #128	; 0x80
    1b8a:	0464      	lsls	r4, r4, #17
    1b8c:	2500      	movs	r5, #0
    1b8e:	1912      	adds	r2, r2, r4
    1b90:	416b      	adcs	r3, r5
    1b92:	600a      	str	r2, [r1, #0]
    1b94:	604b      	str	r3, [r1, #4]
    1b96:	bd30      	pop	{r4, r5, pc}
    1b98:	200000e8 	.word	0x200000e8

00001b9c <_Z41__static_initialization_and_destruction_0ii>:
    g_uart0.sercom_handler();
}

void SERCOM1_Handler() {
    g_uart1.sercom_handler();
    1b9c:	b570      	push	{r4, r5, r6, lr}
    1b9e:	2801      	cmp	r0, #1
    1ba0:	d000      	beq.n	1ba4 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1ba2:	bd70      	pop	{r4, r5, r6, pc}
    1ba4:	4b0c      	ldr	r3, [pc, #48]	; (1bd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1ba6:	4299      	cmp	r1, r3
    1ba8:	d1fb      	bne.n	1ba2 <_Z41__static_initialization_and_destruction_0ii+0x6>
    volatile bool m_rxfull = false;

    bool m_used = false;

public:
    uart_t(Sercom* sercom) { m_sercom = sercom; }
    1baa:	4a0c      	ldr	r2, [pc, #48]	; (1bdc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1bac:	2581      	movs	r5, #129	; 0x81
    1bae:	00ad      	lsls	r5, r5, #2
    1bb0:	2300      	movs	r3, #0
    1bb2:	5353      	strh	r3, [r2, r5]
    1bb4:	4c0a      	ldr	r4, [pc, #40]	; (1be0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1bb6:	5313      	strh	r3, [r2, r4]
    1bb8:	2082      	movs	r0, #130	; 0x82
    1bba:	0080      	lsls	r0, r0, #2
    1bbc:	5413      	strb	r3, [r2, r0]
    1bbe:	4909      	ldr	r1, [pc, #36]	; (1be4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1bc0:	5453      	strb	r3, [r2, r1]
    1bc2:	4e09      	ldr	r6, [pc, #36]	; (1be8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    1bc4:	6016      	str	r6, [r2, #0]
    1bc6:	4a09      	ldr	r2, [pc, #36]	; (1bec <_Z41__static_initialization_and_destruction_0ii+0x50>)
    1bc8:	5353      	strh	r3, [r2, r5]
    1bca:	5313      	strh	r3, [r2, r4]
    1bcc:	5413      	strb	r3, [r2, r0]
    1bce:	5453      	strb	r3, [r2, r1]
    1bd0:	4b07      	ldr	r3, [pc, #28]	; (1bf0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1bd2:	6013      	str	r3, [r2, #0]
    1bd4:	e7e5      	b.n	1ba2 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	0000ffff 	.word	0x0000ffff
    1bdc:	200000f0 	.word	0x200000f0
    1be0:	00000206 	.word	0x00000206
    1be4:	00000209 	.word	0x00000209
    1be8:	42000800 	.word	0x42000800
    1bec:	200002fc 	.word	0x200002fc
    1bf0:	42000c00 	.word	0x42000c00

00001bf4 <_ZN6uart_t4initERK13uart_pincfg_tt>:
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
    1bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bf6:	46ce      	mov	lr, r9
    1bf8:	4647      	mov	r7, r8
    1bfa:	b580      	push	{r7, lr}
    1bfc:	4691      	mov	r9, r2
    if(m_sercom == SERCOM1) {
    1bfe:	4b6c      	ldr	r3, [pc, #432]	; (1db0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
    1c00:	6804      	ldr	r4, [r0, #0]
    1c02:	429c      	cmp	r4, r3
    1c04:	d100      	bne.n	1c08 <_ZN6uart_t4initERK13uart_pincfg_tt+0x14>
    1c06:	e09d      	b.n	1d44 <_ZN6uart_t4initERK13uart_pincfg_tt+0x150>
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
    1c08:	4c6a      	ldr	r4, [pc, #424]	; (1db4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
    1c0a:	6a23      	ldr	r3, [r4, #32]
    1c0c:	2504      	movs	r5, #4
    1c0e:	432b      	orrs	r3, r5
    1c10:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    1c12:	4b69      	ldr	r3, [pc, #420]	; (1db8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
    1c14:	4c69      	ldr	r4, [pc, #420]	; (1dbc <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c8>)
    1c16:	805c      	strh	r4, [r3, #2]
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1c18:	7c8b      	ldrb	r3, [r1, #18]
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d100      	bne.n	1c20 <_ZN6uart_t4initERK13uart_pincfg_tt+0x2c>
    1c1e:	e09a      	b.n	1d56 <_ZN6uart_t4initERK13uart_pincfg_tt+0x162>
    1c20:	2603      	movs	r6, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1c22:	680c      	ldr	r4, [r1, #0]
    1c24:	684d      	ldr	r5, [r1, #4]
        if(pin & 1)
    1c26:	07eb      	lsls	r3, r5, #31
    1c28:	d400      	bmi.n	1c2c <_ZN6uart_t4initERK13uart_pincfg_tt+0x38>
    1c2a:	e096      	b.n	1d5a <_ZN6uart_t4initERK13uart_pincfg_tt+0x166>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1c2c:	0feb      	lsrs	r3, r5, #31
    1c2e:	195b      	adds	r3, r3, r5
    1c30:	105b      	asrs	r3, r3, #1
    1c32:	469c      	mov	ip, r3
    1c34:	270f      	movs	r7, #15
    1c36:	403e      	ands	r6, r7
    1c38:	01e3      	lsls	r3, r4, #7
    1c3a:	4a61      	ldr	r2, [pc, #388]	; (1dc0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1c3c:	4690      	mov	r8, r2
    1c3e:	4443      	add	r3, r8
    1c40:	4463      	add	r3, ip
    1c42:	3330      	adds	r3, #48	; 0x30
    1c44:	781a      	ldrb	r2, [r3, #0]
    1c46:	0136      	lsls	r6, r6, #4
    1c48:	4017      	ands	r7, r2
    1c4a:	4337      	orrs	r7, r6
    1c4c:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1c4e:	01e3      	lsls	r3, r4, #7
    1c50:	4c5b      	ldr	r4, [pc, #364]	; (1dc0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1c52:	46a4      	mov	ip, r4
    1c54:	4463      	add	r3, ip
    1c56:	195b      	adds	r3, r3, r5
    1c58:	3340      	adds	r3, #64	; 0x40
    1c5a:	781c      	ldrb	r4, [r3, #0]
    1c5c:	2501      	movs	r5, #1
    1c5e:	432c      	orrs	r4, r5
    1c60:	701c      	strb	r4, [r3, #0]
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1c62:	7ccb      	ldrb	r3, [r1, #19]
    1c64:	2b00      	cmp	r3, #0
    1c66:	d100      	bne.n	1c6a <_ZN6uart_t4initERK13uart_pincfg_tt+0x76>
    1c68:	e086      	b.n	1d78 <_ZN6uart_t4initERK13uart_pincfg_tt+0x184>
    1c6a:	2603      	movs	r6, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1c6c:	688c      	ldr	r4, [r1, #8]
    1c6e:	68cd      	ldr	r5, [r1, #12]
        if(pin & 1)
    1c70:	07eb      	lsls	r3, r5, #31
    1c72:	d400      	bmi.n	1c76 <_ZN6uart_t4initERK13uart_pincfg_tt+0x82>
    1c74:	e082      	b.n	1d7c <_ZN6uart_t4initERK13uart_pincfg_tt+0x188>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1c76:	0feb      	lsrs	r3, r5, #31
    1c78:	195b      	adds	r3, r3, r5
    1c7a:	105b      	asrs	r3, r3, #1
    1c7c:	469c      	mov	ip, r3
    1c7e:	270f      	movs	r7, #15
    1c80:	403e      	ands	r6, r7
    1c82:	01e3      	lsls	r3, r4, #7
    1c84:	4a4e      	ldr	r2, [pc, #312]	; (1dc0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1c86:	4690      	mov	r8, r2
    1c88:	4443      	add	r3, r8
    1c8a:	4463      	add	r3, ip
    1c8c:	3330      	adds	r3, #48	; 0x30
    1c8e:	781a      	ldrb	r2, [r3, #0]
    1c90:	0136      	lsls	r6, r6, #4
    1c92:	4017      	ands	r7, r2
    1c94:	4337      	orrs	r7, r6
    1c96:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1c98:	01e3      	lsls	r3, r4, #7
    1c9a:	4c49      	ldr	r4, [pc, #292]	; (1dc0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1c9c:	46a4      	mov	ip, r4
    1c9e:	4463      	add	r3, ip
    1ca0:	195b      	adds	r3, r3, r5
    1ca2:	3340      	adds	r3, #64	; 0x40
    1ca4:	781c      	ldrb	r4, [r3, #0]
    1ca6:	2501      	movs	r5, #1
    1ca8:	432c      	orrs	r4, r5
    1caa:	701c      	strb	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.ENABLE = 0;
    1cac:	6804      	ldr	r4, [r0, #0]
    1cae:	6823      	ldr	r3, [r4, #0]
    1cb0:	2502      	movs	r5, #2
    1cb2:	43ab      	bics	r3, r5
    1cb4:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.SWRST = 1;
    1cb6:	6804      	ldr	r4, [r0, #0]
    1cb8:	6823      	ldr	r3, [r4, #0]
    1cba:	3d01      	subs	r5, #1
    1cbc:	432b      	orrs	r3, r5
    1cbe:	6023      	str	r3, [r4, #0]
    while(m_sercom->USART.CTRLA.bit.SWRST);
    1cc0:	6803      	ldr	r3, [r0, #0]
    1cc2:	681c      	ldr	r4, [r3, #0]
    1cc4:	07e4      	lsls	r4, r4, #31
    1cc6:	d4fb      	bmi.n	1cc0 <_ZN6uart_t4initERK13uart_pincfg_tt+0xcc>
    m_sercom->USART.CTRLA.bit.MODE = SERCOM_USART_CTRLA_MODE_USART_INT_CLK_Val;
    1cc8:	681c      	ldr	r4, [r3, #0]
    1cca:	251c      	movs	r5, #28
    1ccc:	43ac      	bics	r4, r5
    1cce:	3d18      	subs	r5, #24
    1cd0:	432c      	orrs	r4, r5
    1cd2:	601c      	str	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.DORD = 1;
    1cd4:	6804      	ldr	r4, [r0, #0]
    1cd6:	6825      	ldr	r5, [r4, #0]
    1cd8:	2380      	movs	r3, #128	; 0x80
    1cda:	05db      	lsls	r3, r3, #23
    1cdc:	432b      	orrs	r3, r5
    1cde:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.TXPO = pincfg.tx_pad;
    1ce0:	6806      	ldr	r6, [r0, #0]
    1ce2:	7c0d      	ldrb	r5, [r1, #16]
    1ce4:	2303      	movs	r3, #3
    1ce6:	401d      	ands	r5, r3
    1ce8:	6834      	ldr	r4, [r6, #0]
    1cea:	042d      	lsls	r5, r5, #16
    1cec:	4f35      	ldr	r7, [pc, #212]	; (1dc4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d0>)
    1cee:	403c      	ands	r4, r7
    1cf0:	432c      	orrs	r4, r5
    1cf2:	6034      	str	r4, [r6, #0]
    m_sercom->USART.CTRLA.bit.RXPO = pincfg.rx_pad;
    1cf4:	6804      	ldr	r4, [r0, #0]
    1cf6:	7c4d      	ldrb	r5, [r1, #17]
    1cf8:	6821      	ldr	r1, [r4, #0]
    1cfa:	402b      	ands	r3, r5
    1cfc:	051b      	lsls	r3, r3, #20
    1cfe:	4d32      	ldr	r5, [pc, #200]	; (1dc8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d4>)
    1d00:	4029      	ands	r1, r5
    1d02:	430b      	orrs	r3, r1
    1d04:	6023      	str	r3, [r4, #0]
    m_sercom->USART.BAUD.reg = speed;
    1d06:	6803      	ldr	r3, [r0, #0]
    1d08:	464a      	mov	r2, r9
    1d0a:	819a      	strh	r2, [r3, #12]
    m_sercom->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
    1d0c:	6803      	ldr	r3, [r0, #0]
    1d0e:	22c0      	movs	r2, #192	; 0xc0
    1d10:	0292      	lsls	r2, r2, #10
    1d12:	605a      	str	r2, [r3, #4]
    m_sercom->USART.INTENSET.bit.RXC = 1;
    1d14:	6802      	ldr	r2, [r0, #0]
    1d16:	7d93      	ldrb	r3, [r2, #22]
    1d18:	2104      	movs	r1, #4
    1d1a:	430b      	orrs	r3, r1
    1d1c:	7593      	strb	r3, [r2, #22]
    if(m_sercom == SERCOM0)
    1d1e:	6803      	ldr	r3, [r0, #0]
    1d20:	4a2a      	ldr	r2, [pc, #168]	; (1dcc <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d8>)
    1d22:	4293      	cmp	r3, r2
    1d24:	d039      	beq.n	1d9a <_ZN6uart_t4initERK13uart_pincfg_tt+0x1a6>
    else if(m_sercom == SERCOM1)
    1d26:	4a22      	ldr	r2, [pc, #136]	; (1db0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
    1d28:	4293      	cmp	r3, r2
    1d2a:	d03b      	beq.n	1da4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1b0>
    m_sercom->USART.CTRLA.bit.ENABLE = 1;
    1d2c:	6802      	ldr	r2, [r0, #0]
    1d2e:	6813      	ldr	r3, [r2, #0]
    1d30:	2102      	movs	r1, #2
    1d32:	430b      	orrs	r3, r1
    1d34:	6013      	str	r3, [r2, #0]
    m_used = true;
    1d36:	4b26      	ldr	r3, [pc, #152]	; (1dd0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1dc>)
    1d38:	2201      	movs	r2, #1
    1d3a:	54c2      	strb	r2, [r0, r3]
}
    1d3c:	bc0c      	pop	{r2, r3}
    1d3e:	4690      	mov	r8, r2
    1d40:	4699      	mov	r9, r3
    1d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
    1d44:	4c1b      	ldr	r4, [pc, #108]	; (1db4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
    1d46:	6a23      	ldr	r3, [r4, #32]
    1d48:	2508      	movs	r5, #8
    1d4a:	432b      	orrs	r3, r5
    1d4c:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) |
    1d4e:	4b1a      	ldr	r3, [pc, #104]	; (1db8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
    1d50:	4c20      	ldr	r4, [pc, #128]	; (1dd4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e0>)
    1d52:	805c      	strh	r4, [r3, #2]
    1d54:	e760      	b.n	1c18 <_ZN6uart_t4initERK13uart_pincfg_tt+0x24>
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1d56:	2602      	movs	r6, #2
    1d58:	e763      	b.n	1c22 <_ZN6uart_t4initERK13uart_pincfg_tt+0x2e>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    1d5a:	0feb      	lsrs	r3, r5, #31
    1d5c:	195b      	adds	r3, r3, r5
    1d5e:	105f      	asrs	r7, r3, #1
    1d60:	01e3      	lsls	r3, r4, #7
    1d62:	4a17      	ldr	r2, [pc, #92]	; (1dc0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1d64:	4694      	mov	ip, r2
    1d66:	4463      	add	r3, ip
    1d68:	19db      	adds	r3, r3, r7
    1d6a:	3330      	adds	r3, #48	; 0x30
    1d6c:	781f      	ldrb	r7, [r3, #0]
    1d6e:	220f      	movs	r2, #15
    1d70:	4397      	bics	r7, r2
    1d72:	433e      	orrs	r6, r7
    1d74:	701e      	strb	r6, [r3, #0]
    1d76:	e76a      	b.n	1c4e <_ZN6uart_t4initERK13uart_pincfg_tt+0x5a>
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1d78:	2602      	movs	r6, #2
    1d7a:	e777      	b.n	1c6c <_ZN6uart_t4initERK13uart_pincfg_tt+0x78>
    1d7c:	0feb      	lsrs	r3, r5, #31
    1d7e:	195b      	adds	r3, r3, r5
    1d80:	105f      	asrs	r7, r3, #1
    1d82:	01e3      	lsls	r3, r4, #7
    1d84:	4a0e      	ldr	r2, [pc, #56]	; (1dc0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1d86:	4694      	mov	ip, r2
    1d88:	4463      	add	r3, ip
    1d8a:	19db      	adds	r3, r3, r7
    1d8c:	3330      	adds	r3, #48	; 0x30
    1d8e:	781f      	ldrb	r7, [r3, #0]
    1d90:	220f      	movs	r2, #15
    1d92:	4397      	bics	r7, r2
    1d94:	433e      	orrs	r6, r7
    1d96:	701e      	strb	r6, [r3, #0]
    1d98:	e77e      	b.n	1c98 <_ZN6uart_t4initERK13uart_pincfg_tt+0xa4>
    1d9a:	4b0f      	ldr	r3, [pc, #60]	; (1dd8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
    1d9c:	2280      	movs	r2, #128	; 0x80
    1d9e:	0092      	lsls	r2, r2, #2
    1da0:	601a      	str	r2, [r3, #0]
}
    1da2:	e7c3      	b.n	1d2c <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1da4:	4b0c      	ldr	r3, [pc, #48]	; (1dd8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
    1da6:	2280      	movs	r2, #128	; 0x80
    1da8:	00d2      	lsls	r2, r2, #3
    1daa:	601a      	str	r2, [r3, #0]
}
    1dac:	e7be      	b.n	1d2c <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	42000c00 	.word	0x42000c00
    1db4:	40000400 	.word	0x40000400
    1db8:	40000c00 	.word	0x40000c00
    1dbc:	0000400e 	.word	0x0000400e
    1dc0:	41004400 	.word	0x41004400
    1dc4:	fffcffff 	.word	0xfffcffff
    1dc8:	ffcfffff 	.word	0xffcfffff
    1dcc:	42000800 	.word	0x42000800
    1dd0:	00000209 	.word	0x00000209
    1dd4:	0000400f 	.word	0x0000400f
    1dd8:	e000e100 	.word	0xe000e100

00001ddc <_ZN6uart_t14sercom_handlerEv>:
    if(!m_used) return;
    1ddc:	4b11      	ldr	r3, [pc, #68]	; (1e24 <_ZN6uart_t14sercom_handlerEv+0x48>)
    1dde:	5cc3      	ldrb	r3, [r0, r3]
    1de0:	2b00      	cmp	r3, #0
    1de2:	d01b      	beq.n	1e1c <_ZN6uart_t14sercom_handlerEv+0x40>
    if(!m_rxfull) {
    1de4:	2382      	movs	r3, #130	; 0x82
    1de6:	009b      	lsls	r3, r3, #2
    1de8:	5cc3      	ldrb	r3, [r0, r3]
    1dea:	2b00      	cmp	r3, #0
    1dec:	d117      	bne.n	1e1e <_ZN6uart_t14sercom_handlerEv+0x42>
		m_rxbuf[m_rxhead] = m_sercom->USART.DATA.reg;
    1dee:	6803      	ldr	r3, [r0, #0]
    1df0:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    1df2:	2281      	movs	r2, #129	; 0x81
    1df4:	0092      	lsls	r2, r2, #2
    1df6:	5a83      	ldrh	r3, [r0, r2]
    1df8:	b2c9      	uxtb	r1, r1
    1dfa:	18c3      	adds	r3, r0, r3
    1dfc:	7119      	strb	r1, [r3, #4]
		m_rxhead = (m_rxhead+1) % sizeof(m_rxbuf);
    1dfe:	5a83      	ldrh	r3, [r0, r2]
    1e00:	3301      	adds	r3, #1
    1e02:	05db      	lsls	r3, r3, #23
    1e04:	0ddb      	lsrs	r3, r3, #23
    1e06:	5283      	strh	r3, [r0, r2]
		m_rxfull = m_rxtail == m_rxhead;
    1e08:	4b07      	ldr	r3, [pc, #28]	; (1e28 <_ZN6uart_t14sercom_handlerEv+0x4c>)
    1e0a:	5ac3      	ldrh	r3, [r0, r3]
    1e0c:	5a82      	ldrh	r2, [r0, r2]
    1e0e:	1a9b      	subs	r3, r3, r2
    1e10:	425a      	negs	r2, r3
    1e12:	4153      	adcs	r3, r2
    1e14:	b2db      	uxtb	r3, r3
    1e16:	2282      	movs	r2, #130	; 0x82
    1e18:	0092      	lsls	r2, r2, #2
    1e1a:	5483      	strb	r3, [r0, r2]
}
    1e1c:	4770      	bx	lr
		(void)m_sercom->USART.DATA.reg; // Clear RX flag
    1e1e:	6803      	ldr	r3, [r0, #0]
    1e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1e22:	e7fb      	b.n	1e1c <_ZN6uart_t14sercom_handlerEv+0x40>
    1e24:	00000209 	.word	0x00000209
    1e28:	00000206 	.word	0x00000206

00001e2c <_ZN6uart_t5writeEc>:
    if(!m_used) return;
    1e2c:	4b05      	ldr	r3, [pc, #20]	; (1e44 <_ZN6uart_t5writeEc+0x18>)
    1e2e:	5cc3      	ldrb	r3, [r0, r3]
    1e30:	2b00      	cmp	r3, #0
    1e32:	d006      	beq.n	1e42 <_ZN6uart_t5writeEc+0x16>
    m_sercom->USART.DATA.reg = c;
    1e34:	b289      	uxth	r1, r1
    1e36:	6803      	ldr	r3, [r0, #0]
    1e38:	8519      	strh	r1, [r3, #40]	; 0x28
	while(!m_sercom->USART.INTFLAG.bit.DRE);
    1e3a:	6803      	ldr	r3, [r0, #0]
    1e3c:	7e1b      	ldrb	r3, [r3, #24]
    1e3e:	07db      	lsls	r3, r3, #31
    1e40:	d5fb      	bpl.n	1e3a <_ZN6uart_t5writeEc+0xe>
}
    1e42:	4770      	bx	lr
    1e44:	00000209 	.word	0x00000209

00001e48 <_ZN6uart_t5printEPKci>:
void uart_t::print(const char* str, int len) {
    1e48:	b570      	push	{r4, r5, r6, lr}
    1e4a:	0006      	movs	r6, r0
    1e4c:	0014      	movs	r4, r2
    if(!m_used) return;
    1e4e:	4b09      	ldr	r3, [pc, #36]	; (1e74 <_ZN6uart_t5printEPKci+0x2c>)
    1e50:	5cc3      	ldrb	r3, [r0, r3]
    1e52:	2b00      	cmp	r3, #0
    1e54:	d10a      	bne.n	1e6c <_ZN6uart_t5printEPKci+0x24>
}
    1e56:	bd70      	pop	{r4, r5, r6, pc}
    while((len == -1) ? *str : len--) write(*str++);
    1e58:	0023      	movs	r3, r4
    1e5a:	3c01      	subs	r4, #1
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d0fa      	beq.n	1e56 <_ZN6uart_t5printEPKci+0xe>
    1e60:	1c4d      	adds	r5, r1, #1
    1e62:	7809      	ldrb	r1, [r1, #0]
    1e64:	0030      	movs	r0, r6
    1e66:	f7ff ffe1 	bl	1e2c <_ZN6uart_t5writeEc>
    1e6a:	0029      	movs	r1, r5
    1e6c:	1c63      	adds	r3, r4, #1
    1e6e:	d1f3      	bne.n	1e58 <_ZN6uart_t5printEPKci+0x10>
    1e70:	780b      	ldrb	r3, [r1, #0]
    1e72:	e7f3      	b.n	1e5c <_ZN6uart_t5printEPKci+0x14>
    1e74:	00000209 	.word	0x00000209

00001e78 <_ZN6uart_t7rxemptyEv>:
	return (!m_rxfull && (m_rxhead == m_rxtail));
    1e78:	2382      	movs	r3, #130	; 0x82
    1e7a:	009b      	lsls	r3, r3, #2
    1e7c:	5cc3      	ldrb	r3, [r0, r3]
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d10a      	bne.n	1e98 <_ZN6uart_t7rxemptyEv+0x20>
    1e82:	2381      	movs	r3, #129	; 0x81
    1e84:	009b      	lsls	r3, r3, #2
    1e86:	5ac2      	ldrh	r2, [r0, r3]
    1e88:	b292      	uxth	r2, r2
    1e8a:	4b05      	ldr	r3, [pc, #20]	; (1ea0 <_ZN6uart_t7rxemptyEv+0x28>)
    1e8c:	5ac3      	ldrh	r3, [r0, r3]
    1e8e:	b29b      	uxth	r3, r3
    1e90:	429a      	cmp	r2, r3
    1e92:	d003      	beq.n	1e9c <_ZN6uart_t7rxemptyEv+0x24>
    1e94:	2000      	movs	r0, #0
    1e96:	e000      	b.n	1e9a <_ZN6uart_t7rxemptyEv+0x22>
    1e98:	2000      	movs	r0, #0
}
    1e9a:	4770      	bx	lr
	return (!m_rxfull && (m_rxhead == m_rxtail));
    1e9c:	2001      	movs	r0, #1
    1e9e:	e7fc      	b.n	1e9a <_ZN6uart_t7rxemptyEv+0x22>
    1ea0:	00000206 	.word	0x00000206

00001ea4 <_ZN6uart_t4getcEv>:
char uart_t::getc() {
    1ea4:	b510      	push	{r4, lr}
    1ea6:	0004      	movs	r4, r0
    if(!m_used) return '\0';
    1ea8:	4b0c      	ldr	r3, [pc, #48]	; (1edc <_ZN6uart_t4getcEv+0x38>)
    1eaa:	5cc3      	ldrb	r3, [r0, r3]
    1eac:	2b00      	cmp	r3, #0
    1eae:	d013      	beq.n	1ed8 <_ZN6uart_t4getcEv+0x34>
	while(rxempty());
    1eb0:	0020      	movs	r0, r4
    1eb2:	f7ff ffe1 	bl	1e78 <_ZN6uart_t7rxemptyEv>
    1eb6:	2800      	cmp	r0, #0
    1eb8:	d1fa      	bne.n	1eb0 <_ZN6uart_t4getcEv+0xc>
	uint8_t c = m_rxbuf[m_rxtail];
    1eba:	4a09      	ldr	r2, [pc, #36]	; (1ee0 <_ZN6uart_t4getcEv+0x3c>)
    1ebc:	5aa3      	ldrh	r3, [r4, r2]
    1ebe:	18e3      	adds	r3, r4, r3
    1ec0:	7918      	ldrb	r0, [r3, #4]
    1ec2:	b2c0      	uxtb	r0, r0
	m_rxfull = false;
    1ec4:	2382      	movs	r3, #130	; 0x82
    1ec6:	009b      	lsls	r3, r3, #2
    1ec8:	2100      	movs	r1, #0
    1eca:	54e1      	strb	r1, [r4, r3]
	m_rxtail = (m_rxtail+1) % sizeof(m_rxbuf);
    1ecc:	5aa3      	ldrh	r3, [r4, r2]
    1ece:	3301      	adds	r3, #1
    1ed0:	05db      	lsls	r3, r3, #23
    1ed2:	0ddb      	lsrs	r3, r3, #23
    1ed4:	52a3      	strh	r3, [r4, r2]
}
    1ed6:	bd10      	pop	{r4, pc}
    if(!m_used) return '\0';
    1ed8:	2000      	movs	r0, #0
    1eda:	e7fc      	b.n	1ed6 <_ZN6uart_t4getcEv+0x32>
    1edc:	00000209 	.word	0x00000209
    1ee0:	00000206 	.word	0x00000206

00001ee4 <_ZN6uart_t4peekEi>:
char uart_t::peek(int pos) {
    1ee4:	b570      	push	{r4, r5, r6, lr}
    1ee6:	0004      	movs	r4, r0
    1ee8:	000d      	movs	r5, r1
    if(!m_used) return '\0';
    1eea:	4b1f      	ldr	r3, [pc, #124]	; (1f68 <_ZN6uart_t4peekEi+0x84>)
    1eec:	5cc3      	ldrb	r3, [r0, r3]
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d101      	bne.n	1ef6 <_ZN6uart_t4peekEi+0x12>
    1ef2:	2000      	movs	r0, #0
}
    1ef4:	bd70      	pop	{r4, r5, r6, pc}
    if(rxempty() || pos >= available()) return '\0';
    1ef6:	f7ff ffbf 	bl	1e78 <_ZN6uart_t7rxemptyEv>
    1efa:	2800      	cmp	r0, #0
    1efc:	d12f      	bne.n	1f5e <_ZN6uart_t4peekEi+0x7a>
        m_rxhead = 0;
        m_rxtail = 0;
        m_rxfull = false;
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
    1efe:	2381      	movs	r3, #129	; 0x81
    1f00:	009b      	lsls	r3, r3, #2
    1f02:	5ae2      	ldrh	r2, [r4, r3]
    1f04:	b292      	uxth	r2, r2
    1f06:	4b19      	ldr	r3, [pc, #100]	; (1f6c <_ZN6uart_t4peekEi+0x88>)
    1f08:	5ae3      	ldrh	r3, [r4, r3]
    1f0a:	b29b      	uxth	r3, r3
    1f0c:	429a      	cmp	r2, r3
    1f0e:	d313      	bcc.n	1f38 <_ZN6uart_t4peekEi+0x54>
            return m_rxhead - m_rxtail;
    1f10:	2381      	movs	r3, #129	; 0x81
    1f12:	009b      	lsls	r3, r3, #2
    1f14:	5ae3      	ldrh	r3, [r4, r3]
    1f16:	4a15      	ldr	r2, [pc, #84]	; (1f6c <_ZN6uart_t4peekEi+0x88>)
    1f18:	5aa2      	ldrh	r2, [r4, r2]
    1f1a:	1a9b      	subs	r3, r3, r2
    1f1c:	b29b      	uxth	r3, r3
    1f1e:	42ab      	cmp	r3, r5
    1f20:	dd1f      	ble.n	1f62 <_ZN6uart_t4peekEi+0x7e>
    if(pos == -1)
    1f22:	1c6b      	adds	r3, r5, #1
    1f24:	d015      	beq.n	1f52 <_ZN6uart_t4peekEi+0x6e>
        return m_rxbuf[(m_rxtail + pos) % sizeof(m_rxbuf)];
    1f26:	4b11      	ldr	r3, [pc, #68]	; (1f6c <_ZN6uart_t4peekEi+0x88>)
    1f28:	5ae0      	ldrh	r0, [r4, r3]
    1f2a:	1940      	adds	r0, r0, r5
    1f2c:	05c0      	lsls	r0, r0, #23
    1f2e:	0dc0      	lsrs	r0, r0, #23
    1f30:	1824      	adds	r4, r4, r0
    1f32:	7920      	ldrb	r0, [r4, #4]
    1f34:	b2c0      	uxtb	r0, r0
    1f36:	e7dd      	b.n	1ef4 <_ZN6uart_t4peekEi+0x10>
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1f38:	2381      	movs	r3, #129	; 0x81
    1f3a:	009b      	lsls	r3, r3, #2
    1f3c:	5ae3      	ldrh	r3, [r4, r3]
    1f3e:	4a0b      	ldr	r2, [pc, #44]	; (1f6c <_ZN6uart_t4peekEi+0x88>)
    1f40:	5aa2      	ldrh	r2, [r4, r2]
    1f42:	1a9b      	subs	r3, r3, r2
    1f44:	b29b      	uxth	r3, r3
    1f46:	2280      	movs	r2, #128	; 0x80
    1f48:	0092      	lsls	r2, r2, #2
    1f4a:	4694      	mov	ip, r2
    1f4c:	4463      	add	r3, ip
    1f4e:	b29b      	uxth	r3, r3
    1f50:	e7e5      	b.n	1f1e <_ZN6uart_t4peekEi+0x3a>
        return m_rxbuf[m_rxtail];
    1f52:	4b06      	ldr	r3, [pc, #24]	; (1f6c <_ZN6uart_t4peekEi+0x88>)
    1f54:	5ae0      	ldrh	r0, [r4, r3]
    1f56:	1824      	adds	r4, r4, r0
    1f58:	7920      	ldrb	r0, [r4, #4]
    1f5a:	b2c0      	uxtb	r0, r0
    1f5c:	e7ca      	b.n	1ef4 <_ZN6uart_t4peekEi+0x10>
    if(rxempty() || pos >= available()) return '\0';
    1f5e:	2000      	movs	r0, #0
    1f60:	e7c8      	b.n	1ef4 <_ZN6uart_t4peekEi+0x10>
    1f62:	2000      	movs	r0, #0
    1f64:	e7c6      	b.n	1ef4 <_ZN6uart_t4peekEi+0x10>
    1f66:	46c0      	nop			; (mov r8, r8)
    1f68:	00000209 	.word	0x00000209
    1f6c:	00000206 	.word	0x00000206

00001f70 <_ZN6uart_t4findEPKc>:
int uart_t::find(const char* str) {
    1f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f72:	46c6      	mov	lr, r8
    1f74:	b500      	push	{lr}
    1f76:	0007      	movs	r7, r0
    1f78:	000d      	movs	r5, r1
    if(!m_used) return -1;
    1f7a:	4b21      	ldr	r3, [pc, #132]	; (2000 <_ZN6uart_t4findEPKc+0x90>)
    1f7c:	5cc3      	ldrb	r3, [r0, r3]
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d035      	beq.n	1fee <_ZN6uart_t4findEPKc+0x7e>
    for(int i = 0; i < available(); i++) {
    1f82:	2300      	movs	r3, #0
    1f84:	4698      	mov	r8, r3
        if(m_rxhead >= m_rxtail)
    1f86:	2381      	movs	r3, #129	; 0x81
    1f88:	009b      	lsls	r3, r3, #2
    1f8a:	5afa      	ldrh	r2, [r7, r3]
    1f8c:	b292      	uxth	r2, r2
    1f8e:	4b1d      	ldr	r3, [pc, #116]	; (2004 <_ZN6uart_t4findEPKc+0x94>)
    1f90:	5afb      	ldrh	r3, [r7, r3]
    1f92:	b29b      	uxth	r3, r3
    1f94:	429a      	cmp	r2, r3
    1f96:	d319      	bcc.n	1fcc <_ZN6uart_t4findEPKc+0x5c>
            return m_rxhead - m_rxtail;
    1f98:	2381      	movs	r3, #129	; 0x81
    1f9a:	009b      	lsls	r3, r3, #2
    1f9c:	5afb      	ldrh	r3, [r7, r3]
    1f9e:	4a19      	ldr	r2, [pc, #100]	; (2004 <_ZN6uart_t4findEPKc+0x94>)
    1fa0:	5aba      	ldrh	r2, [r7, r2]
    1fa2:	1a9b      	subs	r3, r3, r2
    1fa4:	b29b      	uxth	r3, r3
    1fa6:	4543      	cmp	r3, r8
    1fa8:	dd25      	ble.n	1ff6 <_ZN6uart_t4findEPKc+0x86>
        int search_idx = 0;
    1faa:	2400      	movs	r4, #0
        while(str[search_idx] == peek(i + search_idx))
    1fac:	5d2e      	ldrb	r6, [r5, r4]
    1fae:	4643      	mov	r3, r8
    1fb0:	1919      	adds	r1, r3, r4
    1fb2:	0038      	movs	r0, r7
    1fb4:	f7ff ff96 	bl	1ee4 <_ZN6uart_t4peekEi>
    1fb8:	4286      	cmp	r6, r0
    1fba:	d114      	bne.n	1fe6 <_ZN6uart_t4findEPKc+0x76>
            if(!str[++search_idx]) return i;
    1fbc:	3401      	adds	r4, #1
    1fbe:	5d2b      	ldrb	r3, [r5, r4]
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	d1f3      	bne.n	1fac <_ZN6uart_t4findEPKc+0x3c>
}
    1fc4:	4640      	mov	r0, r8
    1fc6:	bc04      	pop	{r2}
    1fc8:	4690      	mov	r8, r2
    1fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1fcc:	2381      	movs	r3, #129	; 0x81
    1fce:	009b      	lsls	r3, r3, #2
    1fd0:	5afb      	ldrh	r3, [r7, r3]
    1fd2:	4a0c      	ldr	r2, [pc, #48]	; (2004 <_ZN6uart_t4findEPKc+0x94>)
    1fd4:	5aba      	ldrh	r2, [r7, r2]
    1fd6:	1a9b      	subs	r3, r3, r2
    1fd8:	b29b      	uxth	r3, r3
    1fda:	2280      	movs	r2, #128	; 0x80
    1fdc:	0092      	lsls	r2, r2, #2
    1fde:	4694      	mov	ip, r2
    1fe0:	4463      	add	r3, ip
    1fe2:	b29b      	uxth	r3, r3
    1fe4:	e7df      	b.n	1fa6 <_ZN6uart_t4findEPKc+0x36>
    for(int i = 0; i < available(); i++) {
    1fe6:	2301      	movs	r3, #1
    1fe8:	469c      	mov	ip, r3
    1fea:	44e0      	add	r8, ip
    1fec:	e7cb      	b.n	1f86 <_ZN6uart_t4findEPKc+0x16>
    if(!m_used) return -1;
    1fee:	2301      	movs	r3, #1
    1ff0:	425b      	negs	r3, r3
    1ff2:	4698      	mov	r8, r3
    1ff4:	e7e6      	b.n	1fc4 <_ZN6uart_t4findEPKc+0x54>
    return -1;
    1ff6:	2301      	movs	r3, #1
    1ff8:	425b      	negs	r3, r3
    1ffa:	4698      	mov	r8, r3
    1ffc:	e7e2      	b.n	1fc4 <_ZN6uart_t4findEPKc+0x54>
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	00000209 	.word	0x00000209
    2004:	00000206 	.word	0x00000206

00002008 <_ZN6uart_t4readEv>:
char* uart_t::read() {
    2008:	b5f0      	push	{r4, r5, r6, r7, lr}
    200a:	46c6      	mov	lr, r8
    200c:	b500      	push	{lr}
    200e:	0005      	movs	r5, r0
    if(!m_used) return NULL;
    2010:	4b1f      	ldr	r3, [pc, #124]	; (2090 <_ZN6uart_t4readEv+0x88>)
    2012:	5cc3      	ldrb	r3, [r0, r3]
    2014:	2b00      	cmp	r3, #0
    2016:	d036      	beq.n	2086 <_ZN6uart_t4readEv+0x7e>
        if(m_rxhead >= m_rxtail)
    2018:	2381      	movs	r3, #129	; 0x81
    201a:	009b      	lsls	r3, r3, #2
    201c:	5ac2      	ldrh	r2, [r0, r3]
    201e:	b292      	uxth	r2, r2
    2020:	4b1c      	ldr	r3, [pc, #112]	; (2094 <_ZN6uart_t4readEv+0x8c>)
    2022:	5ac3      	ldrh	r3, [r0, r3]
    2024:	b29b      	uxth	r3, r3
    2026:	429a      	cmp	r2, r3
    2028:	d310      	bcc.n	204c <_ZN6uart_t4readEv+0x44>
            return m_rxhead - m_rxtail;
    202a:	2381      	movs	r3, #129	; 0x81
    202c:	009b      	lsls	r3, r3, #2
    202e:	5ac0      	ldrh	r0, [r0, r3]
    2030:	4b18      	ldr	r3, [pc, #96]	; (2094 <_ZN6uart_t4readEv+0x8c>)
    2032:	5aeb      	ldrh	r3, [r5, r3]
    2034:	1ac0      	subs	r0, r0, r3
    2036:	b280      	uxth	r0, r0
    size_t avail = available();
    2038:	4680      	mov	r8, r0
    if(!avail) return NULL;
    203a:	2800      	cmp	r0, #0
    203c:	d025      	beq.n	208a <_ZN6uart_t4readEv+0x82>
    char* data = (char*)malloc(avail + 1);
    203e:	3001      	adds	r0, #1
    2040:	f000 fb56 	bl	26f0 <malloc>
    2044:	1e07      	subs	r7, r0, #0
    if(!data) return NULL;
    2046:	d01a      	beq.n	207e <_ZN6uart_t4readEv+0x76>
    for(size_t i = 0; i < avail; i++)
    2048:	2400      	movs	r4, #0
    204a:	e012      	b.n	2072 <_ZN6uart_t4readEv+0x6a>
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    204c:	2381      	movs	r3, #129	; 0x81
    204e:	009b      	lsls	r3, r3, #2
    2050:	5ac0      	ldrh	r0, [r0, r3]
    2052:	4b10      	ldr	r3, [pc, #64]	; (2094 <_ZN6uart_t4readEv+0x8c>)
    2054:	5aeb      	ldrh	r3, [r5, r3]
    2056:	1ac0      	subs	r0, r0, r3
    2058:	b280      	uxth	r0, r0
    205a:	2380      	movs	r3, #128	; 0x80
    205c:	009b      	lsls	r3, r3, #2
    205e:	469c      	mov	ip, r3
    2060:	4460      	add	r0, ip
    2062:	b280      	uxth	r0, r0
    2064:	e7e8      	b.n	2038 <_ZN6uart_t4readEv+0x30>
        data[i] = getc();
    2066:	193e      	adds	r6, r7, r4
    2068:	0028      	movs	r0, r5
    206a:	f7ff ff1b 	bl	1ea4 <_ZN6uart_t4getcEv>
    206e:	7030      	strb	r0, [r6, #0]
    for(size_t i = 0; i < avail; i++)
    2070:	3401      	adds	r4, #1
    2072:	4544      	cmp	r4, r8
    2074:	d3f7      	bcc.n	2066 <_ZN6uart_t4readEv+0x5e>
    data[avail] = '\0';
    2076:	4643      	mov	r3, r8
    2078:	18fb      	adds	r3, r7, r3
    207a:	2200      	movs	r2, #0
    207c:	701a      	strb	r2, [r3, #0]
}
    207e:	0038      	movs	r0, r7
    2080:	bc04      	pop	{r2}
    2082:	4690      	mov	r8, r2
    2084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!m_used) return NULL;
    2086:	2700      	movs	r7, #0
    2088:	e7f9      	b.n	207e <_ZN6uart_t4readEv+0x76>
    if(!avail) return NULL;
    208a:	2700      	movs	r7, #0
    208c:	e7f7      	b.n	207e <_ZN6uart_t4readEv+0x76>
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	00000209 	.word	0x00000209
    2094:	00000206 	.word	0x00000206

00002098 <SERCOM0_Handler>:
void SERCOM0_Handler() {
    2098:	b510      	push	{r4, lr}
    g_uart0.sercom_handler();
    209a:	4802      	ldr	r0, [pc, #8]	; (20a4 <SERCOM0_Handler+0xc>)
    209c:	f7ff fe9e 	bl	1ddc <_ZN6uart_t14sercom_handlerEv>
}
    20a0:	bd10      	pop	{r4, pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	200000f0 	.word	0x200000f0

000020a8 <SERCOM1_Handler>:
void SERCOM1_Handler() {
    20a8:	b510      	push	{r4, lr}
    g_uart1.sercom_handler();
    20aa:	4802      	ldr	r0, [pc, #8]	; (20b4 <SERCOM1_Handler+0xc>)
    20ac:	f7ff fe96 	bl	1ddc <_ZN6uart_t14sercom_handlerEv>
    20b0:	bd10      	pop	{r4, pc}
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	200002fc 	.word	0x200002fc

000020b8 <_GLOBAL__sub_I_g_uart0>:
    20b8:	b510      	push	{r4, lr}
    20ba:	4902      	ldr	r1, [pc, #8]	; (20c4 <_GLOBAL__sub_I_g_uart0+0xc>)
    20bc:	2001      	movs	r0, #1
    20be:	f7ff fd6d 	bl	1b9c <_Z41__static_initialization_and_destruction_0ii>
    20c2:	bd10      	pop	{r4, pc}
    20c4:	0000ffff 	.word	0x0000ffff

000020c8 <_ZN9SensornetC1ERK4RF24>:

extern "C" {
#include <systick.h>
}

Sensornet::Sensornet(const RF24& radio) :
    20c8:	b530      	push	{r4, r5, lr}
    m_radio(radio)
    20ca:	0003      	movs	r3, r0
    20cc:	c934      	ldmia	r1!, {r2, r4, r5}
    20ce:	c334      	stmia	r3!, {r2, r4, r5}
    20d0:	c934      	ldmia	r1!, {r2, r4, r5}
    20d2:	c334      	stmia	r3!, {r2, r4, r5}
    20d4:	c934      	ldmia	r1!, {r2, r4, r5}
    20d6:	c334      	stmia	r3!, {r2, r4, r5}
    20d8:	680a      	ldr	r2, [r1, #0]
    20da:	601a      	str	r2, [r3, #0]
    Vector() : m_size(0), m_data(NULL) {}
    20dc:	2300      	movs	r3, #0
    20de:	6283      	str	r3, [r0, #40]	; 0x28
    20e0:	62c3      	str	r3, [r0, #44]	; 0x2c
    20e2:	6303      	str	r3, [r0, #48]	; 0x30
    20e4:	6343      	str	r3, [r0, #52]	; 0x34
        },
        millis()
    };

    m_nodes.push_back(node2);*/
}
    20e6:	bd30      	pop	{r4, r5, pc}

000020e8 <_ZN9Sensornet5beginEv>:

bool Sensornet::begin() {
    20e8:	b570      	push	{r4, r5, r6, lr}
    20ea:	0004      	movs	r4, r0
    if(!m_radio.begin())
    20ec:	f7fe fffa 	bl	10e4 <_ZN4RF245beginEv>
    20f0:	1e05      	subs	r5, r0, #0
    20f2:	d101      	bne.n	20f8 <_ZN9Sensornet5beginEv+0x10>
    m_radio.openReadingPipe(1, (uint64_t)255 | (1 << 10));

    m_radio.startListening();

    return true;
}
    20f4:	0028      	movs	r0, r5
    20f6:	bd70      	pop	{r4, r5, r6, pc}
    m_radio.setChannel(120);
    20f8:	2178      	movs	r1, #120	; 0x78
    20fa:	0020      	movs	r0, r4
    20fc:	f7fe fe2b 	bl	d56 <_ZN4RF2410setChannelEh>
    m_radio.setAutoAck(true);
    2100:	2101      	movs	r1, #1
    2102:	0020      	movs	r0, r4
    2104:	f7fe ff96 	bl	1034 <_ZN4RF2410setAutoAckEb>
    m_radio.setRetries(5, 15);
    2108:	220f      	movs	r2, #15
    210a:	2105      	movs	r1, #5
    210c:	0020      	movs	r0, r4
    210e:	f7fe ffdf 	bl	10d0 <_ZN4RF2410setRetriesEhh>
    m_radio.setPayloadSize(32);
    2112:	2120      	movs	r1, #32
    2114:	0020      	movs	r0, r4
    2116:	f7fe fe27 	bl	d68 <_ZN4RF2414setPayloadSizeEh>
    m_radio.setPALevel(RF24_PA_MAX);
    211a:	2103      	movs	r1, #3
    211c:	0020      	movs	r0, r4
    211e:	f7fe ff96 	bl	104e <_ZN4RF2410setPALevelEh>
    m_radio.setDataRate(RF24_1MBPS);
    2122:	2100      	movs	r1, #0
    2124:	0020      	movs	r0, r4
    2126:	f7fe ffa9 	bl	107c <_ZN4RF2411setDataRateE15rf24_datarate_e>
    m_radio.openReadingPipe(1, (uint64_t)255 | (1 << 10));
    212a:	4a05      	ldr	r2, [pc, #20]	; (2140 <_ZN9Sensornet5beginEv+0x58>)
    212c:	2300      	movs	r3, #0
    212e:	2101      	movs	r1, #1
    2130:	0020      	movs	r0, r4
    2132:	f7fe fee9 	bl	f08 <_ZN4RF2415openReadingPipeEhy>
    m_radio.startListening();
    2136:	0020      	movs	r0, r4
    2138:	f7fe ff38 	bl	fac <_ZN4RF2414startListeningEv>
    return true;
    213c:	e7da      	b.n	20f4 <_ZN9Sensornet5beginEv+0xc>
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	000004ff 	.word	0x000004ff

00002144 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>:
            }
        }
    }
}

void Sensornet::UpdateNode(const SensorPacket& pkt) {
    2144:	b570      	push	{r4, r5, r6, lr}
    2146:	b08a      	sub	sp, #40	; 0x28
    2148:	0006      	movs	r6, r0
        return m_data;
    214a:	6b44      	ldr	r4, [r0, #52]	; 0x34
        return m_data + m_size;
    214c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    214e:	00dd      	lsls	r5, r3, #3
    2150:	18ed      	adds	r5, r5, r3
    2152:	00ad      	lsls	r5, r5, #2
    2154:	1965      	adds	r5, r4, r5
    for(auto& node : m_nodes) {
    2156:	42ac      	cmp	r4, r5
    2158:	d00f      	beq.n	217a <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x36>
        if(node.data.id == pkt.id) {
    215a:	2200      	movs	r2, #0
    215c:	56a2      	ldrsb	r2, [r4, r2]
    215e:	2300      	movs	r3, #0
    2160:	56cb      	ldrsb	r3, [r1, r3]
    2162:	429a      	cmp	r2, r3
    2164:	d001      	beq.n	216a <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x26>
    for(auto& node : m_nodes) {
    2166:	3424      	adds	r4, #36	; 0x24
    2168:	e7f5      	b.n	2156 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x12>
            memcpy(&node.data, &pkt, sizeof(SensorPacket));
    216a:	2220      	movs	r2, #32
    216c:	0020      	movs	r0, r4
    216e:	f000 fad3 	bl	2718 <memcpy>
            node.last_seen = millis();
    2172:	f7ff fcf9 	bl	1b68 <millis>
    2176:	6220      	str	r0, [r4, #32]
            return;
    2178:	e024      	b.n	21c4 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x80>
        }
    }

    m_nodes.push_back({ pkt, millis() });
    217a:	0034      	movs	r4, r6
    217c:	3430      	adds	r4, #48	; 0x30
    217e:	2220      	movs	r2, #32
    2180:	a801      	add	r0, sp, #4
    2182:	f000 fac9 	bl	2718 <memcpy>
    2186:	f7ff fcef 	bl	1b68 <millis>
    218a:	9009      	str	r0, [sp, #36]	; 0x24
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    218c:	6b31      	ldr	r1, [r6, #48]	; 0x30
    218e:	2900      	cmp	r1, #0
    2190:	d01a      	beq.n	21c8 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x84>
    2192:	3101      	adds	r1, #1
    2194:	00cb      	lsls	r3, r1, #3
    2196:	1859      	adds	r1, r3, r1
    2198:	0089      	lsls	r1, r1, #2
    219a:	6860      	ldr	r0, [r4, #4]
    219c:	f000 fb84 	bl	28a8 <realloc>
        if(!new_data) return;
    21a0:	2800      	cmp	r0, #0
    21a2:	d00f      	beq.n	21c4 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x80>
        m_data = new_data;
    21a4:	6060      	str	r0, [r4, #4]
        *(m_data + m_size) = elem;
    21a6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    21a8:	00da      	lsls	r2, r3, #3
    21aa:	18d2      	adds	r2, r2, r3
    21ac:	0092      	lsls	r2, r2, #2
    21ae:	ab01      	add	r3, sp, #4
    21b0:	1880      	adds	r0, r0, r2
    21b2:	cb16      	ldmia	r3!, {r1, r2, r4}
    21b4:	c016      	stmia	r0!, {r1, r2, r4}
    21b6:	cb16      	ldmia	r3!, {r1, r2, r4}
    21b8:	c016      	stmia	r0!, {r1, r2, r4}
    21ba:	cb16      	ldmia	r3!, {r1, r2, r4}
    21bc:	c016      	stmia	r0!, {r1, r2, r4}
        m_size++;
    21be:	6b33      	ldr	r3, [r6, #48]	; 0x30
    21c0:	3301      	adds	r3, #1
    21c2:	6333      	str	r3, [r6, #48]	; 0x30
}
    21c4:	b00a      	add	sp, #40	; 0x28
    21c6:	bd70      	pop	{r4, r5, r6, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    21c8:	2024      	movs	r0, #36	; 0x24
    21ca:	f000 fa91 	bl	26f0 <malloc>
    21ce:	e7e7      	b.n	21a0 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x5c>

000021d0 <_ZN9Sensornet13ProcessPacketER12SensorPacket>:
void Sensornet::ProcessPacket(SensorPacket& pkt) {
    21d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d2:	46c6      	mov	lr, r8
    21d4:	b500      	push	{lr}
    21d6:	0006      	movs	r6, r0
    21d8:	000d      	movs	r5, r1
    if(pkt.id == 0) {
    21da:	2300      	movs	r3, #0
    21dc:	56cb      	ldrsb	r3, [r1, r3]
    21de:	2b00      	cmp	r3, #0
    21e0:	d13b      	bne.n	225a <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x8a>
        pkt.id = 1;
    21e2:	3301      	adds	r3, #1
    21e4:	700b      	strb	r3, [r1, #0]
        return m_data;
    21e6:	6b44      	ldr	r4, [r0, #52]	; 0x34
        return m_data + m_size;
    21e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    21ea:	00df      	lsls	r7, r3, #3
    21ec:	18ff      	adds	r7, r7, r3
    21ee:	00bf      	lsls	r7, r7, #2
    21f0:	19e7      	adds	r7, r4, r7
    21f2:	e01f      	b.n	2234 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x64>
                pkt.id = node.data.id;
    21f4:	2300      	movs	r3, #0
    21f6:	56e3      	ldrsb	r3, [r4, r3]
    21f8:	702b      	strb	r3, [r5, #0]
        UpdateNode(pkt);
    21fa:	0029      	movs	r1, r5
    21fc:	0030      	movs	r0, r6
    21fe:	f7ff ffa1 	bl	2144 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
        m_radio.stopListening();
    2202:	0030      	movs	r0, r6
    2204:	f7fe fdb6 	bl	d74 <_ZN4RF2413stopListeningEv>
        pkt.type = Sensors::TYPE_COMMAND;
    2208:	23ff      	movs	r3, #255	; 0xff
    220a:	726b      	strb	r3, [r5, #9]
        pkt.data[0] = Sensors::COMMAND_SET_ID;
    220c:	3bfe      	subs	r3, #254	; 0xfe
    220e:	72ab      	strb	r3, [r5, #10]
        m_radio.openWritingPipe((uint64_t)0 | (1 << 10));
    2210:	2280      	movs	r2, #128	; 0x80
    2212:	00d2      	lsls	r2, r2, #3
    2214:	2300      	movs	r3, #0
    2216:	0030      	movs	r0, r6
    2218:	f7fe fe5e 	bl	ed8 <_ZN4RF2415openWritingPipeEy>
        m_radio.write(&pkt, 32);
    221c:	2220      	movs	r2, #32
    221e:	0029      	movs	r1, r5
    2220:	0030      	movs	r0, r6
    2222:	f7fe fe30 	bl	e86 <_ZN4RF245writeEPKvh>
        m_radio.startListening();
    2226:	0030      	movs	r0, r6
    2228:	f7fe fec0 	bl	fac <_ZN4RF2414startListeningEv>
}
    222c:	bc04      	pop	{r2}
    222e:	4690      	mov	r8, r2
    2230:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(auto& node : m_nodes) {
    2232:	3424      	adds	r4, #36	; 0x24
    2234:	42bc      	cmp	r4, r7
    2236:	d0e0      	beq.n	21fa <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x2a>
            if(strncmp(node.data.name, pkt.name, sizeof(SensorPacket::name)) == 0) {
    2238:	1c60      	adds	r0, r4, #1
    223a:	1c69      	adds	r1, r5, #1
    223c:	2208      	movs	r2, #8
    223e:	f000 fbc4 	bl	29ca <strncmp>
    2242:	2800      	cmp	r0, #0
    2244:	d0d6      	beq.n	21f4 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x24>
            if(node.data.id >= pkt.id) pkt.id = node.data.id + 1;
    2246:	2300      	movs	r3, #0
    2248:	56e3      	ldrsb	r3, [r4, r3]
    224a:	2200      	movs	r2, #0
    224c:	56aa      	ldrsb	r2, [r5, r2]
    224e:	4293      	cmp	r3, r2
    2250:	dbef      	blt.n	2232 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x62>
    2252:	b2db      	uxtb	r3, r3
    2254:	3301      	adds	r3, #1
    2256:	702b      	strb	r3, [r5, #0]
    2258:	e7eb      	b.n	2232 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x62>
        UpdateNode(pkt);
    225a:	f7ff ff73 	bl	2144 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
        for(size_t i = 0; i < m_cmd_queue.size(); i++) {
    225e:	2400      	movs	r4, #0
    2260:	e008      	b.n	2274 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xa4>

        memcpy(it, it + 1, m_size * sizeof(T) - (it - begin()) - 1 * sizeof(T));

        m_size -= 1;
        if(!m_size) {
            free(m_data);
    2262:	4643      	mov	r3, r8
    2264:	6858      	ldr	r0, [r3, #4]
    2266:	f000 fa4d 	bl	2704 <free>
            m_data = NULL;
    226a:	2300      	movs	r3, #0
    226c:	4642      	mov	r2, r8
    226e:	6053      	str	r3, [r2, #4]
                i--;
    2270:	3c01      	subs	r4, #1
        for(size_t i = 0; i < m_cmd_queue.size(); i++) {
    2272:	3401      	adds	r4, #1
    2274:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2276:	429c      	cmp	r4, r3
    2278:	d2d8      	bcs.n	222c <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x5c>
        return *(m_data + idx);
    227a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    227c:	0167      	lsls	r7, r4, #5
    227e:	19da      	adds	r2, r3, r7
    2280:	4690      	mov	r8, r2
            if(cmd.id == pkt.id) {
    2282:	57da      	ldrsb	r2, [r3, r7]
    2284:	2300      	movs	r3, #0
    2286:	56eb      	ldrsb	r3, [r5, r3]
    2288:	429a      	cmp	r2, r3
    228a:	d1f2      	bne.n	2272 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xa2>
                m_radio.stopListening();
    228c:	0030      	movs	r0, r6
    228e:	f7fe fd71 	bl	d74 <_ZN4RF2413stopListeningEv>
                m_radio.openWritingPipe((uint64_t)cmd.id | (1 << 10));
    2292:	4643      	mov	r3, r8
    2294:	2100      	movs	r1, #0
    2296:	5659      	ldrsb	r1, [r3, r1]
    2298:	17cb      	asrs	r3, r1, #31
    229a:	2280      	movs	r2, #128	; 0x80
    229c:	00d2      	lsls	r2, r2, #3
    229e:	430a      	orrs	r2, r1
    22a0:	0030      	movs	r0, r6
    22a2:	f7fe fe19 	bl	ed8 <_ZN4RF2415openWritingPipeEy>
                m_radio.write(&cmd, 32);
    22a6:	2220      	movs	r2, #32
    22a8:	4641      	mov	r1, r8
    22aa:	0030      	movs	r0, r6
    22ac:	f7fe fdeb 	bl	e86 <_ZN4RF245writeEPKvh>
                m_radio.startListening();
    22b0:	0030      	movs	r0, r6
    22b2:	f7fe fe7b 	bl	fac <_ZN4RF2414startListeningEv>
                m_cmd_queue.erase(m_cmd_queue.begin() + i);
    22b6:	2328      	movs	r3, #40	; 0x28
    22b8:	4698      	mov	r8, r3
    22ba:	44b0      	add	r8, r6
    22bc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    22be:	469c      	mov	ip, r3
    22c0:	4467      	add	r7, ip
        if(!m_size || it < begin() || it >= end()) return;
    22c2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    22c4:	2b00      	cmp	r3, #0
    22c6:	d0d3      	beq.n	2270 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xa0>
        return m_data;
    22c8:	4642      	mov	r2, r8
    22ca:	6852      	ldr	r2, [r2, #4]
        if(!m_size || it < begin() || it >= end()) return;
    22cc:	4297      	cmp	r7, r2
    22ce:	d3cf      	bcc.n	2270 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xa0>
        return m_data + m_size;
    22d0:	015b      	lsls	r3, r3, #5
    22d2:	18d1      	adds	r1, r2, r3
        if(!m_size || it < begin() || it >= end()) return;
    22d4:	428f      	cmp	r7, r1
    22d6:	d2cb      	bcs.n	2270 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xa0>
        memcpy(it, it + 1, m_size * sizeof(T) - (it - begin()) - 1 * sizeof(T));
    22d8:	0039      	movs	r1, r7
    22da:	3120      	adds	r1, #32
    22dc:	1aba      	subs	r2, r7, r2
    22de:	1152      	asrs	r2, r2, #5
    22e0:	1a9a      	subs	r2, r3, r2
    22e2:	3a20      	subs	r2, #32
    22e4:	0038      	movs	r0, r7
    22e6:	f000 fa17 	bl	2718 <memcpy>
        m_size -= 1;
    22ea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    22ec:	1e59      	subs	r1, r3, #1
    22ee:	62b1      	str	r1, [r6, #40]	; 0x28
        if(!m_size) {
    22f0:	2900      	cmp	r1, #0
    22f2:	d0b6      	beq.n	2262 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x92>
            return;
        }

        auto new_data = (T*)realloc(m_data, m_size * sizeof(T));
    22f4:	0149      	lsls	r1, r1, #5
    22f6:	4643      	mov	r3, r8
    22f8:	6858      	ldr	r0, [r3, #4]
    22fa:	f000 fad5 	bl	28a8 <realloc>
        if(!new_data) return;
    22fe:	2800      	cmp	r0, #0
    2300:	d0b6      	beq.n	2270 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xa0>
        m_data = new_data;
    2302:	4643      	mov	r3, r8
    2304:	6058      	str	r0, [r3, #4]
    2306:	e7b3      	b.n	2270 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xa0>

00002308 <_ZN9Sensornet4PollEv>:
void Sensornet::Poll() {
    2308:	b510      	push	{r4, lr}
    230a:	b088      	sub	sp, #32
    230c:	0004      	movs	r4, r0
    if(m_radio.available()) {
    230e:	f7fe fdd4 	bl	eba <_ZN4RF249availableEv>
    2312:	2800      	cmp	r0, #0
    2314:	d101      	bne.n	231a <_ZN9Sensornet4PollEv+0x12>
}
    2316:	b008      	add	sp, #32
    2318:	bd10      	pop	{r4, pc}
        m_radio.read(&pkt, 32);
    231a:	2220      	movs	r2, #32
    231c:	4669      	mov	r1, sp
    231e:	0020      	movs	r0, r4
    2320:	f7fe fdd0 	bl	ec4 <_ZN4RF244readEPvh>
        ProcessPacket(pkt);
    2324:	4669      	mov	r1, sp
    2326:	0020      	movs	r0, r4
    2328:	f7ff ff52 	bl	21d0 <_ZN9Sensornet13ProcessPacketER12SensorPacket>
        m_radio.flush_rx();
    232c:	0020      	movs	r0, r4
    232e:	f7fe fce4 	bl	cfa <_ZN4RF248flush_rxEv>
}
    2332:	e7f0      	b.n	2316 <_ZN9Sensornet4PollEv+0xe>

00002334 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_>:

void Sensornet::CMDSetName(GSM* gsm, const char* sender, const char* c_args) {
    2334:	b5f0      	push	{r4, r5, r6, r7, lr}
    2336:	46ce      	mov	lr, r9
    2338:	4647      	mov	r7, r8
    233a:	b580      	push	{r7, lr}
    233c:	b089      	sub	sp, #36	; 0x24
    233e:	0006      	movs	r6, r0
    2340:	4688      	mov	r8, r1
    2342:	4691      	mov	r9, r2
    2344:	1e1c      	subs	r4, r3, #0
    char* id_str = NULL;
    char* name = NULL;
    char* args = NULL;

    if(c_args) {
    2346:	d032      	beq.n	23ae <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x7a>
        args = (char*)malloc(strlen(c_args));
    2348:	0018      	movs	r0, r3
    234a:	f000 fb37 	bl	29bc <strlen>
    234e:	f000 f9cf 	bl	26f0 <malloc>
    2352:	1e05      	subs	r5, r0, #0
        if(!args) {
    2354:	d025      	beq.n	23a2 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x6e>
            gsm->SendSMS(sender, "malloc failed");
            return;
        }
        strcpy(args, c_args);
    2356:	0021      	movs	r1, r4
    2358:	f000 fb28 	bl	29ac <strcpy>

        id_str = strtok(args, " ");
    235c:	4f2e      	ldr	r7, [pc, #184]	; (2418 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xe4>)
    235e:	0039      	movs	r1, r7
    2360:	0028      	movs	r0, r5
    2362:	f000 fb6d 	bl	2a40 <strtok>
    2366:	0004      	movs	r4, r0
        name = strtok(NULL, " ");
    2368:	0039      	movs	r1, r7
    236a:	2000      	movs	r0, #0
    236c:	f000 fb68 	bl	2a40 <strtok>
    2370:	0007      	movs	r7, r0
    }

    if(id_str && name && atoi(id_str)) {
    2372:	2c00      	cmp	r4, #0
    2374:	d006      	beq.n	2384 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x50>
    2376:	2f00      	cmp	r7, #0
    2378:	d004      	beq.n	2384 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x50>
    237a:	0020      	movs	r0, r4
    237c:	f000 f976 	bl	266c <atoi>
    2380:	2800      	cmp	r0, #0
    2382:	d117      	bne.n	23b4 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x80>

        m_cmd_queue.push_back(cmd);

        gsm->SendSMS(sender, "Command queued");
    } else {
        gsm->SendSMS(sender, "Usage: setname <id> <new name>");
    2384:	4a25      	ldr	r2, [pc, #148]	; (241c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xe8>)
    2386:	4649      	mov	r1, r9
    2388:	4640      	mov	r0, r8
    238a:	f7fe f873 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
    }

    if(args) free(args);
    238e:	2d00      	cmp	r5, #0
    2390:	d002      	beq.n	2398 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x64>
    2392:	0028      	movs	r0, r5
    2394:	f000 f9b6 	bl	2704 <free>
    2398:	b009      	add	sp, #36	; 0x24
    239a:	bc0c      	pop	{r2, r3}
    239c:	4690      	mov	r8, r2
    239e:	4699      	mov	r9, r3
    23a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            gsm->SendSMS(sender, "malloc failed");
    23a2:	4a1f      	ldr	r2, [pc, #124]	; (2420 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xec>)
    23a4:	4649      	mov	r1, r9
    23a6:	4640      	mov	r0, r8
    23a8:	f7fe f864 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
            return;
    23ac:	e7f4      	b.n	2398 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x64>
    char* args = NULL;
    23ae:	001d      	movs	r5, r3
    char* name = NULL;
    23b0:	001f      	movs	r7, r3
    23b2:	e7de      	b.n	2372 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x3e>
        cmd.id = atoi(id_str);
    23b4:	0020      	movs	r0, r4
    23b6:	f000 f959 	bl	266c <atoi>
    23ba:	466b      	mov	r3, sp
    23bc:	7018      	strb	r0, [r3, #0]
        cmd.type = Sensors::TYPE_COMMAND;
    23be:	23ff      	movs	r3, #255	; 0xff
    23c0:	466a      	mov	r2, sp
    23c2:	7253      	strb	r3, [r2, #9]
        cmd.data[0] = Sensors::COMMAND_SET_NAME;
    23c4:	3bfd      	subs	r3, #253	; 0xfd
    23c6:	7293      	strb	r3, [r2, #10]
        strncpy(cmd.name, name, sizeof(cmd.name));
    23c8:	2208      	movs	r2, #8
    23ca:	0039      	movs	r1, r7
    23cc:	466b      	mov	r3, sp
    23ce:	1c58      	adds	r0, r3, #1
    23d0:	f000 fb0c 	bl	29ec <strncpy>
        m_cmd_queue.push_back(cmd);
    23d4:	0034      	movs	r4, r6
    23d6:	3428      	adds	r4, #40	; 0x28
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    23d8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    23da:	2900      	cmp	r1, #0
    23dc:	d017      	beq.n	240e <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xda>
    23de:	3101      	adds	r1, #1
    23e0:	0149      	lsls	r1, r1, #5
    23e2:	6860      	ldr	r0, [r4, #4]
    23e4:	f000 fa60 	bl	28a8 <realloc>
        if(!new_data) return;
    23e8:	2800      	cmp	r0, #0
    23ea:	d00a      	beq.n	2402 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xce>
        m_data = new_data;
    23ec:	6060      	str	r0, [r4, #4]
        *(m_data + m_size) = elem;
    23ee:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    23f0:	015b      	lsls	r3, r3, #5
    23f2:	18c0      	adds	r0, r0, r3
    23f4:	2220      	movs	r2, #32
    23f6:	4669      	mov	r1, sp
    23f8:	f000 f98e 	bl	2718 <memcpy>
        m_size++;
    23fc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    23fe:	3301      	adds	r3, #1
    2400:	62b3      	str	r3, [r6, #40]	; 0x28
        gsm->SendSMS(sender, "Command queued");
    2402:	4a08      	ldr	r2, [pc, #32]	; (2424 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xf0>)
    2404:	4649      	mov	r1, r9
    2406:	4640      	mov	r0, r8
    2408:	f7fe f834 	bl	474 <_ZN3GSM7SendSMSEPKcS1_>
    240c:	e7bf      	b.n	238e <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x5a>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    240e:	2020      	movs	r0, #32
    2410:	f000 f96e 	bl	26f0 <malloc>
    2414:	e7e8      	b.n	23e8 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xb4>
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	000034a4 	.word	0x000034a4
    241c:	0000365c 	.word	0x0000365c
    2420:	00003494 	.word	0x00003494
    2424:	0000364c 	.word	0x0000364c

00002428 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
    2428:	e7fe      	b.n	2428 <Dummy_Handler>
    242a:	Address 0x0000242a is out of bounds.


0000242c <Reset_Handler>:
{
    242c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    242e:	4a1e      	ldr	r2, [pc, #120]	; (24a8 <Reset_Handler+0x7c>)
    2430:	4b1e      	ldr	r3, [pc, #120]	; (24ac <Reset_Handler+0x80>)
    2432:	429a      	cmp	r2, r3
    2434:	d007      	beq.n	2446 <Reset_Handler+0x1a>
        pDest = &_data;
    2436:	4b1d      	ldr	r3, [pc, #116]	; (24ac <Reset_Handler+0x80>)
        pSrc = &_etext;
    2438:	4a1b      	ldr	r2, [pc, #108]	; (24a8 <Reset_Handler+0x7c>)
    243a:	e001      	b.n	2440 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
    243c:	ca02      	ldmia	r2!, {r1}
    243e:	c302      	stmia	r3!, {r1}
                for (; pDest < &_edata;) {
    2440:	491b      	ldr	r1, [pc, #108]	; (24b0 <Reset_Handler+0x84>)
    2442:	428b      	cmp	r3, r1
    2444:	d3fa      	bcc.n	243c <Reset_Handler+0x10>
        pSrc = &_etext;
    2446:	4b1b      	ldr	r3, [pc, #108]	; (24b4 <Reset_Handler+0x88>)
    2448:	e001      	b.n	244e <Reset_Handler+0x22>
                *pDest++ = 0;
    244a:	2200      	movs	r2, #0
    244c:	c304      	stmia	r3!, {r2}
        for (pDest = &_bss; pDest < &_ebss;) {
    244e:	4a1a      	ldr	r2, [pc, #104]	; (24b8 <Reset_Handler+0x8c>)
    2450:	4293      	cmp	r3, r2
    2452:	d3fa      	bcc.n	244a <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2454:	4b19      	ldr	r3, [pc, #100]	; (24bc <Reset_Handler+0x90>)
    2456:	227f      	movs	r2, #127	; 0x7f
    2458:	4393      	bics	r3, r2
    245a:	4a19      	ldr	r2, [pc, #100]	; (24c0 <Reset_Handler+0x94>)
    245c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    245e:	4a19      	ldr	r2, [pc, #100]	; (24c4 <Reset_Handler+0x98>)
    2460:	2390      	movs	r3, #144	; 0x90
    2462:	005b      	lsls	r3, r3, #1
    2464:	2102      	movs	r1, #2
    2466:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2468:	4b17      	ldr	r3, [pc, #92]	; (24c8 <Reset_Handler+0x9c>)
    246a:	7b9a      	ldrb	r2, [r3, #14]
    246c:	312e      	adds	r1, #46	; 0x2e
    246e:	438a      	bics	r2, r1
    2470:	2120      	movs	r1, #32
    2472:	430a      	orrs	r2, r1
    2474:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2476:	7b9a      	ldrb	r2, [r3, #14]
    2478:	210c      	movs	r1, #12
    247a:	438a      	bics	r2, r1
    247c:	2108      	movs	r1, #8
    247e:	430a      	orrs	r2, r1
    2480:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2482:	7b9a      	ldrb	r2, [r3, #14]
    2484:	2103      	movs	r1, #3
    2486:	438a      	bics	r2, r1
    2488:	2102      	movs	r1, #2
    248a:	430a      	orrs	r2, r1
    248c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    248e:	4a0f      	ldr	r2, [pc, #60]	; (24cc <Reset_Handler+0xa0>)
    2490:	6851      	ldr	r1, [r2, #4]
    2492:	2380      	movs	r3, #128	; 0x80
    2494:	430b      	orrs	r3, r1
    2496:	6053      	str	r3, [r2, #4]
        systick_init();
    2498:	f7ff fb36 	bl	1b08 <systick_init>
        __libc_init_array();
    249c:	f000 f904 	bl	26a8 <__libc_init_array>
        main();
    24a0:	f7ff f8a8 	bl	15f4 <main>
        while (1);
    24a4:	e7fe      	b.n	24a4 <Reset_Handler+0x78>
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	0000384c 	.word	0x0000384c
    24ac:	20000000 	.word	0x20000000
    24b0:	20000078 	.word	0x20000078
    24b4:	20000078 	.word	0x20000078
    24b8:	20000524 	.word	0x20000524
    24bc:	00000000 	.word	0x00000000
    24c0:	e000ed00 	.word	0xe000ed00
    24c4:	41007000 	.word	0x41007000
    24c8:	41004800 	.word	0x41004800
    24cc:	41004000 	.word	0x41004000

000024d0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    24d0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    24d2:	4a06      	ldr	r2, [pc, #24]	; (24ec <_sbrk+0x1c>)
    24d4:	6812      	ldr	r2, [r2, #0]
    24d6:	2a00      	cmp	r2, #0
    24d8:	d004      	beq.n	24e4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    24da:	4a04      	ldr	r2, [pc, #16]	; (24ec <_sbrk+0x1c>)
    24dc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    24de:	18c3      	adds	r3, r0, r3
    24e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    24e2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    24e4:	4a01      	ldr	r2, [pc, #4]	; (24ec <_sbrk+0x1c>)
    24e6:	4902      	ldr	r1, [pc, #8]	; (24f0 <_sbrk+0x20>)
    24e8:	6011      	str	r1, [r2, #0]
    24ea:	e7f6      	b.n	24da <_sbrk+0xa>
    24ec:	20000508 	.word	0x20000508
    24f0:	20000524 	.word	0x20000524

000024f4 <__aeabi_atexit>:
    24f4:	0003      	movs	r3, r0
    24f6:	b510      	push	{r4, lr}
    24f8:	0008      	movs	r0, r1
    24fa:	0019      	movs	r1, r3
    24fc:	f000 f8c6 	bl	268c <__cxa_atexit>
    2500:	bd10      	pop	{r4, pc}
    2502:	Address 0x00002502 is out of bounds.


00002504 <__udivsi3>:
    2504:	2200      	movs	r2, #0
    2506:	0843      	lsrs	r3, r0, #1
    2508:	428b      	cmp	r3, r1
    250a:	d374      	bcc.n	25f6 <__udivsi3+0xf2>
    250c:	0903      	lsrs	r3, r0, #4
    250e:	428b      	cmp	r3, r1
    2510:	d35f      	bcc.n	25d2 <__udivsi3+0xce>
    2512:	0a03      	lsrs	r3, r0, #8
    2514:	428b      	cmp	r3, r1
    2516:	d344      	bcc.n	25a2 <__udivsi3+0x9e>
    2518:	0b03      	lsrs	r3, r0, #12
    251a:	428b      	cmp	r3, r1
    251c:	d328      	bcc.n	2570 <__udivsi3+0x6c>
    251e:	0c03      	lsrs	r3, r0, #16
    2520:	428b      	cmp	r3, r1
    2522:	d30d      	bcc.n	2540 <__udivsi3+0x3c>
    2524:	22ff      	movs	r2, #255	; 0xff
    2526:	0209      	lsls	r1, r1, #8
    2528:	ba12      	rev	r2, r2
    252a:	0c03      	lsrs	r3, r0, #16
    252c:	428b      	cmp	r3, r1
    252e:	d302      	bcc.n	2536 <__udivsi3+0x32>
    2530:	1212      	asrs	r2, r2, #8
    2532:	0209      	lsls	r1, r1, #8
    2534:	d065      	beq.n	2602 <__udivsi3+0xfe>
    2536:	0b03      	lsrs	r3, r0, #12
    2538:	428b      	cmp	r3, r1
    253a:	d319      	bcc.n	2570 <__udivsi3+0x6c>
    253c:	e000      	b.n	2540 <__udivsi3+0x3c>
    253e:	0a09      	lsrs	r1, r1, #8
    2540:	0bc3      	lsrs	r3, r0, #15
    2542:	428b      	cmp	r3, r1
    2544:	d301      	bcc.n	254a <__udivsi3+0x46>
    2546:	03cb      	lsls	r3, r1, #15
    2548:	1ac0      	subs	r0, r0, r3
    254a:	4152      	adcs	r2, r2
    254c:	0b83      	lsrs	r3, r0, #14
    254e:	428b      	cmp	r3, r1
    2550:	d301      	bcc.n	2556 <__udivsi3+0x52>
    2552:	038b      	lsls	r3, r1, #14
    2554:	1ac0      	subs	r0, r0, r3
    2556:	4152      	adcs	r2, r2
    2558:	0b43      	lsrs	r3, r0, #13
    255a:	428b      	cmp	r3, r1
    255c:	d301      	bcc.n	2562 <__udivsi3+0x5e>
    255e:	034b      	lsls	r3, r1, #13
    2560:	1ac0      	subs	r0, r0, r3
    2562:	4152      	adcs	r2, r2
    2564:	0b03      	lsrs	r3, r0, #12
    2566:	428b      	cmp	r3, r1
    2568:	d301      	bcc.n	256e <__udivsi3+0x6a>
    256a:	030b      	lsls	r3, r1, #12
    256c:	1ac0      	subs	r0, r0, r3
    256e:	4152      	adcs	r2, r2
    2570:	0ac3      	lsrs	r3, r0, #11
    2572:	428b      	cmp	r3, r1
    2574:	d301      	bcc.n	257a <__udivsi3+0x76>
    2576:	02cb      	lsls	r3, r1, #11
    2578:	1ac0      	subs	r0, r0, r3
    257a:	4152      	adcs	r2, r2
    257c:	0a83      	lsrs	r3, r0, #10
    257e:	428b      	cmp	r3, r1
    2580:	d301      	bcc.n	2586 <__udivsi3+0x82>
    2582:	028b      	lsls	r3, r1, #10
    2584:	1ac0      	subs	r0, r0, r3
    2586:	4152      	adcs	r2, r2
    2588:	0a43      	lsrs	r3, r0, #9
    258a:	428b      	cmp	r3, r1
    258c:	d301      	bcc.n	2592 <__udivsi3+0x8e>
    258e:	024b      	lsls	r3, r1, #9
    2590:	1ac0      	subs	r0, r0, r3
    2592:	4152      	adcs	r2, r2
    2594:	0a03      	lsrs	r3, r0, #8
    2596:	428b      	cmp	r3, r1
    2598:	d301      	bcc.n	259e <__udivsi3+0x9a>
    259a:	020b      	lsls	r3, r1, #8
    259c:	1ac0      	subs	r0, r0, r3
    259e:	4152      	adcs	r2, r2
    25a0:	d2cd      	bcs.n	253e <__udivsi3+0x3a>
    25a2:	09c3      	lsrs	r3, r0, #7
    25a4:	428b      	cmp	r3, r1
    25a6:	d301      	bcc.n	25ac <__udivsi3+0xa8>
    25a8:	01cb      	lsls	r3, r1, #7
    25aa:	1ac0      	subs	r0, r0, r3
    25ac:	4152      	adcs	r2, r2
    25ae:	0983      	lsrs	r3, r0, #6
    25b0:	428b      	cmp	r3, r1
    25b2:	d301      	bcc.n	25b8 <__udivsi3+0xb4>
    25b4:	018b      	lsls	r3, r1, #6
    25b6:	1ac0      	subs	r0, r0, r3
    25b8:	4152      	adcs	r2, r2
    25ba:	0943      	lsrs	r3, r0, #5
    25bc:	428b      	cmp	r3, r1
    25be:	d301      	bcc.n	25c4 <__udivsi3+0xc0>
    25c0:	014b      	lsls	r3, r1, #5
    25c2:	1ac0      	subs	r0, r0, r3
    25c4:	4152      	adcs	r2, r2
    25c6:	0903      	lsrs	r3, r0, #4
    25c8:	428b      	cmp	r3, r1
    25ca:	d301      	bcc.n	25d0 <__udivsi3+0xcc>
    25cc:	010b      	lsls	r3, r1, #4
    25ce:	1ac0      	subs	r0, r0, r3
    25d0:	4152      	adcs	r2, r2
    25d2:	08c3      	lsrs	r3, r0, #3
    25d4:	428b      	cmp	r3, r1
    25d6:	d301      	bcc.n	25dc <__udivsi3+0xd8>
    25d8:	00cb      	lsls	r3, r1, #3
    25da:	1ac0      	subs	r0, r0, r3
    25dc:	4152      	adcs	r2, r2
    25de:	0883      	lsrs	r3, r0, #2
    25e0:	428b      	cmp	r3, r1
    25e2:	d301      	bcc.n	25e8 <__udivsi3+0xe4>
    25e4:	008b      	lsls	r3, r1, #2
    25e6:	1ac0      	subs	r0, r0, r3
    25e8:	4152      	adcs	r2, r2
    25ea:	0843      	lsrs	r3, r0, #1
    25ec:	428b      	cmp	r3, r1
    25ee:	d301      	bcc.n	25f4 <__udivsi3+0xf0>
    25f0:	004b      	lsls	r3, r1, #1
    25f2:	1ac0      	subs	r0, r0, r3
    25f4:	4152      	adcs	r2, r2
    25f6:	1a41      	subs	r1, r0, r1
    25f8:	d200      	bcs.n	25fc <__udivsi3+0xf8>
    25fa:	4601      	mov	r1, r0
    25fc:	4152      	adcs	r2, r2
    25fe:	4610      	mov	r0, r2
    2600:	4770      	bx	lr
    2602:	e7ff      	b.n	2604 <__udivsi3+0x100>
    2604:	b501      	push	{r0, lr}
    2606:	2000      	movs	r0, #0
    2608:	f000 f806 	bl	2618 <__aeabi_idiv0>
    260c:	bd02      	pop	{r1, pc}
    260e:	46c0      	nop			; (mov r8, r8)

00002610 <__aeabi_uidivmod>:
    2610:	2900      	cmp	r1, #0
    2612:	d0f7      	beq.n	2604 <__udivsi3+0x100>
    2614:	e776      	b.n	2504 <__udivsi3>
    2616:	4770      	bx	lr

00002618 <__aeabi_idiv0>:
    2618:	4770      	bx	lr
    261a:	46c0      	nop			; (mov r8, r8)

0000261c <__aeabi_lmul>:
    261c:	b5f0      	push	{r4, r5, r6, r7, lr}
    261e:	0415      	lsls	r5, r2, #16
    2620:	0c2d      	lsrs	r5, r5, #16
    2622:	000f      	movs	r7, r1
    2624:	0001      	movs	r1, r0
    2626:	002e      	movs	r6, r5
    2628:	46c6      	mov	lr, r8
    262a:	4684      	mov	ip, r0
    262c:	0400      	lsls	r0, r0, #16
    262e:	0c14      	lsrs	r4, r2, #16
    2630:	0c00      	lsrs	r0, r0, #16
    2632:	0c09      	lsrs	r1, r1, #16
    2634:	4346      	muls	r6, r0
    2636:	434d      	muls	r5, r1
    2638:	4360      	muls	r0, r4
    263a:	4361      	muls	r1, r4
    263c:	1940      	adds	r0, r0, r5
    263e:	0c34      	lsrs	r4, r6, #16
    2640:	1824      	adds	r4, r4, r0
    2642:	b500      	push	{lr}
    2644:	42a5      	cmp	r5, r4
    2646:	d903      	bls.n	2650 <__aeabi_lmul+0x34>
    2648:	2080      	movs	r0, #128	; 0x80
    264a:	0240      	lsls	r0, r0, #9
    264c:	4680      	mov	r8, r0
    264e:	4441      	add	r1, r8
    2650:	0c25      	lsrs	r5, r4, #16
    2652:	186d      	adds	r5, r5, r1
    2654:	4661      	mov	r1, ip
    2656:	4359      	muls	r1, r3
    2658:	437a      	muls	r2, r7
    265a:	0430      	lsls	r0, r6, #16
    265c:	1949      	adds	r1, r1, r5
    265e:	0424      	lsls	r4, r4, #16
    2660:	0c00      	lsrs	r0, r0, #16
    2662:	1820      	adds	r0, r4, r0
    2664:	1889      	adds	r1, r1, r2
    2666:	bc04      	pop	{r2}
    2668:	4690      	mov	r8, r2
    266a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000266c <atoi>:
    266c:	b510      	push	{r4, lr}
    266e:	220a      	movs	r2, #10
    2670:	2100      	movs	r1, #0
    2672:	f000 fabf 	bl	2bf4 <strtol>
    2676:	bd10      	pop	{r4, pc}

00002678 <calloc>:
    2678:	b510      	push	{r4, lr}
    267a:	4b03      	ldr	r3, [pc, #12]	; (2688 <calloc+0x10>)
    267c:	000a      	movs	r2, r1
    267e:	0001      	movs	r1, r0
    2680:	6818      	ldr	r0, [r3, #0]
    2682:	f000 f85a 	bl	273a <_calloc_r>
    2686:	bd10      	pop	{r4, pc}
    2688:	20000014 	.word	0x20000014

0000268c <__cxa_atexit>:
    268c:	b510      	push	{r4, lr}
    268e:	0004      	movs	r4, r0
    2690:	4804      	ldr	r0, [pc, #16]	; (26a4 <__cxa_atexit+0x18>)
    2692:	0013      	movs	r3, r2
    2694:	2800      	cmp	r0, #0
    2696:	d004      	beq.n	26a2 <__cxa_atexit+0x16>
    2698:	000a      	movs	r2, r1
    269a:	2002      	movs	r0, #2
    269c:	0021      	movs	r1, r4
    269e:	e000      	b.n	26a2 <__cxa_atexit+0x16>
    26a0:	bf00      	nop
    26a2:	bd10      	pop	{r4, pc}
    26a4:	00000000 	.word	0x00000000

000026a8 <__libc_init_array>:
    26a8:	b570      	push	{r4, r5, r6, lr}
    26aa:	2600      	movs	r6, #0
    26ac:	4d0c      	ldr	r5, [pc, #48]	; (26e0 <__libc_init_array+0x38>)
    26ae:	4c0d      	ldr	r4, [pc, #52]	; (26e4 <__libc_init_array+0x3c>)
    26b0:	1b64      	subs	r4, r4, r5
    26b2:	10a4      	asrs	r4, r4, #2
    26b4:	42a6      	cmp	r6, r4
    26b6:	d109      	bne.n	26cc <__libc_init_array+0x24>
    26b8:	2600      	movs	r6, #0
    26ba:	f001 f8a9 	bl	3810 <_init>
    26be:	4d0a      	ldr	r5, [pc, #40]	; (26e8 <__libc_init_array+0x40>)
    26c0:	4c0a      	ldr	r4, [pc, #40]	; (26ec <__libc_init_array+0x44>)
    26c2:	1b64      	subs	r4, r4, r5
    26c4:	10a4      	asrs	r4, r4, #2
    26c6:	42a6      	cmp	r6, r4
    26c8:	d105      	bne.n	26d6 <__libc_init_array+0x2e>
    26ca:	bd70      	pop	{r4, r5, r6, pc}
    26cc:	00b3      	lsls	r3, r6, #2
    26ce:	58eb      	ldr	r3, [r5, r3]
    26d0:	4798      	blx	r3
    26d2:	3601      	adds	r6, #1
    26d4:	e7ee      	b.n	26b4 <__libc_init_array+0xc>
    26d6:	00b3      	lsls	r3, r6, #2
    26d8:	58eb      	ldr	r3, [r5, r3]
    26da:	4798      	blx	r3
    26dc:	3601      	adds	r6, #1
    26de:	e7f2      	b.n	26c6 <__libc_init_array+0x1e>
    26e0:	0000381c 	.word	0x0000381c
    26e4:	0000381c 	.word	0x0000381c
    26e8:	0000381c 	.word	0x0000381c
    26ec:	0000382c 	.word	0x0000382c

000026f0 <malloc>:
    26f0:	b510      	push	{r4, lr}
    26f2:	4b03      	ldr	r3, [pc, #12]	; (2700 <malloc+0x10>)
    26f4:	0001      	movs	r1, r0
    26f6:	6818      	ldr	r0, [r3, #0]
    26f8:	f000 f878 	bl	27ec <_malloc_r>
    26fc:	bd10      	pop	{r4, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	20000014 	.word	0x20000014

00002704 <free>:
    2704:	b510      	push	{r4, lr}
    2706:	4b03      	ldr	r3, [pc, #12]	; (2714 <free+0x10>)
    2708:	0001      	movs	r1, r0
    270a:	6818      	ldr	r0, [r3, #0]
    270c:	f000 f824 	bl	2758 <_free_r>
    2710:	bd10      	pop	{r4, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	20000014 	.word	0x20000014

00002718 <memcpy>:
    2718:	2300      	movs	r3, #0
    271a:	b510      	push	{r4, lr}
    271c:	429a      	cmp	r2, r3
    271e:	d100      	bne.n	2722 <memcpy+0xa>
    2720:	bd10      	pop	{r4, pc}
    2722:	5ccc      	ldrb	r4, [r1, r3]
    2724:	54c4      	strb	r4, [r0, r3]
    2726:	3301      	adds	r3, #1
    2728:	e7f8      	b.n	271c <memcpy+0x4>

0000272a <memset>:
    272a:	0003      	movs	r3, r0
    272c:	1882      	adds	r2, r0, r2
    272e:	4293      	cmp	r3, r2
    2730:	d100      	bne.n	2734 <memset+0xa>
    2732:	4770      	bx	lr
    2734:	7019      	strb	r1, [r3, #0]
    2736:	3301      	adds	r3, #1
    2738:	e7f9      	b.n	272e <memset+0x4>

0000273a <_calloc_r>:
    273a:	434a      	muls	r2, r1
    273c:	b570      	push	{r4, r5, r6, lr}
    273e:	0011      	movs	r1, r2
    2740:	0015      	movs	r5, r2
    2742:	f000 f853 	bl	27ec <_malloc_r>
    2746:	1e04      	subs	r4, r0, #0
    2748:	d003      	beq.n	2752 <_calloc_r+0x18>
    274a:	002a      	movs	r2, r5
    274c:	2100      	movs	r1, #0
    274e:	f7ff ffec 	bl	272a <memset>
    2752:	0020      	movs	r0, r4
    2754:	bd70      	pop	{r4, r5, r6, pc}
    2756:	Address 0x00002756 is out of bounds.


00002758 <_free_r>:
    2758:	b570      	push	{r4, r5, r6, lr}
    275a:	0005      	movs	r5, r0
    275c:	2900      	cmp	r1, #0
    275e:	d010      	beq.n	2782 <_free_r+0x2a>
    2760:	1f0c      	subs	r4, r1, #4
    2762:	6823      	ldr	r3, [r4, #0]
    2764:	2b00      	cmp	r3, #0
    2766:	da00      	bge.n	276a <_free_r+0x12>
    2768:	18e4      	adds	r4, r4, r3
    276a:	0028      	movs	r0, r5
    276c:	f000 fa88 	bl	2c80 <__malloc_lock>
    2770:	4a1d      	ldr	r2, [pc, #116]	; (27e8 <_free_r+0x90>)
    2772:	6813      	ldr	r3, [r2, #0]
    2774:	2b00      	cmp	r3, #0
    2776:	d105      	bne.n	2784 <_free_r+0x2c>
    2778:	6063      	str	r3, [r4, #4]
    277a:	6014      	str	r4, [r2, #0]
    277c:	0028      	movs	r0, r5
    277e:	f000 fa87 	bl	2c90 <__malloc_unlock>
    2782:	bd70      	pop	{r4, r5, r6, pc}
    2784:	42a3      	cmp	r3, r4
    2786:	d908      	bls.n	279a <_free_r+0x42>
    2788:	6821      	ldr	r1, [r4, #0]
    278a:	1860      	adds	r0, r4, r1
    278c:	4283      	cmp	r3, r0
    278e:	d1f3      	bne.n	2778 <_free_r+0x20>
    2790:	6818      	ldr	r0, [r3, #0]
    2792:	685b      	ldr	r3, [r3, #4]
    2794:	1841      	adds	r1, r0, r1
    2796:	6021      	str	r1, [r4, #0]
    2798:	e7ee      	b.n	2778 <_free_r+0x20>
    279a:	001a      	movs	r2, r3
    279c:	685b      	ldr	r3, [r3, #4]
    279e:	2b00      	cmp	r3, #0
    27a0:	d001      	beq.n	27a6 <_free_r+0x4e>
    27a2:	42a3      	cmp	r3, r4
    27a4:	d9f9      	bls.n	279a <_free_r+0x42>
    27a6:	6811      	ldr	r1, [r2, #0]
    27a8:	1850      	adds	r0, r2, r1
    27aa:	42a0      	cmp	r0, r4
    27ac:	d10b      	bne.n	27c6 <_free_r+0x6e>
    27ae:	6820      	ldr	r0, [r4, #0]
    27b0:	1809      	adds	r1, r1, r0
    27b2:	1850      	adds	r0, r2, r1
    27b4:	6011      	str	r1, [r2, #0]
    27b6:	4283      	cmp	r3, r0
    27b8:	d1e0      	bne.n	277c <_free_r+0x24>
    27ba:	6818      	ldr	r0, [r3, #0]
    27bc:	685b      	ldr	r3, [r3, #4]
    27be:	1841      	adds	r1, r0, r1
    27c0:	6011      	str	r1, [r2, #0]
    27c2:	6053      	str	r3, [r2, #4]
    27c4:	e7da      	b.n	277c <_free_r+0x24>
    27c6:	42a0      	cmp	r0, r4
    27c8:	d902      	bls.n	27d0 <_free_r+0x78>
    27ca:	230c      	movs	r3, #12
    27cc:	602b      	str	r3, [r5, #0]
    27ce:	e7d5      	b.n	277c <_free_r+0x24>
    27d0:	6821      	ldr	r1, [r4, #0]
    27d2:	1860      	adds	r0, r4, r1
    27d4:	4283      	cmp	r3, r0
    27d6:	d103      	bne.n	27e0 <_free_r+0x88>
    27d8:	6818      	ldr	r0, [r3, #0]
    27da:	685b      	ldr	r3, [r3, #4]
    27dc:	1841      	adds	r1, r0, r1
    27de:	6021      	str	r1, [r4, #0]
    27e0:	6063      	str	r3, [r4, #4]
    27e2:	6054      	str	r4, [r2, #4]
    27e4:	e7ca      	b.n	277c <_free_r+0x24>
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	2000050c 	.word	0x2000050c

000027ec <_malloc_r>:
    27ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27ee:	2303      	movs	r3, #3
    27f0:	1ccd      	adds	r5, r1, #3
    27f2:	439d      	bics	r5, r3
    27f4:	3508      	adds	r5, #8
    27f6:	0006      	movs	r6, r0
    27f8:	2d0c      	cmp	r5, #12
    27fa:	d21f      	bcs.n	283c <_malloc_r+0x50>
    27fc:	250c      	movs	r5, #12
    27fe:	42a9      	cmp	r1, r5
    2800:	d81e      	bhi.n	2840 <_malloc_r+0x54>
    2802:	0030      	movs	r0, r6
    2804:	f000 fa3c 	bl	2c80 <__malloc_lock>
    2808:	4925      	ldr	r1, [pc, #148]	; (28a0 <_malloc_r+0xb4>)
    280a:	680a      	ldr	r2, [r1, #0]
    280c:	0014      	movs	r4, r2
    280e:	2c00      	cmp	r4, #0
    2810:	d11a      	bne.n	2848 <_malloc_r+0x5c>
    2812:	4f24      	ldr	r7, [pc, #144]	; (28a4 <_malloc_r+0xb8>)
    2814:	683b      	ldr	r3, [r7, #0]
    2816:	2b00      	cmp	r3, #0
    2818:	d104      	bne.n	2824 <_malloc_r+0x38>
    281a:	0021      	movs	r1, r4
    281c:	0030      	movs	r0, r6
    281e:	f000 f84d 	bl	28bc <_sbrk_r>
    2822:	6038      	str	r0, [r7, #0]
    2824:	0029      	movs	r1, r5
    2826:	0030      	movs	r0, r6
    2828:	f000 f848 	bl	28bc <_sbrk_r>
    282c:	1c43      	adds	r3, r0, #1
    282e:	d12b      	bne.n	2888 <_malloc_r+0x9c>
    2830:	230c      	movs	r3, #12
    2832:	0030      	movs	r0, r6
    2834:	6033      	str	r3, [r6, #0]
    2836:	f000 fa2b 	bl	2c90 <__malloc_unlock>
    283a:	e003      	b.n	2844 <_malloc_r+0x58>
    283c:	2d00      	cmp	r5, #0
    283e:	dade      	bge.n	27fe <_malloc_r+0x12>
    2840:	230c      	movs	r3, #12
    2842:	6033      	str	r3, [r6, #0]
    2844:	2000      	movs	r0, #0
    2846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2848:	6823      	ldr	r3, [r4, #0]
    284a:	1b5b      	subs	r3, r3, r5
    284c:	d419      	bmi.n	2882 <_malloc_r+0x96>
    284e:	2b0b      	cmp	r3, #11
    2850:	d903      	bls.n	285a <_malloc_r+0x6e>
    2852:	6023      	str	r3, [r4, #0]
    2854:	18e4      	adds	r4, r4, r3
    2856:	6025      	str	r5, [r4, #0]
    2858:	e003      	b.n	2862 <_malloc_r+0x76>
    285a:	6863      	ldr	r3, [r4, #4]
    285c:	42a2      	cmp	r2, r4
    285e:	d10e      	bne.n	287e <_malloc_r+0x92>
    2860:	600b      	str	r3, [r1, #0]
    2862:	0030      	movs	r0, r6
    2864:	f000 fa14 	bl	2c90 <__malloc_unlock>
    2868:	0020      	movs	r0, r4
    286a:	2207      	movs	r2, #7
    286c:	300b      	adds	r0, #11
    286e:	1d23      	adds	r3, r4, #4
    2870:	4390      	bics	r0, r2
    2872:	1ac2      	subs	r2, r0, r3
    2874:	4298      	cmp	r0, r3
    2876:	d0e6      	beq.n	2846 <_malloc_r+0x5a>
    2878:	1a1b      	subs	r3, r3, r0
    287a:	50a3      	str	r3, [r4, r2]
    287c:	e7e3      	b.n	2846 <_malloc_r+0x5a>
    287e:	6053      	str	r3, [r2, #4]
    2880:	e7ef      	b.n	2862 <_malloc_r+0x76>
    2882:	0022      	movs	r2, r4
    2884:	6864      	ldr	r4, [r4, #4]
    2886:	e7c2      	b.n	280e <_malloc_r+0x22>
    2888:	2303      	movs	r3, #3
    288a:	1cc4      	adds	r4, r0, #3
    288c:	439c      	bics	r4, r3
    288e:	42a0      	cmp	r0, r4
    2890:	d0e1      	beq.n	2856 <_malloc_r+0x6a>
    2892:	1a21      	subs	r1, r4, r0
    2894:	0030      	movs	r0, r6
    2896:	f000 f811 	bl	28bc <_sbrk_r>
    289a:	1c43      	adds	r3, r0, #1
    289c:	d1db      	bne.n	2856 <_malloc_r+0x6a>
    289e:	e7c7      	b.n	2830 <_malloc_r+0x44>
    28a0:	2000050c 	.word	0x2000050c
    28a4:	20000510 	.word	0x20000510

000028a8 <realloc>:
    28a8:	b510      	push	{r4, lr}
    28aa:	4b03      	ldr	r3, [pc, #12]	; (28b8 <realloc+0x10>)
    28ac:	000a      	movs	r2, r1
    28ae:	0001      	movs	r1, r0
    28b0:	6818      	ldr	r0, [r3, #0]
    28b2:	f000 f9f5 	bl	2ca0 <_realloc_r>
    28b6:	bd10      	pop	{r4, pc}
    28b8:	20000014 	.word	0x20000014

000028bc <_sbrk_r>:
    28bc:	2300      	movs	r3, #0
    28be:	b570      	push	{r4, r5, r6, lr}
    28c0:	4d06      	ldr	r5, [pc, #24]	; (28dc <_sbrk_r+0x20>)
    28c2:	0004      	movs	r4, r0
    28c4:	0008      	movs	r0, r1
    28c6:	602b      	str	r3, [r5, #0]
    28c8:	f7ff fe02 	bl	24d0 <_sbrk>
    28cc:	1c43      	adds	r3, r0, #1
    28ce:	d103      	bne.n	28d8 <_sbrk_r+0x1c>
    28d0:	682b      	ldr	r3, [r5, #0]
    28d2:	2b00      	cmp	r3, #0
    28d4:	d000      	beq.n	28d8 <_sbrk_r+0x1c>
    28d6:	6023      	str	r3, [r4, #0]
    28d8:	bd70      	pop	{r4, r5, r6, pc}
    28da:	46c0      	nop			; (mov r8, r8)
    28dc:	20000520 	.word	0x20000520

000028e0 <sniprintf>:
    28e0:	b40c      	push	{r2, r3}
    28e2:	b530      	push	{r4, r5, lr}
    28e4:	4b17      	ldr	r3, [pc, #92]	; (2944 <sniprintf+0x64>)
    28e6:	000c      	movs	r4, r1
    28e8:	681d      	ldr	r5, [r3, #0]
    28ea:	b09d      	sub	sp, #116	; 0x74
    28ec:	2900      	cmp	r1, #0
    28ee:	da08      	bge.n	2902 <sniprintf+0x22>
    28f0:	238b      	movs	r3, #139	; 0x8b
    28f2:	2001      	movs	r0, #1
    28f4:	602b      	str	r3, [r5, #0]
    28f6:	4240      	negs	r0, r0
    28f8:	b01d      	add	sp, #116	; 0x74
    28fa:	bc30      	pop	{r4, r5}
    28fc:	bc08      	pop	{r3}
    28fe:	b002      	add	sp, #8
    2900:	4718      	bx	r3
    2902:	2382      	movs	r3, #130	; 0x82
    2904:	466a      	mov	r2, sp
    2906:	009b      	lsls	r3, r3, #2
    2908:	8293      	strh	r3, [r2, #20]
    290a:	2300      	movs	r3, #0
    290c:	9002      	str	r0, [sp, #8]
    290e:	9006      	str	r0, [sp, #24]
    2910:	4299      	cmp	r1, r3
    2912:	d000      	beq.n	2916 <sniprintf+0x36>
    2914:	1e4b      	subs	r3, r1, #1
    2916:	9304      	str	r3, [sp, #16]
    2918:	9307      	str	r3, [sp, #28]
    291a:	2301      	movs	r3, #1
    291c:	466a      	mov	r2, sp
    291e:	425b      	negs	r3, r3
    2920:	82d3      	strh	r3, [r2, #22]
    2922:	0028      	movs	r0, r5
    2924:	ab21      	add	r3, sp, #132	; 0x84
    2926:	9a20      	ldr	r2, [sp, #128]	; 0x80
    2928:	a902      	add	r1, sp, #8
    292a:	9301      	str	r3, [sp, #4]
    292c:	f000 fa40 	bl	2db0 <_svfiprintf_r>
    2930:	1c43      	adds	r3, r0, #1
    2932:	da01      	bge.n	2938 <sniprintf+0x58>
    2934:	238b      	movs	r3, #139	; 0x8b
    2936:	602b      	str	r3, [r5, #0]
    2938:	2c00      	cmp	r4, #0
    293a:	d0dd      	beq.n	28f8 <sniprintf+0x18>
    293c:	2300      	movs	r3, #0
    293e:	9a02      	ldr	r2, [sp, #8]
    2940:	7013      	strb	r3, [r2, #0]
    2942:	e7d9      	b.n	28f8 <sniprintf+0x18>
    2944:	20000014 	.word	0x20000014

00002948 <strcasecmp>:
    2948:	b5f0      	push	{r4, r5, r6, r7, lr}
    294a:	0005      	movs	r5, r0
    294c:	2400      	movs	r4, #0
    294e:	2703      	movs	r7, #3
    2950:	4e09      	ldr	r6, [pc, #36]	; (2978 <strcasecmp+0x30>)
    2952:	5d2a      	ldrb	r2, [r5, r4]
    2954:	5cb3      	ldrb	r3, [r6, r2]
    2956:	403b      	ands	r3, r7
    2958:	2b01      	cmp	r3, #1
    295a:	d100      	bne.n	295e <strcasecmp+0x16>
    295c:	3220      	adds	r2, #32
    295e:	5d0b      	ldrb	r3, [r1, r4]
    2960:	5cf0      	ldrb	r0, [r6, r3]
    2962:	4038      	ands	r0, r7
    2964:	2801      	cmp	r0, #1
    2966:	d100      	bne.n	296a <strcasecmp+0x22>
    2968:	3320      	adds	r3, #32
    296a:	1ad0      	subs	r0, r2, r3
    296c:	429a      	cmp	r2, r3
    296e:	d102      	bne.n	2976 <strcasecmp+0x2e>
    2970:	3401      	adds	r4, #1
    2972:	2b00      	cmp	r3, #0
    2974:	d1ed      	bne.n	2952 <strcasecmp+0xa>
    2976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2978:	0000367c 	.word	0x0000367c

0000297c <strchr>:
    297c:	b2c9      	uxtb	r1, r1
    297e:	7803      	ldrb	r3, [r0, #0]
    2980:	2b00      	cmp	r3, #0
    2982:	d004      	beq.n	298e <strchr+0x12>
    2984:	428b      	cmp	r3, r1
    2986:	d100      	bne.n	298a <strchr+0xe>
    2988:	4770      	bx	lr
    298a:	3001      	adds	r0, #1
    298c:	e7f7      	b.n	297e <strchr+0x2>
    298e:	424b      	negs	r3, r1
    2990:	4159      	adcs	r1, r3
    2992:	4249      	negs	r1, r1
    2994:	4008      	ands	r0, r1
    2996:	e7f7      	b.n	2988 <strchr+0xc>

00002998 <strcmp>:
    2998:	7802      	ldrb	r2, [r0, #0]
    299a:	780b      	ldrb	r3, [r1, #0]
    299c:	2a00      	cmp	r2, #0
    299e:	d003      	beq.n	29a8 <strcmp+0x10>
    29a0:	3001      	adds	r0, #1
    29a2:	3101      	adds	r1, #1
    29a4:	429a      	cmp	r2, r3
    29a6:	d0f7      	beq.n	2998 <strcmp>
    29a8:	1ad0      	subs	r0, r2, r3
    29aa:	4770      	bx	lr

000029ac <strcpy>:
    29ac:	0003      	movs	r3, r0
    29ae:	780a      	ldrb	r2, [r1, #0]
    29b0:	3101      	adds	r1, #1
    29b2:	701a      	strb	r2, [r3, #0]
    29b4:	3301      	adds	r3, #1
    29b6:	2a00      	cmp	r2, #0
    29b8:	d1f9      	bne.n	29ae <strcpy+0x2>
    29ba:	4770      	bx	lr

000029bc <strlen>:
    29bc:	2300      	movs	r3, #0
    29be:	5cc2      	ldrb	r2, [r0, r3]
    29c0:	3301      	adds	r3, #1
    29c2:	2a00      	cmp	r2, #0
    29c4:	d1fb      	bne.n	29be <strlen+0x2>
    29c6:	1e58      	subs	r0, r3, #1
    29c8:	4770      	bx	lr

000029ca <strncmp>:
    29ca:	b530      	push	{r4, r5, lr}
    29cc:	0005      	movs	r5, r0
    29ce:	1e10      	subs	r0, r2, #0
    29d0:	d00b      	beq.n	29ea <strncmp+0x20>
    29d2:	2400      	movs	r4, #0
    29d4:	3a01      	subs	r2, #1
    29d6:	5d2b      	ldrb	r3, [r5, r4]
    29d8:	5d08      	ldrb	r0, [r1, r4]
    29da:	4283      	cmp	r3, r0
    29dc:	d104      	bne.n	29e8 <strncmp+0x1e>
    29de:	4294      	cmp	r4, r2
    29e0:	d002      	beq.n	29e8 <strncmp+0x1e>
    29e2:	3401      	adds	r4, #1
    29e4:	2b00      	cmp	r3, #0
    29e6:	d1f6      	bne.n	29d6 <strncmp+0xc>
    29e8:	1a18      	subs	r0, r3, r0
    29ea:	bd30      	pop	{r4, r5, pc}

000029ec <strncpy>:
    29ec:	0003      	movs	r3, r0
    29ee:	b530      	push	{r4, r5, lr}
    29f0:	001d      	movs	r5, r3
    29f2:	2a00      	cmp	r2, #0
    29f4:	d006      	beq.n	2a04 <strncpy+0x18>
    29f6:	780c      	ldrb	r4, [r1, #0]
    29f8:	3a01      	subs	r2, #1
    29fa:	3301      	adds	r3, #1
    29fc:	702c      	strb	r4, [r5, #0]
    29fe:	3101      	adds	r1, #1
    2a00:	2c00      	cmp	r4, #0
    2a02:	d1f5      	bne.n	29f0 <strncpy+0x4>
    2a04:	2100      	movs	r1, #0
    2a06:	189a      	adds	r2, r3, r2
    2a08:	4293      	cmp	r3, r2
    2a0a:	d100      	bne.n	2a0e <strncpy+0x22>
    2a0c:	bd30      	pop	{r4, r5, pc}
    2a0e:	7019      	strb	r1, [r3, #0]
    2a10:	3301      	adds	r3, #1
    2a12:	e7f9      	b.n	2a08 <strncpy+0x1c>

00002a14 <strstr>:
    2a14:	780a      	ldrb	r2, [r1, #0]
    2a16:	b530      	push	{r4, r5, lr}
    2a18:	2a00      	cmp	r2, #0
    2a1a:	d10c      	bne.n	2a36 <strstr+0x22>
    2a1c:	bd30      	pop	{r4, r5, pc}
    2a1e:	429a      	cmp	r2, r3
    2a20:	d108      	bne.n	2a34 <strstr+0x20>
    2a22:	2301      	movs	r3, #1
    2a24:	5ccc      	ldrb	r4, [r1, r3]
    2a26:	2c00      	cmp	r4, #0
    2a28:	d0f8      	beq.n	2a1c <strstr+0x8>
    2a2a:	5cc5      	ldrb	r5, [r0, r3]
    2a2c:	42a5      	cmp	r5, r4
    2a2e:	d101      	bne.n	2a34 <strstr+0x20>
    2a30:	3301      	adds	r3, #1
    2a32:	e7f7      	b.n	2a24 <strstr+0x10>
    2a34:	3001      	adds	r0, #1
    2a36:	7803      	ldrb	r3, [r0, #0]
    2a38:	2b00      	cmp	r3, #0
    2a3a:	d1f0      	bne.n	2a1e <strstr+0xa>
    2a3c:	0018      	movs	r0, r3
    2a3e:	e7ed      	b.n	2a1c <strstr+0x8>

00002a40 <strtok>:
    2a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a42:	4b12      	ldr	r3, [pc, #72]	; (2a8c <strtok+0x4c>)
    2a44:	0005      	movs	r5, r0
    2a46:	681f      	ldr	r7, [r3, #0]
    2a48:	000e      	movs	r6, r1
    2a4a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
    2a4c:	2c00      	cmp	r4, #0
    2a4e:	d116      	bne.n	2a7e <strtok+0x3e>
    2a50:	2050      	movs	r0, #80	; 0x50
    2a52:	f7ff fe4d 	bl	26f0 <malloc>
    2a56:	65b8      	str	r0, [r7, #88]	; 0x58
    2a58:	6004      	str	r4, [r0, #0]
    2a5a:	6044      	str	r4, [r0, #4]
    2a5c:	6084      	str	r4, [r0, #8]
    2a5e:	60c4      	str	r4, [r0, #12]
    2a60:	6104      	str	r4, [r0, #16]
    2a62:	6144      	str	r4, [r0, #20]
    2a64:	6184      	str	r4, [r0, #24]
    2a66:	6284      	str	r4, [r0, #40]	; 0x28
    2a68:	62c4      	str	r4, [r0, #44]	; 0x2c
    2a6a:	6304      	str	r4, [r0, #48]	; 0x30
    2a6c:	6344      	str	r4, [r0, #52]	; 0x34
    2a6e:	6384      	str	r4, [r0, #56]	; 0x38
    2a70:	63c4      	str	r4, [r0, #60]	; 0x3c
    2a72:	6404      	str	r4, [r0, #64]	; 0x40
    2a74:	6444      	str	r4, [r0, #68]	; 0x44
    2a76:	6484      	str	r4, [r0, #72]	; 0x48
    2a78:	64c4      	str	r4, [r0, #76]	; 0x4c
    2a7a:	7704      	strb	r4, [r0, #28]
    2a7c:	6244      	str	r4, [r0, #36]	; 0x24
    2a7e:	0031      	movs	r1, r6
    2a80:	0028      	movs	r0, r5
    2a82:	6dba      	ldr	r2, [r7, #88]	; 0x58
    2a84:	2301      	movs	r3, #1
    2a86:	f000 f803 	bl	2a90 <__strtok_r>
    2a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a8c:	20000014 	.word	0x20000014

00002a90 <__strtok_r>:
    2a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a92:	2800      	cmp	r0, #0
    2a94:	d102      	bne.n	2a9c <__strtok_r+0xc>
    2a96:	6810      	ldr	r0, [r2, #0]
    2a98:	2800      	cmp	r0, #0
    2a9a:	d013      	beq.n	2ac4 <__strtok_r+0x34>
    2a9c:	0004      	movs	r4, r0
    2a9e:	0020      	movs	r0, r4
    2aa0:	000e      	movs	r6, r1
    2aa2:	7805      	ldrb	r5, [r0, #0]
    2aa4:	3401      	adds	r4, #1
    2aa6:	7837      	ldrb	r7, [r6, #0]
    2aa8:	2f00      	cmp	r7, #0
    2aaa:	d104      	bne.n	2ab6 <__strtok_r+0x26>
    2aac:	2d00      	cmp	r5, #0
    2aae:	d10f      	bne.n	2ad0 <__strtok_r+0x40>
    2ab0:	0028      	movs	r0, r5
    2ab2:	6015      	str	r5, [r2, #0]
    2ab4:	e006      	b.n	2ac4 <__strtok_r+0x34>
    2ab6:	3601      	adds	r6, #1
    2ab8:	42bd      	cmp	r5, r7
    2aba:	d1f4      	bne.n	2aa6 <__strtok_r+0x16>
    2abc:	2b00      	cmp	r3, #0
    2abe:	d1ee      	bne.n	2a9e <__strtok_r+0xe>
    2ac0:	6014      	str	r4, [r2, #0]
    2ac2:	7003      	strb	r3, [r0, #0]
    2ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ac6:	002f      	movs	r7, r5
    2ac8:	e00f      	b.n	2aea <__strtok_r+0x5a>
    2aca:	3301      	adds	r3, #1
    2acc:	2e00      	cmp	r6, #0
    2ace:	d104      	bne.n	2ada <__strtok_r+0x4a>
    2ad0:	0023      	movs	r3, r4
    2ad2:	3401      	adds	r4, #1
    2ad4:	781d      	ldrb	r5, [r3, #0]
    2ad6:	0027      	movs	r7, r4
    2ad8:	000b      	movs	r3, r1
    2ada:	781e      	ldrb	r6, [r3, #0]
    2adc:	42b5      	cmp	r5, r6
    2ade:	d1f4      	bne.n	2aca <__strtok_r+0x3a>
    2ae0:	2d00      	cmp	r5, #0
    2ae2:	d0f0      	beq.n	2ac6 <__strtok_r+0x36>
    2ae4:	2300      	movs	r3, #0
    2ae6:	3c01      	subs	r4, #1
    2ae8:	7023      	strb	r3, [r4, #0]
    2aea:	6017      	str	r7, [r2, #0]
    2aec:	e7ea      	b.n	2ac4 <__strtok_r+0x34>
    2aee:	Address 0x00002aee is out of bounds.


00002af0 <_strtol_l.isra.0>:
    2af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2af2:	001e      	movs	r6, r3
    2af4:	4b3d      	ldr	r3, [pc, #244]	; (2bec <_strtol_l.isra.0+0xfc>)
    2af6:	b087      	sub	sp, #28
    2af8:	9005      	str	r0, [sp, #20]
    2afa:	9202      	str	r2, [sp, #8]
    2afc:	0008      	movs	r0, r1
    2afe:	469c      	mov	ip, r3
    2b00:	2208      	movs	r2, #8
    2b02:	9101      	str	r1, [sp, #4]
    2b04:	0003      	movs	r3, r0
    2b06:	4661      	mov	r1, ip
    2b08:	781c      	ldrb	r4, [r3, #0]
    2b0a:	1c45      	adds	r5, r0, #1
    2b0c:	5d09      	ldrb	r1, [r1, r4]
    2b0e:	0028      	movs	r0, r5
    2b10:	000f      	movs	r7, r1
    2b12:	4017      	ands	r7, r2
    2b14:	4211      	tst	r1, r2
    2b16:	d1f5      	bne.n	2b04 <_strtol_l.isra.0+0x14>
    2b18:	2c2d      	cmp	r4, #45	; 0x2d
    2b1a:	d133      	bne.n	2b84 <_strtol_l.isra.0+0x94>
    2b1c:	2701      	movs	r7, #1
    2b1e:	782c      	ldrb	r4, [r5, #0]
    2b20:	1c9d      	adds	r5, r3, #2
    2b22:	2e00      	cmp	r6, #0
    2b24:	d05d      	beq.n	2be2 <_strtol_l.isra.0+0xf2>
    2b26:	2e10      	cmp	r6, #16
    2b28:	d109      	bne.n	2b3e <_strtol_l.isra.0+0x4e>
    2b2a:	2c30      	cmp	r4, #48	; 0x30
    2b2c:	d107      	bne.n	2b3e <_strtol_l.isra.0+0x4e>
    2b2e:	2220      	movs	r2, #32
    2b30:	782b      	ldrb	r3, [r5, #0]
    2b32:	4393      	bics	r3, r2
    2b34:	2b58      	cmp	r3, #88	; 0x58
    2b36:	d14f      	bne.n	2bd8 <_strtol_l.isra.0+0xe8>
    2b38:	2610      	movs	r6, #16
    2b3a:	786c      	ldrb	r4, [r5, #1]
    2b3c:	3502      	adds	r5, #2
    2b3e:	4b2c      	ldr	r3, [pc, #176]	; (2bf0 <_strtol_l.isra.0+0x100>)
    2b40:	0031      	movs	r1, r6
    2b42:	18fb      	adds	r3, r7, r3
    2b44:	0018      	movs	r0, r3
    2b46:	9303      	str	r3, [sp, #12]
    2b48:	f7ff fd62 	bl	2610 <__aeabi_uidivmod>
    2b4c:	2300      	movs	r3, #0
    2b4e:	2201      	movs	r2, #1
    2b50:	4684      	mov	ip, r0
    2b52:	0018      	movs	r0, r3
    2b54:	9104      	str	r1, [sp, #16]
    2b56:	4252      	negs	r2, r2
    2b58:	0021      	movs	r1, r4
    2b5a:	3930      	subs	r1, #48	; 0x30
    2b5c:	2909      	cmp	r1, #9
    2b5e:	d816      	bhi.n	2b8e <_strtol_l.isra.0+0x9e>
    2b60:	000c      	movs	r4, r1
    2b62:	42a6      	cmp	r6, r4
    2b64:	dd1f      	ble.n	2ba6 <_strtol_l.isra.0+0xb6>
    2b66:	1c59      	adds	r1, r3, #1
    2b68:	d009      	beq.n	2b7e <_strtol_l.isra.0+0x8e>
    2b6a:	0013      	movs	r3, r2
    2b6c:	4584      	cmp	ip, r0
    2b6e:	d306      	bcc.n	2b7e <_strtol_l.isra.0+0x8e>
    2b70:	d102      	bne.n	2b78 <_strtol_l.isra.0+0x88>
    2b72:	9904      	ldr	r1, [sp, #16]
    2b74:	42a1      	cmp	r1, r4
    2b76:	db02      	blt.n	2b7e <_strtol_l.isra.0+0x8e>
    2b78:	2301      	movs	r3, #1
    2b7a:	4370      	muls	r0, r6
    2b7c:	1820      	adds	r0, r4, r0
    2b7e:	782c      	ldrb	r4, [r5, #0]
    2b80:	3501      	adds	r5, #1
    2b82:	e7e9      	b.n	2b58 <_strtol_l.isra.0+0x68>
    2b84:	2c2b      	cmp	r4, #43	; 0x2b
    2b86:	d1cc      	bne.n	2b22 <_strtol_l.isra.0+0x32>
    2b88:	782c      	ldrb	r4, [r5, #0]
    2b8a:	1c9d      	adds	r5, r3, #2
    2b8c:	e7c9      	b.n	2b22 <_strtol_l.isra.0+0x32>
    2b8e:	0021      	movs	r1, r4
    2b90:	3941      	subs	r1, #65	; 0x41
    2b92:	2919      	cmp	r1, #25
    2b94:	d801      	bhi.n	2b9a <_strtol_l.isra.0+0xaa>
    2b96:	3c37      	subs	r4, #55	; 0x37
    2b98:	e7e3      	b.n	2b62 <_strtol_l.isra.0+0x72>
    2b9a:	0021      	movs	r1, r4
    2b9c:	3961      	subs	r1, #97	; 0x61
    2b9e:	2919      	cmp	r1, #25
    2ba0:	d801      	bhi.n	2ba6 <_strtol_l.isra.0+0xb6>
    2ba2:	3c57      	subs	r4, #87	; 0x57
    2ba4:	e7dd      	b.n	2b62 <_strtol_l.isra.0+0x72>
    2ba6:	1c5a      	adds	r2, r3, #1
    2ba8:	d108      	bne.n	2bbc <_strtol_l.isra.0+0xcc>
    2baa:	9a05      	ldr	r2, [sp, #20]
    2bac:	3323      	adds	r3, #35	; 0x23
    2bae:	6013      	str	r3, [r2, #0]
    2bb0:	9b02      	ldr	r3, [sp, #8]
    2bb2:	9803      	ldr	r0, [sp, #12]
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d109      	bne.n	2bcc <_strtol_l.isra.0+0xdc>
    2bb8:	b007      	add	sp, #28
    2bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bbc:	2f00      	cmp	r7, #0
    2bbe:	d000      	beq.n	2bc2 <_strtol_l.isra.0+0xd2>
    2bc0:	4240      	negs	r0, r0
    2bc2:	9a02      	ldr	r2, [sp, #8]
    2bc4:	2a00      	cmp	r2, #0
    2bc6:	d0f7      	beq.n	2bb8 <_strtol_l.isra.0+0xc8>
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d001      	beq.n	2bd0 <_strtol_l.isra.0+0xe0>
    2bcc:	1e6b      	subs	r3, r5, #1
    2bce:	9301      	str	r3, [sp, #4]
    2bd0:	9b02      	ldr	r3, [sp, #8]
    2bd2:	9a01      	ldr	r2, [sp, #4]
    2bd4:	601a      	str	r2, [r3, #0]
    2bd6:	e7ef      	b.n	2bb8 <_strtol_l.isra.0+0xc8>
    2bd8:	2430      	movs	r4, #48	; 0x30
    2bda:	2e00      	cmp	r6, #0
    2bdc:	d1af      	bne.n	2b3e <_strtol_l.isra.0+0x4e>
    2bde:	3608      	adds	r6, #8
    2be0:	e7ad      	b.n	2b3e <_strtol_l.isra.0+0x4e>
    2be2:	2c30      	cmp	r4, #48	; 0x30
    2be4:	d0a3      	beq.n	2b2e <_strtol_l.isra.0+0x3e>
    2be6:	260a      	movs	r6, #10
    2be8:	e7a9      	b.n	2b3e <_strtol_l.isra.0+0x4e>
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	0000367c 	.word	0x0000367c
    2bf0:	7fffffff 	.word	0x7fffffff

00002bf4 <strtol>:
    2bf4:	b510      	push	{r4, lr}
    2bf6:	0013      	movs	r3, r2
    2bf8:	000a      	movs	r2, r1
    2bfa:	0001      	movs	r1, r0
    2bfc:	4802      	ldr	r0, [pc, #8]	; (2c08 <strtol+0x14>)
    2bfe:	6800      	ldr	r0, [r0, #0]
    2c00:	f7ff ff76 	bl	2af0 <_strtol_l.isra.0>
    2c04:	bd10      	pop	{r4, pc}
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	20000014 	.word	0x20000014

00002c0c <_vsniprintf_r>:
    2c0c:	b530      	push	{r4, r5, lr}
    2c0e:	0014      	movs	r4, r2
    2c10:	0005      	movs	r5, r0
    2c12:	001a      	movs	r2, r3
    2c14:	b09b      	sub	sp, #108	; 0x6c
    2c16:	2c00      	cmp	r4, #0
    2c18:	da05      	bge.n	2c26 <_vsniprintf_r+0x1a>
    2c1a:	238b      	movs	r3, #139	; 0x8b
    2c1c:	6003      	str	r3, [r0, #0]
    2c1e:	2001      	movs	r0, #1
    2c20:	4240      	negs	r0, r0
    2c22:	b01b      	add	sp, #108	; 0x6c
    2c24:	bd30      	pop	{r4, r5, pc}
    2c26:	2382      	movs	r3, #130	; 0x82
    2c28:	4668      	mov	r0, sp
    2c2a:	009b      	lsls	r3, r3, #2
    2c2c:	8183      	strh	r3, [r0, #12]
    2c2e:	2300      	movs	r3, #0
    2c30:	9100      	str	r1, [sp, #0]
    2c32:	9104      	str	r1, [sp, #16]
    2c34:	429c      	cmp	r4, r3
    2c36:	d000      	beq.n	2c3a <_vsniprintf_r+0x2e>
    2c38:	1e63      	subs	r3, r4, #1
    2c3a:	9302      	str	r3, [sp, #8]
    2c3c:	9305      	str	r3, [sp, #20]
    2c3e:	2301      	movs	r3, #1
    2c40:	4669      	mov	r1, sp
    2c42:	425b      	negs	r3, r3
    2c44:	81cb      	strh	r3, [r1, #14]
    2c46:	0028      	movs	r0, r5
    2c48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2c4a:	f000 f8b1 	bl	2db0 <_svfiprintf_r>
    2c4e:	1c43      	adds	r3, r0, #1
    2c50:	da01      	bge.n	2c56 <_vsniprintf_r+0x4a>
    2c52:	238b      	movs	r3, #139	; 0x8b
    2c54:	602b      	str	r3, [r5, #0]
    2c56:	2c00      	cmp	r4, #0
    2c58:	d0e3      	beq.n	2c22 <_vsniprintf_r+0x16>
    2c5a:	2300      	movs	r3, #0
    2c5c:	9a00      	ldr	r2, [sp, #0]
    2c5e:	7013      	strb	r3, [r2, #0]
    2c60:	e7df      	b.n	2c22 <_vsniprintf_r+0x16>
    2c62:	Address 0x00002c62 is out of bounds.


00002c64 <vsniprintf>:
    2c64:	b507      	push	{r0, r1, r2, lr}
    2c66:	9300      	str	r3, [sp, #0]
    2c68:	0013      	movs	r3, r2
    2c6a:	000a      	movs	r2, r1
    2c6c:	0001      	movs	r1, r0
    2c6e:	4802      	ldr	r0, [pc, #8]	; (2c78 <vsniprintf+0x14>)
    2c70:	6800      	ldr	r0, [r0, #0]
    2c72:	f7ff ffcb 	bl	2c0c <_vsniprintf_r>
    2c76:	bd0e      	pop	{r1, r2, r3, pc}
    2c78:	20000014 	.word	0x20000014

00002c7c <__retarget_lock_acquire_recursive>:
    2c7c:	4770      	bx	lr

00002c7e <__retarget_lock_release_recursive>:
    2c7e:	4770      	bx	lr

00002c80 <__malloc_lock>:
    2c80:	b510      	push	{r4, lr}
    2c82:	4802      	ldr	r0, [pc, #8]	; (2c8c <__malloc_lock+0xc>)
    2c84:	f7ff fffa 	bl	2c7c <__retarget_lock_acquire_recursive>
    2c88:	bd10      	pop	{r4, pc}
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	20000518 	.word	0x20000518

00002c90 <__malloc_unlock>:
    2c90:	b510      	push	{r4, lr}
    2c92:	4802      	ldr	r0, [pc, #8]	; (2c9c <__malloc_unlock+0xc>)
    2c94:	f7ff fff3 	bl	2c7e <__retarget_lock_release_recursive>
    2c98:	bd10      	pop	{r4, pc}
    2c9a:	46c0      	nop			; (mov r8, r8)
    2c9c:	20000518 	.word	0x20000518

00002ca0 <_realloc_r>:
    2ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ca2:	0007      	movs	r7, r0
    2ca4:	000d      	movs	r5, r1
    2ca6:	0016      	movs	r6, r2
    2ca8:	2900      	cmp	r1, #0
    2caa:	d105      	bne.n	2cb8 <_realloc_r+0x18>
    2cac:	0011      	movs	r1, r2
    2cae:	f7ff fd9d 	bl	27ec <_malloc_r>
    2cb2:	0004      	movs	r4, r0
    2cb4:	0020      	movs	r0, r4
    2cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cb8:	2a00      	cmp	r2, #0
    2cba:	d103      	bne.n	2cc4 <_realloc_r+0x24>
    2cbc:	f7ff fd4c 	bl	2758 <_free_r>
    2cc0:	0034      	movs	r4, r6
    2cc2:	e7f7      	b.n	2cb4 <_realloc_r+0x14>
    2cc4:	f000 fb14 	bl	32f0 <_malloc_usable_size_r>
    2cc8:	002c      	movs	r4, r5
    2cca:	42b0      	cmp	r0, r6
    2ccc:	d2f2      	bcs.n	2cb4 <_realloc_r+0x14>
    2cce:	0031      	movs	r1, r6
    2cd0:	0038      	movs	r0, r7
    2cd2:	f7ff fd8b 	bl	27ec <_malloc_r>
    2cd6:	1e04      	subs	r4, r0, #0
    2cd8:	d0ec      	beq.n	2cb4 <_realloc_r+0x14>
    2cda:	0029      	movs	r1, r5
    2cdc:	0032      	movs	r2, r6
    2cde:	f7ff fd1b 	bl	2718 <memcpy>
    2ce2:	0029      	movs	r1, r5
    2ce4:	0038      	movs	r0, r7
    2ce6:	f7ff fd37 	bl	2758 <_free_r>
    2cea:	e7e3      	b.n	2cb4 <_realloc_r+0x14>

00002cec <__ssputs_r>:
    2cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cee:	688e      	ldr	r6, [r1, #8]
    2cf0:	b085      	sub	sp, #20
    2cf2:	0007      	movs	r7, r0
    2cf4:	000c      	movs	r4, r1
    2cf6:	9203      	str	r2, [sp, #12]
    2cf8:	9301      	str	r3, [sp, #4]
    2cfa:	429e      	cmp	r6, r3
    2cfc:	d83c      	bhi.n	2d78 <__ssputs_r+0x8c>
    2cfe:	2390      	movs	r3, #144	; 0x90
    2d00:	898a      	ldrh	r2, [r1, #12]
    2d02:	00db      	lsls	r3, r3, #3
    2d04:	421a      	tst	r2, r3
    2d06:	d034      	beq.n	2d72 <__ssputs_r+0x86>
    2d08:	2503      	movs	r5, #3
    2d0a:	6909      	ldr	r1, [r1, #16]
    2d0c:	6823      	ldr	r3, [r4, #0]
    2d0e:	1a5b      	subs	r3, r3, r1
    2d10:	9302      	str	r3, [sp, #8]
    2d12:	6963      	ldr	r3, [r4, #20]
    2d14:	9802      	ldr	r0, [sp, #8]
    2d16:	435d      	muls	r5, r3
    2d18:	0feb      	lsrs	r3, r5, #31
    2d1a:	195d      	adds	r5, r3, r5
    2d1c:	9b01      	ldr	r3, [sp, #4]
    2d1e:	106d      	asrs	r5, r5, #1
    2d20:	3301      	adds	r3, #1
    2d22:	181b      	adds	r3, r3, r0
    2d24:	42ab      	cmp	r3, r5
    2d26:	d900      	bls.n	2d2a <__ssputs_r+0x3e>
    2d28:	001d      	movs	r5, r3
    2d2a:	0553      	lsls	r3, r2, #21
    2d2c:	d532      	bpl.n	2d94 <__ssputs_r+0xa8>
    2d2e:	0029      	movs	r1, r5
    2d30:	0038      	movs	r0, r7
    2d32:	f7ff fd5b 	bl	27ec <_malloc_r>
    2d36:	1e06      	subs	r6, r0, #0
    2d38:	d109      	bne.n	2d4e <__ssputs_r+0x62>
    2d3a:	230c      	movs	r3, #12
    2d3c:	603b      	str	r3, [r7, #0]
    2d3e:	2340      	movs	r3, #64	; 0x40
    2d40:	2001      	movs	r0, #1
    2d42:	89a2      	ldrh	r2, [r4, #12]
    2d44:	4240      	negs	r0, r0
    2d46:	4313      	orrs	r3, r2
    2d48:	81a3      	strh	r3, [r4, #12]
    2d4a:	b005      	add	sp, #20
    2d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d4e:	9a02      	ldr	r2, [sp, #8]
    2d50:	6921      	ldr	r1, [r4, #16]
    2d52:	f7ff fce1 	bl	2718 <memcpy>
    2d56:	89a3      	ldrh	r3, [r4, #12]
    2d58:	4a14      	ldr	r2, [pc, #80]	; (2dac <__ssputs_r+0xc0>)
    2d5a:	401a      	ands	r2, r3
    2d5c:	2380      	movs	r3, #128	; 0x80
    2d5e:	4313      	orrs	r3, r2
    2d60:	81a3      	strh	r3, [r4, #12]
    2d62:	9b02      	ldr	r3, [sp, #8]
    2d64:	6126      	str	r6, [r4, #16]
    2d66:	18f6      	adds	r6, r6, r3
    2d68:	6026      	str	r6, [r4, #0]
    2d6a:	6165      	str	r5, [r4, #20]
    2d6c:	9e01      	ldr	r6, [sp, #4]
    2d6e:	1aed      	subs	r5, r5, r3
    2d70:	60a5      	str	r5, [r4, #8]
    2d72:	9b01      	ldr	r3, [sp, #4]
    2d74:	429e      	cmp	r6, r3
    2d76:	d900      	bls.n	2d7a <__ssputs_r+0x8e>
    2d78:	9e01      	ldr	r6, [sp, #4]
    2d7a:	0032      	movs	r2, r6
    2d7c:	9903      	ldr	r1, [sp, #12]
    2d7e:	6820      	ldr	r0, [r4, #0]
    2d80:	f000 faa3 	bl	32ca <memmove>
    2d84:	68a3      	ldr	r3, [r4, #8]
    2d86:	2000      	movs	r0, #0
    2d88:	1b9b      	subs	r3, r3, r6
    2d8a:	60a3      	str	r3, [r4, #8]
    2d8c:	6823      	ldr	r3, [r4, #0]
    2d8e:	199e      	adds	r6, r3, r6
    2d90:	6026      	str	r6, [r4, #0]
    2d92:	e7da      	b.n	2d4a <__ssputs_r+0x5e>
    2d94:	002a      	movs	r2, r5
    2d96:	0038      	movs	r0, r7
    2d98:	f7ff ff82 	bl	2ca0 <_realloc_r>
    2d9c:	1e06      	subs	r6, r0, #0
    2d9e:	d1e0      	bne.n	2d62 <__ssputs_r+0x76>
    2da0:	0038      	movs	r0, r7
    2da2:	6921      	ldr	r1, [r4, #16]
    2da4:	f7ff fcd8 	bl	2758 <_free_r>
    2da8:	e7c7      	b.n	2d3a <__ssputs_r+0x4e>
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	fffffb7f 	.word	0xfffffb7f

00002db0 <_svfiprintf_r>:
    2db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2db2:	b0a1      	sub	sp, #132	; 0x84
    2db4:	9003      	str	r0, [sp, #12]
    2db6:	001d      	movs	r5, r3
    2db8:	898b      	ldrh	r3, [r1, #12]
    2dba:	000f      	movs	r7, r1
    2dbc:	0016      	movs	r6, r2
    2dbe:	061b      	lsls	r3, r3, #24
    2dc0:	d511      	bpl.n	2de6 <_svfiprintf_r+0x36>
    2dc2:	690b      	ldr	r3, [r1, #16]
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	d10e      	bne.n	2de6 <_svfiprintf_r+0x36>
    2dc8:	2140      	movs	r1, #64	; 0x40
    2dca:	f7ff fd0f 	bl	27ec <_malloc_r>
    2dce:	6038      	str	r0, [r7, #0]
    2dd0:	6138      	str	r0, [r7, #16]
    2dd2:	2800      	cmp	r0, #0
    2dd4:	d105      	bne.n	2de2 <_svfiprintf_r+0x32>
    2dd6:	230c      	movs	r3, #12
    2dd8:	9a03      	ldr	r2, [sp, #12]
    2dda:	3801      	subs	r0, #1
    2ddc:	6013      	str	r3, [r2, #0]
    2dde:	b021      	add	sp, #132	; 0x84
    2de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2de2:	2340      	movs	r3, #64	; 0x40
    2de4:	617b      	str	r3, [r7, #20]
    2de6:	2300      	movs	r3, #0
    2de8:	ac08      	add	r4, sp, #32
    2dea:	6163      	str	r3, [r4, #20]
    2dec:	3320      	adds	r3, #32
    2dee:	7663      	strb	r3, [r4, #25]
    2df0:	3310      	adds	r3, #16
    2df2:	76a3      	strb	r3, [r4, #26]
    2df4:	9507      	str	r5, [sp, #28]
    2df6:	0035      	movs	r5, r6
    2df8:	782b      	ldrb	r3, [r5, #0]
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d001      	beq.n	2e02 <_svfiprintf_r+0x52>
    2dfe:	2b25      	cmp	r3, #37	; 0x25
    2e00:	d147      	bne.n	2e92 <_svfiprintf_r+0xe2>
    2e02:	1bab      	subs	r3, r5, r6
    2e04:	9305      	str	r3, [sp, #20]
    2e06:	42b5      	cmp	r5, r6
    2e08:	d00c      	beq.n	2e24 <_svfiprintf_r+0x74>
    2e0a:	0032      	movs	r2, r6
    2e0c:	0039      	movs	r1, r7
    2e0e:	9803      	ldr	r0, [sp, #12]
    2e10:	f7ff ff6c 	bl	2cec <__ssputs_r>
    2e14:	1c43      	adds	r3, r0, #1
    2e16:	d100      	bne.n	2e1a <_svfiprintf_r+0x6a>
    2e18:	e0ae      	b.n	2f78 <_svfiprintf_r+0x1c8>
    2e1a:	6962      	ldr	r2, [r4, #20]
    2e1c:	9b05      	ldr	r3, [sp, #20]
    2e1e:	4694      	mov	ip, r2
    2e20:	4463      	add	r3, ip
    2e22:	6163      	str	r3, [r4, #20]
    2e24:	782b      	ldrb	r3, [r5, #0]
    2e26:	2b00      	cmp	r3, #0
    2e28:	d100      	bne.n	2e2c <_svfiprintf_r+0x7c>
    2e2a:	e0a5      	b.n	2f78 <_svfiprintf_r+0x1c8>
    2e2c:	2201      	movs	r2, #1
    2e2e:	2300      	movs	r3, #0
    2e30:	4252      	negs	r2, r2
    2e32:	6062      	str	r2, [r4, #4]
    2e34:	a904      	add	r1, sp, #16
    2e36:	3254      	adds	r2, #84	; 0x54
    2e38:	1852      	adds	r2, r2, r1
    2e3a:	1c6e      	adds	r6, r5, #1
    2e3c:	6023      	str	r3, [r4, #0]
    2e3e:	60e3      	str	r3, [r4, #12]
    2e40:	60a3      	str	r3, [r4, #8]
    2e42:	7013      	strb	r3, [r2, #0]
    2e44:	65a3      	str	r3, [r4, #88]	; 0x58
    2e46:	2205      	movs	r2, #5
    2e48:	7831      	ldrb	r1, [r6, #0]
    2e4a:	4854      	ldr	r0, [pc, #336]	; (2f9c <_svfiprintf_r+0x1ec>)
    2e4c:	f000 fa32 	bl	32b4 <memchr>
    2e50:	1c75      	adds	r5, r6, #1
    2e52:	2800      	cmp	r0, #0
    2e54:	d11f      	bne.n	2e96 <_svfiprintf_r+0xe6>
    2e56:	6822      	ldr	r2, [r4, #0]
    2e58:	06d3      	lsls	r3, r2, #27
    2e5a:	d504      	bpl.n	2e66 <_svfiprintf_r+0xb6>
    2e5c:	2353      	movs	r3, #83	; 0x53
    2e5e:	a904      	add	r1, sp, #16
    2e60:	185b      	adds	r3, r3, r1
    2e62:	2120      	movs	r1, #32
    2e64:	7019      	strb	r1, [r3, #0]
    2e66:	0713      	lsls	r3, r2, #28
    2e68:	d504      	bpl.n	2e74 <_svfiprintf_r+0xc4>
    2e6a:	2353      	movs	r3, #83	; 0x53
    2e6c:	a904      	add	r1, sp, #16
    2e6e:	185b      	adds	r3, r3, r1
    2e70:	212b      	movs	r1, #43	; 0x2b
    2e72:	7019      	strb	r1, [r3, #0]
    2e74:	7833      	ldrb	r3, [r6, #0]
    2e76:	2b2a      	cmp	r3, #42	; 0x2a
    2e78:	d016      	beq.n	2ea8 <_svfiprintf_r+0xf8>
    2e7a:	0035      	movs	r5, r6
    2e7c:	2100      	movs	r1, #0
    2e7e:	200a      	movs	r0, #10
    2e80:	68e3      	ldr	r3, [r4, #12]
    2e82:	782a      	ldrb	r2, [r5, #0]
    2e84:	1c6e      	adds	r6, r5, #1
    2e86:	3a30      	subs	r2, #48	; 0x30
    2e88:	2a09      	cmp	r2, #9
    2e8a:	d94e      	bls.n	2f2a <_svfiprintf_r+0x17a>
    2e8c:	2900      	cmp	r1, #0
    2e8e:	d111      	bne.n	2eb4 <_svfiprintf_r+0x104>
    2e90:	e017      	b.n	2ec2 <_svfiprintf_r+0x112>
    2e92:	3501      	adds	r5, #1
    2e94:	e7b0      	b.n	2df8 <_svfiprintf_r+0x48>
    2e96:	4b41      	ldr	r3, [pc, #260]	; (2f9c <_svfiprintf_r+0x1ec>)
    2e98:	6822      	ldr	r2, [r4, #0]
    2e9a:	1ac0      	subs	r0, r0, r3
    2e9c:	2301      	movs	r3, #1
    2e9e:	4083      	lsls	r3, r0
    2ea0:	4313      	orrs	r3, r2
    2ea2:	002e      	movs	r6, r5
    2ea4:	6023      	str	r3, [r4, #0]
    2ea6:	e7ce      	b.n	2e46 <_svfiprintf_r+0x96>
    2ea8:	9b07      	ldr	r3, [sp, #28]
    2eaa:	1d19      	adds	r1, r3, #4
    2eac:	681b      	ldr	r3, [r3, #0]
    2eae:	9107      	str	r1, [sp, #28]
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	db01      	blt.n	2eb8 <_svfiprintf_r+0x108>
    2eb4:	930b      	str	r3, [sp, #44]	; 0x2c
    2eb6:	e004      	b.n	2ec2 <_svfiprintf_r+0x112>
    2eb8:	425b      	negs	r3, r3
    2eba:	60e3      	str	r3, [r4, #12]
    2ebc:	2302      	movs	r3, #2
    2ebe:	4313      	orrs	r3, r2
    2ec0:	6023      	str	r3, [r4, #0]
    2ec2:	782b      	ldrb	r3, [r5, #0]
    2ec4:	2b2e      	cmp	r3, #46	; 0x2e
    2ec6:	d10a      	bne.n	2ede <_svfiprintf_r+0x12e>
    2ec8:	786b      	ldrb	r3, [r5, #1]
    2eca:	2b2a      	cmp	r3, #42	; 0x2a
    2ecc:	d135      	bne.n	2f3a <_svfiprintf_r+0x18a>
    2ece:	9b07      	ldr	r3, [sp, #28]
    2ed0:	3502      	adds	r5, #2
    2ed2:	1d1a      	adds	r2, r3, #4
    2ed4:	681b      	ldr	r3, [r3, #0]
    2ed6:	9207      	str	r2, [sp, #28]
    2ed8:	2b00      	cmp	r3, #0
    2eda:	db2b      	blt.n	2f34 <_svfiprintf_r+0x184>
    2edc:	9309      	str	r3, [sp, #36]	; 0x24
    2ede:	4e30      	ldr	r6, [pc, #192]	; (2fa0 <_svfiprintf_r+0x1f0>)
    2ee0:	2203      	movs	r2, #3
    2ee2:	0030      	movs	r0, r6
    2ee4:	7829      	ldrb	r1, [r5, #0]
    2ee6:	f000 f9e5 	bl	32b4 <memchr>
    2eea:	2800      	cmp	r0, #0
    2eec:	d006      	beq.n	2efc <_svfiprintf_r+0x14c>
    2eee:	2340      	movs	r3, #64	; 0x40
    2ef0:	1b80      	subs	r0, r0, r6
    2ef2:	4083      	lsls	r3, r0
    2ef4:	6822      	ldr	r2, [r4, #0]
    2ef6:	3501      	adds	r5, #1
    2ef8:	4313      	orrs	r3, r2
    2efa:	6023      	str	r3, [r4, #0]
    2efc:	7829      	ldrb	r1, [r5, #0]
    2efe:	2206      	movs	r2, #6
    2f00:	4828      	ldr	r0, [pc, #160]	; (2fa4 <_svfiprintf_r+0x1f4>)
    2f02:	1c6e      	adds	r6, r5, #1
    2f04:	7621      	strb	r1, [r4, #24]
    2f06:	f000 f9d5 	bl	32b4 <memchr>
    2f0a:	2800      	cmp	r0, #0
    2f0c:	d03c      	beq.n	2f88 <_svfiprintf_r+0x1d8>
    2f0e:	4b26      	ldr	r3, [pc, #152]	; (2fa8 <_svfiprintf_r+0x1f8>)
    2f10:	2b00      	cmp	r3, #0
    2f12:	d125      	bne.n	2f60 <_svfiprintf_r+0x1b0>
    2f14:	2207      	movs	r2, #7
    2f16:	9b07      	ldr	r3, [sp, #28]
    2f18:	3307      	adds	r3, #7
    2f1a:	4393      	bics	r3, r2
    2f1c:	3308      	adds	r3, #8
    2f1e:	9307      	str	r3, [sp, #28]
    2f20:	6963      	ldr	r3, [r4, #20]
    2f22:	9a04      	ldr	r2, [sp, #16]
    2f24:	189b      	adds	r3, r3, r2
    2f26:	6163      	str	r3, [r4, #20]
    2f28:	e765      	b.n	2df6 <_svfiprintf_r+0x46>
    2f2a:	4343      	muls	r3, r0
    2f2c:	0035      	movs	r5, r6
    2f2e:	2101      	movs	r1, #1
    2f30:	189b      	adds	r3, r3, r2
    2f32:	e7a6      	b.n	2e82 <_svfiprintf_r+0xd2>
    2f34:	2301      	movs	r3, #1
    2f36:	425b      	negs	r3, r3
    2f38:	e7d0      	b.n	2edc <_svfiprintf_r+0x12c>
    2f3a:	2300      	movs	r3, #0
    2f3c:	200a      	movs	r0, #10
    2f3e:	001a      	movs	r2, r3
    2f40:	3501      	adds	r5, #1
    2f42:	6063      	str	r3, [r4, #4]
    2f44:	7829      	ldrb	r1, [r5, #0]
    2f46:	1c6e      	adds	r6, r5, #1
    2f48:	3930      	subs	r1, #48	; 0x30
    2f4a:	2909      	cmp	r1, #9
    2f4c:	d903      	bls.n	2f56 <_svfiprintf_r+0x1a6>
    2f4e:	2b00      	cmp	r3, #0
    2f50:	d0c5      	beq.n	2ede <_svfiprintf_r+0x12e>
    2f52:	9209      	str	r2, [sp, #36]	; 0x24
    2f54:	e7c3      	b.n	2ede <_svfiprintf_r+0x12e>
    2f56:	4342      	muls	r2, r0
    2f58:	0035      	movs	r5, r6
    2f5a:	2301      	movs	r3, #1
    2f5c:	1852      	adds	r2, r2, r1
    2f5e:	e7f1      	b.n	2f44 <_svfiprintf_r+0x194>
    2f60:	ab07      	add	r3, sp, #28
    2f62:	9300      	str	r3, [sp, #0]
    2f64:	003a      	movs	r2, r7
    2f66:	0021      	movs	r1, r4
    2f68:	4b10      	ldr	r3, [pc, #64]	; (2fac <_svfiprintf_r+0x1fc>)
    2f6a:	9803      	ldr	r0, [sp, #12]
    2f6c:	e000      	b.n	2f70 <_svfiprintf_r+0x1c0>
    2f6e:	bf00      	nop
    2f70:	9004      	str	r0, [sp, #16]
    2f72:	9b04      	ldr	r3, [sp, #16]
    2f74:	3301      	adds	r3, #1
    2f76:	d1d3      	bne.n	2f20 <_svfiprintf_r+0x170>
    2f78:	89bb      	ldrh	r3, [r7, #12]
    2f7a:	980d      	ldr	r0, [sp, #52]	; 0x34
    2f7c:	065b      	lsls	r3, r3, #25
    2f7e:	d400      	bmi.n	2f82 <_svfiprintf_r+0x1d2>
    2f80:	e72d      	b.n	2dde <_svfiprintf_r+0x2e>
    2f82:	2001      	movs	r0, #1
    2f84:	4240      	negs	r0, r0
    2f86:	e72a      	b.n	2dde <_svfiprintf_r+0x2e>
    2f88:	ab07      	add	r3, sp, #28
    2f8a:	9300      	str	r3, [sp, #0]
    2f8c:	003a      	movs	r2, r7
    2f8e:	0021      	movs	r1, r4
    2f90:	4b06      	ldr	r3, [pc, #24]	; (2fac <_svfiprintf_r+0x1fc>)
    2f92:	9803      	ldr	r0, [sp, #12]
    2f94:	f000 f87c 	bl	3090 <_printf_i>
    2f98:	e7ea      	b.n	2f70 <_svfiprintf_r+0x1c0>
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	000037dc 	.word	0x000037dc
    2fa0:	000037e2 	.word	0x000037e2
    2fa4:	000037e6 	.word	0x000037e6
    2fa8:	00000000 	.word	0x00000000
    2fac:	00002ced 	.word	0x00002ced

00002fb0 <_printf_common>:
    2fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2fb2:	0015      	movs	r5, r2
    2fb4:	9301      	str	r3, [sp, #4]
    2fb6:	688a      	ldr	r2, [r1, #8]
    2fb8:	690b      	ldr	r3, [r1, #16]
    2fba:	000c      	movs	r4, r1
    2fbc:	9000      	str	r0, [sp, #0]
    2fbe:	4293      	cmp	r3, r2
    2fc0:	da00      	bge.n	2fc4 <_printf_common+0x14>
    2fc2:	0013      	movs	r3, r2
    2fc4:	0022      	movs	r2, r4
    2fc6:	602b      	str	r3, [r5, #0]
    2fc8:	3243      	adds	r2, #67	; 0x43
    2fca:	7812      	ldrb	r2, [r2, #0]
    2fcc:	2a00      	cmp	r2, #0
    2fce:	d001      	beq.n	2fd4 <_printf_common+0x24>
    2fd0:	3301      	adds	r3, #1
    2fd2:	602b      	str	r3, [r5, #0]
    2fd4:	6823      	ldr	r3, [r4, #0]
    2fd6:	069b      	lsls	r3, r3, #26
    2fd8:	d502      	bpl.n	2fe0 <_printf_common+0x30>
    2fda:	682b      	ldr	r3, [r5, #0]
    2fdc:	3302      	adds	r3, #2
    2fde:	602b      	str	r3, [r5, #0]
    2fe0:	6822      	ldr	r2, [r4, #0]
    2fe2:	2306      	movs	r3, #6
    2fe4:	0017      	movs	r7, r2
    2fe6:	401f      	ands	r7, r3
    2fe8:	421a      	tst	r2, r3
    2fea:	d027      	beq.n	303c <_printf_common+0x8c>
    2fec:	0023      	movs	r3, r4
    2fee:	3343      	adds	r3, #67	; 0x43
    2ff0:	781b      	ldrb	r3, [r3, #0]
    2ff2:	1e5a      	subs	r2, r3, #1
    2ff4:	4193      	sbcs	r3, r2
    2ff6:	6822      	ldr	r2, [r4, #0]
    2ff8:	0692      	lsls	r2, r2, #26
    2ffa:	d430      	bmi.n	305e <_printf_common+0xae>
    2ffc:	0022      	movs	r2, r4
    2ffe:	9901      	ldr	r1, [sp, #4]
    3000:	9800      	ldr	r0, [sp, #0]
    3002:	9e08      	ldr	r6, [sp, #32]
    3004:	3243      	adds	r2, #67	; 0x43
    3006:	47b0      	blx	r6
    3008:	1c43      	adds	r3, r0, #1
    300a:	d025      	beq.n	3058 <_printf_common+0xa8>
    300c:	2306      	movs	r3, #6
    300e:	6820      	ldr	r0, [r4, #0]
    3010:	682a      	ldr	r2, [r5, #0]
    3012:	68e1      	ldr	r1, [r4, #12]
    3014:	2500      	movs	r5, #0
    3016:	4003      	ands	r3, r0
    3018:	2b04      	cmp	r3, #4
    301a:	d103      	bne.n	3024 <_printf_common+0x74>
    301c:	1a8d      	subs	r5, r1, r2
    301e:	43eb      	mvns	r3, r5
    3020:	17db      	asrs	r3, r3, #31
    3022:	401d      	ands	r5, r3
    3024:	68a3      	ldr	r3, [r4, #8]
    3026:	6922      	ldr	r2, [r4, #16]
    3028:	4293      	cmp	r3, r2
    302a:	dd01      	ble.n	3030 <_printf_common+0x80>
    302c:	1a9b      	subs	r3, r3, r2
    302e:	18ed      	adds	r5, r5, r3
    3030:	2700      	movs	r7, #0
    3032:	42bd      	cmp	r5, r7
    3034:	d120      	bne.n	3078 <_printf_common+0xc8>
    3036:	2000      	movs	r0, #0
    3038:	e010      	b.n	305c <_printf_common+0xac>
    303a:	3701      	adds	r7, #1
    303c:	68e3      	ldr	r3, [r4, #12]
    303e:	682a      	ldr	r2, [r5, #0]
    3040:	1a9b      	subs	r3, r3, r2
    3042:	42bb      	cmp	r3, r7
    3044:	ddd2      	ble.n	2fec <_printf_common+0x3c>
    3046:	0022      	movs	r2, r4
    3048:	2301      	movs	r3, #1
    304a:	9901      	ldr	r1, [sp, #4]
    304c:	9800      	ldr	r0, [sp, #0]
    304e:	9e08      	ldr	r6, [sp, #32]
    3050:	3219      	adds	r2, #25
    3052:	47b0      	blx	r6
    3054:	1c43      	adds	r3, r0, #1
    3056:	d1f0      	bne.n	303a <_printf_common+0x8a>
    3058:	2001      	movs	r0, #1
    305a:	4240      	negs	r0, r0
    305c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    305e:	2030      	movs	r0, #48	; 0x30
    3060:	18e1      	adds	r1, r4, r3
    3062:	3143      	adds	r1, #67	; 0x43
    3064:	7008      	strb	r0, [r1, #0]
    3066:	0021      	movs	r1, r4
    3068:	1c5a      	adds	r2, r3, #1
    306a:	3145      	adds	r1, #69	; 0x45
    306c:	7809      	ldrb	r1, [r1, #0]
    306e:	18a2      	adds	r2, r4, r2
    3070:	3243      	adds	r2, #67	; 0x43
    3072:	3302      	adds	r3, #2
    3074:	7011      	strb	r1, [r2, #0]
    3076:	e7c1      	b.n	2ffc <_printf_common+0x4c>
    3078:	0022      	movs	r2, r4
    307a:	2301      	movs	r3, #1
    307c:	9901      	ldr	r1, [sp, #4]
    307e:	9800      	ldr	r0, [sp, #0]
    3080:	9e08      	ldr	r6, [sp, #32]
    3082:	321a      	adds	r2, #26
    3084:	47b0      	blx	r6
    3086:	1c43      	adds	r3, r0, #1
    3088:	d0e6      	beq.n	3058 <_printf_common+0xa8>
    308a:	3701      	adds	r7, #1
    308c:	e7d1      	b.n	3032 <_printf_common+0x82>
    308e:	Address 0x0000308e is out of bounds.


00003090 <_printf_i>:
    3090:	b5f0      	push	{r4, r5, r6, r7, lr}
    3092:	b08b      	sub	sp, #44	; 0x2c
    3094:	9206      	str	r2, [sp, #24]
    3096:	000a      	movs	r2, r1
    3098:	3243      	adds	r2, #67	; 0x43
    309a:	9307      	str	r3, [sp, #28]
    309c:	9005      	str	r0, [sp, #20]
    309e:	9204      	str	r2, [sp, #16]
    30a0:	7e0a      	ldrb	r2, [r1, #24]
    30a2:	000c      	movs	r4, r1
    30a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    30a6:	2a78      	cmp	r2, #120	; 0x78
    30a8:	d806      	bhi.n	30b8 <_printf_i+0x28>
    30aa:	2a62      	cmp	r2, #98	; 0x62
    30ac:	d808      	bhi.n	30c0 <_printf_i+0x30>
    30ae:	2a00      	cmp	r2, #0
    30b0:	d100      	bne.n	30b4 <_printf_i+0x24>
    30b2:	e0c0      	b.n	3236 <_printf_i+0x1a6>
    30b4:	2a58      	cmp	r2, #88	; 0x58
    30b6:	d052      	beq.n	315e <_printf_i+0xce>
    30b8:	0026      	movs	r6, r4
    30ba:	3642      	adds	r6, #66	; 0x42
    30bc:	7032      	strb	r2, [r6, #0]
    30be:	e022      	b.n	3106 <_printf_i+0x76>
    30c0:	0010      	movs	r0, r2
    30c2:	3863      	subs	r0, #99	; 0x63
    30c4:	2815      	cmp	r0, #21
    30c6:	d8f7      	bhi.n	30b8 <_printf_i+0x28>
    30c8:	f000 f91a 	bl	3300 <__gnu_thumb1_case_shi>
    30cc:	001f0016 	.word	0x001f0016
    30d0:	fff6fff6 	.word	0xfff6fff6
    30d4:	fff6fff6 	.word	0xfff6fff6
    30d8:	fff6001f 	.word	0xfff6001f
    30dc:	fff6fff6 	.word	0xfff6fff6
    30e0:	00a8fff6 	.word	0x00a8fff6
    30e4:	009a0036 	.word	0x009a0036
    30e8:	fff6fff6 	.word	0xfff6fff6
    30ec:	fff600b9 	.word	0xfff600b9
    30f0:	fff60036 	.word	0xfff60036
    30f4:	009efff6 	.word	0x009efff6
    30f8:	0026      	movs	r6, r4
    30fa:	681a      	ldr	r2, [r3, #0]
    30fc:	3642      	adds	r6, #66	; 0x42
    30fe:	1d11      	adds	r1, r2, #4
    3100:	6019      	str	r1, [r3, #0]
    3102:	6813      	ldr	r3, [r2, #0]
    3104:	7033      	strb	r3, [r6, #0]
    3106:	2301      	movs	r3, #1
    3108:	e0a7      	b.n	325a <_printf_i+0x1ca>
    310a:	6808      	ldr	r0, [r1, #0]
    310c:	6819      	ldr	r1, [r3, #0]
    310e:	1d0a      	adds	r2, r1, #4
    3110:	0605      	lsls	r5, r0, #24
    3112:	d50b      	bpl.n	312c <_printf_i+0x9c>
    3114:	680d      	ldr	r5, [r1, #0]
    3116:	601a      	str	r2, [r3, #0]
    3118:	2d00      	cmp	r5, #0
    311a:	da03      	bge.n	3124 <_printf_i+0x94>
    311c:	232d      	movs	r3, #45	; 0x2d
    311e:	9a04      	ldr	r2, [sp, #16]
    3120:	426d      	negs	r5, r5
    3122:	7013      	strb	r3, [r2, #0]
    3124:	4b61      	ldr	r3, [pc, #388]	; (32ac <_printf_i+0x21c>)
    3126:	270a      	movs	r7, #10
    3128:	9303      	str	r3, [sp, #12]
    312a:	e032      	b.n	3192 <_printf_i+0x102>
    312c:	680d      	ldr	r5, [r1, #0]
    312e:	601a      	str	r2, [r3, #0]
    3130:	0641      	lsls	r1, r0, #25
    3132:	d5f1      	bpl.n	3118 <_printf_i+0x88>
    3134:	b22d      	sxth	r5, r5
    3136:	e7ef      	b.n	3118 <_printf_i+0x88>
    3138:	680d      	ldr	r5, [r1, #0]
    313a:	6819      	ldr	r1, [r3, #0]
    313c:	1d08      	adds	r0, r1, #4
    313e:	6018      	str	r0, [r3, #0]
    3140:	062e      	lsls	r6, r5, #24
    3142:	d501      	bpl.n	3148 <_printf_i+0xb8>
    3144:	680d      	ldr	r5, [r1, #0]
    3146:	e003      	b.n	3150 <_printf_i+0xc0>
    3148:	066d      	lsls	r5, r5, #25
    314a:	d5fb      	bpl.n	3144 <_printf_i+0xb4>
    314c:	680d      	ldr	r5, [r1, #0]
    314e:	b2ad      	uxth	r5, r5
    3150:	4b56      	ldr	r3, [pc, #344]	; (32ac <_printf_i+0x21c>)
    3152:	270a      	movs	r7, #10
    3154:	9303      	str	r3, [sp, #12]
    3156:	2a6f      	cmp	r2, #111	; 0x6f
    3158:	d117      	bne.n	318a <_printf_i+0xfa>
    315a:	2708      	movs	r7, #8
    315c:	e015      	b.n	318a <_printf_i+0xfa>
    315e:	3145      	adds	r1, #69	; 0x45
    3160:	700a      	strb	r2, [r1, #0]
    3162:	4a52      	ldr	r2, [pc, #328]	; (32ac <_printf_i+0x21c>)
    3164:	9203      	str	r2, [sp, #12]
    3166:	681a      	ldr	r2, [r3, #0]
    3168:	6821      	ldr	r1, [r4, #0]
    316a:	ca20      	ldmia	r2!, {r5}
    316c:	601a      	str	r2, [r3, #0]
    316e:	0608      	lsls	r0, r1, #24
    3170:	d550      	bpl.n	3214 <_printf_i+0x184>
    3172:	07cb      	lsls	r3, r1, #31
    3174:	d502      	bpl.n	317c <_printf_i+0xec>
    3176:	2320      	movs	r3, #32
    3178:	4319      	orrs	r1, r3
    317a:	6021      	str	r1, [r4, #0]
    317c:	2710      	movs	r7, #16
    317e:	2d00      	cmp	r5, #0
    3180:	d103      	bne.n	318a <_printf_i+0xfa>
    3182:	2320      	movs	r3, #32
    3184:	6822      	ldr	r2, [r4, #0]
    3186:	439a      	bics	r2, r3
    3188:	6022      	str	r2, [r4, #0]
    318a:	0023      	movs	r3, r4
    318c:	2200      	movs	r2, #0
    318e:	3343      	adds	r3, #67	; 0x43
    3190:	701a      	strb	r2, [r3, #0]
    3192:	6863      	ldr	r3, [r4, #4]
    3194:	60a3      	str	r3, [r4, #8]
    3196:	2b00      	cmp	r3, #0
    3198:	db03      	blt.n	31a2 <_printf_i+0x112>
    319a:	2204      	movs	r2, #4
    319c:	6821      	ldr	r1, [r4, #0]
    319e:	4391      	bics	r1, r2
    31a0:	6021      	str	r1, [r4, #0]
    31a2:	2d00      	cmp	r5, #0
    31a4:	d102      	bne.n	31ac <_printf_i+0x11c>
    31a6:	9e04      	ldr	r6, [sp, #16]
    31a8:	2b00      	cmp	r3, #0
    31aa:	d00c      	beq.n	31c6 <_printf_i+0x136>
    31ac:	9e04      	ldr	r6, [sp, #16]
    31ae:	0028      	movs	r0, r5
    31b0:	0039      	movs	r1, r7
    31b2:	f7ff fa2d 	bl	2610 <__aeabi_uidivmod>
    31b6:	9b03      	ldr	r3, [sp, #12]
    31b8:	3e01      	subs	r6, #1
    31ba:	5c5b      	ldrb	r3, [r3, r1]
    31bc:	7033      	strb	r3, [r6, #0]
    31be:	002b      	movs	r3, r5
    31c0:	0005      	movs	r5, r0
    31c2:	429f      	cmp	r7, r3
    31c4:	d9f3      	bls.n	31ae <_printf_i+0x11e>
    31c6:	2f08      	cmp	r7, #8
    31c8:	d109      	bne.n	31de <_printf_i+0x14e>
    31ca:	6823      	ldr	r3, [r4, #0]
    31cc:	07db      	lsls	r3, r3, #31
    31ce:	d506      	bpl.n	31de <_printf_i+0x14e>
    31d0:	6863      	ldr	r3, [r4, #4]
    31d2:	6922      	ldr	r2, [r4, #16]
    31d4:	4293      	cmp	r3, r2
    31d6:	dc02      	bgt.n	31de <_printf_i+0x14e>
    31d8:	2330      	movs	r3, #48	; 0x30
    31da:	3e01      	subs	r6, #1
    31dc:	7033      	strb	r3, [r6, #0]
    31de:	9b04      	ldr	r3, [sp, #16]
    31e0:	1b9b      	subs	r3, r3, r6
    31e2:	6123      	str	r3, [r4, #16]
    31e4:	9b07      	ldr	r3, [sp, #28]
    31e6:	0021      	movs	r1, r4
    31e8:	9300      	str	r3, [sp, #0]
    31ea:	9805      	ldr	r0, [sp, #20]
    31ec:	9b06      	ldr	r3, [sp, #24]
    31ee:	aa09      	add	r2, sp, #36	; 0x24
    31f0:	f7ff fede 	bl	2fb0 <_printf_common>
    31f4:	1c43      	adds	r3, r0, #1
    31f6:	d135      	bne.n	3264 <_printf_i+0x1d4>
    31f8:	2001      	movs	r0, #1
    31fa:	4240      	negs	r0, r0
    31fc:	b00b      	add	sp, #44	; 0x2c
    31fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3200:	2220      	movs	r2, #32
    3202:	6809      	ldr	r1, [r1, #0]
    3204:	430a      	orrs	r2, r1
    3206:	6022      	str	r2, [r4, #0]
    3208:	0022      	movs	r2, r4
    320a:	2178      	movs	r1, #120	; 0x78
    320c:	3245      	adds	r2, #69	; 0x45
    320e:	7011      	strb	r1, [r2, #0]
    3210:	4a27      	ldr	r2, [pc, #156]	; (32b0 <_printf_i+0x220>)
    3212:	e7a7      	b.n	3164 <_printf_i+0xd4>
    3214:	0648      	lsls	r0, r1, #25
    3216:	d5ac      	bpl.n	3172 <_printf_i+0xe2>
    3218:	b2ad      	uxth	r5, r5
    321a:	e7aa      	b.n	3172 <_printf_i+0xe2>
    321c:	681a      	ldr	r2, [r3, #0]
    321e:	680d      	ldr	r5, [r1, #0]
    3220:	1d10      	adds	r0, r2, #4
    3222:	6949      	ldr	r1, [r1, #20]
    3224:	6018      	str	r0, [r3, #0]
    3226:	6813      	ldr	r3, [r2, #0]
    3228:	062e      	lsls	r6, r5, #24
    322a:	d501      	bpl.n	3230 <_printf_i+0x1a0>
    322c:	6019      	str	r1, [r3, #0]
    322e:	e002      	b.n	3236 <_printf_i+0x1a6>
    3230:	066d      	lsls	r5, r5, #25
    3232:	d5fb      	bpl.n	322c <_printf_i+0x19c>
    3234:	8019      	strh	r1, [r3, #0]
    3236:	2300      	movs	r3, #0
    3238:	9e04      	ldr	r6, [sp, #16]
    323a:	6123      	str	r3, [r4, #16]
    323c:	e7d2      	b.n	31e4 <_printf_i+0x154>
    323e:	681a      	ldr	r2, [r3, #0]
    3240:	1d11      	adds	r1, r2, #4
    3242:	6019      	str	r1, [r3, #0]
    3244:	6816      	ldr	r6, [r2, #0]
    3246:	2100      	movs	r1, #0
    3248:	0030      	movs	r0, r6
    324a:	6862      	ldr	r2, [r4, #4]
    324c:	f000 f832 	bl	32b4 <memchr>
    3250:	2800      	cmp	r0, #0
    3252:	d001      	beq.n	3258 <_printf_i+0x1c8>
    3254:	1b80      	subs	r0, r0, r6
    3256:	6060      	str	r0, [r4, #4]
    3258:	6863      	ldr	r3, [r4, #4]
    325a:	6123      	str	r3, [r4, #16]
    325c:	2300      	movs	r3, #0
    325e:	9a04      	ldr	r2, [sp, #16]
    3260:	7013      	strb	r3, [r2, #0]
    3262:	e7bf      	b.n	31e4 <_printf_i+0x154>
    3264:	6923      	ldr	r3, [r4, #16]
    3266:	0032      	movs	r2, r6
    3268:	9906      	ldr	r1, [sp, #24]
    326a:	9805      	ldr	r0, [sp, #20]
    326c:	9d07      	ldr	r5, [sp, #28]
    326e:	47a8      	blx	r5
    3270:	1c43      	adds	r3, r0, #1
    3272:	d0c1      	beq.n	31f8 <_printf_i+0x168>
    3274:	6823      	ldr	r3, [r4, #0]
    3276:	079b      	lsls	r3, r3, #30
    3278:	d415      	bmi.n	32a6 <_printf_i+0x216>
    327a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    327c:	68e0      	ldr	r0, [r4, #12]
    327e:	4298      	cmp	r0, r3
    3280:	dabc      	bge.n	31fc <_printf_i+0x16c>
    3282:	0018      	movs	r0, r3
    3284:	e7ba      	b.n	31fc <_printf_i+0x16c>
    3286:	0022      	movs	r2, r4
    3288:	2301      	movs	r3, #1
    328a:	9906      	ldr	r1, [sp, #24]
    328c:	9805      	ldr	r0, [sp, #20]
    328e:	9e07      	ldr	r6, [sp, #28]
    3290:	3219      	adds	r2, #25
    3292:	47b0      	blx	r6
    3294:	1c43      	adds	r3, r0, #1
    3296:	d0af      	beq.n	31f8 <_printf_i+0x168>
    3298:	3501      	adds	r5, #1
    329a:	68e3      	ldr	r3, [r4, #12]
    329c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    329e:	1a9b      	subs	r3, r3, r2
    32a0:	42ab      	cmp	r3, r5
    32a2:	dcf0      	bgt.n	3286 <_printf_i+0x1f6>
    32a4:	e7e9      	b.n	327a <_printf_i+0x1ea>
    32a6:	2500      	movs	r5, #0
    32a8:	e7f7      	b.n	329a <_printf_i+0x20a>
    32aa:	46c0      	nop			; (mov r8, r8)
    32ac:	000037ed 	.word	0x000037ed
    32b0:	000037fe 	.word	0x000037fe

000032b4 <memchr>:
    32b4:	b2c9      	uxtb	r1, r1
    32b6:	1882      	adds	r2, r0, r2
    32b8:	4290      	cmp	r0, r2
    32ba:	d101      	bne.n	32c0 <memchr+0xc>
    32bc:	2000      	movs	r0, #0
    32be:	4770      	bx	lr
    32c0:	7803      	ldrb	r3, [r0, #0]
    32c2:	428b      	cmp	r3, r1
    32c4:	d0fb      	beq.n	32be <memchr+0xa>
    32c6:	3001      	adds	r0, #1
    32c8:	e7f6      	b.n	32b8 <memchr+0x4>

000032ca <memmove>:
    32ca:	b510      	push	{r4, lr}
    32cc:	4288      	cmp	r0, r1
    32ce:	d902      	bls.n	32d6 <memmove+0xc>
    32d0:	188b      	adds	r3, r1, r2
    32d2:	4298      	cmp	r0, r3
    32d4:	d303      	bcc.n	32de <memmove+0x14>
    32d6:	2300      	movs	r3, #0
    32d8:	e007      	b.n	32ea <memmove+0x20>
    32da:	5c8b      	ldrb	r3, [r1, r2]
    32dc:	5483      	strb	r3, [r0, r2]
    32de:	3a01      	subs	r2, #1
    32e0:	d2fb      	bcs.n	32da <memmove+0x10>
    32e2:	bd10      	pop	{r4, pc}
    32e4:	5ccc      	ldrb	r4, [r1, r3]
    32e6:	54c4      	strb	r4, [r0, r3]
    32e8:	3301      	adds	r3, #1
    32ea:	429a      	cmp	r2, r3
    32ec:	d1fa      	bne.n	32e4 <memmove+0x1a>
    32ee:	e7f8      	b.n	32e2 <memmove+0x18>

000032f0 <_malloc_usable_size_r>:
    32f0:	1f0b      	subs	r3, r1, #4
    32f2:	681b      	ldr	r3, [r3, #0]
    32f4:	1f18      	subs	r0, r3, #4
    32f6:	2b00      	cmp	r3, #0
    32f8:	da01      	bge.n	32fe <_malloc_usable_size_r+0xe>
    32fa:	580b      	ldr	r3, [r1, r0]
    32fc:	18c0      	adds	r0, r0, r3
    32fe:	4770      	bx	lr

00003300 <__gnu_thumb1_case_shi>:
    3300:	b403      	push	{r0, r1}
    3302:	4671      	mov	r1, lr
    3304:	0849      	lsrs	r1, r1, #1
    3306:	0040      	lsls	r0, r0, #1
    3308:	0049      	lsls	r1, r1, #1
    330a:	5e09      	ldrsh	r1, [r1, r0]
    330c:	0049      	lsls	r1, r1, #1
    330e:	448e      	add	lr, r1
    3310:	bc03      	pop	{r0, r1}
    3312:	4770      	bx	lr
    3314:	0000338c 	.word	0x0000338c
    3318:	000004e5 	.word	0x000004e5
    331c:	00000067 	.word	0x00000067
    3320:	00003394 	.word	0x00003394
    3324:	00000651 	.word	0x00000651
    3328:	00000067 	.word	0x00000067
    332c:	0000339c 	.word	0x0000339c
    3330:	00000711 	.word	0x00000711
    3334:	00000067 	.word	0x00000067
    3338:	000033a4 	.word	0x000033a4
    333c:	000007f5 	.word	0x000007f5
    3340:	00000061 	.word	0x00000061
    3344:	00000000 	.word	0x00000000
    3348:	00000018 	.word	0x00000018
    334c:	00000000 	.word	0x00000000
    3350:	00000019 	.word	0x00000019
    3354:	00000301 	.word	0x00000301
    3358:	00000000 	.word	0x00000000
    335c:	00000005 	.word	0x00000005
    3360:	00000000 	.word	0x00000000
    3364:	00000008 	.word	0x00000008
    3368:	00000000 	.word	0x00000000
    336c:	00000009 	.word	0x00000009
    3370:	01010101 	.word	0x01010101
    3374:	00000001 	.word	0x00000001
    3378:	00003564 	.word	0x00003564
    337c:	00001489 	.word	0x00001489
    3380:	00000061 	.word	0x00000061
    3384:	4c554e00 	.word	0x4c554e00
    3388:	ffff004c 	.word	0xffff004c
    338c:	63657865 	.word	0x63657865
    3390:	00000000 	.word	0x00000000
    3394:	6e746573 	.word	0x6e746573
    3398:	00006d75 	.word	0x00006d75
    339c:	6e6c6564 	.word	0x6e6c6564
    33a0:	00006d75 	.word	0x00006d75
    33a4:	7473696c 	.word	0x7473696c
    33a8:	006d756e 	.word	0x006d756e
    33ac:	ff005441 	.word	0xff005441
    33b0:	30455441 	.word	0x30455441
    33b4:	00000000 	.word	0x00000000
    33b8:	4552432b 	.word	0x4552432b
    33bc:	30203a47 	.word	0x30203a47
    33c0:	0000312c 	.word	0x0000312c
    33c4:	432b5441 	.word	0x432b5441
    33c8:	3f474552 	.word	0x3f474552
    33cc:	00000000 	.word	0x00000000
    33d0:	432b5441 	.word	0x432b5441
    33d4:	3d46474d 	.word	0x3d46474d
    33d8:	00000031 	.word	0x00000031
    33dc:	432b5441 	.word	0x432b5441
    33e0:	4144474d 	.word	0x4144474d
    33e4:	4544223d 	.word	0x4544223d
    33e8:	4c41204c 	.word	0x4c41204c
    33ec:	ff00224c 	.word	0xff00224c
    33f0:	432b5441 	.word	0x432b5441
    33f4:	3d53474d 	.word	0x3d53474d
    33f8:	22732522 	.word	0x22732522
    33fc:	00000000 	.word	0x00000000
    3400:	474d432b 	.word	0x474d432b
    3404:	00000053 	.word	0x00000053
    3408:	ffff001a 	.word	0xffff001a
    340c:	6d6d6f43 	.word	0x6d6d6f43
    3410:	20646e61 	.word	0x20646e61
    3414:	656d6974 	.word	0x656d6974
    3418:	756f2064 	.word	0x756f2064
    341c:	00000074 	.word	0x00000074
    3420:	74726175 	.word	0x74726175
    3424:	65723e2d 	.word	0x65723e2d
    3428:	29286461 	.word	0x29286461
    342c:	74657220 	.word	0x74657220
    3430:	656e7275 	.word	0x656e7275
    3434:	756e2064 	.word	0x756e2064
    3438:	ff006c6c 	.word	0xff006c6c
    343c:	462b5441 	.word	0x462b5441
    3440:	41455253 	.word	0x41455253
    3444:	3a433d44 	.word	0x3a433d44
    3448:	2e73255c 	.word	0x2e73255c
    344c:	2c747874 	.word	0x2c747874
    3450:	2c312c30 	.word	0x2c312c30
    3454:	ffff0030 	.word	0xffff0030
    3458:	462b5441 	.word	0x462b5441
    345c:	45524353 	.word	0x45524353
    3460:	3d455441 	.word	0x3d455441
    3464:	255c3a43 	.word	0x255c3a43
    3468:	78742e73 	.word	0x78742e73
    346c:	00000074 	.word	0x00000074
    3470:	462b5441 	.word	0x462b5441
    3474:	49525753 	.word	0x49525753
    3478:	433d4554 	.word	0x433d4554
    347c:	73255c3a 	.word	0x73255c3a
    3480:	7478742e 	.word	0x7478742e
    3484:	312c302c 	.word	0x312c302c
    3488:	0000312c 	.word	0x0000312c
    348c:	0000003e 	.word	0x0000003e
    3490:	ff000a0d 	.word	0xff000a0d
    3494:	6c6c616d 	.word	0x6c6c616d
    3498:	6620636f 	.word	0x6620636f
    349c:	656c6961 	.word	0x656c6961
    34a0:	00000064 	.word	0x00000064
    34a4:	00000020 	.word	0x00000020
    34a8:	67617355 	.word	0x67617355
    34ac:	73203a65 	.word	0x73203a65
    34b0:	756e7465 	.word	0x756e7465
    34b4:	6e3c206d 	.word	0x6e3c206d
    34b8:	65626d75 	.word	0x65626d75
    34bc:	3c203e72 	.word	0x3c203e72
    34c0:	6576656c 	.word	0x6576656c
    34c4:	ff003e6c 	.word	0xff003e6c
    34c8:	462b5441 	.word	0x462b5441
    34cc:	4c454453 	.word	0x4c454453
    34d0:	5c3a433d 	.word	0x5c3a433d
    34d4:	742e7325 	.word	0x742e7325
    34d8:	ff007478 	.word	0xff007478
    34dc:	67617355 	.word	0x67617355
    34e0:	64203a65 	.word	0x64203a65
    34e4:	756e6c65 	.word	0x756e6c65
    34e8:	6e3c206d 	.word	0x6e3c206d
    34ec:	65626d75 	.word	0x65626d75
    34f0:	ff003e72 	.word	0xff003e72
    34f4:	462b5441 	.word	0x462b5441
    34f8:	3d534c53 	.word	0x3d534c53
    34fc:	005c3a43 	.word	0x005c3a43
    3500:	7478742e 	.word	0x7478742e
    3504:	ffffff00 	.word	0xffffff00
    3508:	7473694c 	.word	0x7473694c
    350c:	00000a3a 	.word	0x00000a3a
    3510:	203a7325 	.word	0x203a7325
    3514:	000a6325 	.word	0x000a6325
    3518:	432b5441 	.word	0x432b5441
    351c:	3d52474d 	.word	0x3d52474d
    3520:	00006425 	.word	0x00006425
    3524:	474d432b 	.word	0x474d432b
    3528:	00000052 	.word	0x00000052
    352c:	0a0d0a0d 	.word	0x0a0d0a0d
    3530:	00004b4f 	.word	0x00004b4f
    3534:	ff00222c 	.word	0xff00222c
    3538:	474e4952 	.word	0x474e4952
    353c:	00000000 	.word	0x00000000
    3540:	00485441 	.word	0x00485441
    3544:	544d432b 	.word	0x544d432b
    3548:	ffff0049 	.word	0xffff0049

0000354c <_ZL10child_pipe>:
    354c:	0d0c0b0a ffff0f0e                       ........

00003554 <_ZL17child_pipe_enable>:
    3554:	03020100 ffff0504                       ........

0000355c <_ZL18child_payload_size>:
    355c:	14131211 ffff1615 6f666e69 ffffff00     ........info....
    356c:	65646f4e 49200a3a 25203a44 4e200a64     Node:. ID: %d. N
    357c:	3a656d61 0a732520 70795420 25203a65     ame: %s. Type: %
    358c:	4c200a64 20747361 6e656573 6425203a     d. Last seen: %d
    359c:	63657320 6f676120 0000000a 696f5320      sec ago.... Soi
    35ac:	6f6d206c 75747369 73206572 6f736e65     l moisture senso
    35bc:	200a3a72 696f4d20 72757473 25203a65     r:.  Moisture: %
    35cc:	00000a64 6d655420 61726570 65727574     d... Temperature
    35dc:	68202b20 64696d75 20797469 736e6573      + humidity sens
    35ec:	0a3a726f 65542020 7265706d 72757461     or:.  Temperatur
    35fc:	25203a65 20200a64 696d7548 79746964     e: %d.  Humidity
    360c:	6425203a 0000000a 6d655420 61726570     : %d.... Tempera
    361c:	65727574 6e657320 3a726f73 5420200a     ture sensor:.  T
    362c:	65706d65 75746172 203a6572 000a6425     emperature: %d..
    363c:	6e746573 00656d61 61656c63 ffff0072     setname.clear...
    364c:	6d6d6f43 20646e61 75657571 00006465     Command queued..
    365c:	67617355 73203a65 616e7465 3c20656d     Usage: setname <
    366c:	203e6469 77656e3c 6d616e20               id> <new name>.

0000367b <_ctype_>:
    367b:	20202000 20202020 28282020 20282828     .         ((((( 
    368b:	20202020 20202020 20202020 20202020                     
    369b:	10108820 10101010 10101010 10101010      ...............
    36ab:	04040410 04040404 10040404 10101010     ................
    36bb:	41411010 41414141 01010101 01010101     ..AAAAAA........
    36cb:	01010101 01010101 01010101 10101010     ................
    36db:	42421010 42424242 02020202 02020202     ..BBBBBB........
    36eb:	02020202 02020202 02020202 10101010     ................
    36fb:	00000020 00000000 00000000 00000000      ...............
	...

0000377c <__sf_fake_stderr>:
	...

0000379c <__sf_fake_stdin>:
	...

000037bc <__sf_fake_stdout>:
	...
    37dc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    37ec:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    37fc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    380c:	ff006665                                ef..

00003810 <_init>:
    3810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3812:	46c0      	nop			; (mov r8, r8)
    3814:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3816:	bc08      	pop	{r3}
    3818:	469e      	mov	lr, r3
    381a:	4770      	bx	lr

0000381c <__init_array_start>:
    381c:	000000b5 	.word	0x000000b5
    3820:	00001709 	.word	0x00001709
    3824:	000019b5 	.word	0x000019b5
    3828:	000020b9 	.word	0x000020b9

0000382c <_fini>:
    382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3832:	bc08      	pop	{r3}
    3834:	469e      	mov	lr, r3
    3836:	4770      	bx	lr

00003838 <__delay_usec_veneer>:
    3838:	b401      	push	{r0}
    383a:	4802      	ldr	r0, [pc, #8]	; (3844 <__delay_usec_veneer+0xc>)
    383c:	4684      	mov	ip, r0
    383e:	bc01      	pop	{r0}
    3840:	4760      	bx	ip
    3842:	bf00      	nop
    3844:	20000001 	.word	0x20000001

00003848 <__fini_array_start>:
    3848:	0000008d 	.word	0x0000008d

Disassembly of section .data:

20000000 <delay_usec>:
	__asm (
20000000:	210f      	movs	r1, #15

20000002 <mydelay1>:
20000002:	3901      	subs	r1, #1
20000004:	d1fd      	bne.n	20000002 <mydelay1>
20000006:	3801      	subs	r0, #1
20000008:	d1fa      	bne.n	20000000 <delay_usec>
}
2000000a:	4770      	bx	lr

2000000c <__dso_handle>:
2000000c:	0000 0000                                   ....

20000010 <_ZN3Str11EmptyBufferE>:
20000010:	3384 0000                                   .3..

20000014 <_impure_ptr>:
20000014:	0018 2000                                   ... 

20000018 <impure_data>:
20000018:	0000 0000 379c 0000 37bc 0000 377c 0000     .....7...7..|7..
	...
