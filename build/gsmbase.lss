
build/gsmbase.elf:     file format elf32-littlearm
build/gsmbase.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002221

Program Header:
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000035bc memsz 0x000035bc flags r-x
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x000035bc align 2**16
         filesz 0x00000078 memsz 0x00000524 flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035bc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  20000000  000035bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004ac  20000078  00003634  00020078  2**3
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  4 .comment      00000079  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  5 .debug_info   00039d00  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004030  00000000  00000000  00059e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00006675  00000000  00000000  0005de49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000005d8  00000000  00000000  000644be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000a60  00000000  00000000  00064a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000064e8  00000000  00000000  000654f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000e129  00000000  00000000  0006b9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000019ec  00000000  00000000  00079b08  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000078 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_samd10.c
00000000 l    df *ABS*	00000000 crtstuff.c
0000008c l     F .text	00000000 __do_global_dtors_aux
20000078 l       .bss	00000001 completed.8911
000035b8 l     O .text	00000000 __do_global_dtors_aux_fini_array_entry
000000b4 l     F .text	00000000 frame_dummy
2000007c l       .bss	00000018 object.8916
0000358c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 GSM.cpp
000000d4 l     F .text	0000001c _ZL8find_numPKc
000004a8 l     F .text	00000054 _ZL9func_execP3GSMPKcS2_
000007dc l     F .text	00000094 _ZL11func_setnumP3GSMPKcS2_
0000089c l     F .text	0000001c _ZL11func_delnumP3GSMPKcS2_
00000000 l    df *ABS*	00000000 RF24.cpp
000032b4 l     O .text	00000006 _ZL10child_pipe
000032bc l     O .text	00000006 _ZL17child_pipe_enable
000032c4 l     O .text	00000006 _ZL18child_payload_size
00000000 l    df *ABS*	00000000 main.cpp
00001048 l     F .text	00000024 _ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_
00001088 l     F .text	00000014 _ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_
0000109c l     F .text	00000078 _Z41__static_initialization_and_destruction_0ii
0000129c l     F .text	00000128 _ZL8cmd_infoP3GSMPKcS2_
0000151c l     F .text	00000010 _GLOBAL__sub_I__ZN3Str11EmptyBufferE
20000094 l     O .bss	00000014 _ZL3gsm
200000a8 l     O .bss	00000038 _ZL3net
00000000 l    df *ABS*	00000000 spi.cpp
00001774 l     F .text	00000034 _Z41__static_initialization_and_destruction_0ii
000017c8 l     F .text	00000010 _GLOBAL__sub_I_g_spi0
00000000 l    df *ABS*	00000000 systick.c
000017d8 l     F .text	00000144 initializeSystemFor48MHz
20000000 l       .data	00000000 mydelay
20000002 l       .data	00000000 mydelay1
200000e8 l     O .bss	00000008 _cycles
00000000 l    df *ABS*	00000000 uart.cpp
000019b0 l     F .text	00000058 _Z41__static_initialization_and_destruction_0ii
00001ecc l     F .text	00000010 _GLOBAL__sub_I_g_uart0
00000000 l    df *ABS*	00000000 sensornet.cpp
00000000 l    df *ABS*	00000000 syscalls.c
20000508 l     O .bss	00000004 heap.4639
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _udivsi3.o
000022f8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00002890 l     F .text	00000104 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 _thumb1_case_shi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
000035a8 l     F .text	00000010 __delay_usec_veneer
00000b22 g     F .text	0000000a _ZN4RF2410get_statusEv
00003090 g     F .text	00000010 _malloc_usable_size_r
00000e62 g     F .text	0000002e _ZN4RF2410setPALevelEh
0000274c g     F .text	00000010 strcpy
000009c8 g     F .text	00000034 _ZN4RF2414write_registerEhh
00000dc0 g     F .text	00000064 _ZN4RF2414startListeningEv
00001edc g     F .text	00000020 _ZN9SensornetC1ERK4RF24
0000031c g     F .text	00000098 _ZN3GSM7PowerOnEv
0000221c  w    F .text	00000002 DMAC_Handler
20000514 g     O .bss	00000001 __lock___atexit_recursive_mutex
00000c10 g     F .text	00000006 _ZN4RF249errNotifyEv
0000221c  w    F .text	00000002 HardFault_Handler
0000221c  w    F .text	00000002 TC2_Handler
00000cce g     F .text	0000000a _ZN4RF249availableEv
00002a30 g     F .text	00000010 __malloc_unlock
00000c9a g     F .text	0000000a _ZN4RF245writeEPKvh
0000221c  w    F .text	00000002 AC_Handler
00001994 g     F .text	0000001c SysTick_Handler
20000515 g     O .bss	00000001 __lock___arc4random_mutex
0000306a g     F .text	00000026 memmove
0000221c  w    F .text	00000002 PendSV_Handler
00002694 g     F .text	00000068 snprintf
0000221c  w    F .text	00000002 NMI_Handler
00002830 g     F .text	0000005e __strtok_r
000013c4  w    F .text	00000042 _ZN6VectorI7SMSFuncE9push_backERKS0_
00001208 g     F .text	00000060 _ZN3Str13appendfv_fromEiPKcSt9__va_list
00000000 g       .text	00000000 _sfixed
00001ebc g     F .text	00000010 SERCOM1_Handler
0000221c  w    F .text	00000002 ADC_Handler
20000520 g     O .bss	00000004 errno
000035bc g       .data	00000000 _etext
00000b2c g     F .text	0000003e _ZN4RF24C2E6gpio_tS0_R5spi_t
20001000 g       .text	00000000 __top_ram
000024f8 g     F .text	00000012 memcpy
00000214 g     F .text	00000012 _ZN3GSMD1Ev
00002b50 g     F .text	00000200 _svfprintf_r
000009fc g     F .text	00000078 _ZN4RF2413write_payloadEPKvhh
0000221c  w    F .text	00000002 SERCOM2_Handler
000035bc g       .text	00000000 __fini_array_end
0000221c  w    F .text	00000002 TCC0_Handler
00000b18 g     F .text	0000000a _ZN4RF248flush_txEv
000024d0 g     F .text	00000014 malloc
00000b7c g     F .text	0000000c _ZN4RF2414setPayloadSizeEh
000022f8 g     F .text	0000010a .hidden __udivsi3
00001cf8 g     F .text	0000008c _ZN6uart_t4peekEi
0000221c  w    F .text	00000002 RTC_Handler
00002a04 g     F .text	00000018 vsnprintf
0000060c g     F .text	000000b8 _ZN3GSM7ReadSMSEi
2000000c g     O .data	00000000 .hidden __dso_handle
00001c8c g     F .text	0000002c _ZN6uart_t7rxemptyEv
000008ec g     F .text	0000005c _ZN4RF242ceEb
00001284 g     F .text	00000018 _ZN3Str7appendfEPKcz
00002670 g     F .text	00000024 _sbrk_r
200000f0 g     O .bss	0000020c g_uart0
0000221c  w    F .text	00000002 EIC_Handler
00001268 g     F .text	0000001c _ZN3Str8appendfvEPKcSt9__va_list
00001194 g     F .text	00000074 _ZN3Str15reserve_discardEi
0000221c  w    F .text	00000002 WDT_Handler
200000e0 g     O .bss	00000004 g_spi0
20000516 g     O .bss	00000001 __lock___env_recursive_mutex
20000517 g     O .bss	00000001 __lock___sinit_recursive_mutex
00002410 g     F .text	00000050 .hidden __aeabi_lmul
00002a40 g     F .text	0000004c _realloc_r
00002488 g     F .text	00000048 __libc_init_array
000022c4 g     F .text	00000024 _sbrk
0000221c  w    F .text	00000002 TC1_Handler
00003580 g     F .text	00000000 _init
00000cec g     F .text	0000002e _ZN4RF2415openWritingPipeEy
00002994 g     F .text	00000018 strtol
00000be4 g     F .text	0000002c _ZN4RF247powerUpEv
00004000 g       .text	00000000 __top_flash
20000524 g       .bss	00000000 _ebss
00002220 g     F .text	000000a4 Reset_Handler
00002a04 g     F .text	00000018 vsniprintf
20000518 g     O .bss	00000001 __lock___malloc_recursive_mutex
20001000 g       *ABS*	00000000 _stack_top
00001f5c g     F .text	00000086 _ZN9Sensornet10UpdateNodeERK12SensorPacket
0000221c g     F .text	00000002 Dummy_Handler
000020fa g     F .text	0000002c _ZN9Sensornet4PollEv
000034ec g     O .text	00000020 __sf_fake_stderr
00002694 g     F .text	00000068 sniprintf
0000076c g     F .text	00000070 _ZN3GSM11SetNumLevelEPKcc
00002a1e g     F .text	00000002 __retarget_lock_release_recursive
00000aec g     F .text	00000022 _ZN4RF248spiTransEh
00002a8c g     F .text	000000c4 __ssputs_r
00000c16 g     F .text	00000028 _ZN4RF2414startFastWriteEPKvhbb
00000c3e g     F .text	0000005c _ZN4RF245writeEPKvhb
00002128 g     F .text	000000f4 _ZN9Sensornet10CMDSetNameEP3GSMPKcS3_
00000cd8 g     F .text	00000014 _ZN4RF244readEPvh
000006c4 g     F .text	000000a8 _ZN3GSM4PollEv
00003054 g     F .text	00000016 memchr
0000250c g     F .text	00000094 _free_r
00001fe2 g     F .text	00000118 _ZN9Sensornet13ProcessPacketER12SensorPacket
000030a0 g     F .text	00000014 .hidden __gnu_thumb1_case_shi
00001770 g     F .text	00000004 _ZN5spi_tC2EP6Sercom
20000078 g       .bss	00000000 _bss
00001c5c g     F .text	00000030 _ZN6uart_t5printEPKci
000027b4 g     F .text	0000002c strstr
200002fc g     O .bss	0000020c g_uart1
0000221c  w    F .text	00000002 PM_Handler
00001958 g     F .text	00000024 systick_cycles
00001114 g     F .text	00000080 _ZN3Str7reserveEi
20000010 g     O .data	00000004 _ZN3Str11EmptyBufferE
0000276a g     F .text	00000022 strncmp
0000106c  w    F .text	0000001c _ZN9SensornetD2Ev
0000191c g     F .text	0000003c systick_init
0000278c g     F .text	00000028 strncpy
000003b4 g     F .text	00000084 _ZN3GSM4InitEv
000026fc g     F .text	00000034 strcasecmp
0000152c g     F .text	00000244 _ZN5spi_t4InitE12spi_pincfg_tt
00000214 g     F .text	00000012 _ZN3GSMD2Ev
000017a8 g     F .text	00000020 _ZN5spi_t8TransferEh
0000265c g     F .text	00000014 realloc
00001cb8 g     F .text	00000040 _ZN6uart_t4getcEv
00000ca4 g     F .text	0000002a _ZN4RF249availableEPh
0000246c g     F .text	0000001c __cxa_atexit
000027e0 g     F .text	00000050 strtok
0000240c  w    F .text	00000002 .hidden __aeabi_ldiv0
00000b0e g     F .text	0000000a _ZN4RF248flush_rxEv
000029ac g     F .text	00000056 _vsnprintf_r
00000228 g     F .text	000000b0 _ZN3GSM7CommandEPKcS1_j
00002a20 g     F .text	00000010 __malloc_lock
000035b8 g       .text	00000000 __fini_array_start
0000350c g     O .text	00000020 __sf_fake_stdin
000008b8 g     F .text	00000034 _ZN4RF243csnEb
00002a1c g     F .text	00000002 __retarget_lock_acquire_recursive
00001408 g     F .text	00000114 main
00001efc g     F .text	00000060 _ZN9Sensornet5beginEv
200000e4 g     O .bss	00000004 g_spi1
000022f8 g     F .text	00000000 .hidden __aeabi_uidiv
00000438 g     F .text	00000070 _ZN3GSM7SendSMSEPKcS1_
0000221c  w    F .text	00000002 SVC_Handler
20000000 g     F .data	0000000c delay_usec
0000221c  w    F .text	00000002 EVSYS_Handler
0000359c g       .text	00000000 __init_array_end
000025a0 g     F .text	000000bc _malloc_r
000005a4 g     F .text	00000068 _ZN3GSM10ProcessSMSEPKcS1_
0000221c  w    F .text	00000002 NVMCTRL_Handler
0000359c g     F .text	00000000 _fini
00000e24 g     F .text	00000024 _ZN4RF2415toggle_featuresEv
00001e1c g     F .text	00000090 _ZN6uart_t4readEv
00000870 g     F .text	0000002c _ZN3GSM9RemoveNumEPKc
00001a08 g     F .text	000001e8 _ZN6uart_t4initERK13uart_pincfg_tt
00001d84 g     F .text	00000098 _ZN6uart_t4findEPKc
00001eac g     F .text	00000010 SERCOM0_Handler
00002d50 g     F .text	000000de _printf_common
20000014 g     O .data	00000004 _impure_ptr
0000358c g       .text	00000000 __preinit_array_end
00002b50 g     F .text	00000200 _svfiprintf_r
00000b2c g     F .text	0000003e _ZN4RF24C1E6gpio_tS0_R5spi_t
20000000 g       .data	00000000 _data
00000000 g     O .text	0000008c exception_table
0000106c  w    F .text	0000001c _ZN9SensornetD1Ev
0000221c  w    F .text	00000002 DAC_Handler
00000948 g     F .text	0000002c _ZN4RF2413read_registerEh
000029ac g     F .text	00000056 _vsniprintf_r
00000a74 g     F .text	00000078 _ZN4RF2412read_payloadEPvh
00000b88 g     F .text	0000005a _ZN4RF2413stopListeningEv
00002404 g     F .text	00000008 .hidden __aeabi_uidivmod
20000078 g       .data	00000000 _edata
20000524 g       .bss	00000000 _end
20000519 g     O .bss	00000001 __lock___at_quick_exit_mutex
0000221c  w    F .text	00000002 PTC_Handler
00001edc g     F .text	00000020 _ZN9SensornetC2ERK4RF24
00000ee4 g     F .text	00000014 _ZN4RF2410setRetriesEhh
00000974 g     F .text	00000054 _ZN4RF2414write_registerEhPKhh
000002d8 g     F .text	00000044 _ZN3GSM13RepeatCommandEPKcS1_ii
00000e90 g     F .text	00000054 _ZN4RF2411setDataRateE15rf24_datarate_e
00001c40 g     F .text	0000001c _ZN6uart_t5writeEc
0000352c g     O .text	00000020 __sf_fake_stdout
00002460 g     F .text	0000000c atoi
000033eb g     O .text	00000101 _ctype_
0000240c  w    F .text	00000002 .hidden __aeabi_idiv0
0000358c g       .text	00000000 __init_array_start
00002410 g     F .text	00000050 .hidden __muldi3
000004fc g     F .text	000000a8 _ZN3GSM11GetNumLevelEPKc
2000051a g     O .bss	00000001 __lock___dd_hash_mutex
2000051b g     O .bss	00000001 __lock___tz_mutex
000000f0 g     F .text	00000124 _ZN3GSMC2E6gpio_tP6uart_t
00000d98 g     F .text	00000028 _ZN4RF2416closeReadingPipeEh
0000275c g     F .text	0000000e strlen
00002e30 g     F .text	00000224 _printf_i
20000510 g     O .bss	00000004 __malloc_sbrk_start
000000f0 g     F .text	00000124 _ZN3GSMC1E6gpio_tP6uart_t
00001770 g     F .text	00000004 _ZN5spi_tC1EP6Sercom
00002730 g     F .text	0000001c strchr
2000050c g     O .bss	00000004 __malloc_free_list
00000ef8 g     F .text	00000150 _ZN4RF245beginEv
0000358c g       .text	00000000 __preinit_array_start
000022e8 g     F .text	0000000e __aeabi_atexit
00000b6a g     F .text	00000012 _ZN4RF2410setChannelEh
0000197c g     F .text	00000018 millis
00000e48 g     F .text	0000001a _ZN4RF2410setAutoAckEb
00001bf0 g     F .text	00000050 _ZN6uart_t14sercom_handlerEv
00000d1c g     F .text	0000007c _ZN4RF2415openReadingPipeEhy
2000051c g     O .bss	00000001 __lock___sfp_recursive_mutex
000024e4 g     F .text	00000014 free
0000221c  w    F .text	00000002 SYSCTRL_Handler



Disassembly of section .text:

00000000 <exception_table>:
       0:	00 10 00 20 21 22 00 00 1d 22 00 00 1d 22 00 00     ... !"..."..."..
	...
      2c:	1d 22 00 00 00 00 00 00 00 00 00 00 1d 22 00 00     ."..........."..
      3c:	95 19 00 00 1d 22 00 00 1d 22 00 00 1d 22 00 00     ....."..."..."..
      4c:	1d 22 00 00 1d 22 00 00 1d 22 00 00 1d 22 00 00     ."..."..."..."..
      5c:	00 00 00 00 1d 22 00 00 ad 1e 00 00 bd 1e 00 00     ....."..........
      6c:	1d 22 00 00 1d 22 00 00 1d 22 00 00 1d 22 00 00     ."..."..."..."..
      7c:	1d 22 00 00 1d 22 00 00 1d 22 00 00 1d 22 00 00     ."..."..."..."..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000078 	.word	0x20000078
      ac:	00000000 	.word	0x00000000
      b0:	000035bc 	.word	0x000035bc

000000b4 <frame_dummy>:
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <frame_dummy+0x14>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4903      	ldr	r1, [pc, #12]	; (cc <frame_dummy+0x18>)
      be:	4804      	ldr	r0, [pc, #16]	; (d0 <frame_dummy+0x1c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	bd10      	pop	{r4, pc}
      c6:	46c0      	nop			; (mov r8, r8)
      c8:	00000000 	.word	0x00000000
      cc:	2000007c 	.word	0x2000007c
      d0:	000035bc 	.word	0x000035bc

000000d4 <_ZL8find_numPKc>:
#include <strings.h>
extern "C" {
#include <systick.h>
}

static int find_num(const char* str) {
      d4:	b510      	push	{r4, lr}
    while(*str) {
      d6:	7803      	ldrb	r3, [r0, #0]
      d8:	2b00      	cmp	r3, #0
      da:	d007      	beq.n	ec <_ZL8find_numPKc+0x18>
        if(isdigit(*str))
      dc:	3b30      	subs	r3, #48	; 0x30
      de:	2b09      	cmp	r3, #9
      e0:	d901      	bls.n	e6 <_ZL8find_numPKc+0x12>
            return atoi(str);
        str++;
      e2:	3001      	adds	r0, #1
    while(*str) {
      e4:	e7f7      	b.n	d6 <_ZL8find_numPKc+0x2>
            return atoi(str);
      e6:	f002 f9bb 	bl	2460 <atoi>
      ea:	e000      	b.n	ee <_ZL8find_numPKc+0x1a>
    }
    return 0;
      ec:	2000      	movs	r0, #0
}
      ee:	bd10      	pop	{r4, pc}

000000f0 <_ZN3GSMC1E6gpio_tP6uart_t>:
    }

    gsm->RemoveNum(args);
}

GSM::GSM(const gpio_t pwrkey, uart_t* uart) :
      f0:	b5f0      	push	{r4, r5, r6, r7, lr}
      f2:	b08d      	sub	sp, #52	; 0x34
      f4:	0005      	movs	r5, r0
      f6:	4668      	mov	r0, sp
      f8:	9100      	str	r1, [sp, #0]
      fa:	6042      	str	r2, [r0, #4]
    m_pwrkey(pwrkey), m_uart(uart)
      fc:	002e      	movs	r6, r5
      fe:	0002      	movs	r2, r0
     100:	ca12      	ldmia	r2!, {r1, r4}
     102:	c612      	stmia	r6!, {r1, r4}
     104:	0034      	movs	r4, r6
private:
    size_t m_size;
    T* m_data;

public:
    Vector() : m_size(0), m_data(NULL) {}
     106:	2200      	movs	r2, #0
     108:	60aa      	str	r2, [r5, #8]
     10a:	60ea      	str	r2, [r5, #12]
     10c:	612b      	str	r3, [r5, #16]
        } else {
            PORT->Group[port].DIRSET.reg = 1 << pin;
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
        }
    }
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     10e:	6841      	ldr	r1, [r0, #4]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     110:	3201      	adds	r2, #1
     112:	0010      	movs	r0, r2
     114:	4088      	lsls	r0, r1
     116:	682b      	ldr	r3, [r5, #0]
     118:	01db      	lsls	r3, r3, #7
     11a:	4f3c      	ldr	r7, [pc, #240]	; (20c <_ZN3GSMC1E6gpio_tP6uart_t+0x11c>)
     11c:	46bc      	mov	ip, r7
     11e:	4463      	add	r3, ip
     120:	6098      	str	r0, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     122:	185b      	adds	r3, r3, r1
     124:	3340      	adds	r3, #64	; 0x40
     126:	7819      	ldrb	r1, [r3, #0]
     128:	2002      	movs	r0, #2
     12a:	4381      	bics	r1, r0
     12c:	7019      	strb	r1, [r3, #0]
    }
    inline void drvstr(const gpio_t& gp, const bool en) { drvstr(gp.port, gp.pin, en); }

    inline void set(const int port, const int pin, const bool en) {
        if(en)
            PORT->Group[port].OUTSET.reg = 1 << pin;
     12e:	686b      	ldr	r3, [r5, #4]
     130:	409a      	lsls	r2, r3
     132:	682b      	ldr	r3, [r5, #0]
     134:	01db      	lsls	r3, r3, #7
     136:	4463      	add	r3, ip
     138:	619a      	str	r2, [r3, #24]
{
    gpio::mode(m_pwrkey, GPIO_DIR_OUT); // Set pwrkey pin to output
    gpio::set(m_pwrkey, true); // Set pwrkey to high

    m_smsfuncs.push_back({"exec", func_exec, LEVEL_ADMIN});
     13a:	aa03      	add	r2, sp, #12
     13c:	4b34      	ldr	r3, [pc, #208]	; (210 <_ZN3GSMC1E6gpio_tP6uart_t+0x120>)
     13e:	cb83      	ldmia	r3!, {r0, r1, r7}
     140:	c283      	stmia	r2!, {r0, r1, r7}
    ~Vector() {
        if(m_data) free(m_data);
    }

    void push_back(const T& elem) {
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     142:	6831      	ldr	r1, [r6, #0]
     144:	2900      	cmp	r1, #0
     146:	d054      	beq.n	1f2 <_ZN3GSMC1E6gpio_tP6uart_t+0x102>
     148:	6870      	ldr	r0, [r6, #4]
     14a:	3101      	adds	r1, #1
     14c:	004b      	lsls	r3, r1, #1
     14e:	1859      	adds	r1, r3, r1
     150:	0089      	lsls	r1, r1, #2
     152:	f002 fa83 	bl	265c <realloc>
        if(!new_data) return;
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <_ZN3GSMC1E6gpio_tP6uart_t+0x84>
        m_data = new_data;
     15a:	6060      	str	r0, [r4, #4]

        memcpy(m_data + m_size, &elem, sizeof(T));
     15c:	6822      	ldr	r2, [r4, #0]
     15e:	0053      	lsls	r3, r2, #1
     160:	189b      	adds	r3, r3, r2
     162:	009b      	lsls	r3, r3, #2
     164:	18c0      	adds	r0, r0, r3
     166:	220c      	movs	r2, #12
     168:	a903      	add	r1, sp, #12
     16a:	f002 f9c5 	bl	24f8 <memcpy>
        m_size++;
     16e:	6823      	ldr	r3, [r4, #0]
     170:	3301      	adds	r3, #1
     172:	6023      	str	r3, [r4, #0]
    m_smsfuncs.push_back({"setnum", func_setnum, LEVEL_ADMIN});
     174:	aa06      	add	r2, sp, #24
     176:	4b26      	ldr	r3, [pc, #152]	; (210 <_ZN3GSMC1E6gpio_tP6uart_t+0x120>)
     178:	330c      	adds	r3, #12
     17a:	cb43      	ldmia	r3!, {r0, r1, r6}
     17c:	c243      	stmia	r2!, {r0, r1, r6}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     17e:	6821      	ldr	r1, [r4, #0]
     180:	2900      	cmp	r1, #0
     182:	d03a      	beq.n	1fa <_ZN3GSMC1E6gpio_tP6uart_t+0x10a>
     184:	3101      	adds	r1, #1
     186:	004b      	lsls	r3, r1, #1
     188:	1859      	adds	r1, r3, r1
     18a:	0089      	lsls	r1, r1, #2
     18c:	6860      	ldr	r0, [r4, #4]
     18e:	f002 fa65 	bl	265c <realloc>
        if(!new_data) return;
     192:	2800      	cmp	r0, #0
     194:	d00c      	beq.n	1b0 <_ZN3GSMC1E6gpio_tP6uart_t+0xc0>
        m_data = new_data;
     196:	6060      	str	r0, [r4, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
     198:	6822      	ldr	r2, [r4, #0]
     19a:	0053      	lsls	r3, r2, #1
     19c:	189b      	adds	r3, r3, r2
     19e:	009b      	lsls	r3, r3, #2
     1a0:	18c0      	adds	r0, r0, r3
     1a2:	220c      	movs	r2, #12
     1a4:	a906      	add	r1, sp, #24
     1a6:	f002 f9a7 	bl	24f8 <memcpy>
        m_size++;
     1aa:	6823      	ldr	r3, [r4, #0]
     1ac:	3301      	adds	r3, #1
     1ae:	6023      	str	r3, [r4, #0]
    m_smsfuncs.push_back({"delnum", func_delnum, LEVEL_ADMIN});
     1b0:	aa09      	add	r2, sp, #36	; 0x24
     1b2:	4b17      	ldr	r3, [pc, #92]	; (210 <_ZN3GSMC1E6gpio_tP6uart_t+0x120>)
     1b4:	3318      	adds	r3, #24
     1b6:	cb43      	ldmia	r3!, {r0, r1, r6}
     1b8:	c243      	stmia	r2!, {r0, r1, r6}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     1ba:	6821      	ldr	r1, [r4, #0]
     1bc:	2900      	cmp	r1, #0
     1be:	d020      	beq.n	202 <_ZN3GSMC1E6gpio_tP6uart_t+0x112>
     1c0:	3101      	adds	r1, #1
     1c2:	004b      	lsls	r3, r1, #1
     1c4:	1859      	adds	r1, r3, r1
     1c6:	0089      	lsls	r1, r1, #2
     1c8:	6860      	ldr	r0, [r4, #4]
     1ca:	f002 fa47 	bl	265c <realloc>
        if(!new_data) return;
     1ce:	2800      	cmp	r0, #0
     1d0:	d00c      	beq.n	1ec <_ZN3GSMC1E6gpio_tP6uart_t+0xfc>
        m_data = new_data;
     1d2:	6060      	str	r0, [r4, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
     1d4:	6822      	ldr	r2, [r4, #0]
     1d6:	0053      	lsls	r3, r2, #1
     1d8:	189b      	adds	r3, r3, r2
     1da:	009b      	lsls	r3, r3, #2
     1dc:	18c0      	adds	r0, r0, r3
     1de:	220c      	movs	r2, #12
     1e0:	a909      	add	r1, sp, #36	; 0x24
     1e2:	f002 f989 	bl	24f8 <memcpy>
        m_size++;
     1e6:	6823      	ldr	r3, [r4, #0]
     1e8:	3301      	adds	r3, #1
     1ea:	6023      	str	r3, [r4, #0]
}
     1ec:	0028      	movs	r0, r5
     1ee:	b00d      	add	sp, #52	; 0x34
     1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     1f2:	200c      	movs	r0, #12
     1f4:	f002 f96c 	bl	24d0 <malloc>
     1f8:	e7ad      	b.n	156 <_ZN3GSMC1E6gpio_tP6uart_t+0x66>
     1fa:	200c      	movs	r0, #12
     1fc:	f002 f968 	bl	24d0 <malloc>
     200:	e7c7      	b.n	192 <_ZN3GSMC1E6gpio_tP6uart_t+0xa2>
     202:	200c      	movs	r0, #12
     204:	f002 f964 	bl	24d0 <malloc>
     208:	e7e1      	b.n	1ce <_ZN3GSMC1E6gpio_tP6uart_t+0xde>
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	000030b4 	.word	0x000030b4

00000214 <_ZN3GSMD1Ev>:

GSM::~GSM() {
     214:	b510      	push	{r4, lr}
     216:	0004      	movs	r4, r0
        if(m_data) free(m_data);
     218:	68c0      	ldr	r0, [r0, #12]
     21a:	2800      	cmp	r0, #0
     21c:	d001      	beq.n	222 <_ZN3GSMD1Ev+0xe>
     21e:	f002 f961 	bl	24e4 <free>
    
}
     222:	0020      	movs	r0, r4
     224:	bd10      	pop	{r4, pc}
     226:	Address 0x00000226 is out of bounds.


00000228 <_ZN3GSM7CommandEPKcS1_j>:

bool GSM::Command(const char* cmd, const char* result, unsigned int response_time) {
     228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     22a:	0004      	movs	r4, r0
     22c:	0017      	movs	r7, r2
     22e:	001e      	movs	r6, r3
    uint32_t start;

    m_uart->flush_rx();
     230:	6903      	ldr	r3, [r0, #16]
    // Allocates a buffer and reads all available data into it
    char* read();

    bool rxempty();
    void flush_rx() {
        m_rxhead = 0;
     232:	2200      	movs	r2, #0
     234:	2081      	movs	r0, #129	; 0x81
     236:	0080      	lsls	r0, r0, #2
     238:	521a      	strh	r2, [r3, r0]
        m_rxtail = 0;
     23a:	4825      	ldr	r0, [pc, #148]	; (2d0 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     23c:	521a      	strh	r2, [r3, r0]
        m_rxfull = false;
     23e:	2000      	movs	r0, #0
     240:	2282      	movs	r2, #130	; 0x82
     242:	0092      	lsls	r2, r2, #2
     244:	5498      	strb	r0, [r3, r2]

    m_uart->print(cmd);
     246:	2201      	movs	r2, #1
     248:	4252      	negs	r2, r2
     24a:	6920      	ldr	r0, [r4, #16]
     24c:	f001 fd06 	bl	1c5c <_ZN6uart_t5printEPKci>
    m_uart->write('\r');
     250:	210d      	movs	r1, #13
     252:	6920      	ldr	r0, [r4, #16]
     254:	f001 fcf4 	bl	1c40 <_ZN6uart_t5writeEc>
    // Allow up to response_time milliseconds to get a response
    start = millis();
     258:	f001 fb90 	bl	197c <millis>
     25c:	0005      	movs	r5, r0
     25e:	e012      	b.n	286 <_ZN3GSM7CommandEPKcS1_j+0x5e>
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
            return m_rxhead - m_rxtail;
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     260:	2281      	movs	r2, #129	; 0x81
     262:	0092      	lsls	r2, r2, #2
     264:	5a99      	ldrh	r1, [r3, r2]
     266:	4a1a      	ldr	r2, [pc, #104]	; (2d0 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     268:	5a9b      	ldrh	r3, [r3, r2]
     26a:	1ac9      	subs	r1, r1, r3
     26c:	b289      	uxth	r1, r1
     26e:	2380      	movs	r3, #128	; 0x80
     270:	009b      	lsls	r3, r3, #2
     272:	469c      	mov	ip, r3
     274:	4461      	add	r1, ip
     276:	b289      	uxth	r1, r1
    while(!m_uart->available())
     278:	2900      	cmp	r1, #0
     27a:	d116      	bne.n	2aa <_ZN3GSM7CommandEPKcS1_j+0x82>
        if(millis() - start >= response_time)
     27c:	f001 fb7e 	bl	197c <millis>
     280:	1b40      	subs	r0, r0, r5
     282:	42b0      	cmp	r0, r6
     284:	d21f      	bcs.n	2c6 <_ZN3GSM7CommandEPKcS1_j+0x9e>
    while(!m_uart->available())
     286:	6923      	ldr	r3, [r4, #16]
        if(m_rxhead >= m_rxtail)
     288:	2281      	movs	r2, #129	; 0x81
     28a:	0092      	lsls	r2, r2, #2
     28c:	5a99      	ldrh	r1, [r3, r2]
     28e:	b289      	uxth	r1, r1
     290:	4a0f      	ldr	r2, [pc, #60]	; (2d0 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     292:	5a9a      	ldrh	r2, [r3, r2]
     294:	b292      	uxth	r2, r2
     296:	4291      	cmp	r1, r2
     298:	d3e2      	bcc.n	260 <_ZN3GSM7CommandEPKcS1_j+0x38>
            return m_rxhead - m_rxtail;
     29a:	2281      	movs	r2, #129	; 0x81
     29c:	0092      	lsls	r2, r2, #2
     29e:	5a99      	ldrh	r1, [r3, r2]
     2a0:	4a0b      	ldr	r2, [pc, #44]	; (2d0 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     2a2:	5a9b      	ldrh	r3, [r3, r2]
     2a4:	1ac9      	subs	r1, r1, r3
     2a6:	b289      	uxth	r1, r1
     2a8:	e7e6      	b.n	278 <_ZN3GSM7CommandEPKcS1_j+0x50>
            return false;
    
    delay_usec(100000); // wait 100 ms to get the whole response
     2aa:	480a      	ldr	r0, [pc, #40]	; (2d4 <_ZN3GSM7CommandEPKcS1_j+0xac>)
     2ac:	f003 f97c 	bl	35a8 <__delay_usec_veneer>

    if(!result) return true;
     2b0:	2f00      	cmp	r7, #0
     2b2:	d00a      	beq.n	2ca <_ZN3GSM7CommandEPKcS1_j+0xa2>
    return m_uart->find(result) != -1;
     2b4:	6920      	ldr	r0, [r4, #16]
     2b6:	0039      	movs	r1, r7
     2b8:	f001 fd64 	bl	1d84 <_ZN6uart_t4findEPKc>
     2bc:	3001      	adds	r0, #1
     2be:	1e43      	subs	r3, r0, #1
     2c0:	4198      	sbcs	r0, r3
     2c2:	b2c0      	uxtb	r0, r0
     2c4:	e000      	b.n	2c8 <_ZN3GSM7CommandEPKcS1_j+0xa0>
            return false;
     2c6:	2000      	movs	r0, #0
}
     2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!result) return true;
     2ca:	2001      	movs	r0, #1
     2cc:	e7fc      	b.n	2c8 <_ZN3GSM7CommandEPKcS1_j+0xa0>
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	00000206 	.word	0x00000206
     2d4:	000186a0 	.word	0x000186a0

000002d8 <_ZN3GSM13RepeatCommandEPKcS1_ii>:

bool GSM::RepeatCommand(const char* cmd, const char* result, int repeats, int response_time) {
     2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2da:	46ce      	mov	lr, r9
     2dc:	4647      	mov	r7, r8
     2de:	b580      	push	{r7, lr}
     2e0:	4680      	mov	r8, r0
     2e2:	000f      	movs	r7, r1
     2e4:	0016      	movs	r6, r2
     2e6:	001d      	movs	r5, r3
     2e8:	9b08      	ldr	r3, [sp, #32]
     2ea:	4699      	mov	r9, r3
    for(int i = 0; i < repeats; i++) {
     2ec:	2400      	movs	r4, #0
     2ee:	42ac      	cmp	r4, r5
     2f0:	da0c      	bge.n	30c <_ZN3GSM13RepeatCommandEPKcS1_ii+0x34>
        if(Command(cmd, result, response_time))
     2f2:	464b      	mov	r3, r9
     2f4:	0032      	movs	r2, r6
     2f6:	0039      	movs	r1, r7
     2f8:	4640      	mov	r0, r8
     2fa:	f7ff ff95 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
     2fe:	2800      	cmp	r0, #0
     300:	d105      	bne.n	30e <_ZN3GSM13RepeatCommandEPKcS1_ii+0x36>
            return true;
        
        delay_usec(500000);
     302:	4805      	ldr	r0, [pc, #20]	; (318 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x40>)
     304:	f003 f950 	bl	35a8 <__delay_usec_veneer>
    for(int i = 0; i < repeats; i++) {
     308:	3401      	adds	r4, #1
     30a:	e7f0      	b.n	2ee <_ZN3GSM13RepeatCommandEPKcS1_ii+0x16>
    }
    return false;
     30c:	2000      	movs	r0, #0
}
     30e:	bc0c      	pop	{r2, r3}
     310:	4690      	mov	r8, r2
     312:	4699      	mov	r9, r3
     314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	0007a120 	.word	0x0007a120

0000031c <_ZN3GSM7PowerOnEv>:

bool GSM::PowerOn() {
     31c:	b5f0      	push	{r4, r5, r6, r7, lr}
     31e:	46c6      	mov	lr, r8
     320:	b500      	push	{lr}
     322:	b082      	sub	sp, #8
     324:	0004      	movs	r4, r0
    m_uart->write('\r');
     326:	210d      	movs	r1, #13
     328:	6900      	ldr	r0, [r0, #16]
     32a:	f001 fc89 	bl	1c40 <_ZN6uart_t5writeEc>

    // Check if the GSM module is already powered on
    if(Command("AT", "OK", 500))
     32e:	23fa      	movs	r3, #250	; 0xfa
     330:	005b      	lsls	r3, r3, #1
     332:	4a1c      	ldr	r2, [pc, #112]	; (3a4 <_ZN3GSM7PowerOnEv+0x88>)
     334:	491c      	ldr	r1, [pc, #112]	; (3a8 <_ZN3GSM7PowerOnEv+0x8c>)
     336:	0020      	movs	r0, r4
     338:	f7ff ff76 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
     33c:	1e07      	subs	r7, r0, #0
     33e:	d12b      	bne.n	398 <_ZN3GSM7PowerOnEv+0x7c>
        return true;
    
    // Fail after 3 attempts to power cycle
    for(int i = 0; i < 3; i++) {
     340:	2600      	movs	r6, #0
     342:	2e02      	cmp	r6, #2
     344:	dc28      	bgt.n	398 <_ZN3GSM7PowerOnEv+0x7c>
        else
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     346:	2501      	movs	r5, #1
     348:	002a      	movs	r2, r5
     34a:	6863      	ldr	r3, [r4, #4]
     34c:	409a      	lsls	r2, r3
     34e:	6823      	ldr	r3, [r4, #0]
     350:	01db      	lsls	r3, r3, #7
     352:	4916      	ldr	r1, [pc, #88]	; (3ac <_ZN3GSM7PowerOnEv+0x90>)
     354:	468c      	mov	ip, r1
     356:	4463      	add	r3, ip
     358:	615a      	str	r2, [r3, #20]
        gpio::set(m_pwrkey, false); // Set pwrkey to low
        delay_usec(1000000); // Wait for SIM800C to register it
     35a:	4b15      	ldr	r3, [pc, #84]	; (3b0 <_ZN3GSM7PowerOnEv+0x94>)
     35c:	4698      	mov	r8, r3
     35e:	0018      	movs	r0, r3
     360:	f003 f922 	bl	35a8 <__delay_usec_veneer>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     364:	6863      	ldr	r3, [r4, #4]
     366:	409d      	lsls	r5, r3
     368:	6823      	ldr	r3, [r4, #0]
     36a:	01db      	lsls	r3, r3, #7
     36c:	4a0f      	ldr	r2, [pc, #60]	; (3ac <_ZN3GSM7PowerOnEv+0x90>)
     36e:	4694      	mov	ip, r2
     370:	4463      	add	r3, ip
     372:	619d      	str	r5, [r3, #24]
        gpio::set(m_pwrkey, true); // Set pwrkey to high
        delay_usec(1000000);
     374:	4640      	mov	r0, r8
     376:	f003 f917 	bl	35a8 <__delay_usec_veneer>

        // Wait for response to AT command
        if(RepeatCommand("AT", "OK", 6, 500))
     37a:	23fa      	movs	r3, #250	; 0xfa
     37c:	005b      	lsls	r3, r3, #1
     37e:	9300      	str	r3, [sp, #0]
     380:	3bef      	subs	r3, #239	; 0xef
     382:	3bff      	subs	r3, #255	; 0xff
     384:	4a07      	ldr	r2, [pc, #28]	; (3a4 <_ZN3GSM7PowerOnEv+0x88>)
     386:	4908      	ldr	r1, [pc, #32]	; (3a8 <_ZN3GSM7PowerOnEv+0x8c>)
     388:	0020      	movs	r0, r4
     38a:	f7ff ffa5 	bl	2d8 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     38e:	2800      	cmp	r0, #0
     390:	d101      	bne.n	396 <_ZN3GSM7PowerOnEv+0x7a>
    for(int i = 0; i < 3; i++) {
     392:	3601      	adds	r6, #1
     394:	e7d5      	b.n	342 <_ZN3GSM7PowerOnEv+0x26>
            return true;
     396:	0007      	movs	r7, r0
    }
    return false;
}
     398:	0038      	movs	r0, r7
     39a:	b002      	add	sp, #8
     39c:	bc04      	pop	{r2}
     39e:	4690      	mov	r8, r2
     3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	000031fc 	.word	0x000031fc
     3a8:	00003138 	.word	0x00003138
     3ac:	41004400 	.word	0x41004400
     3b0:	000f4240 	.word	0x000f4240

000003b4 <_ZN3GSM4InitEv>:

bool GSM::Init() {
     3b4:	b570      	push	{r4, r5, r6, lr}
     3b6:	b082      	sub	sp, #8
     3b8:	0005      	movs	r5, r0
    if(!PowerOn())
     3ba:	f7ff ffaf 	bl	31c <_ZN3GSM7PowerOnEv>
     3be:	1e04      	subs	r4, r0, #0
     3c0:	d102      	bne.n	3c8 <_ZN3GSM4InitEv+0x14>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms

    m_uart->flush_rx();

    return true;
}
     3c2:	0020      	movs	r0, r4
     3c4:	b002      	add	sp, #8
     3c6:	bd70      	pop	{r4, r5, r6, pc}
    Command("ATE0");
     3c8:	4c14      	ldr	r4, [pc, #80]	; (41c <_ZN3GSM4InitEv+0x68>)
     3ca:	0023      	movs	r3, r4
     3cc:	2200      	movs	r2, #0
     3ce:	4914      	ldr	r1, [pc, #80]	; (420 <_ZN3GSM4InitEv+0x6c>)
     3d0:	0028      	movs	r0, r5
     3d2:	f7ff ff29 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
    if(!RepeatCommand("AT+CREG?", "+CREG: 0,1", 25))
     3d6:	9400      	str	r4, [sp, #0]
     3d8:	2319      	movs	r3, #25
     3da:	4a12      	ldr	r2, [pc, #72]	; (424 <_ZN3GSM4InitEv+0x70>)
     3dc:	4912      	ldr	r1, [pc, #72]	; (428 <_ZN3GSM4InitEv+0x74>)
     3de:	0028      	movs	r0, r5
     3e0:	f7ff ff7a 	bl	2d8 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     3e4:	1e04      	subs	r4, r0, #0
     3e6:	d0ec      	beq.n	3c2 <_ZN3GSM4InitEv+0xe>
    Command("AT+CMGF=1"); // SMS text mode
     3e8:	4e0c      	ldr	r6, [pc, #48]	; (41c <_ZN3GSM4InitEv+0x68>)
     3ea:	0033      	movs	r3, r6
     3ec:	2200      	movs	r2, #0
     3ee:	490f      	ldr	r1, [pc, #60]	; (42c <_ZN3GSM4InitEv+0x78>)
     3f0:	0028      	movs	r0, r5
     3f2:	f7ff ff19 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms
     3f6:	0033      	movs	r3, r6
     3f8:	2200      	movs	r2, #0
     3fa:	490d      	ldr	r1, [pc, #52]	; (430 <_ZN3GSM4InitEv+0x7c>)
     3fc:	0028      	movs	r0, r5
     3fe:	f7ff ff13 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
    m_uart->flush_rx();
     402:	692b      	ldr	r3, [r5, #16]
        m_rxhead = 0;
     404:	2200      	movs	r2, #0
     406:	2181      	movs	r1, #129	; 0x81
     408:	0089      	lsls	r1, r1, #2
     40a:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     40c:	4909      	ldr	r1, [pc, #36]	; (434 <_ZN3GSM4InitEv+0x80>)
     40e:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     410:	2100      	movs	r1, #0
     412:	2282      	movs	r2, #130	; 0x82
     414:	0092      	lsls	r2, r2, #2
     416:	5499      	strb	r1, [r3, r2]
    return true;
     418:	e7d3      	b.n	3c2 <_ZN3GSM4InitEv+0xe>
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	00000bb8 	.word	0x00000bb8
     420:	0000313c 	.word	0x0000313c
     424:	00003144 	.word	0x00003144
     428:	00003150 	.word	0x00003150
     42c:	0000315c 	.word	0x0000315c
     430:	00003168 	.word	0x00003168
     434:	00000206 	.word	0x00000206

00000438 <_ZN3GSM7SendSMSEPKcS1_>:
            break;
        }
    }
}

bool GSM::SendSMS(const char* number, const char* text) {
     438:	b530      	push	{r4, r5, lr}
     43a:	b091      	sub	sp, #68	; 0x44
     43c:	0004      	movs	r4, r0
     43e:	000b      	movs	r3, r1
     440:	0015      	movs	r5, r2
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+CMGS=\"%s\"", number);
     442:	4a13      	ldr	r2, [pc, #76]	; (490 <_ZN3GSM7SendSMSEPKcS1_+0x58>)
     444:	2140      	movs	r1, #64	; 0x40
     446:	4668      	mov	r0, sp
     448:	f002 f924 	bl	2694 <sniprintf>
    if(!Command(buf))
     44c:	4b11      	ldr	r3, [pc, #68]	; (494 <_ZN3GSM7SendSMSEPKcS1_+0x5c>)
     44e:	2200      	movs	r2, #0
     450:	4669      	mov	r1, sp
     452:	0020      	movs	r0, r4
     454:	f7ff fee8 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
     458:	2800      	cmp	r0, #0
     45a:	d101      	bne.n	460 <_ZN3GSM7SendSMSEPKcS1_+0x28>
    m_uart->print(text);

    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
    m_uart->flush_rx();
    return success;
}
     45c:	b011      	add	sp, #68	; 0x44
     45e:	bd30      	pop	{r4, r5, pc}
    m_uart->print(text);
     460:	2201      	movs	r2, #1
     462:	4252      	negs	r2, r2
     464:	0029      	movs	r1, r5
     466:	6920      	ldr	r0, [r4, #16]
     468:	f001 fbf8 	bl	1c5c <_ZN6uart_t5printEPKci>
    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
     46c:	4b0a      	ldr	r3, [pc, #40]	; (498 <_ZN3GSM7SendSMSEPKcS1_+0x60>)
     46e:	4a0b      	ldr	r2, [pc, #44]	; (49c <_ZN3GSM7SendSMSEPKcS1_+0x64>)
     470:	490b      	ldr	r1, [pc, #44]	; (4a0 <_ZN3GSM7SendSMSEPKcS1_+0x68>)
     472:	0020      	movs	r0, r4
     474:	f7ff fed8 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
    m_uart->flush_rx();
     478:	6923      	ldr	r3, [r4, #16]
        m_rxhead = 0;
     47a:	2200      	movs	r2, #0
     47c:	2181      	movs	r1, #129	; 0x81
     47e:	0089      	lsls	r1, r1, #2
     480:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     482:	4908      	ldr	r1, [pc, #32]	; (4a4 <_ZN3GSM7SendSMSEPKcS1_+0x6c>)
     484:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     486:	2100      	movs	r1, #0
     488:	2282      	movs	r2, #130	; 0x82
     48a:	0092      	lsls	r2, r2, #2
     48c:	5499      	strb	r1, [r3, r2]
    return success;
     48e:	e7e5      	b.n	45c <_ZN3GSM7SendSMSEPKcS1_+0x24>
     490:	0000317c 	.word	0x0000317c
     494:	00000bb8 	.word	0x00000bb8
     498:	0000ea60 	.word	0x0000ea60
     49c:	0000318c 	.word	0x0000318c
     4a0:	00003194 	.word	0x00003194
     4a4:	00000206 	.word	0x00000206

000004a8 <_ZL9func_execP3GSMPKcS2_>:
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     4a8:	b570      	push	{r4, r5, r6, lr}
     4aa:	0004      	movs	r4, r0
     4ac:	000d      	movs	r5, r1
     4ae:	0011      	movs	r1, r2
    if(!gsm->Command(args)) {
     4b0:	4b0f      	ldr	r3, [pc, #60]	; (4f0 <_ZL9func_execP3GSMPKcS2_+0x48>)
     4b2:	2200      	movs	r2, #0
     4b4:	f7ff feb8 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
     4b8:	2800      	cmp	r0, #0
     4ba:	d105      	bne.n	4c8 <_ZL9func_execP3GSMPKcS2_+0x20>
        gsm->SendSMS(sender, "Command timed out");
     4bc:	4a0d      	ldr	r2, [pc, #52]	; (4f4 <_ZL9func_execP3GSMPKcS2_+0x4c>)
     4be:	0029      	movs	r1, r5
     4c0:	0020      	movs	r0, r4
     4c2:	f7ff ffb9 	bl	438 <_ZN3GSM7SendSMSEPKcS1_>
}
     4c6:	bd70      	pop	{r4, r5, r6, pc}
        char* resp = gsm->m_uart->read();
     4c8:	6920      	ldr	r0, [r4, #16]
     4ca:	f001 fca7 	bl	1e1c <_ZN6uart_t4readEv>
     4ce:	1e06      	subs	r6, r0, #0
        if(!resp) {
     4d0:	d008      	beq.n	4e4 <_ZL9func_execP3GSMPKcS2_+0x3c>
            gsm->SendSMS(sender, resp);
     4d2:	0002      	movs	r2, r0
     4d4:	0029      	movs	r1, r5
     4d6:	0020      	movs	r0, r4
     4d8:	f7ff ffae 	bl	438 <_ZN3GSM7SendSMSEPKcS1_>
            free(resp);
     4dc:	0030      	movs	r0, r6
     4de:	f002 f801 	bl	24e4 <free>
}
     4e2:	e7f0      	b.n	4c6 <_ZL9func_execP3GSMPKcS2_+0x1e>
            gsm->SendSMS(sender, "uart->read() returned null");
     4e4:	4a04      	ldr	r2, [pc, #16]	; (4f8 <_ZL9func_execP3GSMPKcS2_+0x50>)
     4e6:	0029      	movs	r1, r5
     4e8:	0020      	movs	r0, r4
     4ea:	f7ff ffa5 	bl	438 <_ZN3GSM7SendSMSEPKcS1_>
     4ee:	e7ea      	b.n	4c6 <_ZL9func_execP3GSMPKcS2_+0x1e>
     4f0:	00000bb8 	.word	0x00000bb8
     4f4:	00003198 	.word	0x00003198
     4f8:	000031ac 	.word	0x000031ac

000004fc <_ZN3GSM11GetNumLevelEPKc>:

char GSM::GetNumLevel(const char* num) {
     4fc:	b510      	push	{r4, lr}
     4fe:	b090      	sub	sp, #64	; 0x40
     500:	0004      	movs	r4, r0
     502:	000b      	movs	r3, r1
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+FSREAD=C:\\%s.txt,0,1,0", num);
     504:	4a23      	ldr	r2, [pc, #140]	; (594 <_ZN3GSM11GetNumLevelEPKc+0x98>)
     506:	2140      	movs	r1, #64	; 0x40
     508:	4668      	mov	r0, sp
     50a:	f002 f8c3 	bl	2694 <sniprintf>
    if(!Command(buf, "OK"))
     50e:	4b22      	ldr	r3, [pc, #136]	; (598 <_ZN3GSM11GetNumLevelEPKc+0x9c>)
     510:	4a22      	ldr	r2, [pc, #136]	; (59c <_ZN3GSM11GetNumLevelEPKc+0xa0>)
     512:	4669      	mov	r1, sp
     514:	0020      	movs	r0, r4
     516:	f7ff fe87 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
     51a:	2800      	cmp	r0, #0
     51c:	d036      	beq.n	58c <_ZN3GSM11GetNumLevelEPKc+0x90>
        return 0;
    if(m_uart->available() < 3) return 0;
     51e:	6920      	ldr	r0, [r4, #16]
        if(m_rxhead >= m_rxtail)
     520:	2381      	movs	r3, #129	; 0x81
     522:	009b      	lsls	r3, r3, #2
     524:	5ac2      	ldrh	r2, [r0, r3]
     526:	b292      	uxth	r2, r2
     528:	4b1d      	ldr	r3, [pc, #116]	; (5a0 <_ZN3GSM11GetNumLevelEPKc+0xa4>)
     52a:	5ac3      	ldrh	r3, [r0, r3]
     52c:	b29b      	uxth	r3, r3
     52e:	429a      	cmp	r2, r3
     530:	d30a      	bcc.n	548 <_ZN3GSM11GetNumLevelEPKc+0x4c>
            return m_rxhead - m_rxtail;
     532:	2381      	movs	r3, #129	; 0x81
     534:	009b      	lsls	r3, r3, #2
     536:	5ac3      	ldrh	r3, [r0, r3]
     538:	4a19      	ldr	r2, [pc, #100]	; (5a0 <_ZN3GSM11GetNumLevelEPKc+0xa4>)
     53a:	5a82      	ldrh	r2, [r0, r2]
     53c:	1a9b      	subs	r3, r3, r2
     53e:	b29b      	uxth	r3, r3
     540:	2b02      	cmp	r3, #2
     542:	d80e      	bhi.n	562 <_ZN3GSM11GetNumLevelEPKc+0x66>
     544:	2000      	movs	r0, #0
     546:	e022      	b.n	58e <_ZN3GSM11GetNumLevelEPKc+0x92>
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     548:	2381      	movs	r3, #129	; 0x81
     54a:	009b      	lsls	r3, r3, #2
     54c:	5ac3      	ldrh	r3, [r0, r3]
     54e:	4a14      	ldr	r2, [pc, #80]	; (5a0 <_ZN3GSM11GetNumLevelEPKc+0xa4>)
     550:	5a82      	ldrh	r2, [r0, r2]
     552:	1a9b      	subs	r3, r3, r2
     554:	b29b      	uxth	r3, r3
     556:	2280      	movs	r2, #128	; 0x80
     558:	0092      	lsls	r2, r2, #2
     55a:	4694      	mov	ip, r2
     55c:	4463      	add	r3, ip
     55e:	b29b      	uxth	r3, r3
     560:	e7ee      	b.n	540 <_ZN3GSM11GetNumLevelEPKc+0x44>

    m_uart->getc(); m_uart->getc(); // skip \r\n
     562:	f001 fba9 	bl	1cb8 <_ZN6uart_t4getcEv>
     566:	6920      	ldr	r0, [r4, #16]
     568:	f001 fba6 	bl	1cb8 <_ZN6uart_t4getcEv>

    char level = m_uart->getc();
     56c:	6920      	ldr	r0, [r4, #16]
     56e:	f001 fba3 	bl	1cb8 <_ZN6uart_t4getcEv>
    m_uart->flush_rx();
     572:	6923      	ldr	r3, [r4, #16]
        m_rxhead = 0;
     574:	2200      	movs	r2, #0
     576:	2181      	movs	r1, #129	; 0x81
     578:	0089      	lsls	r1, r1, #2
     57a:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     57c:	4908      	ldr	r1, [pc, #32]	; (5a0 <_ZN3GSM11GetNumLevelEPKc+0xa4>)
     57e:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     580:	2100      	movs	r1, #0
     582:	2282      	movs	r2, #130	; 0x82
     584:	0092      	lsls	r2, r2, #2
     586:	5499      	strb	r1, [r3, r2]

    asm volatile("nop");
     588:	46c0      	nop			; (mov r8, r8)

    return level;
     58a:	e000      	b.n	58e <_ZN3GSM11GetNumLevelEPKc+0x92>
        return 0;
     58c:	2000      	movs	r0, #0
}
     58e:	b010      	add	sp, #64	; 0x40
     590:	bd10      	pop	{r4, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	000031c8 	.word	0x000031c8
     598:	00000bb8 	.word	0x00000bb8
     59c:	000031fc 	.word	0x000031fc
     5a0:	00000206 	.word	0x00000206

000005a4 <_ZN3GSM10ProcessSMSEPKcS1_>:
void GSM::ProcessSMS(const char* text, const char* sender) {
     5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5a6:	46c6      	mov	lr, r8
     5a8:	b500      	push	{lr}
     5aa:	b082      	sub	sp, #8
     5ac:	0006      	movs	r6, r0
     5ae:	000f      	movs	r7, r1
     5b0:	9201      	str	r2, [sp, #4]
    char* args_start = strchr(text, ' ');
     5b2:	2120      	movs	r1, #32
     5b4:	0038      	movs	r0, r7
     5b6:	f002 f8bb 	bl	2730 <strchr>
     5ba:	4680      	mov	r8, r0
    if(args_start) {
     5bc:	2800      	cmp	r0, #0
     5be:	d004      	beq.n	5ca <_ZN3GSM10ProcessSMSEPKcS1_+0x26>
        *args_start = '\0';
     5c0:	2300      	movs	r3, #0
     5c2:	7003      	strb	r3, [r0, #0]
        args_start += 1;
     5c4:	3301      	adds	r3, #1
     5c6:	469c      	mov	ip, r3
     5c8:	44e0      	add	r8, ip
    T& operator[](size_t idx) {
        return *(m_data + idx);
    }

    T* begin() {
        return m_data;
     5ca:	68f4      	ldr	r4, [r6, #12]
    }

    T* end() {
        return m_data + m_size;
     5cc:	68b3      	ldr	r3, [r6, #8]
     5ce:	005d      	lsls	r5, r3, #1
     5d0:	18ed      	adds	r5, r5, r3
     5d2:	00ad      	lsls	r5, r5, #2
     5d4:	1965      	adds	r5, r4, r5
    for(auto& func : m_smsfuncs) {
     5d6:	42ac      	cmp	r4, r5
     5d8:	d014      	beq.n	604 <_ZN3GSM10ProcessSMSEPKcS1_+0x60>
        if(strcasecmp(func.key, text) == 0) {
     5da:	0039      	movs	r1, r7
     5dc:	6820      	ldr	r0, [r4, #0]
     5de:	f002 f88d 	bl	26fc <strcasecmp>
     5e2:	2800      	cmp	r0, #0
     5e4:	d001      	beq.n	5ea <_ZN3GSM10ProcessSMSEPKcS1_+0x46>
    for(auto& func : m_smsfuncs) {
     5e6:	340c      	adds	r4, #12
     5e8:	e7f5      	b.n	5d6 <_ZN3GSM10ProcessSMSEPKcS1_+0x32>
            if(GetNumLevel(sender) >= func.level)
     5ea:	9d01      	ldr	r5, [sp, #4]
     5ec:	0029      	movs	r1, r5
     5ee:	0030      	movs	r0, r6
     5f0:	f7ff ff84 	bl	4fc <_ZN3GSM11GetNumLevelEPKc>
     5f4:	7a23      	ldrb	r3, [r4, #8]
     5f6:	4298      	cmp	r0, r3
     5f8:	d304      	bcc.n	604 <_ZN3GSM10ProcessSMSEPKcS1_+0x60>
                func.callback(this, sender, args_start);
     5fa:	6863      	ldr	r3, [r4, #4]
     5fc:	4642      	mov	r2, r8
     5fe:	0029      	movs	r1, r5
     600:	0030      	movs	r0, r6
     602:	4798      	blx	r3
}
     604:	b002      	add	sp, #8
     606:	bc04      	pop	{r2}
     608:	4690      	mov	r8, r2
     60a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000060c <_ZN3GSM7ReadSMSEi>:
void GSM::ReadSMS(int index) {
     60c:	b5f0      	push	{r4, r5, r6, r7, lr}
     60e:	b091      	sub	sp, #68	; 0x44
     610:	0004      	movs	r4, r0
     612:	000b      	movs	r3, r1
    snprintf(buf, sizeof(buf), "AT+CMGR=%d", index);
     614:	4a26      	ldr	r2, [pc, #152]	; (6b0 <_ZN3GSM7ReadSMSEi+0xa4>)
     616:	2140      	movs	r1, #64	; 0x40
     618:	4668      	mov	r0, sp
     61a:	f002 f83b 	bl	2694 <sniprintf>
    if(!Command(buf, "+CMGR"))
     61e:	4b25      	ldr	r3, [pc, #148]	; (6b4 <_ZN3GSM7ReadSMSEi+0xa8>)
     620:	4a25      	ldr	r2, [pc, #148]	; (6b8 <_ZN3GSM7ReadSMSEi+0xac>)
     622:	4669      	mov	r1, sp
     624:	0020      	movs	r0, r4
     626:	f7ff fdff 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
     62a:	2800      	cmp	r0, #0
     62c:	d101      	bne.n	632 <_ZN3GSM7ReadSMSEi+0x26>
}
     62e:	b011      	add	sp, #68	; 0x44
     630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    char* data = m_uart->read();
     632:	6920      	ldr	r0, [r4, #16]
     634:	f001 fbf2 	bl	1e1c <_ZN6uart_t4readEv>
     638:	1e07      	subs	r7, r0, #0
    if(!data) return;
     63a:	d0f8      	beq.n	62e <_ZN3GSM7ReadSMSEi+0x22>
    char* cmgr_start = strstr(data, "+CMGR"); // this shouldn't return null
     63c:	491e      	ldr	r1, [pc, #120]	; (6b8 <_ZN3GSM7ReadSMSEi+0xac>)
     63e:	f002 f8b9 	bl	27b4 <strstr>
     642:	0005      	movs	r5, r0
    char* text = strchr(cmgr_start, '\n');
     644:	210a      	movs	r1, #10
     646:	f002 f873 	bl	2730 <strchr>
    if(!text) {
     64a:	2800      	cmp	r0, #0
     64c:	d020      	beq.n	690 <_ZN3GSM7ReadSMSEi+0x84>
    text += 1; // ignore \n
     64e:	1c46      	adds	r6, r0, #1
    char* text_end = strstr(text, "\r\n\r\nOK");
     650:	491a      	ldr	r1, [pc, #104]	; (6bc <_ZN3GSM7ReadSMSEi+0xb0>)
     652:	0030      	movs	r0, r6
     654:	f002 f8ae 	bl	27b4 <strstr>
    if(!text_end) {
     658:	2800      	cmp	r0, #0
     65a:	d01d      	beq.n	698 <_ZN3GSM7ReadSMSEi+0x8c>
    *text_end = '\0';
     65c:	2300      	movs	r3, #0
     65e:	7003      	strb	r3, [r0, #0]
    char* sender = strstr(cmgr_start, ",\"");
     660:	4917      	ldr	r1, [pc, #92]	; (6c0 <_ZN3GSM7ReadSMSEi+0xb4>)
     662:	0028      	movs	r0, r5
     664:	f002 f8a6 	bl	27b4 <strstr>
    if(!sender) {
     668:	2800      	cmp	r0, #0
     66a:	d019      	beq.n	6a0 <_ZN3GSM7ReadSMSEi+0x94>
    sender += 2;
     66c:	1c85      	adds	r5, r0, #2
    if(!strchr(sender, '"')) {
     66e:	2122      	movs	r1, #34	; 0x22
     670:	0028      	movs	r0, r5
     672:	f002 f85d 	bl	2730 <strchr>
     676:	2800      	cmp	r0, #0
     678:	d016      	beq.n	6a8 <_ZN3GSM7ReadSMSEi+0x9c>
    *strchr(sender, '"') = '\0';
     67a:	2300      	movs	r3, #0
     67c:	7003      	strb	r3, [r0, #0]
    ProcessSMS(text, sender);
     67e:	002a      	movs	r2, r5
     680:	0031      	movs	r1, r6
     682:	0020      	movs	r0, r4
     684:	f7ff ff8e 	bl	5a4 <_ZN3GSM10ProcessSMSEPKcS1_>
    free(data);
     688:	0038      	movs	r0, r7
     68a:	f001 ff2b 	bl	24e4 <free>
     68e:	e7ce      	b.n	62e <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     690:	0038      	movs	r0, r7
     692:	f001 ff27 	bl	24e4 <free>
        return;
     696:	e7ca      	b.n	62e <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     698:	0038      	movs	r0, r7
     69a:	f001 ff23 	bl	24e4 <free>
        return;
     69e:	e7c6      	b.n	62e <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     6a0:	0038      	movs	r0, r7
     6a2:	f001 ff1f 	bl	24e4 <free>
        return;
     6a6:	e7c2      	b.n	62e <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     6a8:	0038      	movs	r0, r7
     6aa:	f001 ff1b 	bl	24e4 <free>
        return;
     6ae:	e7be      	b.n	62e <_ZN3GSM7ReadSMSEi+0x22>
     6b0:	000031e4 	.word	0x000031e4
     6b4:	00000bb8 	.word	0x00000bb8
     6b8:	000031f0 	.word	0x000031f0
     6bc:	000031f8 	.word	0x000031f8
     6c0:	00003200 	.word	0x00003200

000006c4 <_ZN3GSM4PollEv>:
void GSM::Poll() {
     6c4:	b570      	push	{r4, r5, r6, lr}
     6c6:	0004      	movs	r4, r0
    if(!m_uart->available()) return;
     6c8:	6902      	ldr	r2, [r0, #16]
        if(m_rxhead >= m_rxtail)
     6ca:	2381      	movs	r3, #129	; 0x81
     6cc:	009b      	lsls	r3, r3, #2
     6ce:	5ad1      	ldrh	r1, [r2, r3]
     6d0:	b289      	uxth	r1, r1
     6d2:	4b20      	ldr	r3, [pc, #128]	; (754 <_ZN3GSM4PollEv+0x90>)
     6d4:	5ad3      	ldrh	r3, [r2, r3]
     6d6:	b29b      	uxth	r3, r3
     6d8:	4299      	cmp	r1, r3
     6da:	d309      	bcc.n	6f0 <_ZN3GSM4PollEv+0x2c>
            return m_rxhead - m_rxtail;
     6dc:	2381      	movs	r3, #129	; 0x81
     6de:	009b      	lsls	r3, r3, #2
     6e0:	5ad3      	ldrh	r3, [r2, r3]
     6e2:	491c      	ldr	r1, [pc, #112]	; (754 <_ZN3GSM4PollEv+0x90>)
     6e4:	5a52      	ldrh	r2, [r2, r1]
     6e6:	1a9b      	subs	r3, r3, r2
     6e8:	b29b      	uxth	r3, r3
     6ea:	2b00      	cmp	r3, #0
     6ec:	d10d      	bne.n	70a <_ZN3GSM4PollEv+0x46>
}
     6ee:	bd70      	pop	{r4, r5, r6, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     6f0:	2381      	movs	r3, #129	; 0x81
     6f2:	009b      	lsls	r3, r3, #2
     6f4:	5ad3      	ldrh	r3, [r2, r3]
     6f6:	4917      	ldr	r1, [pc, #92]	; (754 <_ZN3GSM4PollEv+0x90>)
     6f8:	5a52      	ldrh	r2, [r2, r1]
     6fa:	1a9b      	subs	r3, r3, r2
     6fc:	b29b      	uxth	r3, r3
     6fe:	2280      	movs	r2, #128	; 0x80
     700:	0092      	lsls	r2, r2, #2
     702:	4694      	mov	ip, r2
     704:	4463      	add	r3, ip
     706:	b29b      	uxth	r3, r3
     708:	e7ef      	b.n	6ea <_ZN3GSM4PollEv+0x26>
    delay_usec(100000);
     70a:	4813      	ldr	r0, [pc, #76]	; (758 <_ZN3GSM4PollEv+0x94>)
     70c:	f002 ff4c 	bl	35a8 <__delay_usec_veneer>
    char* data = m_uart->read();
     710:	6920      	ldr	r0, [r4, #16]
     712:	f001 fb83 	bl	1e1c <_ZN6uart_t4readEv>
     716:	1e05      	subs	r5, r0, #0
    if(!data) return;
     718:	d0e9      	beq.n	6ee <_ZN3GSM4PollEv+0x2a>
    if(strstr(data, "RING")) {
     71a:	4910      	ldr	r1, [pc, #64]	; (75c <_ZN3GSM4PollEv+0x98>)
     71c:	f002 f84a 	bl	27b4 <strstr>
     720:	2800      	cmp	r0, #0
     722:	d009      	beq.n	738 <_ZN3GSM4PollEv+0x74>
        Command("ATH"); // Disconnect call
     724:	4b0e      	ldr	r3, [pc, #56]	; (760 <_ZN3GSM4PollEv+0x9c>)
     726:	2200      	movs	r2, #0
     728:	490e      	ldr	r1, [pc, #56]	; (764 <_ZN3GSM4PollEv+0xa0>)
     72a:	0020      	movs	r0, r4
     72c:	f7ff fd7c 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
    free(data);
     730:	0028      	movs	r0, r5
     732:	f001 fed7 	bl	24e4 <free>
     736:	e7da      	b.n	6ee <_ZN3GSM4PollEv+0x2a>
    } else if(strstr(data, "+CMTI")) {
     738:	490b      	ldr	r1, [pc, #44]	; (768 <_ZN3GSM4PollEv+0xa4>)
     73a:	0028      	movs	r0, r5
     73c:	f002 f83a 	bl	27b4 <strstr>
     740:	2800      	cmp	r0, #0
     742:	d0f5      	beq.n	730 <_ZN3GSM4PollEv+0x6c>
        ReadSMS(find_num(strstr(data, "+CMTI")));
     744:	f7ff fcc6 	bl	d4 <_ZL8find_numPKc>
     748:	0001      	movs	r1, r0
     74a:	0020      	movs	r0, r4
     74c:	f7ff ff5e 	bl	60c <_ZN3GSM7ReadSMSEi>
     750:	e7ee      	b.n	730 <_ZN3GSM4PollEv+0x6c>
     752:	46c0      	nop			; (mov r8, r8)
     754:	00000206 	.word	0x00000206
     758:	000186a0 	.word	0x000186a0
     75c:	00003204 	.word	0x00003204
     760:	00000bb8 	.word	0x00000bb8
     764:	0000320c 	.word	0x0000320c
     768:	00003210 	.word	0x00003210

0000076c <_ZN3GSM11SetNumLevelEPKcc>:

void GSM::SetNumLevel(const char* num, char level) {
     76c:	b5f0      	push	{r4, r5, r6, r7, lr}
     76e:	b091      	sub	sp, #68	; 0x44
     770:	0004      	movs	r4, r0
     772:	000d      	movs	r5, r1
     774:	0016      	movs	r6, r2
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+FSCREATE=C:\\%s.txt", num);
     776:	000b      	movs	r3, r1
     778:	4a13      	ldr	r2, [pc, #76]	; (7c8 <_ZN3GSM11SetNumLevelEPKcc+0x5c>)
     77a:	2140      	movs	r1, #64	; 0x40
     77c:	4668      	mov	r0, sp
     77e:	f001 ff89 	bl	2694 <sniprintf>
    Command(buf);
     782:	4f12      	ldr	r7, [pc, #72]	; (7cc <_ZN3GSM11SetNumLevelEPKcc+0x60>)
     784:	003b      	movs	r3, r7
     786:	2200      	movs	r2, #0
     788:	4669      	mov	r1, sp
     78a:	0020      	movs	r0, r4
     78c:	f7ff fd4c 	bl	228 <_ZN3GSM7CommandEPKcS1_j>

    snprintf(buf, sizeof(buf), "AT+FSWRITE=C:\\%s.txt,0,1,1", num);
     790:	002b      	movs	r3, r5
     792:	4a0f      	ldr	r2, [pc, #60]	; (7d0 <_ZN3GSM11SetNumLevelEPKcc+0x64>)
     794:	2140      	movs	r1, #64	; 0x40
     796:	4668      	mov	r0, sp
     798:	f001 ff7c 	bl	2694 <sniprintf>
    if(!Command(buf, ">"))
     79c:	003b      	movs	r3, r7
     79e:	4a0d      	ldr	r2, [pc, #52]	; (7d4 <_ZN3GSM11SetNumLevelEPKcc+0x68>)
     7a0:	4669      	mov	r1, sp
     7a2:	0020      	movs	r0, r4
     7a4:	f7ff fd40 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
     7a8:	2800      	cmp	r0, #0
     7aa:	d101      	bne.n	7b0 <_ZN3GSM11SetNumLevelEPKcc+0x44>
        return;

    m_uart->write(level);

    Command("\r\n");
}
     7ac:	b011      	add	sp, #68	; 0x44
     7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_uart->write(level);
     7b0:	0031      	movs	r1, r6
     7b2:	6920      	ldr	r0, [r4, #16]
     7b4:	f001 fa44 	bl	1c40 <_ZN6uart_t5writeEc>
    Command("\r\n");
     7b8:	003b      	movs	r3, r7
     7ba:	2200      	movs	r2, #0
     7bc:	4906      	ldr	r1, [pc, #24]	; (7d8 <_ZN3GSM11SetNumLevelEPKcc+0x6c>)
     7be:	0020      	movs	r0, r4
     7c0:	f7ff fd32 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
     7c4:	e7f2      	b.n	7ac <_ZN3GSM11SetNumLevelEPKcc+0x40>
     7c6:	46c0      	nop			; (mov r8, r8)
     7c8:	00003218 	.word	0x00003218
     7cc:	00000bb8 	.word	0x00000bb8
     7d0:	00003230 	.word	0x00003230
     7d4:	0000324c 	.word	0x0000324c
     7d8:	00003250 	.word	0x00003250

000007dc <_ZL11func_setnumP3GSMPKcS2_>:
static void func_setnum(GSM* gsm, const char* sender, const char* c_args) {
     7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7de:	46c6      	mov	lr, r8
     7e0:	b500      	push	{lr}
     7e2:	0006      	movs	r6, r0
     7e4:	000f      	movs	r7, r1
     7e6:	1e14      	subs	r4, r2, #0
    if(c_args) {
     7e8:	d029      	beq.n	83e <_ZL11func_setnumP3GSMPKcS2_+0x62>
        args = (char*)malloc(strlen(c_args));
     7ea:	0010      	movs	r0, r2
     7ec:	f001 ffb6 	bl	275c <strlen>
     7f0:	f001 fe6e 	bl	24d0 <malloc>
     7f4:	1e05      	subs	r5, r0, #0
        if(!args) {
     7f6:	d01c      	beq.n	832 <_ZL11func_setnumP3GSMPKcS2_+0x56>
        strcpy(args, c_args);
     7f8:	0021      	movs	r1, r4
     7fa:	f001 ffa7 	bl	274c <strcpy>
        num = strtok(args, " ");
     7fe:	4b18      	ldr	r3, [pc, #96]	; (860 <_ZL11func_setnumP3GSMPKcS2_+0x84>)
     800:	4698      	mov	r8, r3
     802:	0019      	movs	r1, r3
     804:	0028      	movs	r0, r5
     806:	f001 ffeb 	bl	27e0 <strtok>
     80a:	0004      	movs	r4, r0
        level = strtok(NULL, " ");
     80c:	4641      	mov	r1, r8
     80e:	2000      	movs	r0, #0
     810:	f001 ffe6 	bl	27e0 <strtok>
    if(num && level) {
     814:	2c00      	cmp	r4, #0
     816:	d015      	beq.n	844 <_ZL11func_setnumP3GSMPKcS2_+0x68>
     818:	2800      	cmp	r0, #0
     81a:	d013      	beq.n	844 <_ZL11func_setnumP3GSMPKcS2_+0x68>
        gsm->SetNumLevel(num, *level);
     81c:	7802      	ldrb	r2, [r0, #0]
     81e:	0021      	movs	r1, r4
     820:	0030      	movs	r0, r6
     822:	f7ff ffa3 	bl	76c <_ZN3GSM11SetNumLevelEPKcc>
        gsm->SendSMS(sender, "OK");
     826:	4a0f      	ldr	r2, [pc, #60]	; (864 <_ZL11func_setnumP3GSMPKcS2_+0x88>)
     828:	0039      	movs	r1, r7
     82a:	0030      	movs	r0, r6
     82c:	f7ff fe04 	bl	438 <_ZN3GSM7SendSMSEPKcS1_>
     830:	e00d      	b.n	84e <_ZL11func_setnumP3GSMPKcS2_+0x72>
            gsm->SendSMS(sender, "malloc failed");
     832:	4a0d      	ldr	r2, [pc, #52]	; (868 <_ZL11func_setnumP3GSMPKcS2_+0x8c>)
     834:	0039      	movs	r1, r7
     836:	0030      	movs	r0, r6
     838:	f7ff fdfe 	bl	438 <_ZN3GSM7SendSMSEPKcS1_>
            return;
     83c:	e00c      	b.n	858 <_ZL11func_setnumP3GSMPKcS2_+0x7c>
    char* args = NULL;
     83e:	0015      	movs	r5, r2
    char* level = NULL;
     840:	0010      	movs	r0, r2
     842:	e7e7      	b.n	814 <_ZL11func_setnumP3GSMPKcS2_+0x38>
        gsm->SendSMS(sender, "Usage: setnum <number> <level>");
     844:	4a09      	ldr	r2, [pc, #36]	; (86c <_ZL11func_setnumP3GSMPKcS2_+0x90>)
     846:	0039      	movs	r1, r7
     848:	0030      	movs	r0, r6
     84a:	f7ff fdf5 	bl	438 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
     84e:	2d00      	cmp	r5, #0
     850:	d002      	beq.n	858 <_ZL11func_setnumP3GSMPKcS2_+0x7c>
     852:	0028      	movs	r0, r5
     854:	f001 fe46 	bl	24e4 <free>
}
     858:	bc04      	pop	{r2}
     85a:	4690      	mov	r8, r2
     85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     85e:	46c0      	nop			; (mov r8, r8)
     860:	00003264 	.word	0x00003264
     864:	000031fc 	.word	0x000031fc
     868:	00003254 	.word	0x00003254
     86c:	00003268 	.word	0x00003268

00000870 <_ZN3GSM9RemoveNumEPKc>:

void GSM::RemoveNum(const char* num) {
     870:	b510      	push	{r4, lr}
     872:	b090      	sub	sp, #64	; 0x40
     874:	0004      	movs	r4, r0
     876:	000b      	movs	r3, r1
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+FSDEL=C:\\%s.txt", num);
     878:	4a06      	ldr	r2, [pc, #24]	; (894 <_ZN3GSM9RemoveNumEPKc+0x24>)
     87a:	2140      	movs	r1, #64	; 0x40
     87c:	4668      	mov	r0, sp
     87e:	f001 ff09 	bl	2694 <sniprintf>
    Command(buf);
     882:	4b05      	ldr	r3, [pc, #20]	; (898 <_ZN3GSM9RemoveNumEPKc+0x28>)
     884:	2200      	movs	r2, #0
     886:	4669      	mov	r1, sp
     888:	0020      	movs	r0, r4
     88a:	f7ff fccd 	bl	228 <_ZN3GSM7CommandEPKcS1_j>
     88e:	b010      	add	sp, #64	; 0x40
     890:	bd10      	pop	{r4, pc}
     892:	46c0      	nop			; (mov r8, r8)
     894:	00003288 	.word	0x00003288
     898:	00000bb8 	.word	0x00000bb8

0000089c <_ZL11func_delnumP3GSMPKcS2_>:
static void func_delnum(GSM* gsm, const char* sender, const char* args) {
     89c:	b510      	push	{r4, lr}
     89e:	000b      	movs	r3, r1
     8a0:	1e11      	subs	r1, r2, #0
    if(!args) {
     8a2:	d002      	beq.n	8aa <_ZL11func_delnumP3GSMPKcS2_+0xe>
    gsm->RemoveNum(args);
     8a4:	f7ff ffe4 	bl	870 <_ZN3GSM9RemoveNumEPKc>
}
     8a8:	bd10      	pop	{r4, pc}
        gsm->SendSMS(sender, "Usage: delnum <number>");
     8aa:	4a02      	ldr	r2, [pc, #8]	; (8b4 <_ZL11func_delnumP3GSMPKcS2_+0x18>)
     8ac:	0019      	movs	r1, r3
     8ae:	f7ff fdc3 	bl	438 <_ZN3GSM7SendSMSEPKcS1_>
        return;
     8b2:	e7f9      	b.n	8a8 <_ZL11func_delnumP3GSMPKcS2_+0xc>
     8b4:	0000329c 	.word	0x0000329c

000008b8 <_ZN4RF243csnEb>:
#define pgm_read_byte(x) (*(uint8_t*)(x))

/****************************************************************************/

void RF24::csn(bool mode)
{
     8b8:	b510      	push	{r4, lr}
    }
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }
     8ba:	68c3      	ldr	r3, [r0, #12]
     8bc:	6904      	ldr	r4, [r0, #16]
        if(en)
     8be:	2900      	cmp	r1, #0
     8c0:	d00a      	beq.n	8d8 <_ZN4RF243csnEb+0x20>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     8c2:	2201      	movs	r2, #1
     8c4:	40a2      	lsls	r2, r4
     8c6:	01db      	lsls	r3, r3, #7
     8c8:	4907      	ldr	r1, [pc, #28]	; (8e8 <_ZN4RF243csnEb+0x30>)
     8ca:	468c      	mov	ip, r1
     8cc:	4463      	add	r3, ip
     8ce:	619a      	str	r2, [r3, #24]
      _SPI.chipSelect(csn_pin);
    #endif // defined(RF24_RPi)

    #if !defined(RF24_LINUX)
    digitalWrite(csn_pin, mode);
    delay_usec(csDelay);
     8d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
     8d2:	f002 fe69 	bl	35a8 <__delay_usec_veneer>
    #endif // !defined(RF24_LINUX)
}
     8d6:	bd10      	pop	{r4, pc}
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     8d8:	2201      	movs	r2, #1
     8da:	40a2      	lsls	r2, r4
     8dc:	01db      	lsls	r3, r3, #7
     8de:	4902      	ldr	r1, [pc, #8]	; (8e8 <_ZN4RF243csnEb+0x30>)
     8e0:	468c      	mov	ip, r1
     8e2:	4463      	add	r3, ip
     8e4:	615a      	str	r2, [r3, #20]
     8e6:	e7f3      	b.n	8d0 <_ZN4RF243csnEb+0x18>
     8e8:	41004400 	.word	0x41004400

000008ec <_ZN4RF242ceEb>:

/****************************************************************************/

void RF24::ce(bool level)
{
     8ec:	b570      	push	{r4, r5, r6, lr}
     8ee:	b084      	sub	sp, #16
     8f0:	0004      	movs	r4, r0
     8f2:	000d      	movs	r5, r1
    //Allow for 3-pin use on ATTiny
    if (ce_pin != csn_pin) {
     8f4:	4669      	mov	r1, sp
     8f6:	0003      	movs	r3, r0
     8f8:	330c      	adds	r3, #12
     8fa:	000a      	movs	r2, r1
     8fc:	cb41      	ldmia	r3!, {r0, r6}
     8fe:	c241      	stmia	r2!, {r0, r6}
        return !operator==(b);
     900:	2208      	movs	r2, #8
     902:	a802      	add	r0, sp, #8
     904:	f001 fdf8 	bl	24f8 <memcpy>
        return port == b.port && pin == b.pin;
     908:	6863      	ldr	r3, [r4, #4]
     90a:	9a02      	ldr	r2, [sp, #8]
     90c:	4293      	cmp	r3, r2
     90e:	d00b      	beq.n	928 <_ZN4RF242ceEb+0x3c>
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }
     910:	68a1      	ldr	r1, [r4, #8]
        if(en)
     912:	2d00      	cmp	r5, #0
     914:	d00d      	beq.n	932 <_ZN4RF242ceEb+0x46>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     916:	2201      	movs	r2, #1
     918:	408a      	lsls	r2, r1
     91a:	01db      	lsls	r3, r3, #7
     91c:	4909      	ldr	r1, [pc, #36]	; (944 <_ZN4RF242ceEb+0x58>)
     91e:	468c      	mov	ip, r1
     920:	4463      	add	r3, ip
     922:	619a      	str	r2, [r3, #24]
        digitalWrite(ce_pin, level);
    }
}
     924:	b004      	add	sp, #16
     926:	bd70      	pop	{r4, r5, r6, pc}
        return port == b.port && pin == b.pin;
     928:	68a2      	ldr	r2, [r4, #8]
     92a:	9903      	ldr	r1, [sp, #12]
     92c:	428a      	cmp	r2, r1
     92e:	d1ef      	bne.n	910 <_ZN4RF242ceEb+0x24>
     930:	e7f8      	b.n	924 <_ZN4RF242ceEb+0x38>
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     932:	2201      	movs	r2, #1
     934:	408a      	lsls	r2, r1
     936:	01db      	lsls	r3, r3, #7
     938:	4902      	ldr	r1, [pc, #8]	; (944 <_ZN4RF242ceEb+0x58>)
     93a:	468c      	mov	ip, r1
     93c:	4463      	add	r3, ip
     93e:	615a      	str	r2, [r3, #20]
     940:	e7f0      	b.n	924 <_ZN4RF242ceEb+0x38>
     942:	46c0      	nop			; (mov r8, r8)
     944:	41004400 	.word	0x41004400

00000948 <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     948:	b570      	push	{r4, r5, r6, lr}
     94a:	0004      	movs	r4, r0
     94c:	000d      	movs	r5, r1
    csn(LOW);
     94e:	2100      	movs	r1, #0
     950:	f7ff ffb2 	bl	8b8 <_ZN4RF243csnEb>

    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    _SPI.Transfer(R_REGISTER | (REGISTER_MASK & reg));
     954:	211f      	movs	r1, #31
     956:	4029      	ands	r1, r5
     958:	6820      	ldr	r0, [r4, #0]
     95a:	f000 ff25 	bl	17a8 <_ZN5spi_t8TransferEh>
    result = _SPI.Transfer(0xff);
     95e:	21ff      	movs	r1, #255	; 0xff
     960:	6820      	ldr	r0, [r4, #0]
     962:	f000 ff21 	bl	17a8 <_ZN5spi_t8TransferEh>
     966:	0005      	movs	r5, r0
    csn(HIGH);
     968:	2101      	movs	r1, #1
     96a:	0020      	movs	r0, r4
     96c:	f7ff ffa4 	bl	8b8 <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return result;
}
     970:	0028      	movs	r0, r5
     972:	bd70      	pop	{r4, r5, r6, pc}

00000974 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     976:	46ce      	mov	lr, r9
     978:	4647      	mov	r7, r8
     97a:	b580      	push	{r7, lr}
     97c:	0007      	movs	r7, r0
     97e:	000c      	movs	r4, r1
     980:	0016      	movs	r6, r2
     982:	001d      	movs	r5, r3
    csn(LOW);
     984:	2100      	movs	r1, #0
     986:	f7ff ff97 	bl	8b8 <_ZN4RF243csnEb>
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     98a:	211f      	movs	r1, #31
     98c:	4021      	ands	r1, r4
     98e:	2320      	movs	r3, #32
     990:	4319      	orrs	r1, r3
     992:	b2c9      	uxtb	r1, r1
     994:	6838      	ldr	r0, [r7, #0]
     996:	f000 ff07 	bl	17a8 <_ZN5spi_t8TransferEh>
     99a:	4681      	mov	r9, r0
    while (len--) {
     99c:	1e6c      	subs	r4, r5, #1
     99e:	b2e4      	uxtb	r4, r4
     9a0:	2d00      	cmp	r5, #0
     9a2:	d008      	beq.n	9b6 <_ZN4RF2414write_registerEhPKhh+0x42>
        _SPI.Transfer(*buf++);
     9a4:	1c73      	adds	r3, r6, #1
     9a6:	4698      	mov	r8, r3
     9a8:	7831      	ldrb	r1, [r6, #0]
     9aa:	6838      	ldr	r0, [r7, #0]
     9ac:	f000 fefc 	bl	17a8 <_ZN5spi_t8TransferEh>
    while (len--) {
     9b0:	0025      	movs	r5, r4
        _SPI.Transfer(*buf++);
     9b2:	4646      	mov	r6, r8
    while (len--) {
     9b4:	e7f2      	b.n	99c <_ZN4RF2414write_registerEhPKhh+0x28>
    csn(HIGH);
     9b6:	2101      	movs	r1, #1
     9b8:	0038      	movs	r0, r7
     9ba:	f7ff ff7d 	bl	8b8 <_ZN4RF243csnEb>
    }
    endTransaction();
    #endif // !defined(RF24_LINUX)

    return status;
}
     9be:	4648      	mov	r0, r9
     9c0:	bc0c      	pop	{r2, r3}
     9c2:	4690      	mov	r8, r2
     9c4:	4699      	mov	r9, r3
     9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000009c8 <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     9c8:	b570      	push	{r4, r5, r6, lr}
     9ca:	0004      	movs	r4, r0
     9cc:	000d      	movs	r5, r1
     9ce:	0016      	movs	r6, r2
    csn(LOW);
     9d0:	2100      	movs	r1, #0
     9d2:	f7ff ff71 	bl	8b8 <_ZN4RF243csnEb>
    status = *prx++; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     9d6:	211f      	movs	r1, #31
     9d8:	4029      	ands	r1, r5
     9da:	2320      	movs	r3, #32
     9dc:	4319      	orrs	r1, r3
     9de:	b2c9      	uxtb	r1, r1
     9e0:	6820      	ldr	r0, [r4, #0]
     9e2:	f000 fee1 	bl	17a8 <_ZN5spi_t8TransferEh>
     9e6:	0005      	movs	r5, r0
    _SPI.Transfer(value);
     9e8:	0031      	movs	r1, r6
     9ea:	6820      	ldr	r0, [r4, #0]
     9ec:	f000 fedc 	bl	17a8 <_ZN5spi_t8TransferEh>
    csn(HIGH);
     9f0:	2101      	movs	r1, #1
     9f2:	0020      	movs	r0, r4
     9f4:	f7ff ff60 	bl	8b8 <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     9f8:	0028      	movs	r0, r5
     9fa:	bd70      	pop	{r4, r5, r6, pc}

000009fc <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
     9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9fe:	46ce      	mov	lr, r9
     a00:	4647      	mov	r7, r8
     a02:	b580      	push	{r7, lr}
     a04:	0007      	movs	r7, r0
     a06:	000c      	movs	r4, r1
     a08:	0016      	movs	r6, r2
     a0a:	4698      	mov	r8, r3
    uint8_t status;
    const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

    data_len = rf24_min(data_len, payload_size);
     a0c:	7dc5      	ldrb	r5, [r0, #23]
     a0e:	4295      	cmp	r5, r2
     a10:	d800      	bhi.n	a14 <_ZN4RF2413write_payloadEPKvhh+0x18>
     a12:	002e      	movs	r6, r5
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     a14:	7e3b      	ldrb	r3, [r7, #24]
     a16:	2b00      	cmp	r3, #0
     a18:	d117      	bne.n	a4a <_ZN4RF2413write_payloadEPKvhh+0x4e>
     a1a:	1bad      	subs	r5, r5, r6
     a1c:	b2ed      	uxtb	r5, r5
    csn(LOW);
     a1e:	2100      	movs	r1, #0
     a20:	0038      	movs	r0, r7
     a22:	f7ff ff49 	bl	8b8 <_ZN4RF243csnEb>
    endTransaction();

    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(writeType);
     a26:	4641      	mov	r1, r8
     a28:	6838      	ldr	r0, [r7, #0]
     a2a:	f000 febd 	bl	17a8 <_ZN5spi_t8TransferEh>
     a2e:	4680      	mov	r8, r0
    while (data_len--) {
     a30:	1e73      	subs	r3, r6, #1
     a32:	b2db      	uxtb	r3, r3
     a34:	4699      	mov	r9, r3
     a36:	2e00      	cmp	r6, #0
     a38:	d009      	beq.n	a4e <_ZN4RF2413write_payloadEPKvhh+0x52>
        _SPI.Transfer(*current++);
     a3a:	1c66      	adds	r6, r4, #1
     a3c:	7821      	ldrb	r1, [r4, #0]
     a3e:	6838      	ldr	r0, [r7, #0]
     a40:	f000 feb2 	bl	17a8 <_ZN5spi_t8TransferEh>
     a44:	0034      	movs	r4, r6
    while (data_len--) {
     a46:	464e      	mov	r6, r9
     a48:	e7f2      	b.n	a30 <_ZN4RF2413write_payloadEPKvhh+0x34>
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     a4a:	2500      	movs	r5, #0
     a4c:	e7e7      	b.n	a1e <_ZN4RF2413write_payloadEPKvhh+0x22>
    }
    while (blank_len--) {
     a4e:	1e6c      	subs	r4, r5, #1
     a50:	b2e4      	uxtb	r4, r4
     a52:	2d00      	cmp	r5, #0
     a54:	d005      	beq.n	a62 <_ZN4RF2413write_payloadEPKvhh+0x66>
        _SPI.Transfer(0);
     a56:	2100      	movs	r1, #0
     a58:	6838      	ldr	r0, [r7, #0]
     a5a:	f000 fea5 	bl	17a8 <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     a5e:	0025      	movs	r5, r4
     a60:	e7f5      	b.n	a4e <_ZN4RF2413write_payloadEPKvhh+0x52>
    csn(HIGH);
     a62:	2101      	movs	r1, #1
     a64:	0038      	movs	r0, r7
     a66:	f7ff ff27 	bl	8b8 <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     a6a:	4640      	mov	r0, r8
     a6c:	bc0c      	pop	{r2, r3}
     a6e:	4690      	mov	r8, r2
     a70:	4699      	mov	r9, r3
     a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000a74 <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t data_len)
{
     a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a76:	46ce      	mov	lr, r9
     a78:	4647      	mov	r7, r8
     a7a:	b580      	push	{r7, lr}
     a7c:	0007      	movs	r7, r0
     a7e:	000c      	movs	r4, r1
     a80:	0016      	movs	r6, r2
    uint8_t status;
    uint8_t* current = reinterpret_cast<uint8_t*>(buf);

    if (data_len > payload_size) {
     a82:	7dc5      	ldrb	r5, [r0, #23]
     a84:	4295      	cmp	r5, r2
     a86:	d200      	bcs.n	a8a <_ZN4RF2412read_payloadEPvh+0x16>
        data_len = payload_size;
     a88:	002e      	movs	r6, r5
    }
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     a8a:	7e3b      	ldrb	r3, [r7, #24]
     a8c:	2b00      	cmp	r3, #0
     a8e:	d118      	bne.n	ac2 <_ZN4RF2412read_payloadEPvh+0x4e>
     a90:	1bad      	subs	r5, r5, r6
     a92:	b2ed      	uxtb	r5, r5
    csn(LOW);
     a94:	2100      	movs	r1, #0
     a96:	0038      	movs	r0, r7
     a98:	f7ff ff0e 	bl	8b8 <_ZN4RF243csnEb>
    }
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(R_RX_PAYLOAD);
     a9c:	2161      	movs	r1, #97	; 0x61
     a9e:	6838      	ldr	r0, [r7, #0]
     aa0:	f000 fe82 	bl	17a8 <_ZN5spi_t8TransferEh>
     aa4:	4680      	mov	r8, r0
    while (data_len--) {
     aa6:	1e73      	subs	r3, r6, #1
     aa8:	b2db      	uxtb	r3, r3
     aaa:	4699      	mov	r9, r3
     aac:	2e00      	cmp	r6, #0
     aae:	d00a      	beq.n	ac6 <_ZN4RF2412read_payloadEPvh+0x52>
        *current++ = _SPI.Transfer(0xFF);
     ab0:	1c66      	adds	r6, r4, #1
     ab2:	21ff      	movs	r1, #255	; 0xff
     ab4:	6838      	ldr	r0, [r7, #0]
     ab6:	f000 fe77 	bl	17a8 <_ZN5spi_t8TransferEh>
     aba:	7020      	strb	r0, [r4, #0]
     abc:	0034      	movs	r4, r6
    while (data_len--) {
     abe:	464e      	mov	r6, r9
     ac0:	e7f1      	b.n	aa6 <_ZN4RF2412read_payloadEPvh+0x32>
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     ac2:	2500      	movs	r5, #0
     ac4:	e7e6      	b.n	a94 <_ZN4RF2412read_payloadEPvh+0x20>
    }
    while (blank_len--) {
     ac6:	1e6c      	subs	r4, r5, #1
     ac8:	b2e4      	uxtb	r4, r4
     aca:	2d00      	cmp	r5, #0
     acc:	d005      	beq.n	ada <_ZN4RF2412read_payloadEPvh+0x66>
        _SPI.Transfer(0xff);
     ace:	21ff      	movs	r1, #255	; 0xff
     ad0:	6838      	ldr	r0, [r7, #0]
     ad2:	f000 fe69 	bl	17a8 <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     ad6:	0025      	movs	r5, r4
     ad8:	e7f5      	b.n	ac6 <_ZN4RF2412read_payloadEPvh+0x52>
    csn(HIGH);
     ada:	2101      	movs	r1, #1
     adc:	0038      	movs	r0, r7
     ade:	f7ff feeb 	bl	8b8 <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     ae2:	4640      	mov	r0, r8
     ae4:	bc0c      	pop	{r2, r3}
     ae6:	4690      	mov	r8, r2
     ae8:	4699      	mov	r9, r3
     aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000aec <_ZN4RF248spiTransEh>:
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd)
{
     aec:	b570      	push	{r4, r5, r6, lr}
     aee:	0004      	movs	r4, r0
     af0:	000d      	movs	r5, r1
    csn(LOW);
     af2:	2100      	movs	r1, #0
     af4:	f7ff fee0 	bl	8b8 <_ZN4RF243csnEb>

    uint8_t status;

    beginTransaction();
    status = _SPI.Transfer(cmd);
     af8:	0029      	movs	r1, r5
     afa:	6820      	ldr	r0, [r4, #0]
     afc:	f000 fe54 	bl	17a8 <_ZN5spi_t8TransferEh>
     b00:	0005      	movs	r5, r0
    csn(HIGH);
     b02:	2101      	movs	r1, #1
     b04:	0020      	movs	r0, r4
     b06:	f7ff fed7 	bl	8b8 <_ZN4RF243csnEb>
    endTransaction();

    return status;
}
     b0a:	0028      	movs	r0, r5
     b0c:	bd70      	pop	{r4, r5, r6, pc}

00000b0e <_ZN4RF248flush_rxEv>:
{
     b0e:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_RX);
     b10:	21e2      	movs	r1, #226	; 0xe2
     b12:	f7ff ffeb 	bl	aec <_ZN4RF248spiTransEh>
}
     b16:	bd10      	pop	{r4, pc}

00000b18 <_ZN4RF248flush_txEv>:
{
     b18:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_TX);
     b1a:	21e1      	movs	r1, #225	; 0xe1
     b1c:	f7ff ffe6 	bl	aec <_ZN4RF248spiTransEh>
}
     b20:	bd10      	pop	{r4, pc}

00000b22 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
     b22:	b510      	push	{r4, lr}
    return spiTrans(RF24_NOP);
     b24:	21ff      	movs	r1, #255	; 0xff
     b26:	f7ff ffe1 	bl	aec <_ZN4RF248spiTransEh>
}
     b2a:	bd10      	pop	{r4, pc}

00000b2c <_ZN4RF24C1E6gpio_tS0_R5spi_t>:

#endif

/****************************************************************************/

RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     b2c:	b082      	sub	sp, #8
     b2e:	b530      	push	{r4, r5, lr}
     b30:	b083      	sub	sp, #12
     b32:	466c      	mov	r4, sp
     b34:	9100      	str	r1, [sp, #0]
     b36:	6062      	str	r2, [r4, #4]
     b38:	aa07      	add	r2, sp, #28
     b3a:	9307      	str	r3, [sp, #28]
        :_SPI(_spi), ce_pin(_cepin), csn_pin(_cspin), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5),
         csDelay(5)//,pipe0_reading_address(0)
     b3c:	0003      	movs	r3, r0
     b3e:	9909      	ldr	r1, [sp, #36]	; 0x24
     b40:	c302      	stmia	r3!, {r1}
     b42:	cc22      	ldmia	r4!, {r1, r5}
     b44:	c322      	stmia	r3!, {r1, r5}
     b46:	0003      	movs	r3, r0
     b48:	330c      	adds	r3, #12
     b4a:	ca12      	ldmia	r2!, {r1, r4}
     b4c:	c312      	stmia	r3!, {r1, r4}
     b4e:	2300      	movs	r3, #0
     b50:	7583      	strb	r3, [r0, #22]
     b52:	2220      	movs	r2, #32
     b54:	75c2      	strb	r2, [r0, #23]
     b56:	7603      	strb	r3, [r0, #24]
     b58:	3a1b      	subs	r2, #27
     b5a:	7782      	strb	r2, [r0, #30]
     b5c:	6242      	str	r2, [r0, #36]	; 0x24
{
    pipe0_reading_address[0] = 0;
     b5e:	7643      	strb	r3, [r0, #25]
}
     b60:	b003      	add	sp, #12
     b62:	bc30      	pop	{r4, r5}
     b64:	bc08      	pop	{r3}
     b66:	b002      	add	sp, #8
     b68:	4718      	bx	r3

00000b6a <_ZN4RF2410setChannelEh>:

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     b6a:	b510      	push	{r4, lr}
     b6c:	000a      	movs	r2, r1
    const uint8_t max_channel = 125;
    write_register(RF_CH, rf24_min(channel, max_channel));
     b6e:	297c      	cmp	r1, #124	; 0x7c
     b70:	d900      	bls.n	b74 <_ZN4RF2410setChannelEh+0xa>
     b72:	227d      	movs	r2, #125	; 0x7d
     b74:	2105      	movs	r1, #5
     b76:	f7ff ff27 	bl	9c8 <_ZN4RF2414write_registerEhh>
}
     b7a:	bd10      	pop	{r4, pc}

00000b7c <_ZN4RF2414setPayloadSizeEh>:

/****************************************************************************/

void RF24::setPayloadSize(uint8_t size)
{
    payload_size = rf24_min(size, 32);
     b7c:	1c0b      	adds	r3, r1, #0
     b7e:	2920      	cmp	r1, #32
     b80:	d900      	bls.n	b84 <_ZN4RF2414setPayloadSizeEh+0x8>
     b82:	2320      	movs	r3, #32
     b84:	75c3      	strb	r3, [r0, #23]
}
     b86:	4770      	bx	lr

00000b88 <_ZN4RF2413stopListeningEv>:
/****************************************************************************/
static const uint8_t child_pipe_enable[]
PROGMEM = {ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5};

void RF24::stopListening(void)
{
     b88:	b510      	push	{r4, lr}
     b8a:	0004      	movs	r4, r0
    ce(LOW);
     b8c:	2100      	movs	r1, #0
     b8e:	f7ff fead 	bl	8ec <_ZN4RF242ceEb>

    delay_usec(txDelay);
     b92:	6a20      	ldr	r0, [r4, #32]
     b94:	f002 fd08 	bl	35a8 <__delay_usec_veneer>

    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
     b98:	211d      	movs	r1, #29
     b9a:	0020      	movs	r0, r4
     b9c:	f7ff fed4 	bl	948 <_ZN4RF2413read_registerEh>
     ba0:	0783      	lsls	r3, r0, #30
     ba2:	d417      	bmi.n	bd4 <_ZN4RF2413stopListeningEv+0x4c>
        delay_usec(txDelay); //200
        flush_tx();
    }
    //flush_rx();
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
     ba4:	2100      	movs	r1, #0
     ba6:	0020      	movs	r0, r4
     ba8:	f7ff fece 	bl	948 <_ZN4RF2413read_registerEh>
     bac:	2301      	movs	r3, #1
     bae:	4398      	bics	r0, r3
     bb0:	b2c2      	uxtb	r2, r0
     bb2:	2100      	movs	r1, #0
     bb4:	0020      	movs	r0, r4
     bb6:	f7ff ff07 	bl	9c8 <_ZN4RF2414write_registerEhh>
    if (ce_pin == csn_pin) {
      powerDown();
      powerUp();
    }
    #endif
    write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0]))); // Enable RX on pipe0
     bba:	2102      	movs	r1, #2
     bbc:	0020      	movs	r0, r4
     bbe:	f7ff fec3 	bl	948 <_ZN4RF2413read_registerEh>
     bc2:	b242      	sxtb	r2, r0
     bc4:	2001      	movs	r0, #1
     bc6:	4302      	orrs	r2, r0
     bc8:	b2d2      	uxtb	r2, r2
     bca:	2102      	movs	r1, #2
     bcc:	0020      	movs	r0, r4
     bce:	f7ff fefb 	bl	9c8 <_ZN4RF2414write_registerEhh>

    //delayMicroseconds(100);

}
     bd2:	bd10      	pop	{r4, pc}
        delay_usec(txDelay); //200
     bd4:	6a20      	ldr	r0, [r4, #32]
     bd6:	f002 fce7 	bl	35a8 <__delay_usec_veneer>
        flush_tx();
     bda:	0020      	movs	r0, r4
     bdc:	f7ff ff9c 	bl	b18 <_ZN4RF248flush_txEv>
     be0:	e7e0      	b.n	ba4 <_ZN4RF2413stopListeningEv+0x1c>
     be2:	Address 0x00000be2 is out of bounds.


00000be4 <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
     be4:	b510      	push	{r4, lr}
     be6:	0004      	movs	r4, r0
    uint8_t cfg = read_register(NRF_CONFIG);
     be8:	2100      	movs	r1, #0
     bea:	f7ff fead 	bl	948 <_ZN4RF2413read_registerEh>

    // if not powered up then power up and wait for the radio to initialize
    if (!(cfg & _BV(PWR_UP))) {
     bee:	0783      	lsls	r3, r0, #30
     bf0:	d500      	bpl.n	bf4 <_ZN4RF247powerUpEv+0x10>
        // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
        // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
        // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
        delay_usec(5000);
    }
}
     bf2:	bd10      	pop	{r4, pc}
        write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
     bf4:	2202      	movs	r2, #2
     bf6:	4302      	orrs	r2, r0
     bf8:	b2d2      	uxtb	r2, r2
     bfa:	2100      	movs	r1, #0
     bfc:	0020      	movs	r0, r4
     bfe:	f7ff fee3 	bl	9c8 <_ZN4RF2414write_registerEhh>
        delay_usec(5000);
     c02:	4802      	ldr	r0, [pc, #8]	; (c0c <_ZN4RF247powerUpEv+0x28>)
     c04:	f002 fcd0 	bl	35a8 <__delay_usec_veneer>
}
     c08:	e7f3      	b.n	bf2 <_ZN4RF247powerUpEv+0xe>
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	00001388 	.word	0x00001388

00000c10 <_ZN4RF249errNotifyEv>:
{
    #if defined(SERIAL_DEBUG) || defined(RF24_LINUX)
    printf_P(PSTR("RF24 HARDWARE FAIL: Radio not responding, verify pin connections, wiring, etc.\r\n"));
    #endif
    #if defined(FAILURE_HANDLING)
    failureDetected = 1;
     c10:	2301      	movs	r3, #1
     c12:	77c3      	strb	r3, [r0, #31]
    #else
    delay(5000);
    #endif
}
     c14:	4770      	bx	lr

00000c16 <_ZN4RF2414startFastWriteEPKvhbb>:
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24::startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{ //TMRh20
     c16:	b570      	push	{r4, r5, r6, lr}
     c18:	0004      	movs	r4, r0
     c1a:	a804      	add	r0, sp, #16
     c1c:	7805      	ldrb	r5, [r0, #0]

    //write_payload( buf,len);
    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
     c1e:	2b00      	cmp	r3, #0
     c20:	d006      	beq.n	c30 <_ZN4RF2414startFastWriteEPKvhbb+0x1a>
     c22:	23b0      	movs	r3, #176	; 0xb0
     c24:	0020      	movs	r0, r4
     c26:	f7ff fee9 	bl	9fc <_ZN4RF2413write_payloadEPKvhh>
    if (startTx) {
     c2a:	2d00      	cmp	r5, #0
     c2c:	d102      	bne.n	c34 <_ZN4RF2414startFastWriteEPKvhbb+0x1e>
        ce(HIGH);
    }

}
     c2e:	bd70      	pop	{r4, r5, r6, pc}
    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
     c30:	23a0      	movs	r3, #160	; 0xa0
     c32:	e7f7      	b.n	c24 <_ZN4RF2414startFastWriteEPKvhbb+0xe>
        ce(HIGH);
     c34:	2101      	movs	r1, #1
     c36:	0020      	movs	r0, r4
     c38:	f7ff fe58 	bl	8ec <_ZN4RF242ceEb>
}
     c3c:	e7f7      	b.n	c2e <_ZN4RF2414startFastWriteEPKvhbb+0x18>

00000c3e <_ZN4RF245writeEPKvhb>:
{
     c3e:	b530      	push	{r4, r5, lr}
     c40:	b083      	sub	sp, #12
     c42:	0004      	movs	r4, r0
    startFastWrite(buf, len, multicast);
     c44:	2001      	movs	r0, #1
     c46:	9000      	str	r0, [sp, #0]
     c48:	0020      	movs	r0, r4
     c4a:	f7ff ffe4 	bl	c16 <_ZN4RF2414startFastWriteEPKvhbb>
    uint32_t timer = millis();
     c4e:	f000 fe95 	bl	197c <millis>
     c52:	0005      	movs	r5, r0
    while (!(get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
     c54:	0020      	movs	r0, r4
     c56:	f7ff ff64 	bl	b22 <_ZN4RF2410get_statusEv>
     c5a:	2330      	movs	r3, #48	; 0x30
     c5c:	4203      	tst	r3, r0
     c5e:	d10a      	bne.n	c76 <_ZN4RF245writeEPKvhb+0x38>
        if (millis() - timer > 95) {
     c60:	f000 fe8c 	bl	197c <millis>
     c64:	1b40      	subs	r0, r0, r5
     c66:	285f      	cmp	r0, #95	; 0x5f
     c68:	d9f4      	bls.n	c54 <_ZN4RF245writeEPKvhb+0x16>
            errNotify();
     c6a:	0020      	movs	r0, r4
     c6c:	f7ff ffd0 	bl	c10 <_ZN4RF249errNotifyEv>
            return 0;
     c70:	2000      	movs	r0, #0
}
     c72:	b003      	add	sp, #12
     c74:	bd30      	pop	{r4, r5, pc}
    ce(LOW);
     c76:	2100      	movs	r1, #0
     c78:	0020      	movs	r0, r4
     c7a:	f7ff fe37 	bl	8ec <_ZN4RF242ceEb>
    uint8_t status = write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     c7e:	2270      	movs	r2, #112	; 0x70
     c80:	2107      	movs	r1, #7
     c82:	0020      	movs	r0, r4
     c84:	f7ff fea0 	bl	9c8 <_ZN4RF2414write_registerEhh>
    if (status & _BV(MAX_RT)) {
     c88:	06c3      	lsls	r3, r0, #27
     c8a:	d401      	bmi.n	c90 <_ZN4RF245writeEPKvhb+0x52>
    return 1;
     c8c:	2001      	movs	r0, #1
     c8e:	e7f0      	b.n	c72 <_ZN4RF245writeEPKvhb+0x34>
        flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
     c90:	0020      	movs	r0, r4
     c92:	f7ff ff41 	bl	b18 <_ZN4RF248flush_txEv>
        return 0;
     c96:	2000      	movs	r0, #0
     c98:	e7eb      	b.n	c72 <_ZN4RF245writeEPKvhb+0x34>

00000c9a <_ZN4RF245writeEPKvh>:
{
     c9a:	b510      	push	{r4, lr}
    return write(buf, len, 0);
     c9c:	2300      	movs	r3, #0
     c9e:	f7ff ffce 	bl	c3e <_ZN4RF245writeEPKvhb>
}
     ca2:	bd10      	pop	{r4, pc}

00000ca4 <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     ca4:	b570      	push	{r4, r5, r6, lr}
     ca6:	0004      	movs	r4, r0
     ca8:	000d      	movs	r5, r1
    if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY))) {
     caa:	2117      	movs	r1, #23
     cac:	f7ff fe4c 	bl	948 <_ZN4RF2413read_registerEh>
     cb0:	07c3      	lsls	r3, r0, #31
     cb2:	d501      	bpl.n	cb8 <_ZN4RF249availableEPh+0x14>
            *pipe_num = (status >> RX_P_NO) & 0x07;
        }
        return 1;
    }

    return 0;
     cb4:	2000      	movs	r0, #0


}
     cb6:	bd70      	pop	{r4, r5, r6, pc}
        if (pipe_num) {
     cb8:	2d00      	cmp	r5, #0
     cba:	d006      	beq.n	cca <_ZN4RF249availableEPh+0x26>
            uint8_t status = get_status();
     cbc:	0020      	movs	r0, r4
     cbe:	f7ff ff30 	bl	b22 <_ZN4RF2410get_statusEv>
            *pipe_num = (status >> RX_P_NO) & 0x07;
     cc2:	1043      	asrs	r3, r0, #1
     cc4:	2007      	movs	r0, #7
     cc6:	4018      	ands	r0, r3
     cc8:	7028      	strb	r0, [r5, #0]
        return 1;
     cca:	2001      	movs	r0, #1
     ccc:	e7f3      	b.n	cb6 <_ZN4RF249availableEPh+0x12>

00000cce <_ZN4RF249availableEv>:
{
     cce:	b510      	push	{r4, lr}
    return available(0);
     cd0:	2100      	movs	r1, #0
     cd2:	f7ff ffe7 	bl	ca4 <_ZN4RF249availableEPh>
}
     cd6:	bd10      	pop	{r4, pc}

00000cd8 <_ZN4RF244readEPvh>:

/****************************************************************************/

void RF24::read(void* buf, uint8_t len)
{
     cd8:	b510      	push	{r4, lr}
     cda:	0004      	movs	r4, r0

    // Fetch the payload
    read_payload(buf, len);
     cdc:	f7ff feca 	bl	a74 <_ZN4RF2412read_payloadEPvh>

    //Clear the two possible interrupt flags with one command
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
     ce0:	2270      	movs	r2, #112	; 0x70
     ce2:	2107      	movs	r1, #7
     ce4:	0020      	movs	r0, r4
     ce6:	f7ff fe6f 	bl	9c8 <_ZN4RF2414write_registerEhh>

}
     cea:	bd10      	pop	{r4, pc}

00000cec <_ZN4RF2415openWritingPipeEy>:
}

/****************************************************************************/

void RF24::openWritingPipe(uint64_t value)
{
     cec:	b510      	push	{r4, lr}
     cee:	b082      	sub	sp, #8
     cf0:	0004      	movs	r4, r0
     cf2:	9200      	str	r2, [sp, #0]
     cf4:	9301      	str	r3, [sp, #4]
    // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
    // expects it LSB first too, so we're good.

    write_register(RX_ADDR_P0, reinterpret_cast<uint8_t*>(&value), addr_width);
     cf6:	7f83      	ldrb	r3, [r0, #30]
     cf8:	466a      	mov	r2, sp
     cfa:	210a      	movs	r1, #10
     cfc:	f7ff fe3a 	bl	974 <_ZN4RF2414write_registerEhPKhh>
    write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), addr_width);
     d00:	7fa3      	ldrb	r3, [r4, #30]
     d02:	466a      	mov	r2, sp
     d04:	2110      	movs	r1, #16
     d06:	0020      	movs	r0, r4
     d08:	f7ff fe34 	bl	974 <_ZN4RF2414write_registerEhPKhh>


    //const uint8_t max_payload_size = 32;
    //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
    write_register(RX_PW_P0, payload_size);
     d0c:	7de2      	ldrb	r2, [r4, #23]
     d0e:	2111      	movs	r1, #17
     d10:	0020      	movs	r0, r4
     d12:	f7ff fe59 	bl	9c8 <_ZN4RF2414write_registerEhh>
}
     d16:	b002      	add	sp, #8
     d18:	bd10      	pop	{r4, pc}
     d1a:	Address 0x00000d1a is out of bounds.


00000d1c <_ZN4RF2415openReadingPipeEhy>:
PROGMEM = {RX_ADDR_P0, RX_ADDR_P1, RX_ADDR_P2, RX_ADDR_P3, RX_ADDR_P4, RX_ADDR_P5};
static const uint8_t child_payload_size[]
PROGMEM = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};

void RF24::openReadingPipe(uint8_t child, uint64_t address)
{
     d1c:	b530      	push	{r4, r5, lr}
     d1e:	b083      	sub	sp, #12
     d20:	0005      	movs	r5, r0
     d22:	000c      	movs	r4, r1
     d24:	9200      	str	r2, [sp, #0]
     d26:	9301      	str	r3, [sp, #4]
    // If this is pipe 0, cache the address.  This is needed because
    // openWritingPipe() will overwrite the pipe 0 address, so
    // startListening() will have to restore it.
    if (child == 0) {
     d28:	2900      	cmp	r1, #0
     d2a:	d021      	beq.n	d70 <_ZN4RF2415openReadingPipeEhy+0x54>
        memcpy(pipe0_reading_address, &address, addr_width);
    }

    if (child <= 6) {
     d2c:	2c06      	cmp	r4, #6
     d2e:	d81d      	bhi.n	d6c <_ZN4RF2415openReadingPipeEhy+0x50>
        // For pipes 2-5, only write the LSB
        if (child < 2) {
     d30:	2c01      	cmp	r4, #1
     d32:	d923      	bls.n	d7c <_ZN4RF2415openReadingPipeEhy+0x60>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
        } else {
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
     d34:	4b15      	ldr	r3, [pc, #84]	; (d8c <_ZN4RF2415openReadingPipeEhy+0x70>)
     d36:	5d19      	ldrb	r1, [r3, r4]
     d38:	2301      	movs	r3, #1
     d3a:	466a      	mov	r2, sp
     d3c:	0028      	movs	r0, r5
     d3e:	f7ff fe19 	bl	974 <_ZN4RF2414write_registerEhPKhh>
        }

        write_register(pgm_read_byte(&child_payload_size[child]), payload_size);
     d42:	7dea      	ldrb	r2, [r5, #23]
     d44:	4b12      	ldr	r3, [pc, #72]	; (d90 <_ZN4RF2415openReadingPipeEhy+0x74>)
     d46:	5d19      	ldrb	r1, [r3, r4]
     d48:	0028      	movs	r0, r5
     d4a:	f7ff fe3d 	bl	9c8 <_ZN4RF2414write_registerEhh>

        // Note it would be more efficient to set all of the bits for all open
        // pipes at once.  However, I thought it would make the calling code
        // more simple to do it this way.
        write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
     d4e:	2102      	movs	r1, #2
     d50:	0028      	movs	r0, r5
     d52:	f7ff fdf9 	bl	948 <_ZN4RF2413read_registerEh>
     d56:	b242      	sxtb	r2, r0
     d58:	4b0e      	ldr	r3, [pc, #56]	; (d94 <_ZN4RF2415openReadingPipeEhy+0x78>)
     d5a:	5d1b      	ldrb	r3, [r3, r4]
     d5c:	2001      	movs	r0, #1
     d5e:	4098      	lsls	r0, r3
     d60:	4302      	orrs	r2, r0
     d62:	b2d2      	uxtb	r2, r2
     d64:	2102      	movs	r1, #2
     d66:	0028      	movs	r0, r5
     d68:	f7ff fe2e 	bl	9c8 <_ZN4RF2414write_registerEhh>
    }
}
     d6c:	b003      	add	sp, #12
     d6e:	bd30      	pop	{r4, r5, pc}
        memcpy(pipe0_reading_address, &address, addr_width);
     d70:	7f82      	ldrb	r2, [r0, #30]
     d72:	4669      	mov	r1, sp
     d74:	3019      	adds	r0, #25
     d76:	f001 fbbf 	bl	24f8 <memcpy>
     d7a:	e7d7      	b.n	d2c <_ZN4RF2415openReadingPipeEhy+0x10>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
     d7c:	7fab      	ldrb	r3, [r5, #30]
     d7e:	4a03      	ldr	r2, [pc, #12]	; (d8c <_ZN4RF2415openReadingPipeEhy+0x70>)
     d80:	5d11      	ldrb	r1, [r2, r4]
     d82:	466a      	mov	r2, sp
     d84:	0028      	movs	r0, r5
     d86:	f7ff fdf5 	bl	974 <_ZN4RF2414write_registerEhPKhh>
     d8a:	e7da      	b.n	d42 <_ZN4RF2415openReadingPipeEhy+0x26>
     d8c:	000032b4 	.word	0x000032b4
     d90:	000032c4 	.word	0x000032c4
     d94:	000032bc 	.word	0x000032bc

00000d98 <_ZN4RF2416closeReadingPipeEh>:
}

/****************************************************************************/

void RF24::closeReadingPipe(uint8_t pipe)
{
     d98:	b570      	push	{r4, r5, r6, lr}
     d9a:	0004      	movs	r4, r0
     d9c:	000d      	movs	r5, r1
    write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
     d9e:	2102      	movs	r1, #2
     da0:	f7ff fdd2 	bl	948 <_ZN4RF2413read_registerEh>
     da4:	b242      	sxtb	r2, r0
     da6:	4b05      	ldr	r3, [pc, #20]	; (dbc <_ZN4RF2416closeReadingPipeEh+0x24>)
     da8:	5d59      	ldrb	r1, [r3, r5]
     daa:	2301      	movs	r3, #1
     dac:	408b      	lsls	r3, r1
     dae:	439a      	bics	r2, r3
     db0:	b2d2      	uxtb	r2, r2
     db2:	2102      	movs	r1, #2
     db4:	0020      	movs	r0, r4
     db6:	f7ff fe07 	bl	9c8 <_ZN4RF2414write_registerEhh>
}
     dba:	bd70      	pop	{r4, r5, r6, pc}
     dbc:	000032bc 	.word	0x000032bc

00000dc0 <_ZN4RF2414startListeningEv>:
{
     dc0:	b510      	push	{r4, lr}
     dc2:	0004      	movs	r4, r0
    powerUp();
     dc4:	f7ff ff0e 	bl	be4 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
     dc8:	2100      	movs	r1, #0
     dca:	0020      	movs	r0, r4
     dcc:	f7ff fdbc 	bl	948 <_ZN4RF2413read_registerEh>
     dd0:	2201      	movs	r2, #1
     dd2:	4302      	orrs	r2, r0
     dd4:	b2d2      	uxtb	r2, r2
     dd6:	2100      	movs	r1, #0
     dd8:	0020      	movs	r0, r4
     dda:	f7ff fdf5 	bl	9c8 <_ZN4RF2414write_registerEhh>
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     dde:	2270      	movs	r2, #112	; 0x70
     de0:	2107      	movs	r1, #7
     de2:	0020      	movs	r0, r4
     de4:	f7ff fdf0 	bl	9c8 <_ZN4RF2414write_registerEhh>
    ce(HIGH);
     de8:	2101      	movs	r1, #1
     dea:	0020      	movs	r0, r4
     dec:	f7ff fd7e 	bl	8ec <_ZN4RF242ceEb>
    if (pipe0_reading_address[0] > 0) {
     df0:	7e63      	ldrb	r3, [r4, #25]
     df2:	2b00      	cmp	r3, #0
     df4:	d00d      	beq.n	e12 <_ZN4RF2414startListeningEv+0x52>
        write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);
     df6:	7fa3      	ldrb	r3, [r4, #30]
     df8:	0022      	movs	r2, r4
     dfa:	3219      	adds	r2, #25
     dfc:	210a      	movs	r1, #10
     dfe:	0020      	movs	r0, r4
     e00:	f7ff fdb8 	bl	974 <_ZN4RF2414write_registerEhPKhh>
    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
     e04:	211d      	movs	r1, #29
     e06:	0020      	movs	r0, r4
     e08:	f7ff fd9e 	bl	948 <_ZN4RF2413read_registerEh>
     e0c:	0783      	lsls	r3, r0, #30
     e0e:	d405      	bmi.n	e1c <_ZN4RF2414startListeningEv+0x5c>
}
     e10:	bd10      	pop	{r4, pc}
        closeReadingPipe(0);
     e12:	2100      	movs	r1, #0
     e14:	0020      	movs	r0, r4
     e16:	f7ff ffbf 	bl	d98 <_ZN4RF2416closeReadingPipeEh>
     e1a:	e7f3      	b.n	e04 <_ZN4RF2414startListeningEv+0x44>
        flush_tx();
     e1c:	0020      	movs	r0, r4
     e1e:	f7ff fe7b 	bl	b18 <_ZN4RF248flush_txEv>
}
     e22:	e7f5      	b.n	e10 <_ZN4RF2414startListeningEv+0x50>

00000e24 <_ZN4RF2415toggle_featuresEv>:

/****************************************************************************/

void RF24::toggle_features(void)
{
     e24:	b510      	push	{r4, lr}
     e26:	0004      	movs	r4, r0
    csn(LOW);
     e28:	2100      	movs	r1, #0
     e2a:	f7ff fd45 	bl	8b8 <_ZN4RF243csnEb>
    beginTransaction();
    _SPI.Transfer(ACTIVATE);
     e2e:	2150      	movs	r1, #80	; 0x50
     e30:	6820      	ldr	r0, [r4, #0]
     e32:	f000 fcb9 	bl	17a8 <_ZN5spi_t8TransferEh>
    _SPI.Transfer(0x73);
     e36:	2173      	movs	r1, #115	; 0x73
     e38:	6820      	ldr	r0, [r4, #0]
     e3a:	f000 fcb5 	bl	17a8 <_ZN5spi_t8TransferEh>
    csn(HIGH);
     e3e:	2101      	movs	r1, #1
     e40:	0020      	movs	r0, r4
     e42:	f7ff fd39 	bl	8b8 <_ZN4RF243csnEb>
    endTransaction();
}
     e46:	bd10      	pop	{r4, pc}

00000e48 <_ZN4RF2410setAutoAckEb>:
}

/****************************************************************************/

void RF24::setAutoAck(bool enable)
{
     e48:	b510      	push	{r4, lr}
    if (enable) {
     e4a:	2900      	cmp	r1, #0
     e4c:	d004      	beq.n	e58 <_ZN4RF2410setAutoAckEb+0x10>
        write_register(EN_AA, 0x3F);
     e4e:	223f      	movs	r2, #63	; 0x3f
     e50:	2101      	movs	r1, #1
     e52:	f7ff fdb9 	bl	9c8 <_ZN4RF2414write_registerEhh>
    } else {
        write_register(EN_AA, 0);
    }
}
     e56:	bd10      	pop	{r4, pc}
        write_register(EN_AA, 0);
     e58:	2200      	movs	r2, #0
     e5a:	2101      	movs	r1, #1
     e5c:	f7ff fdb4 	bl	9c8 <_ZN4RF2414write_registerEhh>
}
     e60:	e7f9      	b.n	e56 <_ZN4RF2410setAutoAckEb+0xe>

00000e62 <_ZN4RF2410setPALevelEh>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
     e62:	b570      	push	{r4, r5, r6, lr}
     e64:	0005      	movs	r5, r0
     e66:	000c      	movs	r4, r1

    uint8_t setup = read_register(RF_SETUP) & 0xF8;
     e68:	2106      	movs	r1, #6
     e6a:	f7ff fd6d 	bl	948 <_ZN4RF2413read_registerEh>
     e6e:	2307      	movs	r3, #7
     e70:	4398      	bics	r0, r3
     e72:	b2c0      	uxtb	r0, r0

    if (level > 3) {                        // If invalid level, go to max PA
     e74:	2c03      	cmp	r4, #3
     e76:	d809      	bhi.n	e8c <_ZN4RF2410setPALevelEh+0x2a>
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
    } else {
        level = (level << 1) + 1;            // Else set level as requested
     e78:	0064      	lsls	r4, r4, #1
     e7a:	b2e2      	uxtb	r2, r4
     e7c:	3201      	adds	r2, #1
     e7e:	b2d2      	uxtb	r2, r2
    }

    write_register(RF_SETUP, setup |= level);    // Write it to the chip
     e80:	4302      	orrs	r2, r0
     e82:	2106      	movs	r1, #6
     e84:	0028      	movs	r0, r5
     e86:	f7ff fd9f 	bl	9c8 <_ZN4RF2414write_registerEhh>
}
     e8a:	bd70      	pop	{r4, r5, r6, pc}
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
     e8c:	2207      	movs	r2, #7
     e8e:	e7f7      	b.n	e80 <_ZN4RF2410setPALevelEh+0x1e>

00000e90 <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     e90:	b570      	push	{r4, r5, r6, lr}
     e92:	0006      	movs	r6, r0
     e94:	000d      	movs	r5, r1
    bool result = false;
    uint8_t setup = read_register(RF_SETUP);
     e96:	2106      	movs	r1, #6
     e98:	f7ff fd56 	bl	948 <_ZN4RF2413read_registerEh>

    // HIGH and LOW '00' is 1Mbs - our default
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
     e9c:	2328      	movs	r3, #40	; 0x28
     e9e:	4398      	bics	r0, r3
     ea0:	b2c4      	uxtb	r4, r0

    #if !defined(F_CPU) || F_CPU > 20000000
    txDelay = 250;
     ea2:	33d2      	adds	r3, #210	; 0xd2
     ea4:	6233      	str	r3, [r6, #32]
    #else //16Mhz Arduino
    txDelay=85;
    #endif
    if (speed == RF24_250KBPS) {
     ea6:	2d02      	cmp	r5, #2
     ea8:	d00e      	beq.n	ec8 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x38>
        txDelay = 155;
        #endif
    } else {
        // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
        // Making it '01'
        if (speed == RF24_2MBPS) {
     eaa:	2d01      	cmp	r5, #1
     eac:	d012      	beq.n	ed4 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
            #else // 16Mhz Arduino
            txDelay = 65;
            #endif
        }
    }
    write_register(RF_SETUP, setup);
     eae:	0022      	movs	r2, r4
     eb0:	2106      	movs	r1, #6
     eb2:	0030      	movs	r0, r6
     eb4:	f7ff fd88 	bl	9c8 <_ZN4RF2414write_registerEhh>

    // Verify our result
    if (read_register(RF_SETUP) == setup) {
     eb8:	2106      	movs	r1, #6
     eba:	0030      	movs	r0, r6
     ebc:	f7ff fd44 	bl	948 <_ZN4RF2413read_registerEh>
     ec0:	42a0      	cmp	r0, r4
     ec2:	d00d      	beq.n	ee0 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x50>
    bool result = false;
     ec4:	2000      	movs	r0, #0
        result = true;
    }
    return result;
}
     ec6:	bd70      	pop	{r4, r5, r6, pc}
        setup |= _BV(RF_DR_LOW);
     ec8:	2020      	movs	r0, #32
     eca:	4304      	orrs	r4, r0
     ecc:	b2e4      	uxtb	r4, r4
        txDelay = 450;
     ece:	33c8      	adds	r3, #200	; 0xc8
     ed0:	6233      	str	r3, [r6, #32]
     ed2:	e7ec      	b.n	eae <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1e>
            setup |= _BV(RF_DR_HIGH);
     ed4:	2008      	movs	r0, #8
     ed6:	4304      	orrs	r4, r0
     ed8:	b2e4      	uxtb	r4, r4
            txDelay = 190;
     eda:	23be      	movs	r3, #190	; 0xbe
     edc:	6233      	str	r3, [r6, #32]
     ede:	e7e6      	b.n	eae <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1e>
        result = true;
     ee0:	2001      	movs	r0, #1
     ee2:	e7f0      	b.n	ec6 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x36>

00000ee4 <_ZN4RF2410setRetriesEhh>:
    write_register(NRF_CONFIG, disable);
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
     ee4:	b510      	push	{r4, lr}
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
     ee6:	0109      	lsls	r1, r1, #4
     ee8:	230f      	movs	r3, #15
     eea:	4013      	ands	r3, r2
     eec:	430b      	orrs	r3, r1
     eee:	b2da      	uxtb	r2, r3
     ef0:	2104      	movs	r1, #4
     ef2:	f7ff fd69 	bl	9c8 <_ZN4RF2414write_registerEhh>
}
     ef6:	bd10      	pop	{r4, pc}

00000ef8 <_ZN4RF245beginEv>:
{
     ef8:	b570      	push	{r4, r5, r6, lr}
     efa:	b084      	sub	sp, #16
     efc:	0004      	movs	r4, r0
    if (ce_pin != csn_pin) {
     efe:	4669      	mov	r1, sp
     f00:	0003      	movs	r3, r0
     f02:	330c      	adds	r3, #12
     f04:	000a      	movs	r2, r1
     f06:	cb21      	ldmia	r3!, {r0, r5}
     f08:	c221      	stmia	r2!, {r0, r5}
        return !operator==(b);
     f0a:	2208      	movs	r2, #8
     f0c:	a802      	add	r0, sp, #8
     f0e:	f001 faf3 	bl	24f8 <memcpy>
        return port == b.port && pin == b.pin;
     f12:	6863      	ldr	r3, [r4, #4]
     f14:	9a02      	ldr	r2, [sp, #8]
     f16:	429a      	cmp	r2, r3
     f18:	d100      	bne.n	f1c <_ZN4RF245beginEv+0x24>
     f1a:	e085      	b.n	1028 <_ZN4RF245beginEv+0x130>
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     f1c:	68a1      	ldr	r1, [r4, #8]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     f1e:	2201      	movs	r2, #1
     f20:	408a      	lsls	r2, r1
     f22:	01db      	lsls	r3, r3, #7
     f24:	4846      	ldr	r0, [pc, #280]	; (1040 <_ZN4RF245beginEv+0x148>)
     f26:	4684      	mov	ip, r0
     f28:	4463      	add	r3, ip
     f2a:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     f2c:	185b      	adds	r3, r3, r1
     f2e:	3340      	adds	r3, #64	; 0x40
     f30:	781a      	ldrb	r2, [r3, #0]
     f32:	2102      	movs	r1, #2
     f34:	438a      	bics	r2, r1
     f36:	701a      	strb	r2, [r3, #0]
    if (ce_pin != csn_pin)
     f38:	4669      	mov	r1, sp
     f3a:	0023      	movs	r3, r4
     f3c:	330c      	adds	r3, #12
     f3e:	000a      	movs	r2, r1
     f40:	cb21      	ldmia	r3!, {r0, r5}
     f42:	c221      	stmia	r2!, {r0, r5}
        return !operator==(b);
     f44:	2208      	movs	r2, #8
     f46:	a802      	add	r0, sp, #8
     f48:	f001 fad6 	bl	24f8 <memcpy>
        return port == b.port && pin == b.pin;
     f4c:	6863      	ldr	r3, [r4, #4]
     f4e:	9a02      	ldr	r2, [sp, #8]
     f50:	4293      	cmp	r3, r2
     f52:	d100      	bne.n	f56 <_ZN4RF245beginEv+0x5e>
     f54:	e06e      	b.n	1034 <_ZN4RF245beginEv+0x13c>
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     f56:	6921      	ldr	r1, [r4, #16]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     f58:	2201      	movs	r2, #1
     f5a:	408a      	lsls	r2, r1
     f5c:	68e3      	ldr	r3, [r4, #12]
     f5e:	01db      	lsls	r3, r3, #7
     f60:	4837      	ldr	r0, [pc, #220]	; (1040 <_ZN4RF245beginEv+0x148>)
     f62:	4684      	mov	ip, r0
     f64:	4463      	add	r3, ip
     f66:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     f68:	185b      	adds	r3, r3, r1
     f6a:	3340      	adds	r3, #64	; 0x40
     f6c:	781a      	ldrb	r2, [r3, #0]
     f6e:	2102      	movs	r1, #2
     f70:	438a      	bics	r2, r1
     f72:	701a      	strb	r2, [r3, #0]
    ce(LOW);
     f74:	2100      	movs	r1, #0
     f76:	0020      	movs	r0, r4
     f78:	f7ff fcb8 	bl	8ec <_ZN4RF242ceEb>
    csn(HIGH);
     f7c:	2101      	movs	r1, #1
     f7e:	0020      	movs	r0, r4
     f80:	f7ff fc9a 	bl	8b8 <_ZN4RF243csnEb>
    delay_usec(5000);
     f84:	482f      	ldr	r0, [pc, #188]	; (1044 <_ZN4RF245beginEv+0x14c>)
     f86:	f002 fb0f 	bl	35a8 <__delay_usec_veneer>
    write_register(NRF_CONFIG, 0x0C);
     f8a:	220c      	movs	r2, #12
     f8c:	2100      	movs	r1, #0
     f8e:	0020      	movs	r0, r4
     f90:	f7ff fd1a 	bl	9c8 <_ZN4RF2414write_registerEhh>
    setRetries(5, 15);
     f94:	220f      	movs	r2, #15
     f96:	2105      	movs	r1, #5
     f98:	0020      	movs	r0, r4
     f9a:	f7ff ffa3 	bl	ee4 <_ZN4RF2410setRetriesEhh>
    if (setDataRate(RF24_250KBPS)) {
     f9e:	2102      	movs	r1, #2
     fa0:	0020      	movs	r0, r4
     fa2:	f7ff ff75 	bl	e90 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     fa6:	2800      	cmp	r0, #0
     fa8:	d001      	beq.n	fae <_ZN4RF245beginEv+0xb6>
        p_variant = true;
     faa:	2301      	movs	r3, #1
     fac:	75a3      	strb	r3, [r4, #22]
    setup = read_register(RF_SETUP);
     fae:	2106      	movs	r1, #6
     fb0:	0020      	movs	r0, r4
     fb2:	f7ff fcc9 	bl	948 <_ZN4RF2413read_registerEh>
     fb6:	0006      	movs	r6, r0
    setDataRate(RF24_1MBPS);
     fb8:	2100      	movs	r1, #0
     fba:	0020      	movs	r0, r4
     fbc:	f7ff ff68 	bl	e90 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    toggle_features();
     fc0:	0020      	movs	r0, r4
     fc2:	f7ff ff2f 	bl	e24 <_ZN4RF2415toggle_featuresEv>
    write_register(FEATURE, 0);
     fc6:	2200      	movs	r2, #0
     fc8:	211d      	movs	r1, #29
     fca:	0020      	movs	r0, r4
     fcc:	f7ff fcfc 	bl	9c8 <_ZN4RF2414write_registerEhh>
    write_register(DYNPD, 0);
     fd0:	2200      	movs	r2, #0
     fd2:	211c      	movs	r1, #28
     fd4:	0020      	movs	r0, r4
     fd6:	f7ff fcf7 	bl	9c8 <_ZN4RF2414write_registerEhh>
    dynamic_payloads_enabled = false;
     fda:	2500      	movs	r5, #0
     fdc:	7625      	strb	r5, [r4, #24]
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     fde:	2270      	movs	r2, #112	; 0x70
     fe0:	2107      	movs	r1, #7
     fe2:	0020      	movs	r0, r4
     fe4:	f7ff fcf0 	bl	9c8 <_ZN4RF2414write_registerEhh>
    setChannel(76);
     fe8:	214c      	movs	r1, #76	; 0x4c
     fea:	0020      	movs	r0, r4
     fec:	f7ff fdbd 	bl	b6a <_ZN4RF2410setChannelEh>
    flush_rx();
     ff0:	0020      	movs	r0, r4
     ff2:	f7ff fd8c 	bl	b0e <_ZN4RF248flush_rxEv>
    flush_tx();
     ff6:	0020      	movs	r0, r4
     ff8:	f7ff fd8e 	bl	b18 <_ZN4RF248flush_txEv>
    powerUp(); //Power up by default when begin() is called
     ffc:	0020      	movs	r0, r4
     ffe:	f7ff fdf1 	bl	be4 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
    1002:	2100      	movs	r1, #0
    1004:	0020      	movs	r0, r4
    1006:	f7ff fc9f 	bl	948 <_ZN4RF2413read_registerEh>
    100a:	2301      	movs	r3, #1
    100c:	4398      	bics	r0, r3
    100e:	b2c2      	uxtb	r2, r0
    1010:	2100      	movs	r1, #0
    1012:	0020      	movs	r0, r4
    1014:	f7ff fcd8 	bl	9c8 <_ZN4RF2414write_registerEhh>
    return (setup != 0 && setup != 0xff);
    1018:	3e01      	subs	r6, #1
    101a:	b2f6      	uxtb	r6, r6
    101c:	23fd      	movs	r3, #253	; 0xfd
    101e:	42b3      	cmp	r3, r6
    1020:	416d      	adcs	r5, r5
    1022:	b2e8      	uxtb	r0, r5
}
    1024:	b004      	add	sp, #16
    1026:	bd70      	pop	{r4, r5, r6, pc}
        return port == b.port && pin == b.pin;
    1028:	68a2      	ldr	r2, [r4, #8]
    102a:	9903      	ldr	r1, [sp, #12]
    102c:	428a      	cmp	r2, r1
    102e:	d000      	beq.n	1032 <_ZN4RF245beginEv+0x13a>
    1030:	e774      	b.n	f1c <_ZN4RF245beginEv+0x24>
    1032:	e781      	b.n	f38 <_ZN4RF245beginEv+0x40>
    1034:	68a3      	ldr	r3, [r4, #8]
    1036:	9a03      	ldr	r2, [sp, #12]
    1038:	4293      	cmp	r3, r2
    103a:	d000      	beq.n	103e <_ZN4RF245beginEv+0x146>
    103c:	e78b      	b.n	f56 <_ZN4RF245beginEv+0x5e>
    103e:	e799      	b.n	f74 <_ZN4RF245beginEv+0x7c>
    1040:	41004400 	.word	0x41004400
    1044:	00001388 	.word	0x00001388

00001048 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_>:
        }
    }

    gsm.AddSMSFunc({ "info", cmd_info, GSM::LEVEL_USER });
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, GSM::LEVEL_USER });
    gsm.AddSMSFunc({ "clear", [](GSM* gsm, const char* sender, const char* args) { net.m_nodes.clear(); }, GSM::LEVEL_USER });
    1048:	b510      	push	{r4, lr}
    size_t size() {
        return m_size;
    }

    void clear() {
        if(m_data && m_size) free(m_data);
    104a:	4b07      	ldr	r3, [pc, #28]	; (1068 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x20>)
    104c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    104e:	2800      	cmp	r0, #0
    1050:	d002      	beq.n	1058 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x10>
    1052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1054:	2b00      	cmp	r3, #0
    1056:	d104      	bne.n	1062 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x1a>
        m_data = NULL;
    1058:	4b03      	ldr	r3, [pc, #12]	; (1068 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x20>)
    105a:	2200      	movs	r2, #0
    105c:	635a      	str	r2, [r3, #52]	; 0x34
        m_size = 0;
    105e:	631a      	str	r2, [r3, #48]	; 0x30
    1060:	bd10      	pop	{r4, pc}
        if(m_data && m_size) free(m_data);
    1062:	f001 fa3f 	bl	24e4 <free>
    1066:	e7f7      	b.n	1058 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x10>
    1068:	200000a8 	.word	0x200000a8

0000106c <_ZN9SensornetD1Ev>:
	char name[8]; // 8 bytes
	uint8_t type; // 1 byte
	uint8_t data[22]; // total 32 bytes (max nrf24l01 packet size)
};

class Sensornet {
    106c:	b510      	push	{r4, lr}
    106e:	0004      	movs	r4, r0
        if(m_data) free(m_data);
    1070:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1072:	2800      	cmp	r0, #0
    1074:	d001      	beq.n	107a <_ZN9SensornetD1Ev+0xe>
    1076:	f001 fa35 	bl	24e4 <free>
    107a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    107c:	2800      	cmp	r0, #0
    107e:	d001      	beq.n	1084 <_ZN9SensornetD1Ev+0x18>
    1080:	f001 fa30 	bl	24e4 <free>
    1084:	0020      	movs	r0, r4
    1086:	bd10      	pop	{r4, pc}

00001088 <_ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_>:
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, GSM::LEVEL_USER });
    1088:	b510      	push	{r4, lr}
    108a:	0013      	movs	r3, r2
    108c:	000a      	movs	r2, r1
    108e:	0001      	movs	r1, r0
    1090:	4801      	ldr	r0, [pc, #4]	; (1098 <_ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_+0x10>)
    1092:	f001 f849 	bl	2128 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_>
    1096:	bd10      	pop	{r4, pc}
    1098:	200000a8 	.word	0x200000a8

0000109c <_Z41__static_initialization_and_destruction_0ii>:
        
        gpio::toggle(led);
        //auto start = millis();
        //while(millis() - start < 500);
    }
    109c:	b570      	push	{r4, r5, r6, lr}
    109e:	b092      	sub	sp, #72	; 0x48
    10a0:	2801      	cmp	r0, #1
    10a2:	d001      	beq.n	10a8 <_Z41__static_initialization_and_destruction_0ii+0xc>
    10a4:	b012      	add	sp, #72	; 0x48
    10a6:	bd70      	pop	{r4, r5, r6, pc}
    10a8:	4b12      	ldr	r3, [pc, #72]	; (10f4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    10aa:	4299      	cmp	r1, r3
    10ac:	d1fa      	bne.n	10a4 <_Z41__static_initialization_and_destruction_0ii+0x8>
);
    10ae:	2400      	movs	r4, #0
    10b0:	4e11      	ldr	r6, [pc, #68]	; (10f8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    10b2:	4b12      	ldr	r3, [pc, #72]	; (10fc <_Z41__static_initialization_and_destruction_0ii+0x60>)
    10b4:	0021      	movs	r1, r4
    10b6:	2202      	movs	r2, #2
    10b8:	0030      	movs	r0, r6
    10ba:	f7ff f819 	bl	f0 <_ZN3GSMC1E6gpio_tP6uart_t>
static GSM gsm(
    10be:	4d10      	ldr	r5, [pc, #64]	; (1100 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    10c0:	002a      	movs	r2, r5
    10c2:	4910      	ldr	r1, [pc, #64]	; (1104 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    10c4:	0030      	movs	r0, r6
    10c6:	f001 f90f 	bl	22e8 <__aeabi_atexit>
static Sensornet net(RF24({ GPIO_PORTA, 14 }, { GPIO_PORTA, 15 }, g_spi0));
    10ca:	4b0f      	ldr	r3, [pc, #60]	; (1108 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    10cc:	9301      	str	r3, [sp, #4]
    10ce:	230f      	movs	r3, #15
    10d0:	9300      	str	r3, [sp, #0]
    10d2:	0023      	movs	r3, r4
    10d4:	0021      	movs	r1, r4
    10d6:	220e      	movs	r2, #14
    10d8:	a802      	add	r0, sp, #8
    10da:	f7ff fd27 	bl	b2c <_ZN4RF24C1E6gpio_tS0_R5spi_t>
    10de:	4c0b      	ldr	r4, [pc, #44]	; (110c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    10e0:	a902      	add	r1, sp, #8
    10e2:	0020      	movs	r0, r4
    10e4:	f000 fefa 	bl	1edc <_ZN9SensornetC1ERK4RF24>
    10e8:	002a      	movs	r2, r5
    10ea:	4909      	ldr	r1, [pc, #36]	; (1110 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    10ec:	0020      	movs	r0, r4
    10ee:	f001 f8fb 	bl	22e8 <__aeabi_atexit>
    10f2:	e7d7      	b.n	10a4 <_Z41__static_initialization_and_destruction_0ii+0x8>
    10f4:	0000ffff 	.word	0x0000ffff
    10f8:	20000094 	.word	0x20000094
    10fc:	200002fc 	.word	0x200002fc
    1100:	2000000c 	.word	0x2000000c
    1104:	00000215 	.word	0x00000215
    1108:	200000e0 	.word	0x200000e0
    110c:	200000a8 	.word	0x200000a8
    1110:	0000106d 	.word	0x0000106d

00001114 <_ZN3Str7reserveEi>:
    }
}

// Reserve memory, preserving the current of the buffer
void    Str::reserve(int new_capacity)
{
    1114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1116:	0004      	movs	r4, r0
    1118:	000e      	movs	r6, r1
    if (new_capacity <= Capacity)
    111a:	6843      	ldr	r3, [r0, #4]
    111c:	02db      	lsls	r3, r3, #11
    111e:	0adb      	lsrs	r3, r3, #11
    1120:	428b      	cmp	r3, r1
    1122:	da20      	bge.n	1166 <_ZN3Str7reserveEi+0x52>
        return;

    char* new_data;
    if (new_capacity < LocalBufSize)
    1124:	88c5      	ldrh	r5, [r0, #6]
    1126:	046d      	lsls	r5, r5, #17
    1128:	0dad      	lsrs	r5, r5, #22
    112a:	428d      	cmp	r5, r1
    112c:	dd1c      	ble.n	1168 <_ZN3Str7reserveEi+0x54>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
    112e:	0007      	movs	r7, r0
    1130:	3708      	adds	r7, #8
        // Disowned or LocalBuf -> Heap
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    }

    // string in Data might be longer than new_capacity if it wasn't owned, don't copy too much
    strncpy(new_data, Data, new_capacity - 1);
    1132:	1e6e      	subs	r6, r5, #1
    1134:	0032      	movs	r2, r6
    1136:	6821      	ldr	r1, [r4, #0]
    1138:	0038      	movs	r0, r7
    113a:	f001 fb27 	bl	278c <strncpy>
    new_data[new_capacity - 1] = 0;
    113e:	19be      	adds	r6, r7, r6
    1140:	2300      	movs	r3, #0
    1142:	7033      	strb	r3, [r6, #0]

    if (Owned && !is_using_local_buf())
    1144:	2307      	movs	r3, #7
    1146:	56e3      	ldrsb	r3, [r4, r3]
    1148:	2b00      	cmp	r3, #0
    114a:	db13      	blt.n	1174 <_ZN3Str7reserveEi+0x60>
        STR_MEMFREE(Data);

    Data = new_data;
    114c:	6027      	str	r7, [r4, #0]
    Capacity = new_capacity;
    114e:	02ed      	lsls	r5, r5, #11
    1150:	0aed      	lsrs	r5, r5, #11
    1152:	6863      	ldr	r3, [r4, #4]
    1154:	0d5b      	lsrs	r3, r3, #21
    1156:	055b      	lsls	r3, r3, #21
    1158:	431d      	orrs	r5, r3
    115a:	6065      	str	r5, [r4, #4]
    Owned = 1;
    115c:	0e1b      	lsrs	r3, r3, #24
    115e:	2280      	movs	r2, #128	; 0x80
    1160:	4252      	negs	r2, r2
    1162:	4313      	orrs	r3, r2
    1164:	71e3      	strb	r3, [r4, #7]
}
    1166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    1168:	0008      	movs	r0, r1
    116a:	f001 f9b1 	bl	24d0 <malloc>
    116e:	0007      	movs	r7, r0
    1170:	0035      	movs	r5, r6
    1172:	e7de      	b.n	1132 <_ZN3Str7reserveEi+0x1e>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1174:	6820      	ldr	r0, [r4, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
    1176:	0023      	movs	r3, r4
    1178:	3308      	adds	r3, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    117a:	4298      	cmp	r0, r3
    117c:	d002      	beq.n	1184 <_ZN3Str7reserveEi+0x70>
        STR_MEMFREE(Data);
    117e:	f001 f9b1 	bl	24e4 <free>
    1182:	e7e3      	b.n	114c <_ZN3Str7reserveEi+0x38>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1184:	88e2      	ldrh	r2, [r4, #6]
    1186:	4b02      	ldr	r3, [pc, #8]	; (1190 <_ZN3Str7reserveEi+0x7c>)
    1188:	421a      	tst	r2, r3
    118a:	d1df      	bne.n	114c <_ZN3Str7reserveEi+0x38>
    118c:	e7f7      	b.n	117e <_ZN3Str7reserveEi+0x6a>
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	00007fe0 	.word	0x00007fe0

00001194 <_ZN3Str15reserve_discardEi>:

// Reserve memory, discarding the current of the buffer (if we expect to be fully rewritten)
void    Str::reserve_discard(int new_capacity)
{
    1194:	b570      	push	{r4, r5, r6, lr}
    1196:	0004      	movs	r4, r0
    1198:	000d      	movs	r5, r1
    if (new_capacity <= Capacity)
    119a:	6843      	ldr	r3, [r0, #4]
    119c:	02db      	lsls	r3, r3, #11
    119e:	0adb      	lsrs	r3, r3, #11
    11a0:	428b      	cmp	r3, r1
    11a2:	da15      	bge.n	11d0 <_ZN3Str15reserve_discardEi+0x3c>
        return;

    if (Owned && !is_using_local_buf())
    11a4:	2307      	movs	r3, #7
    11a6:	56c3      	ldrsb	r3, [r0, r3]
    11a8:	2b00      	cmp	r3, #0
    11aa:	db12      	blt.n	11d2 <_ZN3Str15reserve_discardEi+0x3e>
        STR_MEMFREE(Data);

    if (new_capacity < LocalBufSize)
    11ac:	88e3      	ldrh	r3, [r4, #6]
    11ae:	045b      	lsls	r3, r3, #17
    11b0:	0d9b      	lsrs	r3, r3, #22
    11b2:	42ab      	cmp	r3, r5
    11b4:	dd1a      	ble.n	11ec <_ZN3Str15reserve_discardEi+0x58>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
    11b6:	0022      	movs	r2, r4
    11b8:	3208      	adds	r2, #8
    {
        // Disowned -> LocalBuf
        Data = local_buf();
    11ba:	6022      	str	r2, [r4, #0]
        Capacity = LocalBufSize;
    11bc:	6862      	ldr	r2, [r4, #4]
    11be:	0d52      	lsrs	r2, r2, #21
    11c0:	0552      	lsls	r2, r2, #21
    11c2:	4313      	orrs	r3, r2
    11c4:	6063      	str	r3, [r4, #4]
    {
        // Disowned or LocalBuf -> Heap
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
        Capacity = new_capacity;
    }
    Owned = 1;
    11c6:	79e2      	ldrb	r2, [r4, #7]
    11c8:	2380      	movs	r3, #128	; 0x80
    11ca:	425b      	negs	r3, r3
    11cc:	4313      	orrs	r3, r2
    11ce:	71e3      	strb	r3, [r4, #7]
}
    11d0:	bd70      	pop	{r4, r5, r6, pc}
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    11d2:	6800      	ldr	r0, [r0, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
    11d4:	0023      	movs	r3, r4
    11d6:	3308      	adds	r3, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    11d8:	4283      	cmp	r3, r0
    11da:	d002      	beq.n	11e2 <_ZN3Str15reserve_discardEi+0x4e>
        STR_MEMFREE(Data);
    11dc:	f001 f982 	bl	24e4 <free>
    11e0:	e7e4      	b.n	11ac <_ZN3Str15reserve_discardEi+0x18>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    11e2:	88e2      	ldrh	r2, [r4, #6]
    11e4:	4b07      	ldr	r3, [pc, #28]	; (1204 <_ZN3Str15reserve_discardEi+0x70>)
    11e6:	421a      	tst	r2, r3
    11e8:	d1e0      	bne.n	11ac <_ZN3Str15reserve_discardEi+0x18>
    11ea:	e7f7      	b.n	11dc <_ZN3Str15reserve_discardEi+0x48>
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    11ec:	0028      	movs	r0, r5
    11ee:	f001 f96f 	bl	24d0 <malloc>
    11f2:	6020      	str	r0, [r4, #0]
        Capacity = new_capacity;
    11f4:	02ed      	lsls	r5, r5, #11
    11f6:	0aed      	lsrs	r5, r5, #11
    11f8:	6863      	ldr	r3, [r4, #4]
    11fa:	0d59      	lsrs	r1, r3, #21
    11fc:	0549      	lsls	r1, r1, #21
    11fe:	430d      	orrs	r5, r1
    1200:	6065      	str	r5, [r4, #4]
    1202:	e7e0      	b.n	11c6 <_ZN3Str15reserve_discardEi+0x32>
    1204:	00007fe0 	.word	0x00007fe0

00001208 <_ZN3Str13appendfv_fromEiPKcSt9__va_list>:
    return add_len;
}

// FIXME: merge setfv() and appendfv()?
int     Str::appendfv_from(int idx, const char* fmt, va_list args)
{
    1208:	b5f0      	push	{r4, r5, r6, r7, lr}
    120a:	b083      	sub	sp, #12
    120c:	0005      	movs	r5, r0
    120e:	000e      	movs	r6, r1
    1210:	0017      	movs	r7, r2
    // Needed for portability on platforms where va_list are passed by reference and modified by functions
    va_list args2;
    va_copy(args2, args);
    1212:	9301      	str	r3, [sp, #4]
    if (Capacity < idx + add_len + 1)
        reserve(idx + add_len + 1);
    add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
#else
    // First try
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    1214:	2207      	movs	r2, #7
    1216:	5682      	ldrsb	r2, [r0, r2]
    1218:	2a00      	cmp	r2, #0
    121a:	db10      	blt.n	123e <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x36>
    121c:	2000      	movs	r0, #0
    121e:	2a00      	cmp	r2, #0
    1220:	db10      	blt.n	1244 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x3c>
    1222:	2100      	movs	r1, #0
    1224:	003a      	movs	r2, r7
    1226:	f001 fbed 	bl	2a04 <vsniprintf>
    122a:	0004      	movs	r4, r0
    STR_ASSERT(add_len >= 0);

    if (Capacity < idx + add_len + 1)
    122c:	1831      	adds	r1, r6, r0
    122e:	686b      	ldr	r3, [r5, #4]
    1230:	02db      	lsls	r3, r3, #11
    1232:	0adb      	lsrs	r3, r3, #11
    1234:	4299      	cmp	r1, r3
    1236:	da0a      	bge.n	124e <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x46>
    }
#endif

    STR_ASSERT(Owned);
    return add_len;
}
    1238:	0020      	movs	r0, r4
    123a:	b003      	add	sp, #12
    123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    123e:	6801      	ldr	r1, [r0, #0]
    1240:	1988      	adds	r0, r1, r6
    1242:	e7ec      	b.n	121e <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x16>
    1244:	686a      	ldr	r2, [r5, #4]
    1246:	02d1      	lsls	r1, r2, #11
    1248:	0ac9      	lsrs	r1, r1, #11
    124a:	1b89      	subs	r1, r1, r6
    124c:	e7ea      	b.n	1224 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x1c>
        reserve(idx + add_len + 1);
    124e:	3101      	adds	r1, #1
    1250:	0028      	movs	r0, r5
    1252:	f7ff ff5f 	bl	1114 <_ZN3Str7reserveEi>
        add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
    1256:	6828      	ldr	r0, [r5, #0]
    1258:	1c61      	adds	r1, r4, #1
    125a:	1980      	adds	r0, r0, r6
    125c:	9b01      	ldr	r3, [sp, #4]
    125e:	003a      	movs	r2, r7
    1260:	f001 fbd0 	bl	2a04 <vsniprintf>
    1264:	0004      	movs	r4, r0
    return add_len;
    1266:	e7e7      	b.n	1238 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x30>

00001268 <_ZN3Str8appendfvEPKcSt9__va_list>:
    int cur_len = length();
    return append_from(cur_len, s, s_end);
}

int     Str::appendfv(const char* fmt, va_list args)
{
    1268:	b570      	push	{r4, r5, r6, lr}
    126a:	0004      	movs	r4, r0
    126c:	000d      	movs	r5, r1
    126e:	0016      	movs	r6, r2
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
    1270:	6800      	ldr	r0, [r0, #0]
    1272:	f001 fa73 	bl	275c <strlen>
    1276:	0001      	movs	r1, r0
    int cur_len = length();
    return appendfv_from(cur_len, fmt, args);
    1278:	0033      	movs	r3, r6
    127a:	002a      	movs	r2, r5
    127c:	0020      	movs	r0, r4
    127e:	f7ff ffc3 	bl	1208 <_ZN3Str13appendfv_fromEiPKcSt9__va_list>
}
    1282:	bd70      	pop	{r4, r5, r6, pc}

00001284 <_ZN3Str7appendfEPKcz>:

int     Str::appendf(const char* fmt, ...)
{
    1284:	b40e      	push	{r1, r2, r3}
    1286:	b500      	push	{lr}
    1288:	b082      	sub	sp, #8
    128a:	aa03      	add	r2, sp, #12
    128c:	ca02      	ldmia	r2!, {r1}
    va_list args;
    va_start(args, fmt);
    128e:	9201      	str	r2, [sp, #4]
    int len = appendfv(fmt, args);
    1290:	f7ff ffea 	bl	1268 <_ZN3Str8appendfvEPKcSt9__va_list>
    va_end(args);
    return len;
}
    1294:	b002      	add	sp, #8
    1296:	bc08      	pop	{r3}
    1298:	b003      	add	sp, #12
    129a:	4718      	bx	r3

0000129c <_ZL8cmd_infoP3GSMPKcS2_>:
static void cmd_info(GSM* gsm, const char* sender, const char* args) {
    129c:	b5f0      	push	{r4, r5, r6, r7, lr}
    129e:	46d6      	mov	lr, sl
    12a0:	464f      	mov	r7, r9
    12a2:	4646      	mov	r6, r8
    12a4:	b5c0      	push	{r6, r7, lr}
    12a6:	b084      	sub	sp, #16
    12a8:	4681      	mov	r9, r0
    12aa:	4688      	mov	r8, r1
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
    12ac:	aa02      	add	r2, sp, #8
    12ae:	4b3c      	ldr	r3, [pc, #240]	; (13a0 <_ZL8cmd_infoP3GSMPKcS2_+0x104>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	9302      	str	r3, [sp, #8]
    Capacity = 0;
    12b4:	9b03      	ldr	r3, [sp, #12]
    12b6:	0d5b      	lsrs	r3, r3, #21
    12b8:	0559      	lsls	r1, r3, #21
    12ba:	9103      	str	r1, [sp, #12]
    LocalBufSize = 0;
    12bc:	015b      	lsls	r3, r3, #5
    12be:	4939      	ldr	r1, [pc, #228]	; (13a4 <_ZL8cmd_infoP3GSMPKcS2_+0x108>)
    12c0:	400b      	ands	r3, r1
    12c2:	80d3      	strh	r3, [r2, #6]
    Owned = 0;
    12c4:	2300      	movs	r3, #0
    12c6:	71d3      	strb	r3, [r2, #7]
    if ((int)Capacity < buf_len)
    12c8:	9b03      	ldr	r3, [sp, #12]
    12ca:	02db      	lsls	r3, r3, #11
    12cc:	0adb      	lsrs	r3, r3, #11
    12ce:	2b06      	cmp	r3, #6
    12d0:	d912      	bls.n	12f8 <_ZL8cmd_infoP3GSMPKcS2_+0x5c>
    memcpy(Data, src, buf_len);
    12d2:	ac02      	add	r4, sp, #8
    12d4:	2207      	movs	r2, #7
    12d6:	4934      	ldr	r1, [pc, #208]	; (13a8 <_ZL8cmd_infoP3GSMPKcS2_+0x10c>)
    12d8:	9802      	ldr	r0, [sp, #8]
    12da:	f001 f90d 	bl	24f8 <memcpy>
    Owned = 1;
    12de:	79e2      	ldrb	r2, [r4, #7]
    12e0:	2380      	movs	r3, #128	; 0x80
    12e2:	425b      	negs	r3, r3
    12e4:	4313      	orrs	r3, r2
    12e6:	71e3      	strb	r3, [r4, #7]
        return m_data;
    12e8:	4b30      	ldr	r3, [pc, #192]	; (13ac <_ZL8cmd_infoP3GSMPKcS2_+0x110>)
    12ea:	6b5c      	ldr	r4, [r3, #52]	; 0x34
        return m_data + m_size;
    12ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    12ee:	00de      	lsls	r6, r3, #3
    12f0:	18f6      	adds	r6, r6, r3
    12f2:	00b6      	lsls	r6, r6, #2
    12f4:	19a6      	adds	r6, r4, r6
    12f6:	e00b      	b.n	1310 <_ZL8cmd_infoP3GSMPKcS2_+0x74>
        reserve_discard(buf_len);
    12f8:	2107      	movs	r1, #7
    12fa:	0010      	movs	r0, r2
    12fc:	f7ff ff4a 	bl	1194 <_ZN3Str15reserve_discardEi>
    1300:	e7e7      	b.n	12d2 <_ZL8cmd_infoP3GSMPKcS2_+0x36>
                    ((Sensors::TempHum*)node.data.data)->temperature, ((Sensors::TempHum*)node.data.data)->humidity);
    1302:	8962      	ldrh	r2, [r4, #10]
    1304:	89a3      	ldrh	r3, [r4, #12]
                str.appendf(" Temperature + humidity sensor:\n  Temperature: %d\n  Humidity: %d\n",
    1306:	492a      	ldr	r1, [pc, #168]	; (13b0 <_ZL8cmd_infoP3GSMPKcS2_+0x114>)
    1308:	a802      	add	r0, sp, #8
    130a:	f7ff ffbb 	bl	1284 <_ZN3Str7appendfEPKcz>
    for(auto& node : net.m_nodes) {
    130e:	3424      	adds	r4, #36	; 0x24
    1310:	42b4      	cmp	r4, r6
    1312:	d028      	beq.n	1366 <_ZL8cmd_infoP3GSMPKcS2_+0xca>
            node.data.id, node.data.name, node.data.type, (millis() - node.last_seen) / 1000);
    1314:	2700      	movs	r7, #0
    1316:	57e7      	ldrsb	r7, [r4, r7]
    1318:	1c65      	adds	r5, r4, #1
    131a:	7a63      	ldrb	r3, [r4, #9]
    131c:	469a      	mov	sl, r3
    131e:	f000 fb2d 	bl	197c <millis>
    1322:	6a23      	ldr	r3, [r4, #32]
    1324:	1ac0      	subs	r0, r0, r3
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    1326:	21fa      	movs	r1, #250	; 0xfa
    1328:	0089      	lsls	r1, r1, #2
    132a:	f000 ffe5 	bl	22f8 <__udivsi3>
    132e:	9001      	str	r0, [sp, #4]
    1330:	4653      	mov	r3, sl
    1332:	9300      	str	r3, [sp, #0]
    1334:	002b      	movs	r3, r5
    1336:	003a      	movs	r2, r7
    1338:	491e      	ldr	r1, [pc, #120]	; (13b4 <_ZL8cmd_infoP3GSMPKcS2_+0x118>)
    133a:	a802      	add	r0, sp, #8
    133c:	f7ff ffa2 	bl	1284 <_ZN3Str7appendfEPKcz>
        switch(node.data.type) {
    1340:	7a63      	ldrb	r3, [r4, #9]
    1342:	2b02      	cmp	r3, #2
    1344:	d0dd      	beq.n	1302 <_ZL8cmd_infoP3GSMPKcS2_+0x66>
    1346:	2b03      	cmp	r3, #3
    1348:	d007      	beq.n	135a <_ZL8cmd_infoP3GSMPKcS2_+0xbe>
    134a:	2b01      	cmp	r3, #1
    134c:	d1df      	bne.n	130e <_ZL8cmd_infoP3GSMPKcS2_+0x72>
                str.appendf(" Soil moisture sensor:\n  Moisture: %d\n", ((Sensors::Soil*)node.data.data)->moisture);
    134e:	8962      	ldrh	r2, [r4, #10]
    1350:	4919      	ldr	r1, [pc, #100]	; (13b8 <_ZL8cmd_infoP3GSMPKcS2_+0x11c>)
    1352:	a802      	add	r0, sp, #8
    1354:	f7ff ff96 	bl	1284 <_ZN3Str7appendfEPKcz>
                break;
    1358:	e7d9      	b.n	130e <_ZL8cmd_infoP3GSMPKcS2_+0x72>
                    ((Sensors::Temp*)node.data.data)->temperature);
    135a:	8962      	ldrh	r2, [r4, #10]
                str.appendf(" Temperature sensor:\n  Temperature: %d\n",
    135c:	4917      	ldr	r1, [pc, #92]	; (13bc <_ZL8cmd_infoP3GSMPKcS2_+0x120>)
    135e:	a802      	add	r0, sp, #8
    1360:	f7ff ff90 	bl	1284 <_ZN3Str7appendfEPKcz>
                break;
    1364:	e7d3      	b.n	130e <_ZL8cmd_infoP3GSMPKcS2_+0x72>
    gsm->SendSMS(sender, str.c_str());
    1366:	9a02      	ldr	r2, [sp, #8]
    1368:	4641      	mov	r1, r8
    136a:	4648      	mov	r0, r9
    136c:	f7ff f864 	bl	438 <_ZN3GSM7SendSMSEPKcS1_>
        if (Owned && !is_using_local_buf())
    1370:	ab02      	add	r3, sp, #8
    1372:	79db      	ldrb	r3, [r3, #7]
    1374:	b25b      	sxtb	r3, r3
    1376:	2b00      	cmp	r3, #0
    1378:	db05      	blt.n	1386 <_ZL8cmd_infoP3GSMPKcS2_+0xea>
}
    137a:	b004      	add	sp, #16
    137c:	bc1c      	pop	{r2, r3, r4}
    137e:	4690      	mov	r8, r2
    1380:	4699      	mov	r9, r3
    1382:	46a2      	mov	sl, r4
    1384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1386:	9802      	ldr	r0, [sp, #8]
    1388:	ab04      	add	r3, sp, #16
    138a:	4298      	cmp	r0, r3
    138c:	d002      	beq.n	1394 <_ZL8cmd_infoP3GSMPKcS2_+0xf8>
            STR_MEMFREE(Data);
    138e:	f001 f8a9 	bl	24e4 <free>
    1392:	e7f2      	b.n	137a <_ZL8cmd_infoP3GSMPKcS2_+0xde>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1394:	ab02      	add	r3, sp, #8
    1396:	88da      	ldrh	r2, [r3, #6]
    1398:	4b09      	ldr	r3, [pc, #36]	; (13c0 <_ZL8cmd_infoP3GSMPKcS2_+0x124>)
    139a:	421a      	tst	r2, r3
    139c:	d1ed      	bne.n	137a <_ZL8cmd_infoP3GSMPKcS2_+0xde>
    139e:	e7f6      	b.n	138e <_ZL8cmd_infoP3GSMPKcS2_+0xf2>
    13a0:	20000010 	.word	0x20000010
    13a4:	ffff801f 	.word	0xffff801f
    13a8:	000032d4 	.word	0x000032d4
    13ac:	200000a8 	.word	0x200000a8
    13b0:	00003340 	.word	0x00003340
    13b4:	000032dc 	.word	0x000032dc
    13b8:	00003318 	.word	0x00003318
    13bc:	00003384 	.word	0x00003384
    13c0:	00007fe0 	.word	0x00007fe0

000013c4 <_ZN6VectorI7SMSFuncE9push_backERKS0_>:
    void push_back(const T& elem) {
    13c4:	b570      	push	{r4, r5, r6, lr}
    13c6:	0004      	movs	r4, r0
    13c8:	000d      	movs	r5, r1
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    13ca:	6801      	ldr	r1, [r0, #0]
    13cc:	2900      	cmp	r1, #0
    13ce:	d016      	beq.n	13fe <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x3a>
    13d0:	3101      	adds	r1, #1
    13d2:	004b      	lsls	r3, r1, #1
    13d4:	1859      	adds	r1, r3, r1
    13d6:	0089      	lsls	r1, r1, #2
    13d8:	6840      	ldr	r0, [r0, #4]
    13da:	f001 f93f 	bl	265c <realloc>
        if(!new_data) return;
    13de:	2800      	cmp	r0, #0
    13e0:	d00c      	beq.n	13fc <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x38>
        m_data = new_data;
    13e2:	6060      	str	r0, [r4, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
    13e4:	6822      	ldr	r2, [r4, #0]
    13e6:	0053      	lsls	r3, r2, #1
    13e8:	189b      	adds	r3, r3, r2
    13ea:	009b      	lsls	r3, r3, #2
    13ec:	18c0      	adds	r0, r0, r3
    13ee:	220c      	movs	r2, #12
    13f0:	0029      	movs	r1, r5
    13f2:	f001 f881 	bl	24f8 <memcpy>
        m_size++;
    13f6:	6823      	ldr	r3, [r4, #0]
    13f8:	3301      	adds	r3, #1
    13fa:	6023      	str	r3, [r4, #0]
    }
    13fc:	bd70      	pop	{r4, r5, r6, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    13fe:	200c      	movs	r0, #12
    1400:	f001 f866 	bl	24d0 <malloc>
    1404:	e7eb      	b.n	13de <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x1a>
    1406:	Address 0x00001406 is out of bounds.


00001408 <main>:
int main() {
    1408:	b570      	push	{r4, r5, r6, lr}
    140a:	b09c      	sub	sp, #112	; 0x70
    g_uart1.init({{GPIO_PORTA, 24}, {GPIO_PORTA, 25}, UART_SER1_TXPO_PA24, UART_SER1_RXPO_PA25}, CALC_BAUD(115200));
    140c:	a90e      	add	r1, sp, #56	; 0x38
    140e:	4c36      	ldr	r4, [pc, #216]	; (14e8 <main+0xe0>)
    1410:	000b      	movs	r3, r1
    1412:	0022      	movs	r2, r4
    1414:	ca61      	ldmia	r2!, {r0, r5, r6}
    1416:	c361      	stmia	r3!, {r0, r5, r6}
    1418:	ca21      	ldmia	r2!, {r0, r5}
    141a:	c321      	stmia	r3!, {r0, r5}
    141c:	4a33      	ldr	r2, [pc, #204]	; (14ec <main+0xe4>)
    141e:	4834      	ldr	r0, [pc, #208]	; (14f0 <main+0xe8>)
    1420:	f000 faf2 	bl	1a08 <_ZN6uart_t4initERK13uart_pincfg_tt>
    g_spi0.Init({
    1424:	a806      	add	r0, sp, #24
    1426:	3414      	adds	r4, #20
    1428:	0002      	movs	r2, r0
    142a:	cc2a      	ldmia	r4!, {r1, r3, r5}
    142c:	c22a      	stmia	r2!, {r1, r3, r5}
    142e:	cc2a      	ldmia	r4!, {r1, r3, r5}
    1430:	c22a      	stmia	r2!, {r1, r3, r5}
    1432:	cc0a      	ldmia	r4!, {r1, r3}
    1434:	c20a      	stmia	r2!, {r1, r3}
    1436:	2314      	movs	r3, #20
    1438:	9305      	str	r3, [sp, #20]
    143a:	ab09      	add	r3, sp, #36	; 0x24
    143c:	466a      	mov	r2, sp
    143e:	cb32      	ldmia	r3!, {r1, r4, r5}
    1440:	c232      	stmia	r2!, {r1, r4, r5}
    1442:	cb12      	ldmia	r3!, {r1, r4}
    1444:	c212      	stmia	r2!, {r1, r4}
    1446:	9906      	ldr	r1, [sp, #24]
    1448:	9a07      	ldr	r2, [sp, #28]
    144a:	9b08      	ldr	r3, [sp, #32]
    144c:	4829      	ldr	r0, [pc, #164]	; (14f4 <main+0xec>)
    144e:	f000 f86d 	bl	152c <_ZN5spi_t4InitE12spi_pincfg_tt>
            PORT->Group[port].DIRSET.reg = 1 << pin;
    1452:	4b29      	ldr	r3, [pc, #164]	; (14f8 <main+0xf0>)
    1454:	2210      	movs	r2, #16
    1456:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    1458:	2144      	movs	r1, #68	; 0x44
    145a:	5c5a      	ldrb	r2, [r3, r1]
    145c:	2002      	movs	r0, #2
    145e:	4382      	bics	r2, r0
    1460:	545a      	strb	r2, [r3, r1]
    if(!net.begin()) {
    1462:	4826      	ldr	r0, [pc, #152]	; (14fc <main+0xf4>)
    1464:	f000 fd4a 	bl	1efc <_ZN9Sensornet5beginEv>
    1468:	2800      	cmp	r0, #0
    146a:	d106      	bne.n	147a <main+0x72>

    inline void toggle(const int port, const int pin) {
        PORT->Group[port].OUTTGL.reg = 1 << pin;
    146c:	4b22      	ldr	r3, [pc, #136]	; (14f8 <main+0xf0>)
    146e:	2210      	movs	r2, #16
    1470:	61da      	str	r2, [r3, #28]
            delay_usec(800000);
    1472:	4823      	ldr	r0, [pc, #140]	; (1500 <main+0xf8>)
    1474:	f002 f898 	bl	35a8 <__delay_usec_veneer>
        while(1) {
    1478:	e7f8      	b.n	146c <main+0x64>
    if(!gsm.Init()) {
    147a:	4822      	ldr	r0, [pc, #136]	; (1504 <main+0xfc>)
    147c:	f7fe ff9a 	bl	3b4 <_ZN3GSM4InitEv>
    1480:	2800      	cmp	r0, #0
    1482:	d109      	bne.n	1498 <main+0x90>
            net.Poll();
    1484:	481d      	ldr	r0, [pc, #116]	; (14fc <main+0xf4>)
    1486:	f000 fe38 	bl	20fa <_ZN9Sensornet4PollEv>
    148a:	4b1b      	ldr	r3, [pc, #108]	; (14f8 <main+0xf0>)
    148c:	2210      	movs	r2, #16
    148e:	61da      	str	r2, [r3, #28]
            delay_usec(200000);
    1490:	481d      	ldr	r0, [pc, #116]	; (1508 <main+0x100>)
    1492:	f002 f889 	bl	35a8 <__delay_usec_veneer>
        while(1) {
    1496:	e7f5      	b.n	1484 <main+0x7c>
    gsm.AddSMSFunc({ "info", cmd_info, GSM::LEVEL_USER });
    1498:	a913      	add	r1, sp, #76	; 0x4c
    149a:	4b13      	ldr	r3, [pc, #76]	; (14e8 <main+0xe0>)
    149c:	3334      	adds	r3, #52	; 0x34
    149e:	000a      	movs	r2, r1
    14a0:	cb31      	ldmia	r3!, {r0, r4, r5}
    14a2:	c231      	stmia	r2!, {r0, r4, r5}

    void ReadSMS(int index);
    void ProcessSMS(const char* text, const char* sender);
    bool SendSMS(const char* number, const char* text);

    void AddSMSFunc(const SMSFunc& func) { m_smsfuncs.push_back(func); }
    14a4:	4c17      	ldr	r4, [pc, #92]	; (1504 <main+0xfc>)
    14a6:	3408      	adds	r4, #8
    14a8:	0020      	movs	r0, r4
    14aa:	f7ff ff8b 	bl	13c4 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, GSM::LEVEL_USER });
    14ae:	a916      	add	r1, sp, #88	; 0x58
    14b0:	4b16      	ldr	r3, [pc, #88]	; (150c <main+0x104>)
    14b2:	9316      	str	r3, [sp, #88]	; 0x58
    14b4:	4b16      	ldr	r3, [pc, #88]	; (1510 <main+0x108>)
    14b6:	604b      	str	r3, [r1, #4]
    14b8:	2561      	movs	r5, #97	; 0x61
    14ba:	720d      	strb	r5, [r1, #8]
    14bc:	0020      	movs	r0, r4
    14be:	f7ff ff81 	bl	13c4 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    gsm.AddSMSFunc({ "clear", [](GSM* gsm, const char* sender, const char* args) { net.m_nodes.clear(); }, GSM::LEVEL_USER });
    14c2:	a919      	add	r1, sp, #100	; 0x64
    14c4:	4b13      	ldr	r3, [pc, #76]	; (1514 <main+0x10c>)
    14c6:	9319      	str	r3, [sp, #100]	; 0x64
    14c8:	4b13      	ldr	r3, [pc, #76]	; (1518 <main+0x110>)
    14ca:	604b      	str	r3, [r1, #4]
    14cc:	720d      	strb	r5, [r1, #8]
    14ce:	0020      	movs	r0, r4
    14d0:	f7ff ff78 	bl	13c4 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
        gsm.Poll();
    14d4:	480b      	ldr	r0, [pc, #44]	; (1504 <main+0xfc>)
    14d6:	f7ff f8f5 	bl	6c4 <_ZN3GSM4PollEv>
        net.Poll();
    14da:	4808      	ldr	r0, [pc, #32]	; (14fc <main+0xf4>)
    14dc:	f000 fe0d 	bl	20fa <_ZN9Sensornet4PollEv>
    14e0:	4b05      	ldr	r3, [pc, #20]	; (14f8 <main+0xf0>)
    14e2:	2210      	movs	r2, #16
    14e4:	61da      	str	r2, [r3, #28]
    14e6:	e7f5      	b.n	14d4 <main+0xcc>
    14e8:	000030d8 	.word	0x000030d8
    14ec:	0000f62b 	.word	0x0000f62b
    14f0:	200002fc 	.word	0x200002fc
    14f4:	200000e0 	.word	0x200000e0
    14f8:	41004400 	.word	0x41004400
    14fc:	200000a8 	.word	0x200000a8
    1500:	000c3500 	.word	0x000c3500
    1504:	20000094 	.word	0x20000094
    1508:	00030d40 	.word	0x00030d40
    150c:	000033ac 	.word	0x000033ac
    1510:	00001089 	.word	0x00001089
    1514:	000033b4 	.word	0x000033b4
    1518:	00001049 	.word	0x00001049

0000151c <_GLOBAL__sub_I__ZN3Str11EmptyBufferE>:
    151c:	b510      	push	{r4, lr}
    151e:	4902      	ldr	r1, [pc, #8]	; (1528 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0xc>)
    1520:	2001      	movs	r0, #1
    1522:	f7ff fdbb 	bl	109c <_Z41__static_initialization_and_destruction_0ii>
    1526:	bd10      	pop	{r4, pc}
    1528:	0000ffff 	.word	0x0000ffff

0000152c <_ZN5spi_t4InitE12spi_pincfg_tt>:
#include "spi.h"

spi_t g_spi0(SERCOM0);
spi_t g_spi1(SERCOM1);

void spi_t::Init(spi_pincfg_t pincfg, uint16_t speed) {
    152c:	b084      	sub	sp, #16
    152e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1530:	46c6      	mov	lr, r8
    1532:	b500      	push	{lr}
    1534:	9107      	str	r1, [sp, #28]
    1536:	9208      	str	r2, [sp, #32]
    1538:	9309      	str	r3, [sp, #36]	; 0x24
    153a:	ab0f      	add	r3, sp, #60	; 0x3c
    153c:	881b      	ldrh	r3, [r3, #0]
    153e:	4698      	mov	r8, r3
    if(m_sercom == SERCOM1) {
    1540:	4b83      	ldr	r3, [pc, #524]	; (1750 <_ZN5spi_t4InitE12spi_pincfg_tt+0x224>)
    1542:	6802      	ldr	r2, [r0, #0]
    1544:	429a      	cmp	r2, r3
    1546:	d100      	bne.n	154a <_ZN5spi_t4InitE12spi_pincfg_tt+0x1e>
    1548:	e0c1      	b.n	16ce <_ZN5spi_t4InitE12spi_pincfg_tt+0x1a2>
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);*/
        PM->APBCMASK.bit.SERCOM1_ = 1;
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
        while(GCLK->STATUS.bit.SYNCBUSY);
    } else {
        PM->APBCMASK.bit.SERCOM0_ = 1;
    154a:	4a82      	ldr	r2, [pc, #520]	; (1754 <_ZN5spi_t4InitE12spi_pincfg_tt+0x228>)
    154c:	6a13      	ldr	r3, [r2, #32]
    154e:	2404      	movs	r4, #4
    1550:	4323      	orrs	r3, r4
    1552:	6213      	str	r3, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    1554:	4b80      	ldr	r3, [pc, #512]	; (1758 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    1556:	4a81      	ldr	r2, [pc, #516]	; (175c <_ZN5spi_t4InitE12spi_pincfg_tt+0x230>)
    1558:	805a      	strh	r2, [r3, #2]
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
        while(GCLK->STATUS.bit.SYNCBUSY);
    155a:	4b7f      	ldr	r3, [pc, #508]	; (1758 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    155c:	785b      	ldrb	r3, [r3, #1]
    155e:	09db      	lsrs	r3, r3, #7
    1560:	d1fb      	bne.n	155a <_ZN5spi_t4InitE12spi_pincfg_tt+0x2e>
    }
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1562:	ab07      	add	r3, sp, #28
    1564:	7e1b      	ldrb	r3, [r3, #24]
    1566:	2b00      	cmp	r3, #0
    1568:	d100      	bne.n	156c <_ZN5spi_t4InitE12spi_pincfg_tt+0x40>
    156a:	e0bd      	b.n	16e8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1bc>
    156c:	2503      	movs	r5, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    156e:	9a07      	ldr	r2, [sp, #28]
    1570:	9c08      	ldr	r4, [sp, #32]
        if(pin & 1)
    1572:	07e3      	lsls	r3, r4, #31
    1574:	d400      	bmi.n	1578 <_ZN5spi_t4InitE12spi_pincfg_tt+0x4c>
    1576:	e0b9      	b.n	16ec <_ZN5spi_t4InitE12spi_pincfg_tt+0x1c0>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1578:	0fe3      	lsrs	r3, r4, #31
    157a:	191b      	adds	r3, r3, r4
    157c:	105f      	asrs	r7, r3, #1
    157e:	260f      	movs	r6, #15
    1580:	4035      	ands	r5, r6
    1582:	01d3      	lsls	r3, r2, #7
    1584:	4976      	ldr	r1, [pc, #472]	; (1760 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1586:	468c      	mov	ip, r1
    1588:	4463      	add	r3, ip
    158a:	19db      	adds	r3, r3, r7
    158c:	3330      	adds	r3, #48	; 0x30
    158e:	781f      	ldrb	r7, [r3, #0]
    1590:	012d      	lsls	r5, r5, #4
    1592:	403e      	ands	r6, r7
    1594:	432e      	orrs	r6, r5
    1596:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1598:	01d3      	lsls	r3, r2, #7
    159a:	4a71      	ldr	r2, [pc, #452]	; (1760 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    159c:	4694      	mov	ip, r2
    159e:	4463      	add	r3, ip
    15a0:	191b      	adds	r3, r3, r4
    15a2:	3340      	adds	r3, #64	; 0x40
    15a4:	781a      	ldrb	r2, [r3, #0]
    15a6:	2401      	movs	r4, #1
    15a8:	4322      	orrs	r2, r4
    15aa:	701a      	strb	r2, [r3, #0]
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    15ac:	ab07      	add	r3, sp, #28
    15ae:	7e5b      	ldrb	r3, [r3, #25]
    15b0:	2b00      	cmp	r3, #0
    15b2:	d100      	bne.n	15b6 <_ZN5spi_t4InitE12spi_pincfg_tt+0x8a>
    15b4:	e0a9      	b.n	170a <_ZN5spi_t4InitE12spi_pincfg_tt+0x1de>
    15b6:	2503      	movs	r5, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    15b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    15ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        if(pin & 1)
    15bc:	07e3      	lsls	r3, r4, #31
    15be:	d400      	bmi.n	15c2 <_ZN5spi_t4InitE12spi_pincfg_tt+0x96>
    15c0:	e0a5      	b.n	170e <_ZN5spi_t4InitE12spi_pincfg_tt+0x1e2>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    15c2:	0fe3      	lsrs	r3, r4, #31
    15c4:	191b      	adds	r3, r3, r4
    15c6:	105f      	asrs	r7, r3, #1
    15c8:	260f      	movs	r6, #15
    15ca:	4035      	ands	r5, r6
    15cc:	01d3      	lsls	r3, r2, #7
    15ce:	4964      	ldr	r1, [pc, #400]	; (1760 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    15d0:	468c      	mov	ip, r1
    15d2:	4463      	add	r3, ip
    15d4:	19db      	adds	r3, r3, r7
    15d6:	3330      	adds	r3, #48	; 0x30
    15d8:	781f      	ldrb	r7, [r3, #0]
    15da:	012d      	lsls	r5, r5, #4
    15dc:	403e      	ands	r6, r7
    15de:	432e      	orrs	r6, r5
    15e0:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    15e2:	01d3      	lsls	r3, r2, #7
    15e4:	4a5e      	ldr	r2, [pc, #376]	; (1760 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    15e6:	4694      	mov	ip, r2
    15e8:	4463      	add	r3, ip
    15ea:	191b      	adds	r3, r3, r4
    15ec:	3340      	adds	r3, #64	; 0x40
    15ee:	781a      	ldrb	r2, [r3, #0]
    15f0:	2401      	movs	r4, #1
    15f2:	4322      	orrs	r2, r4
    15f4:	701a      	strb	r2, [r3, #0]
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    15f6:	ab07      	add	r3, sp, #28
    15f8:	7e9b      	ldrb	r3, [r3, #26]
    15fa:	2b00      	cmp	r3, #0
    15fc:	d100      	bne.n	1600 <_ZN5spi_t4InitE12spi_pincfg_tt+0xd4>
    15fe:	e095      	b.n	172c <_ZN5spi_t4InitE12spi_pincfg_tt+0x200>
    1600:	2503      	movs	r5, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1602:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1604:	9c0c      	ldr	r4, [sp, #48]	; 0x30
        if(pin & 1)
    1606:	07e3      	lsls	r3, r4, #31
    1608:	d400      	bmi.n	160c <_ZN5spi_t4InitE12spi_pincfg_tt+0xe0>
    160a:	e091      	b.n	1730 <_ZN5spi_t4InitE12spi_pincfg_tt+0x204>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    160c:	0fe3      	lsrs	r3, r4, #31
    160e:	191b      	adds	r3, r3, r4
    1610:	105f      	asrs	r7, r3, #1
    1612:	260f      	movs	r6, #15
    1614:	4035      	ands	r5, r6
    1616:	01d3      	lsls	r3, r2, #7
    1618:	4951      	ldr	r1, [pc, #324]	; (1760 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    161a:	468c      	mov	ip, r1
    161c:	4463      	add	r3, ip
    161e:	19db      	adds	r3, r3, r7
    1620:	3330      	adds	r3, #48	; 0x30
    1622:	781f      	ldrb	r7, [r3, #0]
    1624:	012d      	lsls	r5, r5, #4
    1626:	403e      	ands	r6, r7
    1628:	432e      	orrs	r6, r5
    162a:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    162c:	01d3      	lsls	r3, r2, #7
    162e:	4a4c      	ldr	r2, [pc, #304]	; (1760 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1630:	4694      	mov	ip, r2
    1632:	4463      	add	r3, ip
    1634:	191b      	adds	r3, r3, r4
    1636:	3340      	adds	r3, #64	; 0x40
    1638:	781a      	ldrb	r2, [r3, #0]
    163a:	2401      	movs	r4, #1
    163c:	4322      	orrs	r2, r4
    163e:	701a      	strb	r2, [r3, #0]

    m_sercom->SPI.CTRLA.bit.ENABLE = 0;
    1640:	6802      	ldr	r2, [r0, #0]
    1642:	6813      	ldr	r3, [r2, #0]
    1644:	2402      	movs	r4, #2
    1646:	43a3      	bics	r3, r4
    1648:	6013      	str	r3, [r2, #0]
	m_sercom->SPI.CTRLA.bit.SWRST = 1;
    164a:	6802      	ldr	r2, [r0, #0]
    164c:	6813      	ldr	r3, [r2, #0]
    164e:	3c01      	subs	r4, #1
    1650:	4323      	orrs	r3, r4
    1652:	6013      	str	r3, [r2, #0]
	while(m_sercom->SPI.CTRLA.bit.SWRST);
    1654:	6803      	ldr	r3, [r0, #0]
    1656:	681a      	ldr	r2, [r3, #0]
    1658:	07d2      	lsls	r2, r2, #31
    165a:	d4fb      	bmi.n	1654 <_ZN5spi_t4InitE12spi_pincfg_tt+0x128>

	m_sercom->SPI.CTRLA.bit.MODE = SERCOM_SPI_CTRLA_MODE_SPI_MASTER_Val;
    165c:	681a      	ldr	r2, [r3, #0]
    165e:	241c      	movs	r4, #28
    1660:	43a2      	bics	r2, r4
    1662:	3c10      	subs	r4, #16
    1664:	4322      	orrs	r2, r4
    1666:	601a      	str	r2, [r3, #0]
	m_sercom->SPI.CTRLA.bit.DOPO = pincfg.mosisckpad;
    1668:	6806      	ldr	r6, [r0, #0]
    166a:	ad07      	add	r5, sp, #28
    166c:	7f2c      	ldrb	r4, [r5, #28]
    166e:	2303      	movs	r3, #3
    1670:	401c      	ands	r4, r3
    1672:	6832      	ldr	r2, [r6, #0]
    1674:	0424      	lsls	r4, r4, #16
    1676:	4f3b      	ldr	r7, [pc, #236]	; (1764 <_ZN5spi_t4InitE12spi_pincfg_tt+0x238>)
    1678:	403a      	ands	r2, r7
    167a:	4322      	orrs	r2, r4
    167c:	6032      	str	r2, [r6, #0]
	m_sercom->SPI.CTRLA.bit.DIPO = pincfg.misopad;
    167e:	6804      	ldr	r4, [r0, #0]
    1680:	7eed      	ldrb	r5, [r5, #27]
    1682:	6822      	ldr	r2, [r4, #0]
    1684:	402b      	ands	r3, r5
    1686:	051b      	lsls	r3, r3, #20
    1688:	4d37      	ldr	r5, [pc, #220]	; (1768 <_ZN5spi_t4InitE12spi_pincfg_tt+0x23c>)
    168a:	402a      	ands	r2, r5
    168c:	4313      	orrs	r3, r2
    168e:	6023      	str	r3, [r4, #0]

    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    1690:	6803      	ldr	r3, [r0, #0]
    1692:	69da      	ldr	r2, [r3, #28]
    1694:	0752      	lsls	r2, r2, #29
    1696:	d4fb      	bmi.n	1690 <_ZN5spi_t4InitE12spi_pincfg_tt+0x164>
    /* SPI receiver is enabled */
    m_sercom->SPI.CTRLB.bit.RXEN = 1;
    1698:	685c      	ldr	r4, [r3, #4]
    169a:	2280      	movs	r2, #128	; 0x80
    169c:	0292      	lsls	r2, r2, #10
    169e:	4322      	orrs	r2, r4
    16a0:	605a      	str	r2, [r3, #4]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    16a2:	6803      	ldr	r3, [r0, #0]
    16a4:	69da      	ldr	r2, [r3, #28]
    16a6:	0752      	lsls	r2, r2, #29
    16a8:	d4fb      	bmi.n	16a2 <_ZN5spi_t4InitE12spi_pincfg_tt+0x176>

    /* baud register value corresponds to the SPI speed */
    m_sercom->SPI.BAUD.reg = speed;
    16aa:	4642      	mov	r2, r8
    16ac:	b2d1      	uxtb	r1, r2
    16ae:	7319      	strb	r1, [r3, #12]
    /* SERCOM peripheral enabled */
    m_sercom->SPI.CTRLA.bit.ENABLE = 1;
    16b0:	6802      	ldr	r2, [r0, #0]
    16b2:	6813      	ldr	r3, [r2, #0]
    16b4:	2102      	movs	r1, #2
    16b6:	430b      	orrs	r3, r1
    16b8:	6013      	str	r3, [r2, #0]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.ENABLE);
    16ba:	6803      	ldr	r3, [r0, #0]
    16bc:	69db      	ldr	r3, [r3, #28]
    16be:	079b      	lsls	r3, r3, #30
    16c0:	d4fb      	bmi.n	16ba <_ZN5spi_t4InitE12spi_pincfg_tt+0x18e>
}
    16c2:	bc04      	pop	{r2}
    16c4:	4690      	mov	r8, r2
    16c6:	bcf0      	pop	{r4, r5, r6, r7}
    16c8:	bc08      	pop	{r3}
    16ca:	b004      	add	sp, #16
    16cc:	4718      	bx	r3
        PM->APBCMASK.bit.SERCOM1_ = 1;
    16ce:	4a21      	ldr	r2, [pc, #132]	; (1754 <_ZN5spi_t4InitE12spi_pincfg_tt+0x228>)
    16d0:	6a13      	ldr	r3, [r2, #32]
    16d2:	2408      	movs	r4, #8
    16d4:	4323      	orrs	r3, r4
    16d6:	6213      	str	r3, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    16d8:	4b1f      	ldr	r3, [pc, #124]	; (1758 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    16da:	4a24      	ldr	r2, [pc, #144]	; (176c <_ZN5spi_t4InitE12spi_pincfg_tt+0x240>)
    16dc:	805a      	strh	r2, [r3, #2]
        while(GCLK->STATUS.bit.SYNCBUSY);
    16de:	4b1e      	ldr	r3, [pc, #120]	; (1758 <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    16e0:	785b      	ldrb	r3, [r3, #1]
    16e2:	09db      	lsrs	r3, r3, #7
    16e4:	d1fb      	bne.n	16de <_ZN5spi_t4InitE12spi_pincfg_tt+0x1b2>
    16e6:	e73c      	b.n	1562 <_ZN5spi_t4InitE12spi_pincfg_tt+0x36>
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    16e8:	2502      	movs	r5, #2
    16ea:	e740      	b.n	156e <_ZN5spi_t4InitE12spi_pincfg_tt+0x42>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    16ec:	0fe3      	lsrs	r3, r4, #31
    16ee:	191b      	adds	r3, r3, r4
    16f0:	105e      	asrs	r6, r3, #1
    16f2:	01d3      	lsls	r3, r2, #7
    16f4:	491a      	ldr	r1, [pc, #104]	; (1760 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    16f6:	468c      	mov	ip, r1
    16f8:	4463      	add	r3, ip
    16fa:	199b      	adds	r3, r3, r6
    16fc:	3330      	adds	r3, #48	; 0x30
    16fe:	781e      	ldrb	r6, [r3, #0]
    1700:	270f      	movs	r7, #15
    1702:	43be      	bics	r6, r7
    1704:	4335      	orrs	r5, r6
    1706:	701d      	strb	r5, [r3, #0]
    1708:	e746      	b.n	1598 <_ZN5spi_t4InitE12spi_pincfg_tt+0x6c>
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    170a:	2502      	movs	r5, #2
    170c:	e754      	b.n	15b8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x8c>
    170e:	0fe3      	lsrs	r3, r4, #31
    1710:	191b      	adds	r3, r3, r4
    1712:	105e      	asrs	r6, r3, #1
    1714:	01d3      	lsls	r3, r2, #7
    1716:	4912      	ldr	r1, [pc, #72]	; (1760 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1718:	468c      	mov	ip, r1
    171a:	4463      	add	r3, ip
    171c:	199b      	adds	r3, r3, r6
    171e:	3330      	adds	r3, #48	; 0x30
    1720:	781e      	ldrb	r6, [r3, #0]
    1722:	270f      	movs	r7, #15
    1724:	43be      	bics	r6, r7
    1726:	4335      	orrs	r5, r6
    1728:	701d      	strb	r5, [r3, #0]
    172a:	e75a      	b.n	15e2 <_ZN5spi_t4InitE12spi_pincfg_tt+0xb6>
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    172c:	2502      	movs	r5, #2
    172e:	e768      	b.n	1602 <_ZN5spi_t4InitE12spi_pincfg_tt+0xd6>
    1730:	0fe3      	lsrs	r3, r4, #31
    1732:	191b      	adds	r3, r3, r4
    1734:	105e      	asrs	r6, r3, #1
    1736:	01d3      	lsls	r3, r2, #7
    1738:	4909      	ldr	r1, [pc, #36]	; (1760 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    173a:	468c      	mov	ip, r1
    173c:	4463      	add	r3, ip
    173e:	199b      	adds	r3, r3, r6
    1740:	3330      	adds	r3, #48	; 0x30
    1742:	781e      	ldrb	r6, [r3, #0]
    1744:	270f      	movs	r7, #15
    1746:	43be      	bics	r6, r7
    1748:	4335      	orrs	r5, r6
    174a:	701d      	strb	r5, [r3, #0]
    174c:	e76e      	b.n	162c <_ZN5spi_t4InitE12spi_pincfg_tt+0x100>
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	42000c00 	.word	0x42000c00
    1754:	40000400 	.word	0x40000400
    1758:	40000c00 	.word	0x40000c00
    175c:	0000400e 	.word	0x0000400e
    1760:	41004400 	.word	0x41004400
    1764:	fffcffff 	.word	0xfffcffff
    1768:	ffcfffff 	.word	0xffcfffff
    176c:	0000400f 	.word	0x0000400f

00001770 <_ZN5spi_tC1EP6Sercom>:

spi_t::spi_t(Sercom* sercom) {
    m_sercom = sercom;
    1770:	6001      	str	r1, [r0, #0]
}
    1772:	4770      	bx	lr

00001774 <_Z41__static_initialization_and_destruction_0ii>:
    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    //m_sercom->SPI.INTFLAG.bit.RXC = 1; // Clear RXC flag by setting it to 1
    m_sercom->SPI.DATA.reg = b;
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
	return m_sercom->SPI.DATA.reg;
    1774:	b510      	push	{r4, lr}
    1776:	2801      	cmp	r0, #1
    1778:	d000      	beq.n	177c <_Z41__static_initialization_and_destruction_0ii+0x8>
    177a:	bd10      	pop	{r4, pc}
    177c:	4b05      	ldr	r3, [pc, #20]	; (1794 <_Z41__static_initialization_and_destruction_0ii+0x20>)
    177e:	4299      	cmp	r1, r3
    1780:	d1fb      	bne.n	177a <_Z41__static_initialization_and_destruction_0ii+0x6>
spi_t g_spi0(SERCOM0);
    1782:	4905      	ldr	r1, [pc, #20]	; (1798 <_Z41__static_initialization_and_destruction_0ii+0x24>)
    1784:	4805      	ldr	r0, [pc, #20]	; (179c <_Z41__static_initialization_and_destruction_0ii+0x28>)
    1786:	f7ff fff3 	bl	1770 <_ZN5spi_tC1EP6Sercom>
spi_t g_spi1(SERCOM1);
    178a:	4905      	ldr	r1, [pc, #20]	; (17a0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    178c:	4805      	ldr	r0, [pc, #20]	; (17a4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    178e:	f7ff ffef 	bl	1770 <_ZN5spi_tC1EP6Sercom>
    1792:	e7f2      	b.n	177a <_Z41__static_initialization_and_destruction_0ii+0x6>
    1794:	0000ffff 	.word	0x0000ffff
    1798:	42000800 	.word	0x42000800
    179c:	200000e0 	.word	0x200000e0
    17a0:	42000c00 	.word	0x42000c00
    17a4:	200000e4 	.word	0x200000e4

000017a8 <_ZN5spi_t8TransferEh>:
    if(!m_sercom) return 0xFF;
    17a8:	6802      	ldr	r2, [r0, #0]
    17aa:	2a00      	cmp	r2, #0
    17ac:	d00a      	beq.n	17c4 <_ZN5spi_t8TransferEh+0x1c>
    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    17ae:	7e13      	ldrb	r3, [r2, #24]
    17b0:	07db      	lsls	r3, r3, #31
    17b2:	d5fc      	bpl.n	17ae <_ZN5spi_t8TransferEh+0x6>
    m_sercom->SPI.DATA.reg = b;
    17b4:	6291      	str	r1, [r2, #40]	; 0x28
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
    17b6:	6803      	ldr	r3, [r0, #0]
    17b8:	7e1a      	ldrb	r2, [r3, #24]
    17ba:	0752      	lsls	r2, r2, #29
    17bc:	d5fb      	bpl.n	17b6 <_ZN5spi_t8TransferEh+0xe>
	return m_sercom->SPI.DATA.reg;
    17be:	6a98      	ldr	r0, [r3, #40]	; 0x28
    17c0:	b2c0      	uxtb	r0, r0
    17c2:	4770      	bx	lr
    if(!m_sercom) return 0xFF;
    17c4:	20ff      	movs	r0, #255	; 0xff
    17c6:	e7fc      	b.n	17c2 <_ZN5spi_t8TransferEh+0x1a>

000017c8 <_GLOBAL__sub_I_g_spi0>:
    17c8:	b510      	push	{r4, lr}
    17ca:	4902      	ldr	r1, [pc, #8]	; (17d4 <_GLOBAL__sub_I_g_spi0+0xc>)
    17cc:	2001      	movs	r0, #1
    17ce:	f7ff ffd1 	bl	1774 <_Z41__static_initialization_and_destruction_0ii>
    17d2:	bd10      	pop	{r4, pc}
    17d4:	0000ffff 	.word	0x0000ffff

000017d8 <initializeSystemFor48MHz>:

static volatile uint64_t _cycles;

static void initializeSystemFor48MHz()
{
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    17d8:	4a48      	ldr	r2, [pc, #288]	; (18fc <initializeSystemFor48MHz+0x124>)
    17da:	6a11      	ldr	r1, [r2, #32]
    17dc:	23c0      	movs	r3, #192	; 0xc0
    17de:	009b      	lsls	r3, r3, #2
    17e0:	430b      	orrs	r3, r1
    17e2:	6213      	str	r3, [r2, #32]
	// Change the timing of the NVM access
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
    17e4:	4946      	ldr	r1, [pc, #280]	; (1900 <initializeSystemFor48MHz+0x128>)
    17e6:	684a      	ldr	r2, [r1, #4]
    17e8:	231e      	movs	r3, #30
    17ea:	439a      	bics	r2, r3
    17ec:	3b1c      	subs	r3, #28
    17ee:	4313      	orrs	r3, r2
    17f0:	604b      	str	r3, [r1, #4]

	// Enable the bus clock for the clock system.
	PM->APBAMASK.bit.GCLK_ = 1;
    17f2:	4a44      	ldr	r2, [pc, #272]	; (1904 <initializeSystemFor48MHz+0x12c>)
    17f4:	6991      	ldr	r1, [r2, #24]
    17f6:	2308      	movs	r3, #8
    17f8:	430b      	orrs	r3, r1
    17fa:	6193      	str	r3, [r2, #24]

	// Initialise the DFLL to run in closed-loop mode at 48MHz
	// 1. Make a software reset of the clock system.
	GCLK->CTRL.bit.SWRST = 1;
    17fc:	4a42      	ldr	r2, [pc, #264]	; (1908 <initializeSystemFor48MHz+0x130>)
    17fe:	7813      	ldrb	r3, [r2, #0]
    1800:	2101      	movs	r1, #1
    1802:	430b      	orrs	r3, r1
    1804:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.bit.SWRST && GCLK->STATUS.bit.SYNCBUSY) {};
    1806:	4b40      	ldr	r3, [pc, #256]	; (1908 <initializeSystemFor48MHz+0x130>)
    1808:	781b      	ldrb	r3, [r3, #0]
    180a:	07db      	lsls	r3, r3, #31
    180c:	d503      	bpl.n	1816 <initializeSystemFor48MHz+0x3e>
    180e:	4b3e      	ldr	r3, [pc, #248]	; (1908 <initializeSystemFor48MHz+0x130>)
    1810:	785b      	ldrb	r3, [r3, #1]
    1812:	09db      	lsrs	r3, r3, #7
    1814:	d1f7      	bne.n	1806 <initializeSystemFor48MHz+0x2e>
	// 2. Make sure the OCM8M keeps running.
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
    1816:	4b39      	ldr	r3, [pc, #228]	; (18fc <initializeSystemFor48MHz+0x124>)
    1818:	6a19      	ldr	r1, [r3, #32]
    181a:	2280      	movs	r2, #128	; 0x80
    181c:	4391      	bics	r1, r2
    181e:	6219      	str	r1, [r3, #32]
	// 3. Set the division factor to 64, which reduces the 1MHz source to 15.625kHz
	GCLK->GENDIV.reg =
    1820:	4b39      	ldr	r3, [pc, #228]	; (1908 <initializeSystemFor48MHz+0x130>)
    1822:	4a3a      	ldr	r2, [pc, #232]	; (190c <initializeSystemFor48MHz+0x134>)
    1824:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(3) | // Select generator 3
	GCLK_GENDIV_DIV(64); // Set the division factor to 64
	// 4. Create generic clock generator 3 for the 15KHz signal of the DFLL
	GCLK->GENCTRL.reg =
    1826:	4a3a      	ldr	r2, [pc, #232]	; (1910 <initializeSystemFor48MHz+0x138>)
    1828:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(3) | // Select generator 3
	GCLK_GENCTRL_SRC_OSC8M | // Select source OSC8M
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    182a:	4b37      	ldr	r3, [pc, #220]	; (1908 <initializeSystemFor48MHz+0x130>)
    182c:	785b      	ldrb	r3, [r3, #1]
    182e:	09db      	lsrs	r3, r3, #7
    1830:	d1fb      	bne.n	182a <initializeSystemFor48MHz+0x52>
	// 5. Configure DFLL with the
	GCLK->CLKCTRL.reg =
    1832:	4b35      	ldr	r3, [pc, #212]	; (1908 <initializeSystemFor48MHz+0x130>)
    1834:	2286      	movs	r2, #134	; 0x86
    1836:	01d2      	lsls	r2, r2, #7
    1838:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID_DFLL48 | // Target is DFLL48M
	GCLK_CLKCTRL_GEN(3) | // Select generator 3 as source.
	GCLK_CLKCTRL_CLKEN; // Enable the DFLL48M
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    183a:	4b33      	ldr	r3, [pc, #204]	; (1908 <initializeSystemFor48MHz+0x130>)
    183c:	785b      	ldrb	r3, [r3, #1]
    183e:	09db      	lsrs	r3, r3, #7
    1840:	d1fb      	bne.n	183a <initializeSystemFor48MHz+0x62>
	// 6. Workaround to be able to configure the DFLL.
	SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
    1842:	4a2e      	ldr	r2, [pc, #184]	; (18fc <initializeSystemFor48MHz+0x124>)
    1844:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1846:	2180      	movs	r1, #128	; 0x80
    1848:	438b      	bics	r3, r1
    184a:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    184c:	4b2b      	ldr	r3, [pc, #172]	; (18fc <initializeSystemFor48MHz+0x124>)
    184e:	68db      	ldr	r3, [r3, #12]
    1850:	06db      	lsls	r3, r3, #27
    1852:	d5fb      	bpl.n	184c <initializeSystemFor48MHz+0x74>
	// 7. Change the multiplication factor.
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
    1854:	4b29      	ldr	r3, [pc, #164]	; (18fc <initializeSystemFor48MHz+0x124>)
    1856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1858:	0c12      	lsrs	r2, r2, #16
    185a:	0412      	lsls	r2, r2, #16
    185c:	21c0      	movs	r1, #192	; 0xc0
    185e:	0109      	lsls	r1, r1, #4
    1860:	4311      	orrs	r1, r2
    1862:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
    1864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1866:	0192      	lsls	r2, r2, #6
    1868:	0992      	lsrs	r2, r2, #6
    186a:	2180      	movs	r1, #128	; 0x80
    186c:	04c9      	lsls	r1, r1, #19
    186e:	4311      	orrs	r1, r2
    1870:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.FSTEP = 1; // Fine step = 1
    1872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1874:	4a27      	ldr	r2, [pc, #156]	; (1914 <initializeSystemFor48MHz+0x13c>)
    1876:	4011      	ands	r1, r2
    1878:	2280      	movs	r2, #128	; 0x80
    187a:	0252      	lsls	r2, r2, #9
    187c:	430a      	orrs	r2, r1
    187e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1880:	4b1e      	ldr	r3, [pc, #120]	; (18fc <initializeSystemFor48MHz+0x124>)
    1882:	68db      	ldr	r3, [r3, #12]
    1884:	06db      	lsls	r3, r3, #27
    1886:	d5fb      	bpl.n	1880 <initializeSystemFor48MHz+0xa8>
	// 8. Start closed-loop mode
	SYSCTRL->DFLLCTRL.reg |=
    1888:	4a1c      	ldr	r2, [pc, #112]	; (18fc <initializeSystemFor48MHz+0x124>)
    188a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    188c:	2181      	movs	r1, #129	; 0x81
    188e:	0089      	lsls	r1, r1, #2
    1890:	430b      	orrs	r3, r1
    1892:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_MODE | // 1 = Closed loop mode.
	SYSCTRL_DFLLCTRL_QLDIS; // 1 = Disable quick lock.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1894:	4b19      	ldr	r3, [pc, #100]	; (18fc <initializeSystemFor48MHz+0x124>)
    1896:	68db      	ldr	r3, [r3, #12]
    1898:	06db      	lsls	r3, r3, #27
    189a:	d5fb      	bpl.n	1894 <initializeSystemFor48MHz+0xbc>
	// 9. Clear the lock flags.
	SYSCTRL->INTFLAG.bit.DFLLLCKC = 1;
    189c:	4b17      	ldr	r3, [pc, #92]	; (18fc <initializeSystemFor48MHz+0x124>)
    189e:	6899      	ldr	r1, [r3, #8]
    18a0:	2280      	movs	r2, #128	; 0x80
    18a2:	430a      	orrs	r2, r1
    18a4:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLLCKF = 1;
    18a6:	6899      	ldr	r1, [r3, #8]
    18a8:	2240      	movs	r2, #64	; 0x40
    18aa:	430a      	orrs	r2, r1
    18ac:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLRDY = 1;
    18ae:	6899      	ldr	r1, [r3, #8]
    18b0:	2210      	movs	r2, #16
    18b2:	430a      	orrs	r2, r1
    18b4:	609a      	str	r2, [r3, #8]
	// 10. Enable the DFLL
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
    18b6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    18b8:	2102      	movs	r1, #2
    18ba:	430a      	orrs	r2, r1
    18bc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    18be:	4b0f      	ldr	r3, [pc, #60]	; (18fc <initializeSystemFor48MHz+0x124>)
    18c0:	68db      	ldr	r3, [r3, #12]
    18c2:	06db      	lsls	r3, r3, #27
    18c4:	d5fb      	bpl.n	18be <initializeSystemFor48MHz+0xe6>
	// 11. Wait for the fine and coarse locks.
	while (!SYSCTRL->INTFLAG.bit.DFLLLCKC && !SYSCTRL->INTFLAG.bit.DFLLLCKF) {};
    18c6:	4b0d      	ldr	r3, [pc, #52]	; (18fc <initializeSystemFor48MHz+0x124>)
    18c8:	689b      	ldr	r3, [r3, #8]
    18ca:	061b      	lsls	r3, r3, #24
    18cc:	d403      	bmi.n	18d6 <initializeSystemFor48MHz+0xfe>
    18ce:	4b0b      	ldr	r3, [pc, #44]	; (18fc <initializeSystemFor48MHz+0x124>)
    18d0:	689b      	ldr	r3, [r3, #8]
    18d2:	065b      	lsls	r3, r3, #25
    18d4:	d5f7      	bpl.n	18c6 <initializeSystemFor48MHz+0xee>
	// 12. Wait until the DFLL is ready.
	while (!SYSCTRL->INTFLAG.bit.DFLLRDY) {};
    18d6:	4b09      	ldr	r3, [pc, #36]	; (18fc <initializeSystemFor48MHz+0x124>)
    18d8:	689b      	ldr	r3, [r3, #8]
    18da:	06db      	lsls	r3, r3, #27
    18dc:	d5fb      	bpl.n	18d6 <initializeSystemFor48MHz+0xfe>

	// Switch the main clock speed.
	// 1. Set the divisor of generic clock 0 to 0
	GCLK->GENDIV.reg =
    18de:	4b0a      	ldr	r3, [pc, #40]	; (1908 <initializeSystemFor48MHz+0x130>)
    18e0:	2200      	movs	r2, #0
    18e2:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(0) | // Select generator 0
	GCLK_GENDIV_DIV(0);
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    18e4:	4b08      	ldr	r3, [pc, #32]	; (1908 <initializeSystemFor48MHz+0x130>)
    18e6:	785b      	ldrb	r3, [r3, #1]
    18e8:	09db      	lsrs	r3, r3, #7
    18ea:	d1fb      	bne.n	18e4 <initializeSystemFor48MHz+0x10c>
	// 2. Switch generic clock 0 to the DFLL
	GCLK->GENCTRL.reg =
    18ec:	4b06      	ldr	r3, [pc, #24]	; (1908 <initializeSystemFor48MHz+0x130>)
    18ee:	4a0a      	ldr	r2, [pc, #40]	; (1918 <initializeSystemFor48MHz+0x140>)
    18f0:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(0) | // Select generator 0
	GCLK_GENCTRL_SRC_DFLL48M | // Select source DFLL
	GCLK_GENCTRL_IDC | // Set improved duty cycle 50/50
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    18f2:	4b05      	ldr	r3, [pc, #20]	; (1908 <initializeSystemFor48MHz+0x130>)
    18f4:	785b      	ldrb	r3, [r3, #1]
    18f6:	09db      	lsrs	r3, r3, #7
    18f8:	d1fb      	bne.n	18f2 <initializeSystemFor48MHz+0x11a>
}
    18fa:	4770      	bx	lr
    18fc:	40000800 	.word	0x40000800
    1900:	41004000 	.word	0x41004000
    1904:	40000400 	.word	0x40000400
    1908:	40000c00 	.word	0x40000c00
    190c:	00004003 	.word	0x00004003
    1910:	00010603 	.word	0x00010603
    1914:	fc00ffff 	.word	0xfc00ffff
    1918:	00030700 	.word	0x00030700

0000191c <systick_init>:

void systick_init() {
    191c:	b510      	push	{r4, lr}
	initializeSystemFor48MHz();
    191e:	f7ff ff5b 	bl	17d8 <initializeSystemFor48MHz>
	
	_cycles = 0;
    1922:	4b09      	ldr	r3, [pc, #36]	; (1948 <systick_init+0x2c>)
    1924:	2000      	movs	r0, #0
    1926:	2100      	movs	r1, #0
    1928:	6018      	str	r0, [r3, #0]
    192a:	6059      	str	r1, [r3, #4]

	SysTick->CTRL = 0;
    192c:	4b07      	ldr	r3, [pc, #28]	; (194c <systick_init+0x30>)
    192e:	2200      	movs	r2, #0
    1930:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0xFFFFFF;
    1932:	4a07      	ldr	r2, [pc, #28]	; (1950 <systick_init+0x34>)
    1934:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0xFFFFFF;
    1936:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
    1938:	2207      	movs	r2, #7
    193a:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    193c:	4b05      	ldr	r3, [pc, #20]	; (1954 <systick_init+0x38>)
    193e:	2280      	movs	r2, #128	; 0x80
    1940:	0612      	lsls	r2, r2, #24
    1942:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(SysTick_IRQn);
}
    1944:	bd10      	pop	{r4, pc}
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	200000e8 	.word	0x200000e8
    194c:	e000e010 	.word	0xe000e010
    1950:	00ffffff 	.word	0x00ffffff
    1954:	e000e100 	.word	0xe000e100

00001958 <systick_cycles>:

uint64_t systick_cycles() {
	return _cycles + (0xFFFFFF - SysTick->VAL);
    1958:	4b05      	ldr	r3, [pc, #20]	; (1970 <systick_cycles+0x18>)
    195a:	689b      	ldr	r3, [r3, #8]
    195c:	4a05      	ldr	r2, [pc, #20]	; (1974 <systick_cycles+0x1c>)
    195e:	1ad0      	subs	r0, r2, r3
    1960:	2100      	movs	r1, #0
    1962:	4b05      	ldr	r3, [pc, #20]	; (1978 <systick_cycles+0x20>)
    1964:	681a      	ldr	r2, [r3, #0]
    1966:	685b      	ldr	r3, [r3, #4]
    1968:	1880      	adds	r0, r0, r2
    196a:	4159      	adcs	r1, r3
}
    196c:	4770      	bx	lr
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	e000e010 	.word	0xe000e010
    1974:	00ffffff 	.word	0x00ffffff
    1978:	200000e8 	.word	0x200000e8

0000197c <millis>:
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000000) + 0.99999999 );
	ticks >>= 35;
	return (uint32_t)ticks;
}

uint32_t millis() {
    197c:	b510      	push	{r4, lr}
	// https://en.wikipedia.org/wiki/Division_algorithm#Division_by_a_constant
	uint64_t ticks = systick_cycles();
    197e:	f7ff ffeb 	bl	1958 <systick_cycles>
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000) + 0.99999999 );
    1982:	4a03      	ldr	r2, [pc, #12]	; (1990 <millis+0x14>)
    1984:	2300      	movs	r3, #0
    1986:	f000 fd43 	bl	2410 <__aeabi_lmul>
	ticks >>= 35;
    198a:	08c8      	lsrs	r0, r1, #3
	return (uint32_t)ticks;
}
    198c:	bd10      	pop	{r4, pc}
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	000aec34 	.word	0x000aec34

00001994 <SysTick_Handler>:

void SysTick_Handler() {
    1994:	b530      	push	{r4, r5, lr}
	_cycles += 0x1000000;
    1996:	4905      	ldr	r1, [pc, #20]	; (19ac <SysTick_Handler+0x18>)
    1998:	680a      	ldr	r2, [r1, #0]
    199a:	684b      	ldr	r3, [r1, #4]
    199c:	2480      	movs	r4, #128	; 0x80
    199e:	0464      	lsls	r4, r4, #17
    19a0:	2500      	movs	r5, #0
    19a2:	1912      	adds	r2, r2, r4
    19a4:	416b      	adcs	r3, r5
    19a6:	600a      	str	r2, [r1, #0]
    19a8:	604b      	str	r3, [r1, #4]
    19aa:	bd30      	pop	{r4, r5, pc}
    19ac:	200000e8 	.word	0x200000e8

000019b0 <_Z41__static_initialization_and_destruction_0ii>:
    g_uart0.sercom_handler();
}

void SERCOM1_Handler() {
    g_uart1.sercom_handler();
    19b0:	b570      	push	{r4, r5, r6, lr}
    19b2:	2801      	cmp	r0, #1
    19b4:	d000      	beq.n	19b8 <_Z41__static_initialization_and_destruction_0ii+0x8>
    19b6:	bd70      	pop	{r4, r5, r6, pc}
    19b8:	4b0c      	ldr	r3, [pc, #48]	; (19ec <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    19ba:	4299      	cmp	r1, r3
    19bc:	d1fb      	bne.n	19b6 <_Z41__static_initialization_and_destruction_0ii+0x6>
    volatile bool m_rxfull = false;

    bool m_used = false;

public:
    uart_t(Sercom* sercom) { m_sercom = sercom; }
    19be:	4a0c      	ldr	r2, [pc, #48]	; (19f0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    19c0:	2581      	movs	r5, #129	; 0x81
    19c2:	00ad      	lsls	r5, r5, #2
    19c4:	2300      	movs	r3, #0
    19c6:	5353      	strh	r3, [r2, r5]
    19c8:	4c0a      	ldr	r4, [pc, #40]	; (19f4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    19ca:	5313      	strh	r3, [r2, r4]
    19cc:	2082      	movs	r0, #130	; 0x82
    19ce:	0080      	lsls	r0, r0, #2
    19d0:	5413      	strb	r3, [r2, r0]
    19d2:	4909      	ldr	r1, [pc, #36]	; (19f8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    19d4:	5453      	strb	r3, [r2, r1]
    19d6:	4e09      	ldr	r6, [pc, #36]	; (19fc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    19d8:	6016      	str	r6, [r2, #0]
    19da:	4a09      	ldr	r2, [pc, #36]	; (1a00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    19dc:	5353      	strh	r3, [r2, r5]
    19de:	5313      	strh	r3, [r2, r4]
    19e0:	5413      	strb	r3, [r2, r0]
    19e2:	5453      	strb	r3, [r2, r1]
    19e4:	4b07      	ldr	r3, [pc, #28]	; (1a04 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    19e6:	6013      	str	r3, [r2, #0]
    19e8:	e7e5      	b.n	19b6 <_Z41__static_initialization_and_destruction_0ii+0x6>
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	0000ffff 	.word	0x0000ffff
    19f0:	200000f0 	.word	0x200000f0
    19f4:	00000206 	.word	0x00000206
    19f8:	00000209 	.word	0x00000209
    19fc:	42000800 	.word	0x42000800
    1a00:	200002fc 	.word	0x200002fc
    1a04:	42000c00 	.word	0x42000c00

00001a08 <_ZN6uart_t4initERK13uart_pincfg_tt>:
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
    1a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a0a:	46ce      	mov	lr, r9
    1a0c:	4647      	mov	r7, r8
    1a0e:	b580      	push	{r7, lr}
    1a10:	4691      	mov	r9, r2
    if(m_sercom == SERCOM1) {
    1a12:	4b6c      	ldr	r3, [pc, #432]	; (1bc4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
    1a14:	6804      	ldr	r4, [r0, #0]
    1a16:	429c      	cmp	r4, r3
    1a18:	d100      	bne.n	1a1c <_ZN6uart_t4initERK13uart_pincfg_tt+0x14>
    1a1a:	e09d      	b.n	1b58 <_ZN6uart_t4initERK13uart_pincfg_tt+0x150>
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
    1a1c:	4c6a      	ldr	r4, [pc, #424]	; (1bc8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
    1a1e:	6a23      	ldr	r3, [r4, #32]
    1a20:	2504      	movs	r5, #4
    1a22:	432b      	orrs	r3, r5
    1a24:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    1a26:	4b69      	ldr	r3, [pc, #420]	; (1bcc <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
    1a28:	4c69      	ldr	r4, [pc, #420]	; (1bd0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c8>)
    1a2a:	805c      	strh	r4, [r3, #2]
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1a2c:	7c8b      	ldrb	r3, [r1, #18]
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d100      	bne.n	1a34 <_ZN6uart_t4initERK13uart_pincfg_tt+0x2c>
    1a32:	e09a      	b.n	1b6a <_ZN6uart_t4initERK13uart_pincfg_tt+0x162>
    1a34:	2603      	movs	r6, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1a36:	680c      	ldr	r4, [r1, #0]
    1a38:	684d      	ldr	r5, [r1, #4]
        if(pin & 1)
    1a3a:	07eb      	lsls	r3, r5, #31
    1a3c:	d400      	bmi.n	1a40 <_ZN6uart_t4initERK13uart_pincfg_tt+0x38>
    1a3e:	e096      	b.n	1b6e <_ZN6uart_t4initERK13uart_pincfg_tt+0x166>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1a40:	0feb      	lsrs	r3, r5, #31
    1a42:	195b      	adds	r3, r3, r5
    1a44:	105b      	asrs	r3, r3, #1
    1a46:	469c      	mov	ip, r3
    1a48:	270f      	movs	r7, #15
    1a4a:	403e      	ands	r6, r7
    1a4c:	01e3      	lsls	r3, r4, #7
    1a4e:	4a61      	ldr	r2, [pc, #388]	; (1bd4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1a50:	4690      	mov	r8, r2
    1a52:	4443      	add	r3, r8
    1a54:	4463      	add	r3, ip
    1a56:	3330      	adds	r3, #48	; 0x30
    1a58:	781a      	ldrb	r2, [r3, #0]
    1a5a:	0136      	lsls	r6, r6, #4
    1a5c:	4017      	ands	r7, r2
    1a5e:	4337      	orrs	r7, r6
    1a60:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1a62:	01e3      	lsls	r3, r4, #7
    1a64:	4c5b      	ldr	r4, [pc, #364]	; (1bd4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1a66:	46a4      	mov	ip, r4
    1a68:	4463      	add	r3, ip
    1a6a:	195b      	adds	r3, r3, r5
    1a6c:	3340      	adds	r3, #64	; 0x40
    1a6e:	781c      	ldrb	r4, [r3, #0]
    1a70:	2501      	movs	r5, #1
    1a72:	432c      	orrs	r4, r5
    1a74:	701c      	strb	r4, [r3, #0]
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1a76:	7ccb      	ldrb	r3, [r1, #19]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d100      	bne.n	1a7e <_ZN6uart_t4initERK13uart_pincfg_tt+0x76>
    1a7c:	e086      	b.n	1b8c <_ZN6uart_t4initERK13uart_pincfg_tt+0x184>
    1a7e:	2603      	movs	r6, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1a80:	688c      	ldr	r4, [r1, #8]
    1a82:	68cd      	ldr	r5, [r1, #12]
        if(pin & 1)
    1a84:	07eb      	lsls	r3, r5, #31
    1a86:	d400      	bmi.n	1a8a <_ZN6uart_t4initERK13uart_pincfg_tt+0x82>
    1a88:	e082      	b.n	1b90 <_ZN6uart_t4initERK13uart_pincfg_tt+0x188>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1a8a:	0feb      	lsrs	r3, r5, #31
    1a8c:	195b      	adds	r3, r3, r5
    1a8e:	105b      	asrs	r3, r3, #1
    1a90:	469c      	mov	ip, r3
    1a92:	270f      	movs	r7, #15
    1a94:	403e      	ands	r6, r7
    1a96:	01e3      	lsls	r3, r4, #7
    1a98:	4a4e      	ldr	r2, [pc, #312]	; (1bd4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1a9a:	4690      	mov	r8, r2
    1a9c:	4443      	add	r3, r8
    1a9e:	4463      	add	r3, ip
    1aa0:	3330      	adds	r3, #48	; 0x30
    1aa2:	781a      	ldrb	r2, [r3, #0]
    1aa4:	0136      	lsls	r6, r6, #4
    1aa6:	4017      	ands	r7, r2
    1aa8:	4337      	orrs	r7, r6
    1aaa:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1aac:	01e3      	lsls	r3, r4, #7
    1aae:	4c49      	ldr	r4, [pc, #292]	; (1bd4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1ab0:	46a4      	mov	ip, r4
    1ab2:	4463      	add	r3, ip
    1ab4:	195b      	adds	r3, r3, r5
    1ab6:	3340      	adds	r3, #64	; 0x40
    1ab8:	781c      	ldrb	r4, [r3, #0]
    1aba:	2501      	movs	r5, #1
    1abc:	432c      	orrs	r4, r5
    1abe:	701c      	strb	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.ENABLE = 0;
    1ac0:	6804      	ldr	r4, [r0, #0]
    1ac2:	6823      	ldr	r3, [r4, #0]
    1ac4:	2502      	movs	r5, #2
    1ac6:	43ab      	bics	r3, r5
    1ac8:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.SWRST = 1;
    1aca:	6804      	ldr	r4, [r0, #0]
    1acc:	6823      	ldr	r3, [r4, #0]
    1ace:	3d01      	subs	r5, #1
    1ad0:	432b      	orrs	r3, r5
    1ad2:	6023      	str	r3, [r4, #0]
    while(m_sercom->USART.CTRLA.bit.SWRST);
    1ad4:	6803      	ldr	r3, [r0, #0]
    1ad6:	681c      	ldr	r4, [r3, #0]
    1ad8:	07e4      	lsls	r4, r4, #31
    1ada:	d4fb      	bmi.n	1ad4 <_ZN6uart_t4initERK13uart_pincfg_tt+0xcc>
    m_sercom->USART.CTRLA.bit.MODE = SERCOM_USART_CTRLA_MODE_USART_INT_CLK_Val;
    1adc:	681c      	ldr	r4, [r3, #0]
    1ade:	251c      	movs	r5, #28
    1ae0:	43ac      	bics	r4, r5
    1ae2:	3d18      	subs	r5, #24
    1ae4:	432c      	orrs	r4, r5
    1ae6:	601c      	str	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.DORD = 1;
    1ae8:	6804      	ldr	r4, [r0, #0]
    1aea:	6825      	ldr	r5, [r4, #0]
    1aec:	2380      	movs	r3, #128	; 0x80
    1aee:	05db      	lsls	r3, r3, #23
    1af0:	432b      	orrs	r3, r5
    1af2:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.TXPO = pincfg.tx_pad;
    1af4:	6806      	ldr	r6, [r0, #0]
    1af6:	7c0d      	ldrb	r5, [r1, #16]
    1af8:	2303      	movs	r3, #3
    1afa:	401d      	ands	r5, r3
    1afc:	6834      	ldr	r4, [r6, #0]
    1afe:	042d      	lsls	r5, r5, #16
    1b00:	4f35      	ldr	r7, [pc, #212]	; (1bd8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d0>)
    1b02:	403c      	ands	r4, r7
    1b04:	432c      	orrs	r4, r5
    1b06:	6034      	str	r4, [r6, #0]
    m_sercom->USART.CTRLA.bit.RXPO = pincfg.rx_pad;
    1b08:	6804      	ldr	r4, [r0, #0]
    1b0a:	7c4d      	ldrb	r5, [r1, #17]
    1b0c:	6821      	ldr	r1, [r4, #0]
    1b0e:	402b      	ands	r3, r5
    1b10:	051b      	lsls	r3, r3, #20
    1b12:	4d32      	ldr	r5, [pc, #200]	; (1bdc <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d4>)
    1b14:	4029      	ands	r1, r5
    1b16:	430b      	orrs	r3, r1
    1b18:	6023      	str	r3, [r4, #0]
    m_sercom->USART.BAUD.reg = speed;
    1b1a:	6803      	ldr	r3, [r0, #0]
    1b1c:	464a      	mov	r2, r9
    1b1e:	819a      	strh	r2, [r3, #12]
    m_sercom->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
    1b20:	6803      	ldr	r3, [r0, #0]
    1b22:	22c0      	movs	r2, #192	; 0xc0
    1b24:	0292      	lsls	r2, r2, #10
    1b26:	605a      	str	r2, [r3, #4]
    m_sercom->USART.INTENSET.bit.RXC = 1;
    1b28:	6802      	ldr	r2, [r0, #0]
    1b2a:	7d93      	ldrb	r3, [r2, #22]
    1b2c:	2104      	movs	r1, #4
    1b2e:	430b      	orrs	r3, r1
    1b30:	7593      	strb	r3, [r2, #22]
    if(m_sercom == SERCOM0)
    1b32:	6803      	ldr	r3, [r0, #0]
    1b34:	4a2a      	ldr	r2, [pc, #168]	; (1be0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d8>)
    1b36:	4293      	cmp	r3, r2
    1b38:	d039      	beq.n	1bae <_ZN6uart_t4initERK13uart_pincfg_tt+0x1a6>
    else if(m_sercom == SERCOM1)
    1b3a:	4a22      	ldr	r2, [pc, #136]	; (1bc4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
    1b3c:	4293      	cmp	r3, r2
    1b3e:	d03b      	beq.n	1bb8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1b0>
    m_sercom->USART.CTRLA.bit.ENABLE = 1;
    1b40:	6802      	ldr	r2, [r0, #0]
    1b42:	6813      	ldr	r3, [r2, #0]
    1b44:	2102      	movs	r1, #2
    1b46:	430b      	orrs	r3, r1
    1b48:	6013      	str	r3, [r2, #0]
    m_used = true;
    1b4a:	4b26      	ldr	r3, [pc, #152]	; (1be4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1dc>)
    1b4c:	2201      	movs	r2, #1
    1b4e:	54c2      	strb	r2, [r0, r3]
}
    1b50:	bc0c      	pop	{r2, r3}
    1b52:	4690      	mov	r8, r2
    1b54:	4699      	mov	r9, r3
    1b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
    1b58:	4c1b      	ldr	r4, [pc, #108]	; (1bc8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
    1b5a:	6a23      	ldr	r3, [r4, #32]
    1b5c:	2508      	movs	r5, #8
    1b5e:	432b      	orrs	r3, r5
    1b60:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) |
    1b62:	4b1a      	ldr	r3, [pc, #104]	; (1bcc <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
    1b64:	4c20      	ldr	r4, [pc, #128]	; (1be8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e0>)
    1b66:	805c      	strh	r4, [r3, #2]
    1b68:	e760      	b.n	1a2c <_ZN6uart_t4initERK13uart_pincfg_tt+0x24>
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1b6a:	2602      	movs	r6, #2
    1b6c:	e763      	b.n	1a36 <_ZN6uart_t4initERK13uart_pincfg_tt+0x2e>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    1b6e:	0feb      	lsrs	r3, r5, #31
    1b70:	195b      	adds	r3, r3, r5
    1b72:	105f      	asrs	r7, r3, #1
    1b74:	01e3      	lsls	r3, r4, #7
    1b76:	4a17      	ldr	r2, [pc, #92]	; (1bd4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1b78:	4694      	mov	ip, r2
    1b7a:	4463      	add	r3, ip
    1b7c:	19db      	adds	r3, r3, r7
    1b7e:	3330      	adds	r3, #48	; 0x30
    1b80:	781f      	ldrb	r7, [r3, #0]
    1b82:	220f      	movs	r2, #15
    1b84:	4397      	bics	r7, r2
    1b86:	433e      	orrs	r6, r7
    1b88:	701e      	strb	r6, [r3, #0]
    1b8a:	e76a      	b.n	1a62 <_ZN6uart_t4initERK13uart_pincfg_tt+0x5a>
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1b8c:	2602      	movs	r6, #2
    1b8e:	e777      	b.n	1a80 <_ZN6uart_t4initERK13uart_pincfg_tt+0x78>
    1b90:	0feb      	lsrs	r3, r5, #31
    1b92:	195b      	adds	r3, r3, r5
    1b94:	105f      	asrs	r7, r3, #1
    1b96:	01e3      	lsls	r3, r4, #7
    1b98:	4a0e      	ldr	r2, [pc, #56]	; (1bd4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1b9a:	4694      	mov	ip, r2
    1b9c:	4463      	add	r3, ip
    1b9e:	19db      	adds	r3, r3, r7
    1ba0:	3330      	adds	r3, #48	; 0x30
    1ba2:	781f      	ldrb	r7, [r3, #0]
    1ba4:	220f      	movs	r2, #15
    1ba6:	4397      	bics	r7, r2
    1ba8:	433e      	orrs	r6, r7
    1baa:	701e      	strb	r6, [r3, #0]
    1bac:	e77e      	b.n	1aac <_ZN6uart_t4initERK13uart_pincfg_tt+0xa4>
    1bae:	4b0f      	ldr	r3, [pc, #60]	; (1bec <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
    1bb0:	2280      	movs	r2, #128	; 0x80
    1bb2:	0092      	lsls	r2, r2, #2
    1bb4:	601a      	str	r2, [r3, #0]
}
    1bb6:	e7c3      	b.n	1b40 <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1bb8:	4b0c      	ldr	r3, [pc, #48]	; (1bec <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
    1bba:	2280      	movs	r2, #128	; 0x80
    1bbc:	00d2      	lsls	r2, r2, #3
    1bbe:	601a      	str	r2, [r3, #0]
}
    1bc0:	e7be      	b.n	1b40 <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	42000c00 	.word	0x42000c00
    1bc8:	40000400 	.word	0x40000400
    1bcc:	40000c00 	.word	0x40000c00
    1bd0:	0000400e 	.word	0x0000400e
    1bd4:	41004400 	.word	0x41004400
    1bd8:	fffcffff 	.word	0xfffcffff
    1bdc:	ffcfffff 	.word	0xffcfffff
    1be0:	42000800 	.word	0x42000800
    1be4:	00000209 	.word	0x00000209
    1be8:	0000400f 	.word	0x0000400f
    1bec:	e000e100 	.word	0xe000e100

00001bf0 <_ZN6uart_t14sercom_handlerEv>:
    if(!m_used) return;
    1bf0:	4b11      	ldr	r3, [pc, #68]	; (1c38 <_ZN6uart_t14sercom_handlerEv+0x48>)
    1bf2:	5cc3      	ldrb	r3, [r0, r3]
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d01b      	beq.n	1c30 <_ZN6uart_t14sercom_handlerEv+0x40>
    if(!m_rxfull) {
    1bf8:	2382      	movs	r3, #130	; 0x82
    1bfa:	009b      	lsls	r3, r3, #2
    1bfc:	5cc3      	ldrb	r3, [r0, r3]
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d117      	bne.n	1c32 <_ZN6uart_t14sercom_handlerEv+0x42>
		m_rxbuf[m_rxhead] = m_sercom->USART.DATA.reg;
    1c02:	6803      	ldr	r3, [r0, #0]
    1c04:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    1c06:	2281      	movs	r2, #129	; 0x81
    1c08:	0092      	lsls	r2, r2, #2
    1c0a:	5a83      	ldrh	r3, [r0, r2]
    1c0c:	b2c9      	uxtb	r1, r1
    1c0e:	18c3      	adds	r3, r0, r3
    1c10:	7119      	strb	r1, [r3, #4]
		m_rxhead = (m_rxhead+1) % sizeof(m_rxbuf);
    1c12:	5a83      	ldrh	r3, [r0, r2]
    1c14:	3301      	adds	r3, #1
    1c16:	05db      	lsls	r3, r3, #23
    1c18:	0ddb      	lsrs	r3, r3, #23
    1c1a:	5283      	strh	r3, [r0, r2]
		m_rxfull = m_rxtail == m_rxhead;
    1c1c:	4b07      	ldr	r3, [pc, #28]	; (1c3c <_ZN6uart_t14sercom_handlerEv+0x4c>)
    1c1e:	5ac3      	ldrh	r3, [r0, r3]
    1c20:	5a82      	ldrh	r2, [r0, r2]
    1c22:	1a9b      	subs	r3, r3, r2
    1c24:	425a      	negs	r2, r3
    1c26:	4153      	adcs	r3, r2
    1c28:	b2db      	uxtb	r3, r3
    1c2a:	2282      	movs	r2, #130	; 0x82
    1c2c:	0092      	lsls	r2, r2, #2
    1c2e:	5483      	strb	r3, [r0, r2]
}
    1c30:	4770      	bx	lr
		(void)m_sercom->USART.DATA.reg; // Clear RX flag
    1c32:	6803      	ldr	r3, [r0, #0]
    1c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1c36:	e7fb      	b.n	1c30 <_ZN6uart_t14sercom_handlerEv+0x40>
    1c38:	00000209 	.word	0x00000209
    1c3c:	00000206 	.word	0x00000206

00001c40 <_ZN6uart_t5writeEc>:
    if(!m_used) return;
    1c40:	4b05      	ldr	r3, [pc, #20]	; (1c58 <_ZN6uart_t5writeEc+0x18>)
    1c42:	5cc3      	ldrb	r3, [r0, r3]
    1c44:	2b00      	cmp	r3, #0
    1c46:	d006      	beq.n	1c56 <_ZN6uart_t5writeEc+0x16>
    m_sercom->USART.DATA.reg = c;
    1c48:	b289      	uxth	r1, r1
    1c4a:	6803      	ldr	r3, [r0, #0]
    1c4c:	8519      	strh	r1, [r3, #40]	; 0x28
	while(!m_sercom->USART.INTFLAG.bit.DRE);
    1c4e:	6803      	ldr	r3, [r0, #0]
    1c50:	7e1b      	ldrb	r3, [r3, #24]
    1c52:	07db      	lsls	r3, r3, #31
    1c54:	d5fb      	bpl.n	1c4e <_ZN6uart_t5writeEc+0xe>
}
    1c56:	4770      	bx	lr
    1c58:	00000209 	.word	0x00000209

00001c5c <_ZN6uart_t5printEPKci>:
void uart_t::print(const char* str, int len) {
    1c5c:	b570      	push	{r4, r5, r6, lr}
    1c5e:	0006      	movs	r6, r0
    1c60:	0014      	movs	r4, r2
    if(!m_used) return;
    1c62:	4b09      	ldr	r3, [pc, #36]	; (1c88 <_ZN6uart_t5printEPKci+0x2c>)
    1c64:	5cc3      	ldrb	r3, [r0, r3]
    1c66:	2b00      	cmp	r3, #0
    1c68:	d10a      	bne.n	1c80 <_ZN6uart_t5printEPKci+0x24>
}
    1c6a:	bd70      	pop	{r4, r5, r6, pc}
    while((len == -1) ? *str : len--) write(*str++);
    1c6c:	0023      	movs	r3, r4
    1c6e:	3c01      	subs	r4, #1
    1c70:	2b00      	cmp	r3, #0
    1c72:	d0fa      	beq.n	1c6a <_ZN6uart_t5printEPKci+0xe>
    1c74:	1c4d      	adds	r5, r1, #1
    1c76:	7809      	ldrb	r1, [r1, #0]
    1c78:	0030      	movs	r0, r6
    1c7a:	f7ff ffe1 	bl	1c40 <_ZN6uart_t5writeEc>
    1c7e:	0029      	movs	r1, r5
    1c80:	1c63      	adds	r3, r4, #1
    1c82:	d1f3      	bne.n	1c6c <_ZN6uart_t5printEPKci+0x10>
    1c84:	780b      	ldrb	r3, [r1, #0]
    1c86:	e7f3      	b.n	1c70 <_ZN6uart_t5printEPKci+0x14>
    1c88:	00000209 	.word	0x00000209

00001c8c <_ZN6uart_t7rxemptyEv>:
	return (!m_rxfull && (m_rxhead == m_rxtail));
    1c8c:	2382      	movs	r3, #130	; 0x82
    1c8e:	009b      	lsls	r3, r3, #2
    1c90:	5cc3      	ldrb	r3, [r0, r3]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d10a      	bne.n	1cac <_ZN6uart_t7rxemptyEv+0x20>
    1c96:	2381      	movs	r3, #129	; 0x81
    1c98:	009b      	lsls	r3, r3, #2
    1c9a:	5ac2      	ldrh	r2, [r0, r3]
    1c9c:	b292      	uxth	r2, r2
    1c9e:	4b05      	ldr	r3, [pc, #20]	; (1cb4 <_ZN6uart_t7rxemptyEv+0x28>)
    1ca0:	5ac3      	ldrh	r3, [r0, r3]
    1ca2:	b29b      	uxth	r3, r3
    1ca4:	429a      	cmp	r2, r3
    1ca6:	d003      	beq.n	1cb0 <_ZN6uart_t7rxemptyEv+0x24>
    1ca8:	2000      	movs	r0, #0
    1caa:	e000      	b.n	1cae <_ZN6uart_t7rxemptyEv+0x22>
    1cac:	2000      	movs	r0, #0
}
    1cae:	4770      	bx	lr
	return (!m_rxfull && (m_rxhead == m_rxtail));
    1cb0:	2001      	movs	r0, #1
    1cb2:	e7fc      	b.n	1cae <_ZN6uart_t7rxemptyEv+0x22>
    1cb4:	00000206 	.word	0x00000206

00001cb8 <_ZN6uart_t4getcEv>:
char uart_t::getc() {
    1cb8:	b510      	push	{r4, lr}
    1cba:	0004      	movs	r4, r0
    if(!m_used) return '\0';
    1cbc:	4b0c      	ldr	r3, [pc, #48]	; (1cf0 <_ZN6uart_t4getcEv+0x38>)
    1cbe:	5cc3      	ldrb	r3, [r0, r3]
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	d013      	beq.n	1cec <_ZN6uart_t4getcEv+0x34>
	while(rxempty());
    1cc4:	0020      	movs	r0, r4
    1cc6:	f7ff ffe1 	bl	1c8c <_ZN6uart_t7rxemptyEv>
    1cca:	2800      	cmp	r0, #0
    1ccc:	d1fa      	bne.n	1cc4 <_ZN6uart_t4getcEv+0xc>
	uint8_t c = m_rxbuf[m_rxtail];
    1cce:	4a09      	ldr	r2, [pc, #36]	; (1cf4 <_ZN6uart_t4getcEv+0x3c>)
    1cd0:	5aa3      	ldrh	r3, [r4, r2]
    1cd2:	18e3      	adds	r3, r4, r3
    1cd4:	7918      	ldrb	r0, [r3, #4]
    1cd6:	b2c0      	uxtb	r0, r0
	m_rxfull = false;
    1cd8:	2382      	movs	r3, #130	; 0x82
    1cda:	009b      	lsls	r3, r3, #2
    1cdc:	2100      	movs	r1, #0
    1cde:	54e1      	strb	r1, [r4, r3]
	m_rxtail = (m_rxtail+1) % sizeof(m_rxbuf);
    1ce0:	5aa3      	ldrh	r3, [r4, r2]
    1ce2:	3301      	adds	r3, #1
    1ce4:	05db      	lsls	r3, r3, #23
    1ce6:	0ddb      	lsrs	r3, r3, #23
    1ce8:	52a3      	strh	r3, [r4, r2]
}
    1cea:	bd10      	pop	{r4, pc}
    if(!m_used) return '\0';
    1cec:	2000      	movs	r0, #0
    1cee:	e7fc      	b.n	1cea <_ZN6uart_t4getcEv+0x32>
    1cf0:	00000209 	.word	0x00000209
    1cf4:	00000206 	.word	0x00000206

00001cf8 <_ZN6uart_t4peekEi>:
char uart_t::peek(int pos) {
    1cf8:	b570      	push	{r4, r5, r6, lr}
    1cfa:	0004      	movs	r4, r0
    1cfc:	000d      	movs	r5, r1
    if(!m_used) return '\0';
    1cfe:	4b1f      	ldr	r3, [pc, #124]	; (1d7c <_ZN6uart_t4peekEi+0x84>)
    1d00:	5cc3      	ldrb	r3, [r0, r3]
    1d02:	2b00      	cmp	r3, #0
    1d04:	d101      	bne.n	1d0a <_ZN6uart_t4peekEi+0x12>
    1d06:	2000      	movs	r0, #0
}
    1d08:	bd70      	pop	{r4, r5, r6, pc}
    if(rxempty() || pos >= available()) return '\0';
    1d0a:	f7ff ffbf 	bl	1c8c <_ZN6uart_t7rxemptyEv>
    1d0e:	2800      	cmp	r0, #0
    1d10:	d12f      	bne.n	1d72 <_ZN6uart_t4peekEi+0x7a>
        m_rxhead = 0;
        m_rxtail = 0;
        m_rxfull = false;
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
    1d12:	2381      	movs	r3, #129	; 0x81
    1d14:	009b      	lsls	r3, r3, #2
    1d16:	5ae2      	ldrh	r2, [r4, r3]
    1d18:	b292      	uxth	r2, r2
    1d1a:	4b19      	ldr	r3, [pc, #100]	; (1d80 <_ZN6uart_t4peekEi+0x88>)
    1d1c:	5ae3      	ldrh	r3, [r4, r3]
    1d1e:	b29b      	uxth	r3, r3
    1d20:	429a      	cmp	r2, r3
    1d22:	d313      	bcc.n	1d4c <_ZN6uart_t4peekEi+0x54>
            return m_rxhead - m_rxtail;
    1d24:	2381      	movs	r3, #129	; 0x81
    1d26:	009b      	lsls	r3, r3, #2
    1d28:	5ae3      	ldrh	r3, [r4, r3]
    1d2a:	4a15      	ldr	r2, [pc, #84]	; (1d80 <_ZN6uart_t4peekEi+0x88>)
    1d2c:	5aa2      	ldrh	r2, [r4, r2]
    1d2e:	1a9b      	subs	r3, r3, r2
    1d30:	b29b      	uxth	r3, r3
    1d32:	42ab      	cmp	r3, r5
    1d34:	dd1f      	ble.n	1d76 <_ZN6uart_t4peekEi+0x7e>
    if(pos == -1)
    1d36:	1c6b      	adds	r3, r5, #1
    1d38:	d015      	beq.n	1d66 <_ZN6uart_t4peekEi+0x6e>
        return m_rxbuf[(m_rxtail + pos) % sizeof(m_rxbuf)];
    1d3a:	4b11      	ldr	r3, [pc, #68]	; (1d80 <_ZN6uart_t4peekEi+0x88>)
    1d3c:	5ae0      	ldrh	r0, [r4, r3]
    1d3e:	1940      	adds	r0, r0, r5
    1d40:	05c0      	lsls	r0, r0, #23
    1d42:	0dc0      	lsrs	r0, r0, #23
    1d44:	1824      	adds	r4, r4, r0
    1d46:	7920      	ldrb	r0, [r4, #4]
    1d48:	b2c0      	uxtb	r0, r0
    1d4a:	e7dd      	b.n	1d08 <_ZN6uart_t4peekEi+0x10>
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1d4c:	2381      	movs	r3, #129	; 0x81
    1d4e:	009b      	lsls	r3, r3, #2
    1d50:	5ae3      	ldrh	r3, [r4, r3]
    1d52:	4a0b      	ldr	r2, [pc, #44]	; (1d80 <_ZN6uart_t4peekEi+0x88>)
    1d54:	5aa2      	ldrh	r2, [r4, r2]
    1d56:	1a9b      	subs	r3, r3, r2
    1d58:	b29b      	uxth	r3, r3
    1d5a:	2280      	movs	r2, #128	; 0x80
    1d5c:	0092      	lsls	r2, r2, #2
    1d5e:	4694      	mov	ip, r2
    1d60:	4463      	add	r3, ip
    1d62:	b29b      	uxth	r3, r3
    1d64:	e7e5      	b.n	1d32 <_ZN6uart_t4peekEi+0x3a>
        return m_rxbuf[m_rxtail];
    1d66:	4b06      	ldr	r3, [pc, #24]	; (1d80 <_ZN6uart_t4peekEi+0x88>)
    1d68:	5ae0      	ldrh	r0, [r4, r3]
    1d6a:	1824      	adds	r4, r4, r0
    1d6c:	7920      	ldrb	r0, [r4, #4]
    1d6e:	b2c0      	uxtb	r0, r0
    1d70:	e7ca      	b.n	1d08 <_ZN6uart_t4peekEi+0x10>
    if(rxempty() || pos >= available()) return '\0';
    1d72:	2000      	movs	r0, #0
    1d74:	e7c8      	b.n	1d08 <_ZN6uart_t4peekEi+0x10>
    1d76:	2000      	movs	r0, #0
    1d78:	e7c6      	b.n	1d08 <_ZN6uart_t4peekEi+0x10>
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	00000209 	.word	0x00000209
    1d80:	00000206 	.word	0x00000206

00001d84 <_ZN6uart_t4findEPKc>:
int uart_t::find(const char* str) {
    1d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d86:	46c6      	mov	lr, r8
    1d88:	b500      	push	{lr}
    1d8a:	0007      	movs	r7, r0
    1d8c:	000d      	movs	r5, r1
    if(!m_used) return -1;
    1d8e:	4b21      	ldr	r3, [pc, #132]	; (1e14 <_ZN6uart_t4findEPKc+0x90>)
    1d90:	5cc3      	ldrb	r3, [r0, r3]
    1d92:	2b00      	cmp	r3, #0
    1d94:	d035      	beq.n	1e02 <_ZN6uart_t4findEPKc+0x7e>
    for(int i = 0; i < available(); i++) {
    1d96:	2300      	movs	r3, #0
    1d98:	4698      	mov	r8, r3
        if(m_rxhead >= m_rxtail)
    1d9a:	2381      	movs	r3, #129	; 0x81
    1d9c:	009b      	lsls	r3, r3, #2
    1d9e:	5afa      	ldrh	r2, [r7, r3]
    1da0:	b292      	uxth	r2, r2
    1da2:	4b1d      	ldr	r3, [pc, #116]	; (1e18 <_ZN6uart_t4findEPKc+0x94>)
    1da4:	5afb      	ldrh	r3, [r7, r3]
    1da6:	b29b      	uxth	r3, r3
    1da8:	429a      	cmp	r2, r3
    1daa:	d319      	bcc.n	1de0 <_ZN6uart_t4findEPKc+0x5c>
            return m_rxhead - m_rxtail;
    1dac:	2381      	movs	r3, #129	; 0x81
    1dae:	009b      	lsls	r3, r3, #2
    1db0:	5afb      	ldrh	r3, [r7, r3]
    1db2:	4a19      	ldr	r2, [pc, #100]	; (1e18 <_ZN6uart_t4findEPKc+0x94>)
    1db4:	5aba      	ldrh	r2, [r7, r2]
    1db6:	1a9b      	subs	r3, r3, r2
    1db8:	b29b      	uxth	r3, r3
    1dba:	4543      	cmp	r3, r8
    1dbc:	dd25      	ble.n	1e0a <_ZN6uart_t4findEPKc+0x86>
        int search_idx = 0;
    1dbe:	2400      	movs	r4, #0
        while(str[search_idx] == peek(i + search_idx))
    1dc0:	5d2e      	ldrb	r6, [r5, r4]
    1dc2:	4643      	mov	r3, r8
    1dc4:	1919      	adds	r1, r3, r4
    1dc6:	0038      	movs	r0, r7
    1dc8:	f7ff ff96 	bl	1cf8 <_ZN6uart_t4peekEi>
    1dcc:	4286      	cmp	r6, r0
    1dce:	d114      	bne.n	1dfa <_ZN6uart_t4findEPKc+0x76>
            if(!str[++search_idx]) return i;
    1dd0:	3401      	adds	r4, #1
    1dd2:	5d2b      	ldrb	r3, [r5, r4]
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	d1f3      	bne.n	1dc0 <_ZN6uart_t4findEPKc+0x3c>
}
    1dd8:	4640      	mov	r0, r8
    1dda:	bc04      	pop	{r2}
    1ddc:	4690      	mov	r8, r2
    1dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1de0:	2381      	movs	r3, #129	; 0x81
    1de2:	009b      	lsls	r3, r3, #2
    1de4:	5afb      	ldrh	r3, [r7, r3]
    1de6:	4a0c      	ldr	r2, [pc, #48]	; (1e18 <_ZN6uart_t4findEPKc+0x94>)
    1de8:	5aba      	ldrh	r2, [r7, r2]
    1dea:	1a9b      	subs	r3, r3, r2
    1dec:	b29b      	uxth	r3, r3
    1dee:	2280      	movs	r2, #128	; 0x80
    1df0:	0092      	lsls	r2, r2, #2
    1df2:	4694      	mov	ip, r2
    1df4:	4463      	add	r3, ip
    1df6:	b29b      	uxth	r3, r3
    1df8:	e7df      	b.n	1dba <_ZN6uart_t4findEPKc+0x36>
    for(int i = 0; i < available(); i++) {
    1dfa:	2301      	movs	r3, #1
    1dfc:	469c      	mov	ip, r3
    1dfe:	44e0      	add	r8, ip
    1e00:	e7cb      	b.n	1d9a <_ZN6uart_t4findEPKc+0x16>
    if(!m_used) return -1;
    1e02:	2301      	movs	r3, #1
    1e04:	425b      	negs	r3, r3
    1e06:	4698      	mov	r8, r3
    1e08:	e7e6      	b.n	1dd8 <_ZN6uart_t4findEPKc+0x54>
    return -1;
    1e0a:	2301      	movs	r3, #1
    1e0c:	425b      	negs	r3, r3
    1e0e:	4698      	mov	r8, r3
    1e10:	e7e2      	b.n	1dd8 <_ZN6uart_t4findEPKc+0x54>
    1e12:	46c0      	nop			; (mov r8, r8)
    1e14:	00000209 	.word	0x00000209
    1e18:	00000206 	.word	0x00000206

00001e1c <_ZN6uart_t4readEv>:
char* uart_t::read() {
    1e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e1e:	46c6      	mov	lr, r8
    1e20:	b500      	push	{lr}
    1e22:	0005      	movs	r5, r0
    if(!m_used) return NULL;
    1e24:	4b1f      	ldr	r3, [pc, #124]	; (1ea4 <_ZN6uart_t4readEv+0x88>)
    1e26:	5cc3      	ldrb	r3, [r0, r3]
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d036      	beq.n	1e9a <_ZN6uart_t4readEv+0x7e>
        if(m_rxhead >= m_rxtail)
    1e2c:	2381      	movs	r3, #129	; 0x81
    1e2e:	009b      	lsls	r3, r3, #2
    1e30:	5ac2      	ldrh	r2, [r0, r3]
    1e32:	b292      	uxth	r2, r2
    1e34:	4b1c      	ldr	r3, [pc, #112]	; (1ea8 <_ZN6uart_t4readEv+0x8c>)
    1e36:	5ac3      	ldrh	r3, [r0, r3]
    1e38:	b29b      	uxth	r3, r3
    1e3a:	429a      	cmp	r2, r3
    1e3c:	d310      	bcc.n	1e60 <_ZN6uart_t4readEv+0x44>
            return m_rxhead - m_rxtail;
    1e3e:	2381      	movs	r3, #129	; 0x81
    1e40:	009b      	lsls	r3, r3, #2
    1e42:	5ac0      	ldrh	r0, [r0, r3]
    1e44:	4b18      	ldr	r3, [pc, #96]	; (1ea8 <_ZN6uart_t4readEv+0x8c>)
    1e46:	5aeb      	ldrh	r3, [r5, r3]
    1e48:	1ac0      	subs	r0, r0, r3
    1e4a:	b280      	uxth	r0, r0
    size_t avail = available();
    1e4c:	4680      	mov	r8, r0
    if(!avail) return NULL;
    1e4e:	2800      	cmp	r0, #0
    1e50:	d025      	beq.n	1e9e <_ZN6uart_t4readEv+0x82>
    char* data = (char*)malloc(avail + 1);
    1e52:	3001      	adds	r0, #1
    1e54:	f000 fb3c 	bl	24d0 <malloc>
    1e58:	1e07      	subs	r7, r0, #0
    if(!data) return NULL;
    1e5a:	d01a      	beq.n	1e92 <_ZN6uart_t4readEv+0x76>
    for(size_t i = 0; i < avail; i++)
    1e5c:	2400      	movs	r4, #0
    1e5e:	e012      	b.n	1e86 <_ZN6uart_t4readEv+0x6a>
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1e60:	2381      	movs	r3, #129	; 0x81
    1e62:	009b      	lsls	r3, r3, #2
    1e64:	5ac0      	ldrh	r0, [r0, r3]
    1e66:	4b10      	ldr	r3, [pc, #64]	; (1ea8 <_ZN6uart_t4readEv+0x8c>)
    1e68:	5aeb      	ldrh	r3, [r5, r3]
    1e6a:	1ac0      	subs	r0, r0, r3
    1e6c:	b280      	uxth	r0, r0
    1e6e:	2380      	movs	r3, #128	; 0x80
    1e70:	009b      	lsls	r3, r3, #2
    1e72:	469c      	mov	ip, r3
    1e74:	4460      	add	r0, ip
    1e76:	b280      	uxth	r0, r0
    1e78:	e7e8      	b.n	1e4c <_ZN6uart_t4readEv+0x30>
        data[i] = getc();
    1e7a:	193e      	adds	r6, r7, r4
    1e7c:	0028      	movs	r0, r5
    1e7e:	f7ff ff1b 	bl	1cb8 <_ZN6uart_t4getcEv>
    1e82:	7030      	strb	r0, [r6, #0]
    for(size_t i = 0; i < avail; i++)
    1e84:	3401      	adds	r4, #1
    1e86:	4544      	cmp	r4, r8
    1e88:	d3f7      	bcc.n	1e7a <_ZN6uart_t4readEv+0x5e>
    data[avail] = '\0';
    1e8a:	4643      	mov	r3, r8
    1e8c:	18fb      	adds	r3, r7, r3
    1e8e:	2200      	movs	r2, #0
    1e90:	701a      	strb	r2, [r3, #0]
}
    1e92:	0038      	movs	r0, r7
    1e94:	bc04      	pop	{r2}
    1e96:	4690      	mov	r8, r2
    1e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!m_used) return NULL;
    1e9a:	2700      	movs	r7, #0
    1e9c:	e7f9      	b.n	1e92 <_ZN6uart_t4readEv+0x76>
    if(!avail) return NULL;
    1e9e:	2700      	movs	r7, #0
    1ea0:	e7f7      	b.n	1e92 <_ZN6uart_t4readEv+0x76>
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	00000209 	.word	0x00000209
    1ea8:	00000206 	.word	0x00000206

00001eac <SERCOM0_Handler>:
void SERCOM0_Handler() {
    1eac:	b510      	push	{r4, lr}
    g_uart0.sercom_handler();
    1eae:	4802      	ldr	r0, [pc, #8]	; (1eb8 <SERCOM0_Handler+0xc>)
    1eb0:	f7ff fe9e 	bl	1bf0 <_ZN6uart_t14sercom_handlerEv>
}
    1eb4:	bd10      	pop	{r4, pc}
    1eb6:	46c0      	nop			; (mov r8, r8)
    1eb8:	200000f0 	.word	0x200000f0

00001ebc <SERCOM1_Handler>:
void SERCOM1_Handler() {
    1ebc:	b510      	push	{r4, lr}
    g_uart1.sercom_handler();
    1ebe:	4802      	ldr	r0, [pc, #8]	; (1ec8 <SERCOM1_Handler+0xc>)
    1ec0:	f7ff fe96 	bl	1bf0 <_ZN6uart_t14sercom_handlerEv>
    1ec4:	bd10      	pop	{r4, pc}
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	200002fc 	.word	0x200002fc

00001ecc <_GLOBAL__sub_I_g_uart0>:
    1ecc:	b510      	push	{r4, lr}
    1ece:	4902      	ldr	r1, [pc, #8]	; (1ed8 <_GLOBAL__sub_I_g_uart0+0xc>)
    1ed0:	2001      	movs	r0, #1
    1ed2:	f7ff fd6d 	bl	19b0 <_Z41__static_initialization_and_destruction_0ii>
    1ed6:	bd10      	pop	{r4, pc}
    1ed8:	0000ffff 	.word	0x0000ffff

00001edc <_ZN9SensornetC1ERK4RF24>:

extern "C" {
#include <systick.h>
}

Sensornet::Sensornet(const RF24& radio) :
    1edc:	b530      	push	{r4, r5, lr}
    m_radio(radio)
    1ede:	0003      	movs	r3, r0
    1ee0:	c934      	ldmia	r1!, {r2, r4, r5}
    1ee2:	c334      	stmia	r3!, {r2, r4, r5}
    1ee4:	c934      	ldmia	r1!, {r2, r4, r5}
    1ee6:	c334      	stmia	r3!, {r2, r4, r5}
    1ee8:	c934      	ldmia	r1!, {r2, r4, r5}
    1eea:	c334      	stmia	r3!, {r2, r4, r5}
    1eec:	680a      	ldr	r2, [r1, #0]
    1eee:	601a      	str	r2, [r3, #0]
    Vector() : m_size(0), m_data(NULL) {}
    1ef0:	2300      	movs	r3, #0
    1ef2:	6283      	str	r3, [r0, #40]	; 0x28
    1ef4:	62c3      	str	r3, [r0, #44]	; 0x2c
    1ef6:	6303      	str	r3, [r0, #48]	; 0x30
    1ef8:	6343      	str	r3, [r0, #52]	; 0x34
        },
        millis()
    };

    m_nodes.push_back(node2);*/
}
    1efa:	bd30      	pop	{r4, r5, pc}

00001efc <_ZN9Sensornet5beginEv>:

bool Sensornet::begin() {
    1efc:	b570      	push	{r4, r5, r6, lr}
    1efe:	0004      	movs	r4, r0
    if(!m_radio.begin())
    1f00:	f7fe fffa 	bl	ef8 <_ZN4RF245beginEv>
    1f04:	1e05      	subs	r5, r0, #0
    1f06:	d101      	bne.n	1f0c <_ZN9Sensornet5beginEv+0x10>
    m_radio.openReadingPipe(1, (uint64_t)55);

    m_radio.startListening();

    return true;
}
    1f08:	0028      	movs	r0, r5
    1f0a:	bd70      	pop	{r4, r5, r6, pc}
    m_radio.setChannel(120);
    1f0c:	2178      	movs	r1, #120	; 0x78
    1f0e:	0020      	movs	r0, r4
    1f10:	f7fe fe2b 	bl	b6a <_ZN4RF2410setChannelEh>
    m_radio.setAutoAck(true);
    1f14:	2101      	movs	r1, #1
    1f16:	0020      	movs	r0, r4
    1f18:	f7fe ff96 	bl	e48 <_ZN4RF2410setAutoAckEb>
    m_radio.setRetries(5, 15);
    1f1c:	220f      	movs	r2, #15
    1f1e:	2105      	movs	r1, #5
    1f20:	0020      	movs	r0, r4
    1f22:	f7fe ffdf 	bl	ee4 <_ZN4RF2410setRetriesEhh>
    m_radio.setPayloadSize(32);
    1f26:	2120      	movs	r1, #32
    1f28:	0020      	movs	r0, r4
    1f2a:	f7fe fe27 	bl	b7c <_ZN4RF2414setPayloadSizeEh>
    m_radio.setPALevel(RF24_PA_MAX);
    1f2e:	2103      	movs	r1, #3
    1f30:	0020      	movs	r0, r4
    1f32:	f7fe ff96 	bl	e62 <_ZN4RF2410setPALevelEh>
    m_radio.setDataRate(RF24_1MBPS);
    1f36:	2100      	movs	r1, #0
    1f38:	0020      	movs	r0, r4
    1f3a:	f7fe ffa9 	bl	e90 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    m_radio.openWritingPipe((uint64_t)56);
    1f3e:	2238      	movs	r2, #56	; 0x38
    1f40:	2300      	movs	r3, #0
    1f42:	0020      	movs	r0, r4
    1f44:	f7fe fed2 	bl	cec <_ZN4RF2415openWritingPipeEy>
    m_radio.openReadingPipe(1, (uint64_t)55);
    1f48:	2237      	movs	r2, #55	; 0x37
    1f4a:	2300      	movs	r3, #0
    1f4c:	2101      	movs	r1, #1
    1f4e:	0020      	movs	r0, r4
    1f50:	f7fe fee4 	bl	d1c <_ZN4RF2415openReadingPipeEhy>
    m_radio.startListening();
    1f54:	0020      	movs	r0, r4
    1f56:	f7fe ff33 	bl	dc0 <_ZN4RF2414startListeningEv>
    return true;
    1f5a:	e7d5      	b.n	1f08 <_ZN9Sensornet5beginEv+0xc>

00001f5c <_ZN9Sensornet10UpdateNodeERK12SensorPacket>:
            }
        }
    }
}

void Sensornet::UpdateNode(const SensorPacket& pkt) {
    1f5c:	b570      	push	{r4, r5, r6, lr}
    1f5e:	b08a      	sub	sp, #40	; 0x28
    1f60:	0006      	movs	r6, r0
        return m_data;
    1f62:	6b44      	ldr	r4, [r0, #52]	; 0x34
        return m_data + m_size;
    1f64:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1f66:	00dd      	lsls	r5, r3, #3
    1f68:	18ed      	adds	r5, r5, r3
    1f6a:	00ad      	lsls	r5, r5, #2
    1f6c:	1965      	adds	r5, r4, r5
    for(auto& node : m_nodes) {
    1f6e:	42ac      	cmp	r4, r5
    1f70:	d00f      	beq.n	1f92 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x36>
        if(node.data.id == pkt.id) {
    1f72:	2200      	movs	r2, #0
    1f74:	56a2      	ldrsb	r2, [r4, r2]
    1f76:	2300      	movs	r3, #0
    1f78:	56cb      	ldrsb	r3, [r1, r3]
    1f7a:	429a      	cmp	r2, r3
    1f7c:	d001      	beq.n	1f82 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x26>
    for(auto& node : m_nodes) {
    1f7e:	3424      	adds	r4, #36	; 0x24
    1f80:	e7f5      	b.n	1f6e <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x12>
            memcpy(&node.data, &pkt, sizeof(SensorPacket));
    1f82:	2220      	movs	r2, #32
    1f84:	0020      	movs	r0, r4
    1f86:	f000 fab7 	bl	24f8 <memcpy>
            node.last_seen = millis();
    1f8a:	f7ff fcf7 	bl	197c <millis>
    1f8e:	6220      	str	r0, [r4, #32]
            return;
    1f90:	e021      	b.n	1fd6 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x7a>
        }
    }

    m_nodes.push_back({ pkt, millis() });
    1f92:	0034      	movs	r4, r6
    1f94:	3430      	adds	r4, #48	; 0x30
    1f96:	2220      	movs	r2, #32
    1f98:	a801      	add	r0, sp, #4
    1f9a:	f000 faad 	bl	24f8 <memcpy>
    1f9e:	f7ff fced 	bl	197c <millis>
    1fa2:	9009      	str	r0, [sp, #36]	; 0x24
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1fa4:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1fa6:	2900      	cmp	r1, #0
    1fa8:	d017      	beq.n	1fda <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x7e>
    1faa:	3101      	adds	r1, #1
    1fac:	00cb      	lsls	r3, r1, #3
    1fae:	1859      	adds	r1, r3, r1
    1fb0:	0089      	lsls	r1, r1, #2
    1fb2:	6860      	ldr	r0, [r4, #4]
    1fb4:	f000 fb52 	bl	265c <realloc>
        if(!new_data) return;
    1fb8:	2800      	cmp	r0, #0
    1fba:	d00c      	beq.n	1fd6 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x7a>
        m_data = new_data;
    1fbc:	6060      	str	r0, [r4, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
    1fbe:	6b32      	ldr	r2, [r6, #48]	; 0x30
    1fc0:	00d3      	lsls	r3, r2, #3
    1fc2:	189b      	adds	r3, r3, r2
    1fc4:	009b      	lsls	r3, r3, #2
    1fc6:	18c0      	adds	r0, r0, r3
    1fc8:	2224      	movs	r2, #36	; 0x24
    1fca:	a901      	add	r1, sp, #4
    1fcc:	f000 fa94 	bl	24f8 <memcpy>
        m_size++;
    1fd0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1fd2:	3301      	adds	r3, #1
    1fd4:	6333      	str	r3, [r6, #48]	; 0x30
}
    1fd6:	b00a      	add	sp, #40	; 0x28
    1fd8:	bd70      	pop	{r4, r5, r6, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1fda:	2024      	movs	r0, #36	; 0x24
    1fdc:	f000 fa78 	bl	24d0 <malloc>
    1fe0:	e7ea      	b.n	1fb8 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x5c>

00001fe2 <_ZN9Sensornet13ProcessPacketER12SensorPacket>:
void Sensornet::ProcessPacket(SensorPacket& pkt) {
    1fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fe4:	46c6      	mov	lr, r8
    1fe6:	b500      	push	{lr}
    1fe8:	0006      	movs	r6, r0
    1fea:	000d      	movs	r5, r1
    if(pkt.id == 0) {
    1fec:	2300      	movs	r3, #0
    1fee:	56cb      	ldrsb	r3, [r1, r3]
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	d135      	bne.n	2060 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x7e>
        pkt.id = 1;
    1ff4:	3301      	adds	r3, #1
    1ff6:	700b      	strb	r3, [r1, #0]
        return m_data;
    1ff8:	6b44      	ldr	r4, [r0, #52]	; 0x34
        return m_data + m_size;
    1ffa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ffc:	00df      	lsls	r7, r3, #3
    1ffe:	18ff      	adds	r7, r7, r3
    2000:	00bf      	lsls	r7, r7, #2
    2002:	19e7      	adds	r7, r4, r7
    2004:	e019      	b.n	203a <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x58>
                pkt.id = node.data.id;
    2006:	2300      	movs	r3, #0
    2008:	56e3      	ldrsb	r3, [r4, r3]
    200a:	702b      	strb	r3, [r5, #0]
        UpdateNode(pkt);
    200c:	0029      	movs	r1, r5
    200e:	0030      	movs	r0, r6
    2010:	f7ff ffa4 	bl	1f5c <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
        m_radio.stopListening();
    2014:	0030      	movs	r0, r6
    2016:	f7fe fdb7 	bl	b88 <_ZN4RF2413stopListeningEv>
        pkt.type = Sensors::TYPE_COMMAND;
    201a:	23ff      	movs	r3, #255	; 0xff
    201c:	726b      	strb	r3, [r5, #9]
        pkt.data[0] = Sensors::COMMAND_SET_ID;
    201e:	3bfe      	subs	r3, #254	; 0xfe
    2020:	72ab      	strb	r3, [r5, #10]
        m_radio.write(&pkt, 32);
    2022:	2220      	movs	r2, #32
    2024:	0029      	movs	r1, r5
    2026:	0030      	movs	r0, r6
    2028:	f7fe fe37 	bl	c9a <_ZN4RF245writeEPKvh>
        m_radio.startListening();
    202c:	0030      	movs	r0, r6
    202e:	f7fe fec7 	bl	dc0 <_ZN4RF2414startListeningEv>
}
    2032:	bc04      	pop	{r2}
    2034:	4690      	mov	r8, r2
    2036:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(auto& node : m_nodes) {
    2038:	3424      	adds	r4, #36	; 0x24
    203a:	42bc      	cmp	r4, r7
    203c:	d0e6      	beq.n	200c <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x2a>
            if(strncmp(node.data.name, pkt.name, sizeof(SensorPacket::name)) == 0) {
    203e:	1c60      	adds	r0, r4, #1
    2040:	1c69      	adds	r1, r5, #1
    2042:	2208      	movs	r2, #8
    2044:	f000 fb91 	bl	276a <strncmp>
    2048:	2800      	cmp	r0, #0
    204a:	d0dc      	beq.n	2006 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x24>
            if(node.data.id >= pkt.id) pkt.id = node.data.id + 1;
    204c:	2300      	movs	r3, #0
    204e:	56e3      	ldrsb	r3, [r4, r3]
    2050:	2200      	movs	r2, #0
    2052:	56aa      	ldrsb	r2, [r5, r2]
    2054:	4293      	cmp	r3, r2
    2056:	dbef      	blt.n	2038 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x56>
    2058:	b2db      	uxtb	r3, r3
    205a:	3301      	adds	r3, #1
    205c:	702b      	strb	r3, [r5, #0]
    205e:	e7eb      	b.n	2038 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x56>
        UpdateNode(pkt);
    2060:	f7ff ff7c 	bl	1f5c <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
        for(size_t i = 0; i < m_cmd_queue.size(); i++) {
    2064:	2400      	movs	r4, #0
    2066:	e008      	b.n	207a <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x98>

        memcpy(it, it + 1, m_size * sizeof(T) - (it - begin()) - 1 * sizeof(T));

        m_size -= 1;
        if(!m_size) {
            free(m_data);
    2068:	4643      	mov	r3, r8
    206a:	6858      	ldr	r0, [r3, #4]
    206c:	f000 fa3a 	bl	24e4 <free>
            m_data = NULL;
    2070:	2300      	movs	r3, #0
    2072:	4642      	mov	r2, r8
    2074:	6053      	str	r3, [r2, #4]
                i--;
    2076:	3c01      	subs	r4, #1
        for(size_t i = 0; i < m_cmd_queue.size(); i++) {
    2078:	3401      	adds	r4, #1
    207a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    207c:	429c      	cmp	r4, r3
    207e:	d2d8      	bcs.n	2032 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x50>
        return *(m_data + idx);
    2080:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2082:	0167      	lsls	r7, r4, #5
    2084:	19da      	adds	r2, r3, r7
    2086:	4690      	mov	r8, r2
            if(cmd.id == pkt.id) {
    2088:	57da      	ldrsb	r2, [r3, r7]
    208a:	2300      	movs	r3, #0
    208c:	56eb      	ldrsb	r3, [r5, r3]
    208e:	429a      	cmp	r2, r3
    2090:	d1f2      	bne.n	2078 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x96>
                m_radio.stopListening();
    2092:	0030      	movs	r0, r6
    2094:	f7fe fd78 	bl	b88 <_ZN4RF2413stopListeningEv>
                m_radio.write(&cmd, 32);
    2098:	2220      	movs	r2, #32
    209a:	4641      	mov	r1, r8
    209c:	0030      	movs	r0, r6
    209e:	f7fe fdfc 	bl	c9a <_ZN4RF245writeEPKvh>
                m_radio.startListening();
    20a2:	0030      	movs	r0, r6
    20a4:	f7fe fe8c 	bl	dc0 <_ZN4RF2414startListeningEv>
                m_cmd_queue.erase(m_cmd_queue.begin() + i);
    20a8:	2328      	movs	r3, #40	; 0x28
    20aa:	4698      	mov	r8, r3
    20ac:	44b0      	add	r8, r6
    20ae:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    20b0:	469c      	mov	ip, r3
    20b2:	4467      	add	r7, ip
        if(!m_size || it < begin() || it >= end()) return;
    20b4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    20b6:	2b00      	cmp	r3, #0
    20b8:	d0dd      	beq.n	2076 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x94>
        return m_data;
    20ba:	4642      	mov	r2, r8
    20bc:	6852      	ldr	r2, [r2, #4]
        if(!m_size || it < begin() || it >= end()) return;
    20be:	4297      	cmp	r7, r2
    20c0:	d3d9      	bcc.n	2076 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x94>
        return m_data + m_size;
    20c2:	015b      	lsls	r3, r3, #5
    20c4:	18d1      	adds	r1, r2, r3
        if(!m_size || it < begin() || it >= end()) return;
    20c6:	428f      	cmp	r7, r1
    20c8:	d2d5      	bcs.n	2076 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x94>
        memcpy(it, it + 1, m_size * sizeof(T) - (it - begin()) - 1 * sizeof(T));
    20ca:	0039      	movs	r1, r7
    20cc:	3120      	adds	r1, #32
    20ce:	1aba      	subs	r2, r7, r2
    20d0:	1152      	asrs	r2, r2, #5
    20d2:	1a9a      	subs	r2, r3, r2
    20d4:	3a20      	subs	r2, #32
    20d6:	0038      	movs	r0, r7
    20d8:	f000 fa0e 	bl	24f8 <memcpy>
        m_size -= 1;
    20dc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    20de:	1e59      	subs	r1, r3, #1
    20e0:	62b1      	str	r1, [r6, #40]	; 0x28
        if(!m_size) {
    20e2:	2900      	cmp	r1, #0
    20e4:	d0c0      	beq.n	2068 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x86>
            return;
        }

        auto new_data = (T*)realloc(m_data, m_size * sizeof(T));
    20e6:	0149      	lsls	r1, r1, #5
    20e8:	4643      	mov	r3, r8
    20ea:	6858      	ldr	r0, [r3, #4]
    20ec:	f000 fab6 	bl	265c <realloc>
        if(!new_data) return;
    20f0:	2800      	cmp	r0, #0
    20f2:	d0c0      	beq.n	2076 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x94>
        m_data = new_data;
    20f4:	4643      	mov	r3, r8
    20f6:	6058      	str	r0, [r3, #4]
    20f8:	e7bd      	b.n	2076 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x94>

000020fa <_ZN9Sensornet4PollEv>:
void Sensornet::Poll() {
    20fa:	b510      	push	{r4, lr}
    20fc:	b088      	sub	sp, #32
    20fe:	0004      	movs	r4, r0
    if(m_radio.available()) {
    2100:	f7fe fde5 	bl	cce <_ZN4RF249availableEv>
    2104:	2800      	cmp	r0, #0
    2106:	d101      	bne.n	210c <_ZN9Sensornet4PollEv+0x12>
}
    2108:	b008      	add	sp, #32
    210a:	bd10      	pop	{r4, pc}
        m_radio.read(&pkt, 32);
    210c:	2220      	movs	r2, #32
    210e:	4669      	mov	r1, sp
    2110:	0020      	movs	r0, r4
    2112:	f7fe fde1 	bl	cd8 <_ZN4RF244readEPvh>
        ProcessPacket(pkt);
    2116:	4669      	mov	r1, sp
    2118:	0020      	movs	r0, r4
    211a:	f7ff ff62 	bl	1fe2 <_ZN9Sensornet13ProcessPacketER12SensorPacket>
        m_radio.flush_rx();
    211e:	0020      	movs	r0, r4
    2120:	f7fe fcf5 	bl	b0e <_ZN4RF248flush_rxEv>
}
    2124:	e7f0      	b.n	2108 <_ZN9Sensornet4PollEv+0xe>
    2126:	Address 0x00002126 is out of bounds.


00002128 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_>:

void Sensornet::CMDSetName(GSM* gsm, const char* sender, const char* c_args) {
    2128:	b5f0      	push	{r4, r5, r6, r7, lr}
    212a:	46ce      	mov	lr, r9
    212c:	4647      	mov	r7, r8
    212e:	b580      	push	{r7, lr}
    2130:	b089      	sub	sp, #36	; 0x24
    2132:	0006      	movs	r6, r0
    2134:	4688      	mov	r8, r1
    2136:	4691      	mov	r9, r2
    2138:	1e1c      	subs	r4, r3, #0
    char* id_str = NULL;
    char* name = NULL;
    char* args = NULL;

    if(c_args) {
    213a:	d032      	beq.n	21a2 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x7a>
        args = (char*)malloc(strlen(c_args));
    213c:	0018      	movs	r0, r3
    213e:	f000 fb0d 	bl	275c <strlen>
    2142:	f000 f9c5 	bl	24d0 <malloc>
    2146:	1e05      	subs	r5, r0, #0
        if(!args) {
    2148:	d025      	beq.n	2196 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x6e>
            gsm->SendSMS(sender, "malloc failed");
            return;
        }
        strcpy(args, c_args);
    214a:	0021      	movs	r1, r4
    214c:	f000 fafe 	bl	274c <strcpy>

        id_str = strtok(args, " ");
    2150:	4f2e      	ldr	r7, [pc, #184]	; (220c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xe4>)
    2152:	0039      	movs	r1, r7
    2154:	0028      	movs	r0, r5
    2156:	f000 fb43 	bl	27e0 <strtok>
    215a:	0004      	movs	r4, r0
        name = strtok(NULL, " ");
    215c:	0039      	movs	r1, r7
    215e:	2000      	movs	r0, #0
    2160:	f000 fb3e 	bl	27e0 <strtok>
    2164:	0007      	movs	r7, r0
    }

    if(id_str && name && atoi(id_str)) {
    2166:	2c00      	cmp	r4, #0
    2168:	d006      	beq.n	2178 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x50>
    216a:	2f00      	cmp	r7, #0
    216c:	d004      	beq.n	2178 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x50>
    216e:	0020      	movs	r0, r4
    2170:	f000 f976 	bl	2460 <atoi>
    2174:	2800      	cmp	r0, #0
    2176:	d117      	bne.n	21a8 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x80>

        m_cmd_queue.push_back(cmd);

        gsm->SendSMS(sender, "Command queued");
    } else {
        gsm->SendSMS(sender, "Usage: setname <id> <new name>");
    2178:	4a25      	ldr	r2, [pc, #148]	; (2210 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xe8>)
    217a:	4649      	mov	r1, r9
    217c:	4640      	mov	r0, r8
    217e:	f7fe f95b 	bl	438 <_ZN3GSM7SendSMSEPKcS1_>
    }

    if(args) free(args);
    2182:	2d00      	cmp	r5, #0
    2184:	d002      	beq.n	218c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x64>
    2186:	0028      	movs	r0, r5
    2188:	f000 f9ac 	bl	24e4 <free>
    218c:	b009      	add	sp, #36	; 0x24
    218e:	bc0c      	pop	{r2, r3}
    2190:	4690      	mov	r8, r2
    2192:	4699      	mov	r9, r3
    2194:	bdf0      	pop	{r4, r5, r6, r7, pc}
            gsm->SendSMS(sender, "malloc failed");
    2196:	4a1f      	ldr	r2, [pc, #124]	; (2214 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xec>)
    2198:	4649      	mov	r1, r9
    219a:	4640      	mov	r0, r8
    219c:	f7fe f94c 	bl	438 <_ZN3GSM7SendSMSEPKcS1_>
            return;
    21a0:	e7f4      	b.n	218c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x64>
    char* args = NULL;
    21a2:	001d      	movs	r5, r3
    char* name = NULL;
    21a4:	001f      	movs	r7, r3
    21a6:	e7de      	b.n	2166 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x3e>
        cmd.id = atoi(id_str);
    21a8:	0020      	movs	r0, r4
    21aa:	f000 f959 	bl	2460 <atoi>
    21ae:	466b      	mov	r3, sp
    21b0:	7018      	strb	r0, [r3, #0]
        cmd.type = Sensors::TYPE_COMMAND;
    21b2:	23ff      	movs	r3, #255	; 0xff
    21b4:	466a      	mov	r2, sp
    21b6:	7253      	strb	r3, [r2, #9]
        cmd.data[0] = Sensors::COMMAND_SET_NAME;
    21b8:	3bfd      	subs	r3, #253	; 0xfd
    21ba:	7293      	strb	r3, [r2, #10]
        strncpy(cmd.name, name, sizeof(cmd.name));
    21bc:	2208      	movs	r2, #8
    21be:	0039      	movs	r1, r7
    21c0:	466b      	mov	r3, sp
    21c2:	1c58      	adds	r0, r3, #1
    21c4:	f000 fae2 	bl	278c <strncpy>
        m_cmd_queue.push_back(cmd);
    21c8:	0034      	movs	r4, r6
    21ca:	3428      	adds	r4, #40	; 0x28
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    21cc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    21ce:	2900      	cmp	r1, #0
    21d0:	d017      	beq.n	2202 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xda>
    21d2:	3101      	adds	r1, #1
    21d4:	0149      	lsls	r1, r1, #5
    21d6:	6860      	ldr	r0, [r4, #4]
    21d8:	f000 fa40 	bl	265c <realloc>
        if(!new_data) return;
    21dc:	2800      	cmp	r0, #0
    21de:	d00a      	beq.n	21f6 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xce>
        m_data = new_data;
    21e0:	6060      	str	r0, [r4, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
    21e2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    21e4:	015b      	lsls	r3, r3, #5
    21e6:	18c0      	adds	r0, r0, r3
    21e8:	2220      	movs	r2, #32
    21ea:	4669      	mov	r1, sp
    21ec:	f000 f984 	bl	24f8 <memcpy>
        m_size++;
    21f0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    21f2:	3301      	adds	r3, #1
    21f4:	62b3      	str	r3, [r6, #40]	; 0x28
        gsm->SendSMS(sender, "Command queued");
    21f6:	4a08      	ldr	r2, [pc, #32]	; (2218 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xf0>)
    21f8:	4649      	mov	r1, r9
    21fa:	4640      	mov	r0, r8
    21fc:	f7fe f91c 	bl	438 <_ZN3GSM7SendSMSEPKcS1_>
    2200:	e7bf      	b.n	2182 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x5a>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    2202:	2020      	movs	r0, #32
    2204:	f000 f964 	bl	24d0 <malloc>
    2208:	e7e8      	b.n	21dc <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xb4>
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	00003264 	.word	0x00003264
    2210:	000033cc 	.word	0x000033cc
    2214:	00003254 	.word	0x00003254
    2218:	000033bc 	.word	0x000033bc

0000221c <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
    221c:	e7fe      	b.n	221c <Dummy_Handler>
    221e:	Address 0x0000221e is out of bounds.


00002220 <Reset_Handler>:
{
    2220:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    2222:	4a1e      	ldr	r2, [pc, #120]	; (229c <Reset_Handler+0x7c>)
    2224:	4b1e      	ldr	r3, [pc, #120]	; (22a0 <Reset_Handler+0x80>)
    2226:	429a      	cmp	r2, r3
    2228:	d007      	beq.n	223a <Reset_Handler+0x1a>
        pDest = &_data;
    222a:	4b1d      	ldr	r3, [pc, #116]	; (22a0 <Reset_Handler+0x80>)
        pSrc = &_etext;
    222c:	4a1b      	ldr	r2, [pc, #108]	; (229c <Reset_Handler+0x7c>)
    222e:	e001      	b.n	2234 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
    2230:	ca02      	ldmia	r2!, {r1}
    2232:	c302      	stmia	r3!, {r1}
                for (; pDest < &_edata;) {
    2234:	491b      	ldr	r1, [pc, #108]	; (22a4 <Reset_Handler+0x84>)
    2236:	428b      	cmp	r3, r1
    2238:	d3fa      	bcc.n	2230 <Reset_Handler+0x10>
        pSrc = &_etext;
    223a:	4b1b      	ldr	r3, [pc, #108]	; (22a8 <Reset_Handler+0x88>)
    223c:	e001      	b.n	2242 <Reset_Handler+0x22>
                *pDest++ = 0;
    223e:	2200      	movs	r2, #0
    2240:	c304      	stmia	r3!, {r2}
        for (pDest = &_bss; pDest < &_ebss;) {
    2242:	4a1a      	ldr	r2, [pc, #104]	; (22ac <Reset_Handler+0x8c>)
    2244:	4293      	cmp	r3, r2
    2246:	d3fa      	bcc.n	223e <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2248:	4b19      	ldr	r3, [pc, #100]	; (22b0 <Reset_Handler+0x90>)
    224a:	227f      	movs	r2, #127	; 0x7f
    224c:	4393      	bics	r3, r2
    224e:	4a19      	ldr	r2, [pc, #100]	; (22b4 <Reset_Handler+0x94>)
    2250:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2252:	4a19      	ldr	r2, [pc, #100]	; (22b8 <Reset_Handler+0x98>)
    2254:	2390      	movs	r3, #144	; 0x90
    2256:	005b      	lsls	r3, r3, #1
    2258:	2102      	movs	r1, #2
    225a:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    225c:	4b17      	ldr	r3, [pc, #92]	; (22bc <Reset_Handler+0x9c>)
    225e:	7b9a      	ldrb	r2, [r3, #14]
    2260:	312e      	adds	r1, #46	; 0x2e
    2262:	438a      	bics	r2, r1
    2264:	2120      	movs	r1, #32
    2266:	430a      	orrs	r2, r1
    2268:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    226a:	7b9a      	ldrb	r2, [r3, #14]
    226c:	210c      	movs	r1, #12
    226e:	438a      	bics	r2, r1
    2270:	2108      	movs	r1, #8
    2272:	430a      	orrs	r2, r1
    2274:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2276:	7b9a      	ldrb	r2, [r3, #14]
    2278:	2103      	movs	r1, #3
    227a:	438a      	bics	r2, r1
    227c:	2102      	movs	r1, #2
    227e:	430a      	orrs	r2, r1
    2280:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2282:	4a0f      	ldr	r2, [pc, #60]	; (22c0 <Reset_Handler+0xa0>)
    2284:	6851      	ldr	r1, [r2, #4]
    2286:	2380      	movs	r3, #128	; 0x80
    2288:	430b      	orrs	r3, r1
    228a:	6053      	str	r3, [r2, #4]
        systick_init();
    228c:	f7ff fb46 	bl	191c <systick_init>
        __libc_init_array();
    2290:	f000 f8fa 	bl	2488 <__libc_init_array>
        main();
    2294:	f7ff f8b8 	bl	1408 <main>
        while (1);
    2298:	e7fe      	b.n	2298 <Reset_Handler+0x78>
    229a:	46c0      	nop			; (mov r8, r8)
    229c:	000035bc 	.word	0x000035bc
    22a0:	20000000 	.word	0x20000000
    22a4:	20000078 	.word	0x20000078
    22a8:	20000078 	.word	0x20000078
    22ac:	20000524 	.word	0x20000524
    22b0:	00000000 	.word	0x00000000
    22b4:	e000ed00 	.word	0xe000ed00
    22b8:	41007000 	.word	0x41007000
    22bc:	41004800 	.word	0x41004800
    22c0:	41004000 	.word	0x41004000

000022c4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    22c4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    22c6:	4a06      	ldr	r2, [pc, #24]	; (22e0 <_sbrk+0x1c>)
    22c8:	6812      	ldr	r2, [r2, #0]
    22ca:	2a00      	cmp	r2, #0
    22cc:	d004      	beq.n	22d8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    22ce:	4a04      	ldr	r2, [pc, #16]	; (22e0 <_sbrk+0x1c>)
    22d0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    22d2:	18c3      	adds	r3, r0, r3
    22d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    22d6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    22d8:	4a01      	ldr	r2, [pc, #4]	; (22e0 <_sbrk+0x1c>)
    22da:	4902      	ldr	r1, [pc, #8]	; (22e4 <_sbrk+0x20>)
    22dc:	6011      	str	r1, [r2, #0]
    22de:	e7f6      	b.n	22ce <_sbrk+0xa>
    22e0:	20000508 	.word	0x20000508
    22e4:	20000524 	.word	0x20000524

000022e8 <__aeabi_atexit>:
    22e8:	0003      	movs	r3, r0
    22ea:	b510      	push	{r4, lr}
    22ec:	0008      	movs	r0, r1
    22ee:	0019      	movs	r1, r3
    22f0:	f000 f8bc 	bl	246c <__cxa_atexit>
    22f4:	bd10      	pop	{r4, pc}
    22f6:	Address 0x000022f6 is out of bounds.


000022f8 <__udivsi3>:
    22f8:	2200      	movs	r2, #0
    22fa:	0843      	lsrs	r3, r0, #1
    22fc:	428b      	cmp	r3, r1
    22fe:	d374      	bcc.n	23ea <__udivsi3+0xf2>
    2300:	0903      	lsrs	r3, r0, #4
    2302:	428b      	cmp	r3, r1
    2304:	d35f      	bcc.n	23c6 <__udivsi3+0xce>
    2306:	0a03      	lsrs	r3, r0, #8
    2308:	428b      	cmp	r3, r1
    230a:	d344      	bcc.n	2396 <__udivsi3+0x9e>
    230c:	0b03      	lsrs	r3, r0, #12
    230e:	428b      	cmp	r3, r1
    2310:	d328      	bcc.n	2364 <__udivsi3+0x6c>
    2312:	0c03      	lsrs	r3, r0, #16
    2314:	428b      	cmp	r3, r1
    2316:	d30d      	bcc.n	2334 <__udivsi3+0x3c>
    2318:	22ff      	movs	r2, #255	; 0xff
    231a:	0209      	lsls	r1, r1, #8
    231c:	ba12      	rev	r2, r2
    231e:	0c03      	lsrs	r3, r0, #16
    2320:	428b      	cmp	r3, r1
    2322:	d302      	bcc.n	232a <__udivsi3+0x32>
    2324:	1212      	asrs	r2, r2, #8
    2326:	0209      	lsls	r1, r1, #8
    2328:	d065      	beq.n	23f6 <__udivsi3+0xfe>
    232a:	0b03      	lsrs	r3, r0, #12
    232c:	428b      	cmp	r3, r1
    232e:	d319      	bcc.n	2364 <__udivsi3+0x6c>
    2330:	e000      	b.n	2334 <__udivsi3+0x3c>
    2332:	0a09      	lsrs	r1, r1, #8
    2334:	0bc3      	lsrs	r3, r0, #15
    2336:	428b      	cmp	r3, r1
    2338:	d301      	bcc.n	233e <__udivsi3+0x46>
    233a:	03cb      	lsls	r3, r1, #15
    233c:	1ac0      	subs	r0, r0, r3
    233e:	4152      	adcs	r2, r2
    2340:	0b83      	lsrs	r3, r0, #14
    2342:	428b      	cmp	r3, r1
    2344:	d301      	bcc.n	234a <__udivsi3+0x52>
    2346:	038b      	lsls	r3, r1, #14
    2348:	1ac0      	subs	r0, r0, r3
    234a:	4152      	adcs	r2, r2
    234c:	0b43      	lsrs	r3, r0, #13
    234e:	428b      	cmp	r3, r1
    2350:	d301      	bcc.n	2356 <__udivsi3+0x5e>
    2352:	034b      	lsls	r3, r1, #13
    2354:	1ac0      	subs	r0, r0, r3
    2356:	4152      	adcs	r2, r2
    2358:	0b03      	lsrs	r3, r0, #12
    235a:	428b      	cmp	r3, r1
    235c:	d301      	bcc.n	2362 <__udivsi3+0x6a>
    235e:	030b      	lsls	r3, r1, #12
    2360:	1ac0      	subs	r0, r0, r3
    2362:	4152      	adcs	r2, r2
    2364:	0ac3      	lsrs	r3, r0, #11
    2366:	428b      	cmp	r3, r1
    2368:	d301      	bcc.n	236e <__udivsi3+0x76>
    236a:	02cb      	lsls	r3, r1, #11
    236c:	1ac0      	subs	r0, r0, r3
    236e:	4152      	adcs	r2, r2
    2370:	0a83      	lsrs	r3, r0, #10
    2372:	428b      	cmp	r3, r1
    2374:	d301      	bcc.n	237a <__udivsi3+0x82>
    2376:	028b      	lsls	r3, r1, #10
    2378:	1ac0      	subs	r0, r0, r3
    237a:	4152      	adcs	r2, r2
    237c:	0a43      	lsrs	r3, r0, #9
    237e:	428b      	cmp	r3, r1
    2380:	d301      	bcc.n	2386 <__udivsi3+0x8e>
    2382:	024b      	lsls	r3, r1, #9
    2384:	1ac0      	subs	r0, r0, r3
    2386:	4152      	adcs	r2, r2
    2388:	0a03      	lsrs	r3, r0, #8
    238a:	428b      	cmp	r3, r1
    238c:	d301      	bcc.n	2392 <__udivsi3+0x9a>
    238e:	020b      	lsls	r3, r1, #8
    2390:	1ac0      	subs	r0, r0, r3
    2392:	4152      	adcs	r2, r2
    2394:	d2cd      	bcs.n	2332 <__udivsi3+0x3a>
    2396:	09c3      	lsrs	r3, r0, #7
    2398:	428b      	cmp	r3, r1
    239a:	d301      	bcc.n	23a0 <__udivsi3+0xa8>
    239c:	01cb      	lsls	r3, r1, #7
    239e:	1ac0      	subs	r0, r0, r3
    23a0:	4152      	adcs	r2, r2
    23a2:	0983      	lsrs	r3, r0, #6
    23a4:	428b      	cmp	r3, r1
    23a6:	d301      	bcc.n	23ac <__udivsi3+0xb4>
    23a8:	018b      	lsls	r3, r1, #6
    23aa:	1ac0      	subs	r0, r0, r3
    23ac:	4152      	adcs	r2, r2
    23ae:	0943      	lsrs	r3, r0, #5
    23b0:	428b      	cmp	r3, r1
    23b2:	d301      	bcc.n	23b8 <__udivsi3+0xc0>
    23b4:	014b      	lsls	r3, r1, #5
    23b6:	1ac0      	subs	r0, r0, r3
    23b8:	4152      	adcs	r2, r2
    23ba:	0903      	lsrs	r3, r0, #4
    23bc:	428b      	cmp	r3, r1
    23be:	d301      	bcc.n	23c4 <__udivsi3+0xcc>
    23c0:	010b      	lsls	r3, r1, #4
    23c2:	1ac0      	subs	r0, r0, r3
    23c4:	4152      	adcs	r2, r2
    23c6:	08c3      	lsrs	r3, r0, #3
    23c8:	428b      	cmp	r3, r1
    23ca:	d301      	bcc.n	23d0 <__udivsi3+0xd8>
    23cc:	00cb      	lsls	r3, r1, #3
    23ce:	1ac0      	subs	r0, r0, r3
    23d0:	4152      	adcs	r2, r2
    23d2:	0883      	lsrs	r3, r0, #2
    23d4:	428b      	cmp	r3, r1
    23d6:	d301      	bcc.n	23dc <__udivsi3+0xe4>
    23d8:	008b      	lsls	r3, r1, #2
    23da:	1ac0      	subs	r0, r0, r3
    23dc:	4152      	adcs	r2, r2
    23de:	0843      	lsrs	r3, r0, #1
    23e0:	428b      	cmp	r3, r1
    23e2:	d301      	bcc.n	23e8 <__udivsi3+0xf0>
    23e4:	004b      	lsls	r3, r1, #1
    23e6:	1ac0      	subs	r0, r0, r3
    23e8:	4152      	adcs	r2, r2
    23ea:	1a41      	subs	r1, r0, r1
    23ec:	d200      	bcs.n	23f0 <__udivsi3+0xf8>
    23ee:	4601      	mov	r1, r0
    23f0:	4152      	adcs	r2, r2
    23f2:	4610      	mov	r0, r2
    23f4:	4770      	bx	lr
    23f6:	e7ff      	b.n	23f8 <__udivsi3+0x100>
    23f8:	b501      	push	{r0, lr}
    23fa:	2000      	movs	r0, #0
    23fc:	f000 f806 	bl	240c <__aeabi_idiv0>
    2400:	bd02      	pop	{r1, pc}
    2402:	46c0      	nop			; (mov r8, r8)

00002404 <__aeabi_uidivmod>:
    2404:	2900      	cmp	r1, #0
    2406:	d0f7      	beq.n	23f8 <__udivsi3+0x100>
    2408:	e776      	b.n	22f8 <__udivsi3>
    240a:	4770      	bx	lr

0000240c <__aeabi_idiv0>:
    240c:	4770      	bx	lr
    240e:	46c0      	nop			; (mov r8, r8)

00002410 <__aeabi_lmul>:
    2410:	b5f0      	push	{r4, r5, r6, r7, lr}
    2412:	0415      	lsls	r5, r2, #16
    2414:	0c2d      	lsrs	r5, r5, #16
    2416:	000f      	movs	r7, r1
    2418:	0001      	movs	r1, r0
    241a:	002e      	movs	r6, r5
    241c:	46c6      	mov	lr, r8
    241e:	4684      	mov	ip, r0
    2420:	0400      	lsls	r0, r0, #16
    2422:	0c14      	lsrs	r4, r2, #16
    2424:	0c00      	lsrs	r0, r0, #16
    2426:	0c09      	lsrs	r1, r1, #16
    2428:	4346      	muls	r6, r0
    242a:	434d      	muls	r5, r1
    242c:	4360      	muls	r0, r4
    242e:	4361      	muls	r1, r4
    2430:	1940      	adds	r0, r0, r5
    2432:	0c34      	lsrs	r4, r6, #16
    2434:	1824      	adds	r4, r4, r0
    2436:	b500      	push	{lr}
    2438:	42a5      	cmp	r5, r4
    243a:	d903      	bls.n	2444 <__aeabi_lmul+0x34>
    243c:	2080      	movs	r0, #128	; 0x80
    243e:	0240      	lsls	r0, r0, #9
    2440:	4680      	mov	r8, r0
    2442:	4441      	add	r1, r8
    2444:	0c25      	lsrs	r5, r4, #16
    2446:	186d      	adds	r5, r5, r1
    2448:	4661      	mov	r1, ip
    244a:	4359      	muls	r1, r3
    244c:	437a      	muls	r2, r7
    244e:	0430      	lsls	r0, r6, #16
    2450:	1949      	adds	r1, r1, r5
    2452:	0424      	lsls	r4, r4, #16
    2454:	0c00      	lsrs	r0, r0, #16
    2456:	1820      	adds	r0, r4, r0
    2458:	1889      	adds	r1, r1, r2
    245a:	bc04      	pop	{r2}
    245c:	4690      	mov	r8, r2
    245e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002460 <atoi>:
    2460:	b510      	push	{r4, lr}
    2462:	220a      	movs	r2, #10
    2464:	2100      	movs	r1, #0
    2466:	f000 fa95 	bl	2994 <strtol>
    246a:	bd10      	pop	{r4, pc}

0000246c <__cxa_atexit>:
    246c:	b510      	push	{r4, lr}
    246e:	0004      	movs	r4, r0
    2470:	4804      	ldr	r0, [pc, #16]	; (2484 <__cxa_atexit+0x18>)
    2472:	0013      	movs	r3, r2
    2474:	2800      	cmp	r0, #0
    2476:	d004      	beq.n	2482 <__cxa_atexit+0x16>
    2478:	000a      	movs	r2, r1
    247a:	2002      	movs	r0, #2
    247c:	0021      	movs	r1, r4
    247e:	e000      	b.n	2482 <__cxa_atexit+0x16>
    2480:	bf00      	nop
    2482:	bd10      	pop	{r4, pc}
    2484:	00000000 	.word	0x00000000

00002488 <__libc_init_array>:
    2488:	b570      	push	{r4, r5, r6, lr}
    248a:	2600      	movs	r6, #0
    248c:	4d0c      	ldr	r5, [pc, #48]	; (24c0 <__libc_init_array+0x38>)
    248e:	4c0d      	ldr	r4, [pc, #52]	; (24c4 <__libc_init_array+0x3c>)
    2490:	1b64      	subs	r4, r4, r5
    2492:	10a4      	asrs	r4, r4, #2
    2494:	42a6      	cmp	r6, r4
    2496:	d109      	bne.n	24ac <__libc_init_array+0x24>
    2498:	2600      	movs	r6, #0
    249a:	f001 f871 	bl	3580 <_init>
    249e:	4d0a      	ldr	r5, [pc, #40]	; (24c8 <__libc_init_array+0x40>)
    24a0:	4c0a      	ldr	r4, [pc, #40]	; (24cc <__libc_init_array+0x44>)
    24a2:	1b64      	subs	r4, r4, r5
    24a4:	10a4      	asrs	r4, r4, #2
    24a6:	42a6      	cmp	r6, r4
    24a8:	d105      	bne.n	24b6 <__libc_init_array+0x2e>
    24aa:	bd70      	pop	{r4, r5, r6, pc}
    24ac:	00b3      	lsls	r3, r6, #2
    24ae:	58eb      	ldr	r3, [r5, r3]
    24b0:	4798      	blx	r3
    24b2:	3601      	adds	r6, #1
    24b4:	e7ee      	b.n	2494 <__libc_init_array+0xc>
    24b6:	00b3      	lsls	r3, r6, #2
    24b8:	58eb      	ldr	r3, [r5, r3]
    24ba:	4798      	blx	r3
    24bc:	3601      	adds	r6, #1
    24be:	e7f2      	b.n	24a6 <__libc_init_array+0x1e>
    24c0:	0000358c 	.word	0x0000358c
    24c4:	0000358c 	.word	0x0000358c
    24c8:	0000358c 	.word	0x0000358c
    24cc:	0000359c 	.word	0x0000359c

000024d0 <malloc>:
    24d0:	b510      	push	{r4, lr}
    24d2:	4b03      	ldr	r3, [pc, #12]	; (24e0 <malloc+0x10>)
    24d4:	0001      	movs	r1, r0
    24d6:	6818      	ldr	r0, [r3, #0]
    24d8:	f000 f862 	bl	25a0 <_malloc_r>
    24dc:	bd10      	pop	{r4, pc}
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	20000014 	.word	0x20000014

000024e4 <free>:
    24e4:	b510      	push	{r4, lr}
    24e6:	4b03      	ldr	r3, [pc, #12]	; (24f4 <free+0x10>)
    24e8:	0001      	movs	r1, r0
    24ea:	6818      	ldr	r0, [r3, #0]
    24ec:	f000 f80e 	bl	250c <_free_r>
    24f0:	bd10      	pop	{r4, pc}
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	20000014 	.word	0x20000014

000024f8 <memcpy>:
    24f8:	2300      	movs	r3, #0
    24fa:	b510      	push	{r4, lr}
    24fc:	429a      	cmp	r2, r3
    24fe:	d100      	bne.n	2502 <memcpy+0xa>
    2500:	bd10      	pop	{r4, pc}
    2502:	5ccc      	ldrb	r4, [r1, r3]
    2504:	54c4      	strb	r4, [r0, r3]
    2506:	3301      	adds	r3, #1
    2508:	e7f8      	b.n	24fc <memcpy+0x4>
    250a:	Address 0x0000250a is out of bounds.


0000250c <_free_r>:
    250c:	b570      	push	{r4, r5, r6, lr}
    250e:	0005      	movs	r5, r0
    2510:	2900      	cmp	r1, #0
    2512:	d010      	beq.n	2536 <_free_r+0x2a>
    2514:	1f0c      	subs	r4, r1, #4
    2516:	6823      	ldr	r3, [r4, #0]
    2518:	2b00      	cmp	r3, #0
    251a:	da00      	bge.n	251e <_free_r+0x12>
    251c:	18e4      	adds	r4, r4, r3
    251e:	0028      	movs	r0, r5
    2520:	f000 fa7e 	bl	2a20 <__malloc_lock>
    2524:	4a1d      	ldr	r2, [pc, #116]	; (259c <_free_r+0x90>)
    2526:	6813      	ldr	r3, [r2, #0]
    2528:	2b00      	cmp	r3, #0
    252a:	d105      	bne.n	2538 <_free_r+0x2c>
    252c:	6063      	str	r3, [r4, #4]
    252e:	6014      	str	r4, [r2, #0]
    2530:	0028      	movs	r0, r5
    2532:	f000 fa7d 	bl	2a30 <__malloc_unlock>
    2536:	bd70      	pop	{r4, r5, r6, pc}
    2538:	42a3      	cmp	r3, r4
    253a:	d908      	bls.n	254e <_free_r+0x42>
    253c:	6821      	ldr	r1, [r4, #0]
    253e:	1860      	adds	r0, r4, r1
    2540:	4283      	cmp	r3, r0
    2542:	d1f3      	bne.n	252c <_free_r+0x20>
    2544:	6818      	ldr	r0, [r3, #0]
    2546:	685b      	ldr	r3, [r3, #4]
    2548:	1841      	adds	r1, r0, r1
    254a:	6021      	str	r1, [r4, #0]
    254c:	e7ee      	b.n	252c <_free_r+0x20>
    254e:	001a      	movs	r2, r3
    2550:	685b      	ldr	r3, [r3, #4]
    2552:	2b00      	cmp	r3, #0
    2554:	d001      	beq.n	255a <_free_r+0x4e>
    2556:	42a3      	cmp	r3, r4
    2558:	d9f9      	bls.n	254e <_free_r+0x42>
    255a:	6811      	ldr	r1, [r2, #0]
    255c:	1850      	adds	r0, r2, r1
    255e:	42a0      	cmp	r0, r4
    2560:	d10b      	bne.n	257a <_free_r+0x6e>
    2562:	6820      	ldr	r0, [r4, #0]
    2564:	1809      	adds	r1, r1, r0
    2566:	1850      	adds	r0, r2, r1
    2568:	6011      	str	r1, [r2, #0]
    256a:	4283      	cmp	r3, r0
    256c:	d1e0      	bne.n	2530 <_free_r+0x24>
    256e:	6818      	ldr	r0, [r3, #0]
    2570:	685b      	ldr	r3, [r3, #4]
    2572:	1841      	adds	r1, r0, r1
    2574:	6011      	str	r1, [r2, #0]
    2576:	6053      	str	r3, [r2, #4]
    2578:	e7da      	b.n	2530 <_free_r+0x24>
    257a:	42a0      	cmp	r0, r4
    257c:	d902      	bls.n	2584 <_free_r+0x78>
    257e:	230c      	movs	r3, #12
    2580:	602b      	str	r3, [r5, #0]
    2582:	e7d5      	b.n	2530 <_free_r+0x24>
    2584:	6821      	ldr	r1, [r4, #0]
    2586:	1860      	adds	r0, r4, r1
    2588:	4283      	cmp	r3, r0
    258a:	d103      	bne.n	2594 <_free_r+0x88>
    258c:	6818      	ldr	r0, [r3, #0]
    258e:	685b      	ldr	r3, [r3, #4]
    2590:	1841      	adds	r1, r0, r1
    2592:	6021      	str	r1, [r4, #0]
    2594:	6063      	str	r3, [r4, #4]
    2596:	6054      	str	r4, [r2, #4]
    2598:	e7ca      	b.n	2530 <_free_r+0x24>
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	2000050c 	.word	0x2000050c

000025a0 <_malloc_r>:
    25a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25a2:	2303      	movs	r3, #3
    25a4:	1ccd      	adds	r5, r1, #3
    25a6:	439d      	bics	r5, r3
    25a8:	3508      	adds	r5, #8
    25aa:	0006      	movs	r6, r0
    25ac:	2d0c      	cmp	r5, #12
    25ae:	d21f      	bcs.n	25f0 <_malloc_r+0x50>
    25b0:	250c      	movs	r5, #12
    25b2:	42a9      	cmp	r1, r5
    25b4:	d81e      	bhi.n	25f4 <_malloc_r+0x54>
    25b6:	0030      	movs	r0, r6
    25b8:	f000 fa32 	bl	2a20 <__malloc_lock>
    25bc:	4925      	ldr	r1, [pc, #148]	; (2654 <_malloc_r+0xb4>)
    25be:	680a      	ldr	r2, [r1, #0]
    25c0:	0014      	movs	r4, r2
    25c2:	2c00      	cmp	r4, #0
    25c4:	d11a      	bne.n	25fc <_malloc_r+0x5c>
    25c6:	4f24      	ldr	r7, [pc, #144]	; (2658 <_malloc_r+0xb8>)
    25c8:	683b      	ldr	r3, [r7, #0]
    25ca:	2b00      	cmp	r3, #0
    25cc:	d104      	bne.n	25d8 <_malloc_r+0x38>
    25ce:	0021      	movs	r1, r4
    25d0:	0030      	movs	r0, r6
    25d2:	f000 f84d 	bl	2670 <_sbrk_r>
    25d6:	6038      	str	r0, [r7, #0]
    25d8:	0029      	movs	r1, r5
    25da:	0030      	movs	r0, r6
    25dc:	f000 f848 	bl	2670 <_sbrk_r>
    25e0:	1c43      	adds	r3, r0, #1
    25e2:	d12b      	bne.n	263c <_malloc_r+0x9c>
    25e4:	230c      	movs	r3, #12
    25e6:	0030      	movs	r0, r6
    25e8:	6033      	str	r3, [r6, #0]
    25ea:	f000 fa21 	bl	2a30 <__malloc_unlock>
    25ee:	e003      	b.n	25f8 <_malloc_r+0x58>
    25f0:	2d00      	cmp	r5, #0
    25f2:	dade      	bge.n	25b2 <_malloc_r+0x12>
    25f4:	230c      	movs	r3, #12
    25f6:	6033      	str	r3, [r6, #0]
    25f8:	2000      	movs	r0, #0
    25fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25fc:	6823      	ldr	r3, [r4, #0]
    25fe:	1b5b      	subs	r3, r3, r5
    2600:	d419      	bmi.n	2636 <_malloc_r+0x96>
    2602:	2b0b      	cmp	r3, #11
    2604:	d903      	bls.n	260e <_malloc_r+0x6e>
    2606:	6023      	str	r3, [r4, #0]
    2608:	18e4      	adds	r4, r4, r3
    260a:	6025      	str	r5, [r4, #0]
    260c:	e003      	b.n	2616 <_malloc_r+0x76>
    260e:	6863      	ldr	r3, [r4, #4]
    2610:	42a2      	cmp	r2, r4
    2612:	d10e      	bne.n	2632 <_malloc_r+0x92>
    2614:	600b      	str	r3, [r1, #0]
    2616:	0030      	movs	r0, r6
    2618:	f000 fa0a 	bl	2a30 <__malloc_unlock>
    261c:	0020      	movs	r0, r4
    261e:	2207      	movs	r2, #7
    2620:	300b      	adds	r0, #11
    2622:	1d23      	adds	r3, r4, #4
    2624:	4390      	bics	r0, r2
    2626:	1ac2      	subs	r2, r0, r3
    2628:	4298      	cmp	r0, r3
    262a:	d0e6      	beq.n	25fa <_malloc_r+0x5a>
    262c:	1a1b      	subs	r3, r3, r0
    262e:	50a3      	str	r3, [r4, r2]
    2630:	e7e3      	b.n	25fa <_malloc_r+0x5a>
    2632:	6053      	str	r3, [r2, #4]
    2634:	e7ef      	b.n	2616 <_malloc_r+0x76>
    2636:	0022      	movs	r2, r4
    2638:	6864      	ldr	r4, [r4, #4]
    263a:	e7c2      	b.n	25c2 <_malloc_r+0x22>
    263c:	2303      	movs	r3, #3
    263e:	1cc4      	adds	r4, r0, #3
    2640:	439c      	bics	r4, r3
    2642:	42a0      	cmp	r0, r4
    2644:	d0e1      	beq.n	260a <_malloc_r+0x6a>
    2646:	1a21      	subs	r1, r4, r0
    2648:	0030      	movs	r0, r6
    264a:	f000 f811 	bl	2670 <_sbrk_r>
    264e:	1c43      	adds	r3, r0, #1
    2650:	d1db      	bne.n	260a <_malloc_r+0x6a>
    2652:	e7c7      	b.n	25e4 <_malloc_r+0x44>
    2654:	2000050c 	.word	0x2000050c
    2658:	20000510 	.word	0x20000510

0000265c <realloc>:
    265c:	b510      	push	{r4, lr}
    265e:	4b03      	ldr	r3, [pc, #12]	; (266c <realloc+0x10>)
    2660:	000a      	movs	r2, r1
    2662:	0001      	movs	r1, r0
    2664:	6818      	ldr	r0, [r3, #0]
    2666:	f000 f9eb 	bl	2a40 <_realloc_r>
    266a:	bd10      	pop	{r4, pc}
    266c:	20000014 	.word	0x20000014

00002670 <_sbrk_r>:
    2670:	2300      	movs	r3, #0
    2672:	b570      	push	{r4, r5, r6, lr}
    2674:	4d06      	ldr	r5, [pc, #24]	; (2690 <_sbrk_r+0x20>)
    2676:	0004      	movs	r4, r0
    2678:	0008      	movs	r0, r1
    267a:	602b      	str	r3, [r5, #0]
    267c:	f7ff fe22 	bl	22c4 <_sbrk>
    2680:	1c43      	adds	r3, r0, #1
    2682:	d103      	bne.n	268c <_sbrk_r+0x1c>
    2684:	682b      	ldr	r3, [r5, #0]
    2686:	2b00      	cmp	r3, #0
    2688:	d000      	beq.n	268c <_sbrk_r+0x1c>
    268a:	6023      	str	r3, [r4, #0]
    268c:	bd70      	pop	{r4, r5, r6, pc}
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	20000520 	.word	0x20000520

00002694 <sniprintf>:
    2694:	b40c      	push	{r2, r3}
    2696:	b530      	push	{r4, r5, lr}
    2698:	4b17      	ldr	r3, [pc, #92]	; (26f8 <sniprintf+0x64>)
    269a:	000c      	movs	r4, r1
    269c:	681d      	ldr	r5, [r3, #0]
    269e:	b09d      	sub	sp, #116	; 0x74
    26a0:	2900      	cmp	r1, #0
    26a2:	da08      	bge.n	26b6 <sniprintf+0x22>
    26a4:	238b      	movs	r3, #139	; 0x8b
    26a6:	2001      	movs	r0, #1
    26a8:	602b      	str	r3, [r5, #0]
    26aa:	4240      	negs	r0, r0
    26ac:	b01d      	add	sp, #116	; 0x74
    26ae:	bc30      	pop	{r4, r5}
    26b0:	bc08      	pop	{r3}
    26b2:	b002      	add	sp, #8
    26b4:	4718      	bx	r3
    26b6:	2382      	movs	r3, #130	; 0x82
    26b8:	466a      	mov	r2, sp
    26ba:	009b      	lsls	r3, r3, #2
    26bc:	8293      	strh	r3, [r2, #20]
    26be:	2300      	movs	r3, #0
    26c0:	9002      	str	r0, [sp, #8]
    26c2:	9006      	str	r0, [sp, #24]
    26c4:	4299      	cmp	r1, r3
    26c6:	d000      	beq.n	26ca <sniprintf+0x36>
    26c8:	1e4b      	subs	r3, r1, #1
    26ca:	9304      	str	r3, [sp, #16]
    26cc:	9307      	str	r3, [sp, #28]
    26ce:	2301      	movs	r3, #1
    26d0:	466a      	mov	r2, sp
    26d2:	425b      	negs	r3, r3
    26d4:	82d3      	strh	r3, [r2, #22]
    26d6:	0028      	movs	r0, r5
    26d8:	ab21      	add	r3, sp, #132	; 0x84
    26da:	9a20      	ldr	r2, [sp, #128]	; 0x80
    26dc:	a902      	add	r1, sp, #8
    26de:	9301      	str	r3, [sp, #4]
    26e0:	f000 fa36 	bl	2b50 <_svfiprintf_r>
    26e4:	1c43      	adds	r3, r0, #1
    26e6:	da01      	bge.n	26ec <sniprintf+0x58>
    26e8:	238b      	movs	r3, #139	; 0x8b
    26ea:	602b      	str	r3, [r5, #0]
    26ec:	2c00      	cmp	r4, #0
    26ee:	d0dd      	beq.n	26ac <sniprintf+0x18>
    26f0:	2300      	movs	r3, #0
    26f2:	9a02      	ldr	r2, [sp, #8]
    26f4:	7013      	strb	r3, [r2, #0]
    26f6:	e7d9      	b.n	26ac <sniprintf+0x18>
    26f8:	20000014 	.word	0x20000014

000026fc <strcasecmp>:
    26fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26fe:	0005      	movs	r5, r0
    2700:	2400      	movs	r4, #0
    2702:	2703      	movs	r7, #3
    2704:	4e09      	ldr	r6, [pc, #36]	; (272c <strcasecmp+0x30>)
    2706:	5d2a      	ldrb	r2, [r5, r4]
    2708:	5cb3      	ldrb	r3, [r6, r2]
    270a:	403b      	ands	r3, r7
    270c:	2b01      	cmp	r3, #1
    270e:	d100      	bne.n	2712 <strcasecmp+0x16>
    2710:	3220      	adds	r2, #32
    2712:	5d0b      	ldrb	r3, [r1, r4]
    2714:	5cf0      	ldrb	r0, [r6, r3]
    2716:	4038      	ands	r0, r7
    2718:	2801      	cmp	r0, #1
    271a:	d100      	bne.n	271e <strcasecmp+0x22>
    271c:	3320      	adds	r3, #32
    271e:	1ad0      	subs	r0, r2, r3
    2720:	429a      	cmp	r2, r3
    2722:	d102      	bne.n	272a <strcasecmp+0x2e>
    2724:	3401      	adds	r4, #1
    2726:	2b00      	cmp	r3, #0
    2728:	d1ed      	bne.n	2706 <strcasecmp+0xa>
    272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    272c:	000033ec 	.word	0x000033ec

00002730 <strchr>:
    2730:	b2c9      	uxtb	r1, r1
    2732:	7803      	ldrb	r3, [r0, #0]
    2734:	2b00      	cmp	r3, #0
    2736:	d004      	beq.n	2742 <strchr+0x12>
    2738:	428b      	cmp	r3, r1
    273a:	d100      	bne.n	273e <strchr+0xe>
    273c:	4770      	bx	lr
    273e:	3001      	adds	r0, #1
    2740:	e7f7      	b.n	2732 <strchr+0x2>
    2742:	424b      	negs	r3, r1
    2744:	4159      	adcs	r1, r3
    2746:	4249      	negs	r1, r1
    2748:	4008      	ands	r0, r1
    274a:	e7f7      	b.n	273c <strchr+0xc>

0000274c <strcpy>:
    274c:	0003      	movs	r3, r0
    274e:	780a      	ldrb	r2, [r1, #0]
    2750:	3101      	adds	r1, #1
    2752:	701a      	strb	r2, [r3, #0]
    2754:	3301      	adds	r3, #1
    2756:	2a00      	cmp	r2, #0
    2758:	d1f9      	bne.n	274e <strcpy+0x2>
    275a:	4770      	bx	lr

0000275c <strlen>:
    275c:	2300      	movs	r3, #0
    275e:	5cc2      	ldrb	r2, [r0, r3]
    2760:	3301      	adds	r3, #1
    2762:	2a00      	cmp	r2, #0
    2764:	d1fb      	bne.n	275e <strlen+0x2>
    2766:	1e58      	subs	r0, r3, #1
    2768:	4770      	bx	lr

0000276a <strncmp>:
    276a:	b530      	push	{r4, r5, lr}
    276c:	0005      	movs	r5, r0
    276e:	1e10      	subs	r0, r2, #0
    2770:	d00b      	beq.n	278a <strncmp+0x20>
    2772:	2400      	movs	r4, #0
    2774:	3a01      	subs	r2, #1
    2776:	5d2b      	ldrb	r3, [r5, r4]
    2778:	5d08      	ldrb	r0, [r1, r4]
    277a:	4283      	cmp	r3, r0
    277c:	d104      	bne.n	2788 <strncmp+0x1e>
    277e:	4294      	cmp	r4, r2
    2780:	d002      	beq.n	2788 <strncmp+0x1e>
    2782:	3401      	adds	r4, #1
    2784:	2b00      	cmp	r3, #0
    2786:	d1f6      	bne.n	2776 <strncmp+0xc>
    2788:	1a18      	subs	r0, r3, r0
    278a:	bd30      	pop	{r4, r5, pc}

0000278c <strncpy>:
    278c:	0003      	movs	r3, r0
    278e:	b530      	push	{r4, r5, lr}
    2790:	001d      	movs	r5, r3
    2792:	2a00      	cmp	r2, #0
    2794:	d006      	beq.n	27a4 <strncpy+0x18>
    2796:	780c      	ldrb	r4, [r1, #0]
    2798:	3a01      	subs	r2, #1
    279a:	3301      	adds	r3, #1
    279c:	702c      	strb	r4, [r5, #0]
    279e:	3101      	adds	r1, #1
    27a0:	2c00      	cmp	r4, #0
    27a2:	d1f5      	bne.n	2790 <strncpy+0x4>
    27a4:	2100      	movs	r1, #0
    27a6:	189a      	adds	r2, r3, r2
    27a8:	4293      	cmp	r3, r2
    27aa:	d100      	bne.n	27ae <strncpy+0x22>
    27ac:	bd30      	pop	{r4, r5, pc}
    27ae:	7019      	strb	r1, [r3, #0]
    27b0:	3301      	adds	r3, #1
    27b2:	e7f9      	b.n	27a8 <strncpy+0x1c>

000027b4 <strstr>:
    27b4:	780a      	ldrb	r2, [r1, #0]
    27b6:	b530      	push	{r4, r5, lr}
    27b8:	2a00      	cmp	r2, #0
    27ba:	d10c      	bne.n	27d6 <strstr+0x22>
    27bc:	bd30      	pop	{r4, r5, pc}
    27be:	429a      	cmp	r2, r3
    27c0:	d108      	bne.n	27d4 <strstr+0x20>
    27c2:	2301      	movs	r3, #1
    27c4:	5ccc      	ldrb	r4, [r1, r3]
    27c6:	2c00      	cmp	r4, #0
    27c8:	d0f8      	beq.n	27bc <strstr+0x8>
    27ca:	5cc5      	ldrb	r5, [r0, r3]
    27cc:	42a5      	cmp	r5, r4
    27ce:	d101      	bne.n	27d4 <strstr+0x20>
    27d0:	3301      	adds	r3, #1
    27d2:	e7f7      	b.n	27c4 <strstr+0x10>
    27d4:	3001      	adds	r0, #1
    27d6:	7803      	ldrb	r3, [r0, #0]
    27d8:	2b00      	cmp	r3, #0
    27da:	d1f0      	bne.n	27be <strstr+0xa>
    27dc:	0018      	movs	r0, r3
    27de:	e7ed      	b.n	27bc <strstr+0x8>

000027e0 <strtok>:
    27e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27e2:	4b12      	ldr	r3, [pc, #72]	; (282c <strtok+0x4c>)
    27e4:	0005      	movs	r5, r0
    27e6:	681f      	ldr	r7, [r3, #0]
    27e8:	000e      	movs	r6, r1
    27ea:	6dbc      	ldr	r4, [r7, #88]	; 0x58
    27ec:	2c00      	cmp	r4, #0
    27ee:	d116      	bne.n	281e <strtok+0x3e>
    27f0:	2050      	movs	r0, #80	; 0x50
    27f2:	f7ff fe6d 	bl	24d0 <malloc>
    27f6:	65b8      	str	r0, [r7, #88]	; 0x58
    27f8:	6004      	str	r4, [r0, #0]
    27fa:	6044      	str	r4, [r0, #4]
    27fc:	6084      	str	r4, [r0, #8]
    27fe:	60c4      	str	r4, [r0, #12]
    2800:	6104      	str	r4, [r0, #16]
    2802:	6144      	str	r4, [r0, #20]
    2804:	6184      	str	r4, [r0, #24]
    2806:	6284      	str	r4, [r0, #40]	; 0x28
    2808:	62c4      	str	r4, [r0, #44]	; 0x2c
    280a:	6304      	str	r4, [r0, #48]	; 0x30
    280c:	6344      	str	r4, [r0, #52]	; 0x34
    280e:	6384      	str	r4, [r0, #56]	; 0x38
    2810:	63c4      	str	r4, [r0, #60]	; 0x3c
    2812:	6404      	str	r4, [r0, #64]	; 0x40
    2814:	6444      	str	r4, [r0, #68]	; 0x44
    2816:	6484      	str	r4, [r0, #72]	; 0x48
    2818:	64c4      	str	r4, [r0, #76]	; 0x4c
    281a:	7704      	strb	r4, [r0, #28]
    281c:	6244      	str	r4, [r0, #36]	; 0x24
    281e:	0031      	movs	r1, r6
    2820:	0028      	movs	r0, r5
    2822:	6dba      	ldr	r2, [r7, #88]	; 0x58
    2824:	2301      	movs	r3, #1
    2826:	f000 f803 	bl	2830 <__strtok_r>
    282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    282c:	20000014 	.word	0x20000014

00002830 <__strtok_r>:
    2830:	b5f0      	push	{r4, r5, r6, r7, lr}
    2832:	2800      	cmp	r0, #0
    2834:	d102      	bne.n	283c <__strtok_r+0xc>
    2836:	6810      	ldr	r0, [r2, #0]
    2838:	2800      	cmp	r0, #0
    283a:	d013      	beq.n	2864 <__strtok_r+0x34>
    283c:	0004      	movs	r4, r0
    283e:	0020      	movs	r0, r4
    2840:	000e      	movs	r6, r1
    2842:	7805      	ldrb	r5, [r0, #0]
    2844:	3401      	adds	r4, #1
    2846:	7837      	ldrb	r7, [r6, #0]
    2848:	2f00      	cmp	r7, #0
    284a:	d104      	bne.n	2856 <__strtok_r+0x26>
    284c:	2d00      	cmp	r5, #0
    284e:	d10f      	bne.n	2870 <__strtok_r+0x40>
    2850:	0028      	movs	r0, r5
    2852:	6015      	str	r5, [r2, #0]
    2854:	e006      	b.n	2864 <__strtok_r+0x34>
    2856:	3601      	adds	r6, #1
    2858:	42bd      	cmp	r5, r7
    285a:	d1f4      	bne.n	2846 <__strtok_r+0x16>
    285c:	2b00      	cmp	r3, #0
    285e:	d1ee      	bne.n	283e <__strtok_r+0xe>
    2860:	6014      	str	r4, [r2, #0]
    2862:	7003      	strb	r3, [r0, #0]
    2864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2866:	002f      	movs	r7, r5
    2868:	e00f      	b.n	288a <__strtok_r+0x5a>
    286a:	3301      	adds	r3, #1
    286c:	2e00      	cmp	r6, #0
    286e:	d104      	bne.n	287a <__strtok_r+0x4a>
    2870:	0023      	movs	r3, r4
    2872:	3401      	adds	r4, #1
    2874:	781d      	ldrb	r5, [r3, #0]
    2876:	0027      	movs	r7, r4
    2878:	000b      	movs	r3, r1
    287a:	781e      	ldrb	r6, [r3, #0]
    287c:	42b5      	cmp	r5, r6
    287e:	d1f4      	bne.n	286a <__strtok_r+0x3a>
    2880:	2d00      	cmp	r5, #0
    2882:	d0f0      	beq.n	2866 <__strtok_r+0x36>
    2884:	2300      	movs	r3, #0
    2886:	3c01      	subs	r4, #1
    2888:	7023      	strb	r3, [r4, #0]
    288a:	6017      	str	r7, [r2, #0]
    288c:	e7ea      	b.n	2864 <__strtok_r+0x34>
    288e:	Address 0x0000288e is out of bounds.


00002890 <_strtol_l.isra.0>:
    2890:	b5f0      	push	{r4, r5, r6, r7, lr}
    2892:	001e      	movs	r6, r3
    2894:	4b3d      	ldr	r3, [pc, #244]	; (298c <_strtol_l.isra.0+0xfc>)
    2896:	b087      	sub	sp, #28
    2898:	9005      	str	r0, [sp, #20]
    289a:	9202      	str	r2, [sp, #8]
    289c:	0008      	movs	r0, r1
    289e:	469c      	mov	ip, r3
    28a0:	2208      	movs	r2, #8
    28a2:	9101      	str	r1, [sp, #4]
    28a4:	0003      	movs	r3, r0
    28a6:	4661      	mov	r1, ip
    28a8:	781c      	ldrb	r4, [r3, #0]
    28aa:	1c45      	adds	r5, r0, #1
    28ac:	5d09      	ldrb	r1, [r1, r4]
    28ae:	0028      	movs	r0, r5
    28b0:	000f      	movs	r7, r1
    28b2:	4017      	ands	r7, r2
    28b4:	4211      	tst	r1, r2
    28b6:	d1f5      	bne.n	28a4 <_strtol_l.isra.0+0x14>
    28b8:	2c2d      	cmp	r4, #45	; 0x2d
    28ba:	d133      	bne.n	2924 <_strtol_l.isra.0+0x94>
    28bc:	2701      	movs	r7, #1
    28be:	782c      	ldrb	r4, [r5, #0]
    28c0:	1c9d      	adds	r5, r3, #2
    28c2:	2e00      	cmp	r6, #0
    28c4:	d05d      	beq.n	2982 <_strtol_l.isra.0+0xf2>
    28c6:	2e10      	cmp	r6, #16
    28c8:	d109      	bne.n	28de <_strtol_l.isra.0+0x4e>
    28ca:	2c30      	cmp	r4, #48	; 0x30
    28cc:	d107      	bne.n	28de <_strtol_l.isra.0+0x4e>
    28ce:	2220      	movs	r2, #32
    28d0:	782b      	ldrb	r3, [r5, #0]
    28d2:	4393      	bics	r3, r2
    28d4:	2b58      	cmp	r3, #88	; 0x58
    28d6:	d14f      	bne.n	2978 <_strtol_l.isra.0+0xe8>
    28d8:	2610      	movs	r6, #16
    28da:	786c      	ldrb	r4, [r5, #1]
    28dc:	3502      	adds	r5, #2
    28de:	4b2c      	ldr	r3, [pc, #176]	; (2990 <_strtol_l.isra.0+0x100>)
    28e0:	0031      	movs	r1, r6
    28e2:	18fb      	adds	r3, r7, r3
    28e4:	0018      	movs	r0, r3
    28e6:	9303      	str	r3, [sp, #12]
    28e8:	f7ff fd8c 	bl	2404 <__aeabi_uidivmod>
    28ec:	2300      	movs	r3, #0
    28ee:	2201      	movs	r2, #1
    28f0:	4684      	mov	ip, r0
    28f2:	0018      	movs	r0, r3
    28f4:	9104      	str	r1, [sp, #16]
    28f6:	4252      	negs	r2, r2
    28f8:	0021      	movs	r1, r4
    28fa:	3930      	subs	r1, #48	; 0x30
    28fc:	2909      	cmp	r1, #9
    28fe:	d816      	bhi.n	292e <_strtol_l.isra.0+0x9e>
    2900:	000c      	movs	r4, r1
    2902:	42a6      	cmp	r6, r4
    2904:	dd1f      	ble.n	2946 <_strtol_l.isra.0+0xb6>
    2906:	1c59      	adds	r1, r3, #1
    2908:	d009      	beq.n	291e <_strtol_l.isra.0+0x8e>
    290a:	0013      	movs	r3, r2
    290c:	4584      	cmp	ip, r0
    290e:	d306      	bcc.n	291e <_strtol_l.isra.0+0x8e>
    2910:	d102      	bne.n	2918 <_strtol_l.isra.0+0x88>
    2912:	9904      	ldr	r1, [sp, #16]
    2914:	42a1      	cmp	r1, r4
    2916:	db02      	blt.n	291e <_strtol_l.isra.0+0x8e>
    2918:	2301      	movs	r3, #1
    291a:	4370      	muls	r0, r6
    291c:	1820      	adds	r0, r4, r0
    291e:	782c      	ldrb	r4, [r5, #0]
    2920:	3501      	adds	r5, #1
    2922:	e7e9      	b.n	28f8 <_strtol_l.isra.0+0x68>
    2924:	2c2b      	cmp	r4, #43	; 0x2b
    2926:	d1cc      	bne.n	28c2 <_strtol_l.isra.0+0x32>
    2928:	782c      	ldrb	r4, [r5, #0]
    292a:	1c9d      	adds	r5, r3, #2
    292c:	e7c9      	b.n	28c2 <_strtol_l.isra.0+0x32>
    292e:	0021      	movs	r1, r4
    2930:	3941      	subs	r1, #65	; 0x41
    2932:	2919      	cmp	r1, #25
    2934:	d801      	bhi.n	293a <_strtol_l.isra.0+0xaa>
    2936:	3c37      	subs	r4, #55	; 0x37
    2938:	e7e3      	b.n	2902 <_strtol_l.isra.0+0x72>
    293a:	0021      	movs	r1, r4
    293c:	3961      	subs	r1, #97	; 0x61
    293e:	2919      	cmp	r1, #25
    2940:	d801      	bhi.n	2946 <_strtol_l.isra.0+0xb6>
    2942:	3c57      	subs	r4, #87	; 0x57
    2944:	e7dd      	b.n	2902 <_strtol_l.isra.0+0x72>
    2946:	1c5a      	adds	r2, r3, #1
    2948:	d108      	bne.n	295c <_strtol_l.isra.0+0xcc>
    294a:	9a05      	ldr	r2, [sp, #20]
    294c:	3323      	adds	r3, #35	; 0x23
    294e:	6013      	str	r3, [r2, #0]
    2950:	9b02      	ldr	r3, [sp, #8]
    2952:	9803      	ldr	r0, [sp, #12]
    2954:	2b00      	cmp	r3, #0
    2956:	d109      	bne.n	296c <_strtol_l.isra.0+0xdc>
    2958:	b007      	add	sp, #28
    295a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    295c:	2f00      	cmp	r7, #0
    295e:	d000      	beq.n	2962 <_strtol_l.isra.0+0xd2>
    2960:	4240      	negs	r0, r0
    2962:	9a02      	ldr	r2, [sp, #8]
    2964:	2a00      	cmp	r2, #0
    2966:	d0f7      	beq.n	2958 <_strtol_l.isra.0+0xc8>
    2968:	2b00      	cmp	r3, #0
    296a:	d001      	beq.n	2970 <_strtol_l.isra.0+0xe0>
    296c:	1e6b      	subs	r3, r5, #1
    296e:	9301      	str	r3, [sp, #4]
    2970:	9b02      	ldr	r3, [sp, #8]
    2972:	9a01      	ldr	r2, [sp, #4]
    2974:	601a      	str	r2, [r3, #0]
    2976:	e7ef      	b.n	2958 <_strtol_l.isra.0+0xc8>
    2978:	2430      	movs	r4, #48	; 0x30
    297a:	2e00      	cmp	r6, #0
    297c:	d1af      	bne.n	28de <_strtol_l.isra.0+0x4e>
    297e:	3608      	adds	r6, #8
    2980:	e7ad      	b.n	28de <_strtol_l.isra.0+0x4e>
    2982:	2c30      	cmp	r4, #48	; 0x30
    2984:	d0a3      	beq.n	28ce <_strtol_l.isra.0+0x3e>
    2986:	260a      	movs	r6, #10
    2988:	e7a9      	b.n	28de <_strtol_l.isra.0+0x4e>
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	000033ec 	.word	0x000033ec
    2990:	7fffffff 	.word	0x7fffffff

00002994 <strtol>:
    2994:	b510      	push	{r4, lr}
    2996:	0013      	movs	r3, r2
    2998:	000a      	movs	r2, r1
    299a:	0001      	movs	r1, r0
    299c:	4802      	ldr	r0, [pc, #8]	; (29a8 <strtol+0x14>)
    299e:	6800      	ldr	r0, [r0, #0]
    29a0:	f7ff ff76 	bl	2890 <_strtol_l.isra.0>
    29a4:	bd10      	pop	{r4, pc}
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	20000014 	.word	0x20000014

000029ac <_vsniprintf_r>:
    29ac:	b530      	push	{r4, r5, lr}
    29ae:	0014      	movs	r4, r2
    29b0:	0005      	movs	r5, r0
    29b2:	001a      	movs	r2, r3
    29b4:	b09b      	sub	sp, #108	; 0x6c
    29b6:	2c00      	cmp	r4, #0
    29b8:	da05      	bge.n	29c6 <_vsniprintf_r+0x1a>
    29ba:	238b      	movs	r3, #139	; 0x8b
    29bc:	6003      	str	r3, [r0, #0]
    29be:	2001      	movs	r0, #1
    29c0:	4240      	negs	r0, r0
    29c2:	b01b      	add	sp, #108	; 0x6c
    29c4:	bd30      	pop	{r4, r5, pc}
    29c6:	2382      	movs	r3, #130	; 0x82
    29c8:	4668      	mov	r0, sp
    29ca:	009b      	lsls	r3, r3, #2
    29cc:	8183      	strh	r3, [r0, #12]
    29ce:	2300      	movs	r3, #0
    29d0:	9100      	str	r1, [sp, #0]
    29d2:	9104      	str	r1, [sp, #16]
    29d4:	429c      	cmp	r4, r3
    29d6:	d000      	beq.n	29da <_vsniprintf_r+0x2e>
    29d8:	1e63      	subs	r3, r4, #1
    29da:	9302      	str	r3, [sp, #8]
    29dc:	9305      	str	r3, [sp, #20]
    29de:	2301      	movs	r3, #1
    29e0:	4669      	mov	r1, sp
    29e2:	425b      	negs	r3, r3
    29e4:	81cb      	strh	r3, [r1, #14]
    29e6:	0028      	movs	r0, r5
    29e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    29ea:	f000 f8b1 	bl	2b50 <_svfiprintf_r>
    29ee:	1c43      	adds	r3, r0, #1
    29f0:	da01      	bge.n	29f6 <_vsniprintf_r+0x4a>
    29f2:	238b      	movs	r3, #139	; 0x8b
    29f4:	602b      	str	r3, [r5, #0]
    29f6:	2c00      	cmp	r4, #0
    29f8:	d0e3      	beq.n	29c2 <_vsniprintf_r+0x16>
    29fa:	2300      	movs	r3, #0
    29fc:	9a00      	ldr	r2, [sp, #0]
    29fe:	7013      	strb	r3, [r2, #0]
    2a00:	e7df      	b.n	29c2 <_vsniprintf_r+0x16>
    2a02:	Address 0x00002a02 is out of bounds.


00002a04 <vsniprintf>:
    2a04:	b507      	push	{r0, r1, r2, lr}
    2a06:	9300      	str	r3, [sp, #0]
    2a08:	0013      	movs	r3, r2
    2a0a:	000a      	movs	r2, r1
    2a0c:	0001      	movs	r1, r0
    2a0e:	4802      	ldr	r0, [pc, #8]	; (2a18 <vsniprintf+0x14>)
    2a10:	6800      	ldr	r0, [r0, #0]
    2a12:	f7ff ffcb 	bl	29ac <_vsniprintf_r>
    2a16:	bd0e      	pop	{r1, r2, r3, pc}
    2a18:	20000014 	.word	0x20000014

00002a1c <__retarget_lock_acquire_recursive>:
    2a1c:	4770      	bx	lr

00002a1e <__retarget_lock_release_recursive>:
    2a1e:	4770      	bx	lr

00002a20 <__malloc_lock>:
    2a20:	b510      	push	{r4, lr}
    2a22:	4802      	ldr	r0, [pc, #8]	; (2a2c <__malloc_lock+0xc>)
    2a24:	f7ff fffa 	bl	2a1c <__retarget_lock_acquire_recursive>
    2a28:	bd10      	pop	{r4, pc}
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	20000518 	.word	0x20000518

00002a30 <__malloc_unlock>:
    2a30:	b510      	push	{r4, lr}
    2a32:	4802      	ldr	r0, [pc, #8]	; (2a3c <__malloc_unlock+0xc>)
    2a34:	f7ff fff3 	bl	2a1e <__retarget_lock_release_recursive>
    2a38:	bd10      	pop	{r4, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	20000518 	.word	0x20000518

00002a40 <_realloc_r>:
    2a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a42:	0007      	movs	r7, r0
    2a44:	000d      	movs	r5, r1
    2a46:	0016      	movs	r6, r2
    2a48:	2900      	cmp	r1, #0
    2a4a:	d105      	bne.n	2a58 <_realloc_r+0x18>
    2a4c:	0011      	movs	r1, r2
    2a4e:	f7ff fda7 	bl	25a0 <_malloc_r>
    2a52:	0004      	movs	r4, r0
    2a54:	0020      	movs	r0, r4
    2a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a58:	2a00      	cmp	r2, #0
    2a5a:	d103      	bne.n	2a64 <_realloc_r+0x24>
    2a5c:	f7ff fd56 	bl	250c <_free_r>
    2a60:	0034      	movs	r4, r6
    2a62:	e7f7      	b.n	2a54 <_realloc_r+0x14>
    2a64:	f000 fb14 	bl	3090 <_malloc_usable_size_r>
    2a68:	002c      	movs	r4, r5
    2a6a:	42b0      	cmp	r0, r6
    2a6c:	d2f2      	bcs.n	2a54 <_realloc_r+0x14>
    2a6e:	0031      	movs	r1, r6
    2a70:	0038      	movs	r0, r7
    2a72:	f7ff fd95 	bl	25a0 <_malloc_r>
    2a76:	1e04      	subs	r4, r0, #0
    2a78:	d0ec      	beq.n	2a54 <_realloc_r+0x14>
    2a7a:	0029      	movs	r1, r5
    2a7c:	0032      	movs	r2, r6
    2a7e:	f7ff fd3b 	bl	24f8 <memcpy>
    2a82:	0029      	movs	r1, r5
    2a84:	0038      	movs	r0, r7
    2a86:	f7ff fd41 	bl	250c <_free_r>
    2a8a:	e7e3      	b.n	2a54 <_realloc_r+0x14>

00002a8c <__ssputs_r>:
    2a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a8e:	688e      	ldr	r6, [r1, #8]
    2a90:	b085      	sub	sp, #20
    2a92:	0007      	movs	r7, r0
    2a94:	000c      	movs	r4, r1
    2a96:	9203      	str	r2, [sp, #12]
    2a98:	9301      	str	r3, [sp, #4]
    2a9a:	429e      	cmp	r6, r3
    2a9c:	d83c      	bhi.n	2b18 <__ssputs_r+0x8c>
    2a9e:	2390      	movs	r3, #144	; 0x90
    2aa0:	898a      	ldrh	r2, [r1, #12]
    2aa2:	00db      	lsls	r3, r3, #3
    2aa4:	421a      	tst	r2, r3
    2aa6:	d034      	beq.n	2b12 <__ssputs_r+0x86>
    2aa8:	2503      	movs	r5, #3
    2aaa:	6909      	ldr	r1, [r1, #16]
    2aac:	6823      	ldr	r3, [r4, #0]
    2aae:	1a5b      	subs	r3, r3, r1
    2ab0:	9302      	str	r3, [sp, #8]
    2ab2:	6963      	ldr	r3, [r4, #20]
    2ab4:	9802      	ldr	r0, [sp, #8]
    2ab6:	435d      	muls	r5, r3
    2ab8:	0feb      	lsrs	r3, r5, #31
    2aba:	195d      	adds	r5, r3, r5
    2abc:	9b01      	ldr	r3, [sp, #4]
    2abe:	106d      	asrs	r5, r5, #1
    2ac0:	3301      	adds	r3, #1
    2ac2:	181b      	adds	r3, r3, r0
    2ac4:	42ab      	cmp	r3, r5
    2ac6:	d900      	bls.n	2aca <__ssputs_r+0x3e>
    2ac8:	001d      	movs	r5, r3
    2aca:	0553      	lsls	r3, r2, #21
    2acc:	d532      	bpl.n	2b34 <__ssputs_r+0xa8>
    2ace:	0029      	movs	r1, r5
    2ad0:	0038      	movs	r0, r7
    2ad2:	f7ff fd65 	bl	25a0 <_malloc_r>
    2ad6:	1e06      	subs	r6, r0, #0
    2ad8:	d109      	bne.n	2aee <__ssputs_r+0x62>
    2ada:	230c      	movs	r3, #12
    2adc:	603b      	str	r3, [r7, #0]
    2ade:	2340      	movs	r3, #64	; 0x40
    2ae0:	2001      	movs	r0, #1
    2ae2:	89a2      	ldrh	r2, [r4, #12]
    2ae4:	4240      	negs	r0, r0
    2ae6:	4313      	orrs	r3, r2
    2ae8:	81a3      	strh	r3, [r4, #12]
    2aea:	b005      	add	sp, #20
    2aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aee:	9a02      	ldr	r2, [sp, #8]
    2af0:	6921      	ldr	r1, [r4, #16]
    2af2:	f7ff fd01 	bl	24f8 <memcpy>
    2af6:	89a3      	ldrh	r3, [r4, #12]
    2af8:	4a14      	ldr	r2, [pc, #80]	; (2b4c <__ssputs_r+0xc0>)
    2afa:	401a      	ands	r2, r3
    2afc:	2380      	movs	r3, #128	; 0x80
    2afe:	4313      	orrs	r3, r2
    2b00:	81a3      	strh	r3, [r4, #12]
    2b02:	9b02      	ldr	r3, [sp, #8]
    2b04:	6126      	str	r6, [r4, #16]
    2b06:	18f6      	adds	r6, r6, r3
    2b08:	6026      	str	r6, [r4, #0]
    2b0a:	6165      	str	r5, [r4, #20]
    2b0c:	9e01      	ldr	r6, [sp, #4]
    2b0e:	1aed      	subs	r5, r5, r3
    2b10:	60a5      	str	r5, [r4, #8]
    2b12:	9b01      	ldr	r3, [sp, #4]
    2b14:	429e      	cmp	r6, r3
    2b16:	d900      	bls.n	2b1a <__ssputs_r+0x8e>
    2b18:	9e01      	ldr	r6, [sp, #4]
    2b1a:	0032      	movs	r2, r6
    2b1c:	9903      	ldr	r1, [sp, #12]
    2b1e:	6820      	ldr	r0, [r4, #0]
    2b20:	f000 faa3 	bl	306a <memmove>
    2b24:	68a3      	ldr	r3, [r4, #8]
    2b26:	2000      	movs	r0, #0
    2b28:	1b9b      	subs	r3, r3, r6
    2b2a:	60a3      	str	r3, [r4, #8]
    2b2c:	6823      	ldr	r3, [r4, #0]
    2b2e:	199e      	adds	r6, r3, r6
    2b30:	6026      	str	r6, [r4, #0]
    2b32:	e7da      	b.n	2aea <__ssputs_r+0x5e>
    2b34:	002a      	movs	r2, r5
    2b36:	0038      	movs	r0, r7
    2b38:	f7ff ff82 	bl	2a40 <_realloc_r>
    2b3c:	1e06      	subs	r6, r0, #0
    2b3e:	d1e0      	bne.n	2b02 <__ssputs_r+0x76>
    2b40:	0038      	movs	r0, r7
    2b42:	6921      	ldr	r1, [r4, #16]
    2b44:	f7ff fce2 	bl	250c <_free_r>
    2b48:	e7c7      	b.n	2ada <__ssputs_r+0x4e>
    2b4a:	46c0      	nop			; (mov r8, r8)
    2b4c:	fffffb7f 	.word	0xfffffb7f

00002b50 <_svfiprintf_r>:
    2b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b52:	b0a1      	sub	sp, #132	; 0x84
    2b54:	9003      	str	r0, [sp, #12]
    2b56:	001d      	movs	r5, r3
    2b58:	898b      	ldrh	r3, [r1, #12]
    2b5a:	000f      	movs	r7, r1
    2b5c:	0016      	movs	r6, r2
    2b5e:	061b      	lsls	r3, r3, #24
    2b60:	d511      	bpl.n	2b86 <_svfiprintf_r+0x36>
    2b62:	690b      	ldr	r3, [r1, #16]
    2b64:	2b00      	cmp	r3, #0
    2b66:	d10e      	bne.n	2b86 <_svfiprintf_r+0x36>
    2b68:	2140      	movs	r1, #64	; 0x40
    2b6a:	f7ff fd19 	bl	25a0 <_malloc_r>
    2b6e:	6038      	str	r0, [r7, #0]
    2b70:	6138      	str	r0, [r7, #16]
    2b72:	2800      	cmp	r0, #0
    2b74:	d105      	bne.n	2b82 <_svfiprintf_r+0x32>
    2b76:	230c      	movs	r3, #12
    2b78:	9a03      	ldr	r2, [sp, #12]
    2b7a:	3801      	subs	r0, #1
    2b7c:	6013      	str	r3, [r2, #0]
    2b7e:	b021      	add	sp, #132	; 0x84
    2b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b82:	2340      	movs	r3, #64	; 0x40
    2b84:	617b      	str	r3, [r7, #20]
    2b86:	2300      	movs	r3, #0
    2b88:	ac08      	add	r4, sp, #32
    2b8a:	6163      	str	r3, [r4, #20]
    2b8c:	3320      	adds	r3, #32
    2b8e:	7663      	strb	r3, [r4, #25]
    2b90:	3310      	adds	r3, #16
    2b92:	76a3      	strb	r3, [r4, #26]
    2b94:	9507      	str	r5, [sp, #28]
    2b96:	0035      	movs	r5, r6
    2b98:	782b      	ldrb	r3, [r5, #0]
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d001      	beq.n	2ba2 <_svfiprintf_r+0x52>
    2b9e:	2b25      	cmp	r3, #37	; 0x25
    2ba0:	d147      	bne.n	2c32 <_svfiprintf_r+0xe2>
    2ba2:	1bab      	subs	r3, r5, r6
    2ba4:	9305      	str	r3, [sp, #20]
    2ba6:	42b5      	cmp	r5, r6
    2ba8:	d00c      	beq.n	2bc4 <_svfiprintf_r+0x74>
    2baa:	0032      	movs	r2, r6
    2bac:	0039      	movs	r1, r7
    2bae:	9803      	ldr	r0, [sp, #12]
    2bb0:	f7ff ff6c 	bl	2a8c <__ssputs_r>
    2bb4:	1c43      	adds	r3, r0, #1
    2bb6:	d100      	bne.n	2bba <_svfiprintf_r+0x6a>
    2bb8:	e0ae      	b.n	2d18 <_svfiprintf_r+0x1c8>
    2bba:	6962      	ldr	r2, [r4, #20]
    2bbc:	9b05      	ldr	r3, [sp, #20]
    2bbe:	4694      	mov	ip, r2
    2bc0:	4463      	add	r3, ip
    2bc2:	6163      	str	r3, [r4, #20]
    2bc4:	782b      	ldrb	r3, [r5, #0]
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d100      	bne.n	2bcc <_svfiprintf_r+0x7c>
    2bca:	e0a5      	b.n	2d18 <_svfiprintf_r+0x1c8>
    2bcc:	2201      	movs	r2, #1
    2bce:	2300      	movs	r3, #0
    2bd0:	4252      	negs	r2, r2
    2bd2:	6062      	str	r2, [r4, #4]
    2bd4:	a904      	add	r1, sp, #16
    2bd6:	3254      	adds	r2, #84	; 0x54
    2bd8:	1852      	adds	r2, r2, r1
    2bda:	1c6e      	adds	r6, r5, #1
    2bdc:	6023      	str	r3, [r4, #0]
    2bde:	60e3      	str	r3, [r4, #12]
    2be0:	60a3      	str	r3, [r4, #8]
    2be2:	7013      	strb	r3, [r2, #0]
    2be4:	65a3      	str	r3, [r4, #88]	; 0x58
    2be6:	2205      	movs	r2, #5
    2be8:	7831      	ldrb	r1, [r6, #0]
    2bea:	4854      	ldr	r0, [pc, #336]	; (2d3c <_svfiprintf_r+0x1ec>)
    2bec:	f000 fa32 	bl	3054 <memchr>
    2bf0:	1c75      	adds	r5, r6, #1
    2bf2:	2800      	cmp	r0, #0
    2bf4:	d11f      	bne.n	2c36 <_svfiprintf_r+0xe6>
    2bf6:	6822      	ldr	r2, [r4, #0]
    2bf8:	06d3      	lsls	r3, r2, #27
    2bfa:	d504      	bpl.n	2c06 <_svfiprintf_r+0xb6>
    2bfc:	2353      	movs	r3, #83	; 0x53
    2bfe:	a904      	add	r1, sp, #16
    2c00:	185b      	adds	r3, r3, r1
    2c02:	2120      	movs	r1, #32
    2c04:	7019      	strb	r1, [r3, #0]
    2c06:	0713      	lsls	r3, r2, #28
    2c08:	d504      	bpl.n	2c14 <_svfiprintf_r+0xc4>
    2c0a:	2353      	movs	r3, #83	; 0x53
    2c0c:	a904      	add	r1, sp, #16
    2c0e:	185b      	adds	r3, r3, r1
    2c10:	212b      	movs	r1, #43	; 0x2b
    2c12:	7019      	strb	r1, [r3, #0]
    2c14:	7833      	ldrb	r3, [r6, #0]
    2c16:	2b2a      	cmp	r3, #42	; 0x2a
    2c18:	d016      	beq.n	2c48 <_svfiprintf_r+0xf8>
    2c1a:	0035      	movs	r5, r6
    2c1c:	2100      	movs	r1, #0
    2c1e:	200a      	movs	r0, #10
    2c20:	68e3      	ldr	r3, [r4, #12]
    2c22:	782a      	ldrb	r2, [r5, #0]
    2c24:	1c6e      	adds	r6, r5, #1
    2c26:	3a30      	subs	r2, #48	; 0x30
    2c28:	2a09      	cmp	r2, #9
    2c2a:	d94e      	bls.n	2cca <_svfiprintf_r+0x17a>
    2c2c:	2900      	cmp	r1, #0
    2c2e:	d111      	bne.n	2c54 <_svfiprintf_r+0x104>
    2c30:	e017      	b.n	2c62 <_svfiprintf_r+0x112>
    2c32:	3501      	adds	r5, #1
    2c34:	e7b0      	b.n	2b98 <_svfiprintf_r+0x48>
    2c36:	4b41      	ldr	r3, [pc, #260]	; (2d3c <_svfiprintf_r+0x1ec>)
    2c38:	6822      	ldr	r2, [r4, #0]
    2c3a:	1ac0      	subs	r0, r0, r3
    2c3c:	2301      	movs	r3, #1
    2c3e:	4083      	lsls	r3, r0
    2c40:	4313      	orrs	r3, r2
    2c42:	002e      	movs	r6, r5
    2c44:	6023      	str	r3, [r4, #0]
    2c46:	e7ce      	b.n	2be6 <_svfiprintf_r+0x96>
    2c48:	9b07      	ldr	r3, [sp, #28]
    2c4a:	1d19      	adds	r1, r3, #4
    2c4c:	681b      	ldr	r3, [r3, #0]
    2c4e:	9107      	str	r1, [sp, #28]
    2c50:	2b00      	cmp	r3, #0
    2c52:	db01      	blt.n	2c58 <_svfiprintf_r+0x108>
    2c54:	930b      	str	r3, [sp, #44]	; 0x2c
    2c56:	e004      	b.n	2c62 <_svfiprintf_r+0x112>
    2c58:	425b      	negs	r3, r3
    2c5a:	60e3      	str	r3, [r4, #12]
    2c5c:	2302      	movs	r3, #2
    2c5e:	4313      	orrs	r3, r2
    2c60:	6023      	str	r3, [r4, #0]
    2c62:	782b      	ldrb	r3, [r5, #0]
    2c64:	2b2e      	cmp	r3, #46	; 0x2e
    2c66:	d10a      	bne.n	2c7e <_svfiprintf_r+0x12e>
    2c68:	786b      	ldrb	r3, [r5, #1]
    2c6a:	2b2a      	cmp	r3, #42	; 0x2a
    2c6c:	d135      	bne.n	2cda <_svfiprintf_r+0x18a>
    2c6e:	9b07      	ldr	r3, [sp, #28]
    2c70:	3502      	adds	r5, #2
    2c72:	1d1a      	adds	r2, r3, #4
    2c74:	681b      	ldr	r3, [r3, #0]
    2c76:	9207      	str	r2, [sp, #28]
    2c78:	2b00      	cmp	r3, #0
    2c7a:	db2b      	blt.n	2cd4 <_svfiprintf_r+0x184>
    2c7c:	9309      	str	r3, [sp, #36]	; 0x24
    2c7e:	4e30      	ldr	r6, [pc, #192]	; (2d40 <_svfiprintf_r+0x1f0>)
    2c80:	2203      	movs	r2, #3
    2c82:	0030      	movs	r0, r6
    2c84:	7829      	ldrb	r1, [r5, #0]
    2c86:	f000 f9e5 	bl	3054 <memchr>
    2c8a:	2800      	cmp	r0, #0
    2c8c:	d006      	beq.n	2c9c <_svfiprintf_r+0x14c>
    2c8e:	2340      	movs	r3, #64	; 0x40
    2c90:	1b80      	subs	r0, r0, r6
    2c92:	4083      	lsls	r3, r0
    2c94:	6822      	ldr	r2, [r4, #0]
    2c96:	3501      	adds	r5, #1
    2c98:	4313      	orrs	r3, r2
    2c9a:	6023      	str	r3, [r4, #0]
    2c9c:	7829      	ldrb	r1, [r5, #0]
    2c9e:	2206      	movs	r2, #6
    2ca0:	4828      	ldr	r0, [pc, #160]	; (2d44 <_svfiprintf_r+0x1f4>)
    2ca2:	1c6e      	adds	r6, r5, #1
    2ca4:	7621      	strb	r1, [r4, #24]
    2ca6:	f000 f9d5 	bl	3054 <memchr>
    2caa:	2800      	cmp	r0, #0
    2cac:	d03c      	beq.n	2d28 <_svfiprintf_r+0x1d8>
    2cae:	4b26      	ldr	r3, [pc, #152]	; (2d48 <_svfiprintf_r+0x1f8>)
    2cb0:	2b00      	cmp	r3, #0
    2cb2:	d125      	bne.n	2d00 <_svfiprintf_r+0x1b0>
    2cb4:	2207      	movs	r2, #7
    2cb6:	9b07      	ldr	r3, [sp, #28]
    2cb8:	3307      	adds	r3, #7
    2cba:	4393      	bics	r3, r2
    2cbc:	3308      	adds	r3, #8
    2cbe:	9307      	str	r3, [sp, #28]
    2cc0:	6963      	ldr	r3, [r4, #20]
    2cc2:	9a04      	ldr	r2, [sp, #16]
    2cc4:	189b      	adds	r3, r3, r2
    2cc6:	6163      	str	r3, [r4, #20]
    2cc8:	e765      	b.n	2b96 <_svfiprintf_r+0x46>
    2cca:	4343      	muls	r3, r0
    2ccc:	0035      	movs	r5, r6
    2cce:	2101      	movs	r1, #1
    2cd0:	189b      	adds	r3, r3, r2
    2cd2:	e7a6      	b.n	2c22 <_svfiprintf_r+0xd2>
    2cd4:	2301      	movs	r3, #1
    2cd6:	425b      	negs	r3, r3
    2cd8:	e7d0      	b.n	2c7c <_svfiprintf_r+0x12c>
    2cda:	2300      	movs	r3, #0
    2cdc:	200a      	movs	r0, #10
    2cde:	001a      	movs	r2, r3
    2ce0:	3501      	adds	r5, #1
    2ce2:	6063      	str	r3, [r4, #4]
    2ce4:	7829      	ldrb	r1, [r5, #0]
    2ce6:	1c6e      	adds	r6, r5, #1
    2ce8:	3930      	subs	r1, #48	; 0x30
    2cea:	2909      	cmp	r1, #9
    2cec:	d903      	bls.n	2cf6 <_svfiprintf_r+0x1a6>
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d0c5      	beq.n	2c7e <_svfiprintf_r+0x12e>
    2cf2:	9209      	str	r2, [sp, #36]	; 0x24
    2cf4:	e7c3      	b.n	2c7e <_svfiprintf_r+0x12e>
    2cf6:	4342      	muls	r2, r0
    2cf8:	0035      	movs	r5, r6
    2cfa:	2301      	movs	r3, #1
    2cfc:	1852      	adds	r2, r2, r1
    2cfe:	e7f1      	b.n	2ce4 <_svfiprintf_r+0x194>
    2d00:	ab07      	add	r3, sp, #28
    2d02:	9300      	str	r3, [sp, #0]
    2d04:	003a      	movs	r2, r7
    2d06:	0021      	movs	r1, r4
    2d08:	4b10      	ldr	r3, [pc, #64]	; (2d4c <_svfiprintf_r+0x1fc>)
    2d0a:	9803      	ldr	r0, [sp, #12]
    2d0c:	e000      	b.n	2d10 <_svfiprintf_r+0x1c0>
    2d0e:	bf00      	nop
    2d10:	9004      	str	r0, [sp, #16]
    2d12:	9b04      	ldr	r3, [sp, #16]
    2d14:	3301      	adds	r3, #1
    2d16:	d1d3      	bne.n	2cc0 <_svfiprintf_r+0x170>
    2d18:	89bb      	ldrh	r3, [r7, #12]
    2d1a:	980d      	ldr	r0, [sp, #52]	; 0x34
    2d1c:	065b      	lsls	r3, r3, #25
    2d1e:	d400      	bmi.n	2d22 <_svfiprintf_r+0x1d2>
    2d20:	e72d      	b.n	2b7e <_svfiprintf_r+0x2e>
    2d22:	2001      	movs	r0, #1
    2d24:	4240      	negs	r0, r0
    2d26:	e72a      	b.n	2b7e <_svfiprintf_r+0x2e>
    2d28:	ab07      	add	r3, sp, #28
    2d2a:	9300      	str	r3, [sp, #0]
    2d2c:	003a      	movs	r2, r7
    2d2e:	0021      	movs	r1, r4
    2d30:	4b06      	ldr	r3, [pc, #24]	; (2d4c <_svfiprintf_r+0x1fc>)
    2d32:	9803      	ldr	r0, [sp, #12]
    2d34:	f000 f87c 	bl	2e30 <_printf_i>
    2d38:	e7ea      	b.n	2d10 <_svfiprintf_r+0x1c0>
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	0000354c 	.word	0x0000354c
    2d40:	00003552 	.word	0x00003552
    2d44:	00003556 	.word	0x00003556
    2d48:	00000000 	.word	0x00000000
    2d4c:	00002a8d 	.word	0x00002a8d

00002d50 <_printf_common>:
    2d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2d52:	0015      	movs	r5, r2
    2d54:	9301      	str	r3, [sp, #4]
    2d56:	688a      	ldr	r2, [r1, #8]
    2d58:	690b      	ldr	r3, [r1, #16]
    2d5a:	000c      	movs	r4, r1
    2d5c:	9000      	str	r0, [sp, #0]
    2d5e:	4293      	cmp	r3, r2
    2d60:	da00      	bge.n	2d64 <_printf_common+0x14>
    2d62:	0013      	movs	r3, r2
    2d64:	0022      	movs	r2, r4
    2d66:	602b      	str	r3, [r5, #0]
    2d68:	3243      	adds	r2, #67	; 0x43
    2d6a:	7812      	ldrb	r2, [r2, #0]
    2d6c:	2a00      	cmp	r2, #0
    2d6e:	d001      	beq.n	2d74 <_printf_common+0x24>
    2d70:	3301      	adds	r3, #1
    2d72:	602b      	str	r3, [r5, #0]
    2d74:	6823      	ldr	r3, [r4, #0]
    2d76:	069b      	lsls	r3, r3, #26
    2d78:	d502      	bpl.n	2d80 <_printf_common+0x30>
    2d7a:	682b      	ldr	r3, [r5, #0]
    2d7c:	3302      	adds	r3, #2
    2d7e:	602b      	str	r3, [r5, #0]
    2d80:	6822      	ldr	r2, [r4, #0]
    2d82:	2306      	movs	r3, #6
    2d84:	0017      	movs	r7, r2
    2d86:	401f      	ands	r7, r3
    2d88:	421a      	tst	r2, r3
    2d8a:	d027      	beq.n	2ddc <_printf_common+0x8c>
    2d8c:	0023      	movs	r3, r4
    2d8e:	3343      	adds	r3, #67	; 0x43
    2d90:	781b      	ldrb	r3, [r3, #0]
    2d92:	1e5a      	subs	r2, r3, #1
    2d94:	4193      	sbcs	r3, r2
    2d96:	6822      	ldr	r2, [r4, #0]
    2d98:	0692      	lsls	r2, r2, #26
    2d9a:	d430      	bmi.n	2dfe <_printf_common+0xae>
    2d9c:	0022      	movs	r2, r4
    2d9e:	9901      	ldr	r1, [sp, #4]
    2da0:	9800      	ldr	r0, [sp, #0]
    2da2:	9e08      	ldr	r6, [sp, #32]
    2da4:	3243      	adds	r2, #67	; 0x43
    2da6:	47b0      	blx	r6
    2da8:	1c43      	adds	r3, r0, #1
    2daa:	d025      	beq.n	2df8 <_printf_common+0xa8>
    2dac:	2306      	movs	r3, #6
    2dae:	6820      	ldr	r0, [r4, #0]
    2db0:	682a      	ldr	r2, [r5, #0]
    2db2:	68e1      	ldr	r1, [r4, #12]
    2db4:	2500      	movs	r5, #0
    2db6:	4003      	ands	r3, r0
    2db8:	2b04      	cmp	r3, #4
    2dba:	d103      	bne.n	2dc4 <_printf_common+0x74>
    2dbc:	1a8d      	subs	r5, r1, r2
    2dbe:	43eb      	mvns	r3, r5
    2dc0:	17db      	asrs	r3, r3, #31
    2dc2:	401d      	ands	r5, r3
    2dc4:	68a3      	ldr	r3, [r4, #8]
    2dc6:	6922      	ldr	r2, [r4, #16]
    2dc8:	4293      	cmp	r3, r2
    2dca:	dd01      	ble.n	2dd0 <_printf_common+0x80>
    2dcc:	1a9b      	subs	r3, r3, r2
    2dce:	18ed      	adds	r5, r5, r3
    2dd0:	2700      	movs	r7, #0
    2dd2:	42bd      	cmp	r5, r7
    2dd4:	d120      	bne.n	2e18 <_printf_common+0xc8>
    2dd6:	2000      	movs	r0, #0
    2dd8:	e010      	b.n	2dfc <_printf_common+0xac>
    2dda:	3701      	adds	r7, #1
    2ddc:	68e3      	ldr	r3, [r4, #12]
    2dde:	682a      	ldr	r2, [r5, #0]
    2de0:	1a9b      	subs	r3, r3, r2
    2de2:	42bb      	cmp	r3, r7
    2de4:	ddd2      	ble.n	2d8c <_printf_common+0x3c>
    2de6:	0022      	movs	r2, r4
    2de8:	2301      	movs	r3, #1
    2dea:	9901      	ldr	r1, [sp, #4]
    2dec:	9800      	ldr	r0, [sp, #0]
    2dee:	9e08      	ldr	r6, [sp, #32]
    2df0:	3219      	adds	r2, #25
    2df2:	47b0      	blx	r6
    2df4:	1c43      	adds	r3, r0, #1
    2df6:	d1f0      	bne.n	2dda <_printf_common+0x8a>
    2df8:	2001      	movs	r0, #1
    2dfa:	4240      	negs	r0, r0
    2dfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2dfe:	2030      	movs	r0, #48	; 0x30
    2e00:	18e1      	adds	r1, r4, r3
    2e02:	3143      	adds	r1, #67	; 0x43
    2e04:	7008      	strb	r0, [r1, #0]
    2e06:	0021      	movs	r1, r4
    2e08:	1c5a      	adds	r2, r3, #1
    2e0a:	3145      	adds	r1, #69	; 0x45
    2e0c:	7809      	ldrb	r1, [r1, #0]
    2e0e:	18a2      	adds	r2, r4, r2
    2e10:	3243      	adds	r2, #67	; 0x43
    2e12:	3302      	adds	r3, #2
    2e14:	7011      	strb	r1, [r2, #0]
    2e16:	e7c1      	b.n	2d9c <_printf_common+0x4c>
    2e18:	0022      	movs	r2, r4
    2e1a:	2301      	movs	r3, #1
    2e1c:	9901      	ldr	r1, [sp, #4]
    2e1e:	9800      	ldr	r0, [sp, #0]
    2e20:	9e08      	ldr	r6, [sp, #32]
    2e22:	321a      	adds	r2, #26
    2e24:	47b0      	blx	r6
    2e26:	1c43      	adds	r3, r0, #1
    2e28:	d0e6      	beq.n	2df8 <_printf_common+0xa8>
    2e2a:	3701      	adds	r7, #1
    2e2c:	e7d1      	b.n	2dd2 <_printf_common+0x82>
    2e2e:	Address 0x00002e2e is out of bounds.


00002e30 <_printf_i>:
    2e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e32:	b08b      	sub	sp, #44	; 0x2c
    2e34:	9206      	str	r2, [sp, #24]
    2e36:	000a      	movs	r2, r1
    2e38:	3243      	adds	r2, #67	; 0x43
    2e3a:	9307      	str	r3, [sp, #28]
    2e3c:	9005      	str	r0, [sp, #20]
    2e3e:	9204      	str	r2, [sp, #16]
    2e40:	7e0a      	ldrb	r2, [r1, #24]
    2e42:	000c      	movs	r4, r1
    2e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2e46:	2a78      	cmp	r2, #120	; 0x78
    2e48:	d806      	bhi.n	2e58 <_printf_i+0x28>
    2e4a:	2a62      	cmp	r2, #98	; 0x62
    2e4c:	d808      	bhi.n	2e60 <_printf_i+0x30>
    2e4e:	2a00      	cmp	r2, #0
    2e50:	d100      	bne.n	2e54 <_printf_i+0x24>
    2e52:	e0c0      	b.n	2fd6 <_printf_i+0x1a6>
    2e54:	2a58      	cmp	r2, #88	; 0x58
    2e56:	d052      	beq.n	2efe <_printf_i+0xce>
    2e58:	0026      	movs	r6, r4
    2e5a:	3642      	adds	r6, #66	; 0x42
    2e5c:	7032      	strb	r2, [r6, #0]
    2e5e:	e022      	b.n	2ea6 <_printf_i+0x76>
    2e60:	0010      	movs	r0, r2
    2e62:	3863      	subs	r0, #99	; 0x63
    2e64:	2815      	cmp	r0, #21
    2e66:	d8f7      	bhi.n	2e58 <_printf_i+0x28>
    2e68:	f000 f91a 	bl	30a0 <__gnu_thumb1_case_shi>
    2e6c:	001f0016 	.word	0x001f0016
    2e70:	fff6fff6 	.word	0xfff6fff6
    2e74:	fff6fff6 	.word	0xfff6fff6
    2e78:	fff6001f 	.word	0xfff6001f
    2e7c:	fff6fff6 	.word	0xfff6fff6
    2e80:	00a8fff6 	.word	0x00a8fff6
    2e84:	009a0036 	.word	0x009a0036
    2e88:	fff6fff6 	.word	0xfff6fff6
    2e8c:	fff600b9 	.word	0xfff600b9
    2e90:	fff60036 	.word	0xfff60036
    2e94:	009efff6 	.word	0x009efff6
    2e98:	0026      	movs	r6, r4
    2e9a:	681a      	ldr	r2, [r3, #0]
    2e9c:	3642      	adds	r6, #66	; 0x42
    2e9e:	1d11      	adds	r1, r2, #4
    2ea0:	6019      	str	r1, [r3, #0]
    2ea2:	6813      	ldr	r3, [r2, #0]
    2ea4:	7033      	strb	r3, [r6, #0]
    2ea6:	2301      	movs	r3, #1
    2ea8:	e0a7      	b.n	2ffa <_printf_i+0x1ca>
    2eaa:	6808      	ldr	r0, [r1, #0]
    2eac:	6819      	ldr	r1, [r3, #0]
    2eae:	1d0a      	adds	r2, r1, #4
    2eb0:	0605      	lsls	r5, r0, #24
    2eb2:	d50b      	bpl.n	2ecc <_printf_i+0x9c>
    2eb4:	680d      	ldr	r5, [r1, #0]
    2eb6:	601a      	str	r2, [r3, #0]
    2eb8:	2d00      	cmp	r5, #0
    2eba:	da03      	bge.n	2ec4 <_printf_i+0x94>
    2ebc:	232d      	movs	r3, #45	; 0x2d
    2ebe:	9a04      	ldr	r2, [sp, #16]
    2ec0:	426d      	negs	r5, r5
    2ec2:	7013      	strb	r3, [r2, #0]
    2ec4:	4b61      	ldr	r3, [pc, #388]	; (304c <_printf_i+0x21c>)
    2ec6:	270a      	movs	r7, #10
    2ec8:	9303      	str	r3, [sp, #12]
    2eca:	e032      	b.n	2f32 <_printf_i+0x102>
    2ecc:	680d      	ldr	r5, [r1, #0]
    2ece:	601a      	str	r2, [r3, #0]
    2ed0:	0641      	lsls	r1, r0, #25
    2ed2:	d5f1      	bpl.n	2eb8 <_printf_i+0x88>
    2ed4:	b22d      	sxth	r5, r5
    2ed6:	e7ef      	b.n	2eb8 <_printf_i+0x88>
    2ed8:	680d      	ldr	r5, [r1, #0]
    2eda:	6819      	ldr	r1, [r3, #0]
    2edc:	1d08      	adds	r0, r1, #4
    2ede:	6018      	str	r0, [r3, #0]
    2ee0:	062e      	lsls	r6, r5, #24
    2ee2:	d501      	bpl.n	2ee8 <_printf_i+0xb8>
    2ee4:	680d      	ldr	r5, [r1, #0]
    2ee6:	e003      	b.n	2ef0 <_printf_i+0xc0>
    2ee8:	066d      	lsls	r5, r5, #25
    2eea:	d5fb      	bpl.n	2ee4 <_printf_i+0xb4>
    2eec:	680d      	ldr	r5, [r1, #0]
    2eee:	b2ad      	uxth	r5, r5
    2ef0:	4b56      	ldr	r3, [pc, #344]	; (304c <_printf_i+0x21c>)
    2ef2:	270a      	movs	r7, #10
    2ef4:	9303      	str	r3, [sp, #12]
    2ef6:	2a6f      	cmp	r2, #111	; 0x6f
    2ef8:	d117      	bne.n	2f2a <_printf_i+0xfa>
    2efa:	2708      	movs	r7, #8
    2efc:	e015      	b.n	2f2a <_printf_i+0xfa>
    2efe:	3145      	adds	r1, #69	; 0x45
    2f00:	700a      	strb	r2, [r1, #0]
    2f02:	4a52      	ldr	r2, [pc, #328]	; (304c <_printf_i+0x21c>)
    2f04:	9203      	str	r2, [sp, #12]
    2f06:	681a      	ldr	r2, [r3, #0]
    2f08:	6821      	ldr	r1, [r4, #0]
    2f0a:	ca20      	ldmia	r2!, {r5}
    2f0c:	601a      	str	r2, [r3, #0]
    2f0e:	0608      	lsls	r0, r1, #24
    2f10:	d550      	bpl.n	2fb4 <_printf_i+0x184>
    2f12:	07cb      	lsls	r3, r1, #31
    2f14:	d502      	bpl.n	2f1c <_printf_i+0xec>
    2f16:	2320      	movs	r3, #32
    2f18:	4319      	orrs	r1, r3
    2f1a:	6021      	str	r1, [r4, #0]
    2f1c:	2710      	movs	r7, #16
    2f1e:	2d00      	cmp	r5, #0
    2f20:	d103      	bne.n	2f2a <_printf_i+0xfa>
    2f22:	2320      	movs	r3, #32
    2f24:	6822      	ldr	r2, [r4, #0]
    2f26:	439a      	bics	r2, r3
    2f28:	6022      	str	r2, [r4, #0]
    2f2a:	0023      	movs	r3, r4
    2f2c:	2200      	movs	r2, #0
    2f2e:	3343      	adds	r3, #67	; 0x43
    2f30:	701a      	strb	r2, [r3, #0]
    2f32:	6863      	ldr	r3, [r4, #4]
    2f34:	60a3      	str	r3, [r4, #8]
    2f36:	2b00      	cmp	r3, #0
    2f38:	db03      	blt.n	2f42 <_printf_i+0x112>
    2f3a:	2204      	movs	r2, #4
    2f3c:	6821      	ldr	r1, [r4, #0]
    2f3e:	4391      	bics	r1, r2
    2f40:	6021      	str	r1, [r4, #0]
    2f42:	2d00      	cmp	r5, #0
    2f44:	d102      	bne.n	2f4c <_printf_i+0x11c>
    2f46:	9e04      	ldr	r6, [sp, #16]
    2f48:	2b00      	cmp	r3, #0
    2f4a:	d00c      	beq.n	2f66 <_printf_i+0x136>
    2f4c:	9e04      	ldr	r6, [sp, #16]
    2f4e:	0028      	movs	r0, r5
    2f50:	0039      	movs	r1, r7
    2f52:	f7ff fa57 	bl	2404 <__aeabi_uidivmod>
    2f56:	9b03      	ldr	r3, [sp, #12]
    2f58:	3e01      	subs	r6, #1
    2f5a:	5c5b      	ldrb	r3, [r3, r1]
    2f5c:	7033      	strb	r3, [r6, #0]
    2f5e:	002b      	movs	r3, r5
    2f60:	0005      	movs	r5, r0
    2f62:	429f      	cmp	r7, r3
    2f64:	d9f3      	bls.n	2f4e <_printf_i+0x11e>
    2f66:	2f08      	cmp	r7, #8
    2f68:	d109      	bne.n	2f7e <_printf_i+0x14e>
    2f6a:	6823      	ldr	r3, [r4, #0]
    2f6c:	07db      	lsls	r3, r3, #31
    2f6e:	d506      	bpl.n	2f7e <_printf_i+0x14e>
    2f70:	6863      	ldr	r3, [r4, #4]
    2f72:	6922      	ldr	r2, [r4, #16]
    2f74:	4293      	cmp	r3, r2
    2f76:	dc02      	bgt.n	2f7e <_printf_i+0x14e>
    2f78:	2330      	movs	r3, #48	; 0x30
    2f7a:	3e01      	subs	r6, #1
    2f7c:	7033      	strb	r3, [r6, #0]
    2f7e:	9b04      	ldr	r3, [sp, #16]
    2f80:	1b9b      	subs	r3, r3, r6
    2f82:	6123      	str	r3, [r4, #16]
    2f84:	9b07      	ldr	r3, [sp, #28]
    2f86:	0021      	movs	r1, r4
    2f88:	9300      	str	r3, [sp, #0]
    2f8a:	9805      	ldr	r0, [sp, #20]
    2f8c:	9b06      	ldr	r3, [sp, #24]
    2f8e:	aa09      	add	r2, sp, #36	; 0x24
    2f90:	f7ff fede 	bl	2d50 <_printf_common>
    2f94:	1c43      	adds	r3, r0, #1
    2f96:	d135      	bne.n	3004 <_printf_i+0x1d4>
    2f98:	2001      	movs	r0, #1
    2f9a:	4240      	negs	r0, r0
    2f9c:	b00b      	add	sp, #44	; 0x2c
    2f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fa0:	2220      	movs	r2, #32
    2fa2:	6809      	ldr	r1, [r1, #0]
    2fa4:	430a      	orrs	r2, r1
    2fa6:	6022      	str	r2, [r4, #0]
    2fa8:	0022      	movs	r2, r4
    2faa:	2178      	movs	r1, #120	; 0x78
    2fac:	3245      	adds	r2, #69	; 0x45
    2fae:	7011      	strb	r1, [r2, #0]
    2fb0:	4a27      	ldr	r2, [pc, #156]	; (3050 <_printf_i+0x220>)
    2fb2:	e7a7      	b.n	2f04 <_printf_i+0xd4>
    2fb4:	0648      	lsls	r0, r1, #25
    2fb6:	d5ac      	bpl.n	2f12 <_printf_i+0xe2>
    2fb8:	b2ad      	uxth	r5, r5
    2fba:	e7aa      	b.n	2f12 <_printf_i+0xe2>
    2fbc:	681a      	ldr	r2, [r3, #0]
    2fbe:	680d      	ldr	r5, [r1, #0]
    2fc0:	1d10      	adds	r0, r2, #4
    2fc2:	6949      	ldr	r1, [r1, #20]
    2fc4:	6018      	str	r0, [r3, #0]
    2fc6:	6813      	ldr	r3, [r2, #0]
    2fc8:	062e      	lsls	r6, r5, #24
    2fca:	d501      	bpl.n	2fd0 <_printf_i+0x1a0>
    2fcc:	6019      	str	r1, [r3, #0]
    2fce:	e002      	b.n	2fd6 <_printf_i+0x1a6>
    2fd0:	066d      	lsls	r5, r5, #25
    2fd2:	d5fb      	bpl.n	2fcc <_printf_i+0x19c>
    2fd4:	8019      	strh	r1, [r3, #0]
    2fd6:	2300      	movs	r3, #0
    2fd8:	9e04      	ldr	r6, [sp, #16]
    2fda:	6123      	str	r3, [r4, #16]
    2fdc:	e7d2      	b.n	2f84 <_printf_i+0x154>
    2fde:	681a      	ldr	r2, [r3, #0]
    2fe0:	1d11      	adds	r1, r2, #4
    2fe2:	6019      	str	r1, [r3, #0]
    2fe4:	6816      	ldr	r6, [r2, #0]
    2fe6:	2100      	movs	r1, #0
    2fe8:	0030      	movs	r0, r6
    2fea:	6862      	ldr	r2, [r4, #4]
    2fec:	f000 f832 	bl	3054 <memchr>
    2ff0:	2800      	cmp	r0, #0
    2ff2:	d001      	beq.n	2ff8 <_printf_i+0x1c8>
    2ff4:	1b80      	subs	r0, r0, r6
    2ff6:	6060      	str	r0, [r4, #4]
    2ff8:	6863      	ldr	r3, [r4, #4]
    2ffa:	6123      	str	r3, [r4, #16]
    2ffc:	2300      	movs	r3, #0
    2ffe:	9a04      	ldr	r2, [sp, #16]
    3000:	7013      	strb	r3, [r2, #0]
    3002:	e7bf      	b.n	2f84 <_printf_i+0x154>
    3004:	6923      	ldr	r3, [r4, #16]
    3006:	0032      	movs	r2, r6
    3008:	9906      	ldr	r1, [sp, #24]
    300a:	9805      	ldr	r0, [sp, #20]
    300c:	9d07      	ldr	r5, [sp, #28]
    300e:	47a8      	blx	r5
    3010:	1c43      	adds	r3, r0, #1
    3012:	d0c1      	beq.n	2f98 <_printf_i+0x168>
    3014:	6823      	ldr	r3, [r4, #0]
    3016:	079b      	lsls	r3, r3, #30
    3018:	d415      	bmi.n	3046 <_printf_i+0x216>
    301a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    301c:	68e0      	ldr	r0, [r4, #12]
    301e:	4298      	cmp	r0, r3
    3020:	dabc      	bge.n	2f9c <_printf_i+0x16c>
    3022:	0018      	movs	r0, r3
    3024:	e7ba      	b.n	2f9c <_printf_i+0x16c>
    3026:	0022      	movs	r2, r4
    3028:	2301      	movs	r3, #1
    302a:	9906      	ldr	r1, [sp, #24]
    302c:	9805      	ldr	r0, [sp, #20]
    302e:	9e07      	ldr	r6, [sp, #28]
    3030:	3219      	adds	r2, #25
    3032:	47b0      	blx	r6
    3034:	1c43      	adds	r3, r0, #1
    3036:	d0af      	beq.n	2f98 <_printf_i+0x168>
    3038:	3501      	adds	r5, #1
    303a:	68e3      	ldr	r3, [r4, #12]
    303c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    303e:	1a9b      	subs	r3, r3, r2
    3040:	42ab      	cmp	r3, r5
    3042:	dcf0      	bgt.n	3026 <_printf_i+0x1f6>
    3044:	e7e9      	b.n	301a <_printf_i+0x1ea>
    3046:	2500      	movs	r5, #0
    3048:	e7f7      	b.n	303a <_printf_i+0x20a>
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	0000355d 	.word	0x0000355d
    3050:	0000356e 	.word	0x0000356e

00003054 <memchr>:
    3054:	b2c9      	uxtb	r1, r1
    3056:	1882      	adds	r2, r0, r2
    3058:	4290      	cmp	r0, r2
    305a:	d101      	bne.n	3060 <memchr+0xc>
    305c:	2000      	movs	r0, #0
    305e:	4770      	bx	lr
    3060:	7803      	ldrb	r3, [r0, #0]
    3062:	428b      	cmp	r3, r1
    3064:	d0fb      	beq.n	305e <memchr+0xa>
    3066:	3001      	adds	r0, #1
    3068:	e7f6      	b.n	3058 <memchr+0x4>

0000306a <memmove>:
    306a:	b510      	push	{r4, lr}
    306c:	4288      	cmp	r0, r1
    306e:	d902      	bls.n	3076 <memmove+0xc>
    3070:	188b      	adds	r3, r1, r2
    3072:	4298      	cmp	r0, r3
    3074:	d303      	bcc.n	307e <memmove+0x14>
    3076:	2300      	movs	r3, #0
    3078:	e007      	b.n	308a <memmove+0x20>
    307a:	5c8b      	ldrb	r3, [r1, r2]
    307c:	5483      	strb	r3, [r0, r2]
    307e:	3a01      	subs	r2, #1
    3080:	d2fb      	bcs.n	307a <memmove+0x10>
    3082:	bd10      	pop	{r4, pc}
    3084:	5ccc      	ldrb	r4, [r1, r3]
    3086:	54c4      	strb	r4, [r0, r3]
    3088:	3301      	adds	r3, #1
    308a:	429a      	cmp	r2, r3
    308c:	d1fa      	bne.n	3084 <memmove+0x1a>
    308e:	e7f8      	b.n	3082 <memmove+0x18>

00003090 <_malloc_usable_size_r>:
    3090:	1f0b      	subs	r3, r1, #4
    3092:	681b      	ldr	r3, [r3, #0]
    3094:	1f18      	subs	r0, r3, #4
    3096:	2b00      	cmp	r3, #0
    3098:	da01      	bge.n	309e <_malloc_usable_size_r+0xe>
    309a:	580b      	ldr	r3, [r1, r0]
    309c:	18c0      	adds	r0, r0, r3
    309e:	4770      	bx	lr

000030a0 <__gnu_thumb1_case_shi>:
    30a0:	b403      	push	{r0, r1}
    30a2:	4671      	mov	r1, lr
    30a4:	0849      	lsrs	r1, r1, #1
    30a6:	0040      	lsls	r0, r0, #1
    30a8:	0049      	lsls	r1, r1, #1
    30aa:	5e09      	ldrsh	r1, [r1, r0]
    30ac:	0049      	lsls	r1, r1, #1
    30ae:	448e      	add	lr, r1
    30b0:	bc03      	pop	{r0, r1}
    30b2:	4770      	bx	lr
    30b4:	00003120 	.word	0x00003120
    30b8:	000004a9 	.word	0x000004a9
    30bc:	00000067 	.word	0x00000067
    30c0:	00003128 	.word	0x00003128
    30c4:	000007dd 	.word	0x000007dd
    30c8:	00000067 	.word	0x00000067
    30cc:	00003130 	.word	0x00003130
    30d0:	0000089d 	.word	0x0000089d
    30d4:	00000067 	.word	0x00000067
    30d8:	00000000 	.word	0x00000000
    30dc:	00000018 	.word	0x00000018
    30e0:	00000000 	.word	0x00000000
    30e4:	00000019 	.word	0x00000019
    30e8:	00000301 	.word	0x00000301
    30ec:	00000000 	.word	0x00000000
    30f0:	00000005 	.word	0x00000005
    30f4:	00000000 	.word	0x00000000
    30f8:	00000008 	.word	0x00000008
    30fc:	00000000 	.word	0x00000000
    3100:	00000009 	.word	0x00000009
    3104:	01010101 	.word	0x01010101
    3108:	00000001 	.word	0x00000001
    310c:	000032cc 	.word	0x000032cc
    3110:	0000129d 	.word	0x0000129d
    3114:	00000061 	.word	0x00000061
    3118:	4c554e00 	.word	0x4c554e00
    311c:	ffff004c 	.word	0xffff004c
    3120:	63657865 	.word	0x63657865
    3124:	00000000 	.word	0x00000000
    3128:	6e746573 	.word	0x6e746573
    312c:	00006d75 	.word	0x00006d75
    3130:	6e6c6564 	.word	0x6e6c6564
    3134:	ff006d75 	.word	0xff006d75
    3138:	ff005441 	.word	0xff005441
    313c:	30455441 	.word	0x30455441
    3140:	00000000 	.word	0x00000000
    3144:	4552432b 	.word	0x4552432b
    3148:	30203a47 	.word	0x30203a47
    314c:	0000312c 	.word	0x0000312c
    3150:	432b5441 	.word	0x432b5441
    3154:	3f474552 	.word	0x3f474552
    3158:	00000000 	.word	0x00000000
    315c:	432b5441 	.word	0x432b5441
    3160:	3d46474d 	.word	0x3d46474d
    3164:	00000031 	.word	0x00000031
    3168:	432b5441 	.word	0x432b5441
    316c:	4144474d 	.word	0x4144474d
    3170:	4544223d 	.word	0x4544223d
    3174:	4c41204c 	.word	0x4c41204c
    3178:	ff00224c 	.word	0xff00224c
    317c:	432b5441 	.word	0x432b5441
    3180:	3d53474d 	.word	0x3d53474d
    3184:	22732522 	.word	0x22732522
    3188:	00000000 	.word	0x00000000
    318c:	474d432b 	.word	0x474d432b
    3190:	00000053 	.word	0x00000053
    3194:	ffff001a 	.word	0xffff001a
    3198:	6d6d6f43 	.word	0x6d6d6f43
    319c:	20646e61 	.word	0x20646e61
    31a0:	656d6974 	.word	0x656d6974
    31a4:	756f2064 	.word	0x756f2064
    31a8:	00000074 	.word	0x00000074
    31ac:	74726175 	.word	0x74726175
    31b0:	65723e2d 	.word	0x65723e2d
    31b4:	29286461 	.word	0x29286461
    31b8:	74657220 	.word	0x74657220
    31bc:	656e7275 	.word	0x656e7275
    31c0:	756e2064 	.word	0x756e2064
    31c4:	ff006c6c 	.word	0xff006c6c
    31c8:	462b5441 	.word	0x462b5441
    31cc:	41455253 	.word	0x41455253
    31d0:	3a433d44 	.word	0x3a433d44
    31d4:	2e73255c 	.word	0x2e73255c
    31d8:	2c747874 	.word	0x2c747874
    31dc:	2c312c30 	.word	0x2c312c30
    31e0:	ffff0030 	.word	0xffff0030
    31e4:	432b5441 	.word	0x432b5441
    31e8:	3d52474d 	.word	0x3d52474d
    31ec:	00006425 	.word	0x00006425
    31f0:	474d432b 	.word	0x474d432b
    31f4:	00000052 	.word	0x00000052
    31f8:	0a0d0a0d 	.word	0x0a0d0a0d
    31fc:	00004b4f 	.word	0x00004b4f
    3200:	ff00222c 	.word	0xff00222c
    3204:	474e4952 	.word	0x474e4952
    3208:	00000000 	.word	0x00000000
    320c:	00485441 	.word	0x00485441
    3210:	544d432b 	.word	0x544d432b
    3214:	ffff0049 	.word	0xffff0049
    3218:	462b5441 	.word	0x462b5441
    321c:	45524353 	.word	0x45524353
    3220:	3d455441 	.word	0x3d455441
    3224:	255c3a43 	.word	0x255c3a43
    3228:	78742e73 	.word	0x78742e73
    322c:	00000074 	.word	0x00000074
    3230:	462b5441 	.word	0x462b5441
    3234:	49525753 	.word	0x49525753
    3238:	433d4554 	.word	0x433d4554
    323c:	73255c3a 	.word	0x73255c3a
    3240:	7478742e 	.word	0x7478742e
    3244:	312c302c 	.word	0x312c302c
    3248:	0000312c 	.word	0x0000312c
    324c:	0000003e 	.word	0x0000003e
    3250:	ff000a0d 	.word	0xff000a0d
    3254:	6c6c616d 	.word	0x6c6c616d
    3258:	6620636f 	.word	0x6620636f
    325c:	656c6961 	.word	0x656c6961
    3260:	00000064 	.word	0x00000064
    3264:	00000020 	.word	0x00000020
    3268:	67617355 	.word	0x67617355
    326c:	73203a65 	.word	0x73203a65
    3270:	756e7465 	.word	0x756e7465
    3274:	6e3c206d 	.word	0x6e3c206d
    3278:	65626d75 	.word	0x65626d75
    327c:	3c203e72 	.word	0x3c203e72
    3280:	6576656c 	.word	0x6576656c
    3284:	ff003e6c 	.word	0xff003e6c
    3288:	462b5441 	.word	0x462b5441
    328c:	4c454453 	.word	0x4c454453
    3290:	5c3a433d 	.word	0x5c3a433d
    3294:	742e7325 	.word	0x742e7325
    3298:	ff007478 	.word	0xff007478
    329c:	67617355 	.word	0x67617355
    32a0:	64203a65 	.word	0x64203a65
    32a4:	756e6c65 	.word	0x756e6c65
    32a8:	6e3c206d 	.word	0x6e3c206d
    32ac:	65626d75 	.word	0x65626d75
    32b0:	ff003e72 	.word	0xff003e72

000032b4 <_ZL10child_pipe>:
    32b4:	0d0c0b0a ffff0f0e                       ........

000032bc <_ZL17child_pipe_enable>:
    32bc:	03020100 ffff0504                       ........

000032c4 <_ZL18child_payload_size>:
    32c4:	14131211 ffff1615 6f666e69 ffffff00     ........info....
    32d4:	7473694c 00000a3a 65646f4e 49200a3a     List:...Node:. I
    32e4:	25203a44 4e200a64 3a656d61 0a732520     D: %d. Name: %s.
    32f4:	70795420 25203a65 4c200a64 20747361      Type: %d. Last 
    3304:	6e656573 6425203a 63657320 6f676120     seen: %d sec ago
    3314:	0000000a 696f5320 6f6d206c 75747369     .... Soil moistu
    3324:	73206572 6f736e65 200a3a72 696f4d20     re sensor:.  Moi
    3334:	72757473 25203a65 00000a64 6d655420     sture: %d... Tem
    3344:	61726570 65727574 68202b20 64696d75     perature + humid
    3354:	20797469 736e6573 0a3a726f 65542020     ity sensor:.  Te
    3364:	7265706d 72757461 25203a65 20200a64     mperature: %d.  
    3374:	696d7548 79746964 6425203a 0000000a     Humidity: %d....
    3384:	6d655420 61726570 65727574 6e657320      Temperature sen
    3394:	3a726f73 5420200a 65706d65 75746172     sor:.  Temperatu
    33a4:	203a6572 000a6425 6e746573 00656d61     re: %d..setname.
    33b4:	61656c63 ffff0072 6d6d6f43 20646e61     clear...Command 
    33c4:	75657571 00006465 67617355 73203a65     queued..Usage: s
    33d4:	616e7465 3c20656d 203e6469 77656e3c     etname <id> <new
    33e4:	6d616e20                                  name>.

000033eb <_ctype_>:
    33eb:	20202000 20202020 28282020 20282828     .         ((((( 
    33fb:	20202020 20202020 20202020 20202020                     
    340b:	10108820 10101010 10101010 10101010      ...............
    341b:	04040410 04040404 10040404 10101010     ................
    342b:	41411010 41414141 01010101 01010101     ..AAAAAA........
    343b:	01010101 01010101 01010101 10101010     ................
    344b:	42421010 42424242 02020202 02020202     ..BBBBBB........
    345b:	02020202 02020202 02020202 10101010     ................
    346b:	00000020 00000000 00000000 00000000      ...............
	...

000034ec <__sf_fake_stderr>:
	...

0000350c <__sf_fake_stdin>:
	...

0000352c <__sf_fake_stdout>:
	...
    354c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    355c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    356c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    357c:	ff006665                                ef..

00003580 <_init>:
    3580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3586:	bc08      	pop	{r3}
    3588:	469e      	mov	lr, r3
    358a:	4770      	bx	lr

0000358c <__init_array_start>:
    358c:	000000b5 	.word	0x000000b5
    3590:	0000151d 	.word	0x0000151d
    3594:	000017c9 	.word	0x000017c9
    3598:	00001ecd 	.word	0x00001ecd

0000359c <_fini>:
    359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    359e:	46c0      	nop			; (mov r8, r8)
    35a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    35a2:	bc08      	pop	{r3}
    35a4:	469e      	mov	lr, r3
    35a6:	4770      	bx	lr

000035a8 <__delay_usec_veneer>:
    35a8:	b401      	push	{r0}
    35aa:	4802      	ldr	r0, [pc, #8]	; (35b4 <__delay_usec_veneer+0xc>)
    35ac:	4684      	mov	ip, r0
    35ae:	bc01      	pop	{r0}
    35b0:	4760      	bx	ip
    35b2:	bf00      	nop
    35b4:	20000001 	.word	0x20000001

000035b8 <__fini_array_start>:
    35b8:	0000008d 	.word	0x0000008d

Disassembly of section .data:

20000000 <delay_usec>:
	__asm (
20000000:	210f      	movs	r1, #15

20000002 <mydelay1>:
20000002:	3901      	subs	r1, #1
20000004:	d1fd      	bne.n	20000002 <mydelay1>
20000006:	3801      	subs	r0, #1
20000008:	d1fa      	bne.n	20000000 <delay_usec>
}
2000000a:	4770      	bx	lr

2000000c <__dso_handle>:
2000000c:	0000 0000                                   ....

20000010 <_ZN3Str11EmptyBufferE>:
20000010:	3118 0000                                   .1..

20000014 <_impure_ptr>:
20000014:	0018 2000                                   ... 

20000018 <impure_data>:
20000018:	0000 0000 350c 0000 352c 0000 34ec 0000     .....5..,5...4..
	...
