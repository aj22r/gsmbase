
build/gsmbase.elf:     file format elf32-littlearm
build/gsmbase.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000b5d

Program Header:
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00001ca4 memsz 0x00001ca4 flags r-x
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x00001ca4 align 2**16
         filesz 0x00000074 memsz 0x00000074 flags rwx
    LOAD off    0x00020078 vaddr 0x20000078 paddr 0x00001d18 align 2**16
         filesz 0x00000000 memsz 0x00000464 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ca4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  20000000  00001ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000464  20000078  00001d18  00020078  2**3
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  4 .comment      00000079  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  5 .debug_info   00021f19  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000025f5  00000000  00000000  0004202e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00001219  00000000  00000000  00044623  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000200  00000000  00000000  0004583c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000002f0  00000000  00000000  00045a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002a38  00000000  00000000  00045d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000c2b5  00000000  00000000  00048764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000cb0  00000000  00000000  00054a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000078 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_samd10.c
00000000 l    df *ABS*	00000000 crtstuff.c
0000008c l     F .text	00000000 __do_global_dtors_aux
20000078 l       .bss	00000001 completed.8911
00001ca0 l     O .text	00000000 __do_global_dtors_aux_fini_array_entry
000000b4 l     F .text	00000000 frame_dummy
2000007c l       .bss	00000018 object.8916
00001c78 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 GSM.cpp
00000000 l    df *ABS*	00000000 main.cpp
000003b4 l     F .text	00000040 _Z41__static_initialization_and_destruction_0ii
0000045c l     F .text	00000010 _GLOBAL__sub_I_main
20000094 l     O .bss	0000000c _ZL3gsm
00000000 l    df *ABS*	00000000 systick.c
0000046c l     F .text	00000144 initializeSystemFor48MHz
20000000 l       .data	00000000 mydelay
20000002 l       .data	00000000 mydelay1
200000a0 l     O .bss	00000008 _cycles
00000000 l    df *ABS*	00000000 uart.cpp
00000644 l     F .text	00000058 _Z41__static_initialization_and_destruction_0ii
00000b48 l     F .text	00000010 _GLOBAL__sub_I_g_uart0
00000000 l    df *ABS*	00000000 syscalls.c
200004c0 l     O .bss	00000004 heap.4639
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtol.c
00001618 l     F .text	00000104 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
00001724 l     F .text	00000118 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 _thumb1_case_shi.o
00000000 l    df *ABS*	00000000 _udivsi3.o
0000195c l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000014 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00001c90 l     F .text	00000010 __delay_usec_veneer
00001938 g     F .text	00000010 _malloc_usable_size_r
000012dc g     F .text	000000bc _scanf_chars
00000210 g     F .text	0000007c _ZN3GSM7PowerOnEv
00000b58  w    F .text	00000002 DMAC_Handler
200004d0 g     O .bss	00000001 __lock___atexit_recursive_mutex
00000b58  w    F .text	00000002 HardFault_Handler
00000b58  w    F .text	00000002 TC2_Handler
00000f24 g     F .text	00000010 __malloc_unlock
00000b58  w    F .text	00000002 AC_Handler
00000628 g     F .text	0000001c SysTick_Handler
200004d1 g     O .bss	00000001 __lock___arc4random_mutex
00000b58  w    F .text	00000002 PendSV_Handler
00000b58  w    F .text	00000002 NMI_Handler
00000000 g       .text	00000000 _sfixed
00000b38 g     F .text	00000010 SERCOM1_Handler
00000b58  w    F .text	00000002 ADC_Handler
200004cc g     O .bss	00000004 errno
00001398 g     F .text	00000208 _scanf_i
00000ed4 g     F .text	00000004 __seofread
00001ca4 g       .data	00000000 _etext
20001000 g       .text	00000000 __top_ram
000018da g     F .text	00000012 memcpy
0000011c g     F .text	00000002 _ZN3GSMD1Ev
00000b58  w    F .text	00000002 SERCOM2_Handler
00001ca4 g       .text	00000000 __fini_array_end
00000b58  w    F .text	00000002 TCC0_Handler
00000ce8 g     F .text	00000014 malloc
0000195c g     F .text	0000010a .hidden __udivsi3
00000980 g     F .text	0000008c _ZN6uart_t4peekEi
00000b58  w    F .text	00000002 RTC_Handler
00000fac g     F .text	0000003e __ssrefill_r
2000000c g     O .data	00000000 .hidden __dso_handle
00000914 g     F .text	0000002c _ZN6uart_t7rxemptyEv
00000e60 g     F .text	00000024 _sbrk_r
200000a8 g     O .bss	0000020c g_uart0
00000b58  w    F .text	00000002 EIC_Handler
00000fec g     F .text	000002f0 __ssvfscanf_r
00000b58  w    F .text	00000002 WDT_Handler
200004d2 g     O .bss	00000001 __lock___env_recursive_mutex
200004d3 g     O .bss	00000001 __lock___sinit_recursive_mutex
00000c34 g     F .text	00000050 .hidden __aeabi_lmul
000018ec g     F .text	0000004c _realloc_r
00000ca0 g     F .text	00000048 __libc_init_array
00000c00 g     F .text	00000024 _sbrk
00000b58  w    F .text	00000002 TC1_Handler
00001c6c g     F .text	00000000 _init
00004000 g       .text	00000000 __top_flash
200004dc g       .bss	00000000 _ebss
00000b5c g     F .text	000000a4 Reset_Handler
200004d4 g     O .bss	00000001 __lock___malloc_recursive_mutex
20001000 g       *ABS*	00000000 _stack_top
00000b58 g     F .text	00000002 Dummy_Handler
00001c0c g     O .text	00000020 __sf_fake_stderr
000018c2 g     F .text	00000002 __retarget_lock_release_recursive
000002fc g     F .text	000000b8 _ZN3GSM4PollEv
000018c4 g     F .text	00000016 memchr
00000d10 g     F .text	00000094 _free_r
00001948 g     F .text	00000014 .hidden __gnu_thumb1_case_shi
20000078 g       .bss	00000000 _bss
00000f34 g     F .text	00000078 _sungetc_r
00000ee6 g     F .text	0000002c strstr
200002b4 g     O .bss	0000020c g_uart1
00000b58  w    F .text	00000002 PM_Handler
000005ec g     F .text	00000024 systick_cycles
000005b0 g     F .text	0000003c systick_init
0000028c g     F .text	00000070 _ZN3GSM4InitEv
0000011c g     F .text	00000002 _ZN3GSMD2Ev
000008f0 g     F .text	00000024 _ZN6uart_t5printEPKc
00000940 g     F .text	00000040 _ZN6uart_t4getcEv
0000183c g     F .text	00000008 _strtoul_r
00000c84 g     F .text	0000001c __cxa_atexit
00000e84 g     F .text	00000050 sscanf
00001a70  w    F .text	00000002 .hidden __aeabi_ldiv0
00000f14 g     F .text	00000010 __malloc_lock
00001ca0 g       .text	00000000 __fini_array_start
00001c2c g     O .text	00000020 __sf_fake_stdin
000018c0 g     F .text	00000002 __retarget_lock_acquire_recursive
000003f4 g     F .text	00000068 main
0000195c g     F .text	00000000 .hidden __aeabi_uidiv
00000b58  w    F .text	00000002 SVC_Handler
20000000 g     F .data	0000000c delay_usec
0000171c g     F .text	00000008 _strtol_r
00000b58  w    F .text	00000002 EVSYS_Handler
00001c84 g       .text	00000000 __init_array_end
00000da4 g     F .text	000000bc _malloc_r
00001844 g     F .text	0000007c __submore
00000e84 g     F .text	00000050 siscanf
00000b58  w    F .text	00000002 NVMCTRL_Handler
00001c84 g     F .text	00000000 _fini
00000aa4 g     F .text	00000084 _ZN6uart_t4readEv
0000069c g     F .text	000001e8 _ZN6uart_t4initERK13uart_pincfg_tt
00000a0c g     F .text	00000098 _ZN6uart_t4findEPKc
00000b28 g     F .text	00000010 SERCOM0_Handler
20000010 g     O .data	00000004 _impure_ptr
00001c78 g       .text	00000000 __preinit_array_end
20000000 g       .data	00000000 _data
00000000 g     O .text	0000008c exception_table
00000b58  w    F .text	00000002 DAC_Handler
00000fec g     F .text	000002f0 __ssvfiscanf_r
00001a68 g     F .text	00000008 .hidden __aeabi_uidivmod
20000074 g       .data	00000000 _edata
200004dc g       .bss	00000000 _end
200004d5 g     O .bss	00000001 __lock___at_quick_exit_mutex
00000b58  w    F .text	00000002 PTC_Handler
000001cc g     F .text	00000044 _ZN3GSM13RepeatCommandEPKcS1_ii
000008d4 g     F .text	0000001c _ZN6uart_t5writeEc
00001c4c g     O .text	00000020 __sf_fake_stdout
000015a0 g     F .text	00000078 __sccl
00001b09 g     O .text	00000101 _ctype_
00001a70  w    F .text	00000002 .hidden __aeabi_idiv0
00001c78 g       .text	00000000 __init_array_start
00000c34 g     F .text	00000050 .hidden __muldi3
200004d6 g     O .bss	00000001 __lock___dd_hash_mutex
200004d7 g     O .bss	00000001 __lock___tz_mutex
000000d4 g     F .text	00000048 _ZN3GSMC2E6gpio_tP6uart_t
00000ed8 g     F .text	0000000e strlen
200004c8 g     O .bss	00000004 __malloc_sbrk_start
000000d4 g     F .text	00000048 _ZN3GSMC1E6gpio_tP6uart_t
200004c4 g     O .bss	00000004 __malloc_free_list
00001c78 g       .text	00000000 __preinit_array_start
00000c24 g     F .text	0000000e __aeabi_atexit
00000610 g     F .text	00000018 millis
00000120 g     F .text	000000ac _ZN3GSM7CommandEPKcS1_i
00000884 g     F .text	00000050 _ZN6uart_t14sercom_handlerEv
200004d8 g     O .bss	00000001 __lock___sfp_recursive_mutex
00000cfc g     F .text	00000014 free
00000b58  w    F .text	00000002 SYSCTRL_Handler



Disassembly of section .text:

00000000 <exception_table>:
       0:	00 10 00 20 5d 0b 00 00 59 0b 00 00 59 0b 00 00     ... ]...Y...Y...
	...
      2c:	59 0b 00 00 00 00 00 00 00 00 00 00 59 0b 00 00     Y...........Y...
      3c:	29 06 00 00 59 0b 00 00 59 0b 00 00 59 0b 00 00     )...Y...Y...Y...
      4c:	59 0b 00 00 59 0b 00 00 59 0b 00 00 59 0b 00 00     Y...Y...Y...Y...
      5c:	00 00 00 00 59 0b 00 00 29 0b 00 00 39 0b 00 00     ....Y...)...9...
      6c:	59 0b 00 00 59 0b 00 00 59 0b 00 00 59 0b 00 00     Y...Y...Y...Y...
      7c:	59 0b 00 00 59 0b 00 00 59 0b 00 00 59 0b 00 00     Y...Y...Y...Y...

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000078 	.word	0x20000078
      ac:	00000000 	.word	0x00000000
      b0:	00001ca4 	.word	0x00001ca4

000000b4 <frame_dummy>:
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <frame_dummy+0x14>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4903      	ldr	r1, [pc, #12]	; (cc <frame_dummy+0x18>)
      be:	4804      	ldr	r0, [pc, #16]	; (d0 <frame_dummy+0x1c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	bd10      	pop	{r4, pc}
      c6:	46c0      	nop			; (mov r8, r8)
      c8:	00000000 	.word	0x00000000
      cc:	2000007c 	.word	0x2000007c
      d0:	00001ca4 	.word	0x00001ca4

000000d4 <_ZN3GSMC1E6gpio_tP6uart_t>:
#include <string.h>
extern "C" {
#include <systick.h>
}

GSM::GSM(const gpio_t pwrkey, uart_t* uart) :
      d4:	b570      	push	{r4, r5, r6, lr}
      d6:	b082      	sub	sp, #8
      d8:	466c      	mov	r4, sp
      da:	9100      	str	r1, [sp, #0]
      dc:	6062      	str	r2, [r4, #4]
    m_pwrkey(pwrkey), m_uart(uart)
      de:	0002      	movs	r2, r0
      e0:	0021      	movs	r1, r4
      e2:	c960      	ldmia	r1!, {r5, r6}
      e4:	c260      	stmia	r2!, {r5, r6}
      e6:	6083      	str	r3, [r0, #8]
        } else {
            PORT->Group[port].DIRSET.reg = 1 << pin;
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
        }
    }
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
      e8:	6861      	ldr	r1, [r4, #4]
            PORT->Group[port].DIRSET.reg = 1 << pin;
      ea:	2201      	movs	r2, #1
      ec:	0014      	movs	r4, r2
      ee:	408c      	lsls	r4, r1
      f0:	6803      	ldr	r3, [r0, #0]
      f2:	01db      	lsls	r3, r3, #7
      f4:	4d08      	ldr	r5, [pc, #32]	; (118 <_ZN3GSMC1E6gpio_tP6uart_t+0x44>)
      f6:	46ac      	mov	ip, r5
      f8:	4463      	add	r3, ip
      fa:	609c      	str	r4, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
      fc:	185b      	adds	r3, r3, r1
      fe:	3340      	adds	r3, #64	; 0x40
     100:	7819      	ldrb	r1, [r3, #0]
     102:	2402      	movs	r4, #2
     104:	43a1      	bics	r1, r4
     106:	7019      	strb	r1, [r3, #0]
    }
    inline void drvstr(const gpio_t& gp, const bool en) { drvstr(gp.port, gp.pin, en); }

    inline void set(const int port, const int pin, const bool en) {
        if(en)
            PORT->Group[port].OUTSET.reg = 1 << pin;
     108:	6843      	ldr	r3, [r0, #4]
     10a:	409a      	lsls	r2, r3
     10c:	6803      	ldr	r3, [r0, #0]
     10e:	01db      	lsls	r3, r3, #7
     110:	4463      	add	r3, ip
     112:	619a      	str	r2, [r3, #24]
{
    gpio::mode(m_pwrkey, GPIO_DIR_OUT); // Set pwrkey pin to output
    gpio::set(m_pwrkey, true); // Set pwrkey to high
}
     114:	b002      	add	sp, #8
     116:	bd70      	pop	{r4, r5, r6, pc}
     118:	41004400 	.word	0x41004400

0000011c <_ZN3GSMD1Ev>:

GSM::~GSM() {
    
}
     11c:	4770      	bx	lr
     11e:	Address 0x0000011e is out of bounds.


00000120 <_ZN3GSM7CommandEPKcS1_i>:

bool GSM::Command(const char* cmd, const char* result, int response_time) {
     120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     122:	0004      	movs	r4, r0
     124:	0017      	movs	r7, r2
     126:	001e      	movs	r6, r3
    uint32_t start;

    m_uart->flush_rx();
     128:	6883      	ldr	r3, [r0, #8]
    // Allocates a buffer and reads all available data into it
    char* read();

    bool rxempty();
    void flush_rx() {
        m_rxhead = 0;
     12a:	2200      	movs	r2, #0
     12c:	2081      	movs	r0, #129	; 0x81
     12e:	0080      	lsls	r0, r0, #2
     130:	521a      	strh	r2, [r3, r0]
        m_rxtail = 0;
     132:	4824      	ldr	r0, [pc, #144]	; (1c4 <_ZN3GSM7CommandEPKcS1_i+0xa4>)
     134:	521a      	strh	r2, [r3, r0]
        m_rxfull = false;
     136:	2000      	movs	r0, #0
     138:	2282      	movs	r2, #130	; 0x82
     13a:	0092      	lsls	r2, r2, #2
     13c:	5498      	strb	r0, [r3, r2]

    m_uart->print(cmd);
     13e:	68a0      	ldr	r0, [r4, #8]
     140:	f000 fbd6 	bl	8f0 <_ZN6uart_t5printEPKc>
    m_uart->write('\r');
     144:	210d      	movs	r1, #13
     146:	68a0      	ldr	r0, [r4, #8]
     148:	f000 fbc4 	bl	8d4 <_ZN6uart_t5writeEc>
    // Allow up to response_time milliseconds to get a response
    start = millis();
     14c:	f000 fa60 	bl	610 <millis>
     150:	0005      	movs	r5, r0
     152:	e012      	b.n	17a <_ZN3GSM7CommandEPKcS1_i+0x5a>
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
            return m_rxhead - m_rxtail;
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     154:	2281      	movs	r2, #129	; 0x81
     156:	0092      	lsls	r2, r2, #2
     158:	5a99      	ldrh	r1, [r3, r2]
     15a:	4a1a      	ldr	r2, [pc, #104]	; (1c4 <_ZN3GSM7CommandEPKcS1_i+0xa4>)
     15c:	5a9b      	ldrh	r3, [r3, r2]
     15e:	1ac9      	subs	r1, r1, r3
     160:	b289      	uxth	r1, r1
     162:	2380      	movs	r3, #128	; 0x80
     164:	009b      	lsls	r3, r3, #2
     166:	469c      	mov	ip, r3
     168:	4461      	add	r1, ip
     16a:	b289      	uxth	r1, r1
    while(!m_uart->available())
     16c:	2900      	cmp	r1, #0
     16e:	d116      	bne.n	19e <_ZN3GSM7CommandEPKcS1_i+0x7e>
        if(millis() - start >= response_time)
     170:	f000 fa4e 	bl	610 <millis>
     174:	1b40      	subs	r0, r0, r5
     176:	42b0      	cmp	r0, r6
     178:	d21f      	bcs.n	1ba <_ZN3GSM7CommandEPKcS1_i+0x9a>
    while(!m_uart->available())
     17a:	68a3      	ldr	r3, [r4, #8]
        if(m_rxhead >= m_rxtail)
     17c:	2281      	movs	r2, #129	; 0x81
     17e:	0092      	lsls	r2, r2, #2
     180:	5a99      	ldrh	r1, [r3, r2]
     182:	b289      	uxth	r1, r1
     184:	4a0f      	ldr	r2, [pc, #60]	; (1c4 <_ZN3GSM7CommandEPKcS1_i+0xa4>)
     186:	5a9a      	ldrh	r2, [r3, r2]
     188:	b292      	uxth	r2, r2
     18a:	4291      	cmp	r1, r2
     18c:	d3e2      	bcc.n	154 <_ZN3GSM7CommandEPKcS1_i+0x34>
            return m_rxhead - m_rxtail;
     18e:	2281      	movs	r2, #129	; 0x81
     190:	0092      	lsls	r2, r2, #2
     192:	5a99      	ldrh	r1, [r3, r2]
     194:	4a0b      	ldr	r2, [pc, #44]	; (1c4 <_ZN3GSM7CommandEPKcS1_i+0xa4>)
     196:	5a9b      	ldrh	r3, [r3, r2]
     198:	1ac9      	subs	r1, r1, r3
     19a:	b289      	uxth	r1, r1
     19c:	e7e6      	b.n	16c <_ZN3GSM7CommandEPKcS1_i+0x4c>
            return false;
    
    delay_usec(100000); // wait 100 ms to get the whole response
     19e:	480a      	ldr	r0, [pc, #40]	; (1c8 <_ZN3GSM7CommandEPKcS1_i+0xa8>)
     1a0:	f001 fd76 	bl	1c90 <__delay_usec_veneer>

    if(!result) return true;
     1a4:	2f00      	cmp	r7, #0
     1a6:	d00a      	beq.n	1be <_ZN3GSM7CommandEPKcS1_i+0x9e>
    return m_uart->find(result) != -1;
     1a8:	68a0      	ldr	r0, [r4, #8]
     1aa:	0039      	movs	r1, r7
     1ac:	f000 fc2e 	bl	a0c <_ZN6uart_t4findEPKc>
     1b0:	3001      	adds	r0, #1
     1b2:	1e43      	subs	r3, r0, #1
     1b4:	4198      	sbcs	r0, r3
     1b6:	b2c0      	uxtb	r0, r0
     1b8:	e000      	b.n	1bc <_ZN3GSM7CommandEPKcS1_i+0x9c>
            return false;
     1ba:	2000      	movs	r0, #0
}
     1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!result) return true;
     1be:	2001      	movs	r0, #1
     1c0:	e7fc      	b.n	1bc <_ZN3GSM7CommandEPKcS1_i+0x9c>
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	00000206 	.word	0x00000206
     1c8:	000186a0 	.word	0x000186a0

000001cc <_ZN3GSM13RepeatCommandEPKcS1_ii>:

bool GSM::RepeatCommand(const char* cmd, const char* result, int repeats, int response_time) {
     1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1ce:	46ce      	mov	lr, r9
     1d0:	4647      	mov	r7, r8
     1d2:	b580      	push	{r7, lr}
     1d4:	4680      	mov	r8, r0
     1d6:	000f      	movs	r7, r1
     1d8:	0016      	movs	r6, r2
     1da:	001d      	movs	r5, r3
     1dc:	9b08      	ldr	r3, [sp, #32]
     1de:	4699      	mov	r9, r3
    for(int i = 0; i < repeats; i++) {
     1e0:	2400      	movs	r4, #0
     1e2:	42ac      	cmp	r4, r5
     1e4:	da0c      	bge.n	200 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x34>
        if(Command(cmd, result, response_time))
     1e6:	464b      	mov	r3, r9
     1e8:	0032      	movs	r2, r6
     1ea:	0039      	movs	r1, r7
     1ec:	4640      	mov	r0, r8
     1ee:	f7ff ff97 	bl	120 <_ZN3GSM7CommandEPKcS1_i>
     1f2:	2800      	cmp	r0, #0
     1f4:	d105      	bne.n	202 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x36>
            return true;
        
        delay_usec(500000);
     1f6:	4805      	ldr	r0, [pc, #20]	; (20c <_ZN3GSM13RepeatCommandEPKcS1_ii+0x40>)
     1f8:	f001 fd4a 	bl	1c90 <__delay_usec_veneer>
    for(int i = 0; i < repeats; i++) {
     1fc:	3401      	adds	r4, #1
     1fe:	e7f0      	b.n	1e2 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x16>
    }
    return false;
     200:	2000      	movs	r0, #0
}
     202:	bc0c      	pop	{r2, r3}
     204:	4690      	mov	r8, r2
     206:	4699      	mov	r9, r3
     208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	0007a120 	.word	0x0007a120

00000210 <_ZN3GSM7PowerOnEv>:

bool GSM::PowerOn() {
     210:	b5f0      	push	{r4, r5, r6, r7, lr}
     212:	b083      	sub	sp, #12
     214:	0004      	movs	r4, r0
    m_uart->write('\r');
     216:	210d      	movs	r1, #13
     218:	6880      	ldr	r0, [r0, #8]
     21a:	f000 fb5b 	bl	8d4 <_ZN6uart_t5writeEc>
    
    // Fail after 3 attempts to power cycle
    for(int i = 0; i < 3; i++) {
     21e:	2600      	movs	r6, #0
     220:	e000      	b.n	224 <_ZN3GSM7PowerOnEv+0x14>
     222:	3601      	adds	r6, #1
     224:	2e02      	cmp	r6, #2
     226:	dc25      	bgt.n	274 <_ZN3GSM7PowerOnEv+0x64>
        else
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     228:	2501      	movs	r5, #1
     22a:	002a      	movs	r2, r5
     22c:	6863      	ldr	r3, [r4, #4]
     22e:	409a      	lsls	r2, r3
     230:	6823      	ldr	r3, [r4, #0]
     232:	01db      	lsls	r3, r3, #7
     234:	4911      	ldr	r1, [pc, #68]	; (27c <_ZN3GSM7PowerOnEv+0x6c>)
     236:	468c      	mov	ip, r1
     238:	4463      	add	r3, ip
     23a:	615a      	str	r2, [r3, #20]
        gpio::set(m_pwrkey, false); // Set pwrkey to low
        delay_usec(1000000); // Wait for SIM800C to register it
     23c:	4f10      	ldr	r7, [pc, #64]	; (280 <_ZN3GSM7PowerOnEv+0x70>)
     23e:	0038      	movs	r0, r7
     240:	f001 fd26 	bl	1c90 <__delay_usec_veneer>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     244:	6863      	ldr	r3, [r4, #4]
     246:	409d      	lsls	r5, r3
     248:	6823      	ldr	r3, [r4, #0]
     24a:	01db      	lsls	r3, r3, #7
     24c:	4a0b      	ldr	r2, [pc, #44]	; (27c <_ZN3GSM7PowerOnEv+0x6c>)
     24e:	4694      	mov	ip, r2
     250:	4463      	add	r3, ip
     252:	619d      	str	r5, [r3, #24]
        gpio::set(m_pwrkey, true); // Set pwrkey to high
        delay_usec(1000000);
     254:	0038      	movs	r0, r7
     256:	f001 fd1b 	bl	1c90 <__delay_usec_veneer>

        // Wait for response to AT command
        if(RepeatCommand("AT", "OK", 6, 500))
     25a:	23fa      	movs	r3, #250	; 0xfa
     25c:	005b      	lsls	r3, r3, #1
     25e:	9300      	str	r3, [sp, #0]
     260:	3bef      	subs	r3, #239	; 0xef
     262:	3bff      	subs	r3, #255	; 0xff
     264:	4a07      	ldr	r2, [pc, #28]	; (284 <_ZN3GSM7PowerOnEv+0x74>)
     266:	4908      	ldr	r1, [pc, #32]	; (288 <_ZN3GSM7PowerOnEv+0x78>)
     268:	0020      	movs	r0, r4
     26a:	f7ff ffaf 	bl	1cc <_ZN3GSM13RepeatCommandEPKcS1_ii>
     26e:	2800      	cmp	r0, #0
     270:	d0d7      	beq.n	222 <_ZN3GSM7PowerOnEv+0x12>
     272:	e000      	b.n	276 <_ZN3GSM7PowerOnEv+0x66>
            return true;
    }
    return false;
     274:	2000      	movs	r0, #0
}
     276:	b003      	add	sp, #12
     278:	bdf0      	pop	{r4, r5, r6, r7, pc}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	41004400 	.word	0x41004400
     280:	000f4240 	.word	0x000f4240
     284:	00001a94 	.word	0x00001a94
     288:	00001a98 	.word	0x00001a98

0000028c <_ZN3GSM4InitEv>:

bool GSM::Init() {
     28c:	b530      	push	{r4, r5, lr}
     28e:	b083      	sub	sp, #12
     290:	0005      	movs	r5, r0
    if(!PowerOn())
     292:	f7ff ffbd 	bl	210 <_ZN3GSM7PowerOnEv>
     296:	1e04      	subs	r4, r0, #0
     298:	d102      	bne.n	2a0 <_ZN3GSM4InitEv+0x14>
    Command("AT+CMGF=1"); // SMS text mode

    m_uart->flush_rx();

    return true;
}
     29a:	0020      	movs	r0, r4
     29c:	b003      	add	sp, #12
     29e:	bd30      	pop	{r4, r5, pc}
    Command("ATE0");
     2a0:	4c10      	ldr	r4, [pc, #64]	; (2e4 <_ZN3GSM4InitEv+0x58>)
     2a2:	0023      	movs	r3, r4
     2a4:	2200      	movs	r2, #0
     2a6:	4910      	ldr	r1, [pc, #64]	; (2e8 <_ZN3GSM4InitEv+0x5c>)
     2a8:	0028      	movs	r0, r5
     2aa:	f7ff ff39 	bl	120 <_ZN3GSM7CommandEPKcS1_i>
    if(!RepeatCommand("AT+CREG?", "+CREG: 0,1", 25))
     2ae:	9400      	str	r4, [sp, #0]
     2b0:	2319      	movs	r3, #25
     2b2:	4a0e      	ldr	r2, [pc, #56]	; (2ec <_ZN3GSM4InitEv+0x60>)
     2b4:	490e      	ldr	r1, [pc, #56]	; (2f0 <_ZN3GSM4InitEv+0x64>)
     2b6:	0028      	movs	r0, r5
     2b8:	f7ff ff88 	bl	1cc <_ZN3GSM13RepeatCommandEPKcS1_ii>
     2bc:	1e04      	subs	r4, r0, #0
     2be:	d0ec      	beq.n	29a <_ZN3GSM4InitEv+0xe>
    Command("AT+CMGF=1"); // SMS text mode
     2c0:	4b08      	ldr	r3, [pc, #32]	; (2e4 <_ZN3GSM4InitEv+0x58>)
     2c2:	2200      	movs	r2, #0
     2c4:	490b      	ldr	r1, [pc, #44]	; (2f4 <_ZN3GSM4InitEv+0x68>)
     2c6:	0028      	movs	r0, r5
     2c8:	f7ff ff2a 	bl	120 <_ZN3GSM7CommandEPKcS1_i>
    m_uart->flush_rx();
     2cc:	68ab      	ldr	r3, [r5, #8]
        m_rxhead = 0;
     2ce:	2200      	movs	r2, #0
     2d0:	2181      	movs	r1, #129	; 0x81
     2d2:	0089      	lsls	r1, r1, #2
     2d4:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     2d6:	4908      	ldr	r1, [pc, #32]	; (2f8 <_ZN3GSM4InitEv+0x6c>)
     2d8:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     2da:	2100      	movs	r1, #0
     2dc:	2282      	movs	r2, #130	; 0x82
     2de:	0092      	lsls	r2, r2, #2
     2e0:	5499      	strb	r1, [r3, r2]
    return true;
     2e2:	e7da      	b.n	29a <_ZN3GSM4InitEv+0xe>
     2e4:	00000bb8 	.word	0x00000bb8
     2e8:	00001a9c 	.word	0x00001a9c
     2ec:	00001aa4 	.word	0x00001aa4
     2f0:	00001ab0 	.word	0x00001ab0
     2f4:	00001abc 	.word	0x00001abc
     2f8:	00000206 	.word	0x00000206

000002fc <_ZN3GSM4PollEv>:

void GSM::Poll() {
     2fc:	b530      	push	{r4, r5, lr}
     2fe:	b083      	sub	sp, #12
     300:	0004      	movs	r4, r0
    if(!m_uart->available()) return;
     302:	6882      	ldr	r2, [r0, #8]
        if(m_rxhead >= m_rxtail)
     304:	2381      	movs	r3, #129	; 0x81
     306:	009b      	lsls	r3, r3, #2
     308:	5ad1      	ldrh	r1, [r2, r3]
     30a:	b289      	uxth	r1, r1
     30c:	4b22      	ldr	r3, [pc, #136]	; (398 <_ZN3GSM4PollEv+0x9c>)
     30e:	5ad3      	ldrh	r3, [r2, r3]
     310:	b29b      	uxth	r3, r3
     312:	4299      	cmp	r1, r3
     314:	d30a      	bcc.n	32c <_ZN3GSM4PollEv+0x30>
            return m_rxhead - m_rxtail;
     316:	2381      	movs	r3, #129	; 0x81
     318:	009b      	lsls	r3, r3, #2
     31a:	5ad3      	ldrh	r3, [r2, r3]
     31c:	491e      	ldr	r1, [pc, #120]	; (398 <_ZN3GSM4PollEv+0x9c>)
     31e:	5a52      	ldrh	r2, [r2, r1]
     320:	1a9b      	subs	r3, r3, r2
     322:	b29b      	uxth	r3, r3
     324:	2b00      	cmp	r3, #0
     326:	d10e      	bne.n	346 <_ZN3GSM4PollEv+0x4a>
        sscanf(strstr(data, "+CMTI"), "+CMTI: %*s %d", &idx);
        if(idx != -1) ProcessSMS(idx);
    }

    free(data);
}
     328:	b003      	add	sp, #12
     32a:	bd30      	pop	{r4, r5, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     32c:	2381      	movs	r3, #129	; 0x81
     32e:	009b      	lsls	r3, r3, #2
     330:	5ad3      	ldrh	r3, [r2, r3]
     332:	4919      	ldr	r1, [pc, #100]	; (398 <_ZN3GSM4PollEv+0x9c>)
     334:	5a52      	ldrh	r2, [r2, r1]
     336:	1a9b      	subs	r3, r3, r2
     338:	b29b      	uxth	r3, r3
     33a:	2280      	movs	r2, #128	; 0x80
     33c:	0092      	lsls	r2, r2, #2
     33e:	4694      	mov	ip, r2
     340:	4463      	add	r3, ip
     342:	b29b      	uxth	r3, r3
     344:	e7ee      	b.n	324 <_ZN3GSM4PollEv+0x28>
    delay_usec(100000);
     346:	4815      	ldr	r0, [pc, #84]	; (39c <_ZN3GSM4PollEv+0xa0>)
     348:	f001 fca2 	bl	1c90 <__delay_usec_veneer>
    char* data = m_uart->read();
     34c:	68a0      	ldr	r0, [r4, #8]
     34e:	f000 fba9 	bl	aa4 <_ZN6uart_t4readEv>
     352:	0005      	movs	r5, r0
    asm volatile("nop");
     354:	46c0      	nop			; (mov r8, r8)
    if(strstr(data, "RING")) {
     356:	4912      	ldr	r1, [pc, #72]	; (3a0 <_ZN3GSM4PollEv+0xa4>)
     358:	f000 fdc5 	bl	ee6 <strstr>
     35c:	2800      	cmp	r0, #0
     35e:	d009      	beq.n	374 <_ZN3GSM4PollEv+0x78>
        Command("ATH"); // Disconnect call
     360:	4b10      	ldr	r3, [pc, #64]	; (3a4 <_ZN3GSM4PollEv+0xa8>)
     362:	2200      	movs	r2, #0
     364:	4910      	ldr	r1, [pc, #64]	; (3a8 <_ZN3GSM4PollEv+0xac>)
     366:	0020      	movs	r0, r4
     368:	f7ff feda 	bl	120 <_ZN3GSM7CommandEPKcS1_i>
    free(data);
     36c:	0028      	movs	r0, r5
     36e:	f000 fcc5 	bl	cfc <free>
     372:	e7d9      	b.n	328 <_ZN3GSM4PollEv+0x2c>
    } else if(strstr(data, "+CMTI")) {
     374:	490d      	ldr	r1, [pc, #52]	; (3ac <_ZN3GSM4PollEv+0xb0>)
     376:	0028      	movs	r0, r5
     378:	f000 fdb5 	bl	ee6 <strstr>
     37c:	2800      	cmp	r0, #0
     37e:	d0f5      	beq.n	36c <_ZN3GSM4PollEv+0x70>
        int idx = -1;
     380:	2301      	movs	r3, #1
     382:	425b      	negs	r3, r3
     384:	9301      	str	r3, [sp, #4]
        sscanf(strstr(data, "+CMTI"), "+CMTI: %*s %d", &idx);
     386:	4909      	ldr	r1, [pc, #36]	; (3ac <_ZN3GSM4PollEv+0xb0>)
     388:	0028      	movs	r0, r5
     38a:	f000 fdac 	bl	ee6 <strstr>
     38e:	aa01      	add	r2, sp, #4
     390:	4907      	ldr	r1, [pc, #28]	; (3b0 <_ZN3GSM4PollEv+0xb4>)
     392:	f000 fd77 	bl	e84 <siscanf>
        if(idx != -1) ProcessSMS(idx);
     396:	e7e9      	b.n	36c <_ZN3GSM4PollEv+0x70>
     398:	00000206 	.word	0x00000206
     39c:	000186a0 	.word	0x000186a0
     3a0:	00001ac8 	.word	0x00001ac8
     3a4:	00000bb8 	.word	0x00000bb8
     3a8:	00001ad0 	.word	0x00001ad0
     3ac:	00001ad4 	.word	0x00001ad4
     3b0:	00001adc 	.word	0x00001adc

000003b4 <_Z41__static_initialization_and_destruction_0ii>:
        
        gpio::toggle(led);
        //auto start = millis();
        //while(millis() - start < 500);
    }
     3b4:	b510      	push	{r4, lr}
     3b6:	b082      	sub	sp, #8
     3b8:	2801      	cmp	r0, #1
     3ba:	d001      	beq.n	3c0 <_Z41__static_initialization_and_destruction_0ii+0xc>
     3bc:	b002      	add	sp, #8
     3be:	bd10      	pop	{r4, pc}
     3c0:	4b07      	ldr	r3, [pc, #28]	; (3e0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     3c2:	4299      	cmp	r1, r3
     3c4:	d1fa      	bne.n	3bc <_Z41__static_initialization_and_destruction_0ii+0x8>
);
     3c6:	4c07      	ldr	r4, [pc, #28]	; (3e4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     3c8:	4b07      	ldr	r3, [pc, #28]	; (3e8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     3ca:	2100      	movs	r1, #0
     3cc:	2202      	movs	r2, #2
     3ce:	0020      	movs	r0, r4
     3d0:	f7ff fe80 	bl	d4 <_ZN3GSMC1E6gpio_tP6uart_t>
static GSM gsm(
     3d4:	4a05      	ldr	r2, [pc, #20]	; (3ec <_Z41__static_initialization_and_destruction_0ii+0x38>)
     3d6:	4906      	ldr	r1, [pc, #24]	; (3f0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     3d8:	0020      	movs	r0, r4
     3da:	f000 fc23 	bl	c24 <__aeabi_atexit>
     3de:	e7ed      	b.n	3bc <_Z41__static_initialization_and_destruction_0ii+0x8>
     3e0:	0000ffff 	.word	0x0000ffff
     3e4:	20000094 	.word	0x20000094
     3e8:	200002b4 	.word	0x200002b4
     3ec:	2000000c 	.word	0x2000000c
     3f0:	0000011d 	.word	0x0000011d

000003f4 <main>:
int main() {
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	b087      	sub	sp, #28
    g_uart1.init({{GPIO_PORTA, 24}, {GPIO_PORTA, 25}, UART_SER1_TXPO_PA24, UART_SER1_RXPO_PA25}, CALC_BAUD(115200));
     3f8:	a901      	add	r1, sp, #4
     3fa:	4b12      	ldr	r3, [pc, #72]	; (444 <main+0x50>)
     3fc:	000a      	movs	r2, r1
     3fe:	cb31      	ldmia	r3!, {r0, r4, r5}
     400:	c231      	stmia	r2!, {r0, r4, r5}
     402:	cb11      	ldmia	r3!, {r0, r4}
     404:	c211      	stmia	r2!, {r0, r4}
     406:	4a10      	ldr	r2, [pc, #64]	; (448 <main+0x54>)
     408:	4810      	ldr	r0, [pc, #64]	; (44c <main+0x58>)
     40a:	f000 f947 	bl	69c <_ZN6uart_t4initERK13uart_pincfg_tt>
            PORT->Group[port].DIRSET.reg = 1 << pin;
     40e:	4b10      	ldr	r3, [pc, #64]	; (450 <main+0x5c>)
     410:	2210      	movs	r2, #16
     412:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     414:	2144      	movs	r1, #68	; 0x44
     416:	5c5a      	ldrb	r2, [r3, r1]
     418:	2002      	movs	r0, #2
     41a:	4382      	bics	r2, r0
     41c:	545a      	strb	r2, [r3, r1]
    if(!gsm.Init()) {
     41e:	480d      	ldr	r0, [pc, #52]	; (454 <main+0x60>)
     420:	f7ff ff34 	bl	28c <_ZN3GSM4InitEv>
     424:	2800      	cmp	r0, #0
     426:	d106      	bne.n	436 <main+0x42>
    }
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }

    inline void toggle(const int port, const int pin) {
        PORT->Group[port].OUTTGL.reg = 1 << pin;
     428:	4b09      	ldr	r3, [pc, #36]	; (450 <main+0x5c>)
     42a:	2210      	movs	r2, #16
     42c:	61da      	str	r2, [r3, #28]
            delay_usec(200000);
     42e:	480a      	ldr	r0, [pc, #40]	; (458 <main+0x64>)
     430:	f001 fc2e 	bl	1c90 <__delay_usec_veneer>
        while(1) {
     434:	e7f8      	b.n	428 <main+0x34>
        gsm.Poll();
     436:	4807      	ldr	r0, [pc, #28]	; (454 <main+0x60>)
     438:	f7ff ff60 	bl	2fc <_ZN3GSM4PollEv>
     43c:	4b04      	ldr	r3, [pc, #16]	; (450 <main+0x5c>)
     43e:	2210      	movs	r2, #16
     440:	61da      	str	r2, [r3, #28]
     442:	e7f8      	b.n	436 <main+0x42>
     444:	00001a74 	.word	0x00001a74
     448:	0000f62b 	.word	0x0000f62b
     44c:	200002b4 	.word	0x200002b4
     450:	41004400 	.word	0x41004400
     454:	20000094 	.word	0x20000094
     458:	00030d40 	.word	0x00030d40

0000045c <_GLOBAL__sub_I_main>:
     45c:	b510      	push	{r4, lr}
     45e:	4902      	ldr	r1, [pc, #8]	; (468 <_GLOBAL__sub_I_main+0xc>)
     460:	2001      	movs	r0, #1
     462:	f7ff ffa7 	bl	3b4 <_Z41__static_initialization_and_destruction_0ii>
     466:	bd10      	pop	{r4, pc}
     468:	0000ffff 	.word	0x0000ffff

0000046c <initializeSystemFor48MHz>:

static volatile uint64_t _cycles;

static void initializeSystemFor48MHz()
{
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
     46c:	4a48      	ldr	r2, [pc, #288]	; (590 <initializeSystemFor48MHz+0x124>)
     46e:	6a11      	ldr	r1, [r2, #32]
     470:	23c0      	movs	r3, #192	; 0xc0
     472:	009b      	lsls	r3, r3, #2
     474:	430b      	orrs	r3, r1
     476:	6213      	str	r3, [r2, #32]
	// Change the timing of the NVM access
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
     478:	4946      	ldr	r1, [pc, #280]	; (594 <initializeSystemFor48MHz+0x128>)
     47a:	684a      	ldr	r2, [r1, #4]
     47c:	231e      	movs	r3, #30
     47e:	439a      	bics	r2, r3
     480:	3b1c      	subs	r3, #28
     482:	4313      	orrs	r3, r2
     484:	604b      	str	r3, [r1, #4]

	// Enable the bus clock for the clock system.
	PM->APBAMASK.bit.GCLK_ = 1;
     486:	4a44      	ldr	r2, [pc, #272]	; (598 <initializeSystemFor48MHz+0x12c>)
     488:	6991      	ldr	r1, [r2, #24]
     48a:	2308      	movs	r3, #8
     48c:	430b      	orrs	r3, r1
     48e:	6193      	str	r3, [r2, #24]

	// Initialise the DFLL to run in closed-loop mode at 48MHz
	// 1. Make a software reset of the clock system.
	GCLK->CTRL.bit.SWRST = 1;
     490:	4a42      	ldr	r2, [pc, #264]	; (59c <initializeSystemFor48MHz+0x130>)
     492:	7813      	ldrb	r3, [r2, #0]
     494:	2101      	movs	r1, #1
     496:	430b      	orrs	r3, r1
     498:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.bit.SWRST && GCLK->STATUS.bit.SYNCBUSY) {};
     49a:	4b40      	ldr	r3, [pc, #256]	; (59c <initializeSystemFor48MHz+0x130>)
     49c:	781b      	ldrb	r3, [r3, #0]
     49e:	07db      	lsls	r3, r3, #31
     4a0:	d503      	bpl.n	4aa <initializeSystemFor48MHz+0x3e>
     4a2:	4b3e      	ldr	r3, [pc, #248]	; (59c <initializeSystemFor48MHz+0x130>)
     4a4:	785b      	ldrb	r3, [r3, #1]
     4a6:	09db      	lsrs	r3, r3, #7
     4a8:	d1f7      	bne.n	49a <initializeSystemFor48MHz+0x2e>
	// 2. Make sure the OCM8M keeps running.
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
     4aa:	4b39      	ldr	r3, [pc, #228]	; (590 <initializeSystemFor48MHz+0x124>)
     4ac:	6a19      	ldr	r1, [r3, #32]
     4ae:	2280      	movs	r2, #128	; 0x80
     4b0:	4391      	bics	r1, r2
     4b2:	6219      	str	r1, [r3, #32]
	// 3. Set the division factor to 64, which reduces the 1MHz source to 15.625kHz
	GCLK->GENDIV.reg =
     4b4:	4b39      	ldr	r3, [pc, #228]	; (59c <initializeSystemFor48MHz+0x130>)
     4b6:	4a3a      	ldr	r2, [pc, #232]	; (5a0 <initializeSystemFor48MHz+0x134>)
     4b8:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(3) | // Select generator 3
	GCLK_GENDIV_DIV(64); // Set the division factor to 64
	// 4. Create generic clock generator 3 for the 15KHz signal of the DFLL
	GCLK->GENCTRL.reg =
     4ba:	4a3a      	ldr	r2, [pc, #232]	; (5a4 <initializeSystemFor48MHz+0x138>)
     4bc:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(3) | // Select generator 3
	GCLK_GENCTRL_SRC_OSC8M | // Select source OSC8M
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     4be:	4b37      	ldr	r3, [pc, #220]	; (59c <initializeSystemFor48MHz+0x130>)
     4c0:	785b      	ldrb	r3, [r3, #1]
     4c2:	09db      	lsrs	r3, r3, #7
     4c4:	d1fb      	bne.n	4be <initializeSystemFor48MHz+0x52>
	// 5. Configure DFLL with the
	GCLK->CLKCTRL.reg =
     4c6:	4b35      	ldr	r3, [pc, #212]	; (59c <initializeSystemFor48MHz+0x130>)
     4c8:	2286      	movs	r2, #134	; 0x86
     4ca:	01d2      	lsls	r2, r2, #7
     4cc:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID_DFLL48 | // Target is DFLL48M
	GCLK_CLKCTRL_GEN(3) | // Select generator 3 as source.
	GCLK_CLKCTRL_CLKEN; // Enable the DFLL48M
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     4ce:	4b33      	ldr	r3, [pc, #204]	; (59c <initializeSystemFor48MHz+0x130>)
     4d0:	785b      	ldrb	r3, [r3, #1]
     4d2:	09db      	lsrs	r3, r3, #7
     4d4:	d1fb      	bne.n	4ce <initializeSystemFor48MHz+0x62>
	// 6. Workaround to be able to configure the DFLL.
	SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
     4d6:	4a2e      	ldr	r2, [pc, #184]	; (590 <initializeSystemFor48MHz+0x124>)
     4d8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     4da:	2180      	movs	r1, #128	; 0x80
     4dc:	438b      	bics	r3, r1
     4de:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     4e0:	4b2b      	ldr	r3, [pc, #172]	; (590 <initializeSystemFor48MHz+0x124>)
     4e2:	68db      	ldr	r3, [r3, #12]
     4e4:	06db      	lsls	r3, r3, #27
     4e6:	d5fb      	bpl.n	4e0 <initializeSystemFor48MHz+0x74>
	// 7. Change the multiplication factor.
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
     4e8:	4b29      	ldr	r3, [pc, #164]	; (590 <initializeSystemFor48MHz+0x124>)
     4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     4ec:	0c12      	lsrs	r2, r2, #16
     4ee:	0412      	lsls	r2, r2, #16
     4f0:	21c0      	movs	r1, #192	; 0xc0
     4f2:	0109      	lsls	r1, r1, #4
     4f4:	4311      	orrs	r1, r2
     4f6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
     4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     4fa:	0192      	lsls	r2, r2, #6
     4fc:	0992      	lsrs	r2, r2, #6
     4fe:	2180      	movs	r1, #128	; 0x80
     500:	04c9      	lsls	r1, r1, #19
     502:	4311      	orrs	r1, r2
     504:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.FSTEP = 1; // Fine step = 1
     506:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     508:	4a27      	ldr	r2, [pc, #156]	; (5a8 <initializeSystemFor48MHz+0x13c>)
     50a:	4011      	ands	r1, r2
     50c:	2280      	movs	r2, #128	; 0x80
     50e:	0252      	lsls	r2, r2, #9
     510:	430a      	orrs	r2, r1
     512:	62da      	str	r2, [r3, #44]	; 0x2c
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     514:	4b1e      	ldr	r3, [pc, #120]	; (590 <initializeSystemFor48MHz+0x124>)
     516:	68db      	ldr	r3, [r3, #12]
     518:	06db      	lsls	r3, r3, #27
     51a:	d5fb      	bpl.n	514 <initializeSystemFor48MHz+0xa8>
	// 8. Start closed-loop mode
	SYSCTRL->DFLLCTRL.reg |=
     51c:	4a1c      	ldr	r2, [pc, #112]	; (590 <initializeSystemFor48MHz+0x124>)
     51e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     520:	2181      	movs	r1, #129	; 0x81
     522:	0089      	lsls	r1, r1, #2
     524:	430b      	orrs	r3, r1
     526:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_MODE | // 1 = Closed loop mode.
	SYSCTRL_DFLLCTRL_QLDIS; // 1 = Disable quick lock.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     528:	4b19      	ldr	r3, [pc, #100]	; (590 <initializeSystemFor48MHz+0x124>)
     52a:	68db      	ldr	r3, [r3, #12]
     52c:	06db      	lsls	r3, r3, #27
     52e:	d5fb      	bpl.n	528 <initializeSystemFor48MHz+0xbc>
	// 9. Clear the lock flags.
	SYSCTRL->INTFLAG.bit.DFLLLCKC = 1;
     530:	4b17      	ldr	r3, [pc, #92]	; (590 <initializeSystemFor48MHz+0x124>)
     532:	6899      	ldr	r1, [r3, #8]
     534:	2280      	movs	r2, #128	; 0x80
     536:	430a      	orrs	r2, r1
     538:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLLCKF = 1;
     53a:	6899      	ldr	r1, [r3, #8]
     53c:	2240      	movs	r2, #64	; 0x40
     53e:	430a      	orrs	r2, r1
     540:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLRDY = 1;
     542:	6899      	ldr	r1, [r3, #8]
     544:	2210      	movs	r2, #16
     546:	430a      	orrs	r2, r1
     548:	609a      	str	r2, [r3, #8]
	// 10. Enable the DFLL
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
     54a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
     54c:	2102      	movs	r1, #2
     54e:	430a      	orrs	r2, r1
     550:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     552:	4b0f      	ldr	r3, [pc, #60]	; (590 <initializeSystemFor48MHz+0x124>)
     554:	68db      	ldr	r3, [r3, #12]
     556:	06db      	lsls	r3, r3, #27
     558:	d5fb      	bpl.n	552 <initializeSystemFor48MHz+0xe6>
	// 11. Wait for the fine and coarse locks.
	while (!SYSCTRL->INTFLAG.bit.DFLLLCKC && !SYSCTRL->INTFLAG.bit.DFLLLCKF) {};
     55a:	4b0d      	ldr	r3, [pc, #52]	; (590 <initializeSystemFor48MHz+0x124>)
     55c:	689b      	ldr	r3, [r3, #8]
     55e:	061b      	lsls	r3, r3, #24
     560:	d403      	bmi.n	56a <initializeSystemFor48MHz+0xfe>
     562:	4b0b      	ldr	r3, [pc, #44]	; (590 <initializeSystemFor48MHz+0x124>)
     564:	689b      	ldr	r3, [r3, #8]
     566:	065b      	lsls	r3, r3, #25
     568:	d5f7      	bpl.n	55a <initializeSystemFor48MHz+0xee>
	// 12. Wait until the DFLL is ready.
	while (!SYSCTRL->INTFLAG.bit.DFLLRDY) {};
     56a:	4b09      	ldr	r3, [pc, #36]	; (590 <initializeSystemFor48MHz+0x124>)
     56c:	689b      	ldr	r3, [r3, #8]
     56e:	06db      	lsls	r3, r3, #27
     570:	d5fb      	bpl.n	56a <initializeSystemFor48MHz+0xfe>

	// Switch the main clock speed.
	// 1. Set the divisor of generic clock 0 to 0
	GCLK->GENDIV.reg =
     572:	4b0a      	ldr	r3, [pc, #40]	; (59c <initializeSystemFor48MHz+0x130>)
     574:	2200      	movs	r2, #0
     576:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(0) | // Select generator 0
	GCLK_GENDIV_DIV(0);
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     578:	4b08      	ldr	r3, [pc, #32]	; (59c <initializeSystemFor48MHz+0x130>)
     57a:	785b      	ldrb	r3, [r3, #1]
     57c:	09db      	lsrs	r3, r3, #7
     57e:	d1fb      	bne.n	578 <initializeSystemFor48MHz+0x10c>
	// 2. Switch generic clock 0 to the DFLL
	GCLK->GENCTRL.reg =
     580:	4b06      	ldr	r3, [pc, #24]	; (59c <initializeSystemFor48MHz+0x130>)
     582:	4a0a      	ldr	r2, [pc, #40]	; (5ac <initializeSystemFor48MHz+0x140>)
     584:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(0) | // Select generator 0
	GCLK_GENCTRL_SRC_DFLL48M | // Select source DFLL
	GCLK_GENCTRL_IDC | // Set improved duty cycle 50/50
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     586:	4b05      	ldr	r3, [pc, #20]	; (59c <initializeSystemFor48MHz+0x130>)
     588:	785b      	ldrb	r3, [r3, #1]
     58a:	09db      	lsrs	r3, r3, #7
     58c:	d1fb      	bne.n	586 <initializeSystemFor48MHz+0x11a>
}
     58e:	4770      	bx	lr
     590:	40000800 	.word	0x40000800
     594:	41004000 	.word	0x41004000
     598:	40000400 	.word	0x40000400
     59c:	40000c00 	.word	0x40000c00
     5a0:	00004003 	.word	0x00004003
     5a4:	00010603 	.word	0x00010603
     5a8:	fc00ffff 	.word	0xfc00ffff
     5ac:	00030700 	.word	0x00030700

000005b0 <systick_init>:

void systick_init() {
     5b0:	b510      	push	{r4, lr}
	initializeSystemFor48MHz();
     5b2:	f7ff ff5b 	bl	46c <initializeSystemFor48MHz>
	
	_cycles = 0;
     5b6:	4b09      	ldr	r3, [pc, #36]	; (5dc <systick_init+0x2c>)
     5b8:	2000      	movs	r0, #0
     5ba:	2100      	movs	r1, #0
     5bc:	6018      	str	r0, [r3, #0]
     5be:	6059      	str	r1, [r3, #4]

	SysTick->CTRL = 0;
     5c0:	4b07      	ldr	r3, [pc, #28]	; (5e0 <systick_init+0x30>)
     5c2:	2200      	movs	r2, #0
     5c4:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0xFFFFFF;
     5c6:	4a07      	ldr	r2, [pc, #28]	; (5e4 <systick_init+0x34>)
     5c8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0xFFFFFF;
     5ca:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
     5cc:	2207      	movs	r2, #7
     5ce:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5d0:	4b05      	ldr	r3, [pc, #20]	; (5e8 <systick_init+0x38>)
     5d2:	2280      	movs	r2, #128	; 0x80
     5d4:	0612      	lsls	r2, r2, #24
     5d6:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(SysTick_IRQn);
}
     5d8:	bd10      	pop	{r4, pc}
     5da:	46c0      	nop			; (mov r8, r8)
     5dc:	200000a0 	.word	0x200000a0
     5e0:	e000e010 	.word	0xe000e010
     5e4:	00ffffff 	.word	0x00ffffff
     5e8:	e000e100 	.word	0xe000e100

000005ec <systick_cycles>:

uint64_t systick_cycles() {
	return _cycles + (0xFFFFFF - SysTick->VAL);
     5ec:	4b05      	ldr	r3, [pc, #20]	; (604 <systick_cycles+0x18>)
     5ee:	689b      	ldr	r3, [r3, #8]
     5f0:	4a05      	ldr	r2, [pc, #20]	; (608 <systick_cycles+0x1c>)
     5f2:	1ad0      	subs	r0, r2, r3
     5f4:	2100      	movs	r1, #0
     5f6:	4b05      	ldr	r3, [pc, #20]	; (60c <systick_cycles+0x20>)
     5f8:	681a      	ldr	r2, [r3, #0]
     5fa:	685b      	ldr	r3, [r3, #4]
     5fc:	1880      	adds	r0, r0, r2
     5fe:	4159      	adcs	r1, r3
}
     600:	4770      	bx	lr
     602:	46c0      	nop			; (mov r8, r8)
     604:	e000e010 	.word	0xe000e010
     608:	00ffffff 	.word	0x00ffffff
     60c:	200000a0 	.word	0x200000a0

00000610 <millis>:
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000000) + 0.99999999 );
	ticks >>= 35;
	return (uint32_t)ticks;
}

uint32_t millis() {
     610:	b510      	push	{r4, lr}
	// https://en.wikipedia.org/wiki/Division_algorithm#Division_by_a_constant
	uint64_t ticks = systick_cycles();
     612:	f7ff ffeb 	bl	5ec <systick_cycles>
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000) + 0.99999999 );
     616:	4a03      	ldr	r2, [pc, #12]	; (624 <millis+0x14>)
     618:	2300      	movs	r3, #0
     61a:	f000 fb0b 	bl	c34 <__aeabi_lmul>
	ticks >>= 35;
     61e:	08c8      	lsrs	r0, r1, #3
	return (uint32_t)ticks;
}
     620:	bd10      	pop	{r4, pc}
     622:	46c0      	nop			; (mov r8, r8)
     624:	000aec34 	.word	0x000aec34

00000628 <SysTick_Handler>:

void SysTick_Handler() {
     628:	b530      	push	{r4, r5, lr}
	_cycles += 0x1000000;
     62a:	4905      	ldr	r1, [pc, #20]	; (640 <SysTick_Handler+0x18>)
     62c:	680a      	ldr	r2, [r1, #0]
     62e:	684b      	ldr	r3, [r1, #4]
     630:	2480      	movs	r4, #128	; 0x80
     632:	0464      	lsls	r4, r4, #17
     634:	2500      	movs	r5, #0
     636:	1912      	adds	r2, r2, r4
     638:	416b      	adcs	r3, r5
     63a:	600a      	str	r2, [r1, #0]
     63c:	604b      	str	r3, [r1, #4]
     63e:	bd30      	pop	{r4, r5, pc}
     640:	200000a0 	.word	0x200000a0

00000644 <_Z41__static_initialization_and_destruction_0ii>:
    g_uart0.sercom_handler();
}

void SERCOM1_Handler() {
    g_uart1.sercom_handler();
     644:	b570      	push	{r4, r5, r6, lr}
     646:	2801      	cmp	r0, #1
     648:	d000      	beq.n	64c <_Z41__static_initialization_and_destruction_0ii+0x8>
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	4b0c      	ldr	r3, [pc, #48]	; (680 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     64e:	4299      	cmp	r1, r3
     650:	d1fb      	bne.n	64a <_Z41__static_initialization_and_destruction_0ii+0x6>
    volatile bool m_rxfull = false;

    bool m_used = false;

public:
    uart_t(Sercom* sercom) { m_sercom = sercom; }
     652:	4a0c      	ldr	r2, [pc, #48]	; (684 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     654:	2581      	movs	r5, #129	; 0x81
     656:	00ad      	lsls	r5, r5, #2
     658:	2300      	movs	r3, #0
     65a:	5353      	strh	r3, [r2, r5]
     65c:	4c0a      	ldr	r4, [pc, #40]	; (688 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     65e:	5313      	strh	r3, [r2, r4]
     660:	2082      	movs	r0, #130	; 0x82
     662:	0080      	lsls	r0, r0, #2
     664:	5413      	strb	r3, [r2, r0]
     666:	4909      	ldr	r1, [pc, #36]	; (68c <_Z41__static_initialization_and_destruction_0ii+0x48>)
     668:	5453      	strb	r3, [r2, r1]
     66a:	4e09      	ldr	r6, [pc, #36]	; (690 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     66c:	6016      	str	r6, [r2, #0]
     66e:	4a09      	ldr	r2, [pc, #36]	; (694 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     670:	5353      	strh	r3, [r2, r5]
     672:	5313      	strh	r3, [r2, r4]
     674:	5413      	strb	r3, [r2, r0]
     676:	5453      	strb	r3, [r2, r1]
     678:	4b07      	ldr	r3, [pc, #28]	; (698 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     67a:	6013      	str	r3, [r2, #0]
     67c:	e7e5      	b.n	64a <_Z41__static_initialization_and_destruction_0ii+0x6>
     67e:	46c0      	nop			; (mov r8, r8)
     680:	0000ffff 	.word	0x0000ffff
     684:	200000a8 	.word	0x200000a8
     688:	00000206 	.word	0x00000206
     68c:	00000209 	.word	0x00000209
     690:	42000800 	.word	0x42000800
     694:	200002b4 	.word	0x200002b4
     698:	42000c00 	.word	0x42000c00

0000069c <_ZN6uart_t4initERK13uart_pincfg_tt>:
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
     69c:	b5f0      	push	{r4, r5, r6, r7, lr}
     69e:	46ce      	mov	lr, r9
     6a0:	4647      	mov	r7, r8
     6a2:	b580      	push	{r7, lr}
     6a4:	4691      	mov	r9, r2
    if(m_sercom == SERCOM1) {
     6a6:	4b6c      	ldr	r3, [pc, #432]	; (858 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
     6a8:	6804      	ldr	r4, [r0, #0]
     6aa:	429c      	cmp	r4, r3
     6ac:	d100      	bne.n	6b0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x14>
     6ae:	e09d      	b.n	7ec <_ZN6uart_t4initERK13uart_pincfg_tt+0x150>
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
     6b0:	4c6a      	ldr	r4, [pc, #424]	; (85c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
     6b2:	6a23      	ldr	r3, [r4, #32]
     6b4:	2504      	movs	r5, #4
     6b6:	432b      	orrs	r3, r5
     6b8:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
     6ba:	4b69      	ldr	r3, [pc, #420]	; (860 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
     6bc:	4c69      	ldr	r4, [pc, #420]	; (864 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c8>)
     6be:	805c      	strh	r4, [r3, #2]
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
     6c0:	7c8b      	ldrb	r3, [r1, #18]
     6c2:	2b00      	cmp	r3, #0
     6c4:	d100      	bne.n	6c8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x2c>
     6c6:	e09a      	b.n	7fe <_ZN6uart_t4initERK13uart_pincfg_tt+0x162>
     6c8:	2603      	movs	r6, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
     6ca:	680c      	ldr	r4, [r1, #0]
     6cc:	684d      	ldr	r5, [r1, #4]
        if(pin & 1)
     6ce:	07eb      	lsls	r3, r5, #31
     6d0:	d400      	bmi.n	6d4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x38>
     6d2:	e096      	b.n	802 <_ZN6uart_t4initERK13uart_pincfg_tt+0x166>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
     6d4:	0feb      	lsrs	r3, r5, #31
     6d6:	195b      	adds	r3, r3, r5
     6d8:	105b      	asrs	r3, r3, #1
     6da:	469c      	mov	ip, r3
     6dc:	270f      	movs	r7, #15
     6de:	403e      	ands	r6, r7
     6e0:	01e3      	lsls	r3, r4, #7
     6e2:	4a61      	ldr	r2, [pc, #388]	; (868 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     6e4:	4690      	mov	r8, r2
     6e6:	4443      	add	r3, r8
     6e8:	4463      	add	r3, ip
     6ea:	3330      	adds	r3, #48	; 0x30
     6ec:	781a      	ldrb	r2, [r3, #0]
     6ee:	0136      	lsls	r6, r6, #4
     6f0:	4017      	ands	r7, r2
     6f2:	4337      	orrs	r7, r6
     6f4:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
     6f6:	01e3      	lsls	r3, r4, #7
     6f8:	4c5b      	ldr	r4, [pc, #364]	; (868 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     6fa:	46a4      	mov	ip, r4
     6fc:	4463      	add	r3, ip
     6fe:	195b      	adds	r3, r3, r5
     700:	3340      	adds	r3, #64	; 0x40
     702:	781c      	ldrb	r4, [r3, #0]
     704:	2501      	movs	r5, #1
     706:	432c      	orrs	r4, r5
     708:	701c      	strb	r4, [r3, #0]
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
     70a:	7ccb      	ldrb	r3, [r1, #19]
     70c:	2b00      	cmp	r3, #0
     70e:	d100      	bne.n	712 <_ZN6uart_t4initERK13uart_pincfg_tt+0x76>
     710:	e086      	b.n	820 <_ZN6uart_t4initERK13uart_pincfg_tt+0x184>
     712:	2603      	movs	r6, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
     714:	688c      	ldr	r4, [r1, #8]
     716:	68cd      	ldr	r5, [r1, #12]
        if(pin & 1)
     718:	07eb      	lsls	r3, r5, #31
     71a:	d400      	bmi.n	71e <_ZN6uart_t4initERK13uart_pincfg_tt+0x82>
     71c:	e082      	b.n	824 <_ZN6uart_t4initERK13uart_pincfg_tt+0x188>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
     71e:	0feb      	lsrs	r3, r5, #31
     720:	195b      	adds	r3, r3, r5
     722:	105b      	asrs	r3, r3, #1
     724:	469c      	mov	ip, r3
     726:	270f      	movs	r7, #15
     728:	403e      	ands	r6, r7
     72a:	01e3      	lsls	r3, r4, #7
     72c:	4a4e      	ldr	r2, [pc, #312]	; (868 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     72e:	4690      	mov	r8, r2
     730:	4443      	add	r3, r8
     732:	4463      	add	r3, ip
     734:	3330      	adds	r3, #48	; 0x30
     736:	781a      	ldrb	r2, [r3, #0]
     738:	0136      	lsls	r6, r6, #4
     73a:	4017      	ands	r7, r2
     73c:	4337      	orrs	r7, r6
     73e:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
     740:	01e3      	lsls	r3, r4, #7
     742:	4c49      	ldr	r4, [pc, #292]	; (868 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     744:	46a4      	mov	ip, r4
     746:	4463      	add	r3, ip
     748:	195b      	adds	r3, r3, r5
     74a:	3340      	adds	r3, #64	; 0x40
     74c:	781c      	ldrb	r4, [r3, #0]
     74e:	2501      	movs	r5, #1
     750:	432c      	orrs	r4, r5
     752:	701c      	strb	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.ENABLE = 0;
     754:	6804      	ldr	r4, [r0, #0]
     756:	6823      	ldr	r3, [r4, #0]
     758:	2502      	movs	r5, #2
     75a:	43ab      	bics	r3, r5
     75c:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.SWRST = 1;
     75e:	6804      	ldr	r4, [r0, #0]
     760:	6823      	ldr	r3, [r4, #0]
     762:	3d01      	subs	r5, #1
     764:	432b      	orrs	r3, r5
     766:	6023      	str	r3, [r4, #0]
    while(m_sercom->USART.CTRLA.bit.SWRST);
     768:	6803      	ldr	r3, [r0, #0]
     76a:	681c      	ldr	r4, [r3, #0]
     76c:	07e4      	lsls	r4, r4, #31
     76e:	d4fb      	bmi.n	768 <_ZN6uart_t4initERK13uart_pincfg_tt+0xcc>
    m_sercom->USART.CTRLA.bit.MODE = SERCOM_USART_CTRLA_MODE_USART_INT_CLK_Val;
     770:	681c      	ldr	r4, [r3, #0]
     772:	251c      	movs	r5, #28
     774:	43ac      	bics	r4, r5
     776:	3d18      	subs	r5, #24
     778:	432c      	orrs	r4, r5
     77a:	601c      	str	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.DORD = 1;
     77c:	6804      	ldr	r4, [r0, #0]
     77e:	6825      	ldr	r5, [r4, #0]
     780:	2380      	movs	r3, #128	; 0x80
     782:	05db      	lsls	r3, r3, #23
     784:	432b      	orrs	r3, r5
     786:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.TXPO = pincfg.tx_pad;
     788:	6806      	ldr	r6, [r0, #0]
     78a:	7c0d      	ldrb	r5, [r1, #16]
     78c:	2303      	movs	r3, #3
     78e:	401d      	ands	r5, r3
     790:	6834      	ldr	r4, [r6, #0]
     792:	042d      	lsls	r5, r5, #16
     794:	4f35      	ldr	r7, [pc, #212]	; (86c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d0>)
     796:	403c      	ands	r4, r7
     798:	432c      	orrs	r4, r5
     79a:	6034      	str	r4, [r6, #0]
    m_sercom->USART.CTRLA.bit.RXPO = pincfg.rx_pad;
     79c:	6804      	ldr	r4, [r0, #0]
     79e:	7c4d      	ldrb	r5, [r1, #17]
     7a0:	6821      	ldr	r1, [r4, #0]
     7a2:	402b      	ands	r3, r5
     7a4:	051b      	lsls	r3, r3, #20
     7a6:	4d32      	ldr	r5, [pc, #200]	; (870 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d4>)
     7a8:	4029      	ands	r1, r5
     7aa:	430b      	orrs	r3, r1
     7ac:	6023      	str	r3, [r4, #0]
    m_sercom->USART.BAUD.reg = speed;
     7ae:	6803      	ldr	r3, [r0, #0]
     7b0:	464a      	mov	r2, r9
     7b2:	819a      	strh	r2, [r3, #12]
    m_sercom->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
     7b4:	6803      	ldr	r3, [r0, #0]
     7b6:	22c0      	movs	r2, #192	; 0xc0
     7b8:	0292      	lsls	r2, r2, #10
     7ba:	605a      	str	r2, [r3, #4]
    m_sercom->USART.INTENSET.bit.RXC = 1;
     7bc:	6802      	ldr	r2, [r0, #0]
     7be:	7d93      	ldrb	r3, [r2, #22]
     7c0:	2104      	movs	r1, #4
     7c2:	430b      	orrs	r3, r1
     7c4:	7593      	strb	r3, [r2, #22]
    if(m_sercom == SERCOM0)
     7c6:	6803      	ldr	r3, [r0, #0]
     7c8:	4a2a      	ldr	r2, [pc, #168]	; (874 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d8>)
     7ca:	4293      	cmp	r3, r2
     7cc:	d039      	beq.n	842 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1a6>
    else if(m_sercom == SERCOM1)
     7ce:	4a22      	ldr	r2, [pc, #136]	; (858 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
     7d0:	4293      	cmp	r3, r2
     7d2:	d03b      	beq.n	84c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1b0>
    m_sercom->USART.CTRLA.bit.ENABLE = 1;
     7d4:	6802      	ldr	r2, [r0, #0]
     7d6:	6813      	ldr	r3, [r2, #0]
     7d8:	2102      	movs	r1, #2
     7da:	430b      	orrs	r3, r1
     7dc:	6013      	str	r3, [r2, #0]
    m_used = true;
     7de:	4b26      	ldr	r3, [pc, #152]	; (878 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1dc>)
     7e0:	2201      	movs	r2, #1
     7e2:	54c2      	strb	r2, [r0, r3]
}
     7e4:	bc0c      	pop	{r2, r3}
     7e6:	4690      	mov	r8, r2
     7e8:	4699      	mov	r9, r3
     7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
     7ec:	4c1b      	ldr	r4, [pc, #108]	; (85c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
     7ee:	6a23      	ldr	r3, [r4, #32]
     7f0:	2508      	movs	r5, #8
     7f2:	432b      	orrs	r3, r5
     7f4:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) |
     7f6:	4b1a      	ldr	r3, [pc, #104]	; (860 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
     7f8:	4c20      	ldr	r4, [pc, #128]	; (87c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e0>)
     7fa:	805c      	strh	r4, [r3, #2]
     7fc:	e760      	b.n	6c0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x24>
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
     7fe:	2602      	movs	r6, #2
     800:	e763      	b.n	6ca <_ZN6uart_t4initERK13uart_pincfg_tt+0x2e>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
     802:	0feb      	lsrs	r3, r5, #31
     804:	195b      	adds	r3, r3, r5
     806:	105f      	asrs	r7, r3, #1
     808:	01e3      	lsls	r3, r4, #7
     80a:	4a17      	ldr	r2, [pc, #92]	; (868 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     80c:	4694      	mov	ip, r2
     80e:	4463      	add	r3, ip
     810:	19db      	adds	r3, r3, r7
     812:	3330      	adds	r3, #48	; 0x30
     814:	781f      	ldrb	r7, [r3, #0]
     816:	220f      	movs	r2, #15
     818:	4397      	bics	r7, r2
     81a:	433e      	orrs	r6, r7
     81c:	701e      	strb	r6, [r3, #0]
     81e:	e76a      	b.n	6f6 <_ZN6uart_t4initERK13uart_pincfg_tt+0x5a>
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
     820:	2602      	movs	r6, #2
     822:	e777      	b.n	714 <_ZN6uart_t4initERK13uart_pincfg_tt+0x78>
     824:	0feb      	lsrs	r3, r5, #31
     826:	195b      	adds	r3, r3, r5
     828:	105f      	asrs	r7, r3, #1
     82a:	01e3      	lsls	r3, r4, #7
     82c:	4a0e      	ldr	r2, [pc, #56]	; (868 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     82e:	4694      	mov	ip, r2
     830:	4463      	add	r3, ip
     832:	19db      	adds	r3, r3, r7
     834:	3330      	adds	r3, #48	; 0x30
     836:	781f      	ldrb	r7, [r3, #0]
     838:	220f      	movs	r2, #15
     83a:	4397      	bics	r7, r2
     83c:	433e      	orrs	r6, r7
     83e:	701e      	strb	r6, [r3, #0]
     840:	e77e      	b.n	740 <_ZN6uart_t4initERK13uart_pincfg_tt+0xa4>
     842:	4b0f      	ldr	r3, [pc, #60]	; (880 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
     844:	2280      	movs	r2, #128	; 0x80
     846:	0092      	lsls	r2, r2, #2
     848:	601a      	str	r2, [r3, #0]
}
     84a:	e7c3      	b.n	7d4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     84c:	4b0c      	ldr	r3, [pc, #48]	; (880 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
     84e:	2280      	movs	r2, #128	; 0x80
     850:	00d2      	lsls	r2, r2, #3
     852:	601a      	str	r2, [r3, #0]
}
     854:	e7be      	b.n	7d4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
     856:	46c0      	nop			; (mov r8, r8)
     858:	42000c00 	.word	0x42000c00
     85c:	40000400 	.word	0x40000400
     860:	40000c00 	.word	0x40000c00
     864:	0000400e 	.word	0x0000400e
     868:	41004400 	.word	0x41004400
     86c:	fffcffff 	.word	0xfffcffff
     870:	ffcfffff 	.word	0xffcfffff
     874:	42000800 	.word	0x42000800
     878:	00000209 	.word	0x00000209
     87c:	0000400f 	.word	0x0000400f
     880:	e000e100 	.word	0xe000e100

00000884 <_ZN6uart_t14sercom_handlerEv>:
    if(!m_used) return;
     884:	4b11      	ldr	r3, [pc, #68]	; (8cc <_ZN6uart_t14sercom_handlerEv+0x48>)
     886:	5cc3      	ldrb	r3, [r0, r3]
     888:	2b00      	cmp	r3, #0
     88a:	d01b      	beq.n	8c4 <_ZN6uart_t14sercom_handlerEv+0x40>
    if(!m_rxfull) {
     88c:	2382      	movs	r3, #130	; 0x82
     88e:	009b      	lsls	r3, r3, #2
     890:	5cc3      	ldrb	r3, [r0, r3]
     892:	2b00      	cmp	r3, #0
     894:	d117      	bne.n	8c6 <_ZN6uart_t14sercom_handlerEv+0x42>
		m_rxbuf[m_rxhead] = m_sercom->USART.DATA.reg;
     896:	6803      	ldr	r3, [r0, #0]
     898:	8d19      	ldrh	r1, [r3, #40]	; 0x28
     89a:	2281      	movs	r2, #129	; 0x81
     89c:	0092      	lsls	r2, r2, #2
     89e:	5a83      	ldrh	r3, [r0, r2]
     8a0:	b2c9      	uxtb	r1, r1
     8a2:	18c3      	adds	r3, r0, r3
     8a4:	7119      	strb	r1, [r3, #4]
		m_rxhead = (m_rxhead+1) % sizeof(m_rxbuf);
     8a6:	5a83      	ldrh	r3, [r0, r2]
     8a8:	3301      	adds	r3, #1
     8aa:	05db      	lsls	r3, r3, #23
     8ac:	0ddb      	lsrs	r3, r3, #23
     8ae:	5283      	strh	r3, [r0, r2]
		m_rxfull = m_rxtail == m_rxhead;
     8b0:	4b07      	ldr	r3, [pc, #28]	; (8d0 <_ZN6uart_t14sercom_handlerEv+0x4c>)
     8b2:	5ac3      	ldrh	r3, [r0, r3]
     8b4:	5a82      	ldrh	r2, [r0, r2]
     8b6:	1a9b      	subs	r3, r3, r2
     8b8:	425a      	negs	r2, r3
     8ba:	4153      	adcs	r3, r2
     8bc:	b2db      	uxtb	r3, r3
     8be:	2282      	movs	r2, #130	; 0x82
     8c0:	0092      	lsls	r2, r2, #2
     8c2:	5483      	strb	r3, [r0, r2]
}
     8c4:	4770      	bx	lr
		(void)m_sercom->USART.DATA.reg; // Clear RX flag
     8c6:	6803      	ldr	r3, [r0, #0]
     8c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     8ca:	e7fb      	b.n	8c4 <_ZN6uart_t14sercom_handlerEv+0x40>
     8cc:	00000209 	.word	0x00000209
     8d0:	00000206 	.word	0x00000206

000008d4 <_ZN6uart_t5writeEc>:
    if(!m_used) return;
     8d4:	4b05      	ldr	r3, [pc, #20]	; (8ec <_ZN6uart_t5writeEc+0x18>)
     8d6:	5cc3      	ldrb	r3, [r0, r3]
     8d8:	2b00      	cmp	r3, #0
     8da:	d006      	beq.n	8ea <_ZN6uart_t5writeEc+0x16>
    m_sercom->USART.DATA.reg = c;
     8dc:	b289      	uxth	r1, r1
     8de:	6803      	ldr	r3, [r0, #0]
     8e0:	8519      	strh	r1, [r3, #40]	; 0x28
	while(!m_sercom->USART.INTFLAG.bit.DRE);
     8e2:	6803      	ldr	r3, [r0, #0]
     8e4:	7e1b      	ldrb	r3, [r3, #24]
     8e6:	07db      	lsls	r3, r3, #31
     8e8:	d5fb      	bpl.n	8e2 <_ZN6uart_t5writeEc+0xe>
}
     8ea:	4770      	bx	lr
     8ec:	00000209 	.word	0x00000209

000008f0 <_ZN6uart_t5printEPKc>:
void uart_t::print(const char* str) {
     8f0:	b570      	push	{r4, r5, r6, lr}
     8f2:	0005      	movs	r5, r0
     8f4:	000c      	movs	r4, r1
    if(!m_used) return;
     8f6:	4b06      	ldr	r3, [pc, #24]	; (910 <_ZN6uart_t5printEPKc+0x20>)
     8f8:	5cc3      	ldrb	r3, [r0, r3]
     8fa:	2b00      	cmp	r3, #0
     8fc:	d007      	beq.n	90e <_ZN6uart_t5printEPKc+0x1e>
    while(*str) write(*str++);
     8fe:	7821      	ldrb	r1, [r4, #0]
     900:	2900      	cmp	r1, #0
     902:	d004      	beq.n	90e <_ZN6uart_t5printEPKc+0x1e>
     904:	3401      	adds	r4, #1
     906:	0028      	movs	r0, r5
     908:	f7ff ffe4 	bl	8d4 <_ZN6uart_t5writeEc>
     90c:	e7f7      	b.n	8fe <_ZN6uart_t5printEPKc+0xe>
}
     90e:	bd70      	pop	{r4, r5, r6, pc}
     910:	00000209 	.word	0x00000209

00000914 <_ZN6uart_t7rxemptyEv>:
	return (!m_rxfull && (m_rxhead == m_rxtail));
     914:	2382      	movs	r3, #130	; 0x82
     916:	009b      	lsls	r3, r3, #2
     918:	5cc3      	ldrb	r3, [r0, r3]
     91a:	2b00      	cmp	r3, #0
     91c:	d10a      	bne.n	934 <_ZN6uart_t7rxemptyEv+0x20>
     91e:	2381      	movs	r3, #129	; 0x81
     920:	009b      	lsls	r3, r3, #2
     922:	5ac2      	ldrh	r2, [r0, r3]
     924:	b292      	uxth	r2, r2
     926:	4b05      	ldr	r3, [pc, #20]	; (93c <_ZN6uart_t7rxemptyEv+0x28>)
     928:	5ac3      	ldrh	r3, [r0, r3]
     92a:	b29b      	uxth	r3, r3
     92c:	429a      	cmp	r2, r3
     92e:	d003      	beq.n	938 <_ZN6uart_t7rxemptyEv+0x24>
     930:	2000      	movs	r0, #0
     932:	e000      	b.n	936 <_ZN6uart_t7rxemptyEv+0x22>
     934:	2000      	movs	r0, #0
}
     936:	4770      	bx	lr
	return (!m_rxfull && (m_rxhead == m_rxtail));
     938:	2001      	movs	r0, #1
     93a:	e7fc      	b.n	936 <_ZN6uart_t7rxemptyEv+0x22>
     93c:	00000206 	.word	0x00000206

00000940 <_ZN6uart_t4getcEv>:
char uart_t::getc() {
     940:	b510      	push	{r4, lr}
     942:	0004      	movs	r4, r0
    if(!m_used) return '\0';
     944:	4b0c      	ldr	r3, [pc, #48]	; (978 <_ZN6uart_t4getcEv+0x38>)
     946:	5cc3      	ldrb	r3, [r0, r3]
     948:	2b00      	cmp	r3, #0
     94a:	d013      	beq.n	974 <_ZN6uart_t4getcEv+0x34>
	while(rxempty());
     94c:	0020      	movs	r0, r4
     94e:	f7ff ffe1 	bl	914 <_ZN6uart_t7rxemptyEv>
     952:	2800      	cmp	r0, #0
     954:	d1fa      	bne.n	94c <_ZN6uart_t4getcEv+0xc>
	uint8_t c = m_rxbuf[m_rxtail];
     956:	4a09      	ldr	r2, [pc, #36]	; (97c <_ZN6uart_t4getcEv+0x3c>)
     958:	5aa3      	ldrh	r3, [r4, r2]
     95a:	18e3      	adds	r3, r4, r3
     95c:	7918      	ldrb	r0, [r3, #4]
     95e:	b2c0      	uxtb	r0, r0
	m_rxfull = false;
     960:	2382      	movs	r3, #130	; 0x82
     962:	009b      	lsls	r3, r3, #2
     964:	2100      	movs	r1, #0
     966:	54e1      	strb	r1, [r4, r3]
	m_rxtail = (m_rxtail+1) % sizeof(m_rxbuf);
     968:	5aa3      	ldrh	r3, [r4, r2]
     96a:	3301      	adds	r3, #1
     96c:	05db      	lsls	r3, r3, #23
     96e:	0ddb      	lsrs	r3, r3, #23
     970:	52a3      	strh	r3, [r4, r2]
}
     972:	bd10      	pop	{r4, pc}
    if(!m_used) return '\0';
     974:	2000      	movs	r0, #0
     976:	e7fc      	b.n	972 <_ZN6uart_t4getcEv+0x32>
     978:	00000209 	.word	0x00000209
     97c:	00000206 	.word	0x00000206

00000980 <_ZN6uart_t4peekEi>:
char uart_t::peek(int pos) {
     980:	b570      	push	{r4, r5, r6, lr}
     982:	0004      	movs	r4, r0
     984:	000d      	movs	r5, r1
    if(!m_used) return '\0';
     986:	4b1f      	ldr	r3, [pc, #124]	; (a04 <_ZN6uart_t4peekEi+0x84>)
     988:	5cc3      	ldrb	r3, [r0, r3]
     98a:	2b00      	cmp	r3, #0
     98c:	d101      	bne.n	992 <_ZN6uart_t4peekEi+0x12>
     98e:	2000      	movs	r0, #0
}
     990:	bd70      	pop	{r4, r5, r6, pc}
    if(rxempty() || pos >= available()) return '\0';
     992:	f7ff ffbf 	bl	914 <_ZN6uart_t7rxemptyEv>
     996:	2800      	cmp	r0, #0
     998:	d12f      	bne.n	9fa <_ZN6uart_t4peekEi+0x7a>
        m_rxhead = 0;
        m_rxtail = 0;
        m_rxfull = false;
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
     99a:	2381      	movs	r3, #129	; 0x81
     99c:	009b      	lsls	r3, r3, #2
     99e:	5ae2      	ldrh	r2, [r4, r3]
     9a0:	b292      	uxth	r2, r2
     9a2:	4b19      	ldr	r3, [pc, #100]	; (a08 <_ZN6uart_t4peekEi+0x88>)
     9a4:	5ae3      	ldrh	r3, [r4, r3]
     9a6:	b29b      	uxth	r3, r3
     9a8:	429a      	cmp	r2, r3
     9aa:	d313      	bcc.n	9d4 <_ZN6uart_t4peekEi+0x54>
            return m_rxhead - m_rxtail;
     9ac:	2381      	movs	r3, #129	; 0x81
     9ae:	009b      	lsls	r3, r3, #2
     9b0:	5ae3      	ldrh	r3, [r4, r3]
     9b2:	4a15      	ldr	r2, [pc, #84]	; (a08 <_ZN6uart_t4peekEi+0x88>)
     9b4:	5aa2      	ldrh	r2, [r4, r2]
     9b6:	1a9b      	subs	r3, r3, r2
     9b8:	b29b      	uxth	r3, r3
     9ba:	42ab      	cmp	r3, r5
     9bc:	dd1f      	ble.n	9fe <_ZN6uart_t4peekEi+0x7e>
    if(pos == -1)
     9be:	1c6b      	adds	r3, r5, #1
     9c0:	d015      	beq.n	9ee <_ZN6uart_t4peekEi+0x6e>
        return m_rxbuf[(m_rxtail + pos) % sizeof(m_rxbuf)];
     9c2:	4b11      	ldr	r3, [pc, #68]	; (a08 <_ZN6uart_t4peekEi+0x88>)
     9c4:	5ae0      	ldrh	r0, [r4, r3]
     9c6:	1940      	adds	r0, r0, r5
     9c8:	05c0      	lsls	r0, r0, #23
     9ca:	0dc0      	lsrs	r0, r0, #23
     9cc:	1824      	adds	r4, r4, r0
     9ce:	7920      	ldrb	r0, [r4, #4]
     9d0:	b2c0      	uxtb	r0, r0
     9d2:	e7dd      	b.n	990 <_ZN6uart_t4peekEi+0x10>
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     9d4:	2381      	movs	r3, #129	; 0x81
     9d6:	009b      	lsls	r3, r3, #2
     9d8:	5ae3      	ldrh	r3, [r4, r3]
     9da:	4a0b      	ldr	r2, [pc, #44]	; (a08 <_ZN6uart_t4peekEi+0x88>)
     9dc:	5aa2      	ldrh	r2, [r4, r2]
     9de:	1a9b      	subs	r3, r3, r2
     9e0:	b29b      	uxth	r3, r3
     9e2:	2280      	movs	r2, #128	; 0x80
     9e4:	0092      	lsls	r2, r2, #2
     9e6:	4694      	mov	ip, r2
     9e8:	4463      	add	r3, ip
     9ea:	b29b      	uxth	r3, r3
     9ec:	e7e5      	b.n	9ba <_ZN6uart_t4peekEi+0x3a>
        return m_rxbuf[m_rxtail];
     9ee:	4b06      	ldr	r3, [pc, #24]	; (a08 <_ZN6uart_t4peekEi+0x88>)
     9f0:	5ae0      	ldrh	r0, [r4, r3]
     9f2:	1824      	adds	r4, r4, r0
     9f4:	7920      	ldrb	r0, [r4, #4]
     9f6:	b2c0      	uxtb	r0, r0
     9f8:	e7ca      	b.n	990 <_ZN6uart_t4peekEi+0x10>
    if(rxempty() || pos >= available()) return '\0';
     9fa:	2000      	movs	r0, #0
     9fc:	e7c8      	b.n	990 <_ZN6uart_t4peekEi+0x10>
     9fe:	2000      	movs	r0, #0
     a00:	e7c6      	b.n	990 <_ZN6uart_t4peekEi+0x10>
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	00000209 	.word	0x00000209
     a08:	00000206 	.word	0x00000206

00000a0c <_ZN6uart_t4findEPKc>:
int uart_t::find(const char* str) {
     a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a0e:	46c6      	mov	lr, r8
     a10:	b500      	push	{lr}
     a12:	0007      	movs	r7, r0
     a14:	000d      	movs	r5, r1
    if(!m_used) return -1;
     a16:	4b21      	ldr	r3, [pc, #132]	; (a9c <_ZN6uart_t4findEPKc+0x90>)
     a18:	5cc3      	ldrb	r3, [r0, r3]
     a1a:	2b00      	cmp	r3, #0
     a1c:	d035      	beq.n	a8a <_ZN6uart_t4findEPKc+0x7e>
    for(int i = 0; i < available(); i++) {
     a1e:	2300      	movs	r3, #0
     a20:	4698      	mov	r8, r3
        if(m_rxhead >= m_rxtail)
     a22:	2381      	movs	r3, #129	; 0x81
     a24:	009b      	lsls	r3, r3, #2
     a26:	5afa      	ldrh	r2, [r7, r3]
     a28:	b292      	uxth	r2, r2
     a2a:	4b1d      	ldr	r3, [pc, #116]	; (aa0 <_ZN6uart_t4findEPKc+0x94>)
     a2c:	5afb      	ldrh	r3, [r7, r3]
     a2e:	b29b      	uxth	r3, r3
     a30:	429a      	cmp	r2, r3
     a32:	d319      	bcc.n	a68 <_ZN6uart_t4findEPKc+0x5c>
            return m_rxhead - m_rxtail;
     a34:	2381      	movs	r3, #129	; 0x81
     a36:	009b      	lsls	r3, r3, #2
     a38:	5afb      	ldrh	r3, [r7, r3]
     a3a:	4a19      	ldr	r2, [pc, #100]	; (aa0 <_ZN6uart_t4findEPKc+0x94>)
     a3c:	5aba      	ldrh	r2, [r7, r2]
     a3e:	1a9b      	subs	r3, r3, r2
     a40:	b29b      	uxth	r3, r3
     a42:	4543      	cmp	r3, r8
     a44:	dd25      	ble.n	a92 <_ZN6uart_t4findEPKc+0x86>
        int search_idx = 0;
     a46:	2400      	movs	r4, #0
        while(str[search_idx] == peek(i + search_idx))
     a48:	5d2e      	ldrb	r6, [r5, r4]
     a4a:	4643      	mov	r3, r8
     a4c:	1919      	adds	r1, r3, r4
     a4e:	0038      	movs	r0, r7
     a50:	f7ff ff96 	bl	980 <_ZN6uart_t4peekEi>
     a54:	4286      	cmp	r6, r0
     a56:	d114      	bne.n	a82 <_ZN6uart_t4findEPKc+0x76>
            if(!str[++search_idx]) return i;
     a58:	3401      	adds	r4, #1
     a5a:	5d2b      	ldrb	r3, [r5, r4]
     a5c:	2b00      	cmp	r3, #0
     a5e:	d1f3      	bne.n	a48 <_ZN6uart_t4findEPKc+0x3c>
}
     a60:	4640      	mov	r0, r8
     a62:	bc04      	pop	{r2}
     a64:	4690      	mov	r8, r2
     a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     a68:	2381      	movs	r3, #129	; 0x81
     a6a:	009b      	lsls	r3, r3, #2
     a6c:	5afb      	ldrh	r3, [r7, r3]
     a6e:	4a0c      	ldr	r2, [pc, #48]	; (aa0 <_ZN6uart_t4findEPKc+0x94>)
     a70:	5aba      	ldrh	r2, [r7, r2]
     a72:	1a9b      	subs	r3, r3, r2
     a74:	b29b      	uxth	r3, r3
     a76:	2280      	movs	r2, #128	; 0x80
     a78:	0092      	lsls	r2, r2, #2
     a7a:	4694      	mov	ip, r2
     a7c:	4463      	add	r3, ip
     a7e:	b29b      	uxth	r3, r3
     a80:	e7df      	b.n	a42 <_ZN6uart_t4findEPKc+0x36>
    for(int i = 0; i < available(); i++) {
     a82:	2301      	movs	r3, #1
     a84:	469c      	mov	ip, r3
     a86:	44e0      	add	r8, ip
     a88:	e7cb      	b.n	a22 <_ZN6uart_t4findEPKc+0x16>
    if(!m_used) return -1;
     a8a:	2301      	movs	r3, #1
     a8c:	425b      	negs	r3, r3
     a8e:	4698      	mov	r8, r3
     a90:	e7e6      	b.n	a60 <_ZN6uart_t4findEPKc+0x54>
    return -1;
     a92:	2301      	movs	r3, #1
     a94:	425b      	negs	r3, r3
     a96:	4698      	mov	r8, r3
     a98:	e7e2      	b.n	a60 <_ZN6uart_t4findEPKc+0x54>
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	00000209 	.word	0x00000209
     aa0:	00000206 	.word	0x00000206

00000aa4 <_ZN6uart_t4readEv>:
char* uart_t::read() {
     aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa6:	46c6      	mov	lr, r8
     aa8:	b500      	push	{lr}
     aaa:	0005      	movs	r5, r0
    if(!m_used) return NULL;
     aac:	4b1c      	ldr	r3, [pc, #112]	; (b20 <_ZN6uart_t4readEv+0x7c>)
     aae:	5cc3      	ldrb	r3, [r0, r3]
     ab0:	2b00      	cmp	r3, #0
     ab2:	d031      	beq.n	b18 <_ZN6uart_t4readEv+0x74>
        if(m_rxhead >= m_rxtail)
     ab4:	2381      	movs	r3, #129	; 0x81
     ab6:	009b      	lsls	r3, r3, #2
     ab8:	5ac2      	ldrh	r2, [r0, r3]
     aba:	b292      	uxth	r2, r2
     abc:	4b19      	ldr	r3, [pc, #100]	; (b24 <_ZN6uart_t4readEv+0x80>)
     abe:	5ac3      	ldrh	r3, [r0, r3]
     ac0:	b29b      	uxth	r3, r3
     ac2:	429a      	cmp	r2, r3
     ac4:	d30f      	bcc.n	ae6 <_ZN6uart_t4readEv+0x42>
            return m_rxhead - m_rxtail;
     ac6:	2381      	movs	r3, #129	; 0x81
     ac8:	009b      	lsls	r3, r3, #2
     aca:	5ac0      	ldrh	r0, [r0, r3]
     acc:	4b15      	ldr	r3, [pc, #84]	; (b24 <_ZN6uart_t4readEv+0x80>)
     ace:	5aeb      	ldrh	r3, [r5, r3]
     ad0:	1ac0      	subs	r0, r0, r3
     ad2:	b280      	uxth	r0, r0
    size_t avail = available();
     ad4:	4680      	mov	r8, r0
    if(!avail) return NULL;
     ad6:	2800      	cmp	r0, #0
     ad8:	d020      	beq.n	b1c <_ZN6uart_t4readEv+0x78>
    char* data = (char*)malloc(avail);
     ada:	f000 f905 	bl	ce8 <malloc>
     ade:	1e07      	subs	r7, r0, #0
    if(!data) return NULL;
     ae0:	d016      	beq.n	b10 <_ZN6uart_t4readEv+0x6c>
    for(size_t i = 0; i < avail; i++)
     ae2:	2400      	movs	r4, #0
     ae4:	e012      	b.n	b0c <_ZN6uart_t4readEv+0x68>
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     ae6:	2381      	movs	r3, #129	; 0x81
     ae8:	009b      	lsls	r3, r3, #2
     aea:	5ac0      	ldrh	r0, [r0, r3]
     aec:	4b0d      	ldr	r3, [pc, #52]	; (b24 <_ZN6uart_t4readEv+0x80>)
     aee:	5aeb      	ldrh	r3, [r5, r3]
     af0:	1ac0      	subs	r0, r0, r3
     af2:	b280      	uxth	r0, r0
     af4:	2380      	movs	r3, #128	; 0x80
     af6:	009b      	lsls	r3, r3, #2
     af8:	469c      	mov	ip, r3
     afa:	4460      	add	r0, ip
     afc:	b280      	uxth	r0, r0
     afe:	e7e9      	b.n	ad4 <_ZN6uart_t4readEv+0x30>
        data[i] = getc();
     b00:	193e      	adds	r6, r7, r4
     b02:	0028      	movs	r0, r5
     b04:	f7ff ff1c 	bl	940 <_ZN6uart_t4getcEv>
     b08:	7030      	strb	r0, [r6, #0]
    for(size_t i = 0; i < avail; i++)
     b0a:	3401      	adds	r4, #1
     b0c:	4544      	cmp	r4, r8
     b0e:	d3f7      	bcc.n	b00 <_ZN6uart_t4readEv+0x5c>
}
     b10:	0038      	movs	r0, r7
     b12:	bc04      	pop	{r2}
     b14:	4690      	mov	r8, r2
     b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!m_used) return NULL;
     b18:	2700      	movs	r7, #0
     b1a:	e7f9      	b.n	b10 <_ZN6uart_t4readEv+0x6c>
    if(!avail) return NULL;
     b1c:	2700      	movs	r7, #0
     b1e:	e7f7      	b.n	b10 <_ZN6uart_t4readEv+0x6c>
     b20:	00000209 	.word	0x00000209
     b24:	00000206 	.word	0x00000206

00000b28 <SERCOM0_Handler>:
void SERCOM0_Handler() {
     b28:	b510      	push	{r4, lr}
    g_uart0.sercom_handler();
     b2a:	4802      	ldr	r0, [pc, #8]	; (b34 <SERCOM0_Handler+0xc>)
     b2c:	f7ff feaa 	bl	884 <_ZN6uart_t14sercom_handlerEv>
}
     b30:	bd10      	pop	{r4, pc}
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	200000a8 	.word	0x200000a8

00000b38 <SERCOM1_Handler>:
void SERCOM1_Handler() {
     b38:	b510      	push	{r4, lr}
    g_uart1.sercom_handler();
     b3a:	4802      	ldr	r0, [pc, #8]	; (b44 <SERCOM1_Handler+0xc>)
     b3c:	f7ff fea2 	bl	884 <_ZN6uart_t14sercom_handlerEv>
     b40:	bd10      	pop	{r4, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	200002b4 	.word	0x200002b4

00000b48 <_GLOBAL__sub_I_g_uart0>:
     b48:	b510      	push	{r4, lr}
     b4a:	4902      	ldr	r1, [pc, #8]	; (b54 <_GLOBAL__sub_I_g_uart0+0xc>)
     b4c:	2001      	movs	r0, #1
     b4e:	f7ff fd79 	bl	644 <_Z41__static_initialization_and_destruction_0ii>
     b52:	bd10      	pop	{r4, pc}
     b54:	0000ffff 	.word	0x0000ffff

00000b58 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
     b58:	e7fe      	b.n	b58 <Dummy_Handler>
     b5a:	Address 0x00000b5a is out of bounds.


00000b5c <Reset_Handler>:
{
     b5c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     b5e:	4a1e      	ldr	r2, [pc, #120]	; (bd8 <Reset_Handler+0x7c>)
     b60:	4b1e      	ldr	r3, [pc, #120]	; (bdc <Reset_Handler+0x80>)
     b62:	429a      	cmp	r2, r3
     b64:	d007      	beq.n	b76 <Reset_Handler+0x1a>
        pDest = &_data;
     b66:	4b1d      	ldr	r3, [pc, #116]	; (bdc <Reset_Handler+0x80>)
        pSrc = &_etext;
     b68:	4a1b      	ldr	r2, [pc, #108]	; (bd8 <Reset_Handler+0x7c>)
     b6a:	e001      	b.n	b70 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
     b6c:	ca02      	ldmia	r2!, {r1}
     b6e:	c302      	stmia	r3!, {r1}
                for (; pDest < &_edata;) {
     b70:	491b      	ldr	r1, [pc, #108]	; (be0 <Reset_Handler+0x84>)
     b72:	428b      	cmp	r3, r1
     b74:	d3fa      	bcc.n	b6c <Reset_Handler+0x10>
        pSrc = &_etext;
     b76:	4b1b      	ldr	r3, [pc, #108]	; (be4 <Reset_Handler+0x88>)
     b78:	e001      	b.n	b7e <Reset_Handler+0x22>
                *pDest++ = 0;
     b7a:	2200      	movs	r2, #0
     b7c:	c304      	stmia	r3!, {r2}
        for (pDest = &_bss; pDest < &_ebss;) {
     b7e:	4a1a      	ldr	r2, [pc, #104]	; (be8 <Reset_Handler+0x8c>)
     b80:	4293      	cmp	r3, r2
     b82:	d3fa      	bcc.n	b7a <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     b84:	4b19      	ldr	r3, [pc, #100]	; (bec <Reset_Handler+0x90>)
     b86:	227f      	movs	r2, #127	; 0x7f
     b88:	4393      	bics	r3, r2
     b8a:	4a19      	ldr	r2, [pc, #100]	; (bf0 <Reset_Handler+0x94>)
     b8c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     b8e:	4a19      	ldr	r2, [pc, #100]	; (bf4 <Reset_Handler+0x98>)
     b90:	2390      	movs	r3, #144	; 0x90
     b92:	005b      	lsls	r3, r3, #1
     b94:	2102      	movs	r1, #2
     b96:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     b98:	4b17      	ldr	r3, [pc, #92]	; (bf8 <Reset_Handler+0x9c>)
     b9a:	7b9a      	ldrb	r2, [r3, #14]
     b9c:	312e      	adds	r1, #46	; 0x2e
     b9e:	438a      	bics	r2, r1
     ba0:	2120      	movs	r1, #32
     ba2:	430a      	orrs	r2, r1
     ba4:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     ba6:	7b9a      	ldrb	r2, [r3, #14]
     ba8:	210c      	movs	r1, #12
     baa:	438a      	bics	r2, r1
     bac:	2108      	movs	r1, #8
     bae:	430a      	orrs	r2, r1
     bb0:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     bb2:	7b9a      	ldrb	r2, [r3, #14]
     bb4:	2103      	movs	r1, #3
     bb6:	438a      	bics	r2, r1
     bb8:	2102      	movs	r1, #2
     bba:	430a      	orrs	r2, r1
     bbc:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     bbe:	4a0f      	ldr	r2, [pc, #60]	; (bfc <Reset_Handler+0xa0>)
     bc0:	6851      	ldr	r1, [r2, #4]
     bc2:	2380      	movs	r3, #128	; 0x80
     bc4:	430b      	orrs	r3, r1
     bc6:	6053      	str	r3, [r2, #4]
        systick_init();
     bc8:	f7ff fcf2 	bl	5b0 <systick_init>
        __libc_init_array();
     bcc:	f000 f868 	bl	ca0 <__libc_init_array>
        main();
     bd0:	f7ff fc10 	bl	3f4 <main>
        while (1);
     bd4:	e7fe      	b.n	bd4 <Reset_Handler+0x78>
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00001ca4 	.word	0x00001ca4
     bdc:	20000000 	.word	0x20000000
     be0:	20000074 	.word	0x20000074
     be4:	20000078 	.word	0x20000078
     be8:	200004dc 	.word	0x200004dc
     bec:	00000000 	.word	0x00000000
     bf0:	e000ed00 	.word	0xe000ed00
     bf4:	41007000 	.word	0x41007000
     bf8:	41004800 	.word	0x41004800
     bfc:	41004000 	.word	0x41004000

00000c00 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     c00:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     c02:	4a06      	ldr	r2, [pc, #24]	; (c1c <_sbrk+0x1c>)
     c04:	6812      	ldr	r2, [r2, #0]
     c06:	2a00      	cmp	r2, #0
     c08:	d004      	beq.n	c14 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     c0a:	4a04      	ldr	r2, [pc, #16]	; (c1c <_sbrk+0x1c>)
     c0c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     c0e:	18c3      	adds	r3, r0, r3
     c10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
     c12:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     c14:	4a01      	ldr	r2, [pc, #4]	; (c1c <_sbrk+0x1c>)
     c16:	4902      	ldr	r1, [pc, #8]	; (c20 <_sbrk+0x20>)
     c18:	6011      	str	r1, [r2, #0]
     c1a:	e7f6      	b.n	c0a <_sbrk+0xa>
     c1c:	200004c0 	.word	0x200004c0
     c20:	200004dc 	.word	0x200004dc

00000c24 <__aeabi_atexit>:
     c24:	0003      	movs	r3, r0
     c26:	b510      	push	{r4, lr}
     c28:	0008      	movs	r0, r1
     c2a:	0019      	movs	r1, r3
     c2c:	f000 f82a 	bl	c84 <__cxa_atexit>
     c30:	bd10      	pop	{r4, pc}
     c32:	Address 0x00000c32 is out of bounds.


00000c34 <__aeabi_lmul>:
     c34:	b5f0      	push	{r4, r5, r6, r7, lr}
     c36:	0415      	lsls	r5, r2, #16
     c38:	0c2d      	lsrs	r5, r5, #16
     c3a:	000f      	movs	r7, r1
     c3c:	0001      	movs	r1, r0
     c3e:	002e      	movs	r6, r5
     c40:	46c6      	mov	lr, r8
     c42:	4684      	mov	ip, r0
     c44:	0400      	lsls	r0, r0, #16
     c46:	0c14      	lsrs	r4, r2, #16
     c48:	0c00      	lsrs	r0, r0, #16
     c4a:	0c09      	lsrs	r1, r1, #16
     c4c:	4346      	muls	r6, r0
     c4e:	434d      	muls	r5, r1
     c50:	4360      	muls	r0, r4
     c52:	4361      	muls	r1, r4
     c54:	1940      	adds	r0, r0, r5
     c56:	0c34      	lsrs	r4, r6, #16
     c58:	1824      	adds	r4, r4, r0
     c5a:	b500      	push	{lr}
     c5c:	42a5      	cmp	r5, r4
     c5e:	d903      	bls.n	c68 <__aeabi_lmul+0x34>
     c60:	2080      	movs	r0, #128	; 0x80
     c62:	0240      	lsls	r0, r0, #9
     c64:	4680      	mov	r8, r0
     c66:	4441      	add	r1, r8
     c68:	0c25      	lsrs	r5, r4, #16
     c6a:	186d      	adds	r5, r5, r1
     c6c:	4661      	mov	r1, ip
     c6e:	4359      	muls	r1, r3
     c70:	437a      	muls	r2, r7
     c72:	0430      	lsls	r0, r6, #16
     c74:	1949      	adds	r1, r1, r5
     c76:	0424      	lsls	r4, r4, #16
     c78:	0c00      	lsrs	r0, r0, #16
     c7a:	1820      	adds	r0, r4, r0
     c7c:	1889      	adds	r1, r1, r2
     c7e:	bc04      	pop	{r2}
     c80:	4690      	mov	r8, r2
     c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c84 <__cxa_atexit>:
     c84:	b510      	push	{r4, lr}
     c86:	0004      	movs	r4, r0
     c88:	4804      	ldr	r0, [pc, #16]	; (c9c <__cxa_atexit+0x18>)
     c8a:	0013      	movs	r3, r2
     c8c:	2800      	cmp	r0, #0
     c8e:	d004      	beq.n	c9a <__cxa_atexit+0x16>
     c90:	000a      	movs	r2, r1
     c92:	2002      	movs	r0, #2
     c94:	0021      	movs	r1, r4
     c96:	e000      	b.n	c9a <__cxa_atexit+0x16>
     c98:	bf00      	nop
     c9a:	bd10      	pop	{r4, pc}
     c9c:	00000000 	.word	0x00000000

00000ca0 <__libc_init_array>:
     ca0:	b570      	push	{r4, r5, r6, lr}
     ca2:	2600      	movs	r6, #0
     ca4:	4d0c      	ldr	r5, [pc, #48]	; (cd8 <__libc_init_array+0x38>)
     ca6:	4c0d      	ldr	r4, [pc, #52]	; (cdc <__libc_init_array+0x3c>)
     ca8:	1b64      	subs	r4, r4, r5
     caa:	10a4      	asrs	r4, r4, #2
     cac:	42a6      	cmp	r6, r4
     cae:	d109      	bne.n	cc4 <__libc_init_array+0x24>
     cb0:	2600      	movs	r6, #0
     cb2:	f000 ffdb 	bl	1c6c <_init>
     cb6:	4d0a      	ldr	r5, [pc, #40]	; (ce0 <__libc_init_array+0x40>)
     cb8:	4c0a      	ldr	r4, [pc, #40]	; (ce4 <__libc_init_array+0x44>)
     cba:	1b64      	subs	r4, r4, r5
     cbc:	10a4      	asrs	r4, r4, #2
     cbe:	42a6      	cmp	r6, r4
     cc0:	d105      	bne.n	cce <__libc_init_array+0x2e>
     cc2:	bd70      	pop	{r4, r5, r6, pc}
     cc4:	00b3      	lsls	r3, r6, #2
     cc6:	58eb      	ldr	r3, [r5, r3]
     cc8:	4798      	blx	r3
     cca:	3601      	adds	r6, #1
     ccc:	e7ee      	b.n	cac <__libc_init_array+0xc>
     cce:	00b3      	lsls	r3, r6, #2
     cd0:	58eb      	ldr	r3, [r5, r3]
     cd2:	4798      	blx	r3
     cd4:	3601      	adds	r6, #1
     cd6:	e7f2      	b.n	cbe <__libc_init_array+0x1e>
     cd8:	00001c78 	.word	0x00001c78
     cdc:	00001c78 	.word	0x00001c78
     ce0:	00001c78 	.word	0x00001c78
     ce4:	00001c84 	.word	0x00001c84

00000ce8 <malloc>:
     ce8:	b510      	push	{r4, lr}
     cea:	4b03      	ldr	r3, [pc, #12]	; (cf8 <malloc+0x10>)
     cec:	0001      	movs	r1, r0
     cee:	6818      	ldr	r0, [r3, #0]
     cf0:	f000 f858 	bl	da4 <_malloc_r>
     cf4:	bd10      	pop	{r4, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	20000010 	.word	0x20000010

00000cfc <free>:
     cfc:	b510      	push	{r4, lr}
     cfe:	4b03      	ldr	r3, [pc, #12]	; (d0c <free+0x10>)
     d00:	0001      	movs	r1, r0
     d02:	6818      	ldr	r0, [r3, #0]
     d04:	f000 f804 	bl	d10 <_free_r>
     d08:	bd10      	pop	{r4, pc}
     d0a:	46c0      	nop			; (mov r8, r8)
     d0c:	20000010 	.word	0x20000010

00000d10 <_free_r>:
     d10:	b570      	push	{r4, r5, r6, lr}
     d12:	0005      	movs	r5, r0
     d14:	2900      	cmp	r1, #0
     d16:	d010      	beq.n	d3a <_free_r+0x2a>
     d18:	1f0c      	subs	r4, r1, #4
     d1a:	6823      	ldr	r3, [r4, #0]
     d1c:	2b00      	cmp	r3, #0
     d1e:	da00      	bge.n	d22 <_free_r+0x12>
     d20:	18e4      	adds	r4, r4, r3
     d22:	0028      	movs	r0, r5
     d24:	f000 f8f6 	bl	f14 <__malloc_lock>
     d28:	4a1d      	ldr	r2, [pc, #116]	; (da0 <_free_r+0x90>)
     d2a:	6813      	ldr	r3, [r2, #0]
     d2c:	2b00      	cmp	r3, #0
     d2e:	d105      	bne.n	d3c <_free_r+0x2c>
     d30:	6063      	str	r3, [r4, #4]
     d32:	6014      	str	r4, [r2, #0]
     d34:	0028      	movs	r0, r5
     d36:	f000 f8f5 	bl	f24 <__malloc_unlock>
     d3a:	bd70      	pop	{r4, r5, r6, pc}
     d3c:	42a3      	cmp	r3, r4
     d3e:	d908      	bls.n	d52 <_free_r+0x42>
     d40:	6821      	ldr	r1, [r4, #0]
     d42:	1860      	adds	r0, r4, r1
     d44:	4283      	cmp	r3, r0
     d46:	d1f3      	bne.n	d30 <_free_r+0x20>
     d48:	6818      	ldr	r0, [r3, #0]
     d4a:	685b      	ldr	r3, [r3, #4]
     d4c:	1841      	adds	r1, r0, r1
     d4e:	6021      	str	r1, [r4, #0]
     d50:	e7ee      	b.n	d30 <_free_r+0x20>
     d52:	001a      	movs	r2, r3
     d54:	685b      	ldr	r3, [r3, #4]
     d56:	2b00      	cmp	r3, #0
     d58:	d001      	beq.n	d5e <_free_r+0x4e>
     d5a:	42a3      	cmp	r3, r4
     d5c:	d9f9      	bls.n	d52 <_free_r+0x42>
     d5e:	6811      	ldr	r1, [r2, #0]
     d60:	1850      	adds	r0, r2, r1
     d62:	42a0      	cmp	r0, r4
     d64:	d10b      	bne.n	d7e <_free_r+0x6e>
     d66:	6820      	ldr	r0, [r4, #0]
     d68:	1809      	adds	r1, r1, r0
     d6a:	1850      	adds	r0, r2, r1
     d6c:	6011      	str	r1, [r2, #0]
     d6e:	4283      	cmp	r3, r0
     d70:	d1e0      	bne.n	d34 <_free_r+0x24>
     d72:	6818      	ldr	r0, [r3, #0]
     d74:	685b      	ldr	r3, [r3, #4]
     d76:	1841      	adds	r1, r0, r1
     d78:	6011      	str	r1, [r2, #0]
     d7a:	6053      	str	r3, [r2, #4]
     d7c:	e7da      	b.n	d34 <_free_r+0x24>
     d7e:	42a0      	cmp	r0, r4
     d80:	d902      	bls.n	d88 <_free_r+0x78>
     d82:	230c      	movs	r3, #12
     d84:	602b      	str	r3, [r5, #0]
     d86:	e7d5      	b.n	d34 <_free_r+0x24>
     d88:	6821      	ldr	r1, [r4, #0]
     d8a:	1860      	adds	r0, r4, r1
     d8c:	4283      	cmp	r3, r0
     d8e:	d103      	bne.n	d98 <_free_r+0x88>
     d90:	6818      	ldr	r0, [r3, #0]
     d92:	685b      	ldr	r3, [r3, #4]
     d94:	1841      	adds	r1, r0, r1
     d96:	6021      	str	r1, [r4, #0]
     d98:	6063      	str	r3, [r4, #4]
     d9a:	6054      	str	r4, [r2, #4]
     d9c:	e7ca      	b.n	d34 <_free_r+0x24>
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	200004c4 	.word	0x200004c4

00000da4 <_malloc_r>:
     da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     da6:	2303      	movs	r3, #3
     da8:	1ccd      	adds	r5, r1, #3
     daa:	439d      	bics	r5, r3
     dac:	3508      	adds	r5, #8
     dae:	0006      	movs	r6, r0
     db0:	2d0c      	cmp	r5, #12
     db2:	d21f      	bcs.n	df4 <_malloc_r+0x50>
     db4:	250c      	movs	r5, #12
     db6:	42a9      	cmp	r1, r5
     db8:	d81e      	bhi.n	df8 <_malloc_r+0x54>
     dba:	0030      	movs	r0, r6
     dbc:	f000 f8aa 	bl	f14 <__malloc_lock>
     dc0:	4925      	ldr	r1, [pc, #148]	; (e58 <_malloc_r+0xb4>)
     dc2:	680a      	ldr	r2, [r1, #0]
     dc4:	0014      	movs	r4, r2
     dc6:	2c00      	cmp	r4, #0
     dc8:	d11a      	bne.n	e00 <_malloc_r+0x5c>
     dca:	4f24      	ldr	r7, [pc, #144]	; (e5c <_malloc_r+0xb8>)
     dcc:	683b      	ldr	r3, [r7, #0]
     dce:	2b00      	cmp	r3, #0
     dd0:	d104      	bne.n	ddc <_malloc_r+0x38>
     dd2:	0021      	movs	r1, r4
     dd4:	0030      	movs	r0, r6
     dd6:	f000 f843 	bl	e60 <_sbrk_r>
     dda:	6038      	str	r0, [r7, #0]
     ddc:	0029      	movs	r1, r5
     dde:	0030      	movs	r0, r6
     de0:	f000 f83e 	bl	e60 <_sbrk_r>
     de4:	1c43      	adds	r3, r0, #1
     de6:	d12b      	bne.n	e40 <_malloc_r+0x9c>
     de8:	230c      	movs	r3, #12
     dea:	0030      	movs	r0, r6
     dec:	6033      	str	r3, [r6, #0]
     dee:	f000 f899 	bl	f24 <__malloc_unlock>
     df2:	e003      	b.n	dfc <_malloc_r+0x58>
     df4:	2d00      	cmp	r5, #0
     df6:	dade      	bge.n	db6 <_malloc_r+0x12>
     df8:	230c      	movs	r3, #12
     dfa:	6033      	str	r3, [r6, #0]
     dfc:	2000      	movs	r0, #0
     dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e00:	6823      	ldr	r3, [r4, #0]
     e02:	1b5b      	subs	r3, r3, r5
     e04:	d419      	bmi.n	e3a <_malloc_r+0x96>
     e06:	2b0b      	cmp	r3, #11
     e08:	d903      	bls.n	e12 <_malloc_r+0x6e>
     e0a:	6023      	str	r3, [r4, #0]
     e0c:	18e4      	adds	r4, r4, r3
     e0e:	6025      	str	r5, [r4, #0]
     e10:	e003      	b.n	e1a <_malloc_r+0x76>
     e12:	6863      	ldr	r3, [r4, #4]
     e14:	42a2      	cmp	r2, r4
     e16:	d10e      	bne.n	e36 <_malloc_r+0x92>
     e18:	600b      	str	r3, [r1, #0]
     e1a:	0030      	movs	r0, r6
     e1c:	f000 f882 	bl	f24 <__malloc_unlock>
     e20:	0020      	movs	r0, r4
     e22:	2207      	movs	r2, #7
     e24:	300b      	adds	r0, #11
     e26:	1d23      	adds	r3, r4, #4
     e28:	4390      	bics	r0, r2
     e2a:	1ac2      	subs	r2, r0, r3
     e2c:	4298      	cmp	r0, r3
     e2e:	d0e6      	beq.n	dfe <_malloc_r+0x5a>
     e30:	1a1b      	subs	r3, r3, r0
     e32:	50a3      	str	r3, [r4, r2]
     e34:	e7e3      	b.n	dfe <_malloc_r+0x5a>
     e36:	6053      	str	r3, [r2, #4]
     e38:	e7ef      	b.n	e1a <_malloc_r+0x76>
     e3a:	0022      	movs	r2, r4
     e3c:	6864      	ldr	r4, [r4, #4]
     e3e:	e7c2      	b.n	dc6 <_malloc_r+0x22>
     e40:	2303      	movs	r3, #3
     e42:	1cc4      	adds	r4, r0, #3
     e44:	439c      	bics	r4, r3
     e46:	42a0      	cmp	r0, r4
     e48:	d0e1      	beq.n	e0e <_malloc_r+0x6a>
     e4a:	1a21      	subs	r1, r4, r0
     e4c:	0030      	movs	r0, r6
     e4e:	f000 f807 	bl	e60 <_sbrk_r>
     e52:	1c43      	adds	r3, r0, #1
     e54:	d1db      	bne.n	e0e <_malloc_r+0x6a>
     e56:	e7c7      	b.n	de8 <_malloc_r+0x44>
     e58:	200004c4 	.word	0x200004c4
     e5c:	200004c8 	.word	0x200004c8

00000e60 <_sbrk_r>:
     e60:	2300      	movs	r3, #0
     e62:	b570      	push	{r4, r5, r6, lr}
     e64:	4d06      	ldr	r5, [pc, #24]	; (e80 <_sbrk_r+0x20>)
     e66:	0004      	movs	r4, r0
     e68:	0008      	movs	r0, r1
     e6a:	602b      	str	r3, [r5, #0]
     e6c:	f7ff fec8 	bl	c00 <_sbrk>
     e70:	1c43      	adds	r3, r0, #1
     e72:	d103      	bne.n	e7c <_sbrk_r+0x1c>
     e74:	682b      	ldr	r3, [r5, #0]
     e76:	2b00      	cmp	r3, #0
     e78:	d000      	beq.n	e7c <_sbrk_r+0x1c>
     e7a:	6023      	str	r3, [r4, #0]
     e7c:	bd70      	pop	{r4, r5, r6, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	200004cc 	.word	0x200004cc

00000e84 <siscanf>:
     e84:	b40e      	push	{r1, r2, r3}
     e86:	b530      	push	{r4, r5, lr}
     e88:	2381      	movs	r3, #129	; 0x81
     e8a:	b09c      	sub	sp, #112	; 0x70
     e8c:	466a      	mov	r2, sp
     e8e:	ac1f      	add	r4, sp, #124	; 0x7c
     e90:	009b      	lsls	r3, r3, #2
     e92:	cc20      	ldmia	r4!, {r5}
     e94:	8293      	strh	r3, [r2, #20]
     e96:	9002      	str	r0, [sp, #8]
     e98:	9006      	str	r0, [sp, #24]
     e9a:	f000 f81d 	bl	ed8 <strlen>
     e9e:	4b0b      	ldr	r3, [pc, #44]	; (ecc <siscanf+0x48>)
     ea0:	466a      	mov	r2, sp
     ea2:	930b      	str	r3, [sp, #44]	; 0x2c
     ea4:	2300      	movs	r3, #0
     ea6:	9003      	str	r0, [sp, #12]
     ea8:	9007      	str	r0, [sp, #28]
     eaa:	4809      	ldr	r0, [pc, #36]	; (ed0 <siscanf+0x4c>)
     eac:	930f      	str	r3, [sp, #60]	; 0x3c
     eae:	9314      	str	r3, [sp, #80]	; 0x50
     eb0:	3b01      	subs	r3, #1
     eb2:	82d3      	strh	r3, [r2, #22]
     eb4:	a902      	add	r1, sp, #8
     eb6:	0023      	movs	r3, r4
     eb8:	002a      	movs	r2, r5
     eba:	6800      	ldr	r0, [r0, #0]
     ebc:	9401      	str	r4, [sp, #4]
     ebe:	f000 f895 	bl	fec <__ssvfiscanf_r>
     ec2:	b01c      	add	sp, #112	; 0x70
     ec4:	bc30      	pop	{r4, r5}
     ec6:	bc08      	pop	{r3}
     ec8:	b003      	add	sp, #12
     eca:	4718      	bx	r3
     ecc:	00000ed5 	.word	0x00000ed5
     ed0:	20000010 	.word	0x20000010

00000ed4 <__seofread>:
     ed4:	2000      	movs	r0, #0
     ed6:	4770      	bx	lr

00000ed8 <strlen>:
     ed8:	2300      	movs	r3, #0
     eda:	5cc2      	ldrb	r2, [r0, r3]
     edc:	3301      	adds	r3, #1
     ede:	2a00      	cmp	r2, #0
     ee0:	d1fb      	bne.n	eda <strlen+0x2>
     ee2:	1e58      	subs	r0, r3, #1
     ee4:	4770      	bx	lr

00000ee6 <strstr>:
     ee6:	780a      	ldrb	r2, [r1, #0]
     ee8:	b530      	push	{r4, r5, lr}
     eea:	2a00      	cmp	r2, #0
     eec:	d10c      	bne.n	f08 <strstr+0x22>
     eee:	bd30      	pop	{r4, r5, pc}
     ef0:	429a      	cmp	r2, r3
     ef2:	d108      	bne.n	f06 <strstr+0x20>
     ef4:	2301      	movs	r3, #1
     ef6:	5ccc      	ldrb	r4, [r1, r3]
     ef8:	2c00      	cmp	r4, #0
     efa:	d0f8      	beq.n	eee <strstr+0x8>
     efc:	5cc5      	ldrb	r5, [r0, r3]
     efe:	42a5      	cmp	r5, r4
     f00:	d101      	bne.n	f06 <strstr+0x20>
     f02:	3301      	adds	r3, #1
     f04:	e7f7      	b.n	ef6 <strstr+0x10>
     f06:	3001      	adds	r0, #1
     f08:	7803      	ldrb	r3, [r0, #0]
     f0a:	2b00      	cmp	r3, #0
     f0c:	d1f0      	bne.n	ef0 <strstr+0xa>
     f0e:	0018      	movs	r0, r3
     f10:	e7ed      	b.n	eee <strstr+0x8>
     f12:	Address 0x00000f12 is out of bounds.


00000f14 <__malloc_lock>:
     f14:	b510      	push	{r4, lr}
     f16:	4802      	ldr	r0, [pc, #8]	; (f20 <__malloc_lock+0xc>)
     f18:	f000 fcd2 	bl	18c0 <__retarget_lock_acquire_recursive>
     f1c:	bd10      	pop	{r4, pc}
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	200004d4 	.word	0x200004d4

00000f24 <__malloc_unlock>:
     f24:	b510      	push	{r4, lr}
     f26:	4802      	ldr	r0, [pc, #8]	; (f30 <__malloc_unlock+0xc>)
     f28:	f000 fccb 	bl	18c2 <__retarget_lock_release_recursive>
     f2c:	bd10      	pop	{r4, pc}
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	200004d4 	.word	0x200004d4

00000f34 <_sungetc_r>:
     f34:	b570      	push	{r4, r5, r6, lr}
     f36:	0014      	movs	r4, r2
     f38:	1c4b      	adds	r3, r1, #1
     f3a:	d103      	bne.n	f44 <_sungetc_r+0x10>
     f3c:	2501      	movs	r5, #1
     f3e:	426d      	negs	r5, r5
     f40:	0028      	movs	r0, r5
     f42:	bd70      	pop	{r4, r5, r6, pc}
     f44:	8993      	ldrh	r3, [r2, #12]
     f46:	2220      	movs	r2, #32
     f48:	4393      	bics	r3, r2
     f4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
     f4c:	81a3      	strh	r3, [r4, #12]
     f4e:	b2ce      	uxtb	r6, r1
     f50:	6863      	ldr	r3, [r4, #4]
     f52:	b2cd      	uxtb	r5, r1
     f54:	2a00      	cmp	r2, #0
     f56:	d010      	beq.n	f7a <_sungetc_r+0x46>
     f58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     f5a:	429a      	cmp	r2, r3
     f5c:	dd07      	ble.n	f6e <_sungetc_r+0x3a>
     f5e:	6823      	ldr	r3, [r4, #0]
     f60:	3b01      	subs	r3, #1
     f62:	6023      	str	r3, [r4, #0]
     f64:	701e      	strb	r6, [r3, #0]
     f66:	6863      	ldr	r3, [r4, #4]
     f68:	3301      	adds	r3, #1
     f6a:	6063      	str	r3, [r4, #4]
     f6c:	e7e8      	b.n	f40 <_sungetc_r+0xc>
     f6e:	0021      	movs	r1, r4
     f70:	f000 fc68 	bl	1844 <__submore>
     f74:	2800      	cmp	r0, #0
     f76:	d0f2      	beq.n	f5e <_sungetc_r+0x2a>
     f78:	e7e0      	b.n	f3c <_sungetc_r+0x8>
     f7a:	6921      	ldr	r1, [r4, #16]
     f7c:	6822      	ldr	r2, [r4, #0]
     f7e:	2900      	cmp	r1, #0
     f80:	d007      	beq.n	f92 <_sungetc_r+0x5e>
     f82:	4291      	cmp	r1, r2
     f84:	d205      	bcs.n	f92 <_sungetc_r+0x5e>
     f86:	1e51      	subs	r1, r2, #1
     f88:	7808      	ldrb	r0, [r1, #0]
     f8a:	42a8      	cmp	r0, r5
     f8c:	d101      	bne.n	f92 <_sungetc_r+0x5e>
     f8e:	6021      	str	r1, [r4, #0]
     f90:	e7ea      	b.n	f68 <_sungetc_r+0x34>
     f92:	6423      	str	r3, [r4, #64]	; 0x40
     f94:	0023      	movs	r3, r4
     f96:	3344      	adds	r3, #68	; 0x44
     f98:	6363      	str	r3, [r4, #52]	; 0x34
     f9a:	2303      	movs	r3, #3
     f9c:	63a3      	str	r3, [r4, #56]	; 0x38
     f9e:	0023      	movs	r3, r4
     fa0:	3346      	adds	r3, #70	; 0x46
     fa2:	63e2      	str	r2, [r4, #60]	; 0x3c
     fa4:	701e      	strb	r6, [r3, #0]
     fa6:	6023      	str	r3, [r4, #0]
     fa8:	2301      	movs	r3, #1
     faa:	e7de      	b.n	f6a <_sungetc_r+0x36>

00000fac <__ssrefill_r>:
     fac:	b510      	push	{r4, lr}
     fae:	000c      	movs	r4, r1
     fb0:	6b49      	ldr	r1, [r1, #52]	; 0x34
     fb2:	2900      	cmp	r1, #0
     fb4:	d00e      	beq.n	fd4 <__ssrefill_r+0x28>
     fb6:	0023      	movs	r3, r4
     fb8:	3344      	adds	r3, #68	; 0x44
     fba:	4299      	cmp	r1, r3
     fbc:	d001      	beq.n	fc2 <__ssrefill_r+0x16>
     fbe:	f7ff fea7 	bl	d10 <_free_r>
     fc2:	2000      	movs	r0, #0
     fc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
     fc6:	6360      	str	r0, [r4, #52]	; 0x34
     fc8:	6063      	str	r3, [r4, #4]
     fca:	4283      	cmp	r3, r0
     fcc:	d002      	beq.n	fd4 <__ssrefill_r+0x28>
     fce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     fd0:	6023      	str	r3, [r4, #0]
     fd2:	bd10      	pop	{r4, pc}
     fd4:	6923      	ldr	r3, [r4, #16]
     fd6:	2001      	movs	r0, #1
     fd8:	6023      	str	r3, [r4, #0]
     fda:	2300      	movs	r3, #0
     fdc:	89a2      	ldrh	r2, [r4, #12]
     fde:	6063      	str	r3, [r4, #4]
     fe0:	3320      	adds	r3, #32
     fe2:	4313      	orrs	r3, r2
     fe4:	81a3      	strh	r3, [r4, #12]
     fe6:	4240      	negs	r0, r0
     fe8:	e7f3      	b.n	fd2 <__ssrefill_r+0x26>
     fea:	Address 0x00000fea is out of bounds.


00000fec <__ssvfiscanf_r>:
     fec:	b5f0      	push	{r4, r5, r6, r7, lr}
     fee:	4cb5      	ldr	r4, [pc, #724]	; (12c4 <__ssvfiscanf_r+0x2d8>)
     ff0:	0005      	movs	r5, r0
     ff2:	44a5      	add	sp, r4
     ff4:	000c      	movs	r4, r1
     ff6:	2100      	movs	r1, #0
     ff8:	9148      	str	r1, [sp, #288]	; 0x120
     ffa:	9149      	str	r1, [sp, #292]	; 0x124
     ffc:	a905      	add	r1, sp, #20
     ffe:	914a      	str	r1, [sp, #296]	; 0x128
    1000:	21be      	movs	r1, #190	; 0xbe
    1002:	48b1      	ldr	r0, [pc, #708]	; (12c8 <__ssvfiscanf_r+0x2dc>)
    1004:	0049      	lsls	r1, r1, #1
    1006:	ae45      	add	r6, sp, #276	; 0x114
    1008:	5070      	str	r0, [r6, r1]
    100a:	48b0      	ldr	r0, [pc, #704]	; (12cc <__ssvfiscanf_r+0x2e0>)
    100c:	3104      	adds	r1, #4
    100e:	ae45      	add	r6, sp, #276	; 0x114
    1010:	5070      	str	r0, [r6, r1]
    1012:	9304      	str	r3, [sp, #16]
    1014:	9101      	str	r1, [sp, #4]
    1016:	7813      	ldrb	r3, [r2, #0]
    1018:	9300      	str	r3, [sp, #0]
    101a:	2b00      	cmp	r3, #0
    101c:	d100      	bne.n	1020 <__ssvfiscanf_r+0x34>
    101e:	e14f      	b.n	12c0 <__ssvfiscanf_r+0x2d4>
    1020:	4fab      	ldr	r7, [pc, #684]	; (12d0 <__ssvfiscanf_r+0x2e4>)
    1022:	2008      	movs	r0, #8
    1024:	5cf9      	ldrb	r1, [r7, r3]
    1026:	2308      	movs	r3, #8
    1028:	1c56      	adds	r6, r2, #1
    102a:	400b      	ands	r3, r1
    102c:	4201      	tst	r1, r0
    102e:	d01e      	beq.n	106e <__ssvfiscanf_r+0x82>
    1030:	6863      	ldr	r3, [r4, #4]
    1032:	2b00      	cmp	r3, #0
    1034:	dd11      	ble.n	105a <__ssvfiscanf_r+0x6e>
    1036:	2108      	movs	r1, #8
    1038:	6823      	ldr	r3, [r4, #0]
    103a:	781a      	ldrb	r2, [r3, #0]
    103c:	5cba      	ldrb	r2, [r7, r2]
    103e:	420a      	tst	r2, r1
    1040:	d101      	bne.n	1046 <__ssvfiscanf_r+0x5a>
    1042:	0032      	movs	r2, r6
    1044:	e7e7      	b.n	1016 <__ssvfiscanf_r+0x2a>
    1046:	9a49      	ldr	r2, [sp, #292]	; 0x124
    1048:	3301      	adds	r3, #1
    104a:	9200      	str	r2, [sp, #0]
    104c:	3201      	adds	r2, #1
    104e:	9249      	str	r2, [sp, #292]	; 0x124
    1050:	6862      	ldr	r2, [r4, #4]
    1052:	6023      	str	r3, [r4, #0]
    1054:	3a01      	subs	r2, #1
    1056:	6062      	str	r2, [r4, #4]
    1058:	e7ea      	b.n	1030 <__ssvfiscanf_r+0x44>
    105a:	9a01      	ldr	r2, [sp, #4]
    105c:	ab45      	add	r3, sp, #276	; 0x114
    105e:	589b      	ldr	r3, [r3, r2]
    1060:	0021      	movs	r1, r4
    1062:	0028      	movs	r0, r5
    1064:	9300      	str	r3, [sp, #0]
    1066:	4798      	blx	r3
    1068:	2800      	cmp	r0, #0
    106a:	d0e4      	beq.n	1036 <__ssvfiscanf_r+0x4a>
    106c:	e7e9      	b.n	1042 <__ssvfiscanf_r+0x56>
    106e:	9900      	ldr	r1, [sp, #0]
    1070:	2925      	cmp	r1, #37	; 0x25
    1072:	d164      	bne.n	113e <__ssvfiscanf_r+0x152>
    1074:	9347      	str	r3, [sp, #284]	; 0x11c
    1076:	9345      	str	r3, [sp, #276]	; 0x114
    1078:	7853      	ldrb	r3, [r2, #1]
    107a:	2b2a      	cmp	r3, #42	; 0x2a
    107c:	d102      	bne.n	1084 <__ssvfiscanf_r+0x98>
    107e:	3b1a      	subs	r3, #26
    1080:	9345      	str	r3, [sp, #276]	; 0x114
    1082:	1c96      	adds	r6, r2, #2
    1084:	0037      	movs	r7, r6
    1086:	200a      	movs	r0, #10
    1088:	7839      	ldrb	r1, [r7, #0]
    108a:	1c7b      	adds	r3, r7, #1
    108c:	9302      	str	r3, [sp, #8]
    108e:	000b      	movs	r3, r1
    1090:	3b30      	subs	r3, #48	; 0x30
    1092:	2b09      	cmp	r3, #9
    1094:	d91f      	bls.n	10d6 <__ssvfiscanf_r+0xea>
    1096:	4e8f      	ldr	r6, [pc, #572]	; (12d4 <__ssvfiscanf_r+0x2e8>)
    1098:	2203      	movs	r2, #3
    109a:	0030      	movs	r0, r6
    109c:	f000 fc12 	bl	18c4 <memchr>
    10a0:	2800      	cmp	r0, #0
    10a2:	d007      	beq.n	10b4 <__ssvfiscanf_r+0xc8>
    10a4:	2301      	movs	r3, #1
    10a6:	1b80      	subs	r0, r0, r6
    10a8:	4083      	lsls	r3, r0
    10aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
    10ac:	9f02      	ldr	r7, [sp, #8]
    10ae:	4313      	orrs	r3, r2
    10b0:	9203      	str	r2, [sp, #12]
    10b2:	9345      	str	r3, [sp, #276]	; 0x114
    10b4:	783b      	ldrb	r3, [r7, #0]
    10b6:	1c7e      	adds	r6, r7, #1
    10b8:	2b78      	cmp	r3, #120	; 0x78
    10ba:	d807      	bhi.n	10cc <__ssvfiscanf_r+0xe0>
    10bc:	2b57      	cmp	r3, #87	; 0x57
    10be:	d812      	bhi.n	10e6 <__ssvfiscanf_r+0xfa>
    10c0:	2b25      	cmp	r3, #37	; 0x25
    10c2:	d03c      	beq.n	113e <__ssvfiscanf_r+0x152>
    10c4:	d836      	bhi.n	1134 <__ssvfiscanf_r+0x148>
    10c6:	2b00      	cmp	r3, #0
    10c8:	d100      	bne.n	10cc <__ssvfiscanf_r+0xe0>
    10ca:	e0f6      	b.n	12ba <__ssvfiscanf_r+0x2ce>
    10cc:	2303      	movs	r3, #3
    10ce:	934b      	str	r3, [sp, #300]	; 0x12c
    10d0:	3307      	adds	r3, #7
    10d2:	9346      	str	r3, [sp, #280]	; 0x118
    10d4:	e076      	b.n	11c4 <__ssvfiscanf_r+0x1d8>
    10d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    10d8:	9f02      	ldr	r7, [sp, #8]
    10da:	9303      	str	r3, [sp, #12]
    10dc:	4343      	muls	r3, r0
    10de:	3b30      	subs	r3, #48	; 0x30
    10e0:	185b      	adds	r3, r3, r1
    10e2:	9347      	str	r3, [sp, #284]	; 0x11c
    10e4:	e7d0      	b.n	1088 <__ssvfiscanf_r+0x9c>
    10e6:	0018      	movs	r0, r3
    10e8:	3858      	subs	r0, #88	; 0x58
    10ea:	2820      	cmp	r0, #32
    10ec:	d8ee      	bhi.n	10cc <__ssvfiscanf_r+0xe0>
    10ee:	f000 fc2b 	bl	1948 <__gnu_thumb1_case_shi>
    10f2:	0051      	.short	0x0051
    10f4:	ffedffed 	.word	0xffedffed
    10f8:	ffed0086 	.word	0xffed0086
    10fc:	ffedffed 	.word	0xffedffed
    1100:	ffedffed 	.word	0xffedffed
    1104:	ffedffed 	.word	0xffedffed
    1108:	00600093 	.word	0x00600093
    110c:	00240024 	.word	0x00240024
    1110:	ffed0024 	.word	0xffed0024
    1114:	ffed0062 	.word	0xffed0062
    1118:	ffedffed 	.word	0xffedffed
    111c:	009dffed 	.word	0x009dffed
    1120:	004b0065 	.word	0x004b0065
    1124:	ffedffed 	.word	0xffedffed
    1128:	ffed009b 	.word	0xffed009b
    112c:	ffed0060 	.word	0xffed0060
    1130:	0051ffed 	.word	0x0051ffed
    1134:	3b45      	subs	r3, #69	; 0x45
    1136:	2b02      	cmp	r3, #2
    1138:	d8c8      	bhi.n	10cc <__ssvfiscanf_r+0xe0>
    113a:	2305      	movs	r3, #5
    113c:	e041      	b.n	11c2 <__ssvfiscanf_r+0x1d6>
    113e:	6863      	ldr	r3, [r4, #4]
    1140:	2b00      	cmp	r3, #0
    1142:	dd0f      	ble.n	1164 <__ssvfiscanf_r+0x178>
    1144:	6823      	ldr	r3, [r4, #0]
    1146:	9900      	ldr	r1, [sp, #0]
    1148:	781a      	ldrb	r2, [r3, #0]
    114a:	428a      	cmp	r2, r1
    114c:	d000      	beq.n	1150 <__ssvfiscanf_r+0x164>
    114e:	e0b7      	b.n	12c0 <__ssvfiscanf_r+0x2d4>
    1150:	3301      	adds	r3, #1
    1152:	6862      	ldr	r2, [r4, #4]
    1154:	6023      	str	r3, [r4, #0]
    1156:	9b49      	ldr	r3, [sp, #292]	; 0x124
    1158:	3a01      	subs	r2, #1
    115a:	9300      	str	r3, [sp, #0]
    115c:	3301      	adds	r3, #1
    115e:	6062      	str	r2, [r4, #4]
    1160:	9349      	str	r3, [sp, #292]	; 0x124
    1162:	e76e      	b.n	1042 <__ssvfiscanf_r+0x56>
    1164:	9a01      	ldr	r2, [sp, #4]
    1166:	ab45      	add	r3, sp, #276	; 0x114
    1168:	589b      	ldr	r3, [r3, r2]
    116a:	0021      	movs	r1, r4
    116c:	0028      	movs	r0, r5
    116e:	9302      	str	r3, [sp, #8]
    1170:	4798      	blx	r3
    1172:	2800      	cmp	r0, #0
    1174:	d0e6      	beq.n	1144 <__ssvfiscanf_r+0x158>
    1176:	9848      	ldr	r0, [sp, #288]	; 0x120
    1178:	2800      	cmp	r0, #0
    117a:	d000      	beq.n	117e <__ssvfiscanf_r+0x192>
    117c:	e099      	b.n	12b2 <__ssvfiscanf_r+0x2c6>
    117e:	3801      	subs	r0, #1
    1180:	23a7      	movs	r3, #167	; 0xa7
    1182:	009b      	lsls	r3, r3, #2
    1184:	449d      	add	sp, r3
    1186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1188:	9a45      	ldr	r2, [sp, #276]	; 0x114
    118a:	9200      	str	r2, [sp, #0]
    118c:	2220      	movs	r2, #32
    118e:	9900      	ldr	r1, [sp, #0]
    1190:	430a      	orrs	r2, r1
    1192:	9245      	str	r2, [sp, #276]	; 0x114
    1194:	9a45      	ldr	r2, [sp, #276]	; 0x114
    1196:	9200      	str	r2, [sp, #0]
    1198:	2280      	movs	r2, #128	; 0x80
    119a:	9900      	ldr	r1, [sp, #0]
    119c:	0092      	lsls	r2, r2, #2
    119e:	430a      	orrs	r2, r1
    11a0:	9245      	str	r2, [sp, #276]	; 0x114
    11a2:	2210      	movs	r2, #16
    11a4:	9246      	str	r2, [sp, #280]	; 0x118
    11a6:	226e      	movs	r2, #110	; 0x6e
    11a8:	429a      	cmp	r2, r3
    11aa:	419b      	sbcs	r3, r3
    11ac:	425b      	negs	r3, r3
    11ae:	3303      	adds	r3, #3
    11b0:	e007      	b.n	11c2 <__ssvfiscanf_r+0x1d6>
    11b2:	220a      	movs	r2, #10
    11b4:	e7f6      	b.n	11a4 <__ssvfiscanf_r+0x1b8>
    11b6:	2300      	movs	r3, #0
    11b8:	9346      	str	r3, [sp, #280]	; 0x118
    11ba:	e7f8      	b.n	11ae <__ssvfiscanf_r+0x1c2>
    11bc:	2308      	movs	r3, #8
    11be:	9346      	str	r3, [sp, #280]	; 0x118
    11c0:	3b04      	subs	r3, #4
    11c2:	934b      	str	r3, [sp, #300]	; 0x12c
    11c4:	6863      	ldr	r3, [r4, #4]
    11c6:	2b00      	cmp	r3, #0
    11c8:	dd3f      	ble.n	124a <__ssvfiscanf_r+0x25e>
    11ca:	9b45      	ldr	r3, [sp, #276]	; 0x114
    11cc:	9300      	str	r3, [sp, #0]
    11ce:	065b      	lsls	r3, r3, #25
    11d0:	d406      	bmi.n	11e0 <__ssvfiscanf_r+0x1f4>
    11d2:	6823      	ldr	r3, [r4, #0]
    11d4:	493e      	ldr	r1, [pc, #248]	; (12d0 <__ssvfiscanf_r+0x2e4>)
    11d6:	781a      	ldrb	r2, [r3, #0]
    11d8:	5c8a      	ldrb	r2, [r1, r2]
    11da:	2108      	movs	r1, #8
    11dc:	420a      	tst	r2, r1
    11de:	d13e      	bne.n	125e <__ssvfiscanf_r+0x272>
    11e0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    11e2:	2b02      	cmp	r3, #2
    11e4:	dc51      	bgt.n	128a <__ssvfiscanf_r+0x29e>
    11e6:	0022      	movs	r2, r4
    11e8:	0028      	movs	r0, r5
    11ea:	ab04      	add	r3, sp, #16
    11ec:	a945      	add	r1, sp, #276	; 0x114
    11ee:	f000 f875 	bl	12dc <_scanf_chars>
    11f2:	2801      	cmp	r0, #1
    11f4:	d064      	beq.n	12c0 <__ssvfiscanf_r+0x2d4>
    11f6:	2802      	cmp	r0, #2
    11f8:	d000      	beq.n	11fc <__ssvfiscanf_r+0x210>
    11fa:	e722      	b.n	1042 <__ssvfiscanf_r+0x56>
    11fc:	e7bb      	b.n	1176 <__ssvfiscanf_r+0x18a>
    11fe:	0031      	movs	r1, r6
    1200:	a805      	add	r0, sp, #20
    1202:	f000 f9cd 	bl	15a0 <__sccl>
    1206:	9b45      	ldr	r3, [sp, #276]	; 0x114
    1208:	0006      	movs	r6, r0
    120a:	9300      	str	r3, [sp, #0]
    120c:	2340      	movs	r3, #64	; 0x40
    120e:	9a00      	ldr	r2, [sp, #0]
    1210:	4313      	orrs	r3, r2
    1212:	9345      	str	r3, [sp, #276]	; 0x114
    1214:	2301      	movs	r3, #1
    1216:	e7d4      	b.n	11c2 <__ssvfiscanf_r+0x1d6>
    1218:	9b45      	ldr	r3, [sp, #276]	; 0x114
    121a:	9300      	str	r3, [sp, #0]
    121c:	2340      	movs	r3, #64	; 0x40
    121e:	9a00      	ldr	r2, [sp, #0]
    1220:	4313      	orrs	r3, r2
    1222:	9345      	str	r3, [sp, #276]	; 0x114
    1224:	2300      	movs	r3, #0
    1226:	e7cc      	b.n	11c2 <__ssvfiscanf_r+0x1d6>
    1228:	2302      	movs	r3, #2
    122a:	e7ca      	b.n	11c2 <__ssvfiscanf_r+0x1d6>
    122c:	9845      	ldr	r0, [sp, #276]	; 0x114
    122e:	06c3      	lsls	r3, r0, #27
    1230:	d500      	bpl.n	1234 <__ssvfiscanf_r+0x248>
    1232:	e706      	b.n	1042 <__ssvfiscanf_r+0x56>
    1234:	9b04      	ldr	r3, [sp, #16]
    1236:	9a49      	ldr	r2, [sp, #292]	; 0x124
    1238:	1d19      	adds	r1, r3, #4
    123a:	9104      	str	r1, [sp, #16]
    123c:	681b      	ldr	r3, [r3, #0]
    123e:	07c7      	lsls	r7, r0, #31
    1240:	d501      	bpl.n	1246 <__ssvfiscanf_r+0x25a>
    1242:	801a      	strh	r2, [r3, #0]
    1244:	e6fd      	b.n	1042 <__ssvfiscanf_r+0x56>
    1246:	601a      	str	r2, [r3, #0]
    1248:	e6fb      	b.n	1042 <__ssvfiscanf_r+0x56>
    124a:	9a01      	ldr	r2, [sp, #4]
    124c:	ab45      	add	r3, sp, #276	; 0x114
    124e:	589b      	ldr	r3, [r3, r2]
    1250:	0021      	movs	r1, r4
    1252:	0028      	movs	r0, r5
    1254:	9300      	str	r3, [sp, #0]
    1256:	4798      	blx	r3
    1258:	2800      	cmp	r0, #0
    125a:	d0b6      	beq.n	11ca <__ssvfiscanf_r+0x1de>
    125c:	e78b      	b.n	1176 <__ssvfiscanf_r+0x18a>
    125e:	9a49      	ldr	r2, [sp, #292]	; 0x124
    1260:	9200      	str	r2, [sp, #0]
    1262:	3201      	adds	r2, #1
    1264:	9249      	str	r2, [sp, #292]	; 0x124
    1266:	6862      	ldr	r2, [r4, #4]
    1268:	3a01      	subs	r2, #1
    126a:	6062      	str	r2, [r4, #4]
    126c:	2a00      	cmp	r2, #0
    126e:	dd02      	ble.n	1276 <__ssvfiscanf_r+0x28a>
    1270:	3301      	adds	r3, #1
    1272:	6023      	str	r3, [r4, #0]
    1274:	e7ad      	b.n	11d2 <__ssvfiscanf_r+0x1e6>
    1276:	9a01      	ldr	r2, [sp, #4]
    1278:	ab45      	add	r3, sp, #276	; 0x114
    127a:	589b      	ldr	r3, [r3, r2]
    127c:	0021      	movs	r1, r4
    127e:	0028      	movs	r0, r5
    1280:	9300      	str	r3, [sp, #0]
    1282:	4798      	blx	r3
    1284:	2800      	cmp	r0, #0
    1286:	d0a4      	beq.n	11d2 <__ssvfiscanf_r+0x1e6>
    1288:	e775      	b.n	1176 <__ssvfiscanf_r+0x18a>
    128a:	2b04      	cmp	r3, #4
    128c:	dc06      	bgt.n	129c <__ssvfiscanf_r+0x2b0>
    128e:	0022      	movs	r2, r4
    1290:	0028      	movs	r0, r5
    1292:	ab04      	add	r3, sp, #16
    1294:	a945      	add	r1, sp, #276	; 0x114
    1296:	f000 f87f 	bl	1398 <_scanf_i>
    129a:	e7aa      	b.n	11f2 <__ssvfiscanf_r+0x206>
    129c:	4b0e      	ldr	r3, [pc, #56]	; (12d8 <__ssvfiscanf_r+0x2ec>)
    129e:	2b00      	cmp	r3, #0
    12a0:	d100      	bne.n	12a4 <__ssvfiscanf_r+0x2b8>
    12a2:	e6ce      	b.n	1042 <__ssvfiscanf_r+0x56>
    12a4:	0022      	movs	r2, r4
    12a6:	0028      	movs	r0, r5
    12a8:	ab04      	add	r3, sp, #16
    12aa:	a945      	add	r1, sp, #276	; 0x114
    12ac:	e000      	b.n	12b0 <__ssvfiscanf_r+0x2c4>
    12ae:	bf00      	nop
    12b0:	e79f      	b.n	11f2 <__ssvfiscanf_r+0x206>
    12b2:	89a3      	ldrh	r3, [r4, #12]
    12b4:	065b      	lsls	r3, r3, #25
    12b6:	d400      	bmi.n	12ba <__ssvfiscanf_r+0x2ce>
    12b8:	e762      	b.n	1180 <__ssvfiscanf_r+0x194>
    12ba:	2001      	movs	r0, #1
    12bc:	4240      	negs	r0, r0
    12be:	e75f      	b.n	1180 <__ssvfiscanf_r+0x194>
    12c0:	9848      	ldr	r0, [sp, #288]	; 0x120
    12c2:	e75d      	b.n	1180 <__ssvfiscanf_r+0x194>
    12c4:	fffffd64 	.word	0xfffffd64
    12c8:	00000f35 	.word	0x00000f35
    12cc:	00000fad 	.word	0x00000fad
    12d0:	00001b0a 	.word	0x00001b0a
    12d4:	00001aea 	.word	0x00001aea
    12d8:	00000000 	.word	0x00000000

000012dc <_scanf_chars>:
    12dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    12de:	0015      	movs	r5, r2
    12e0:	688a      	ldr	r2, [r1, #8]
    12e2:	000c      	movs	r4, r1
    12e4:	9001      	str	r0, [sp, #4]
    12e6:	2a00      	cmp	r2, #0
    12e8:	d105      	bne.n	12f6 <_scanf_chars+0x1a>
    12ea:	6989      	ldr	r1, [r1, #24]
    12ec:	3201      	adds	r2, #1
    12ee:	2900      	cmp	r1, #0
    12f0:	d000      	beq.n	12f4 <_scanf_chars+0x18>
    12f2:	3a02      	subs	r2, #2
    12f4:	60a2      	str	r2, [r4, #8]
    12f6:	6822      	ldr	r2, [r4, #0]
    12f8:	06d2      	lsls	r2, r2, #27
    12fa:	d403      	bmi.n	1304 <_scanf_chars+0x28>
    12fc:	681a      	ldr	r2, [r3, #0]
    12fe:	1d11      	adds	r1, r2, #4
    1300:	6019      	str	r1, [r3, #0]
    1302:	6817      	ldr	r7, [r2, #0]
    1304:	2600      	movs	r6, #0
    1306:	69a0      	ldr	r0, [r4, #24]
    1308:	2800      	cmp	r0, #0
    130a:	d013      	beq.n	1334 <_scanf_chars+0x58>
    130c:	2801      	cmp	r0, #1
    130e:	d108      	bne.n	1322 <_scanf_chars+0x46>
    1310:	682b      	ldr	r3, [r5, #0]
    1312:	6962      	ldr	r2, [r4, #20]
    1314:	781b      	ldrb	r3, [r3, #0]
    1316:	5cd3      	ldrb	r3, [r2, r3]
    1318:	2b00      	cmp	r3, #0
    131a:	d10b      	bne.n	1334 <_scanf_chars+0x58>
    131c:	2e00      	cmp	r6, #0
    131e:	d127      	bne.n	1370 <_scanf_chars+0x94>
    1320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1322:	2802      	cmp	r0, #2
    1324:	d124      	bne.n	1370 <_scanf_chars+0x94>
    1326:	682b      	ldr	r3, [r5, #0]
    1328:	4a1a      	ldr	r2, [pc, #104]	; (1394 <_scanf_chars+0xb8>)
    132a:	781b      	ldrb	r3, [r3, #0]
    132c:	5cd3      	ldrb	r3, [r2, r3]
    132e:	2208      	movs	r2, #8
    1330:	4213      	tst	r3, r2
    1332:	d11d      	bne.n	1370 <_scanf_chars+0x94>
    1334:	2210      	movs	r2, #16
    1336:	6823      	ldr	r3, [r4, #0]
    1338:	3601      	adds	r6, #1
    133a:	4213      	tst	r3, r2
    133c:	d103      	bne.n	1346 <_scanf_chars+0x6a>
    133e:	682b      	ldr	r3, [r5, #0]
    1340:	781b      	ldrb	r3, [r3, #0]
    1342:	703b      	strb	r3, [r7, #0]
    1344:	3701      	adds	r7, #1
    1346:	682a      	ldr	r2, [r5, #0]
    1348:	686b      	ldr	r3, [r5, #4]
    134a:	3201      	adds	r2, #1
    134c:	602a      	str	r2, [r5, #0]
    134e:	68a2      	ldr	r2, [r4, #8]
    1350:	3b01      	subs	r3, #1
    1352:	3a01      	subs	r2, #1
    1354:	606b      	str	r3, [r5, #4]
    1356:	60a2      	str	r2, [r4, #8]
    1358:	2a00      	cmp	r2, #0
    135a:	d009      	beq.n	1370 <_scanf_chars+0x94>
    135c:	2b00      	cmp	r3, #0
    135e:	dcd2      	bgt.n	1306 <_scanf_chars+0x2a>
    1360:	23c0      	movs	r3, #192	; 0xc0
    1362:	005b      	lsls	r3, r3, #1
    1364:	0029      	movs	r1, r5
    1366:	58e3      	ldr	r3, [r4, r3]
    1368:	9801      	ldr	r0, [sp, #4]
    136a:	4798      	blx	r3
    136c:	2800      	cmp	r0, #0
    136e:	d0ca      	beq.n	1306 <_scanf_chars+0x2a>
    1370:	6822      	ldr	r2, [r4, #0]
    1372:	2310      	movs	r3, #16
    1374:	0011      	movs	r1, r2
    1376:	4019      	ands	r1, r3
    1378:	421a      	tst	r2, r3
    137a:	d106      	bne.n	138a <_scanf_chars+0xae>
    137c:	68e3      	ldr	r3, [r4, #12]
    137e:	3301      	adds	r3, #1
    1380:	60e3      	str	r3, [r4, #12]
    1382:	69a3      	ldr	r3, [r4, #24]
    1384:	2b00      	cmp	r3, #0
    1386:	d000      	beq.n	138a <_scanf_chars+0xae>
    1388:	7039      	strb	r1, [r7, #0]
    138a:	6923      	ldr	r3, [r4, #16]
    138c:	2000      	movs	r0, #0
    138e:	199e      	adds	r6, r3, r6
    1390:	6126      	str	r6, [r4, #16]
    1392:	e7c5      	b.n	1320 <_scanf_chars+0x44>
    1394:	00001b0a 	.word	0x00001b0a

00001398 <_scanf_i>:
    1398:	b5f0      	push	{r4, r5, r6, r7, lr}
    139a:	000c      	movs	r4, r1
    139c:	b08d      	sub	sp, #52	; 0x34
    139e:	9302      	str	r3, [sp, #8]
    13a0:	4b79      	ldr	r3, [pc, #484]	; (1588 <_scanf_i+0x1f0>)
    13a2:	0016      	movs	r6, r2
    13a4:	9005      	str	r0, [sp, #20]
    13a6:	aa09      	add	r2, sp, #36	; 0x24
    13a8:	cb23      	ldmia	r3!, {r0, r1, r5}
    13aa:	c223      	stmia	r2!, {r0, r1, r5}
    13ac:	4b77      	ldr	r3, [pc, #476]	; (158c <_scanf_i+0x1f4>)
    13ae:	9306      	str	r3, [sp, #24]
    13b0:	69a3      	ldr	r3, [r4, #24]
    13b2:	2b03      	cmp	r3, #3
    13b4:	d001      	beq.n	13ba <_scanf_i+0x22>
    13b6:	4b76      	ldr	r3, [pc, #472]	; (1590 <_scanf_i+0x1f8>)
    13b8:	9306      	str	r3, [sp, #24]
    13ba:	22ae      	movs	r2, #174	; 0xae
    13bc:	2000      	movs	r0, #0
    13be:	68a3      	ldr	r3, [r4, #8]
    13c0:	0052      	lsls	r2, r2, #1
    13c2:	1e59      	subs	r1, r3, #1
    13c4:	9004      	str	r0, [sp, #16]
    13c6:	4291      	cmp	r1, r2
    13c8:	d905      	bls.n	13d6 <_scanf_i+0x3e>
    13ca:	3b5e      	subs	r3, #94	; 0x5e
    13cc:	3bff      	subs	r3, #255	; 0xff
    13ce:	9304      	str	r3, [sp, #16]
    13d0:	235e      	movs	r3, #94	; 0x5e
    13d2:	33ff      	adds	r3, #255	; 0xff
    13d4:	60a3      	str	r3, [r4, #8]
    13d6:	0023      	movs	r3, r4
    13d8:	331c      	adds	r3, #28
    13da:	9301      	str	r3, [sp, #4]
    13dc:	23d0      	movs	r3, #208	; 0xd0
    13de:	2700      	movs	r7, #0
    13e0:	6822      	ldr	r2, [r4, #0]
    13e2:	011b      	lsls	r3, r3, #4
    13e4:	4313      	orrs	r3, r2
    13e6:	6023      	str	r3, [r4, #0]
    13e8:	9b01      	ldr	r3, [sp, #4]
    13ea:	9303      	str	r3, [sp, #12]
    13ec:	6833      	ldr	r3, [r6, #0]
    13ee:	a809      	add	r0, sp, #36	; 0x24
    13f0:	7819      	ldrb	r1, [r3, #0]
    13f2:	00bb      	lsls	r3, r7, #2
    13f4:	2202      	movs	r2, #2
    13f6:	5818      	ldr	r0, [r3, r0]
    13f8:	f000 fa64 	bl	18c4 <memchr>
    13fc:	2800      	cmp	r0, #0
    13fe:	d02b      	beq.n	1458 <_scanf_i+0xc0>
    1400:	2f01      	cmp	r7, #1
    1402:	d162      	bne.n	14ca <_scanf_i+0x132>
    1404:	6863      	ldr	r3, [r4, #4]
    1406:	2b00      	cmp	r3, #0
    1408:	d106      	bne.n	1418 <_scanf_i+0x80>
    140a:	3308      	adds	r3, #8
    140c:	6822      	ldr	r2, [r4, #0]
    140e:	6063      	str	r3, [r4, #4]
    1410:	33f9      	adds	r3, #249	; 0xf9
    1412:	33ff      	adds	r3, #255	; 0xff
    1414:	4313      	orrs	r3, r2
    1416:	6023      	str	r3, [r4, #0]
    1418:	4b5e      	ldr	r3, [pc, #376]	; (1594 <_scanf_i+0x1fc>)
    141a:	6822      	ldr	r2, [r4, #0]
    141c:	4013      	ands	r3, r2
    141e:	6023      	str	r3, [r4, #0]
    1420:	68a3      	ldr	r3, [r4, #8]
    1422:	1e5a      	subs	r2, r3, #1
    1424:	60a2      	str	r2, [r4, #8]
    1426:	2b00      	cmp	r3, #0
    1428:	d016      	beq.n	1458 <_scanf_i+0xc0>
    142a:	6833      	ldr	r3, [r6, #0]
    142c:	1c5a      	adds	r2, r3, #1
    142e:	6032      	str	r2, [r6, #0]
    1430:	781b      	ldrb	r3, [r3, #0]
    1432:	9a03      	ldr	r2, [sp, #12]
    1434:	7013      	strb	r3, [r2, #0]
    1436:	6873      	ldr	r3, [r6, #4]
    1438:	1c55      	adds	r5, r2, #1
    143a:	3b01      	subs	r3, #1
    143c:	6073      	str	r3, [r6, #4]
    143e:	9503      	str	r5, [sp, #12]
    1440:	2b00      	cmp	r3, #0
    1442:	dc09      	bgt.n	1458 <_scanf_i+0xc0>
    1444:	23c0      	movs	r3, #192	; 0xc0
    1446:	005b      	lsls	r3, r3, #1
    1448:	58e3      	ldr	r3, [r4, r3]
    144a:	0031      	movs	r1, r6
    144c:	9805      	ldr	r0, [sp, #20]
    144e:	9307      	str	r3, [sp, #28]
    1450:	4798      	blx	r3
    1452:	2800      	cmp	r0, #0
    1454:	d000      	beq.n	1458 <_scanf_i+0xc0>
    1456:	e081      	b.n	155c <_scanf_i+0x1c4>
    1458:	3701      	adds	r7, #1
    145a:	2f03      	cmp	r7, #3
    145c:	d1c6      	bne.n	13ec <_scanf_i+0x54>
    145e:	6863      	ldr	r3, [r4, #4]
    1460:	2b00      	cmp	r3, #0
    1462:	d101      	bne.n	1468 <_scanf_i+0xd0>
    1464:	330a      	adds	r3, #10
    1466:	6063      	str	r3, [r4, #4]
    1468:	2110      	movs	r1, #16
    146a:	2700      	movs	r7, #0
    146c:	6863      	ldr	r3, [r4, #4]
    146e:	6960      	ldr	r0, [r4, #20]
    1470:	1ac9      	subs	r1, r1, r3
    1472:	4b49      	ldr	r3, [pc, #292]	; (1598 <_scanf_i+0x200>)
    1474:	18c9      	adds	r1, r1, r3
    1476:	f000 f893 	bl	15a0 <__sccl>
    147a:	9d03      	ldr	r5, [sp, #12]
    147c:	68a3      	ldr	r3, [r4, #8]
    147e:	6822      	ldr	r2, [r4, #0]
    1480:	9303      	str	r3, [sp, #12]
    1482:	2b00      	cmp	r3, #0
    1484:	d041      	beq.n	150a <_scanf_i+0x172>
    1486:	6831      	ldr	r1, [r6, #0]
    1488:	6963      	ldr	r3, [r4, #20]
    148a:	7808      	ldrb	r0, [r1, #0]
    148c:	5c1b      	ldrb	r3, [r3, r0]
    148e:	2b00      	cmp	r3, #0
    1490:	d03b      	beq.n	150a <_scanf_i+0x172>
    1492:	2830      	cmp	r0, #48	; 0x30
    1494:	d129      	bne.n	14ea <_scanf_i+0x152>
    1496:	2380      	movs	r3, #128	; 0x80
    1498:	011b      	lsls	r3, r3, #4
    149a:	421a      	tst	r2, r3
    149c:	d025      	beq.n	14ea <_scanf_i+0x152>
    149e:	9b04      	ldr	r3, [sp, #16]
    14a0:	3701      	adds	r7, #1
    14a2:	2b00      	cmp	r3, #0
    14a4:	d005      	beq.n	14b2 <_scanf_i+0x11a>
    14a6:	001a      	movs	r2, r3
    14a8:	9b03      	ldr	r3, [sp, #12]
    14aa:	3a01      	subs	r2, #1
    14ac:	3301      	adds	r3, #1
    14ae:	9204      	str	r2, [sp, #16]
    14b0:	60a3      	str	r3, [r4, #8]
    14b2:	6873      	ldr	r3, [r6, #4]
    14b4:	3b01      	subs	r3, #1
    14b6:	6073      	str	r3, [r6, #4]
    14b8:	2b00      	cmp	r3, #0
    14ba:	dd1d      	ble.n	14f8 <_scanf_i+0x160>
    14bc:	6833      	ldr	r3, [r6, #0]
    14be:	3301      	adds	r3, #1
    14c0:	6033      	str	r3, [r6, #0]
    14c2:	68a3      	ldr	r3, [r4, #8]
    14c4:	3b01      	subs	r3, #1
    14c6:	60a3      	str	r3, [r4, #8]
    14c8:	e7d8      	b.n	147c <_scanf_i+0xe4>
    14ca:	2f02      	cmp	r7, #2
    14cc:	d1a8      	bne.n	1420 <_scanf_i+0x88>
    14ce:	21c0      	movs	r1, #192	; 0xc0
    14d0:	2380      	movs	r3, #128	; 0x80
    14d2:	6822      	ldr	r2, [r4, #0]
    14d4:	00c9      	lsls	r1, r1, #3
    14d6:	4011      	ands	r1, r2
    14d8:	009b      	lsls	r3, r3, #2
    14da:	4299      	cmp	r1, r3
    14dc:	d1bf      	bne.n	145e <_scanf_i+0xc6>
    14de:	3bf1      	subs	r3, #241	; 0xf1
    14e0:	3bff      	subs	r3, #255	; 0xff
    14e2:	6063      	str	r3, [r4, #4]
    14e4:	33f0      	adds	r3, #240	; 0xf0
    14e6:	4313      	orrs	r3, r2
    14e8:	e799      	b.n	141e <_scanf_i+0x86>
    14ea:	4b2c      	ldr	r3, [pc, #176]	; (159c <_scanf_i+0x204>)
    14ec:	4013      	ands	r3, r2
    14ee:	6023      	str	r3, [r4, #0]
    14f0:	780b      	ldrb	r3, [r1, #0]
    14f2:	702b      	strb	r3, [r5, #0]
    14f4:	3501      	adds	r5, #1
    14f6:	e7dc      	b.n	14b2 <_scanf_i+0x11a>
    14f8:	23c0      	movs	r3, #192	; 0xc0
    14fa:	005b      	lsls	r3, r3, #1
    14fc:	58e3      	ldr	r3, [r4, r3]
    14fe:	0031      	movs	r1, r6
    1500:	9805      	ldr	r0, [sp, #20]
    1502:	9303      	str	r3, [sp, #12]
    1504:	4798      	blx	r3
    1506:	2800      	cmp	r0, #0
    1508:	d0db      	beq.n	14c2 <_scanf_i+0x12a>
    150a:	6823      	ldr	r3, [r4, #0]
    150c:	05db      	lsls	r3, r3, #23
    150e:	d50e      	bpl.n	152e <_scanf_i+0x196>
    1510:	9b01      	ldr	r3, [sp, #4]
    1512:	429d      	cmp	r5, r3
    1514:	d907      	bls.n	1526 <_scanf_i+0x18e>
    1516:	23be      	movs	r3, #190	; 0xbe
    1518:	3d01      	subs	r5, #1
    151a:	005b      	lsls	r3, r3, #1
    151c:	0032      	movs	r2, r6
    151e:	7829      	ldrb	r1, [r5, #0]
    1520:	58e3      	ldr	r3, [r4, r3]
    1522:	9805      	ldr	r0, [sp, #20]
    1524:	4798      	blx	r3
    1526:	9b01      	ldr	r3, [sp, #4]
    1528:	2001      	movs	r0, #1
    152a:	429d      	cmp	r5, r3
    152c:	d029      	beq.n	1582 <_scanf_i+0x1ea>
    152e:	6821      	ldr	r1, [r4, #0]
    1530:	2310      	movs	r3, #16
    1532:	000a      	movs	r2, r1
    1534:	401a      	ands	r2, r3
    1536:	4219      	tst	r1, r3
    1538:	d11c      	bne.n	1574 <_scanf_i+0x1dc>
    153a:	702a      	strb	r2, [r5, #0]
    153c:	6863      	ldr	r3, [r4, #4]
    153e:	9901      	ldr	r1, [sp, #4]
    1540:	9805      	ldr	r0, [sp, #20]
    1542:	9e06      	ldr	r6, [sp, #24]
    1544:	47b0      	blx	r6
    1546:	9b02      	ldr	r3, [sp, #8]
    1548:	6821      	ldr	r1, [r4, #0]
    154a:	681b      	ldr	r3, [r3, #0]
    154c:	068a      	lsls	r2, r1, #26
    154e:	d507      	bpl.n	1560 <_scanf_i+0x1c8>
    1550:	1d1a      	adds	r2, r3, #4
    1552:	9902      	ldr	r1, [sp, #8]
    1554:	600a      	str	r2, [r1, #0]
    1556:	681b      	ldr	r3, [r3, #0]
    1558:	6018      	str	r0, [r3, #0]
    155a:	e008      	b.n	156e <_scanf_i+0x1d6>
    155c:	2700      	movs	r7, #0
    155e:	e7d4      	b.n	150a <_scanf_i+0x172>
    1560:	1d1a      	adds	r2, r3, #4
    1562:	07ce      	lsls	r6, r1, #31
    1564:	d5f5      	bpl.n	1552 <_scanf_i+0x1ba>
    1566:	9902      	ldr	r1, [sp, #8]
    1568:	600a      	str	r2, [r1, #0]
    156a:	681b      	ldr	r3, [r3, #0]
    156c:	8018      	strh	r0, [r3, #0]
    156e:	68e3      	ldr	r3, [r4, #12]
    1570:	3301      	adds	r3, #1
    1572:	60e3      	str	r3, [r4, #12]
    1574:	2000      	movs	r0, #0
    1576:	9b01      	ldr	r3, [sp, #4]
    1578:	1aed      	subs	r5, r5, r3
    157a:	6923      	ldr	r3, [r4, #16]
    157c:	19ef      	adds	r7, r5, r7
    157e:	19df      	adds	r7, r3, r7
    1580:	6127      	str	r7, [r4, #16]
    1582:	b00d      	add	sp, #52	; 0x34
    1584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	00001a88 	.word	0x00001a88
    158c:	0000171d 	.word	0x0000171d
    1590:	0000183d 	.word	0x0000183d
    1594:	fffffaff 	.word	0xfffffaff
    1598:	00001af7 	.word	0x00001af7
    159c:	fffff6ff 	.word	0xfffff6ff

000015a0 <__sccl>:
    15a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15a2:	780b      	ldrb	r3, [r1, #0]
    15a4:	0004      	movs	r4, r0
    15a6:	2b5e      	cmp	r3, #94	; 0x5e
    15a8:	d00c      	beq.n	15c4 <__sccl+0x24>
    15aa:	1c48      	adds	r0, r1, #1
    15ac:	2100      	movs	r1, #0
    15ae:	0022      	movs	r2, r4
    15b0:	1c65      	adds	r5, r4, #1
    15b2:	35ff      	adds	r5, #255	; 0xff
    15b4:	7011      	strb	r1, [r2, #0]
    15b6:	3201      	adds	r2, #1
    15b8:	42aa      	cmp	r2, r5
    15ba:	d1fb      	bne.n	15b4 <__sccl+0x14>
    15bc:	2b00      	cmp	r3, #0
    15be:	d105      	bne.n	15cc <__sccl+0x2c>
    15c0:	3801      	subs	r0, #1
    15c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15c4:	784b      	ldrb	r3, [r1, #1]
    15c6:	1c88      	adds	r0, r1, #2
    15c8:	2101      	movs	r1, #1
    15ca:	e7f0      	b.n	15ae <__sccl+0xe>
    15cc:	2201      	movs	r2, #1
    15ce:	262d      	movs	r6, #45	; 0x2d
    15d0:	4051      	eors	r1, r2
    15d2:	0002      	movs	r2, r0
    15d4:	54e1      	strb	r1, [r4, r3]
    15d6:	7815      	ldrb	r5, [r2, #0]
    15d8:	1c50      	adds	r0, r2, #1
    15da:	2d2d      	cmp	r5, #45	; 0x2d
    15dc:	d009      	beq.n	15f2 <__sccl+0x52>
    15de:	2d5d      	cmp	r5, #93	; 0x5d
    15e0:	d0ef      	beq.n	15c2 <__sccl+0x22>
    15e2:	2d00      	cmp	r5, #0
    15e4:	d101      	bne.n	15ea <__sccl+0x4a>
    15e6:	0010      	movs	r0, r2
    15e8:	e7eb      	b.n	15c2 <__sccl+0x22>
    15ea:	002b      	movs	r3, r5
    15ec:	e7f1      	b.n	15d2 <__sccl+0x32>
    15ee:	0033      	movs	r3, r6
    15f0:	e7ef      	b.n	15d2 <__sccl+0x32>
    15f2:	7855      	ldrb	r5, [r2, #1]
    15f4:	2d5d      	cmp	r5, #93	; 0x5d
    15f6:	d0fa      	beq.n	15ee <__sccl+0x4e>
    15f8:	42ab      	cmp	r3, r5
    15fa:	dcf8      	bgt.n	15ee <__sccl+0x4e>
    15fc:	0018      	movs	r0, r3
    15fe:	3202      	adds	r2, #2
    1600:	3001      	adds	r0, #1
    1602:	5421      	strb	r1, [r4, r0]
    1604:	4285      	cmp	r5, r0
    1606:	dcfb      	bgt.n	1600 <__sccl+0x60>
    1608:	2000      	movs	r0, #0
    160a:	1c5f      	adds	r7, r3, #1
    160c:	42ab      	cmp	r3, r5
    160e:	da01      	bge.n	1614 <__sccl+0x74>
    1610:	1ae8      	subs	r0, r5, r3
    1612:	3801      	subs	r0, #1
    1614:	183b      	adds	r3, r7, r0
    1616:	e7de      	b.n	15d6 <__sccl+0x36>

00001618 <_strtol_l.isra.0>:
    1618:	b5f0      	push	{r4, r5, r6, r7, lr}
    161a:	001e      	movs	r6, r3
    161c:	4b3d      	ldr	r3, [pc, #244]	; (1714 <_strtol_l.isra.0+0xfc>)
    161e:	b087      	sub	sp, #28
    1620:	9005      	str	r0, [sp, #20]
    1622:	9202      	str	r2, [sp, #8]
    1624:	0008      	movs	r0, r1
    1626:	469c      	mov	ip, r3
    1628:	2208      	movs	r2, #8
    162a:	9101      	str	r1, [sp, #4]
    162c:	0003      	movs	r3, r0
    162e:	4661      	mov	r1, ip
    1630:	781c      	ldrb	r4, [r3, #0]
    1632:	1c45      	adds	r5, r0, #1
    1634:	5d09      	ldrb	r1, [r1, r4]
    1636:	0028      	movs	r0, r5
    1638:	000f      	movs	r7, r1
    163a:	4017      	ands	r7, r2
    163c:	4211      	tst	r1, r2
    163e:	d1f5      	bne.n	162c <_strtol_l.isra.0+0x14>
    1640:	2c2d      	cmp	r4, #45	; 0x2d
    1642:	d133      	bne.n	16ac <_strtol_l.isra.0+0x94>
    1644:	2701      	movs	r7, #1
    1646:	782c      	ldrb	r4, [r5, #0]
    1648:	1c9d      	adds	r5, r3, #2
    164a:	2e00      	cmp	r6, #0
    164c:	d05d      	beq.n	170a <_strtol_l.isra.0+0xf2>
    164e:	2e10      	cmp	r6, #16
    1650:	d109      	bne.n	1666 <_strtol_l.isra.0+0x4e>
    1652:	2c30      	cmp	r4, #48	; 0x30
    1654:	d107      	bne.n	1666 <_strtol_l.isra.0+0x4e>
    1656:	2220      	movs	r2, #32
    1658:	782b      	ldrb	r3, [r5, #0]
    165a:	4393      	bics	r3, r2
    165c:	2b58      	cmp	r3, #88	; 0x58
    165e:	d14f      	bne.n	1700 <_strtol_l.isra.0+0xe8>
    1660:	2610      	movs	r6, #16
    1662:	786c      	ldrb	r4, [r5, #1]
    1664:	3502      	adds	r5, #2
    1666:	4b2c      	ldr	r3, [pc, #176]	; (1718 <_strtol_l.isra.0+0x100>)
    1668:	0031      	movs	r1, r6
    166a:	18fb      	adds	r3, r7, r3
    166c:	0018      	movs	r0, r3
    166e:	9303      	str	r3, [sp, #12]
    1670:	f000 f9fa 	bl	1a68 <__aeabi_uidivmod>
    1674:	2300      	movs	r3, #0
    1676:	2201      	movs	r2, #1
    1678:	4684      	mov	ip, r0
    167a:	0018      	movs	r0, r3
    167c:	9104      	str	r1, [sp, #16]
    167e:	4252      	negs	r2, r2
    1680:	0021      	movs	r1, r4
    1682:	3930      	subs	r1, #48	; 0x30
    1684:	2909      	cmp	r1, #9
    1686:	d816      	bhi.n	16b6 <_strtol_l.isra.0+0x9e>
    1688:	000c      	movs	r4, r1
    168a:	42a6      	cmp	r6, r4
    168c:	dd1f      	ble.n	16ce <_strtol_l.isra.0+0xb6>
    168e:	1c59      	adds	r1, r3, #1
    1690:	d009      	beq.n	16a6 <_strtol_l.isra.0+0x8e>
    1692:	0013      	movs	r3, r2
    1694:	4584      	cmp	ip, r0
    1696:	d306      	bcc.n	16a6 <_strtol_l.isra.0+0x8e>
    1698:	d102      	bne.n	16a0 <_strtol_l.isra.0+0x88>
    169a:	9904      	ldr	r1, [sp, #16]
    169c:	42a1      	cmp	r1, r4
    169e:	db02      	blt.n	16a6 <_strtol_l.isra.0+0x8e>
    16a0:	2301      	movs	r3, #1
    16a2:	4370      	muls	r0, r6
    16a4:	1820      	adds	r0, r4, r0
    16a6:	782c      	ldrb	r4, [r5, #0]
    16a8:	3501      	adds	r5, #1
    16aa:	e7e9      	b.n	1680 <_strtol_l.isra.0+0x68>
    16ac:	2c2b      	cmp	r4, #43	; 0x2b
    16ae:	d1cc      	bne.n	164a <_strtol_l.isra.0+0x32>
    16b0:	782c      	ldrb	r4, [r5, #0]
    16b2:	1c9d      	adds	r5, r3, #2
    16b4:	e7c9      	b.n	164a <_strtol_l.isra.0+0x32>
    16b6:	0021      	movs	r1, r4
    16b8:	3941      	subs	r1, #65	; 0x41
    16ba:	2919      	cmp	r1, #25
    16bc:	d801      	bhi.n	16c2 <_strtol_l.isra.0+0xaa>
    16be:	3c37      	subs	r4, #55	; 0x37
    16c0:	e7e3      	b.n	168a <_strtol_l.isra.0+0x72>
    16c2:	0021      	movs	r1, r4
    16c4:	3961      	subs	r1, #97	; 0x61
    16c6:	2919      	cmp	r1, #25
    16c8:	d801      	bhi.n	16ce <_strtol_l.isra.0+0xb6>
    16ca:	3c57      	subs	r4, #87	; 0x57
    16cc:	e7dd      	b.n	168a <_strtol_l.isra.0+0x72>
    16ce:	1c5a      	adds	r2, r3, #1
    16d0:	d108      	bne.n	16e4 <_strtol_l.isra.0+0xcc>
    16d2:	9a05      	ldr	r2, [sp, #20]
    16d4:	3323      	adds	r3, #35	; 0x23
    16d6:	6013      	str	r3, [r2, #0]
    16d8:	9b02      	ldr	r3, [sp, #8]
    16da:	9803      	ldr	r0, [sp, #12]
    16dc:	2b00      	cmp	r3, #0
    16de:	d109      	bne.n	16f4 <_strtol_l.isra.0+0xdc>
    16e0:	b007      	add	sp, #28
    16e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16e4:	2f00      	cmp	r7, #0
    16e6:	d000      	beq.n	16ea <_strtol_l.isra.0+0xd2>
    16e8:	4240      	negs	r0, r0
    16ea:	9a02      	ldr	r2, [sp, #8]
    16ec:	2a00      	cmp	r2, #0
    16ee:	d0f7      	beq.n	16e0 <_strtol_l.isra.0+0xc8>
    16f0:	2b00      	cmp	r3, #0
    16f2:	d001      	beq.n	16f8 <_strtol_l.isra.0+0xe0>
    16f4:	1e6b      	subs	r3, r5, #1
    16f6:	9301      	str	r3, [sp, #4]
    16f8:	9b02      	ldr	r3, [sp, #8]
    16fa:	9a01      	ldr	r2, [sp, #4]
    16fc:	601a      	str	r2, [r3, #0]
    16fe:	e7ef      	b.n	16e0 <_strtol_l.isra.0+0xc8>
    1700:	2430      	movs	r4, #48	; 0x30
    1702:	2e00      	cmp	r6, #0
    1704:	d1af      	bne.n	1666 <_strtol_l.isra.0+0x4e>
    1706:	3608      	adds	r6, #8
    1708:	e7ad      	b.n	1666 <_strtol_l.isra.0+0x4e>
    170a:	2c30      	cmp	r4, #48	; 0x30
    170c:	d0a3      	beq.n	1656 <_strtol_l.isra.0+0x3e>
    170e:	260a      	movs	r6, #10
    1710:	e7a9      	b.n	1666 <_strtol_l.isra.0+0x4e>
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	00001b0a 	.word	0x00001b0a
    1718:	7fffffff 	.word	0x7fffffff

0000171c <_strtol_r>:
    171c:	b510      	push	{r4, lr}
    171e:	f7ff ff7b 	bl	1618 <_strtol_l.isra.0>
    1722:	bd10      	pop	{r4, pc}

00001724 <_strtoul_l.isra.0>:
    1724:	b5f0      	push	{r4, r5, r6, r7, lr}
    1726:	001e      	movs	r6, r3
    1728:	4b43      	ldr	r3, [pc, #268]	; (1838 <_strtoul_l.isra.0+0x114>)
    172a:	b087      	sub	sp, #28
    172c:	000f      	movs	r7, r1
    172e:	9101      	str	r1, [sp, #4]
    1730:	469c      	mov	ip, r3
    1732:	2108      	movs	r1, #8
    1734:	9005      	str	r0, [sp, #20]
    1736:	9202      	str	r2, [sp, #8]
    1738:	003b      	movs	r3, r7
    173a:	4662      	mov	r2, ip
    173c:	781c      	ldrb	r4, [r3, #0]
    173e:	1c7d      	adds	r5, r7, #1
    1740:	5d10      	ldrb	r0, [r2, r4]
    1742:	002f      	movs	r7, r5
    1744:	0002      	movs	r2, r0
    1746:	400a      	ands	r2, r1
    1748:	4208      	tst	r0, r1
    174a:	d1f5      	bne.n	1738 <_strtoul_l.isra.0+0x14>
    174c:	2c2d      	cmp	r4, #45	; 0x2d
    174e:	d13a      	bne.n	17c6 <_strtoul_l.isra.0+0xa2>
    1750:	2701      	movs	r7, #1
    1752:	782c      	ldrb	r4, [r5, #0]
    1754:	1c9d      	adds	r5, r3, #2
    1756:	2e00      	cmp	r6, #0
    1758:	d069      	beq.n	182e <_strtoul_l.isra.0+0x10a>
    175a:	2e10      	cmp	r6, #16
    175c:	d109      	bne.n	1772 <_strtoul_l.isra.0+0x4e>
    175e:	2c30      	cmp	r4, #48	; 0x30
    1760:	d107      	bne.n	1772 <_strtoul_l.isra.0+0x4e>
    1762:	2220      	movs	r2, #32
    1764:	782b      	ldrb	r3, [r5, #0]
    1766:	4393      	bics	r3, r2
    1768:	2b58      	cmp	r3, #88	; 0x58
    176a:	d15b      	bne.n	1824 <_strtoul_l.isra.0+0x100>
    176c:	2610      	movs	r6, #16
    176e:	786c      	ldrb	r4, [r5, #1]
    1770:	3502      	adds	r5, #2
    1772:	2001      	movs	r0, #1
    1774:	0031      	movs	r1, r6
    1776:	4240      	negs	r0, r0
    1778:	f000 f8f0 	bl	195c <__udivsi3>
    177c:	9003      	str	r0, [sp, #12]
    177e:	2001      	movs	r0, #1
    1780:	0031      	movs	r1, r6
    1782:	4240      	negs	r0, r0
    1784:	f000 f970 	bl	1a68 <__aeabi_uidivmod>
    1788:	2300      	movs	r3, #0
    178a:	9104      	str	r1, [sp, #16]
    178c:	2101      	movs	r1, #1
    178e:	2201      	movs	r2, #1
    1790:	0018      	movs	r0, r3
    1792:	468c      	mov	ip, r1
    1794:	4252      	negs	r2, r2
    1796:	0021      	movs	r1, r4
    1798:	3930      	subs	r1, #48	; 0x30
    179a:	2909      	cmp	r1, #9
    179c:	d81a      	bhi.n	17d4 <_strtoul_l.isra.0+0xb0>
    179e:	000c      	movs	r4, r1
    17a0:	42a6      	cmp	r6, r4
    17a2:	dd25      	ble.n	17f0 <_strtoul_l.isra.0+0xcc>
    17a4:	2b00      	cmp	r3, #0
    17a6:	db21      	blt.n	17ec <_strtoul_l.isra.0+0xc8>
    17a8:	9903      	ldr	r1, [sp, #12]
    17aa:	0013      	movs	r3, r2
    17ac:	4281      	cmp	r1, r0
    17ae:	d307      	bcc.n	17c0 <_strtoul_l.isra.0+0x9c>
    17b0:	d103      	bne.n	17ba <_strtoul_l.isra.0+0x96>
    17b2:	9904      	ldr	r1, [sp, #16]
    17b4:	0013      	movs	r3, r2
    17b6:	42a1      	cmp	r1, r4
    17b8:	db02      	blt.n	17c0 <_strtoul_l.isra.0+0x9c>
    17ba:	4663      	mov	r3, ip
    17bc:	4370      	muls	r0, r6
    17be:	1820      	adds	r0, r4, r0
    17c0:	782c      	ldrb	r4, [r5, #0]
    17c2:	3501      	adds	r5, #1
    17c4:	e7e7      	b.n	1796 <_strtoul_l.isra.0+0x72>
    17c6:	2c2b      	cmp	r4, #43	; 0x2b
    17c8:	d001      	beq.n	17ce <_strtoul_l.isra.0+0xaa>
    17ca:	0017      	movs	r7, r2
    17cc:	e7c3      	b.n	1756 <_strtoul_l.isra.0+0x32>
    17ce:	782c      	ldrb	r4, [r5, #0]
    17d0:	1c9d      	adds	r5, r3, #2
    17d2:	e7fa      	b.n	17ca <_strtoul_l.isra.0+0xa6>
    17d4:	0021      	movs	r1, r4
    17d6:	3941      	subs	r1, #65	; 0x41
    17d8:	2919      	cmp	r1, #25
    17da:	d801      	bhi.n	17e0 <_strtoul_l.isra.0+0xbc>
    17dc:	3c37      	subs	r4, #55	; 0x37
    17de:	e7df      	b.n	17a0 <_strtoul_l.isra.0+0x7c>
    17e0:	0021      	movs	r1, r4
    17e2:	3961      	subs	r1, #97	; 0x61
    17e4:	2919      	cmp	r1, #25
    17e6:	d803      	bhi.n	17f0 <_strtoul_l.isra.0+0xcc>
    17e8:	3c57      	subs	r4, #87	; 0x57
    17ea:	e7d9      	b.n	17a0 <_strtoul_l.isra.0+0x7c>
    17ec:	0013      	movs	r3, r2
    17ee:	e7e7      	b.n	17c0 <_strtoul_l.isra.0+0x9c>
    17f0:	2b00      	cmp	r3, #0
    17f2:	da09      	bge.n	1808 <_strtoul_l.isra.0+0xe4>
    17f4:	2322      	movs	r3, #34	; 0x22
    17f6:	2001      	movs	r0, #1
    17f8:	9a05      	ldr	r2, [sp, #20]
    17fa:	4240      	negs	r0, r0
    17fc:	6013      	str	r3, [r2, #0]
    17fe:	9b02      	ldr	r3, [sp, #8]
    1800:	2b00      	cmp	r3, #0
    1802:	d109      	bne.n	1818 <_strtoul_l.isra.0+0xf4>
    1804:	b007      	add	sp, #28
    1806:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1808:	2f00      	cmp	r7, #0
    180a:	d000      	beq.n	180e <_strtoul_l.isra.0+0xea>
    180c:	4240      	negs	r0, r0
    180e:	9a02      	ldr	r2, [sp, #8]
    1810:	2a00      	cmp	r2, #0
    1812:	d0f7      	beq.n	1804 <_strtoul_l.isra.0+0xe0>
    1814:	2b00      	cmp	r3, #0
    1816:	d001      	beq.n	181c <_strtoul_l.isra.0+0xf8>
    1818:	1e6b      	subs	r3, r5, #1
    181a:	9301      	str	r3, [sp, #4]
    181c:	9b02      	ldr	r3, [sp, #8]
    181e:	9a01      	ldr	r2, [sp, #4]
    1820:	601a      	str	r2, [r3, #0]
    1822:	e7ef      	b.n	1804 <_strtoul_l.isra.0+0xe0>
    1824:	2430      	movs	r4, #48	; 0x30
    1826:	2e00      	cmp	r6, #0
    1828:	d1a3      	bne.n	1772 <_strtoul_l.isra.0+0x4e>
    182a:	3608      	adds	r6, #8
    182c:	e7a1      	b.n	1772 <_strtoul_l.isra.0+0x4e>
    182e:	2c30      	cmp	r4, #48	; 0x30
    1830:	d097      	beq.n	1762 <_strtoul_l.isra.0+0x3e>
    1832:	260a      	movs	r6, #10
    1834:	e79d      	b.n	1772 <_strtoul_l.isra.0+0x4e>
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	00001b0a 	.word	0x00001b0a

0000183c <_strtoul_r>:
    183c:	b510      	push	{r4, lr}
    183e:	f7ff ff71 	bl	1724 <_strtoul_l.isra.0>
    1842:	bd10      	pop	{r4, pc}

00001844 <__submore>:
    1844:	000b      	movs	r3, r1
    1846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1848:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    184a:	3344      	adds	r3, #68	; 0x44
    184c:	000c      	movs	r4, r1
    184e:	429d      	cmp	r5, r3
    1850:	d11c      	bne.n	188c <__submore+0x48>
    1852:	2680      	movs	r6, #128	; 0x80
    1854:	00f6      	lsls	r6, r6, #3
    1856:	0031      	movs	r1, r6
    1858:	f7ff faa4 	bl	da4 <_malloc_r>
    185c:	2800      	cmp	r0, #0
    185e:	d102      	bne.n	1866 <__submore+0x22>
    1860:	2001      	movs	r0, #1
    1862:	4240      	negs	r0, r0
    1864:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1866:	0023      	movs	r3, r4
    1868:	6360      	str	r0, [r4, #52]	; 0x34
    186a:	63a6      	str	r6, [r4, #56]	; 0x38
    186c:	3346      	adds	r3, #70	; 0x46
    186e:	781a      	ldrb	r2, [r3, #0]
    1870:	4b10      	ldr	r3, [pc, #64]	; (18b4 <__submore+0x70>)
    1872:	54c2      	strb	r2, [r0, r3]
    1874:	0023      	movs	r3, r4
    1876:	3345      	adds	r3, #69	; 0x45
    1878:	781a      	ldrb	r2, [r3, #0]
    187a:	4b0f      	ldr	r3, [pc, #60]	; (18b8 <__submore+0x74>)
    187c:	54c2      	strb	r2, [r0, r3]
    187e:	782a      	ldrb	r2, [r5, #0]
    1880:	4b0e      	ldr	r3, [pc, #56]	; (18bc <__submore+0x78>)
    1882:	54c2      	strb	r2, [r0, r3]
    1884:	18c0      	adds	r0, r0, r3
    1886:	6020      	str	r0, [r4, #0]
    1888:	2000      	movs	r0, #0
    188a:	e7eb      	b.n	1864 <__submore+0x20>
    188c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    188e:	0029      	movs	r1, r5
    1890:	0073      	lsls	r3, r6, #1
    1892:	001a      	movs	r2, r3
    1894:	9301      	str	r3, [sp, #4]
    1896:	f000 f829 	bl	18ec <_realloc_r>
    189a:	1e05      	subs	r5, r0, #0
    189c:	d0e0      	beq.n	1860 <__submore+0x1c>
    189e:	1987      	adds	r7, r0, r6
    18a0:	0001      	movs	r1, r0
    18a2:	0032      	movs	r2, r6
    18a4:	0038      	movs	r0, r7
    18a6:	f000 f818 	bl	18da <memcpy>
    18aa:	9b01      	ldr	r3, [sp, #4]
    18ac:	6027      	str	r7, [r4, #0]
    18ae:	6365      	str	r5, [r4, #52]	; 0x34
    18b0:	63a3      	str	r3, [r4, #56]	; 0x38
    18b2:	e7e9      	b.n	1888 <__submore+0x44>
    18b4:	000003ff 	.word	0x000003ff
    18b8:	000003fe 	.word	0x000003fe
    18bc:	000003fd 	.word	0x000003fd

000018c0 <__retarget_lock_acquire_recursive>:
    18c0:	4770      	bx	lr

000018c2 <__retarget_lock_release_recursive>:
    18c2:	4770      	bx	lr

000018c4 <memchr>:
    18c4:	b2c9      	uxtb	r1, r1
    18c6:	1882      	adds	r2, r0, r2
    18c8:	4290      	cmp	r0, r2
    18ca:	d101      	bne.n	18d0 <memchr+0xc>
    18cc:	2000      	movs	r0, #0
    18ce:	4770      	bx	lr
    18d0:	7803      	ldrb	r3, [r0, #0]
    18d2:	428b      	cmp	r3, r1
    18d4:	d0fb      	beq.n	18ce <memchr+0xa>
    18d6:	3001      	adds	r0, #1
    18d8:	e7f6      	b.n	18c8 <memchr+0x4>

000018da <memcpy>:
    18da:	2300      	movs	r3, #0
    18dc:	b510      	push	{r4, lr}
    18de:	429a      	cmp	r2, r3
    18e0:	d100      	bne.n	18e4 <memcpy+0xa>
    18e2:	bd10      	pop	{r4, pc}
    18e4:	5ccc      	ldrb	r4, [r1, r3]
    18e6:	54c4      	strb	r4, [r0, r3]
    18e8:	3301      	adds	r3, #1
    18ea:	e7f8      	b.n	18de <memcpy+0x4>

000018ec <_realloc_r>:
    18ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ee:	0007      	movs	r7, r0
    18f0:	000d      	movs	r5, r1
    18f2:	0016      	movs	r6, r2
    18f4:	2900      	cmp	r1, #0
    18f6:	d105      	bne.n	1904 <_realloc_r+0x18>
    18f8:	0011      	movs	r1, r2
    18fa:	f7ff fa53 	bl	da4 <_malloc_r>
    18fe:	0004      	movs	r4, r0
    1900:	0020      	movs	r0, r4
    1902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1904:	2a00      	cmp	r2, #0
    1906:	d103      	bne.n	1910 <_realloc_r+0x24>
    1908:	f7ff fa02 	bl	d10 <_free_r>
    190c:	0034      	movs	r4, r6
    190e:	e7f7      	b.n	1900 <_realloc_r+0x14>
    1910:	f000 f812 	bl	1938 <_malloc_usable_size_r>
    1914:	002c      	movs	r4, r5
    1916:	42b0      	cmp	r0, r6
    1918:	d2f2      	bcs.n	1900 <_realloc_r+0x14>
    191a:	0031      	movs	r1, r6
    191c:	0038      	movs	r0, r7
    191e:	f7ff fa41 	bl	da4 <_malloc_r>
    1922:	1e04      	subs	r4, r0, #0
    1924:	d0ec      	beq.n	1900 <_realloc_r+0x14>
    1926:	0029      	movs	r1, r5
    1928:	0032      	movs	r2, r6
    192a:	f7ff ffd6 	bl	18da <memcpy>
    192e:	0029      	movs	r1, r5
    1930:	0038      	movs	r0, r7
    1932:	f7ff f9ed 	bl	d10 <_free_r>
    1936:	e7e3      	b.n	1900 <_realloc_r+0x14>

00001938 <_malloc_usable_size_r>:
    1938:	1f0b      	subs	r3, r1, #4
    193a:	681b      	ldr	r3, [r3, #0]
    193c:	1f18      	subs	r0, r3, #4
    193e:	2b00      	cmp	r3, #0
    1940:	da01      	bge.n	1946 <_malloc_usable_size_r+0xe>
    1942:	580b      	ldr	r3, [r1, r0]
    1944:	18c0      	adds	r0, r0, r3
    1946:	4770      	bx	lr

00001948 <__gnu_thumb1_case_shi>:
    1948:	b403      	push	{r0, r1}
    194a:	4671      	mov	r1, lr
    194c:	0849      	lsrs	r1, r1, #1
    194e:	0040      	lsls	r0, r0, #1
    1950:	0049      	lsls	r1, r1, #1
    1952:	5e09      	ldrsh	r1, [r1, r0]
    1954:	0049      	lsls	r1, r1, #1
    1956:	448e      	add	lr, r1
    1958:	bc03      	pop	{r0, r1}
    195a:	4770      	bx	lr

0000195c <__udivsi3>:
    195c:	2200      	movs	r2, #0
    195e:	0843      	lsrs	r3, r0, #1
    1960:	428b      	cmp	r3, r1
    1962:	d374      	bcc.n	1a4e <__udivsi3+0xf2>
    1964:	0903      	lsrs	r3, r0, #4
    1966:	428b      	cmp	r3, r1
    1968:	d35f      	bcc.n	1a2a <__udivsi3+0xce>
    196a:	0a03      	lsrs	r3, r0, #8
    196c:	428b      	cmp	r3, r1
    196e:	d344      	bcc.n	19fa <__udivsi3+0x9e>
    1970:	0b03      	lsrs	r3, r0, #12
    1972:	428b      	cmp	r3, r1
    1974:	d328      	bcc.n	19c8 <__udivsi3+0x6c>
    1976:	0c03      	lsrs	r3, r0, #16
    1978:	428b      	cmp	r3, r1
    197a:	d30d      	bcc.n	1998 <__udivsi3+0x3c>
    197c:	22ff      	movs	r2, #255	; 0xff
    197e:	0209      	lsls	r1, r1, #8
    1980:	ba12      	rev	r2, r2
    1982:	0c03      	lsrs	r3, r0, #16
    1984:	428b      	cmp	r3, r1
    1986:	d302      	bcc.n	198e <__udivsi3+0x32>
    1988:	1212      	asrs	r2, r2, #8
    198a:	0209      	lsls	r1, r1, #8
    198c:	d065      	beq.n	1a5a <__udivsi3+0xfe>
    198e:	0b03      	lsrs	r3, r0, #12
    1990:	428b      	cmp	r3, r1
    1992:	d319      	bcc.n	19c8 <__udivsi3+0x6c>
    1994:	e000      	b.n	1998 <__udivsi3+0x3c>
    1996:	0a09      	lsrs	r1, r1, #8
    1998:	0bc3      	lsrs	r3, r0, #15
    199a:	428b      	cmp	r3, r1
    199c:	d301      	bcc.n	19a2 <__udivsi3+0x46>
    199e:	03cb      	lsls	r3, r1, #15
    19a0:	1ac0      	subs	r0, r0, r3
    19a2:	4152      	adcs	r2, r2
    19a4:	0b83      	lsrs	r3, r0, #14
    19a6:	428b      	cmp	r3, r1
    19a8:	d301      	bcc.n	19ae <__udivsi3+0x52>
    19aa:	038b      	lsls	r3, r1, #14
    19ac:	1ac0      	subs	r0, r0, r3
    19ae:	4152      	adcs	r2, r2
    19b0:	0b43      	lsrs	r3, r0, #13
    19b2:	428b      	cmp	r3, r1
    19b4:	d301      	bcc.n	19ba <__udivsi3+0x5e>
    19b6:	034b      	lsls	r3, r1, #13
    19b8:	1ac0      	subs	r0, r0, r3
    19ba:	4152      	adcs	r2, r2
    19bc:	0b03      	lsrs	r3, r0, #12
    19be:	428b      	cmp	r3, r1
    19c0:	d301      	bcc.n	19c6 <__udivsi3+0x6a>
    19c2:	030b      	lsls	r3, r1, #12
    19c4:	1ac0      	subs	r0, r0, r3
    19c6:	4152      	adcs	r2, r2
    19c8:	0ac3      	lsrs	r3, r0, #11
    19ca:	428b      	cmp	r3, r1
    19cc:	d301      	bcc.n	19d2 <__udivsi3+0x76>
    19ce:	02cb      	lsls	r3, r1, #11
    19d0:	1ac0      	subs	r0, r0, r3
    19d2:	4152      	adcs	r2, r2
    19d4:	0a83      	lsrs	r3, r0, #10
    19d6:	428b      	cmp	r3, r1
    19d8:	d301      	bcc.n	19de <__udivsi3+0x82>
    19da:	028b      	lsls	r3, r1, #10
    19dc:	1ac0      	subs	r0, r0, r3
    19de:	4152      	adcs	r2, r2
    19e0:	0a43      	lsrs	r3, r0, #9
    19e2:	428b      	cmp	r3, r1
    19e4:	d301      	bcc.n	19ea <__udivsi3+0x8e>
    19e6:	024b      	lsls	r3, r1, #9
    19e8:	1ac0      	subs	r0, r0, r3
    19ea:	4152      	adcs	r2, r2
    19ec:	0a03      	lsrs	r3, r0, #8
    19ee:	428b      	cmp	r3, r1
    19f0:	d301      	bcc.n	19f6 <__udivsi3+0x9a>
    19f2:	020b      	lsls	r3, r1, #8
    19f4:	1ac0      	subs	r0, r0, r3
    19f6:	4152      	adcs	r2, r2
    19f8:	d2cd      	bcs.n	1996 <__udivsi3+0x3a>
    19fa:	09c3      	lsrs	r3, r0, #7
    19fc:	428b      	cmp	r3, r1
    19fe:	d301      	bcc.n	1a04 <__udivsi3+0xa8>
    1a00:	01cb      	lsls	r3, r1, #7
    1a02:	1ac0      	subs	r0, r0, r3
    1a04:	4152      	adcs	r2, r2
    1a06:	0983      	lsrs	r3, r0, #6
    1a08:	428b      	cmp	r3, r1
    1a0a:	d301      	bcc.n	1a10 <__udivsi3+0xb4>
    1a0c:	018b      	lsls	r3, r1, #6
    1a0e:	1ac0      	subs	r0, r0, r3
    1a10:	4152      	adcs	r2, r2
    1a12:	0943      	lsrs	r3, r0, #5
    1a14:	428b      	cmp	r3, r1
    1a16:	d301      	bcc.n	1a1c <__udivsi3+0xc0>
    1a18:	014b      	lsls	r3, r1, #5
    1a1a:	1ac0      	subs	r0, r0, r3
    1a1c:	4152      	adcs	r2, r2
    1a1e:	0903      	lsrs	r3, r0, #4
    1a20:	428b      	cmp	r3, r1
    1a22:	d301      	bcc.n	1a28 <__udivsi3+0xcc>
    1a24:	010b      	lsls	r3, r1, #4
    1a26:	1ac0      	subs	r0, r0, r3
    1a28:	4152      	adcs	r2, r2
    1a2a:	08c3      	lsrs	r3, r0, #3
    1a2c:	428b      	cmp	r3, r1
    1a2e:	d301      	bcc.n	1a34 <__udivsi3+0xd8>
    1a30:	00cb      	lsls	r3, r1, #3
    1a32:	1ac0      	subs	r0, r0, r3
    1a34:	4152      	adcs	r2, r2
    1a36:	0883      	lsrs	r3, r0, #2
    1a38:	428b      	cmp	r3, r1
    1a3a:	d301      	bcc.n	1a40 <__udivsi3+0xe4>
    1a3c:	008b      	lsls	r3, r1, #2
    1a3e:	1ac0      	subs	r0, r0, r3
    1a40:	4152      	adcs	r2, r2
    1a42:	0843      	lsrs	r3, r0, #1
    1a44:	428b      	cmp	r3, r1
    1a46:	d301      	bcc.n	1a4c <__udivsi3+0xf0>
    1a48:	004b      	lsls	r3, r1, #1
    1a4a:	1ac0      	subs	r0, r0, r3
    1a4c:	4152      	adcs	r2, r2
    1a4e:	1a41      	subs	r1, r0, r1
    1a50:	d200      	bcs.n	1a54 <__udivsi3+0xf8>
    1a52:	4601      	mov	r1, r0
    1a54:	4152      	adcs	r2, r2
    1a56:	4610      	mov	r0, r2
    1a58:	4770      	bx	lr
    1a5a:	e7ff      	b.n	1a5c <__udivsi3+0x100>
    1a5c:	b501      	push	{r0, lr}
    1a5e:	2000      	movs	r0, #0
    1a60:	f000 f806 	bl	1a70 <__aeabi_idiv0>
    1a64:	bd02      	pop	{r1, pc}
    1a66:	46c0      	nop			; (mov r8, r8)

00001a68 <__aeabi_uidivmod>:
    1a68:	2900      	cmp	r1, #0
    1a6a:	d0f7      	beq.n	1a5c <__udivsi3+0x100>
    1a6c:	e776      	b.n	195c <__udivsi3>
    1a6e:	4770      	bx	lr

00001a70 <__aeabi_idiv0>:
    1a70:	4770      	bx	lr
    1a72:	46c0      	nop			; (mov r8, r8)
    1a74:	00000000 	.word	0x00000000
    1a78:	00000018 	.word	0x00000018
    1a7c:	00000000 	.word	0x00000000
    1a80:	00000019 	.word	0x00000019
    1a84:	00000301 	.word	0x00000301
    1a88:	00001aee 	.word	0x00001aee
    1a8c:	00001af1 	.word	0x00001af1
    1a90:	00001af4 	.word	0x00001af4
    1a94:	00004b4f 	.word	0x00004b4f
    1a98:	ff005441 	.word	0xff005441
    1a9c:	30455441 	.word	0x30455441
    1aa0:	00000000 	.word	0x00000000
    1aa4:	4552432b 	.word	0x4552432b
    1aa8:	30203a47 	.word	0x30203a47
    1aac:	0000312c 	.word	0x0000312c
    1ab0:	432b5441 	.word	0x432b5441
    1ab4:	3f474552 	.word	0x3f474552
    1ab8:	00000000 	.word	0x00000000
    1abc:	432b5441 	.word	0x432b5441
    1ac0:	3d46474d 	.word	0x3d46474d
    1ac4:	ffff0031 	.word	0xffff0031
    1ac8:	474e4952 	.word	0x474e4952
    1acc:	00000000 	.word	0x00000000
    1ad0:	00485441 	.word	0x00485441
    1ad4:	544d432b 	.word	0x544d432b
    1ad8:	00000049 	.word	0x00000049
    1adc:	544d432b 	.word	0x544d432b
    1ae0:	25203a49 	.word	0x25203a49
    1ae4:	2520732a 	.word	0x2520732a
    1ae8:	0064      	.short	0x0064
    1aea:	6c68      	.short	0x6c68
    1aec:	004c      	.short	0x004c
    1aee:	2d2b      	.short	0x2d2b
    1af0:	00303000 	.word	0x00303000
    1af4:	5878      	.short	0x5878
    1af6:	00          	.byte	0x00
    1af7:	41          	.byte	0x41
    1af8:	2d61462d 	.word	0x2d61462d
    1afc:	30393866 	.word	0x30393866
    1b00:	34333231 	.word	0x34333231
    1b04:	5d373635 	.word	0x5d373635
	...

00001b09 <_ctype_>:
    1b09:	20202000 20202020 28282020 20282828     .         ((((( 
    1b19:	20202020 20202020 20202020 20202020                     
    1b29:	10108820 10101010 10101010 10101010      ...............
    1b39:	04040410 04040404 10040404 10101010     ................
    1b49:	41411010 41414141 01010101 01010101     ..AAAAAA........
    1b59:	01010101 01010101 01010101 10101010     ................
    1b69:	42421010 42424242 02020202 02020202     ..BBBBBB........
    1b79:	02020202 02020202 02020202 10101010     ................
    1b89:	00000020 00000000 00000000 00000000      ...............
	...
    1c09:	                                         ...

00001c0c <__sf_fake_stderr>:
	...

00001c2c <__sf_fake_stdin>:
	...

00001c4c <__sf_fake_stdout>:
	...

00001c6c <_init>:
    1c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c6e:	46c0      	nop			; (mov r8, r8)
    1c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c72:	bc08      	pop	{r3}
    1c74:	469e      	mov	lr, r3
    1c76:	4770      	bx	lr

00001c78 <__init_array_start>:
    1c78:	000000b5 	.word	0x000000b5
    1c7c:	0000045d 	.word	0x0000045d
    1c80:	00000b49 	.word	0x00000b49

00001c84 <_fini>:
    1c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c8a:	bc08      	pop	{r3}
    1c8c:	469e      	mov	lr, r3
    1c8e:	4770      	bx	lr

00001c90 <__delay_usec_veneer>:
    1c90:	b401      	push	{r0}
    1c92:	4802      	ldr	r0, [pc, #8]	; (1c9c <__delay_usec_veneer+0xc>)
    1c94:	4684      	mov	ip, r0
    1c96:	bc01      	pop	{r0}
    1c98:	4760      	bx	ip
    1c9a:	bf00      	nop
    1c9c:	20000001 	.word	0x20000001

00001ca0 <__fini_array_start>:
    1ca0:	0000008d 	.word	0x0000008d

Disassembly of section .data:

20000000 <delay_usec>:
	__asm (
20000000:	210f      	movs	r1, #15

20000002 <mydelay1>:
20000002:	3901      	subs	r1, #1
20000004:	d1fd      	bne.n	20000002 <mydelay1>
20000006:	3801      	subs	r0, #1
20000008:	d1fa      	bne.n	20000000 <delay_usec>
}
2000000a:	4770      	bx	lr

2000000c <__dso_handle>:
2000000c:	0000 0000                                   ....

20000010 <_impure_ptr>:
20000010:	0014 2000                                   ... 

20000014 <impure_data>:
20000014:	0000 0000 1c2c 0000 1c4c 0000 1c0c 0000     ....,...L.......
	...
