
build/gsmbase.elf:     file format elf32-littlearm
build/gsmbase.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001f95

Program Header:
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00003264 memsz 0x00003264 flags r-x
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x00003264 align 2**16
         filesz 0x00000078 memsz 0x00000524 flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003264  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  20000000  00003264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004ac  20000078  000032dc  00020078  2**3
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  4 .comment      00000079  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  5 .debug_info   0003956d  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003fc3  00000000  00000000  00059686  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000060d0  00000000  00000000  0005d649  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000005b0  00000000  00000000  00063719  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000009f0  00000000  00000000  00063cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006262  00000000  00000000  000646b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000e08f  00000000  00000000  0006a91b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001958  00000000  00000000  000789ac  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000078 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_samd10.c
00000000 l    df *ABS*	00000000 crtstuff.c
0000008c l     F .text	00000000 __do_global_dtors_aux
20000078 l       .bss	00000001 completed.8911
00003260 l     O .text	00000000 __do_global_dtors_aux_fini_array_entry
000000b4 l     F .text	00000000 frame_dummy
2000007c l       .bss	00000018 object.8916
00003234 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 GSM.cpp
000000d4 l     F .text	0000001c _ZL8find_numPKc
000005d8 l     F .text	00000054 _ZL9func_execP3GSMPKcS2_
00000000 l    df *ABS*	00000000 RF24.cpp
00002f48 l     O .text	00000006 _ZL10child_pipe
00002f50 l     O .text	00000006 _ZL17child_pipe_enable
00002f58 l     O .text	00000006 _ZL18child_payload_size
00000000 l    df *ABS*	00000000 main.cpp
00000dbc l     F .text	00000024 _ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_
00000dfc l     F .text	00000014 _ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_
00000e10 l     F .text	00000078 _Z41__static_initialization_and_destruction_0ii
00001010 l     F .text	00000128 _ZL8cmd_infoP3GSMPKcS2_
00001290 l     F .text	00000010 _GLOBAL__sub_I__ZN3Str11EmptyBufferE
20000094 l     O .bss	00000014 _ZL3gsm
200000a8 l     O .bss	00000038 _ZL3net
00000000 l    df *ABS*	00000000 spi.cpp
000014e8 l     F .text	00000034 _Z41__static_initialization_and_destruction_0ii
0000153c l     F .text	00000010 _GLOBAL__sub_I_g_spi0
00000000 l    df *ABS*	00000000 systick.c
0000154c l     F .text	00000144 initializeSystemFor48MHz
20000000 l       .data	00000000 mydelay
20000002 l       .data	00000000 mydelay1
200000e8 l     O .bss	00000008 _cycles
00000000 l    df *ABS*	00000000 uart.cpp
00001724 l     F .text	00000058 _Z41__static_initialization_and_destruction_0ii
00001c40 l     F .text	00000010 _GLOBAL__sub_I_g_uart0
00000000 l    df *ABS*	00000000 sensornet.cpp
00000000 l    df *ABS*	00000000 syscalls.c
20000508 l     O .bss	00000004 heap.4639
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _udivsi3.o
0000206c l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00002604 l     F .text	00000104 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 _thumb1_case_shi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00003250 l     F .text	00000010 __delay_usec_veneer
00000896 g     F .text	0000000a _ZN4RF2410get_statusEv
00002e04 g     F .text	00000010 _malloc_usable_size_r
00000bd6 g     F .text	0000002e _ZN4RF2410setPALevelEh
000024c0 g     F .text	00000010 strcpy
0000073c g     F .text	00000034 _ZN4RF2414write_registerEhh
00000b34 g     F .text	00000064 _ZN4RF2414startListeningEv
00001c50 g     F .text	00000020 _ZN9SensornetC1ERK4RF24
00000294 g     F .text	00000098 _ZN3GSM7PowerOnEv
00001f90  w    F .text	00000002 DMAC_Handler
20000514 g     O .bss	00000001 __lock___atexit_recursive_mutex
00000984 g     F .text	00000006 _ZN4RF249errNotifyEv
00001f90  w    F .text	00000002 HardFault_Handler
00001f90  w    F .text	00000002 TC2_Handler
00000a42 g     F .text	0000000a _ZN4RF249availableEv
000027a4 g     F .text	00000010 __malloc_unlock
00000a0e g     F .text	0000000a _ZN4RF245writeEPKvh
00001f90  w    F .text	00000002 AC_Handler
00001708 g     F .text	0000001c SysTick_Handler
20000515 g     O .bss	00000001 __lock___arc4random_mutex
00002dde g     F .text	00000026 memmove
00001f90  w    F .text	00000002 PendSV_Handler
00002408 g     F .text	00000068 snprintf
00001f90  w    F .text	00000002 NMI_Handler
000025a4 g     F .text	0000005e __strtok_r
00001138  w    F .text	00000042 _ZN6VectorI7SMSFuncE9push_backERKS0_
00000f7c g     F .text	00000060 _ZN3Str13appendfv_fromEiPKcSt9__va_list
00000000 g       .text	00000000 _sfixed
00001c30 g     F .text	00000010 SERCOM1_Handler
00001f90  w    F .text	00000002 ADC_Handler
20000520 g     O .bss	00000004 errno
00003264 g       .data	00000000 _etext
000008a0 g     F .text	0000003e _ZN4RF24C2E6gpio_tS0_R5spi_t
20001000 g       .text	00000000 __top_ram
0000226c g     F .text	00000012 memcpy
0000018c g     F .text	00000012 _ZN3GSMD1Ev
000028c4 g     F .text	00000200 _svfprintf_r
00000770 g     F .text	00000078 _ZN4RF2413write_payloadEPKvhh
00001f90  w    F .text	00000002 SERCOM2_Handler
00003264 g       .text	00000000 __fini_array_end
00001f90  w    F .text	00000002 TCC0_Handler
0000088c g     F .text	0000000a _ZN4RF248flush_txEv
00002244 g     F .text	00000014 malloc
000008f0 g     F .text	0000000c _ZN4RF2414setPayloadSizeEh
0000206c g     F .text	0000010a .hidden __udivsi3
00001a6c g     F .text	0000008c _ZN6uart_t4peekEi
00001f90  w    F .text	00000002 RTC_Handler
00002778 g     F .text	00000018 vsnprintf
00000408 g     F .text	000000b8 _ZN3GSM7ReadSMSEi
2000000c g     O .data	00000000 .hidden __dso_handle
00001a00 g     F .text	0000002c _ZN6uart_t7rxemptyEv
00000660 g     F .text	0000005c _ZN4RF242ceEb
00000ff8 g     F .text	00000018 _ZN3Str7appendfEPKcz
000023e4 g     F .text	00000024 _sbrk_r
200000f0 g     O .bss	0000020c g_uart0
00001f90  w    F .text	00000002 EIC_Handler
00000fdc g     F .text	0000001c _ZN3Str8appendfvEPKcSt9__va_list
00000f08 g     F .text	00000074 _ZN3Str15reserve_discardEi
00001f90  w    F .text	00000002 WDT_Handler
200000e0 g     O .bss	00000004 g_spi0
20000516 g     O .bss	00000001 __lock___env_recursive_mutex
20000517 g     O .bss	00000001 __lock___sinit_recursive_mutex
00002184 g     F .text	00000050 .hidden __aeabi_lmul
000027b4 g     F .text	0000004c _realloc_r
000021fc g     F .text	00000048 __libc_init_array
00002038 g     F .text	00000024 _sbrk
00001f90  w    F .text	00000002 TC1_Handler
00003228 g     F .text	00000000 _init
00000a60 g     F .text	0000002e _ZN4RF2415openWritingPipeEy
00002708 g     F .text	00000018 strtol
00000958 g     F .text	0000002c _ZN4RF247powerUpEv
00004000 g       .text	00000000 __top_flash
20000524 g       .bss	00000000 _ebss
00001f94 g     F .text	000000a4 Reset_Handler
00002778 g     F .text	00000018 vsniprintf
20000518 g     O .bss	00000001 __lock___malloc_recursive_mutex
20001000 g       *ABS*	00000000 _stack_top
00001cd0 g     F .text	00000086 _ZN9Sensornet10UpdateNodeERK12SensorPacket
00001f90 g     F .text	00000002 Dummy_Handler
00001e6e g     F .text	0000002c _ZN9Sensornet4PollEv
00003194 g     O .text	00000020 __sf_fake_stderr
00002408 g     F .text	00000068 sniprintf
00002792 g     F .text	00000002 __retarget_lock_release_recursive
00000860 g     F .text	00000022 _ZN4RF248spiTransEh
00002800 g     F .text	000000c4 __ssputs_r
0000098a g     F .text	00000028 _ZN4RF2414startFastWriteEPKvhbb
000009b2 g     F .text	0000005c _ZN4RF245writeEPKvhb
00001e9c g     F .text	000000f4 _ZN9Sensornet10CMDSetNameEP3GSMPKcS3_
00000a4c g     F .text	00000014 _ZN4RF244readEPvh
000004c0 g     F .text	000000a8 _ZN3GSM4PollEv
00002dc8 g     F .text	00000016 memchr
00002280 g     F .text	00000094 _free_r
00001d56 g     F .text	00000118 _ZN9Sensornet13ProcessPacketER12SensorPacket
00002e14 g     F .text	00000014 .hidden __gnu_thumb1_case_shi
000014e4 g     F .text	00000004 _ZN5spi_tC2EP6Sercom
20000078 g       .bss	00000000 _bss
000019d0 g     F .text	00000030 _ZN6uart_t5printEPKci
00002528 g     F .text	0000002c strstr
200002fc g     O .bss	0000020c g_uart1
00001f90  w    F .text	00000002 PM_Handler
000016cc g     F .text	00000024 systick_cycles
00000e88 g     F .text	00000080 _ZN3Str7reserveEi
20000010 g     O .data	00000004 _ZN3Str11EmptyBufferE
000024de g     F .text	00000022 strncmp
00000de0  w    F .text	0000001c _ZN9SensornetD2Ev
00001690 g     F .text	0000003c systick_init
00002500 g     F .text	00000028 strncpy
0000032c g     F .text	00000084 _ZN3GSM4InitEv
00002470 g     F .text	00000034 strcasecmp
000012a0 g     F .text	00000244 _ZN5spi_t4InitE12spi_pincfg_tt
0000018c g     F .text	00000012 _ZN3GSMD2Ev
0000151c g     F .text	00000020 _ZN5spi_t8TransferEh
000023d0 g     F .text	00000014 realloc
00001a2c g     F .text	00000040 _ZN6uart_t4getcEv
00000a18 g     F .text	0000002a _ZN4RF249availableEPh
000021e0 g     F .text	0000001c __cxa_atexit
00002554 g     F .text	00000050 strtok
00002180  w    F .text	00000002 .hidden __aeabi_ldiv0
00000882 g     F .text	0000000a _ZN4RF248flush_rxEv
00002720 g     F .text	00000056 _vsnprintf_r
000001a0 g     F .text	000000b0 _ZN3GSM7CommandEPKcS1_j
00002794 g     F .text	00000010 __malloc_lock
00003260 g       .text	00000000 __fini_array_start
000031b4 g     O .text	00000020 __sf_fake_stdin
0000062c g     F .text	00000034 _ZN4RF243csnEb
00002790 g     F .text	00000002 __retarget_lock_acquire_recursive
0000117c g     F .text	00000114 main
00001c70 g     F .text	00000060 _ZN9Sensornet5beginEv
200000e4 g     O .bss	00000004 g_spi1
0000206c g     F .text	00000000 .hidden __aeabi_uidiv
00000568 g     F .text	00000070 _ZN3GSM7SendSMSEPKcS1_
00001f90  w    F .text	00000002 SVC_Handler
20000000 g     F .data	0000000c delay_usec
00001f90  w    F .text	00000002 EVSYS_Handler
00003244 g       .text	00000000 __init_array_end
00002314 g     F .text	000000bc _malloc_r
000003b0 g     F .text	00000058 _ZN3GSM10ProcessSMSEPKcS1_
00001f90  w    F .text	00000002 NVMCTRL_Handler
00003244 g     F .text	00000000 _fini
00000b98 g     F .text	00000024 _ZN4RF2415toggle_featuresEv
00001b90 g     F .text	00000090 _ZN6uart_t4readEv
0000177c g     F .text	000001e8 _ZN6uart_t4initERK13uart_pincfg_tt
00001af8 g     F .text	00000098 _ZN6uart_t4findEPKc
00001c20 g     F .text	00000010 SERCOM0_Handler
00002ac4 g     F .text	000000de _printf_common
20000014 g     O .data	00000004 _impure_ptr
00003234 g       .text	00000000 __preinit_array_end
000028c4 g     F .text	00000200 _svfiprintf_r
000008a0 g     F .text	0000003e _ZN4RF24C1E6gpio_tS0_R5spi_t
20000000 g       .data	00000000 _data
00000000 g     O .text	0000008c exception_table
00000de0  w    F .text	0000001c _ZN9SensornetD1Ev
00001f90  w    F .text	00000002 DAC_Handler
000006bc g     F .text	0000002c _ZN4RF2413read_registerEh
00002720 g     F .text	00000056 _vsniprintf_r
000007e8 g     F .text	00000078 _ZN4RF2412read_payloadEPvh
000008fc g     F .text	0000005a _ZN4RF2413stopListeningEv
00002178 g     F .text	00000008 .hidden __aeabi_uidivmod
20000078 g       .data	00000000 _edata
20000524 g       .bss	00000000 _end
20000519 g     O .bss	00000001 __lock___at_quick_exit_mutex
00001f90  w    F .text	00000002 PTC_Handler
00001c50 g     F .text	00000020 _ZN9SensornetC2ERK4RF24
00000c58 g     F .text	00000014 _ZN4RF2410setRetriesEhh
000006e8 g     F .text	00000054 _ZN4RF2414write_registerEhPKhh
00000250 g     F .text	00000044 _ZN3GSM13RepeatCommandEPKcS1_ii
00000c04 g     F .text	00000054 _ZN4RF2411setDataRateE15rf24_datarate_e
000019b4 g     F .text	0000001c _ZN6uart_t5writeEc
000031d4 g     O .text	00000020 __sf_fake_stdout
000021d4 g     F .text	0000000c atoi
00003093 g     O .text	00000101 _ctype_
00002180  w    F .text	00000002 .hidden __aeabi_idiv0
00003234 g       .text	00000000 __init_array_start
00002184 g     F .text	00000050 .hidden __muldi3
2000051a g     O .bss	00000001 __lock___dd_hash_mutex
2000051b g     O .bss	00000001 __lock___tz_mutex
000000f0 g     F .text	0000009c _ZN3GSMC2E6gpio_tP6uart_t
00000b0c g     F .text	00000028 _ZN4RF2416closeReadingPipeEh
000024d0 g     F .text	0000000e strlen
00002ba4 g     F .text	00000224 _printf_i
20000510 g     O .bss	00000004 __malloc_sbrk_start
000000f0 g     F .text	0000009c _ZN3GSMC1E6gpio_tP6uart_t
000014e4 g     F .text	00000004 _ZN5spi_tC1EP6Sercom
000024a4 g     F .text	0000001c strchr
2000050c g     O .bss	00000004 __malloc_free_list
00000c6c g     F .text	00000150 _ZN4RF245beginEv
00003234 g       .text	00000000 __preinit_array_start
0000205c g     F .text	0000000e __aeabi_atexit
000008de g     F .text	00000012 _ZN4RF2410setChannelEh
000016f0 g     F .text	00000018 millis
00000bbc g     F .text	0000001a _ZN4RF2410setAutoAckEb
00001964 g     F .text	00000050 _ZN6uart_t14sercom_handlerEv
00000a90 g     F .text	0000007c _ZN4RF2415openReadingPipeEhy
2000051c g     O .bss	00000001 __lock___sfp_recursive_mutex
00002258 g     F .text	00000014 free
00001f90  w    F .text	00000002 SYSCTRL_Handler



Disassembly of section .text:

00000000 <exception_table>:
       0:	00 10 00 20 95 1f 00 00 91 1f 00 00 91 1f 00 00     ... ............
	...
      2c:	91 1f 00 00 00 00 00 00 00 00 00 00 91 1f 00 00     ................
      3c:	09 17 00 00 91 1f 00 00 91 1f 00 00 91 1f 00 00     ................
      4c:	91 1f 00 00 91 1f 00 00 91 1f 00 00 91 1f 00 00     ................
      5c:	00 00 00 00 91 1f 00 00 21 1c 00 00 31 1c 00 00     ........!...1...
      6c:	91 1f 00 00 91 1f 00 00 91 1f 00 00 91 1f 00 00     ................
      7c:	91 1f 00 00 91 1f 00 00 91 1f 00 00 91 1f 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000078 	.word	0x20000078
      ac:	00000000 	.word	0x00000000
      b0:	00003264 	.word	0x00003264

000000b4 <frame_dummy>:
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <frame_dummy+0x14>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4903      	ldr	r1, [pc, #12]	; (cc <frame_dummy+0x18>)
      be:	4804      	ldr	r0, [pc, #16]	; (d0 <frame_dummy+0x1c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	bd10      	pop	{r4, pc}
      c6:	46c0      	nop			; (mov r8, r8)
      c8:	00000000 	.word	0x00000000
      cc:	2000007c 	.word	0x2000007c
      d0:	00003264 	.word	0x00003264

000000d4 <_ZL8find_numPKc>:
#include <strings.h>
extern "C" {
#include <systick.h>
}

static int find_num(const char* str) {
      d4:	b510      	push	{r4, lr}
    while(*str) {
      d6:	7803      	ldrb	r3, [r0, #0]
      d8:	2b00      	cmp	r3, #0
      da:	d007      	beq.n	ec <_ZL8find_numPKc+0x18>
        if(isdigit(*str))
      dc:	3b30      	subs	r3, #48	; 0x30
      de:	2b09      	cmp	r3, #9
      e0:	d901      	bls.n	e6 <_ZL8find_numPKc+0x12>
            return atoi(str);
        str++;
      e2:	3001      	adds	r0, #1
    while(*str) {
      e4:	e7f7      	b.n	d6 <_ZL8find_numPKc+0x2>
            return atoi(str);
      e6:	f002 f875 	bl	21d4 <atoi>
      ea:	e000      	b.n	ee <_ZL8find_numPKc+0x1a>
    }
    return 0;
      ec:	2000      	movs	r0, #0
}
      ee:	bd10      	pop	{r4, pc}

000000f0 <_ZN3GSMC1E6gpio_tP6uart_t>:
            free(resp);
        }
    }
}

GSM::GSM(const gpio_t pwrkey, uart_t* uart) :
      f0:	b5f0      	push	{r4, r5, r6, r7, lr}
      f2:	b087      	sub	sp, #28
      f4:	0004      	movs	r4, r0
      f6:	4668      	mov	r0, sp
      f8:	9100      	str	r1, [sp, #0]
      fa:	6042      	str	r2, [r0, #4]
    m_pwrkey(pwrkey), m_uart(uart)
      fc:	0026      	movs	r6, r4
      fe:	0002      	movs	r2, r0
     100:	ca22      	ldmia	r2!, {r1, r5}
     102:	c622      	stmia	r6!, {r1, r5}
     104:	0035      	movs	r5, r6
private:
    size_t m_size;
    T* m_data;

public:
    Vector() : m_size(0), m_data(NULL) {}
     106:	2200      	movs	r2, #0
     108:	60a2      	str	r2, [r4, #8]
     10a:	60e2      	str	r2, [r4, #12]
     10c:	6123      	str	r3, [r4, #16]
        } else {
            PORT->Group[port].DIRSET.reg = 1 << pin;
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
        }
    }
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     10e:	6841      	ldr	r1, [r0, #4]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     110:	3201      	adds	r2, #1
     112:	0010      	movs	r0, r2
     114:	4088      	lsls	r0, r1
     116:	6823      	ldr	r3, [r4, #0]
     118:	01db      	lsls	r3, r3, #7
     11a:	4f1a      	ldr	r7, [pc, #104]	; (184 <_ZN3GSMC1E6gpio_tP6uart_t+0x94>)
     11c:	46bc      	mov	ip, r7
     11e:	4463      	add	r3, ip
     120:	6098      	str	r0, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     122:	185b      	adds	r3, r3, r1
     124:	3340      	adds	r3, #64	; 0x40
     126:	7819      	ldrb	r1, [r3, #0]
     128:	2002      	movs	r0, #2
     12a:	4381      	bics	r1, r0
     12c:	7019      	strb	r1, [r3, #0]
    }
    inline void drvstr(const gpio_t& gp, const bool en) { drvstr(gp.port, gp.pin, en); }

    inline void set(const int port, const int pin, const bool en) {
        if(en)
            PORT->Group[port].OUTSET.reg = 1 << pin;
     12e:	6863      	ldr	r3, [r4, #4]
     130:	409a      	lsls	r2, r3
     132:	6823      	ldr	r3, [r4, #0]
     134:	01db      	lsls	r3, r3, #7
     136:	4463      	add	r3, ip
     138:	619a      	str	r2, [r3, #24]
{
    gpio::mode(m_pwrkey, GPIO_DIR_OUT); // Set pwrkey pin to output
    gpio::set(m_pwrkey, true); // Set pwrkey to high

    m_smsfuncs.push_back({"exec", func_exec, 0});
     13a:	aa03      	add	r2, sp, #12
     13c:	4b12      	ldr	r3, [pc, #72]	; (188 <_ZN3GSMC1E6gpio_tP6uart_t+0x98>)
     13e:	cb83      	ldmia	r3!, {r0, r1, r7}
     140:	c283      	stmia	r2!, {r0, r1, r7}
    ~Vector() {
        if(m_data) free(m_data);
    }

    void push_back(const T& elem) {
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     142:	6831      	ldr	r1, [r6, #0]
     144:	2900      	cmp	r1, #0
     146:	d018      	beq.n	17a <_ZN3GSMC1E6gpio_tP6uart_t+0x8a>
     148:	6870      	ldr	r0, [r6, #4]
     14a:	3101      	adds	r1, #1
     14c:	004b      	lsls	r3, r1, #1
     14e:	1859      	adds	r1, r3, r1
     150:	0089      	lsls	r1, r1, #2
     152:	f002 f93d 	bl	23d0 <realloc>
        if(!new_data) return;
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <_ZN3GSMC1E6gpio_tP6uart_t+0x84>
        m_data = new_data;
     15a:	6068      	str	r0, [r5, #4]

        memcpy(m_data + m_size, &elem, sizeof(T));
     15c:	682a      	ldr	r2, [r5, #0]
     15e:	0053      	lsls	r3, r2, #1
     160:	189b      	adds	r3, r3, r2
     162:	009b      	lsls	r3, r3, #2
     164:	18c0      	adds	r0, r0, r3
     166:	220c      	movs	r2, #12
     168:	a903      	add	r1, sp, #12
     16a:	f002 f87f 	bl	226c <memcpy>
        m_size++;
     16e:	682b      	ldr	r3, [r5, #0]
     170:	3301      	adds	r3, #1
     172:	602b      	str	r3, [r5, #0]
}
     174:	0020      	movs	r0, r4
     176:	b007      	add	sp, #28
     178:	bdf0      	pop	{r4, r5, r6, r7, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     17a:	200c      	movs	r0, #12
     17c:	f002 f862 	bl	2244 <malloc>
     180:	e7e9      	b.n	156 <_ZN3GSMC1E6gpio_tP6uart_t+0x66>
     182:	46c0      	nop			; (mov r8, r8)
     184:	41004400 	.word	0x41004400
     188:	00002e28 	.word	0x00002e28

0000018c <_ZN3GSMD1Ev>:

GSM::~GSM() {
     18c:	b510      	push	{r4, lr}
     18e:	0004      	movs	r4, r0
        if(m_data) free(m_data);
     190:	68c0      	ldr	r0, [r0, #12]
     192:	2800      	cmp	r0, #0
     194:	d001      	beq.n	19a <_ZN3GSMD1Ev+0xe>
     196:	f002 f85f 	bl	2258 <free>
    
}
     19a:	0020      	movs	r0, r4
     19c:	bd10      	pop	{r4, pc}
     19e:	Address 0x0000019e is out of bounds.


000001a0 <_ZN3GSM7CommandEPKcS1_j>:

bool GSM::Command(const char* cmd, const char* result, unsigned int response_time) {
     1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1a2:	0004      	movs	r4, r0
     1a4:	0017      	movs	r7, r2
     1a6:	001e      	movs	r6, r3
    uint32_t start;

    m_uart->flush_rx();
     1a8:	6903      	ldr	r3, [r0, #16]
    // Allocates a buffer and reads all available data into it
    char* read();

    bool rxempty();
    void flush_rx() {
        m_rxhead = 0;
     1aa:	2200      	movs	r2, #0
     1ac:	2081      	movs	r0, #129	; 0x81
     1ae:	0080      	lsls	r0, r0, #2
     1b0:	521a      	strh	r2, [r3, r0]
        m_rxtail = 0;
     1b2:	4825      	ldr	r0, [pc, #148]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     1b4:	521a      	strh	r2, [r3, r0]
        m_rxfull = false;
     1b6:	2000      	movs	r0, #0
     1b8:	2282      	movs	r2, #130	; 0x82
     1ba:	0092      	lsls	r2, r2, #2
     1bc:	5498      	strb	r0, [r3, r2]

    m_uart->print(cmd);
     1be:	2201      	movs	r2, #1
     1c0:	4252      	negs	r2, r2
     1c2:	6920      	ldr	r0, [r4, #16]
     1c4:	f001 fc04 	bl	19d0 <_ZN6uart_t5printEPKci>
    m_uart->write('\r');
     1c8:	210d      	movs	r1, #13
     1ca:	6920      	ldr	r0, [r4, #16]
     1cc:	f001 fbf2 	bl	19b4 <_ZN6uart_t5writeEc>
    // Allow up to response_time milliseconds to get a response
    start = millis();
     1d0:	f001 fa8e 	bl	16f0 <millis>
     1d4:	0005      	movs	r5, r0
     1d6:	e012      	b.n	1fe <_ZN3GSM7CommandEPKcS1_j+0x5e>
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
            return m_rxhead - m_rxtail;
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     1d8:	2281      	movs	r2, #129	; 0x81
     1da:	0092      	lsls	r2, r2, #2
     1dc:	5a99      	ldrh	r1, [r3, r2]
     1de:	4a1a      	ldr	r2, [pc, #104]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     1e0:	5a9b      	ldrh	r3, [r3, r2]
     1e2:	1ac9      	subs	r1, r1, r3
     1e4:	b289      	uxth	r1, r1
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	009b      	lsls	r3, r3, #2
     1ea:	469c      	mov	ip, r3
     1ec:	4461      	add	r1, ip
     1ee:	b289      	uxth	r1, r1
    while(!m_uart->available())
     1f0:	2900      	cmp	r1, #0
     1f2:	d116      	bne.n	222 <_ZN3GSM7CommandEPKcS1_j+0x82>
        if(millis() - start >= response_time)
     1f4:	f001 fa7c 	bl	16f0 <millis>
     1f8:	1b40      	subs	r0, r0, r5
     1fa:	42b0      	cmp	r0, r6
     1fc:	d21f      	bcs.n	23e <_ZN3GSM7CommandEPKcS1_j+0x9e>
    while(!m_uart->available())
     1fe:	6923      	ldr	r3, [r4, #16]
        if(m_rxhead >= m_rxtail)
     200:	2281      	movs	r2, #129	; 0x81
     202:	0092      	lsls	r2, r2, #2
     204:	5a99      	ldrh	r1, [r3, r2]
     206:	b289      	uxth	r1, r1
     208:	4a0f      	ldr	r2, [pc, #60]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     20a:	5a9a      	ldrh	r2, [r3, r2]
     20c:	b292      	uxth	r2, r2
     20e:	4291      	cmp	r1, r2
     210:	d3e2      	bcc.n	1d8 <_ZN3GSM7CommandEPKcS1_j+0x38>
            return m_rxhead - m_rxtail;
     212:	2281      	movs	r2, #129	; 0x81
     214:	0092      	lsls	r2, r2, #2
     216:	5a99      	ldrh	r1, [r3, r2]
     218:	4a0b      	ldr	r2, [pc, #44]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     21a:	5a9b      	ldrh	r3, [r3, r2]
     21c:	1ac9      	subs	r1, r1, r3
     21e:	b289      	uxth	r1, r1
     220:	e7e6      	b.n	1f0 <_ZN3GSM7CommandEPKcS1_j+0x50>
            return false;
    
    delay_usec(100000); // wait 100 ms to get the whole response
     222:	480a      	ldr	r0, [pc, #40]	; (24c <_ZN3GSM7CommandEPKcS1_j+0xac>)
     224:	f003 f814 	bl	3250 <__delay_usec_veneer>

    if(!result) return true;
     228:	2f00      	cmp	r7, #0
     22a:	d00a      	beq.n	242 <_ZN3GSM7CommandEPKcS1_j+0xa2>
    return m_uart->find(result) != -1;
     22c:	6920      	ldr	r0, [r4, #16]
     22e:	0039      	movs	r1, r7
     230:	f001 fc62 	bl	1af8 <_ZN6uart_t4findEPKc>
     234:	3001      	adds	r0, #1
     236:	1e43      	subs	r3, r0, #1
     238:	4198      	sbcs	r0, r3
     23a:	b2c0      	uxtb	r0, r0
     23c:	e000      	b.n	240 <_ZN3GSM7CommandEPKcS1_j+0xa0>
            return false;
     23e:	2000      	movs	r0, #0
}
     240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!result) return true;
     242:	2001      	movs	r0, #1
     244:	e7fc      	b.n	240 <_ZN3GSM7CommandEPKcS1_j+0xa0>
     246:	46c0      	nop			; (mov r8, r8)
     248:	00000206 	.word	0x00000206
     24c:	000186a0 	.word	0x000186a0

00000250 <_ZN3GSM13RepeatCommandEPKcS1_ii>:

bool GSM::RepeatCommand(const char* cmd, const char* result, int repeats, int response_time) {
     250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     252:	46ce      	mov	lr, r9
     254:	4647      	mov	r7, r8
     256:	b580      	push	{r7, lr}
     258:	4680      	mov	r8, r0
     25a:	000f      	movs	r7, r1
     25c:	0016      	movs	r6, r2
     25e:	001d      	movs	r5, r3
     260:	9b08      	ldr	r3, [sp, #32]
     262:	4699      	mov	r9, r3
    for(int i = 0; i < repeats; i++) {
     264:	2400      	movs	r4, #0
     266:	42ac      	cmp	r4, r5
     268:	da0c      	bge.n	284 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x34>
        if(Command(cmd, result, response_time))
     26a:	464b      	mov	r3, r9
     26c:	0032      	movs	r2, r6
     26e:	0039      	movs	r1, r7
     270:	4640      	mov	r0, r8
     272:	f7ff ff95 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     276:	2800      	cmp	r0, #0
     278:	d105      	bne.n	286 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x36>
            return true;
        
        delay_usec(500000);
     27a:	4805      	ldr	r0, [pc, #20]	; (290 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x40>)
     27c:	f002 ffe8 	bl	3250 <__delay_usec_veneer>
    for(int i = 0; i < repeats; i++) {
     280:	3401      	adds	r4, #1
     282:	e7f0      	b.n	266 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x16>
    }
    return false;
     284:	2000      	movs	r0, #0
}
     286:	bc0c      	pop	{r2, r3}
     288:	4690      	mov	r8, r2
     28a:	4699      	mov	r9, r3
     28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	0007a120 	.word	0x0007a120

00000294 <_ZN3GSM7PowerOnEv>:

bool GSM::PowerOn() {
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46c6      	mov	lr, r8
     298:	b500      	push	{lr}
     29a:	b082      	sub	sp, #8
     29c:	0004      	movs	r4, r0
    m_uart->write('\r');
     29e:	210d      	movs	r1, #13
     2a0:	6900      	ldr	r0, [r0, #16]
     2a2:	f001 fb87 	bl	19b4 <_ZN6uart_t5writeEc>

    // Check if the GSM module is already powered on
    if(Command("AT", "OK", 500))
     2a6:	23fa      	movs	r3, #250	; 0xfa
     2a8:	005b      	lsls	r3, r3, #1
     2aa:	4a1c      	ldr	r2, [pc, #112]	; (31c <_ZN3GSM7PowerOnEv+0x88>)
     2ac:	491c      	ldr	r1, [pc, #112]	; (320 <_ZN3GSM7PowerOnEv+0x8c>)
     2ae:	0020      	movs	r0, r4
     2b0:	f7ff ff76 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     2b4:	1e07      	subs	r7, r0, #0
     2b6:	d12b      	bne.n	310 <_ZN3GSM7PowerOnEv+0x7c>
        return true;
    
    // Fail after 3 attempts to power cycle
    for(int i = 0; i < 3; i++) {
     2b8:	2600      	movs	r6, #0
     2ba:	2e02      	cmp	r6, #2
     2bc:	dc28      	bgt.n	310 <_ZN3GSM7PowerOnEv+0x7c>
        else
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     2be:	2501      	movs	r5, #1
     2c0:	002a      	movs	r2, r5
     2c2:	6863      	ldr	r3, [r4, #4]
     2c4:	409a      	lsls	r2, r3
     2c6:	6823      	ldr	r3, [r4, #0]
     2c8:	01db      	lsls	r3, r3, #7
     2ca:	4916      	ldr	r1, [pc, #88]	; (324 <_ZN3GSM7PowerOnEv+0x90>)
     2cc:	468c      	mov	ip, r1
     2ce:	4463      	add	r3, ip
     2d0:	615a      	str	r2, [r3, #20]
        gpio::set(m_pwrkey, false); // Set pwrkey to low
        delay_usec(1000000); // Wait for SIM800C to register it
     2d2:	4b15      	ldr	r3, [pc, #84]	; (328 <_ZN3GSM7PowerOnEv+0x94>)
     2d4:	4698      	mov	r8, r3
     2d6:	0018      	movs	r0, r3
     2d8:	f002 ffba 	bl	3250 <__delay_usec_veneer>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     2dc:	6863      	ldr	r3, [r4, #4]
     2de:	409d      	lsls	r5, r3
     2e0:	6823      	ldr	r3, [r4, #0]
     2e2:	01db      	lsls	r3, r3, #7
     2e4:	4a0f      	ldr	r2, [pc, #60]	; (324 <_ZN3GSM7PowerOnEv+0x90>)
     2e6:	4694      	mov	ip, r2
     2e8:	4463      	add	r3, ip
     2ea:	619d      	str	r5, [r3, #24]
        gpio::set(m_pwrkey, true); // Set pwrkey to high
        delay_usec(1000000);
     2ec:	4640      	mov	r0, r8
     2ee:	f002 ffaf 	bl	3250 <__delay_usec_veneer>

        // Wait for response to AT command
        if(RepeatCommand("AT", "OK", 6, 500))
     2f2:	23fa      	movs	r3, #250	; 0xfa
     2f4:	005b      	lsls	r3, r3, #1
     2f6:	9300      	str	r3, [sp, #0]
     2f8:	3bef      	subs	r3, #239	; 0xef
     2fa:	3bff      	subs	r3, #255	; 0xff
     2fc:	4a07      	ldr	r2, [pc, #28]	; (31c <_ZN3GSM7PowerOnEv+0x88>)
     2fe:	4908      	ldr	r1, [pc, #32]	; (320 <_ZN3GSM7PowerOnEv+0x8c>)
     300:	0020      	movs	r0, r4
     302:	f7ff ffa5 	bl	250 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     306:	2800      	cmp	r0, #0
     308:	d101      	bne.n	30e <_ZN3GSM7PowerOnEv+0x7a>
    for(int i = 0; i < 3; i++) {
     30a:	3601      	adds	r6, #1
     30c:	e7d5      	b.n	2ba <_ZN3GSM7PowerOnEv+0x26>
            return true;
     30e:	0007      	movs	r7, r0
    }
    return false;
}
     310:	0038      	movs	r0, r7
     312:	b002      	add	sp, #8
     314:	bc04      	pop	{r2}
     316:	4690      	mov	r8, r2
     318:	bdf0      	pop	{r4, r5, r6, r7, pc}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	00002ee0 	.word	0x00002ee0
     320:	00002e84 	.word	0x00002e84
     324:	41004400 	.word	0x41004400
     328:	000f4240 	.word	0x000f4240

0000032c <_ZN3GSM4InitEv>:

bool GSM::Init() {
     32c:	b570      	push	{r4, r5, r6, lr}
     32e:	b082      	sub	sp, #8
     330:	0005      	movs	r5, r0
    if(!PowerOn())
     332:	f7ff ffaf 	bl	294 <_ZN3GSM7PowerOnEv>
     336:	1e04      	subs	r4, r0, #0
     338:	d102      	bne.n	340 <_ZN3GSM4InitEv+0x14>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms

    m_uart->flush_rx();

    return true;
}
     33a:	0020      	movs	r0, r4
     33c:	b002      	add	sp, #8
     33e:	bd70      	pop	{r4, r5, r6, pc}
    Command("ATE0");
     340:	4c14      	ldr	r4, [pc, #80]	; (394 <_ZN3GSM4InitEv+0x68>)
     342:	0023      	movs	r3, r4
     344:	2200      	movs	r2, #0
     346:	4914      	ldr	r1, [pc, #80]	; (398 <_ZN3GSM4InitEv+0x6c>)
     348:	0028      	movs	r0, r5
     34a:	f7ff ff29 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    if(!RepeatCommand("AT+CREG?", "+CREG: 0,1", 25))
     34e:	9400      	str	r4, [sp, #0]
     350:	2319      	movs	r3, #25
     352:	4a12      	ldr	r2, [pc, #72]	; (39c <_ZN3GSM4InitEv+0x70>)
     354:	4912      	ldr	r1, [pc, #72]	; (3a0 <_ZN3GSM4InitEv+0x74>)
     356:	0028      	movs	r0, r5
     358:	f7ff ff7a 	bl	250 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     35c:	1e04      	subs	r4, r0, #0
     35e:	d0ec      	beq.n	33a <_ZN3GSM4InitEv+0xe>
    Command("AT+CMGF=1"); // SMS text mode
     360:	4e0c      	ldr	r6, [pc, #48]	; (394 <_ZN3GSM4InitEv+0x68>)
     362:	0033      	movs	r3, r6
     364:	2200      	movs	r2, #0
     366:	490f      	ldr	r1, [pc, #60]	; (3a4 <_ZN3GSM4InitEv+0x78>)
     368:	0028      	movs	r0, r5
     36a:	f7ff ff19 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms
     36e:	0033      	movs	r3, r6
     370:	2200      	movs	r2, #0
     372:	490d      	ldr	r1, [pc, #52]	; (3a8 <_ZN3GSM4InitEv+0x7c>)
     374:	0028      	movs	r0, r5
     376:	f7ff ff13 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    m_uart->flush_rx();
     37a:	692b      	ldr	r3, [r5, #16]
        m_rxhead = 0;
     37c:	2200      	movs	r2, #0
     37e:	2181      	movs	r1, #129	; 0x81
     380:	0089      	lsls	r1, r1, #2
     382:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     384:	4909      	ldr	r1, [pc, #36]	; (3ac <_ZN3GSM4InitEv+0x80>)
     386:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     388:	2100      	movs	r1, #0
     38a:	2282      	movs	r2, #130	; 0x82
     38c:	0092      	lsls	r2, r2, #2
     38e:	5499      	strb	r1, [r3, r2]
    return true;
     390:	e7d3      	b.n	33a <_ZN3GSM4InitEv+0xe>
     392:	46c0      	nop			; (mov r8, r8)
     394:	00000bb8 	.word	0x00000bb8
     398:	00002e88 	.word	0x00002e88
     39c:	00002e90 	.word	0x00002e90
     3a0:	00002e9c 	.word	0x00002e9c
     3a4:	00002ea8 	.word	0x00002ea8
     3a8:	00002eb4 	.word	0x00002eb4
     3ac:	00000206 	.word	0x00000206

000003b0 <_ZN3GSM10ProcessSMSEPKcS1_>:
    ProcessSMS(text, sender);

    free(data);
}

void GSM::ProcessSMS(const char* text, const char* sender) {
     3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b2:	46c6      	mov	lr, r8
     3b4:	b500      	push	{lr}
     3b6:	b082      	sub	sp, #8
     3b8:	0006      	movs	r6, r0
     3ba:	000f      	movs	r7, r1
     3bc:	9201      	str	r2, [sp, #4]
    char* args_start = strchr(text, ' ');
     3be:	2120      	movs	r1, #32
     3c0:	0038      	movs	r0, r7
     3c2:	f002 f86f 	bl	24a4 <strchr>
     3c6:	4680      	mov	r8, r0
    if(args_start) {
     3c8:	2800      	cmp	r0, #0
     3ca:	d004      	beq.n	3d6 <_ZN3GSM10ProcessSMSEPKcS1_+0x26>
        *args_start = '\0';
     3cc:	2300      	movs	r3, #0
     3ce:	7003      	strb	r3, [r0, #0]
        args_start += 1;
     3d0:	3301      	adds	r3, #1
     3d2:	469c      	mov	ip, r3
     3d4:	44e0      	add	r8, ip
    T& operator[](size_t idx) {
        return *(m_data + idx);
    }

    T* begin() {
        return m_data;
     3d6:	68f4      	ldr	r4, [r6, #12]
    }

    T* end() {
        return m_data + m_size;
     3d8:	68b3      	ldr	r3, [r6, #8]
     3da:	005d      	lsls	r5, r3, #1
     3dc:	18ed      	adds	r5, r5, r3
     3de:	00ad      	lsls	r5, r5, #2
     3e0:	1965      	adds	r5, r4, r5
    }

    for(auto& func : m_smsfuncs) {
     3e2:	42ac      	cmp	r4, r5
     3e4:	d00c      	beq.n	400 <_ZN3GSM10ProcessSMSEPKcS1_+0x50>
        if(strcasecmp(func.key, text) == 0) {
     3e6:	0039      	movs	r1, r7
     3e8:	6820      	ldr	r0, [r4, #0]
     3ea:	f002 f841 	bl	2470 <strcasecmp>
     3ee:	2800      	cmp	r0, #0
     3f0:	d001      	beq.n	3f6 <_ZN3GSM10ProcessSMSEPKcS1_+0x46>
    for(auto& func : m_smsfuncs) {
     3f2:	340c      	adds	r4, #12
     3f4:	e7f5      	b.n	3e2 <_ZN3GSM10ProcessSMSEPKcS1_+0x32>
            func.callback(this, sender, args_start);
     3f6:	6863      	ldr	r3, [r4, #4]
     3f8:	4642      	mov	r2, r8
     3fa:	9901      	ldr	r1, [sp, #4]
     3fc:	0030      	movs	r0, r6
     3fe:	4798      	blx	r3
            break;
        }
    }
}
     400:	b002      	add	sp, #8
     402:	bc04      	pop	{r2}
     404:	4690      	mov	r8, r2
     406:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000408 <_ZN3GSM7ReadSMSEi>:
void GSM::ReadSMS(int index) {
     408:	b5f0      	push	{r4, r5, r6, r7, lr}
     40a:	b091      	sub	sp, #68	; 0x44
     40c:	0004      	movs	r4, r0
     40e:	000b      	movs	r3, r1
    snprintf(buf, sizeof(buf), "AT+CMGR=%d", index);
     410:	4a26      	ldr	r2, [pc, #152]	; (4ac <_ZN3GSM7ReadSMSEi+0xa4>)
     412:	2140      	movs	r1, #64	; 0x40
     414:	4668      	mov	r0, sp
     416:	f001 fff7 	bl	2408 <sniprintf>
    if(!Command(buf, "+CMGR"))
     41a:	4b25      	ldr	r3, [pc, #148]	; (4b0 <_ZN3GSM7ReadSMSEi+0xa8>)
     41c:	4a25      	ldr	r2, [pc, #148]	; (4b4 <_ZN3GSM7ReadSMSEi+0xac>)
     41e:	4669      	mov	r1, sp
     420:	0020      	movs	r0, r4
     422:	f7ff febd 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     426:	2800      	cmp	r0, #0
     428:	d101      	bne.n	42e <_ZN3GSM7ReadSMSEi+0x26>
}
     42a:	b011      	add	sp, #68	; 0x44
     42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    char* data = m_uart->read();
     42e:	6920      	ldr	r0, [r4, #16]
     430:	f001 fbae 	bl	1b90 <_ZN6uart_t4readEv>
     434:	1e07      	subs	r7, r0, #0
    if(!data) return;
     436:	d0f8      	beq.n	42a <_ZN3GSM7ReadSMSEi+0x22>
    char* cmgr_start = strstr(data, "+CMGR"); // this shouldn't return null
     438:	491e      	ldr	r1, [pc, #120]	; (4b4 <_ZN3GSM7ReadSMSEi+0xac>)
     43a:	f002 f875 	bl	2528 <strstr>
     43e:	0005      	movs	r5, r0
    char* text = strchr(cmgr_start, '\n');
     440:	210a      	movs	r1, #10
     442:	f002 f82f 	bl	24a4 <strchr>
    if(!text) {
     446:	2800      	cmp	r0, #0
     448:	d020      	beq.n	48c <_ZN3GSM7ReadSMSEi+0x84>
    text += 1; // ignore \n
     44a:	1c46      	adds	r6, r0, #1
    char* text_end = strstr(text, "\r\n\r\nOK");
     44c:	491a      	ldr	r1, [pc, #104]	; (4b8 <_ZN3GSM7ReadSMSEi+0xb0>)
     44e:	0030      	movs	r0, r6
     450:	f002 f86a 	bl	2528 <strstr>
    if(!text_end) {
     454:	2800      	cmp	r0, #0
     456:	d01d      	beq.n	494 <_ZN3GSM7ReadSMSEi+0x8c>
    *text_end = '\0';
     458:	2300      	movs	r3, #0
     45a:	7003      	strb	r3, [r0, #0]
    char* sender = strstr(cmgr_start, ",\"");
     45c:	4917      	ldr	r1, [pc, #92]	; (4bc <_ZN3GSM7ReadSMSEi+0xb4>)
     45e:	0028      	movs	r0, r5
     460:	f002 f862 	bl	2528 <strstr>
    if(!sender) {
     464:	2800      	cmp	r0, #0
     466:	d019      	beq.n	49c <_ZN3GSM7ReadSMSEi+0x94>
    sender += 2;
     468:	1c85      	adds	r5, r0, #2
    if(!strchr(sender, '"')) {
     46a:	2122      	movs	r1, #34	; 0x22
     46c:	0028      	movs	r0, r5
     46e:	f002 f819 	bl	24a4 <strchr>
     472:	2800      	cmp	r0, #0
     474:	d016      	beq.n	4a4 <_ZN3GSM7ReadSMSEi+0x9c>
    *strchr(sender, '"') = '\0';
     476:	2300      	movs	r3, #0
     478:	7003      	strb	r3, [r0, #0]
    ProcessSMS(text, sender);
     47a:	002a      	movs	r2, r5
     47c:	0031      	movs	r1, r6
     47e:	0020      	movs	r0, r4
     480:	f7ff ff96 	bl	3b0 <_ZN3GSM10ProcessSMSEPKcS1_>
    free(data);
     484:	0038      	movs	r0, r7
     486:	f001 fee7 	bl	2258 <free>
     48a:	e7ce      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     48c:	0038      	movs	r0, r7
     48e:	f001 fee3 	bl	2258 <free>
        return;
     492:	e7ca      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     494:	0038      	movs	r0, r7
     496:	f001 fedf 	bl	2258 <free>
        return;
     49a:	e7c6      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     49c:	0038      	movs	r0, r7
     49e:	f001 fedb 	bl	2258 <free>
        return;
     4a2:	e7c2      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     4a4:	0038      	movs	r0, r7
     4a6:	f001 fed7 	bl	2258 <free>
        return;
     4aa:	e7be      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
     4ac:	00002ec8 	.word	0x00002ec8
     4b0:	00000bb8 	.word	0x00000bb8
     4b4:	00002ed4 	.word	0x00002ed4
     4b8:	00002edc 	.word	0x00002edc
     4bc:	00002ee4 	.word	0x00002ee4

000004c0 <_ZN3GSM4PollEv>:
void GSM::Poll() {
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	0004      	movs	r4, r0
    if(!m_uart->available()) return;
     4c4:	6902      	ldr	r2, [r0, #16]
        if(m_rxhead >= m_rxtail)
     4c6:	2381      	movs	r3, #129	; 0x81
     4c8:	009b      	lsls	r3, r3, #2
     4ca:	5ad1      	ldrh	r1, [r2, r3]
     4cc:	b289      	uxth	r1, r1
     4ce:	4b20      	ldr	r3, [pc, #128]	; (550 <_ZN3GSM4PollEv+0x90>)
     4d0:	5ad3      	ldrh	r3, [r2, r3]
     4d2:	b29b      	uxth	r3, r3
     4d4:	4299      	cmp	r1, r3
     4d6:	d309      	bcc.n	4ec <_ZN3GSM4PollEv+0x2c>
            return m_rxhead - m_rxtail;
     4d8:	2381      	movs	r3, #129	; 0x81
     4da:	009b      	lsls	r3, r3, #2
     4dc:	5ad3      	ldrh	r3, [r2, r3]
     4de:	491c      	ldr	r1, [pc, #112]	; (550 <_ZN3GSM4PollEv+0x90>)
     4e0:	5a52      	ldrh	r2, [r2, r1]
     4e2:	1a9b      	subs	r3, r3, r2
     4e4:	b29b      	uxth	r3, r3
     4e6:	2b00      	cmp	r3, #0
     4e8:	d10d      	bne.n	506 <_ZN3GSM4PollEv+0x46>
}
     4ea:	bd70      	pop	{r4, r5, r6, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     4ec:	2381      	movs	r3, #129	; 0x81
     4ee:	009b      	lsls	r3, r3, #2
     4f0:	5ad3      	ldrh	r3, [r2, r3]
     4f2:	4917      	ldr	r1, [pc, #92]	; (550 <_ZN3GSM4PollEv+0x90>)
     4f4:	5a52      	ldrh	r2, [r2, r1]
     4f6:	1a9b      	subs	r3, r3, r2
     4f8:	b29b      	uxth	r3, r3
     4fa:	2280      	movs	r2, #128	; 0x80
     4fc:	0092      	lsls	r2, r2, #2
     4fe:	4694      	mov	ip, r2
     500:	4463      	add	r3, ip
     502:	b29b      	uxth	r3, r3
     504:	e7ef      	b.n	4e6 <_ZN3GSM4PollEv+0x26>
    delay_usec(100000);
     506:	4813      	ldr	r0, [pc, #76]	; (554 <_ZN3GSM4PollEv+0x94>)
     508:	f002 fea2 	bl	3250 <__delay_usec_veneer>
    char* data = m_uart->read();
     50c:	6920      	ldr	r0, [r4, #16]
     50e:	f001 fb3f 	bl	1b90 <_ZN6uart_t4readEv>
     512:	1e05      	subs	r5, r0, #0
    if(!data) return;
     514:	d0e9      	beq.n	4ea <_ZN3GSM4PollEv+0x2a>
    if(strstr(data, "RING")) {
     516:	4910      	ldr	r1, [pc, #64]	; (558 <_ZN3GSM4PollEv+0x98>)
     518:	f002 f806 	bl	2528 <strstr>
     51c:	2800      	cmp	r0, #0
     51e:	d009      	beq.n	534 <_ZN3GSM4PollEv+0x74>
        Command("ATH"); // Disconnect call
     520:	4b0e      	ldr	r3, [pc, #56]	; (55c <_ZN3GSM4PollEv+0x9c>)
     522:	2200      	movs	r2, #0
     524:	490e      	ldr	r1, [pc, #56]	; (560 <_ZN3GSM4PollEv+0xa0>)
     526:	0020      	movs	r0, r4
     528:	f7ff fe3a 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    free(data);
     52c:	0028      	movs	r0, r5
     52e:	f001 fe93 	bl	2258 <free>
     532:	e7da      	b.n	4ea <_ZN3GSM4PollEv+0x2a>
    } else if(strstr(data, "+CMTI")) {
     534:	490b      	ldr	r1, [pc, #44]	; (564 <_ZN3GSM4PollEv+0xa4>)
     536:	0028      	movs	r0, r5
     538:	f001 fff6 	bl	2528 <strstr>
     53c:	2800      	cmp	r0, #0
     53e:	d0f5      	beq.n	52c <_ZN3GSM4PollEv+0x6c>
        ReadSMS(find_num(strstr(data, "+CMTI")));
     540:	f7ff fdc8 	bl	d4 <_ZL8find_numPKc>
     544:	0001      	movs	r1, r0
     546:	0020      	movs	r0, r4
     548:	f7ff ff5e 	bl	408 <_ZN3GSM7ReadSMSEi>
     54c:	e7ee      	b.n	52c <_ZN3GSM4PollEv+0x6c>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	00000206 	.word	0x00000206
     554:	000186a0 	.word	0x000186a0
     558:	00002ee8 	.word	0x00002ee8
     55c:	00000bb8 	.word	0x00000bb8
     560:	00002ef0 	.word	0x00002ef0
     564:	00002ef4 	.word	0x00002ef4

00000568 <_ZN3GSM7SendSMSEPKcS1_>:

bool GSM::SendSMS(const char* number, const char* text) {
     568:	b530      	push	{r4, r5, lr}
     56a:	b091      	sub	sp, #68	; 0x44
     56c:	0004      	movs	r4, r0
     56e:	000b      	movs	r3, r1
     570:	0015      	movs	r5, r2
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+CMGS=\"%s\"", number);
     572:	4a13      	ldr	r2, [pc, #76]	; (5c0 <_ZN3GSM7SendSMSEPKcS1_+0x58>)
     574:	2140      	movs	r1, #64	; 0x40
     576:	4668      	mov	r0, sp
     578:	f001 ff46 	bl	2408 <sniprintf>
    if(!Command(buf))
     57c:	4b11      	ldr	r3, [pc, #68]	; (5c4 <_ZN3GSM7SendSMSEPKcS1_+0x5c>)
     57e:	2200      	movs	r2, #0
     580:	4669      	mov	r1, sp
     582:	0020      	movs	r0, r4
     584:	f7ff fe0c 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     588:	2800      	cmp	r0, #0
     58a:	d101      	bne.n	590 <_ZN3GSM7SendSMSEPKcS1_+0x28>
    m_uart->print(text);

    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
    m_uart->flush_rx();
    return success;
     58c:	b011      	add	sp, #68	; 0x44
     58e:	bd30      	pop	{r4, r5, pc}
    m_uart->print(text);
     590:	2201      	movs	r2, #1
     592:	4252      	negs	r2, r2
     594:	0029      	movs	r1, r5
     596:	6920      	ldr	r0, [r4, #16]
     598:	f001 fa1a 	bl	19d0 <_ZN6uart_t5printEPKci>
    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
     59c:	4b0a      	ldr	r3, [pc, #40]	; (5c8 <_ZN3GSM7SendSMSEPKcS1_+0x60>)
     59e:	4a0b      	ldr	r2, [pc, #44]	; (5cc <_ZN3GSM7SendSMSEPKcS1_+0x64>)
     5a0:	490b      	ldr	r1, [pc, #44]	; (5d0 <_ZN3GSM7SendSMSEPKcS1_+0x68>)
     5a2:	0020      	movs	r0, r4
     5a4:	f7ff fdfc 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    m_uart->flush_rx();
     5a8:	6923      	ldr	r3, [r4, #16]
        m_rxhead = 0;
     5aa:	2200      	movs	r2, #0
     5ac:	2181      	movs	r1, #129	; 0x81
     5ae:	0089      	lsls	r1, r1, #2
     5b0:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     5b2:	4908      	ldr	r1, [pc, #32]	; (5d4 <_ZN3GSM7SendSMSEPKcS1_+0x6c>)
     5b4:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     5b6:	2100      	movs	r1, #0
     5b8:	2282      	movs	r2, #130	; 0x82
     5ba:	0092      	lsls	r2, r2, #2
     5bc:	5499      	strb	r1, [r3, r2]
    return success;
     5be:	e7e5      	b.n	58c <_ZN3GSM7SendSMSEPKcS1_+0x24>
     5c0:	00002efc 	.word	0x00002efc
     5c4:	00000bb8 	.word	0x00000bb8
     5c8:	0000ea60 	.word	0x0000ea60
     5cc:	00002f0c 	.word	0x00002f0c
     5d0:	00002f14 	.word	0x00002f14
     5d4:	00000206 	.word	0x00000206

000005d8 <_ZL9func_execP3GSMPKcS2_>:
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     5d8:	b570      	push	{r4, r5, r6, lr}
     5da:	0004      	movs	r4, r0
     5dc:	000d      	movs	r5, r1
     5de:	0011      	movs	r1, r2
    if(!gsm->Command(args)) {
     5e0:	4b0f      	ldr	r3, [pc, #60]	; (620 <_ZL9func_execP3GSMPKcS2_+0x48>)
     5e2:	2200      	movs	r2, #0
     5e4:	f7ff fddc 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     5e8:	2800      	cmp	r0, #0
     5ea:	d105      	bne.n	5f8 <_ZL9func_execP3GSMPKcS2_+0x20>
        gsm->SendSMS(sender, "Command timed out");
     5ec:	4a0d      	ldr	r2, [pc, #52]	; (624 <_ZL9func_execP3GSMPKcS2_+0x4c>)
     5ee:	0029      	movs	r1, r5
     5f0:	0020      	movs	r0, r4
     5f2:	f7ff ffb9 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
}
     5f6:	bd70      	pop	{r4, r5, r6, pc}
        char* resp = gsm->m_uart->read();
     5f8:	6920      	ldr	r0, [r4, #16]
     5fa:	f001 fac9 	bl	1b90 <_ZN6uart_t4readEv>
     5fe:	1e06      	subs	r6, r0, #0
        if(!resp) {
     600:	d008      	beq.n	614 <_ZL9func_execP3GSMPKcS2_+0x3c>
            gsm->SendSMS(sender, resp);
     602:	0002      	movs	r2, r0
     604:	0029      	movs	r1, r5
     606:	0020      	movs	r0, r4
     608:	f7ff ffae 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
            free(resp);
     60c:	0030      	movs	r0, r6
     60e:	f001 fe23 	bl	2258 <free>
}
     612:	e7f0      	b.n	5f6 <_ZL9func_execP3GSMPKcS2_+0x1e>
            gsm->SendSMS(sender, "uart->read() returned null");
     614:	4a04      	ldr	r2, [pc, #16]	; (628 <_ZL9func_execP3GSMPKcS2_+0x50>)
     616:	0029      	movs	r1, r5
     618:	0020      	movs	r0, r4
     61a:	f7ff ffa5 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
     61e:	e7ea      	b.n	5f6 <_ZL9func_execP3GSMPKcS2_+0x1e>
     620:	00000bb8 	.word	0x00000bb8
     624:	00002f18 	.word	0x00002f18
     628:	00002f2c 	.word	0x00002f2c

0000062c <_ZN4RF243csnEb>:
#define pgm_read_byte(x) (*(uint8_t*)(x))

/****************************************************************************/

void RF24::csn(bool mode)
{
     62c:	b510      	push	{r4, lr}
    }
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }
     62e:	68c3      	ldr	r3, [r0, #12]
     630:	6904      	ldr	r4, [r0, #16]
        if(en)
     632:	2900      	cmp	r1, #0
     634:	d00a      	beq.n	64c <_ZN4RF243csnEb+0x20>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     636:	2201      	movs	r2, #1
     638:	40a2      	lsls	r2, r4
     63a:	01db      	lsls	r3, r3, #7
     63c:	4907      	ldr	r1, [pc, #28]	; (65c <_ZN4RF243csnEb+0x30>)
     63e:	468c      	mov	ip, r1
     640:	4463      	add	r3, ip
     642:	619a      	str	r2, [r3, #24]
      _SPI.chipSelect(csn_pin);
    #endif // defined(RF24_RPi)

    #if !defined(RF24_LINUX)
    digitalWrite(csn_pin, mode);
    delay_usec(csDelay);
     644:	6a40      	ldr	r0, [r0, #36]	; 0x24
     646:	f002 fe03 	bl	3250 <__delay_usec_veneer>
    #endif // !defined(RF24_LINUX)
}
     64a:	bd10      	pop	{r4, pc}
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     64c:	2201      	movs	r2, #1
     64e:	40a2      	lsls	r2, r4
     650:	01db      	lsls	r3, r3, #7
     652:	4902      	ldr	r1, [pc, #8]	; (65c <_ZN4RF243csnEb+0x30>)
     654:	468c      	mov	ip, r1
     656:	4463      	add	r3, ip
     658:	615a      	str	r2, [r3, #20]
     65a:	e7f3      	b.n	644 <_ZN4RF243csnEb+0x18>
     65c:	41004400 	.word	0x41004400

00000660 <_ZN4RF242ceEb>:

/****************************************************************************/

void RF24::ce(bool level)
{
     660:	b570      	push	{r4, r5, r6, lr}
     662:	b084      	sub	sp, #16
     664:	0004      	movs	r4, r0
     666:	000d      	movs	r5, r1
    //Allow for 3-pin use on ATTiny
    if (ce_pin != csn_pin) {
     668:	4669      	mov	r1, sp
     66a:	0003      	movs	r3, r0
     66c:	330c      	adds	r3, #12
     66e:	000a      	movs	r2, r1
     670:	cb41      	ldmia	r3!, {r0, r6}
     672:	c241      	stmia	r2!, {r0, r6}
        return !operator==(b);
     674:	2208      	movs	r2, #8
     676:	a802      	add	r0, sp, #8
     678:	f001 fdf8 	bl	226c <memcpy>
        return port == b.port && pin == b.pin;
     67c:	6863      	ldr	r3, [r4, #4]
     67e:	9a02      	ldr	r2, [sp, #8]
     680:	4293      	cmp	r3, r2
     682:	d00b      	beq.n	69c <_ZN4RF242ceEb+0x3c>
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }
     684:	68a1      	ldr	r1, [r4, #8]
        if(en)
     686:	2d00      	cmp	r5, #0
     688:	d00d      	beq.n	6a6 <_ZN4RF242ceEb+0x46>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     68a:	2201      	movs	r2, #1
     68c:	408a      	lsls	r2, r1
     68e:	01db      	lsls	r3, r3, #7
     690:	4909      	ldr	r1, [pc, #36]	; (6b8 <_ZN4RF242ceEb+0x58>)
     692:	468c      	mov	ip, r1
     694:	4463      	add	r3, ip
     696:	619a      	str	r2, [r3, #24]
        digitalWrite(ce_pin, level);
    }
}
     698:	b004      	add	sp, #16
     69a:	bd70      	pop	{r4, r5, r6, pc}
        return port == b.port && pin == b.pin;
     69c:	68a2      	ldr	r2, [r4, #8]
     69e:	9903      	ldr	r1, [sp, #12]
     6a0:	428a      	cmp	r2, r1
     6a2:	d1ef      	bne.n	684 <_ZN4RF242ceEb+0x24>
     6a4:	e7f8      	b.n	698 <_ZN4RF242ceEb+0x38>
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     6a6:	2201      	movs	r2, #1
     6a8:	408a      	lsls	r2, r1
     6aa:	01db      	lsls	r3, r3, #7
     6ac:	4902      	ldr	r1, [pc, #8]	; (6b8 <_ZN4RF242ceEb+0x58>)
     6ae:	468c      	mov	ip, r1
     6b0:	4463      	add	r3, ip
     6b2:	615a      	str	r2, [r3, #20]
     6b4:	e7f0      	b.n	698 <_ZN4RF242ceEb+0x38>
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	41004400 	.word	0x41004400

000006bc <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     6bc:	b570      	push	{r4, r5, r6, lr}
     6be:	0004      	movs	r4, r0
     6c0:	000d      	movs	r5, r1
    csn(LOW);
     6c2:	2100      	movs	r1, #0
     6c4:	f7ff ffb2 	bl	62c <_ZN4RF243csnEb>

    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    _SPI.Transfer(R_REGISTER | (REGISTER_MASK & reg));
     6c8:	211f      	movs	r1, #31
     6ca:	4029      	ands	r1, r5
     6cc:	6820      	ldr	r0, [r4, #0]
     6ce:	f000 ff25 	bl	151c <_ZN5spi_t8TransferEh>
    result = _SPI.Transfer(0xff);
     6d2:	21ff      	movs	r1, #255	; 0xff
     6d4:	6820      	ldr	r0, [r4, #0]
     6d6:	f000 ff21 	bl	151c <_ZN5spi_t8TransferEh>
     6da:	0005      	movs	r5, r0
    csn(HIGH);
     6dc:	2101      	movs	r1, #1
     6de:	0020      	movs	r0, r4
     6e0:	f7ff ffa4 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return result;
}
     6e4:	0028      	movs	r0, r5
     6e6:	bd70      	pop	{r4, r5, r6, pc}

000006e8 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6ea:	46ce      	mov	lr, r9
     6ec:	4647      	mov	r7, r8
     6ee:	b580      	push	{r7, lr}
     6f0:	0007      	movs	r7, r0
     6f2:	000c      	movs	r4, r1
     6f4:	0016      	movs	r6, r2
     6f6:	001d      	movs	r5, r3
    csn(LOW);
     6f8:	2100      	movs	r1, #0
     6fa:	f7ff ff97 	bl	62c <_ZN4RF243csnEb>
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     6fe:	211f      	movs	r1, #31
     700:	4021      	ands	r1, r4
     702:	2320      	movs	r3, #32
     704:	4319      	orrs	r1, r3
     706:	b2c9      	uxtb	r1, r1
     708:	6838      	ldr	r0, [r7, #0]
     70a:	f000 ff07 	bl	151c <_ZN5spi_t8TransferEh>
     70e:	4681      	mov	r9, r0
    while (len--) {
     710:	1e6c      	subs	r4, r5, #1
     712:	b2e4      	uxtb	r4, r4
     714:	2d00      	cmp	r5, #0
     716:	d008      	beq.n	72a <_ZN4RF2414write_registerEhPKhh+0x42>
        _SPI.Transfer(*buf++);
     718:	1c73      	adds	r3, r6, #1
     71a:	4698      	mov	r8, r3
     71c:	7831      	ldrb	r1, [r6, #0]
     71e:	6838      	ldr	r0, [r7, #0]
     720:	f000 fefc 	bl	151c <_ZN5spi_t8TransferEh>
    while (len--) {
     724:	0025      	movs	r5, r4
        _SPI.Transfer(*buf++);
     726:	4646      	mov	r6, r8
    while (len--) {
     728:	e7f2      	b.n	710 <_ZN4RF2414write_registerEhPKhh+0x28>
    csn(HIGH);
     72a:	2101      	movs	r1, #1
     72c:	0038      	movs	r0, r7
     72e:	f7ff ff7d 	bl	62c <_ZN4RF243csnEb>
    }
    endTransaction();
    #endif // !defined(RF24_LINUX)

    return status;
}
     732:	4648      	mov	r0, r9
     734:	bc0c      	pop	{r2, r3}
     736:	4690      	mov	r8, r2
     738:	4699      	mov	r9, r3
     73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000073c <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     73c:	b570      	push	{r4, r5, r6, lr}
     73e:	0004      	movs	r4, r0
     740:	000d      	movs	r5, r1
     742:	0016      	movs	r6, r2
    csn(LOW);
     744:	2100      	movs	r1, #0
     746:	f7ff ff71 	bl	62c <_ZN4RF243csnEb>
    status = *prx++; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     74a:	211f      	movs	r1, #31
     74c:	4029      	ands	r1, r5
     74e:	2320      	movs	r3, #32
     750:	4319      	orrs	r1, r3
     752:	b2c9      	uxtb	r1, r1
     754:	6820      	ldr	r0, [r4, #0]
     756:	f000 fee1 	bl	151c <_ZN5spi_t8TransferEh>
     75a:	0005      	movs	r5, r0
    _SPI.Transfer(value);
     75c:	0031      	movs	r1, r6
     75e:	6820      	ldr	r0, [r4, #0]
     760:	f000 fedc 	bl	151c <_ZN5spi_t8TransferEh>
    csn(HIGH);
     764:	2101      	movs	r1, #1
     766:	0020      	movs	r0, r4
     768:	f7ff ff60 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     76c:	0028      	movs	r0, r5
     76e:	bd70      	pop	{r4, r5, r6, pc}

00000770 <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
     770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     772:	46ce      	mov	lr, r9
     774:	4647      	mov	r7, r8
     776:	b580      	push	{r7, lr}
     778:	0007      	movs	r7, r0
     77a:	000c      	movs	r4, r1
     77c:	0016      	movs	r6, r2
     77e:	4698      	mov	r8, r3
    uint8_t status;
    const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

    data_len = rf24_min(data_len, payload_size);
     780:	7dc5      	ldrb	r5, [r0, #23]
     782:	4295      	cmp	r5, r2
     784:	d800      	bhi.n	788 <_ZN4RF2413write_payloadEPKvhh+0x18>
     786:	002e      	movs	r6, r5
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     788:	7e3b      	ldrb	r3, [r7, #24]
     78a:	2b00      	cmp	r3, #0
     78c:	d117      	bne.n	7be <_ZN4RF2413write_payloadEPKvhh+0x4e>
     78e:	1bad      	subs	r5, r5, r6
     790:	b2ed      	uxtb	r5, r5
    csn(LOW);
     792:	2100      	movs	r1, #0
     794:	0038      	movs	r0, r7
     796:	f7ff ff49 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(writeType);
     79a:	4641      	mov	r1, r8
     79c:	6838      	ldr	r0, [r7, #0]
     79e:	f000 febd 	bl	151c <_ZN5spi_t8TransferEh>
     7a2:	4680      	mov	r8, r0
    while (data_len--) {
     7a4:	1e73      	subs	r3, r6, #1
     7a6:	b2db      	uxtb	r3, r3
     7a8:	4699      	mov	r9, r3
     7aa:	2e00      	cmp	r6, #0
     7ac:	d009      	beq.n	7c2 <_ZN4RF2413write_payloadEPKvhh+0x52>
        _SPI.Transfer(*current++);
     7ae:	1c66      	adds	r6, r4, #1
     7b0:	7821      	ldrb	r1, [r4, #0]
     7b2:	6838      	ldr	r0, [r7, #0]
     7b4:	f000 feb2 	bl	151c <_ZN5spi_t8TransferEh>
     7b8:	0034      	movs	r4, r6
    while (data_len--) {
     7ba:	464e      	mov	r6, r9
     7bc:	e7f2      	b.n	7a4 <_ZN4RF2413write_payloadEPKvhh+0x34>
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     7be:	2500      	movs	r5, #0
     7c0:	e7e7      	b.n	792 <_ZN4RF2413write_payloadEPKvhh+0x22>
    }
    while (blank_len--) {
     7c2:	1e6c      	subs	r4, r5, #1
     7c4:	b2e4      	uxtb	r4, r4
     7c6:	2d00      	cmp	r5, #0
     7c8:	d005      	beq.n	7d6 <_ZN4RF2413write_payloadEPKvhh+0x66>
        _SPI.Transfer(0);
     7ca:	2100      	movs	r1, #0
     7cc:	6838      	ldr	r0, [r7, #0]
     7ce:	f000 fea5 	bl	151c <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     7d2:	0025      	movs	r5, r4
     7d4:	e7f5      	b.n	7c2 <_ZN4RF2413write_payloadEPKvhh+0x52>
    csn(HIGH);
     7d6:	2101      	movs	r1, #1
     7d8:	0038      	movs	r0, r7
     7da:	f7ff ff27 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     7de:	4640      	mov	r0, r8
     7e0:	bc0c      	pop	{r2, r3}
     7e2:	4690      	mov	r8, r2
     7e4:	4699      	mov	r9, r3
     7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000007e8 <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t data_len)
{
     7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7ea:	46ce      	mov	lr, r9
     7ec:	4647      	mov	r7, r8
     7ee:	b580      	push	{r7, lr}
     7f0:	0007      	movs	r7, r0
     7f2:	000c      	movs	r4, r1
     7f4:	0016      	movs	r6, r2
    uint8_t status;
    uint8_t* current = reinterpret_cast<uint8_t*>(buf);

    if (data_len > payload_size) {
     7f6:	7dc5      	ldrb	r5, [r0, #23]
     7f8:	4295      	cmp	r5, r2
     7fa:	d200      	bcs.n	7fe <_ZN4RF2412read_payloadEPvh+0x16>
        data_len = payload_size;
     7fc:	002e      	movs	r6, r5
    }
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     7fe:	7e3b      	ldrb	r3, [r7, #24]
     800:	2b00      	cmp	r3, #0
     802:	d118      	bne.n	836 <_ZN4RF2412read_payloadEPvh+0x4e>
     804:	1bad      	subs	r5, r5, r6
     806:	b2ed      	uxtb	r5, r5
    csn(LOW);
     808:	2100      	movs	r1, #0
     80a:	0038      	movs	r0, r7
     80c:	f7ff ff0e 	bl	62c <_ZN4RF243csnEb>
    }
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(R_RX_PAYLOAD);
     810:	2161      	movs	r1, #97	; 0x61
     812:	6838      	ldr	r0, [r7, #0]
     814:	f000 fe82 	bl	151c <_ZN5spi_t8TransferEh>
     818:	4680      	mov	r8, r0
    while (data_len--) {
     81a:	1e73      	subs	r3, r6, #1
     81c:	b2db      	uxtb	r3, r3
     81e:	4699      	mov	r9, r3
     820:	2e00      	cmp	r6, #0
     822:	d00a      	beq.n	83a <_ZN4RF2412read_payloadEPvh+0x52>
        *current++ = _SPI.Transfer(0xFF);
     824:	1c66      	adds	r6, r4, #1
     826:	21ff      	movs	r1, #255	; 0xff
     828:	6838      	ldr	r0, [r7, #0]
     82a:	f000 fe77 	bl	151c <_ZN5spi_t8TransferEh>
     82e:	7020      	strb	r0, [r4, #0]
     830:	0034      	movs	r4, r6
    while (data_len--) {
     832:	464e      	mov	r6, r9
     834:	e7f1      	b.n	81a <_ZN4RF2412read_payloadEPvh+0x32>
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     836:	2500      	movs	r5, #0
     838:	e7e6      	b.n	808 <_ZN4RF2412read_payloadEPvh+0x20>
    }
    while (blank_len--) {
     83a:	1e6c      	subs	r4, r5, #1
     83c:	b2e4      	uxtb	r4, r4
     83e:	2d00      	cmp	r5, #0
     840:	d005      	beq.n	84e <_ZN4RF2412read_payloadEPvh+0x66>
        _SPI.Transfer(0xff);
     842:	21ff      	movs	r1, #255	; 0xff
     844:	6838      	ldr	r0, [r7, #0]
     846:	f000 fe69 	bl	151c <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     84a:	0025      	movs	r5, r4
     84c:	e7f5      	b.n	83a <_ZN4RF2412read_payloadEPvh+0x52>
    csn(HIGH);
     84e:	2101      	movs	r1, #1
     850:	0038      	movs	r0, r7
     852:	f7ff feeb 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     856:	4640      	mov	r0, r8
     858:	bc0c      	pop	{r2, r3}
     85a:	4690      	mov	r8, r2
     85c:	4699      	mov	r9, r3
     85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000860 <_ZN4RF248spiTransEh>:
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd)
{
     860:	b570      	push	{r4, r5, r6, lr}
     862:	0004      	movs	r4, r0
     864:	000d      	movs	r5, r1
    csn(LOW);
     866:	2100      	movs	r1, #0
     868:	f7ff fee0 	bl	62c <_ZN4RF243csnEb>

    uint8_t status;

    beginTransaction();
    status = _SPI.Transfer(cmd);
     86c:	0029      	movs	r1, r5
     86e:	6820      	ldr	r0, [r4, #0]
     870:	f000 fe54 	bl	151c <_ZN5spi_t8TransferEh>
     874:	0005      	movs	r5, r0
    csn(HIGH);
     876:	2101      	movs	r1, #1
     878:	0020      	movs	r0, r4
     87a:	f7ff fed7 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    return status;
}
     87e:	0028      	movs	r0, r5
     880:	bd70      	pop	{r4, r5, r6, pc}

00000882 <_ZN4RF248flush_rxEv>:
{
     882:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_RX);
     884:	21e2      	movs	r1, #226	; 0xe2
     886:	f7ff ffeb 	bl	860 <_ZN4RF248spiTransEh>
}
     88a:	bd10      	pop	{r4, pc}

0000088c <_ZN4RF248flush_txEv>:
{
     88c:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_TX);
     88e:	21e1      	movs	r1, #225	; 0xe1
     890:	f7ff ffe6 	bl	860 <_ZN4RF248spiTransEh>
}
     894:	bd10      	pop	{r4, pc}

00000896 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
     896:	b510      	push	{r4, lr}
    return spiTrans(RF24_NOP);
     898:	21ff      	movs	r1, #255	; 0xff
     89a:	f7ff ffe1 	bl	860 <_ZN4RF248spiTransEh>
}
     89e:	bd10      	pop	{r4, pc}

000008a0 <_ZN4RF24C1E6gpio_tS0_R5spi_t>:

#endif

/****************************************************************************/

RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     8a0:	b082      	sub	sp, #8
     8a2:	b530      	push	{r4, r5, lr}
     8a4:	b083      	sub	sp, #12
     8a6:	466c      	mov	r4, sp
     8a8:	9100      	str	r1, [sp, #0]
     8aa:	6062      	str	r2, [r4, #4]
     8ac:	aa07      	add	r2, sp, #28
     8ae:	9307      	str	r3, [sp, #28]
        :_SPI(_spi), ce_pin(_cepin), csn_pin(_cspin), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5),
         csDelay(5)//,pipe0_reading_address(0)
     8b0:	0003      	movs	r3, r0
     8b2:	9909      	ldr	r1, [sp, #36]	; 0x24
     8b4:	c302      	stmia	r3!, {r1}
     8b6:	cc22      	ldmia	r4!, {r1, r5}
     8b8:	c322      	stmia	r3!, {r1, r5}
     8ba:	0003      	movs	r3, r0
     8bc:	330c      	adds	r3, #12
     8be:	ca12      	ldmia	r2!, {r1, r4}
     8c0:	c312      	stmia	r3!, {r1, r4}
     8c2:	2300      	movs	r3, #0
     8c4:	7583      	strb	r3, [r0, #22]
     8c6:	2220      	movs	r2, #32
     8c8:	75c2      	strb	r2, [r0, #23]
     8ca:	7603      	strb	r3, [r0, #24]
     8cc:	3a1b      	subs	r2, #27
     8ce:	7782      	strb	r2, [r0, #30]
     8d0:	6242      	str	r2, [r0, #36]	; 0x24
{
    pipe0_reading_address[0] = 0;
     8d2:	7643      	strb	r3, [r0, #25]
}
     8d4:	b003      	add	sp, #12
     8d6:	bc30      	pop	{r4, r5}
     8d8:	bc08      	pop	{r3}
     8da:	b002      	add	sp, #8
     8dc:	4718      	bx	r3

000008de <_ZN4RF2410setChannelEh>:

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     8de:	b510      	push	{r4, lr}
     8e0:	000a      	movs	r2, r1
    const uint8_t max_channel = 125;
    write_register(RF_CH, rf24_min(channel, max_channel));
     8e2:	297c      	cmp	r1, #124	; 0x7c
     8e4:	d900      	bls.n	8e8 <_ZN4RF2410setChannelEh+0xa>
     8e6:	227d      	movs	r2, #125	; 0x7d
     8e8:	2105      	movs	r1, #5
     8ea:	f7ff ff27 	bl	73c <_ZN4RF2414write_registerEhh>
}
     8ee:	bd10      	pop	{r4, pc}

000008f0 <_ZN4RF2414setPayloadSizeEh>:

/****************************************************************************/

void RF24::setPayloadSize(uint8_t size)
{
    payload_size = rf24_min(size, 32);
     8f0:	1c0b      	adds	r3, r1, #0
     8f2:	2920      	cmp	r1, #32
     8f4:	d900      	bls.n	8f8 <_ZN4RF2414setPayloadSizeEh+0x8>
     8f6:	2320      	movs	r3, #32
     8f8:	75c3      	strb	r3, [r0, #23]
}
     8fa:	4770      	bx	lr

000008fc <_ZN4RF2413stopListeningEv>:
/****************************************************************************/
static const uint8_t child_pipe_enable[]
PROGMEM = {ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5};

void RF24::stopListening(void)
{
     8fc:	b510      	push	{r4, lr}
     8fe:	0004      	movs	r4, r0
    ce(LOW);
     900:	2100      	movs	r1, #0
     902:	f7ff fead 	bl	660 <_ZN4RF242ceEb>

    delay_usec(txDelay);
     906:	6a20      	ldr	r0, [r4, #32]
     908:	f002 fca2 	bl	3250 <__delay_usec_veneer>

    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
     90c:	211d      	movs	r1, #29
     90e:	0020      	movs	r0, r4
     910:	f7ff fed4 	bl	6bc <_ZN4RF2413read_registerEh>
     914:	0783      	lsls	r3, r0, #30
     916:	d417      	bmi.n	948 <_ZN4RF2413stopListeningEv+0x4c>
        delay_usec(txDelay); //200
        flush_tx();
    }
    //flush_rx();
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
     918:	2100      	movs	r1, #0
     91a:	0020      	movs	r0, r4
     91c:	f7ff fece 	bl	6bc <_ZN4RF2413read_registerEh>
     920:	2301      	movs	r3, #1
     922:	4398      	bics	r0, r3
     924:	b2c2      	uxtb	r2, r0
     926:	2100      	movs	r1, #0
     928:	0020      	movs	r0, r4
     92a:	f7ff ff07 	bl	73c <_ZN4RF2414write_registerEhh>
    if (ce_pin == csn_pin) {
      powerDown();
      powerUp();
    }
    #endif
    write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0]))); // Enable RX on pipe0
     92e:	2102      	movs	r1, #2
     930:	0020      	movs	r0, r4
     932:	f7ff fec3 	bl	6bc <_ZN4RF2413read_registerEh>
     936:	b242      	sxtb	r2, r0
     938:	2001      	movs	r0, #1
     93a:	4302      	orrs	r2, r0
     93c:	b2d2      	uxtb	r2, r2
     93e:	2102      	movs	r1, #2
     940:	0020      	movs	r0, r4
     942:	f7ff fefb 	bl	73c <_ZN4RF2414write_registerEhh>

    //delayMicroseconds(100);

}
     946:	bd10      	pop	{r4, pc}
        delay_usec(txDelay); //200
     948:	6a20      	ldr	r0, [r4, #32]
     94a:	f002 fc81 	bl	3250 <__delay_usec_veneer>
        flush_tx();
     94e:	0020      	movs	r0, r4
     950:	f7ff ff9c 	bl	88c <_ZN4RF248flush_txEv>
     954:	e7e0      	b.n	918 <_ZN4RF2413stopListeningEv+0x1c>
     956:	Address 0x00000956 is out of bounds.


00000958 <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
     958:	b510      	push	{r4, lr}
     95a:	0004      	movs	r4, r0
    uint8_t cfg = read_register(NRF_CONFIG);
     95c:	2100      	movs	r1, #0
     95e:	f7ff fead 	bl	6bc <_ZN4RF2413read_registerEh>

    // if not powered up then power up and wait for the radio to initialize
    if (!(cfg & _BV(PWR_UP))) {
     962:	0783      	lsls	r3, r0, #30
     964:	d500      	bpl.n	968 <_ZN4RF247powerUpEv+0x10>
        // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
        // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
        // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
        delay_usec(5000);
    }
}
     966:	bd10      	pop	{r4, pc}
        write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
     968:	2202      	movs	r2, #2
     96a:	4302      	orrs	r2, r0
     96c:	b2d2      	uxtb	r2, r2
     96e:	2100      	movs	r1, #0
     970:	0020      	movs	r0, r4
     972:	f7ff fee3 	bl	73c <_ZN4RF2414write_registerEhh>
        delay_usec(5000);
     976:	4802      	ldr	r0, [pc, #8]	; (980 <_ZN4RF247powerUpEv+0x28>)
     978:	f002 fc6a 	bl	3250 <__delay_usec_veneer>
}
     97c:	e7f3      	b.n	966 <_ZN4RF247powerUpEv+0xe>
     97e:	46c0      	nop			; (mov r8, r8)
     980:	00001388 	.word	0x00001388

00000984 <_ZN4RF249errNotifyEv>:
{
    #if defined(SERIAL_DEBUG) || defined(RF24_LINUX)
    printf_P(PSTR("RF24 HARDWARE FAIL: Radio not responding, verify pin connections, wiring, etc.\r\n"));
    #endif
    #if defined(FAILURE_HANDLING)
    failureDetected = 1;
     984:	2301      	movs	r3, #1
     986:	77c3      	strb	r3, [r0, #31]
    #else
    delay(5000);
    #endif
}
     988:	4770      	bx	lr

0000098a <_ZN4RF2414startFastWriteEPKvhbb>:
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24::startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{ //TMRh20
     98a:	b570      	push	{r4, r5, r6, lr}
     98c:	0004      	movs	r4, r0
     98e:	a804      	add	r0, sp, #16
     990:	7805      	ldrb	r5, [r0, #0]

    //write_payload( buf,len);
    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
     992:	2b00      	cmp	r3, #0
     994:	d006      	beq.n	9a4 <_ZN4RF2414startFastWriteEPKvhbb+0x1a>
     996:	23b0      	movs	r3, #176	; 0xb0
     998:	0020      	movs	r0, r4
     99a:	f7ff fee9 	bl	770 <_ZN4RF2413write_payloadEPKvhh>
    if (startTx) {
     99e:	2d00      	cmp	r5, #0
     9a0:	d102      	bne.n	9a8 <_ZN4RF2414startFastWriteEPKvhbb+0x1e>
        ce(HIGH);
    }

}
     9a2:	bd70      	pop	{r4, r5, r6, pc}
    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
     9a4:	23a0      	movs	r3, #160	; 0xa0
     9a6:	e7f7      	b.n	998 <_ZN4RF2414startFastWriteEPKvhbb+0xe>
        ce(HIGH);
     9a8:	2101      	movs	r1, #1
     9aa:	0020      	movs	r0, r4
     9ac:	f7ff fe58 	bl	660 <_ZN4RF242ceEb>
}
     9b0:	e7f7      	b.n	9a2 <_ZN4RF2414startFastWriteEPKvhbb+0x18>

000009b2 <_ZN4RF245writeEPKvhb>:
{
     9b2:	b530      	push	{r4, r5, lr}
     9b4:	b083      	sub	sp, #12
     9b6:	0004      	movs	r4, r0
    startFastWrite(buf, len, multicast);
     9b8:	2001      	movs	r0, #1
     9ba:	9000      	str	r0, [sp, #0]
     9bc:	0020      	movs	r0, r4
     9be:	f7ff ffe4 	bl	98a <_ZN4RF2414startFastWriteEPKvhbb>
    uint32_t timer = millis();
     9c2:	f000 fe95 	bl	16f0 <millis>
     9c6:	0005      	movs	r5, r0
    while (!(get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
     9c8:	0020      	movs	r0, r4
     9ca:	f7ff ff64 	bl	896 <_ZN4RF2410get_statusEv>
     9ce:	2330      	movs	r3, #48	; 0x30
     9d0:	4203      	tst	r3, r0
     9d2:	d10a      	bne.n	9ea <_ZN4RF245writeEPKvhb+0x38>
        if (millis() - timer > 95) {
     9d4:	f000 fe8c 	bl	16f0 <millis>
     9d8:	1b40      	subs	r0, r0, r5
     9da:	285f      	cmp	r0, #95	; 0x5f
     9dc:	d9f4      	bls.n	9c8 <_ZN4RF245writeEPKvhb+0x16>
            errNotify();
     9de:	0020      	movs	r0, r4
     9e0:	f7ff ffd0 	bl	984 <_ZN4RF249errNotifyEv>
            return 0;
     9e4:	2000      	movs	r0, #0
}
     9e6:	b003      	add	sp, #12
     9e8:	bd30      	pop	{r4, r5, pc}
    ce(LOW);
     9ea:	2100      	movs	r1, #0
     9ec:	0020      	movs	r0, r4
     9ee:	f7ff fe37 	bl	660 <_ZN4RF242ceEb>
    uint8_t status = write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     9f2:	2270      	movs	r2, #112	; 0x70
     9f4:	2107      	movs	r1, #7
     9f6:	0020      	movs	r0, r4
     9f8:	f7ff fea0 	bl	73c <_ZN4RF2414write_registerEhh>
    if (status & _BV(MAX_RT)) {
     9fc:	06c3      	lsls	r3, r0, #27
     9fe:	d401      	bmi.n	a04 <_ZN4RF245writeEPKvhb+0x52>
    return 1;
     a00:	2001      	movs	r0, #1
     a02:	e7f0      	b.n	9e6 <_ZN4RF245writeEPKvhb+0x34>
        flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
     a04:	0020      	movs	r0, r4
     a06:	f7ff ff41 	bl	88c <_ZN4RF248flush_txEv>
        return 0;
     a0a:	2000      	movs	r0, #0
     a0c:	e7eb      	b.n	9e6 <_ZN4RF245writeEPKvhb+0x34>

00000a0e <_ZN4RF245writeEPKvh>:
{
     a0e:	b510      	push	{r4, lr}
    return write(buf, len, 0);
     a10:	2300      	movs	r3, #0
     a12:	f7ff ffce 	bl	9b2 <_ZN4RF245writeEPKvhb>
}
     a16:	bd10      	pop	{r4, pc}

00000a18 <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     a18:	b570      	push	{r4, r5, r6, lr}
     a1a:	0004      	movs	r4, r0
     a1c:	000d      	movs	r5, r1
    if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY))) {
     a1e:	2117      	movs	r1, #23
     a20:	f7ff fe4c 	bl	6bc <_ZN4RF2413read_registerEh>
     a24:	07c3      	lsls	r3, r0, #31
     a26:	d501      	bpl.n	a2c <_ZN4RF249availableEPh+0x14>
            *pipe_num = (status >> RX_P_NO) & 0x07;
        }
        return 1;
    }

    return 0;
     a28:	2000      	movs	r0, #0


}
     a2a:	bd70      	pop	{r4, r5, r6, pc}
        if (pipe_num) {
     a2c:	2d00      	cmp	r5, #0
     a2e:	d006      	beq.n	a3e <_ZN4RF249availableEPh+0x26>
            uint8_t status = get_status();
     a30:	0020      	movs	r0, r4
     a32:	f7ff ff30 	bl	896 <_ZN4RF2410get_statusEv>
            *pipe_num = (status >> RX_P_NO) & 0x07;
     a36:	1043      	asrs	r3, r0, #1
     a38:	2007      	movs	r0, #7
     a3a:	4018      	ands	r0, r3
     a3c:	7028      	strb	r0, [r5, #0]
        return 1;
     a3e:	2001      	movs	r0, #1
     a40:	e7f3      	b.n	a2a <_ZN4RF249availableEPh+0x12>

00000a42 <_ZN4RF249availableEv>:
{
     a42:	b510      	push	{r4, lr}
    return available(0);
     a44:	2100      	movs	r1, #0
     a46:	f7ff ffe7 	bl	a18 <_ZN4RF249availableEPh>
}
     a4a:	bd10      	pop	{r4, pc}

00000a4c <_ZN4RF244readEPvh>:

/****************************************************************************/

void RF24::read(void* buf, uint8_t len)
{
     a4c:	b510      	push	{r4, lr}
     a4e:	0004      	movs	r4, r0

    // Fetch the payload
    read_payload(buf, len);
     a50:	f7ff feca 	bl	7e8 <_ZN4RF2412read_payloadEPvh>

    //Clear the two possible interrupt flags with one command
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
     a54:	2270      	movs	r2, #112	; 0x70
     a56:	2107      	movs	r1, #7
     a58:	0020      	movs	r0, r4
     a5a:	f7ff fe6f 	bl	73c <_ZN4RF2414write_registerEhh>

}
     a5e:	bd10      	pop	{r4, pc}

00000a60 <_ZN4RF2415openWritingPipeEy>:
}

/****************************************************************************/

void RF24::openWritingPipe(uint64_t value)
{
     a60:	b510      	push	{r4, lr}
     a62:	b082      	sub	sp, #8
     a64:	0004      	movs	r4, r0
     a66:	9200      	str	r2, [sp, #0]
     a68:	9301      	str	r3, [sp, #4]
    // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
    // expects it LSB first too, so we're good.

    write_register(RX_ADDR_P0, reinterpret_cast<uint8_t*>(&value), addr_width);
     a6a:	7f83      	ldrb	r3, [r0, #30]
     a6c:	466a      	mov	r2, sp
     a6e:	210a      	movs	r1, #10
     a70:	f7ff fe3a 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
    write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), addr_width);
     a74:	7fa3      	ldrb	r3, [r4, #30]
     a76:	466a      	mov	r2, sp
     a78:	2110      	movs	r1, #16
     a7a:	0020      	movs	r0, r4
     a7c:	f7ff fe34 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>


    //const uint8_t max_payload_size = 32;
    //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
    write_register(RX_PW_P0, payload_size);
     a80:	7de2      	ldrb	r2, [r4, #23]
     a82:	2111      	movs	r1, #17
     a84:	0020      	movs	r0, r4
     a86:	f7ff fe59 	bl	73c <_ZN4RF2414write_registerEhh>
}
     a8a:	b002      	add	sp, #8
     a8c:	bd10      	pop	{r4, pc}
     a8e:	Address 0x00000a8e is out of bounds.


00000a90 <_ZN4RF2415openReadingPipeEhy>:
PROGMEM = {RX_ADDR_P0, RX_ADDR_P1, RX_ADDR_P2, RX_ADDR_P3, RX_ADDR_P4, RX_ADDR_P5};
static const uint8_t child_payload_size[]
PROGMEM = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};

void RF24::openReadingPipe(uint8_t child, uint64_t address)
{
     a90:	b530      	push	{r4, r5, lr}
     a92:	b083      	sub	sp, #12
     a94:	0005      	movs	r5, r0
     a96:	000c      	movs	r4, r1
     a98:	9200      	str	r2, [sp, #0]
     a9a:	9301      	str	r3, [sp, #4]
    // If this is pipe 0, cache the address.  This is needed because
    // openWritingPipe() will overwrite the pipe 0 address, so
    // startListening() will have to restore it.
    if (child == 0) {
     a9c:	2900      	cmp	r1, #0
     a9e:	d021      	beq.n	ae4 <_ZN4RF2415openReadingPipeEhy+0x54>
        memcpy(pipe0_reading_address, &address, addr_width);
    }

    if (child <= 6) {
     aa0:	2c06      	cmp	r4, #6
     aa2:	d81d      	bhi.n	ae0 <_ZN4RF2415openReadingPipeEhy+0x50>
        // For pipes 2-5, only write the LSB
        if (child < 2) {
     aa4:	2c01      	cmp	r4, #1
     aa6:	d923      	bls.n	af0 <_ZN4RF2415openReadingPipeEhy+0x60>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
        } else {
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
     aa8:	4b15      	ldr	r3, [pc, #84]	; (b00 <_ZN4RF2415openReadingPipeEhy+0x70>)
     aaa:	5d19      	ldrb	r1, [r3, r4]
     aac:	2301      	movs	r3, #1
     aae:	466a      	mov	r2, sp
     ab0:	0028      	movs	r0, r5
     ab2:	f7ff fe19 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
        }

        write_register(pgm_read_byte(&child_payload_size[child]), payload_size);
     ab6:	7dea      	ldrb	r2, [r5, #23]
     ab8:	4b12      	ldr	r3, [pc, #72]	; (b04 <_ZN4RF2415openReadingPipeEhy+0x74>)
     aba:	5d19      	ldrb	r1, [r3, r4]
     abc:	0028      	movs	r0, r5
     abe:	f7ff fe3d 	bl	73c <_ZN4RF2414write_registerEhh>

        // Note it would be more efficient to set all of the bits for all open
        // pipes at once.  However, I thought it would make the calling code
        // more simple to do it this way.
        write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
     ac2:	2102      	movs	r1, #2
     ac4:	0028      	movs	r0, r5
     ac6:	f7ff fdf9 	bl	6bc <_ZN4RF2413read_registerEh>
     aca:	b242      	sxtb	r2, r0
     acc:	4b0e      	ldr	r3, [pc, #56]	; (b08 <_ZN4RF2415openReadingPipeEhy+0x78>)
     ace:	5d1b      	ldrb	r3, [r3, r4]
     ad0:	2001      	movs	r0, #1
     ad2:	4098      	lsls	r0, r3
     ad4:	4302      	orrs	r2, r0
     ad6:	b2d2      	uxtb	r2, r2
     ad8:	2102      	movs	r1, #2
     ada:	0028      	movs	r0, r5
     adc:	f7ff fe2e 	bl	73c <_ZN4RF2414write_registerEhh>
    }
}
     ae0:	b003      	add	sp, #12
     ae2:	bd30      	pop	{r4, r5, pc}
        memcpy(pipe0_reading_address, &address, addr_width);
     ae4:	7f82      	ldrb	r2, [r0, #30]
     ae6:	4669      	mov	r1, sp
     ae8:	3019      	adds	r0, #25
     aea:	f001 fbbf 	bl	226c <memcpy>
     aee:	e7d7      	b.n	aa0 <_ZN4RF2415openReadingPipeEhy+0x10>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
     af0:	7fab      	ldrb	r3, [r5, #30]
     af2:	4a03      	ldr	r2, [pc, #12]	; (b00 <_ZN4RF2415openReadingPipeEhy+0x70>)
     af4:	5d11      	ldrb	r1, [r2, r4]
     af6:	466a      	mov	r2, sp
     af8:	0028      	movs	r0, r5
     afa:	f7ff fdf5 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
     afe:	e7da      	b.n	ab6 <_ZN4RF2415openReadingPipeEhy+0x26>
     b00:	00002f48 	.word	0x00002f48
     b04:	00002f58 	.word	0x00002f58
     b08:	00002f50 	.word	0x00002f50

00000b0c <_ZN4RF2416closeReadingPipeEh>:
}

/****************************************************************************/

void RF24::closeReadingPipe(uint8_t pipe)
{
     b0c:	b570      	push	{r4, r5, r6, lr}
     b0e:	0004      	movs	r4, r0
     b10:	000d      	movs	r5, r1
    write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
     b12:	2102      	movs	r1, #2
     b14:	f7ff fdd2 	bl	6bc <_ZN4RF2413read_registerEh>
     b18:	b242      	sxtb	r2, r0
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <_ZN4RF2416closeReadingPipeEh+0x24>)
     b1c:	5d59      	ldrb	r1, [r3, r5]
     b1e:	2301      	movs	r3, #1
     b20:	408b      	lsls	r3, r1
     b22:	439a      	bics	r2, r3
     b24:	b2d2      	uxtb	r2, r2
     b26:	2102      	movs	r1, #2
     b28:	0020      	movs	r0, r4
     b2a:	f7ff fe07 	bl	73c <_ZN4RF2414write_registerEhh>
}
     b2e:	bd70      	pop	{r4, r5, r6, pc}
     b30:	00002f50 	.word	0x00002f50

00000b34 <_ZN4RF2414startListeningEv>:
{
     b34:	b510      	push	{r4, lr}
     b36:	0004      	movs	r4, r0
    powerUp();
     b38:	f7ff ff0e 	bl	958 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
     b3c:	2100      	movs	r1, #0
     b3e:	0020      	movs	r0, r4
     b40:	f7ff fdbc 	bl	6bc <_ZN4RF2413read_registerEh>
     b44:	2201      	movs	r2, #1
     b46:	4302      	orrs	r2, r0
     b48:	b2d2      	uxtb	r2, r2
     b4a:	2100      	movs	r1, #0
     b4c:	0020      	movs	r0, r4
     b4e:	f7ff fdf5 	bl	73c <_ZN4RF2414write_registerEhh>
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     b52:	2270      	movs	r2, #112	; 0x70
     b54:	2107      	movs	r1, #7
     b56:	0020      	movs	r0, r4
     b58:	f7ff fdf0 	bl	73c <_ZN4RF2414write_registerEhh>
    ce(HIGH);
     b5c:	2101      	movs	r1, #1
     b5e:	0020      	movs	r0, r4
     b60:	f7ff fd7e 	bl	660 <_ZN4RF242ceEb>
    if (pipe0_reading_address[0] > 0) {
     b64:	7e63      	ldrb	r3, [r4, #25]
     b66:	2b00      	cmp	r3, #0
     b68:	d00d      	beq.n	b86 <_ZN4RF2414startListeningEv+0x52>
        write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);
     b6a:	7fa3      	ldrb	r3, [r4, #30]
     b6c:	0022      	movs	r2, r4
     b6e:	3219      	adds	r2, #25
     b70:	210a      	movs	r1, #10
     b72:	0020      	movs	r0, r4
     b74:	f7ff fdb8 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
     b78:	211d      	movs	r1, #29
     b7a:	0020      	movs	r0, r4
     b7c:	f7ff fd9e 	bl	6bc <_ZN4RF2413read_registerEh>
     b80:	0783      	lsls	r3, r0, #30
     b82:	d405      	bmi.n	b90 <_ZN4RF2414startListeningEv+0x5c>
}
     b84:	bd10      	pop	{r4, pc}
        closeReadingPipe(0);
     b86:	2100      	movs	r1, #0
     b88:	0020      	movs	r0, r4
     b8a:	f7ff ffbf 	bl	b0c <_ZN4RF2416closeReadingPipeEh>
     b8e:	e7f3      	b.n	b78 <_ZN4RF2414startListeningEv+0x44>
        flush_tx();
     b90:	0020      	movs	r0, r4
     b92:	f7ff fe7b 	bl	88c <_ZN4RF248flush_txEv>
}
     b96:	e7f5      	b.n	b84 <_ZN4RF2414startListeningEv+0x50>

00000b98 <_ZN4RF2415toggle_featuresEv>:

/****************************************************************************/

void RF24::toggle_features(void)
{
     b98:	b510      	push	{r4, lr}
     b9a:	0004      	movs	r4, r0
    csn(LOW);
     b9c:	2100      	movs	r1, #0
     b9e:	f7ff fd45 	bl	62c <_ZN4RF243csnEb>
    beginTransaction();
    _SPI.Transfer(ACTIVATE);
     ba2:	2150      	movs	r1, #80	; 0x50
     ba4:	6820      	ldr	r0, [r4, #0]
     ba6:	f000 fcb9 	bl	151c <_ZN5spi_t8TransferEh>
    _SPI.Transfer(0x73);
     baa:	2173      	movs	r1, #115	; 0x73
     bac:	6820      	ldr	r0, [r4, #0]
     bae:	f000 fcb5 	bl	151c <_ZN5spi_t8TransferEh>
    csn(HIGH);
     bb2:	2101      	movs	r1, #1
     bb4:	0020      	movs	r0, r4
     bb6:	f7ff fd39 	bl	62c <_ZN4RF243csnEb>
    endTransaction();
}
     bba:	bd10      	pop	{r4, pc}

00000bbc <_ZN4RF2410setAutoAckEb>:
}

/****************************************************************************/

void RF24::setAutoAck(bool enable)
{
     bbc:	b510      	push	{r4, lr}
    if (enable) {
     bbe:	2900      	cmp	r1, #0
     bc0:	d004      	beq.n	bcc <_ZN4RF2410setAutoAckEb+0x10>
        write_register(EN_AA, 0x3F);
     bc2:	223f      	movs	r2, #63	; 0x3f
     bc4:	2101      	movs	r1, #1
     bc6:	f7ff fdb9 	bl	73c <_ZN4RF2414write_registerEhh>
    } else {
        write_register(EN_AA, 0);
    }
}
     bca:	bd10      	pop	{r4, pc}
        write_register(EN_AA, 0);
     bcc:	2200      	movs	r2, #0
     bce:	2101      	movs	r1, #1
     bd0:	f7ff fdb4 	bl	73c <_ZN4RF2414write_registerEhh>
}
     bd4:	e7f9      	b.n	bca <_ZN4RF2410setAutoAckEb+0xe>

00000bd6 <_ZN4RF2410setPALevelEh>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
     bd6:	b570      	push	{r4, r5, r6, lr}
     bd8:	0005      	movs	r5, r0
     bda:	000c      	movs	r4, r1

    uint8_t setup = read_register(RF_SETUP) & 0xF8;
     bdc:	2106      	movs	r1, #6
     bde:	f7ff fd6d 	bl	6bc <_ZN4RF2413read_registerEh>
     be2:	2307      	movs	r3, #7
     be4:	4398      	bics	r0, r3
     be6:	b2c0      	uxtb	r0, r0

    if (level > 3) {                        // If invalid level, go to max PA
     be8:	2c03      	cmp	r4, #3
     bea:	d809      	bhi.n	c00 <_ZN4RF2410setPALevelEh+0x2a>
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
    } else {
        level = (level << 1) + 1;            // Else set level as requested
     bec:	0064      	lsls	r4, r4, #1
     bee:	b2e2      	uxtb	r2, r4
     bf0:	3201      	adds	r2, #1
     bf2:	b2d2      	uxtb	r2, r2
    }

    write_register(RF_SETUP, setup |= level);    // Write it to the chip
     bf4:	4302      	orrs	r2, r0
     bf6:	2106      	movs	r1, #6
     bf8:	0028      	movs	r0, r5
     bfa:	f7ff fd9f 	bl	73c <_ZN4RF2414write_registerEhh>
}
     bfe:	bd70      	pop	{r4, r5, r6, pc}
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
     c00:	2207      	movs	r2, #7
     c02:	e7f7      	b.n	bf4 <_ZN4RF2410setPALevelEh+0x1e>

00000c04 <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     c04:	b570      	push	{r4, r5, r6, lr}
     c06:	0006      	movs	r6, r0
     c08:	000d      	movs	r5, r1
    bool result = false;
    uint8_t setup = read_register(RF_SETUP);
     c0a:	2106      	movs	r1, #6
     c0c:	f7ff fd56 	bl	6bc <_ZN4RF2413read_registerEh>

    // HIGH and LOW '00' is 1Mbs - our default
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
     c10:	2328      	movs	r3, #40	; 0x28
     c12:	4398      	bics	r0, r3
     c14:	b2c4      	uxtb	r4, r0

    #if !defined(F_CPU) || F_CPU > 20000000
    txDelay = 250;
     c16:	33d2      	adds	r3, #210	; 0xd2
     c18:	6233      	str	r3, [r6, #32]
    #else //16Mhz Arduino
    txDelay=85;
    #endif
    if (speed == RF24_250KBPS) {
     c1a:	2d02      	cmp	r5, #2
     c1c:	d00e      	beq.n	c3c <_ZN4RF2411setDataRateE15rf24_datarate_e+0x38>
        txDelay = 155;
        #endif
    } else {
        // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
        // Making it '01'
        if (speed == RF24_2MBPS) {
     c1e:	2d01      	cmp	r5, #1
     c20:	d012      	beq.n	c48 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
            #else // 16Mhz Arduino
            txDelay = 65;
            #endif
        }
    }
    write_register(RF_SETUP, setup);
     c22:	0022      	movs	r2, r4
     c24:	2106      	movs	r1, #6
     c26:	0030      	movs	r0, r6
     c28:	f7ff fd88 	bl	73c <_ZN4RF2414write_registerEhh>

    // Verify our result
    if (read_register(RF_SETUP) == setup) {
     c2c:	2106      	movs	r1, #6
     c2e:	0030      	movs	r0, r6
     c30:	f7ff fd44 	bl	6bc <_ZN4RF2413read_registerEh>
     c34:	42a0      	cmp	r0, r4
     c36:	d00d      	beq.n	c54 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x50>
    bool result = false;
     c38:	2000      	movs	r0, #0
        result = true;
    }
    return result;
}
     c3a:	bd70      	pop	{r4, r5, r6, pc}
        setup |= _BV(RF_DR_LOW);
     c3c:	2020      	movs	r0, #32
     c3e:	4304      	orrs	r4, r0
     c40:	b2e4      	uxtb	r4, r4
        txDelay = 450;
     c42:	33c8      	adds	r3, #200	; 0xc8
     c44:	6233      	str	r3, [r6, #32]
     c46:	e7ec      	b.n	c22 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1e>
            setup |= _BV(RF_DR_HIGH);
     c48:	2008      	movs	r0, #8
     c4a:	4304      	orrs	r4, r0
     c4c:	b2e4      	uxtb	r4, r4
            txDelay = 190;
     c4e:	23be      	movs	r3, #190	; 0xbe
     c50:	6233      	str	r3, [r6, #32]
     c52:	e7e6      	b.n	c22 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1e>
        result = true;
     c54:	2001      	movs	r0, #1
     c56:	e7f0      	b.n	c3a <_ZN4RF2411setDataRateE15rf24_datarate_e+0x36>

00000c58 <_ZN4RF2410setRetriesEhh>:
    write_register(NRF_CONFIG, disable);
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
     c58:	b510      	push	{r4, lr}
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
     c5a:	0109      	lsls	r1, r1, #4
     c5c:	230f      	movs	r3, #15
     c5e:	4013      	ands	r3, r2
     c60:	430b      	orrs	r3, r1
     c62:	b2da      	uxtb	r2, r3
     c64:	2104      	movs	r1, #4
     c66:	f7ff fd69 	bl	73c <_ZN4RF2414write_registerEhh>
}
     c6a:	bd10      	pop	{r4, pc}

00000c6c <_ZN4RF245beginEv>:
{
     c6c:	b570      	push	{r4, r5, r6, lr}
     c6e:	b084      	sub	sp, #16
     c70:	0004      	movs	r4, r0
    if (ce_pin != csn_pin) {
     c72:	4669      	mov	r1, sp
     c74:	0003      	movs	r3, r0
     c76:	330c      	adds	r3, #12
     c78:	000a      	movs	r2, r1
     c7a:	cb21      	ldmia	r3!, {r0, r5}
     c7c:	c221      	stmia	r2!, {r0, r5}
        return !operator==(b);
     c7e:	2208      	movs	r2, #8
     c80:	a802      	add	r0, sp, #8
     c82:	f001 faf3 	bl	226c <memcpy>
        return port == b.port && pin == b.pin;
     c86:	6863      	ldr	r3, [r4, #4]
     c88:	9a02      	ldr	r2, [sp, #8]
     c8a:	429a      	cmp	r2, r3
     c8c:	d100      	bne.n	c90 <_ZN4RF245beginEv+0x24>
     c8e:	e085      	b.n	d9c <_ZN4RF245beginEv+0x130>
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     c90:	68a1      	ldr	r1, [r4, #8]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     c92:	2201      	movs	r2, #1
     c94:	408a      	lsls	r2, r1
     c96:	01db      	lsls	r3, r3, #7
     c98:	4846      	ldr	r0, [pc, #280]	; (db4 <_ZN4RF245beginEv+0x148>)
     c9a:	4684      	mov	ip, r0
     c9c:	4463      	add	r3, ip
     c9e:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     ca0:	185b      	adds	r3, r3, r1
     ca2:	3340      	adds	r3, #64	; 0x40
     ca4:	781a      	ldrb	r2, [r3, #0]
     ca6:	2102      	movs	r1, #2
     ca8:	438a      	bics	r2, r1
     caa:	701a      	strb	r2, [r3, #0]
    if (ce_pin != csn_pin)
     cac:	4669      	mov	r1, sp
     cae:	0023      	movs	r3, r4
     cb0:	330c      	adds	r3, #12
     cb2:	000a      	movs	r2, r1
     cb4:	cb21      	ldmia	r3!, {r0, r5}
     cb6:	c221      	stmia	r2!, {r0, r5}
        return !operator==(b);
     cb8:	2208      	movs	r2, #8
     cba:	a802      	add	r0, sp, #8
     cbc:	f001 fad6 	bl	226c <memcpy>
        return port == b.port && pin == b.pin;
     cc0:	6863      	ldr	r3, [r4, #4]
     cc2:	9a02      	ldr	r2, [sp, #8]
     cc4:	4293      	cmp	r3, r2
     cc6:	d100      	bne.n	cca <_ZN4RF245beginEv+0x5e>
     cc8:	e06e      	b.n	da8 <_ZN4RF245beginEv+0x13c>
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     cca:	6921      	ldr	r1, [r4, #16]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     ccc:	2201      	movs	r2, #1
     cce:	408a      	lsls	r2, r1
     cd0:	68e3      	ldr	r3, [r4, #12]
     cd2:	01db      	lsls	r3, r3, #7
     cd4:	4837      	ldr	r0, [pc, #220]	; (db4 <_ZN4RF245beginEv+0x148>)
     cd6:	4684      	mov	ip, r0
     cd8:	4463      	add	r3, ip
     cda:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     cdc:	185b      	adds	r3, r3, r1
     cde:	3340      	adds	r3, #64	; 0x40
     ce0:	781a      	ldrb	r2, [r3, #0]
     ce2:	2102      	movs	r1, #2
     ce4:	438a      	bics	r2, r1
     ce6:	701a      	strb	r2, [r3, #0]
    ce(LOW);
     ce8:	2100      	movs	r1, #0
     cea:	0020      	movs	r0, r4
     cec:	f7ff fcb8 	bl	660 <_ZN4RF242ceEb>
    csn(HIGH);
     cf0:	2101      	movs	r1, #1
     cf2:	0020      	movs	r0, r4
     cf4:	f7ff fc9a 	bl	62c <_ZN4RF243csnEb>
    delay_usec(5000);
     cf8:	482f      	ldr	r0, [pc, #188]	; (db8 <_ZN4RF245beginEv+0x14c>)
     cfa:	f002 faa9 	bl	3250 <__delay_usec_veneer>
    write_register(NRF_CONFIG, 0x0C);
     cfe:	220c      	movs	r2, #12
     d00:	2100      	movs	r1, #0
     d02:	0020      	movs	r0, r4
     d04:	f7ff fd1a 	bl	73c <_ZN4RF2414write_registerEhh>
    setRetries(5, 15);
     d08:	220f      	movs	r2, #15
     d0a:	2105      	movs	r1, #5
     d0c:	0020      	movs	r0, r4
     d0e:	f7ff ffa3 	bl	c58 <_ZN4RF2410setRetriesEhh>
    if (setDataRate(RF24_250KBPS)) {
     d12:	2102      	movs	r1, #2
     d14:	0020      	movs	r0, r4
     d16:	f7ff ff75 	bl	c04 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     d1a:	2800      	cmp	r0, #0
     d1c:	d001      	beq.n	d22 <_ZN4RF245beginEv+0xb6>
        p_variant = true;
     d1e:	2301      	movs	r3, #1
     d20:	75a3      	strb	r3, [r4, #22]
    setup = read_register(RF_SETUP);
     d22:	2106      	movs	r1, #6
     d24:	0020      	movs	r0, r4
     d26:	f7ff fcc9 	bl	6bc <_ZN4RF2413read_registerEh>
     d2a:	0006      	movs	r6, r0
    setDataRate(RF24_1MBPS);
     d2c:	2100      	movs	r1, #0
     d2e:	0020      	movs	r0, r4
     d30:	f7ff ff68 	bl	c04 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    toggle_features();
     d34:	0020      	movs	r0, r4
     d36:	f7ff ff2f 	bl	b98 <_ZN4RF2415toggle_featuresEv>
    write_register(FEATURE, 0);
     d3a:	2200      	movs	r2, #0
     d3c:	211d      	movs	r1, #29
     d3e:	0020      	movs	r0, r4
     d40:	f7ff fcfc 	bl	73c <_ZN4RF2414write_registerEhh>
    write_register(DYNPD, 0);
     d44:	2200      	movs	r2, #0
     d46:	211c      	movs	r1, #28
     d48:	0020      	movs	r0, r4
     d4a:	f7ff fcf7 	bl	73c <_ZN4RF2414write_registerEhh>
    dynamic_payloads_enabled = false;
     d4e:	2500      	movs	r5, #0
     d50:	7625      	strb	r5, [r4, #24]
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     d52:	2270      	movs	r2, #112	; 0x70
     d54:	2107      	movs	r1, #7
     d56:	0020      	movs	r0, r4
     d58:	f7ff fcf0 	bl	73c <_ZN4RF2414write_registerEhh>
    setChannel(76);
     d5c:	214c      	movs	r1, #76	; 0x4c
     d5e:	0020      	movs	r0, r4
     d60:	f7ff fdbd 	bl	8de <_ZN4RF2410setChannelEh>
    flush_rx();
     d64:	0020      	movs	r0, r4
     d66:	f7ff fd8c 	bl	882 <_ZN4RF248flush_rxEv>
    flush_tx();
     d6a:	0020      	movs	r0, r4
     d6c:	f7ff fd8e 	bl	88c <_ZN4RF248flush_txEv>
    powerUp(); //Power up by default when begin() is called
     d70:	0020      	movs	r0, r4
     d72:	f7ff fdf1 	bl	958 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
     d76:	2100      	movs	r1, #0
     d78:	0020      	movs	r0, r4
     d7a:	f7ff fc9f 	bl	6bc <_ZN4RF2413read_registerEh>
     d7e:	2301      	movs	r3, #1
     d80:	4398      	bics	r0, r3
     d82:	b2c2      	uxtb	r2, r0
     d84:	2100      	movs	r1, #0
     d86:	0020      	movs	r0, r4
     d88:	f7ff fcd8 	bl	73c <_ZN4RF2414write_registerEhh>
    return (setup != 0 && setup != 0xff);
     d8c:	3e01      	subs	r6, #1
     d8e:	b2f6      	uxtb	r6, r6
     d90:	23fd      	movs	r3, #253	; 0xfd
     d92:	42b3      	cmp	r3, r6
     d94:	416d      	adcs	r5, r5
     d96:	b2e8      	uxtb	r0, r5
}
     d98:	b004      	add	sp, #16
     d9a:	bd70      	pop	{r4, r5, r6, pc}
        return port == b.port && pin == b.pin;
     d9c:	68a2      	ldr	r2, [r4, #8]
     d9e:	9903      	ldr	r1, [sp, #12]
     da0:	428a      	cmp	r2, r1
     da2:	d000      	beq.n	da6 <_ZN4RF245beginEv+0x13a>
     da4:	e774      	b.n	c90 <_ZN4RF245beginEv+0x24>
     da6:	e781      	b.n	cac <_ZN4RF245beginEv+0x40>
     da8:	68a3      	ldr	r3, [r4, #8]
     daa:	9a03      	ldr	r2, [sp, #12]
     dac:	4293      	cmp	r3, r2
     dae:	d000      	beq.n	db2 <_ZN4RF245beginEv+0x146>
     db0:	e78b      	b.n	cca <_ZN4RF245beginEv+0x5e>
     db2:	e799      	b.n	ce8 <_ZN4RF245beginEv+0x7c>
     db4:	41004400 	.word	0x41004400
     db8:	00001388 	.word	0x00001388

00000dbc <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_>:
        }
    }

    gsm.AddSMSFunc({ "info", cmd_info, 0 });
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, 0});
    gsm.AddSMSFunc({ "clear", [](GSM* gsm, const char* sender, const char* args) { net.m_nodes.clear(); }, 0});
     dbc:	b510      	push	{r4, lr}
    size_t size() {
        return m_size;
    }

    void clear() {
        if(m_data && m_size) free(m_data);
     dbe:	4b07      	ldr	r3, [pc, #28]	; (ddc <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x20>)
     dc0:	6b58      	ldr	r0, [r3, #52]	; 0x34
     dc2:	2800      	cmp	r0, #0
     dc4:	d002      	beq.n	dcc <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x10>
     dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     dc8:	2b00      	cmp	r3, #0
     dca:	d104      	bne.n	dd6 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x1a>
        m_data = NULL;
     dcc:	4b03      	ldr	r3, [pc, #12]	; (ddc <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x20>)
     dce:	2200      	movs	r2, #0
     dd0:	635a      	str	r2, [r3, #52]	; 0x34
        m_size = 0;
     dd2:	631a      	str	r2, [r3, #48]	; 0x30
     dd4:	bd10      	pop	{r4, pc}
        if(m_data && m_size) free(m_data);
     dd6:	f001 fa3f 	bl	2258 <free>
     dda:	e7f7      	b.n	dcc <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x10>
     ddc:	200000a8 	.word	0x200000a8

00000de0 <_ZN9SensornetD1Ev>:
	char name[8]; // 8 bytes
	uint8_t type; // 1 byte
	uint8_t data[22]; // total 32 bytes (max nrf24l01 packet size)
};

class Sensornet {
     de0:	b510      	push	{r4, lr}
     de2:	0004      	movs	r4, r0
        if(m_data) free(m_data);
     de4:	6b40      	ldr	r0, [r0, #52]	; 0x34
     de6:	2800      	cmp	r0, #0
     de8:	d001      	beq.n	dee <_ZN9SensornetD1Ev+0xe>
     dea:	f001 fa35 	bl	2258 <free>
     dee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     df0:	2800      	cmp	r0, #0
     df2:	d001      	beq.n	df8 <_ZN9SensornetD1Ev+0x18>
     df4:	f001 fa30 	bl	2258 <free>
     df8:	0020      	movs	r0, r4
     dfa:	bd10      	pop	{r4, pc}

00000dfc <_ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_>:
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, 0});
     dfc:	b510      	push	{r4, lr}
     dfe:	0013      	movs	r3, r2
     e00:	000a      	movs	r2, r1
     e02:	0001      	movs	r1, r0
     e04:	4801      	ldr	r0, [pc, #4]	; (e0c <_ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_+0x10>)
     e06:	f001 f849 	bl	1e9c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_>
     e0a:	bd10      	pop	{r4, pc}
     e0c:	200000a8 	.word	0x200000a8

00000e10 <_Z41__static_initialization_and_destruction_0ii>:
        
        gpio::toggle(led);
        //auto start = millis();
        //while(millis() - start < 500);
    }
     e10:	b570      	push	{r4, r5, r6, lr}
     e12:	b092      	sub	sp, #72	; 0x48
     e14:	2801      	cmp	r0, #1
     e16:	d001      	beq.n	e1c <_Z41__static_initialization_and_destruction_0ii+0xc>
     e18:	b012      	add	sp, #72	; 0x48
     e1a:	bd70      	pop	{r4, r5, r6, pc}
     e1c:	4b12      	ldr	r3, [pc, #72]	; (e68 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     e1e:	4299      	cmp	r1, r3
     e20:	d1fa      	bne.n	e18 <_Z41__static_initialization_and_destruction_0ii+0x8>
);
     e22:	2400      	movs	r4, #0
     e24:	4e11      	ldr	r6, [pc, #68]	; (e6c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     e26:	4b12      	ldr	r3, [pc, #72]	; (e70 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     e28:	0021      	movs	r1, r4
     e2a:	2202      	movs	r2, #2
     e2c:	0030      	movs	r0, r6
     e2e:	f7ff f95f 	bl	f0 <_ZN3GSMC1E6gpio_tP6uart_t>
static GSM gsm(
     e32:	4d10      	ldr	r5, [pc, #64]	; (e74 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     e34:	002a      	movs	r2, r5
     e36:	4910      	ldr	r1, [pc, #64]	; (e78 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     e38:	0030      	movs	r0, r6
     e3a:	f001 f90f 	bl	205c <__aeabi_atexit>
static Sensornet net(RF24({ GPIO_PORTA, 14 }, { GPIO_PORTA, 15 }, g_spi0));
     e3e:	4b0f      	ldr	r3, [pc, #60]	; (e7c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     e40:	9301      	str	r3, [sp, #4]
     e42:	230f      	movs	r3, #15
     e44:	9300      	str	r3, [sp, #0]
     e46:	0023      	movs	r3, r4
     e48:	0021      	movs	r1, r4
     e4a:	220e      	movs	r2, #14
     e4c:	a802      	add	r0, sp, #8
     e4e:	f7ff fd27 	bl	8a0 <_ZN4RF24C1E6gpio_tS0_R5spi_t>
     e52:	4c0b      	ldr	r4, [pc, #44]	; (e80 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     e54:	a902      	add	r1, sp, #8
     e56:	0020      	movs	r0, r4
     e58:	f000 fefa 	bl	1c50 <_ZN9SensornetC1ERK4RF24>
     e5c:	002a      	movs	r2, r5
     e5e:	4909      	ldr	r1, [pc, #36]	; (e84 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     e60:	0020      	movs	r0, r4
     e62:	f001 f8fb 	bl	205c <__aeabi_atexit>
     e66:	e7d7      	b.n	e18 <_Z41__static_initialization_and_destruction_0ii+0x8>
     e68:	0000ffff 	.word	0x0000ffff
     e6c:	20000094 	.word	0x20000094
     e70:	200002fc 	.word	0x200002fc
     e74:	2000000c 	.word	0x2000000c
     e78:	0000018d 	.word	0x0000018d
     e7c:	200000e0 	.word	0x200000e0
     e80:	200000a8 	.word	0x200000a8
     e84:	00000de1 	.word	0x00000de1

00000e88 <_ZN3Str7reserveEi>:
    }
}

// Reserve memory, preserving the current of the buffer
void    Str::reserve(int new_capacity)
{
     e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e8a:	0004      	movs	r4, r0
     e8c:	000e      	movs	r6, r1
    if (new_capacity <= Capacity)
     e8e:	6843      	ldr	r3, [r0, #4]
     e90:	02db      	lsls	r3, r3, #11
     e92:	0adb      	lsrs	r3, r3, #11
     e94:	428b      	cmp	r3, r1
     e96:	da20      	bge.n	eda <_ZN3Str7reserveEi+0x52>
        return;

    char* new_data;
    if (new_capacity < LocalBufSize)
     e98:	88c5      	ldrh	r5, [r0, #6]
     e9a:	046d      	lsls	r5, r5, #17
     e9c:	0dad      	lsrs	r5, r5, #22
     e9e:	428d      	cmp	r5, r1
     ea0:	dd1c      	ble.n	edc <_ZN3Str7reserveEi+0x54>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
     ea2:	0007      	movs	r7, r0
     ea4:	3708      	adds	r7, #8
        // Disowned or LocalBuf -> Heap
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    }

    // string in Data might be longer than new_capacity if it wasn't owned, don't copy too much
    strncpy(new_data, Data, new_capacity - 1);
     ea6:	1e6e      	subs	r6, r5, #1
     ea8:	0032      	movs	r2, r6
     eaa:	6821      	ldr	r1, [r4, #0]
     eac:	0038      	movs	r0, r7
     eae:	f001 fb27 	bl	2500 <strncpy>
    new_data[new_capacity - 1] = 0;
     eb2:	19be      	adds	r6, r7, r6
     eb4:	2300      	movs	r3, #0
     eb6:	7033      	strb	r3, [r6, #0]

    if (Owned && !is_using_local_buf())
     eb8:	2307      	movs	r3, #7
     eba:	56e3      	ldrsb	r3, [r4, r3]
     ebc:	2b00      	cmp	r3, #0
     ebe:	db13      	blt.n	ee8 <_ZN3Str7reserveEi+0x60>
        STR_MEMFREE(Data);

    Data = new_data;
     ec0:	6027      	str	r7, [r4, #0]
    Capacity = new_capacity;
     ec2:	02ed      	lsls	r5, r5, #11
     ec4:	0aed      	lsrs	r5, r5, #11
     ec6:	6863      	ldr	r3, [r4, #4]
     ec8:	0d5b      	lsrs	r3, r3, #21
     eca:	055b      	lsls	r3, r3, #21
     ecc:	431d      	orrs	r5, r3
     ece:	6065      	str	r5, [r4, #4]
    Owned = 1;
     ed0:	0e1b      	lsrs	r3, r3, #24
     ed2:	2280      	movs	r2, #128	; 0x80
     ed4:	4252      	negs	r2, r2
     ed6:	4313      	orrs	r3, r2
     ed8:	71e3      	strb	r3, [r4, #7]
}
     eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
     edc:	0008      	movs	r0, r1
     ede:	f001 f9b1 	bl	2244 <malloc>
     ee2:	0007      	movs	r7, r0
     ee4:	0035      	movs	r5, r6
     ee6:	e7de      	b.n	ea6 <_ZN3Str7reserveEi+0x1e>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     ee8:	6820      	ldr	r0, [r4, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
     eea:	0023      	movs	r3, r4
     eec:	3308      	adds	r3, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     eee:	4298      	cmp	r0, r3
     ef0:	d002      	beq.n	ef8 <_ZN3Str7reserveEi+0x70>
        STR_MEMFREE(Data);
     ef2:	f001 f9b1 	bl	2258 <free>
     ef6:	e7e3      	b.n	ec0 <_ZN3Str7reserveEi+0x38>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     ef8:	88e2      	ldrh	r2, [r4, #6]
     efa:	4b02      	ldr	r3, [pc, #8]	; (f04 <_ZN3Str7reserveEi+0x7c>)
     efc:	421a      	tst	r2, r3
     efe:	d1df      	bne.n	ec0 <_ZN3Str7reserveEi+0x38>
     f00:	e7f7      	b.n	ef2 <_ZN3Str7reserveEi+0x6a>
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	00007fe0 	.word	0x00007fe0

00000f08 <_ZN3Str15reserve_discardEi>:

// Reserve memory, discarding the current of the buffer (if we expect to be fully rewritten)
void    Str::reserve_discard(int new_capacity)
{
     f08:	b570      	push	{r4, r5, r6, lr}
     f0a:	0004      	movs	r4, r0
     f0c:	000d      	movs	r5, r1
    if (new_capacity <= Capacity)
     f0e:	6843      	ldr	r3, [r0, #4]
     f10:	02db      	lsls	r3, r3, #11
     f12:	0adb      	lsrs	r3, r3, #11
     f14:	428b      	cmp	r3, r1
     f16:	da15      	bge.n	f44 <_ZN3Str15reserve_discardEi+0x3c>
        return;

    if (Owned && !is_using_local_buf())
     f18:	2307      	movs	r3, #7
     f1a:	56c3      	ldrsb	r3, [r0, r3]
     f1c:	2b00      	cmp	r3, #0
     f1e:	db12      	blt.n	f46 <_ZN3Str15reserve_discardEi+0x3e>
        STR_MEMFREE(Data);

    if (new_capacity < LocalBufSize)
     f20:	88e3      	ldrh	r3, [r4, #6]
     f22:	045b      	lsls	r3, r3, #17
     f24:	0d9b      	lsrs	r3, r3, #22
     f26:	42ab      	cmp	r3, r5
     f28:	dd1a      	ble.n	f60 <_ZN3Str15reserve_discardEi+0x58>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
     f2a:	0022      	movs	r2, r4
     f2c:	3208      	adds	r2, #8
    {
        // Disowned -> LocalBuf
        Data = local_buf();
     f2e:	6022      	str	r2, [r4, #0]
        Capacity = LocalBufSize;
     f30:	6862      	ldr	r2, [r4, #4]
     f32:	0d52      	lsrs	r2, r2, #21
     f34:	0552      	lsls	r2, r2, #21
     f36:	4313      	orrs	r3, r2
     f38:	6063      	str	r3, [r4, #4]
    {
        // Disowned or LocalBuf -> Heap
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
        Capacity = new_capacity;
    }
    Owned = 1;
     f3a:	79e2      	ldrb	r2, [r4, #7]
     f3c:	2380      	movs	r3, #128	; 0x80
     f3e:	425b      	negs	r3, r3
     f40:	4313      	orrs	r3, r2
     f42:	71e3      	strb	r3, [r4, #7]
}
     f44:	bd70      	pop	{r4, r5, r6, pc}
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     f46:	6800      	ldr	r0, [r0, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
     f48:	0023      	movs	r3, r4
     f4a:	3308      	adds	r3, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     f4c:	4283      	cmp	r3, r0
     f4e:	d002      	beq.n	f56 <_ZN3Str15reserve_discardEi+0x4e>
        STR_MEMFREE(Data);
     f50:	f001 f982 	bl	2258 <free>
     f54:	e7e4      	b.n	f20 <_ZN3Str15reserve_discardEi+0x18>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     f56:	88e2      	ldrh	r2, [r4, #6]
     f58:	4b07      	ldr	r3, [pc, #28]	; (f78 <_ZN3Str15reserve_discardEi+0x70>)
     f5a:	421a      	tst	r2, r3
     f5c:	d1e0      	bne.n	f20 <_ZN3Str15reserve_discardEi+0x18>
     f5e:	e7f7      	b.n	f50 <_ZN3Str15reserve_discardEi+0x48>
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
     f60:	0028      	movs	r0, r5
     f62:	f001 f96f 	bl	2244 <malloc>
     f66:	6020      	str	r0, [r4, #0]
        Capacity = new_capacity;
     f68:	02ed      	lsls	r5, r5, #11
     f6a:	0aed      	lsrs	r5, r5, #11
     f6c:	6863      	ldr	r3, [r4, #4]
     f6e:	0d59      	lsrs	r1, r3, #21
     f70:	0549      	lsls	r1, r1, #21
     f72:	430d      	orrs	r5, r1
     f74:	6065      	str	r5, [r4, #4]
     f76:	e7e0      	b.n	f3a <_ZN3Str15reserve_discardEi+0x32>
     f78:	00007fe0 	.word	0x00007fe0

00000f7c <_ZN3Str13appendfv_fromEiPKcSt9__va_list>:
    return add_len;
}

// FIXME: merge setfv() and appendfv()?
int     Str::appendfv_from(int idx, const char* fmt, va_list args)
{
     f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f7e:	b083      	sub	sp, #12
     f80:	0005      	movs	r5, r0
     f82:	000e      	movs	r6, r1
     f84:	0017      	movs	r7, r2
    // Needed for portability on platforms where va_list are passed by reference and modified by functions
    va_list args2;
    va_copy(args2, args);
     f86:	9301      	str	r3, [sp, #4]
    if (Capacity < idx + add_len + 1)
        reserve(idx + add_len + 1);
    add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
#else
    // First try
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
     f88:	2207      	movs	r2, #7
     f8a:	5682      	ldrsb	r2, [r0, r2]
     f8c:	2a00      	cmp	r2, #0
     f8e:	db10      	blt.n	fb2 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x36>
     f90:	2000      	movs	r0, #0
     f92:	2a00      	cmp	r2, #0
     f94:	db10      	blt.n	fb8 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x3c>
     f96:	2100      	movs	r1, #0
     f98:	003a      	movs	r2, r7
     f9a:	f001 fbed 	bl	2778 <vsniprintf>
     f9e:	0004      	movs	r4, r0
    STR_ASSERT(add_len >= 0);

    if (Capacity < idx + add_len + 1)
     fa0:	1831      	adds	r1, r6, r0
     fa2:	686b      	ldr	r3, [r5, #4]
     fa4:	02db      	lsls	r3, r3, #11
     fa6:	0adb      	lsrs	r3, r3, #11
     fa8:	4299      	cmp	r1, r3
     faa:	da0a      	bge.n	fc2 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x46>
    }
#endif

    STR_ASSERT(Owned);
    return add_len;
}
     fac:	0020      	movs	r0, r4
     fae:	b003      	add	sp, #12
     fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
     fb2:	6801      	ldr	r1, [r0, #0]
     fb4:	1988      	adds	r0, r1, r6
     fb6:	e7ec      	b.n	f92 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x16>
     fb8:	686a      	ldr	r2, [r5, #4]
     fba:	02d1      	lsls	r1, r2, #11
     fbc:	0ac9      	lsrs	r1, r1, #11
     fbe:	1b89      	subs	r1, r1, r6
     fc0:	e7ea      	b.n	f98 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x1c>
        reserve(idx + add_len + 1);
     fc2:	3101      	adds	r1, #1
     fc4:	0028      	movs	r0, r5
     fc6:	f7ff ff5f 	bl	e88 <_ZN3Str7reserveEi>
        add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
     fca:	6828      	ldr	r0, [r5, #0]
     fcc:	1c61      	adds	r1, r4, #1
     fce:	1980      	adds	r0, r0, r6
     fd0:	9b01      	ldr	r3, [sp, #4]
     fd2:	003a      	movs	r2, r7
     fd4:	f001 fbd0 	bl	2778 <vsniprintf>
     fd8:	0004      	movs	r4, r0
    return add_len;
     fda:	e7e7      	b.n	fac <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x30>

00000fdc <_ZN3Str8appendfvEPKcSt9__va_list>:
    int cur_len = length();
    return append_from(cur_len, s, s_end);
}

int     Str::appendfv(const char* fmt, va_list args)
{
     fdc:	b570      	push	{r4, r5, r6, lr}
     fde:	0004      	movs	r4, r0
     fe0:	000d      	movs	r5, r1
     fe2:	0016      	movs	r6, r2
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
     fe4:	6800      	ldr	r0, [r0, #0]
     fe6:	f001 fa73 	bl	24d0 <strlen>
     fea:	0001      	movs	r1, r0
    int cur_len = length();
    return appendfv_from(cur_len, fmt, args);
     fec:	0033      	movs	r3, r6
     fee:	002a      	movs	r2, r5
     ff0:	0020      	movs	r0, r4
     ff2:	f7ff ffc3 	bl	f7c <_ZN3Str13appendfv_fromEiPKcSt9__va_list>
}
     ff6:	bd70      	pop	{r4, r5, r6, pc}

00000ff8 <_ZN3Str7appendfEPKcz>:

int     Str::appendf(const char* fmt, ...)
{
     ff8:	b40e      	push	{r1, r2, r3}
     ffa:	b500      	push	{lr}
     ffc:	b082      	sub	sp, #8
     ffe:	aa03      	add	r2, sp, #12
    1000:	ca02      	ldmia	r2!, {r1}
    va_list args;
    va_start(args, fmt);
    1002:	9201      	str	r2, [sp, #4]
    int len = appendfv(fmt, args);
    1004:	f7ff ffea 	bl	fdc <_ZN3Str8appendfvEPKcSt9__va_list>
    va_end(args);
    return len;
}
    1008:	b002      	add	sp, #8
    100a:	bc08      	pop	{r3}
    100c:	b003      	add	sp, #12
    100e:	4718      	bx	r3

00001010 <_ZL8cmd_infoP3GSMPKcS2_>:
static void cmd_info(GSM* gsm, const char* sender, const char* args) {
    1010:	b5f0      	push	{r4, r5, r6, r7, lr}
    1012:	46d6      	mov	lr, sl
    1014:	464f      	mov	r7, r9
    1016:	4646      	mov	r6, r8
    1018:	b5c0      	push	{r6, r7, lr}
    101a:	b084      	sub	sp, #16
    101c:	4681      	mov	r9, r0
    101e:	4688      	mov	r8, r1
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
    1020:	aa02      	add	r2, sp, #8
    1022:	4b3c      	ldr	r3, [pc, #240]	; (1114 <_ZL8cmd_infoP3GSMPKcS2_+0x104>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	9302      	str	r3, [sp, #8]
    Capacity = 0;
    1028:	9b03      	ldr	r3, [sp, #12]
    102a:	0d5b      	lsrs	r3, r3, #21
    102c:	0559      	lsls	r1, r3, #21
    102e:	9103      	str	r1, [sp, #12]
    LocalBufSize = 0;
    1030:	015b      	lsls	r3, r3, #5
    1032:	4939      	ldr	r1, [pc, #228]	; (1118 <_ZL8cmd_infoP3GSMPKcS2_+0x108>)
    1034:	400b      	ands	r3, r1
    1036:	80d3      	strh	r3, [r2, #6]
    Owned = 0;
    1038:	2300      	movs	r3, #0
    103a:	71d3      	strb	r3, [r2, #7]
    if ((int)Capacity < buf_len)
    103c:	9b03      	ldr	r3, [sp, #12]
    103e:	02db      	lsls	r3, r3, #11
    1040:	0adb      	lsrs	r3, r3, #11
    1042:	2b06      	cmp	r3, #6
    1044:	d912      	bls.n	106c <_ZL8cmd_infoP3GSMPKcS2_+0x5c>
    memcpy(Data, src, buf_len);
    1046:	ac02      	add	r4, sp, #8
    1048:	2207      	movs	r2, #7
    104a:	4934      	ldr	r1, [pc, #208]	; (111c <_ZL8cmd_infoP3GSMPKcS2_+0x10c>)
    104c:	9802      	ldr	r0, [sp, #8]
    104e:	f001 f90d 	bl	226c <memcpy>
    Owned = 1;
    1052:	79e2      	ldrb	r2, [r4, #7]
    1054:	2380      	movs	r3, #128	; 0x80
    1056:	425b      	negs	r3, r3
    1058:	4313      	orrs	r3, r2
    105a:	71e3      	strb	r3, [r4, #7]
        return m_data;
    105c:	4b30      	ldr	r3, [pc, #192]	; (1120 <_ZL8cmd_infoP3GSMPKcS2_+0x110>)
    105e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
        return m_data + m_size;
    1060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1062:	00de      	lsls	r6, r3, #3
    1064:	18f6      	adds	r6, r6, r3
    1066:	00b6      	lsls	r6, r6, #2
    1068:	19a6      	adds	r6, r4, r6
    106a:	e00b      	b.n	1084 <_ZL8cmd_infoP3GSMPKcS2_+0x74>
        reserve_discard(buf_len);
    106c:	2107      	movs	r1, #7
    106e:	0010      	movs	r0, r2
    1070:	f7ff ff4a 	bl	f08 <_ZN3Str15reserve_discardEi>
    1074:	e7e7      	b.n	1046 <_ZL8cmd_infoP3GSMPKcS2_+0x36>
                    ((Sensors::TempHum*)node.data.data)->temperature, ((Sensors::TempHum*)node.data.data)->humidity);
    1076:	8962      	ldrh	r2, [r4, #10]
    1078:	89a3      	ldrh	r3, [r4, #12]
                str.appendf(" Temperature + humidity sensor:\n  Temperature: %d\n  Humidity: %d\n",
    107a:	492a      	ldr	r1, [pc, #168]	; (1124 <_ZL8cmd_infoP3GSMPKcS2_+0x114>)
    107c:	a802      	add	r0, sp, #8
    107e:	f7ff ffbb 	bl	ff8 <_ZN3Str7appendfEPKcz>
    for(auto& node : net.m_nodes) {
    1082:	3424      	adds	r4, #36	; 0x24
    1084:	42b4      	cmp	r4, r6
    1086:	d028      	beq.n	10da <_ZL8cmd_infoP3GSMPKcS2_+0xca>
            node.data.id, node.data.name, node.data.type, (millis() - node.last_seen) / 1000);
    1088:	2700      	movs	r7, #0
    108a:	57e7      	ldrsb	r7, [r4, r7]
    108c:	1c65      	adds	r5, r4, #1
    108e:	7a63      	ldrb	r3, [r4, #9]
    1090:	469a      	mov	sl, r3
    1092:	f000 fb2d 	bl	16f0 <millis>
    1096:	6a23      	ldr	r3, [r4, #32]
    1098:	1ac0      	subs	r0, r0, r3
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    109a:	21fa      	movs	r1, #250	; 0xfa
    109c:	0089      	lsls	r1, r1, #2
    109e:	f000 ffe5 	bl	206c <__udivsi3>
    10a2:	9001      	str	r0, [sp, #4]
    10a4:	4653      	mov	r3, sl
    10a6:	9300      	str	r3, [sp, #0]
    10a8:	002b      	movs	r3, r5
    10aa:	003a      	movs	r2, r7
    10ac:	491e      	ldr	r1, [pc, #120]	; (1128 <_ZL8cmd_infoP3GSMPKcS2_+0x118>)
    10ae:	a802      	add	r0, sp, #8
    10b0:	f7ff ffa2 	bl	ff8 <_ZN3Str7appendfEPKcz>
        switch(node.data.type) {
    10b4:	7a63      	ldrb	r3, [r4, #9]
    10b6:	2b02      	cmp	r3, #2
    10b8:	d0dd      	beq.n	1076 <_ZL8cmd_infoP3GSMPKcS2_+0x66>
    10ba:	2b03      	cmp	r3, #3
    10bc:	d007      	beq.n	10ce <_ZL8cmd_infoP3GSMPKcS2_+0xbe>
    10be:	2b01      	cmp	r3, #1
    10c0:	d1df      	bne.n	1082 <_ZL8cmd_infoP3GSMPKcS2_+0x72>
                str.appendf(" Soil moisture sensor:\n  Moisture: %d\n", ((Sensors::Soil*)node.data.data)->moisture);
    10c2:	8962      	ldrh	r2, [r4, #10]
    10c4:	4919      	ldr	r1, [pc, #100]	; (112c <_ZL8cmd_infoP3GSMPKcS2_+0x11c>)
    10c6:	a802      	add	r0, sp, #8
    10c8:	f7ff ff96 	bl	ff8 <_ZN3Str7appendfEPKcz>
                break;
    10cc:	e7d9      	b.n	1082 <_ZL8cmd_infoP3GSMPKcS2_+0x72>
                    ((Sensors::Temp*)node.data.data)->temperature);
    10ce:	8962      	ldrh	r2, [r4, #10]
                str.appendf(" Temperature sensor:\n  Temperature: %d\n",
    10d0:	4917      	ldr	r1, [pc, #92]	; (1130 <_ZL8cmd_infoP3GSMPKcS2_+0x120>)
    10d2:	a802      	add	r0, sp, #8
    10d4:	f7ff ff90 	bl	ff8 <_ZN3Str7appendfEPKcz>
                break;
    10d8:	e7d3      	b.n	1082 <_ZL8cmd_infoP3GSMPKcS2_+0x72>
    gsm->SendSMS(sender, str.c_str());
    10da:	9a02      	ldr	r2, [sp, #8]
    10dc:	4641      	mov	r1, r8
    10de:	4648      	mov	r0, r9
    10e0:	f7ff fa42 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
        if (Owned && !is_using_local_buf())
    10e4:	ab02      	add	r3, sp, #8
    10e6:	79db      	ldrb	r3, [r3, #7]
    10e8:	b25b      	sxtb	r3, r3
    10ea:	2b00      	cmp	r3, #0
    10ec:	db05      	blt.n	10fa <_ZL8cmd_infoP3GSMPKcS2_+0xea>
}
    10ee:	b004      	add	sp, #16
    10f0:	bc1c      	pop	{r2, r3, r4}
    10f2:	4690      	mov	r8, r2
    10f4:	4699      	mov	r9, r3
    10f6:	46a2      	mov	sl, r4
    10f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    10fa:	9802      	ldr	r0, [sp, #8]
    10fc:	ab04      	add	r3, sp, #16
    10fe:	4298      	cmp	r0, r3
    1100:	d002      	beq.n	1108 <_ZL8cmd_infoP3GSMPKcS2_+0xf8>
            STR_MEMFREE(Data);
    1102:	f001 f8a9 	bl	2258 <free>
    1106:	e7f2      	b.n	10ee <_ZL8cmd_infoP3GSMPKcS2_+0xde>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1108:	ab02      	add	r3, sp, #8
    110a:	88da      	ldrh	r2, [r3, #6]
    110c:	4b09      	ldr	r3, [pc, #36]	; (1134 <_ZL8cmd_infoP3GSMPKcS2_+0x124>)
    110e:	421a      	tst	r2, r3
    1110:	d1ed      	bne.n	10ee <_ZL8cmd_infoP3GSMPKcS2_+0xde>
    1112:	e7f6      	b.n	1102 <_ZL8cmd_infoP3GSMPKcS2_+0xf2>
    1114:	20000010 	.word	0x20000010
    1118:	ffff801f 	.word	0xffff801f
    111c:	00002f68 	.word	0x00002f68
    1120:	200000a8 	.word	0x200000a8
    1124:	00002fd4 	.word	0x00002fd4
    1128:	00002f70 	.word	0x00002f70
    112c:	00002fac 	.word	0x00002fac
    1130:	00003018 	.word	0x00003018
    1134:	00007fe0 	.word	0x00007fe0

00001138 <_ZN6VectorI7SMSFuncE9push_backERKS0_>:
    void push_back(const T& elem) {
    1138:	b570      	push	{r4, r5, r6, lr}
    113a:	0004      	movs	r4, r0
    113c:	000d      	movs	r5, r1
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    113e:	6801      	ldr	r1, [r0, #0]
    1140:	2900      	cmp	r1, #0
    1142:	d016      	beq.n	1172 <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x3a>
    1144:	3101      	adds	r1, #1
    1146:	004b      	lsls	r3, r1, #1
    1148:	1859      	adds	r1, r3, r1
    114a:	0089      	lsls	r1, r1, #2
    114c:	6840      	ldr	r0, [r0, #4]
    114e:	f001 f93f 	bl	23d0 <realloc>
        if(!new_data) return;
    1152:	2800      	cmp	r0, #0
    1154:	d00c      	beq.n	1170 <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x38>
        m_data = new_data;
    1156:	6060      	str	r0, [r4, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
    1158:	6822      	ldr	r2, [r4, #0]
    115a:	0053      	lsls	r3, r2, #1
    115c:	189b      	adds	r3, r3, r2
    115e:	009b      	lsls	r3, r3, #2
    1160:	18c0      	adds	r0, r0, r3
    1162:	220c      	movs	r2, #12
    1164:	0029      	movs	r1, r5
    1166:	f001 f881 	bl	226c <memcpy>
        m_size++;
    116a:	6823      	ldr	r3, [r4, #0]
    116c:	3301      	adds	r3, #1
    116e:	6023      	str	r3, [r4, #0]
    }
    1170:	bd70      	pop	{r4, r5, r6, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1172:	200c      	movs	r0, #12
    1174:	f001 f866 	bl	2244 <malloc>
    1178:	e7eb      	b.n	1152 <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x1a>
    117a:	Address 0x0000117a is out of bounds.


0000117c <main>:
int main() {
    117c:	b570      	push	{r4, r5, r6, lr}
    117e:	b09c      	sub	sp, #112	; 0x70
    g_uart1.init({{GPIO_PORTA, 24}, {GPIO_PORTA, 25}, UART_SER1_TXPO_PA24, UART_SER1_RXPO_PA25}, CALC_BAUD(115200));
    1180:	a90e      	add	r1, sp, #56	; 0x38
    1182:	4c36      	ldr	r4, [pc, #216]	; (125c <main+0xe0>)
    1184:	000b      	movs	r3, r1
    1186:	0022      	movs	r2, r4
    1188:	ca61      	ldmia	r2!, {r0, r5, r6}
    118a:	c361      	stmia	r3!, {r0, r5, r6}
    118c:	ca21      	ldmia	r2!, {r0, r5}
    118e:	c321      	stmia	r3!, {r0, r5}
    1190:	4a33      	ldr	r2, [pc, #204]	; (1260 <main+0xe4>)
    1192:	4834      	ldr	r0, [pc, #208]	; (1264 <main+0xe8>)
    1194:	f000 faf2 	bl	177c <_ZN6uart_t4initERK13uart_pincfg_tt>
    g_spi0.Init({
    1198:	a806      	add	r0, sp, #24
    119a:	3414      	adds	r4, #20
    119c:	0002      	movs	r2, r0
    119e:	cc2a      	ldmia	r4!, {r1, r3, r5}
    11a0:	c22a      	stmia	r2!, {r1, r3, r5}
    11a2:	cc2a      	ldmia	r4!, {r1, r3, r5}
    11a4:	c22a      	stmia	r2!, {r1, r3, r5}
    11a6:	cc0a      	ldmia	r4!, {r1, r3}
    11a8:	c20a      	stmia	r2!, {r1, r3}
    11aa:	2314      	movs	r3, #20
    11ac:	9305      	str	r3, [sp, #20]
    11ae:	ab09      	add	r3, sp, #36	; 0x24
    11b0:	466a      	mov	r2, sp
    11b2:	cb32      	ldmia	r3!, {r1, r4, r5}
    11b4:	c232      	stmia	r2!, {r1, r4, r5}
    11b6:	cb12      	ldmia	r3!, {r1, r4}
    11b8:	c212      	stmia	r2!, {r1, r4}
    11ba:	9906      	ldr	r1, [sp, #24]
    11bc:	9a07      	ldr	r2, [sp, #28]
    11be:	9b08      	ldr	r3, [sp, #32]
    11c0:	4829      	ldr	r0, [pc, #164]	; (1268 <main+0xec>)
    11c2:	f000 f86d 	bl	12a0 <_ZN5spi_t4InitE12spi_pincfg_tt>
            PORT->Group[port].DIRSET.reg = 1 << pin;
    11c6:	4b29      	ldr	r3, [pc, #164]	; (126c <main+0xf0>)
    11c8:	2210      	movs	r2, #16
    11ca:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    11cc:	2144      	movs	r1, #68	; 0x44
    11ce:	5c5a      	ldrb	r2, [r3, r1]
    11d0:	2002      	movs	r0, #2
    11d2:	4382      	bics	r2, r0
    11d4:	545a      	strb	r2, [r3, r1]
    if(!net.begin()) {
    11d6:	4826      	ldr	r0, [pc, #152]	; (1270 <main+0xf4>)
    11d8:	f000 fd4a 	bl	1c70 <_ZN9Sensornet5beginEv>
    11dc:	2800      	cmp	r0, #0
    11de:	d106      	bne.n	11ee <main+0x72>

    inline void toggle(const int port, const int pin) {
        PORT->Group[port].OUTTGL.reg = 1 << pin;
    11e0:	4b22      	ldr	r3, [pc, #136]	; (126c <main+0xf0>)
    11e2:	2210      	movs	r2, #16
    11e4:	61da      	str	r2, [r3, #28]
            delay_usec(800000);
    11e6:	4823      	ldr	r0, [pc, #140]	; (1274 <main+0xf8>)
    11e8:	f002 f832 	bl	3250 <__delay_usec_veneer>
        while(1) {
    11ec:	e7f8      	b.n	11e0 <main+0x64>
    if(!gsm.Init()) {
    11ee:	4822      	ldr	r0, [pc, #136]	; (1278 <main+0xfc>)
    11f0:	f7ff f89c 	bl	32c <_ZN3GSM4InitEv>
    11f4:	2800      	cmp	r0, #0
    11f6:	d109      	bne.n	120c <main+0x90>
            net.Poll();
    11f8:	481d      	ldr	r0, [pc, #116]	; (1270 <main+0xf4>)
    11fa:	f000 fe38 	bl	1e6e <_ZN9Sensornet4PollEv>
    11fe:	4b1b      	ldr	r3, [pc, #108]	; (126c <main+0xf0>)
    1200:	2210      	movs	r2, #16
    1202:	61da      	str	r2, [r3, #28]
            delay_usec(200000);
    1204:	481d      	ldr	r0, [pc, #116]	; (127c <main+0x100>)
    1206:	f002 f823 	bl	3250 <__delay_usec_veneer>
        while(1) {
    120a:	e7f5      	b.n	11f8 <main+0x7c>
    gsm.AddSMSFunc({ "info", cmd_info, 0 });
    120c:	a913      	add	r1, sp, #76	; 0x4c
    120e:	4b13      	ldr	r3, [pc, #76]	; (125c <main+0xe0>)
    1210:	3334      	adds	r3, #52	; 0x34
    1212:	000a      	movs	r2, r1
    1214:	cb31      	ldmia	r3!, {r0, r4, r5}
    1216:	c231      	stmia	r2!, {r0, r4, r5}

    void ReadSMS(int index);
    void ProcessSMS(const char* text, const char* sender);
    bool SendSMS(const char* number, const char* text);

    void AddSMSFunc(const SMSFunc& func) { m_smsfuncs.push_back(func); }
    1218:	4c17      	ldr	r4, [pc, #92]	; (1278 <main+0xfc>)
    121a:	3408      	adds	r4, #8
    121c:	0020      	movs	r0, r4
    121e:	f7ff ff8b 	bl	1138 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, 0});
    1222:	a916      	add	r1, sp, #88	; 0x58
    1224:	4b16      	ldr	r3, [pc, #88]	; (1280 <main+0x104>)
    1226:	9316      	str	r3, [sp, #88]	; 0x58
    1228:	4b16      	ldr	r3, [pc, #88]	; (1284 <main+0x108>)
    122a:	604b      	str	r3, [r1, #4]
    122c:	2500      	movs	r5, #0
    122e:	720d      	strb	r5, [r1, #8]
    1230:	0020      	movs	r0, r4
    1232:	f7ff ff81 	bl	1138 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    gsm.AddSMSFunc({ "clear", [](GSM* gsm, const char* sender, const char* args) { net.m_nodes.clear(); }, 0});
    1236:	a919      	add	r1, sp, #100	; 0x64
    1238:	4b13      	ldr	r3, [pc, #76]	; (1288 <main+0x10c>)
    123a:	9319      	str	r3, [sp, #100]	; 0x64
    123c:	4b13      	ldr	r3, [pc, #76]	; (128c <main+0x110>)
    123e:	604b      	str	r3, [r1, #4]
    1240:	720d      	strb	r5, [r1, #8]
    1242:	0020      	movs	r0, r4
    1244:	f7ff ff78 	bl	1138 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
        gsm.Poll();
    1248:	480b      	ldr	r0, [pc, #44]	; (1278 <main+0xfc>)
    124a:	f7ff f939 	bl	4c0 <_ZN3GSM4PollEv>
        net.Poll();
    124e:	4808      	ldr	r0, [pc, #32]	; (1270 <main+0xf4>)
    1250:	f000 fe0d 	bl	1e6e <_ZN9Sensornet4PollEv>
    1254:	4b05      	ldr	r3, [pc, #20]	; (126c <main+0xf0>)
    1256:	2210      	movs	r2, #16
    1258:	61da      	str	r2, [r3, #28]
    125a:	e7f5      	b.n	1248 <main+0xcc>
    125c:	00002e34 	.word	0x00002e34
    1260:	0000f62b 	.word	0x0000f62b
    1264:	200002fc 	.word	0x200002fc
    1268:	200000e0 	.word	0x200000e0
    126c:	41004400 	.word	0x41004400
    1270:	200000a8 	.word	0x200000a8
    1274:	000c3500 	.word	0x000c3500
    1278:	20000094 	.word	0x20000094
    127c:	00030d40 	.word	0x00030d40
    1280:	00003040 	.word	0x00003040
    1284:	00000dfd 	.word	0x00000dfd
    1288:	00003048 	.word	0x00003048
    128c:	00000dbd 	.word	0x00000dbd

00001290 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE>:
    1290:	b510      	push	{r4, lr}
    1292:	4902      	ldr	r1, [pc, #8]	; (129c <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0xc>)
    1294:	2001      	movs	r0, #1
    1296:	f7ff fdbb 	bl	e10 <_Z41__static_initialization_and_destruction_0ii>
    129a:	bd10      	pop	{r4, pc}
    129c:	0000ffff 	.word	0x0000ffff

000012a0 <_ZN5spi_t4InitE12spi_pincfg_tt>:
#include "spi.h"

spi_t g_spi0(SERCOM0);
spi_t g_spi1(SERCOM1);

void spi_t::Init(spi_pincfg_t pincfg, uint16_t speed) {
    12a0:	b084      	sub	sp, #16
    12a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    12a4:	46c6      	mov	lr, r8
    12a6:	b500      	push	{lr}
    12a8:	9107      	str	r1, [sp, #28]
    12aa:	9208      	str	r2, [sp, #32]
    12ac:	9309      	str	r3, [sp, #36]	; 0x24
    12ae:	ab0f      	add	r3, sp, #60	; 0x3c
    12b0:	881b      	ldrh	r3, [r3, #0]
    12b2:	4698      	mov	r8, r3
    if(m_sercom == SERCOM1) {
    12b4:	4b83      	ldr	r3, [pc, #524]	; (14c4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x224>)
    12b6:	6802      	ldr	r2, [r0, #0]
    12b8:	429a      	cmp	r2, r3
    12ba:	d100      	bne.n	12be <_ZN5spi_t4InitE12spi_pincfg_tt+0x1e>
    12bc:	e0c1      	b.n	1442 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1a2>
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);*/
        PM->APBCMASK.bit.SERCOM1_ = 1;
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
        while(GCLK->STATUS.bit.SYNCBUSY);
    } else {
        PM->APBCMASK.bit.SERCOM0_ = 1;
    12be:	4a82      	ldr	r2, [pc, #520]	; (14c8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x228>)
    12c0:	6a13      	ldr	r3, [r2, #32]
    12c2:	2404      	movs	r4, #4
    12c4:	4323      	orrs	r3, r4
    12c6:	6213      	str	r3, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    12c8:	4b80      	ldr	r3, [pc, #512]	; (14cc <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    12ca:	4a81      	ldr	r2, [pc, #516]	; (14d0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x230>)
    12cc:	805a      	strh	r2, [r3, #2]
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
        while(GCLK->STATUS.bit.SYNCBUSY);
    12ce:	4b7f      	ldr	r3, [pc, #508]	; (14cc <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    12d0:	785b      	ldrb	r3, [r3, #1]
    12d2:	09db      	lsrs	r3, r3, #7
    12d4:	d1fb      	bne.n	12ce <_ZN5spi_t4InitE12spi_pincfg_tt+0x2e>
    }
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    12d6:	ab07      	add	r3, sp, #28
    12d8:	7e1b      	ldrb	r3, [r3, #24]
    12da:	2b00      	cmp	r3, #0
    12dc:	d100      	bne.n	12e0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x40>
    12de:	e0bd      	b.n	145c <_ZN5spi_t4InitE12spi_pincfg_tt+0x1bc>
    12e0:	2503      	movs	r5, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    12e2:	9a07      	ldr	r2, [sp, #28]
    12e4:	9c08      	ldr	r4, [sp, #32]
        if(pin & 1)
    12e6:	07e3      	lsls	r3, r4, #31
    12e8:	d400      	bmi.n	12ec <_ZN5spi_t4InitE12spi_pincfg_tt+0x4c>
    12ea:	e0b9      	b.n	1460 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1c0>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    12ec:	0fe3      	lsrs	r3, r4, #31
    12ee:	191b      	adds	r3, r3, r4
    12f0:	105f      	asrs	r7, r3, #1
    12f2:	260f      	movs	r6, #15
    12f4:	4035      	ands	r5, r6
    12f6:	01d3      	lsls	r3, r2, #7
    12f8:	4976      	ldr	r1, [pc, #472]	; (14d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    12fa:	468c      	mov	ip, r1
    12fc:	4463      	add	r3, ip
    12fe:	19db      	adds	r3, r3, r7
    1300:	3330      	adds	r3, #48	; 0x30
    1302:	781f      	ldrb	r7, [r3, #0]
    1304:	012d      	lsls	r5, r5, #4
    1306:	403e      	ands	r6, r7
    1308:	432e      	orrs	r6, r5
    130a:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    130c:	01d3      	lsls	r3, r2, #7
    130e:	4a71      	ldr	r2, [pc, #452]	; (14d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1310:	4694      	mov	ip, r2
    1312:	4463      	add	r3, ip
    1314:	191b      	adds	r3, r3, r4
    1316:	3340      	adds	r3, #64	; 0x40
    1318:	781a      	ldrb	r2, [r3, #0]
    131a:	2401      	movs	r4, #1
    131c:	4322      	orrs	r2, r4
    131e:	701a      	strb	r2, [r3, #0]
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1320:	ab07      	add	r3, sp, #28
    1322:	7e5b      	ldrb	r3, [r3, #25]
    1324:	2b00      	cmp	r3, #0
    1326:	d100      	bne.n	132a <_ZN5spi_t4InitE12spi_pincfg_tt+0x8a>
    1328:	e0a9      	b.n	147e <_ZN5spi_t4InitE12spi_pincfg_tt+0x1de>
    132a:	2503      	movs	r5, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    132c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    132e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        if(pin & 1)
    1330:	07e3      	lsls	r3, r4, #31
    1332:	d400      	bmi.n	1336 <_ZN5spi_t4InitE12spi_pincfg_tt+0x96>
    1334:	e0a5      	b.n	1482 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1e2>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1336:	0fe3      	lsrs	r3, r4, #31
    1338:	191b      	adds	r3, r3, r4
    133a:	105f      	asrs	r7, r3, #1
    133c:	260f      	movs	r6, #15
    133e:	4035      	ands	r5, r6
    1340:	01d3      	lsls	r3, r2, #7
    1342:	4964      	ldr	r1, [pc, #400]	; (14d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1344:	468c      	mov	ip, r1
    1346:	4463      	add	r3, ip
    1348:	19db      	adds	r3, r3, r7
    134a:	3330      	adds	r3, #48	; 0x30
    134c:	781f      	ldrb	r7, [r3, #0]
    134e:	012d      	lsls	r5, r5, #4
    1350:	403e      	ands	r6, r7
    1352:	432e      	orrs	r6, r5
    1354:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1356:	01d3      	lsls	r3, r2, #7
    1358:	4a5e      	ldr	r2, [pc, #376]	; (14d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    135a:	4694      	mov	ip, r2
    135c:	4463      	add	r3, ip
    135e:	191b      	adds	r3, r3, r4
    1360:	3340      	adds	r3, #64	; 0x40
    1362:	781a      	ldrb	r2, [r3, #0]
    1364:	2401      	movs	r4, #1
    1366:	4322      	orrs	r2, r4
    1368:	701a      	strb	r2, [r3, #0]
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    136a:	ab07      	add	r3, sp, #28
    136c:	7e9b      	ldrb	r3, [r3, #26]
    136e:	2b00      	cmp	r3, #0
    1370:	d100      	bne.n	1374 <_ZN5spi_t4InitE12spi_pincfg_tt+0xd4>
    1372:	e095      	b.n	14a0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x200>
    1374:	2503      	movs	r5, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1376:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1378:	9c0c      	ldr	r4, [sp, #48]	; 0x30
        if(pin & 1)
    137a:	07e3      	lsls	r3, r4, #31
    137c:	d400      	bmi.n	1380 <_ZN5spi_t4InitE12spi_pincfg_tt+0xe0>
    137e:	e091      	b.n	14a4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x204>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1380:	0fe3      	lsrs	r3, r4, #31
    1382:	191b      	adds	r3, r3, r4
    1384:	105f      	asrs	r7, r3, #1
    1386:	260f      	movs	r6, #15
    1388:	4035      	ands	r5, r6
    138a:	01d3      	lsls	r3, r2, #7
    138c:	4951      	ldr	r1, [pc, #324]	; (14d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    138e:	468c      	mov	ip, r1
    1390:	4463      	add	r3, ip
    1392:	19db      	adds	r3, r3, r7
    1394:	3330      	adds	r3, #48	; 0x30
    1396:	781f      	ldrb	r7, [r3, #0]
    1398:	012d      	lsls	r5, r5, #4
    139a:	403e      	ands	r6, r7
    139c:	432e      	orrs	r6, r5
    139e:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    13a0:	01d3      	lsls	r3, r2, #7
    13a2:	4a4c      	ldr	r2, [pc, #304]	; (14d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    13a4:	4694      	mov	ip, r2
    13a6:	4463      	add	r3, ip
    13a8:	191b      	adds	r3, r3, r4
    13aa:	3340      	adds	r3, #64	; 0x40
    13ac:	781a      	ldrb	r2, [r3, #0]
    13ae:	2401      	movs	r4, #1
    13b0:	4322      	orrs	r2, r4
    13b2:	701a      	strb	r2, [r3, #0]

    m_sercom->SPI.CTRLA.bit.ENABLE = 0;
    13b4:	6802      	ldr	r2, [r0, #0]
    13b6:	6813      	ldr	r3, [r2, #0]
    13b8:	2402      	movs	r4, #2
    13ba:	43a3      	bics	r3, r4
    13bc:	6013      	str	r3, [r2, #0]
	m_sercom->SPI.CTRLA.bit.SWRST = 1;
    13be:	6802      	ldr	r2, [r0, #0]
    13c0:	6813      	ldr	r3, [r2, #0]
    13c2:	3c01      	subs	r4, #1
    13c4:	4323      	orrs	r3, r4
    13c6:	6013      	str	r3, [r2, #0]
	while(m_sercom->SPI.CTRLA.bit.SWRST);
    13c8:	6803      	ldr	r3, [r0, #0]
    13ca:	681a      	ldr	r2, [r3, #0]
    13cc:	07d2      	lsls	r2, r2, #31
    13ce:	d4fb      	bmi.n	13c8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x128>

	m_sercom->SPI.CTRLA.bit.MODE = SERCOM_SPI_CTRLA_MODE_SPI_MASTER_Val;
    13d0:	681a      	ldr	r2, [r3, #0]
    13d2:	241c      	movs	r4, #28
    13d4:	43a2      	bics	r2, r4
    13d6:	3c10      	subs	r4, #16
    13d8:	4322      	orrs	r2, r4
    13da:	601a      	str	r2, [r3, #0]
	m_sercom->SPI.CTRLA.bit.DOPO = pincfg.mosisckpad;
    13dc:	6806      	ldr	r6, [r0, #0]
    13de:	ad07      	add	r5, sp, #28
    13e0:	7f2c      	ldrb	r4, [r5, #28]
    13e2:	2303      	movs	r3, #3
    13e4:	401c      	ands	r4, r3
    13e6:	6832      	ldr	r2, [r6, #0]
    13e8:	0424      	lsls	r4, r4, #16
    13ea:	4f3b      	ldr	r7, [pc, #236]	; (14d8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x238>)
    13ec:	403a      	ands	r2, r7
    13ee:	4322      	orrs	r2, r4
    13f0:	6032      	str	r2, [r6, #0]
	m_sercom->SPI.CTRLA.bit.DIPO = pincfg.misopad;
    13f2:	6804      	ldr	r4, [r0, #0]
    13f4:	7eed      	ldrb	r5, [r5, #27]
    13f6:	6822      	ldr	r2, [r4, #0]
    13f8:	402b      	ands	r3, r5
    13fa:	051b      	lsls	r3, r3, #20
    13fc:	4d37      	ldr	r5, [pc, #220]	; (14dc <_ZN5spi_t4InitE12spi_pincfg_tt+0x23c>)
    13fe:	402a      	ands	r2, r5
    1400:	4313      	orrs	r3, r2
    1402:	6023      	str	r3, [r4, #0]

    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    1404:	6803      	ldr	r3, [r0, #0]
    1406:	69da      	ldr	r2, [r3, #28]
    1408:	0752      	lsls	r2, r2, #29
    140a:	d4fb      	bmi.n	1404 <_ZN5spi_t4InitE12spi_pincfg_tt+0x164>
    /* SPI receiver is enabled */
    m_sercom->SPI.CTRLB.bit.RXEN = 1;
    140c:	685c      	ldr	r4, [r3, #4]
    140e:	2280      	movs	r2, #128	; 0x80
    1410:	0292      	lsls	r2, r2, #10
    1412:	4322      	orrs	r2, r4
    1414:	605a      	str	r2, [r3, #4]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    1416:	6803      	ldr	r3, [r0, #0]
    1418:	69da      	ldr	r2, [r3, #28]
    141a:	0752      	lsls	r2, r2, #29
    141c:	d4fb      	bmi.n	1416 <_ZN5spi_t4InitE12spi_pincfg_tt+0x176>

    /* baud register value corresponds to the SPI speed */
    m_sercom->SPI.BAUD.reg = speed;
    141e:	4642      	mov	r2, r8
    1420:	b2d1      	uxtb	r1, r2
    1422:	7319      	strb	r1, [r3, #12]
    /* SERCOM peripheral enabled */
    m_sercom->SPI.CTRLA.bit.ENABLE = 1;
    1424:	6802      	ldr	r2, [r0, #0]
    1426:	6813      	ldr	r3, [r2, #0]
    1428:	2102      	movs	r1, #2
    142a:	430b      	orrs	r3, r1
    142c:	6013      	str	r3, [r2, #0]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.ENABLE);
    142e:	6803      	ldr	r3, [r0, #0]
    1430:	69db      	ldr	r3, [r3, #28]
    1432:	079b      	lsls	r3, r3, #30
    1434:	d4fb      	bmi.n	142e <_ZN5spi_t4InitE12spi_pincfg_tt+0x18e>
}
    1436:	bc04      	pop	{r2}
    1438:	4690      	mov	r8, r2
    143a:	bcf0      	pop	{r4, r5, r6, r7}
    143c:	bc08      	pop	{r3}
    143e:	b004      	add	sp, #16
    1440:	4718      	bx	r3
        PM->APBCMASK.bit.SERCOM1_ = 1;
    1442:	4a21      	ldr	r2, [pc, #132]	; (14c8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x228>)
    1444:	6a13      	ldr	r3, [r2, #32]
    1446:	2408      	movs	r4, #8
    1448:	4323      	orrs	r3, r4
    144a:	6213      	str	r3, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    144c:	4b1f      	ldr	r3, [pc, #124]	; (14cc <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    144e:	4a24      	ldr	r2, [pc, #144]	; (14e0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x240>)
    1450:	805a      	strh	r2, [r3, #2]
        while(GCLK->STATUS.bit.SYNCBUSY);
    1452:	4b1e      	ldr	r3, [pc, #120]	; (14cc <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    1454:	785b      	ldrb	r3, [r3, #1]
    1456:	09db      	lsrs	r3, r3, #7
    1458:	d1fb      	bne.n	1452 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1b2>
    145a:	e73c      	b.n	12d6 <_ZN5spi_t4InitE12spi_pincfg_tt+0x36>
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    145c:	2502      	movs	r5, #2
    145e:	e740      	b.n	12e2 <_ZN5spi_t4InitE12spi_pincfg_tt+0x42>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    1460:	0fe3      	lsrs	r3, r4, #31
    1462:	191b      	adds	r3, r3, r4
    1464:	105e      	asrs	r6, r3, #1
    1466:	01d3      	lsls	r3, r2, #7
    1468:	491a      	ldr	r1, [pc, #104]	; (14d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    146a:	468c      	mov	ip, r1
    146c:	4463      	add	r3, ip
    146e:	199b      	adds	r3, r3, r6
    1470:	3330      	adds	r3, #48	; 0x30
    1472:	781e      	ldrb	r6, [r3, #0]
    1474:	270f      	movs	r7, #15
    1476:	43be      	bics	r6, r7
    1478:	4335      	orrs	r5, r6
    147a:	701d      	strb	r5, [r3, #0]
    147c:	e746      	b.n	130c <_ZN5spi_t4InitE12spi_pincfg_tt+0x6c>
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    147e:	2502      	movs	r5, #2
    1480:	e754      	b.n	132c <_ZN5spi_t4InitE12spi_pincfg_tt+0x8c>
    1482:	0fe3      	lsrs	r3, r4, #31
    1484:	191b      	adds	r3, r3, r4
    1486:	105e      	asrs	r6, r3, #1
    1488:	01d3      	lsls	r3, r2, #7
    148a:	4912      	ldr	r1, [pc, #72]	; (14d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    148c:	468c      	mov	ip, r1
    148e:	4463      	add	r3, ip
    1490:	199b      	adds	r3, r3, r6
    1492:	3330      	adds	r3, #48	; 0x30
    1494:	781e      	ldrb	r6, [r3, #0]
    1496:	270f      	movs	r7, #15
    1498:	43be      	bics	r6, r7
    149a:	4335      	orrs	r5, r6
    149c:	701d      	strb	r5, [r3, #0]
    149e:	e75a      	b.n	1356 <_ZN5spi_t4InitE12spi_pincfg_tt+0xb6>
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    14a0:	2502      	movs	r5, #2
    14a2:	e768      	b.n	1376 <_ZN5spi_t4InitE12spi_pincfg_tt+0xd6>
    14a4:	0fe3      	lsrs	r3, r4, #31
    14a6:	191b      	adds	r3, r3, r4
    14a8:	105e      	asrs	r6, r3, #1
    14aa:	01d3      	lsls	r3, r2, #7
    14ac:	4909      	ldr	r1, [pc, #36]	; (14d4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    14ae:	468c      	mov	ip, r1
    14b0:	4463      	add	r3, ip
    14b2:	199b      	adds	r3, r3, r6
    14b4:	3330      	adds	r3, #48	; 0x30
    14b6:	781e      	ldrb	r6, [r3, #0]
    14b8:	270f      	movs	r7, #15
    14ba:	43be      	bics	r6, r7
    14bc:	4335      	orrs	r5, r6
    14be:	701d      	strb	r5, [r3, #0]
    14c0:	e76e      	b.n	13a0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x100>
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	42000c00 	.word	0x42000c00
    14c8:	40000400 	.word	0x40000400
    14cc:	40000c00 	.word	0x40000c00
    14d0:	0000400e 	.word	0x0000400e
    14d4:	41004400 	.word	0x41004400
    14d8:	fffcffff 	.word	0xfffcffff
    14dc:	ffcfffff 	.word	0xffcfffff
    14e0:	0000400f 	.word	0x0000400f

000014e4 <_ZN5spi_tC1EP6Sercom>:

spi_t::spi_t(Sercom* sercom) {
    m_sercom = sercom;
    14e4:	6001      	str	r1, [r0, #0]
}
    14e6:	4770      	bx	lr

000014e8 <_Z41__static_initialization_and_destruction_0ii>:
    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    //m_sercom->SPI.INTFLAG.bit.RXC = 1; // Clear RXC flag by setting it to 1
    m_sercom->SPI.DATA.reg = b;
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
	return m_sercom->SPI.DATA.reg;
    14e8:	b510      	push	{r4, lr}
    14ea:	2801      	cmp	r0, #1
    14ec:	d000      	beq.n	14f0 <_Z41__static_initialization_and_destruction_0ii+0x8>
    14ee:	bd10      	pop	{r4, pc}
    14f0:	4b05      	ldr	r3, [pc, #20]	; (1508 <_Z41__static_initialization_and_destruction_0ii+0x20>)
    14f2:	4299      	cmp	r1, r3
    14f4:	d1fb      	bne.n	14ee <_Z41__static_initialization_and_destruction_0ii+0x6>
spi_t g_spi0(SERCOM0);
    14f6:	4905      	ldr	r1, [pc, #20]	; (150c <_Z41__static_initialization_and_destruction_0ii+0x24>)
    14f8:	4805      	ldr	r0, [pc, #20]	; (1510 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    14fa:	f7ff fff3 	bl	14e4 <_ZN5spi_tC1EP6Sercom>
spi_t g_spi1(SERCOM1);
    14fe:	4905      	ldr	r1, [pc, #20]	; (1514 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    1500:	4805      	ldr	r0, [pc, #20]	; (1518 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    1502:	f7ff ffef 	bl	14e4 <_ZN5spi_tC1EP6Sercom>
    1506:	e7f2      	b.n	14ee <_Z41__static_initialization_and_destruction_0ii+0x6>
    1508:	0000ffff 	.word	0x0000ffff
    150c:	42000800 	.word	0x42000800
    1510:	200000e0 	.word	0x200000e0
    1514:	42000c00 	.word	0x42000c00
    1518:	200000e4 	.word	0x200000e4

0000151c <_ZN5spi_t8TransferEh>:
    if(!m_sercom) return 0xFF;
    151c:	6802      	ldr	r2, [r0, #0]
    151e:	2a00      	cmp	r2, #0
    1520:	d00a      	beq.n	1538 <_ZN5spi_t8TransferEh+0x1c>
    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    1522:	7e13      	ldrb	r3, [r2, #24]
    1524:	07db      	lsls	r3, r3, #31
    1526:	d5fc      	bpl.n	1522 <_ZN5spi_t8TransferEh+0x6>
    m_sercom->SPI.DATA.reg = b;
    1528:	6291      	str	r1, [r2, #40]	; 0x28
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
    152a:	6803      	ldr	r3, [r0, #0]
    152c:	7e1a      	ldrb	r2, [r3, #24]
    152e:	0752      	lsls	r2, r2, #29
    1530:	d5fb      	bpl.n	152a <_ZN5spi_t8TransferEh+0xe>
	return m_sercom->SPI.DATA.reg;
    1532:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1534:	b2c0      	uxtb	r0, r0
    1536:	4770      	bx	lr
    if(!m_sercom) return 0xFF;
    1538:	20ff      	movs	r0, #255	; 0xff
    153a:	e7fc      	b.n	1536 <_ZN5spi_t8TransferEh+0x1a>

0000153c <_GLOBAL__sub_I_g_spi0>:
    153c:	b510      	push	{r4, lr}
    153e:	4902      	ldr	r1, [pc, #8]	; (1548 <_GLOBAL__sub_I_g_spi0+0xc>)
    1540:	2001      	movs	r0, #1
    1542:	f7ff ffd1 	bl	14e8 <_Z41__static_initialization_and_destruction_0ii>
    1546:	bd10      	pop	{r4, pc}
    1548:	0000ffff 	.word	0x0000ffff

0000154c <initializeSystemFor48MHz>:

static volatile uint64_t _cycles;

static void initializeSystemFor48MHz()
{
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    154c:	4a48      	ldr	r2, [pc, #288]	; (1670 <initializeSystemFor48MHz+0x124>)
    154e:	6a11      	ldr	r1, [r2, #32]
    1550:	23c0      	movs	r3, #192	; 0xc0
    1552:	009b      	lsls	r3, r3, #2
    1554:	430b      	orrs	r3, r1
    1556:	6213      	str	r3, [r2, #32]
	// Change the timing of the NVM access
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
    1558:	4946      	ldr	r1, [pc, #280]	; (1674 <initializeSystemFor48MHz+0x128>)
    155a:	684a      	ldr	r2, [r1, #4]
    155c:	231e      	movs	r3, #30
    155e:	439a      	bics	r2, r3
    1560:	3b1c      	subs	r3, #28
    1562:	4313      	orrs	r3, r2
    1564:	604b      	str	r3, [r1, #4]

	// Enable the bus clock for the clock system.
	PM->APBAMASK.bit.GCLK_ = 1;
    1566:	4a44      	ldr	r2, [pc, #272]	; (1678 <initializeSystemFor48MHz+0x12c>)
    1568:	6991      	ldr	r1, [r2, #24]
    156a:	2308      	movs	r3, #8
    156c:	430b      	orrs	r3, r1
    156e:	6193      	str	r3, [r2, #24]

	// Initialise the DFLL to run in closed-loop mode at 48MHz
	// 1. Make a software reset of the clock system.
	GCLK->CTRL.bit.SWRST = 1;
    1570:	4a42      	ldr	r2, [pc, #264]	; (167c <initializeSystemFor48MHz+0x130>)
    1572:	7813      	ldrb	r3, [r2, #0]
    1574:	2101      	movs	r1, #1
    1576:	430b      	orrs	r3, r1
    1578:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.bit.SWRST && GCLK->STATUS.bit.SYNCBUSY) {};
    157a:	4b40      	ldr	r3, [pc, #256]	; (167c <initializeSystemFor48MHz+0x130>)
    157c:	781b      	ldrb	r3, [r3, #0]
    157e:	07db      	lsls	r3, r3, #31
    1580:	d503      	bpl.n	158a <initializeSystemFor48MHz+0x3e>
    1582:	4b3e      	ldr	r3, [pc, #248]	; (167c <initializeSystemFor48MHz+0x130>)
    1584:	785b      	ldrb	r3, [r3, #1]
    1586:	09db      	lsrs	r3, r3, #7
    1588:	d1f7      	bne.n	157a <initializeSystemFor48MHz+0x2e>
	// 2. Make sure the OCM8M keeps running.
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
    158a:	4b39      	ldr	r3, [pc, #228]	; (1670 <initializeSystemFor48MHz+0x124>)
    158c:	6a19      	ldr	r1, [r3, #32]
    158e:	2280      	movs	r2, #128	; 0x80
    1590:	4391      	bics	r1, r2
    1592:	6219      	str	r1, [r3, #32]
	// 3. Set the division factor to 64, which reduces the 1MHz source to 15.625kHz
	GCLK->GENDIV.reg =
    1594:	4b39      	ldr	r3, [pc, #228]	; (167c <initializeSystemFor48MHz+0x130>)
    1596:	4a3a      	ldr	r2, [pc, #232]	; (1680 <initializeSystemFor48MHz+0x134>)
    1598:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(3) | // Select generator 3
	GCLK_GENDIV_DIV(64); // Set the division factor to 64
	// 4. Create generic clock generator 3 for the 15KHz signal of the DFLL
	GCLK->GENCTRL.reg =
    159a:	4a3a      	ldr	r2, [pc, #232]	; (1684 <initializeSystemFor48MHz+0x138>)
    159c:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(3) | // Select generator 3
	GCLK_GENCTRL_SRC_OSC8M | // Select source OSC8M
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    159e:	4b37      	ldr	r3, [pc, #220]	; (167c <initializeSystemFor48MHz+0x130>)
    15a0:	785b      	ldrb	r3, [r3, #1]
    15a2:	09db      	lsrs	r3, r3, #7
    15a4:	d1fb      	bne.n	159e <initializeSystemFor48MHz+0x52>
	// 5. Configure DFLL with the
	GCLK->CLKCTRL.reg =
    15a6:	4b35      	ldr	r3, [pc, #212]	; (167c <initializeSystemFor48MHz+0x130>)
    15a8:	2286      	movs	r2, #134	; 0x86
    15aa:	01d2      	lsls	r2, r2, #7
    15ac:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID_DFLL48 | // Target is DFLL48M
	GCLK_CLKCTRL_GEN(3) | // Select generator 3 as source.
	GCLK_CLKCTRL_CLKEN; // Enable the DFLL48M
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    15ae:	4b33      	ldr	r3, [pc, #204]	; (167c <initializeSystemFor48MHz+0x130>)
    15b0:	785b      	ldrb	r3, [r3, #1]
    15b2:	09db      	lsrs	r3, r3, #7
    15b4:	d1fb      	bne.n	15ae <initializeSystemFor48MHz+0x62>
	// 6. Workaround to be able to configure the DFLL.
	SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
    15b6:	4a2e      	ldr	r2, [pc, #184]	; (1670 <initializeSystemFor48MHz+0x124>)
    15b8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    15ba:	2180      	movs	r1, #128	; 0x80
    15bc:	438b      	bics	r3, r1
    15be:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    15c0:	4b2b      	ldr	r3, [pc, #172]	; (1670 <initializeSystemFor48MHz+0x124>)
    15c2:	68db      	ldr	r3, [r3, #12]
    15c4:	06db      	lsls	r3, r3, #27
    15c6:	d5fb      	bpl.n	15c0 <initializeSystemFor48MHz+0x74>
	// 7. Change the multiplication factor.
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
    15c8:	4b29      	ldr	r3, [pc, #164]	; (1670 <initializeSystemFor48MHz+0x124>)
    15ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    15cc:	0c12      	lsrs	r2, r2, #16
    15ce:	0412      	lsls	r2, r2, #16
    15d0:	21c0      	movs	r1, #192	; 0xc0
    15d2:	0109      	lsls	r1, r1, #4
    15d4:	4311      	orrs	r1, r2
    15d6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
    15d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    15da:	0192      	lsls	r2, r2, #6
    15dc:	0992      	lsrs	r2, r2, #6
    15de:	2180      	movs	r1, #128	; 0x80
    15e0:	04c9      	lsls	r1, r1, #19
    15e2:	4311      	orrs	r1, r2
    15e4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.FSTEP = 1; // Fine step = 1
    15e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    15e8:	4a27      	ldr	r2, [pc, #156]	; (1688 <initializeSystemFor48MHz+0x13c>)
    15ea:	4011      	ands	r1, r2
    15ec:	2280      	movs	r2, #128	; 0x80
    15ee:	0252      	lsls	r2, r2, #9
    15f0:	430a      	orrs	r2, r1
    15f2:	62da      	str	r2, [r3, #44]	; 0x2c
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    15f4:	4b1e      	ldr	r3, [pc, #120]	; (1670 <initializeSystemFor48MHz+0x124>)
    15f6:	68db      	ldr	r3, [r3, #12]
    15f8:	06db      	lsls	r3, r3, #27
    15fa:	d5fb      	bpl.n	15f4 <initializeSystemFor48MHz+0xa8>
	// 8. Start closed-loop mode
	SYSCTRL->DFLLCTRL.reg |=
    15fc:	4a1c      	ldr	r2, [pc, #112]	; (1670 <initializeSystemFor48MHz+0x124>)
    15fe:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1600:	2181      	movs	r1, #129	; 0x81
    1602:	0089      	lsls	r1, r1, #2
    1604:	430b      	orrs	r3, r1
    1606:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_MODE | // 1 = Closed loop mode.
	SYSCTRL_DFLLCTRL_QLDIS; // 1 = Disable quick lock.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1608:	4b19      	ldr	r3, [pc, #100]	; (1670 <initializeSystemFor48MHz+0x124>)
    160a:	68db      	ldr	r3, [r3, #12]
    160c:	06db      	lsls	r3, r3, #27
    160e:	d5fb      	bpl.n	1608 <initializeSystemFor48MHz+0xbc>
	// 9. Clear the lock flags.
	SYSCTRL->INTFLAG.bit.DFLLLCKC = 1;
    1610:	4b17      	ldr	r3, [pc, #92]	; (1670 <initializeSystemFor48MHz+0x124>)
    1612:	6899      	ldr	r1, [r3, #8]
    1614:	2280      	movs	r2, #128	; 0x80
    1616:	430a      	orrs	r2, r1
    1618:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLLCKF = 1;
    161a:	6899      	ldr	r1, [r3, #8]
    161c:	2240      	movs	r2, #64	; 0x40
    161e:	430a      	orrs	r2, r1
    1620:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLRDY = 1;
    1622:	6899      	ldr	r1, [r3, #8]
    1624:	2210      	movs	r2, #16
    1626:	430a      	orrs	r2, r1
    1628:	609a      	str	r2, [r3, #8]
	// 10. Enable the DFLL
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
    162a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    162c:	2102      	movs	r1, #2
    162e:	430a      	orrs	r2, r1
    1630:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1632:	4b0f      	ldr	r3, [pc, #60]	; (1670 <initializeSystemFor48MHz+0x124>)
    1634:	68db      	ldr	r3, [r3, #12]
    1636:	06db      	lsls	r3, r3, #27
    1638:	d5fb      	bpl.n	1632 <initializeSystemFor48MHz+0xe6>
	// 11. Wait for the fine and coarse locks.
	while (!SYSCTRL->INTFLAG.bit.DFLLLCKC && !SYSCTRL->INTFLAG.bit.DFLLLCKF) {};
    163a:	4b0d      	ldr	r3, [pc, #52]	; (1670 <initializeSystemFor48MHz+0x124>)
    163c:	689b      	ldr	r3, [r3, #8]
    163e:	061b      	lsls	r3, r3, #24
    1640:	d403      	bmi.n	164a <initializeSystemFor48MHz+0xfe>
    1642:	4b0b      	ldr	r3, [pc, #44]	; (1670 <initializeSystemFor48MHz+0x124>)
    1644:	689b      	ldr	r3, [r3, #8]
    1646:	065b      	lsls	r3, r3, #25
    1648:	d5f7      	bpl.n	163a <initializeSystemFor48MHz+0xee>
	// 12. Wait until the DFLL is ready.
	while (!SYSCTRL->INTFLAG.bit.DFLLRDY) {};
    164a:	4b09      	ldr	r3, [pc, #36]	; (1670 <initializeSystemFor48MHz+0x124>)
    164c:	689b      	ldr	r3, [r3, #8]
    164e:	06db      	lsls	r3, r3, #27
    1650:	d5fb      	bpl.n	164a <initializeSystemFor48MHz+0xfe>

	// Switch the main clock speed.
	// 1. Set the divisor of generic clock 0 to 0
	GCLK->GENDIV.reg =
    1652:	4b0a      	ldr	r3, [pc, #40]	; (167c <initializeSystemFor48MHz+0x130>)
    1654:	2200      	movs	r2, #0
    1656:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(0) | // Select generator 0
	GCLK_GENDIV_DIV(0);
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1658:	4b08      	ldr	r3, [pc, #32]	; (167c <initializeSystemFor48MHz+0x130>)
    165a:	785b      	ldrb	r3, [r3, #1]
    165c:	09db      	lsrs	r3, r3, #7
    165e:	d1fb      	bne.n	1658 <initializeSystemFor48MHz+0x10c>
	// 2. Switch generic clock 0 to the DFLL
	GCLK->GENCTRL.reg =
    1660:	4b06      	ldr	r3, [pc, #24]	; (167c <initializeSystemFor48MHz+0x130>)
    1662:	4a0a      	ldr	r2, [pc, #40]	; (168c <initializeSystemFor48MHz+0x140>)
    1664:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(0) | // Select generator 0
	GCLK_GENCTRL_SRC_DFLL48M | // Select source DFLL
	GCLK_GENCTRL_IDC | // Set improved duty cycle 50/50
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1666:	4b05      	ldr	r3, [pc, #20]	; (167c <initializeSystemFor48MHz+0x130>)
    1668:	785b      	ldrb	r3, [r3, #1]
    166a:	09db      	lsrs	r3, r3, #7
    166c:	d1fb      	bne.n	1666 <initializeSystemFor48MHz+0x11a>
}
    166e:	4770      	bx	lr
    1670:	40000800 	.word	0x40000800
    1674:	41004000 	.word	0x41004000
    1678:	40000400 	.word	0x40000400
    167c:	40000c00 	.word	0x40000c00
    1680:	00004003 	.word	0x00004003
    1684:	00010603 	.word	0x00010603
    1688:	fc00ffff 	.word	0xfc00ffff
    168c:	00030700 	.word	0x00030700

00001690 <systick_init>:

void systick_init() {
    1690:	b510      	push	{r4, lr}
	initializeSystemFor48MHz();
    1692:	f7ff ff5b 	bl	154c <initializeSystemFor48MHz>
	
	_cycles = 0;
    1696:	4b09      	ldr	r3, [pc, #36]	; (16bc <systick_init+0x2c>)
    1698:	2000      	movs	r0, #0
    169a:	2100      	movs	r1, #0
    169c:	6018      	str	r0, [r3, #0]
    169e:	6059      	str	r1, [r3, #4]

	SysTick->CTRL = 0;
    16a0:	4b07      	ldr	r3, [pc, #28]	; (16c0 <systick_init+0x30>)
    16a2:	2200      	movs	r2, #0
    16a4:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0xFFFFFF;
    16a6:	4a07      	ldr	r2, [pc, #28]	; (16c4 <systick_init+0x34>)
    16a8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0xFFFFFF;
    16aa:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
    16ac:	2207      	movs	r2, #7
    16ae:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    16b0:	4b05      	ldr	r3, [pc, #20]	; (16c8 <systick_init+0x38>)
    16b2:	2280      	movs	r2, #128	; 0x80
    16b4:	0612      	lsls	r2, r2, #24
    16b6:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(SysTick_IRQn);
}
    16b8:	bd10      	pop	{r4, pc}
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	200000e8 	.word	0x200000e8
    16c0:	e000e010 	.word	0xe000e010
    16c4:	00ffffff 	.word	0x00ffffff
    16c8:	e000e100 	.word	0xe000e100

000016cc <systick_cycles>:

uint64_t systick_cycles() {
	return _cycles + (0xFFFFFF - SysTick->VAL);
    16cc:	4b05      	ldr	r3, [pc, #20]	; (16e4 <systick_cycles+0x18>)
    16ce:	689b      	ldr	r3, [r3, #8]
    16d0:	4a05      	ldr	r2, [pc, #20]	; (16e8 <systick_cycles+0x1c>)
    16d2:	1ad0      	subs	r0, r2, r3
    16d4:	2100      	movs	r1, #0
    16d6:	4b05      	ldr	r3, [pc, #20]	; (16ec <systick_cycles+0x20>)
    16d8:	681a      	ldr	r2, [r3, #0]
    16da:	685b      	ldr	r3, [r3, #4]
    16dc:	1880      	adds	r0, r0, r2
    16de:	4159      	adcs	r1, r3
}
    16e0:	4770      	bx	lr
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	e000e010 	.word	0xe000e010
    16e8:	00ffffff 	.word	0x00ffffff
    16ec:	200000e8 	.word	0x200000e8

000016f0 <millis>:
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000000) + 0.99999999 );
	ticks >>= 35;
	return (uint32_t)ticks;
}

uint32_t millis() {
    16f0:	b510      	push	{r4, lr}
	// https://en.wikipedia.org/wiki/Division_algorithm#Division_by_a_constant
	uint64_t ticks = systick_cycles();
    16f2:	f7ff ffeb 	bl	16cc <systick_cycles>
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000) + 0.99999999 );
    16f6:	4a03      	ldr	r2, [pc, #12]	; (1704 <millis+0x14>)
    16f8:	2300      	movs	r3, #0
    16fa:	f000 fd43 	bl	2184 <__aeabi_lmul>
	ticks >>= 35;
    16fe:	08c8      	lsrs	r0, r1, #3
	return (uint32_t)ticks;
}
    1700:	bd10      	pop	{r4, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	000aec34 	.word	0x000aec34

00001708 <SysTick_Handler>:

void SysTick_Handler() {
    1708:	b530      	push	{r4, r5, lr}
	_cycles += 0x1000000;
    170a:	4905      	ldr	r1, [pc, #20]	; (1720 <SysTick_Handler+0x18>)
    170c:	680a      	ldr	r2, [r1, #0]
    170e:	684b      	ldr	r3, [r1, #4]
    1710:	2480      	movs	r4, #128	; 0x80
    1712:	0464      	lsls	r4, r4, #17
    1714:	2500      	movs	r5, #0
    1716:	1912      	adds	r2, r2, r4
    1718:	416b      	adcs	r3, r5
    171a:	600a      	str	r2, [r1, #0]
    171c:	604b      	str	r3, [r1, #4]
    171e:	bd30      	pop	{r4, r5, pc}
    1720:	200000e8 	.word	0x200000e8

00001724 <_Z41__static_initialization_and_destruction_0ii>:
    g_uart0.sercom_handler();
}

void SERCOM1_Handler() {
    g_uart1.sercom_handler();
    1724:	b570      	push	{r4, r5, r6, lr}
    1726:	2801      	cmp	r0, #1
    1728:	d000      	beq.n	172c <_Z41__static_initialization_and_destruction_0ii+0x8>
    172a:	bd70      	pop	{r4, r5, r6, pc}
    172c:	4b0c      	ldr	r3, [pc, #48]	; (1760 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    172e:	4299      	cmp	r1, r3
    1730:	d1fb      	bne.n	172a <_Z41__static_initialization_and_destruction_0ii+0x6>
    volatile bool m_rxfull = false;

    bool m_used = false;

public:
    uart_t(Sercom* sercom) { m_sercom = sercom; }
    1732:	4a0c      	ldr	r2, [pc, #48]	; (1764 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1734:	2581      	movs	r5, #129	; 0x81
    1736:	00ad      	lsls	r5, r5, #2
    1738:	2300      	movs	r3, #0
    173a:	5353      	strh	r3, [r2, r5]
    173c:	4c0a      	ldr	r4, [pc, #40]	; (1768 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    173e:	5313      	strh	r3, [r2, r4]
    1740:	2082      	movs	r0, #130	; 0x82
    1742:	0080      	lsls	r0, r0, #2
    1744:	5413      	strb	r3, [r2, r0]
    1746:	4909      	ldr	r1, [pc, #36]	; (176c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1748:	5453      	strb	r3, [r2, r1]
    174a:	4e09      	ldr	r6, [pc, #36]	; (1770 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    174c:	6016      	str	r6, [r2, #0]
    174e:	4a09      	ldr	r2, [pc, #36]	; (1774 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    1750:	5353      	strh	r3, [r2, r5]
    1752:	5313      	strh	r3, [r2, r4]
    1754:	5413      	strb	r3, [r2, r0]
    1756:	5453      	strb	r3, [r2, r1]
    1758:	4b07      	ldr	r3, [pc, #28]	; (1778 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    175a:	6013      	str	r3, [r2, #0]
    175c:	e7e5      	b.n	172a <_Z41__static_initialization_and_destruction_0ii+0x6>
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	0000ffff 	.word	0x0000ffff
    1764:	200000f0 	.word	0x200000f0
    1768:	00000206 	.word	0x00000206
    176c:	00000209 	.word	0x00000209
    1770:	42000800 	.word	0x42000800
    1774:	200002fc 	.word	0x200002fc
    1778:	42000c00 	.word	0x42000c00

0000177c <_ZN6uart_t4initERK13uart_pincfg_tt>:
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
    177c:	b5f0      	push	{r4, r5, r6, r7, lr}
    177e:	46ce      	mov	lr, r9
    1780:	4647      	mov	r7, r8
    1782:	b580      	push	{r7, lr}
    1784:	4691      	mov	r9, r2
    if(m_sercom == SERCOM1) {
    1786:	4b6c      	ldr	r3, [pc, #432]	; (1938 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
    1788:	6804      	ldr	r4, [r0, #0]
    178a:	429c      	cmp	r4, r3
    178c:	d100      	bne.n	1790 <_ZN6uart_t4initERK13uart_pincfg_tt+0x14>
    178e:	e09d      	b.n	18cc <_ZN6uart_t4initERK13uart_pincfg_tt+0x150>
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
    1790:	4c6a      	ldr	r4, [pc, #424]	; (193c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
    1792:	6a23      	ldr	r3, [r4, #32]
    1794:	2504      	movs	r5, #4
    1796:	432b      	orrs	r3, r5
    1798:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    179a:	4b69      	ldr	r3, [pc, #420]	; (1940 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
    179c:	4c69      	ldr	r4, [pc, #420]	; (1944 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c8>)
    179e:	805c      	strh	r4, [r3, #2]
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    17a0:	7c8b      	ldrb	r3, [r1, #18]
    17a2:	2b00      	cmp	r3, #0
    17a4:	d100      	bne.n	17a8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x2c>
    17a6:	e09a      	b.n	18de <_ZN6uart_t4initERK13uart_pincfg_tt+0x162>
    17a8:	2603      	movs	r6, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    17aa:	680c      	ldr	r4, [r1, #0]
    17ac:	684d      	ldr	r5, [r1, #4]
        if(pin & 1)
    17ae:	07eb      	lsls	r3, r5, #31
    17b0:	d400      	bmi.n	17b4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x38>
    17b2:	e096      	b.n	18e2 <_ZN6uart_t4initERK13uart_pincfg_tt+0x166>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    17b4:	0feb      	lsrs	r3, r5, #31
    17b6:	195b      	adds	r3, r3, r5
    17b8:	105b      	asrs	r3, r3, #1
    17ba:	469c      	mov	ip, r3
    17bc:	270f      	movs	r7, #15
    17be:	403e      	ands	r6, r7
    17c0:	01e3      	lsls	r3, r4, #7
    17c2:	4a61      	ldr	r2, [pc, #388]	; (1948 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    17c4:	4690      	mov	r8, r2
    17c6:	4443      	add	r3, r8
    17c8:	4463      	add	r3, ip
    17ca:	3330      	adds	r3, #48	; 0x30
    17cc:	781a      	ldrb	r2, [r3, #0]
    17ce:	0136      	lsls	r6, r6, #4
    17d0:	4017      	ands	r7, r2
    17d2:	4337      	orrs	r7, r6
    17d4:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    17d6:	01e3      	lsls	r3, r4, #7
    17d8:	4c5b      	ldr	r4, [pc, #364]	; (1948 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    17da:	46a4      	mov	ip, r4
    17dc:	4463      	add	r3, ip
    17de:	195b      	adds	r3, r3, r5
    17e0:	3340      	adds	r3, #64	; 0x40
    17e2:	781c      	ldrb	r4, [r3, #0]
    17e4:	2501      	movs	r5, #1
    17e6:	432c      	orrs	r4, r5
    17e8:	701c      	strb	r4, [r3, #0]
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    17ea:	7ccb      	ldrb	r3, [r1, #19]
    17ec:	2b00      	cmp	r3, #0
    17ee:	d100      	bne.n	17f2 <_ZN6uart_t4initERK13uart_pincfg_tt+0x76>
    17f0:	e086      	b.n	1900 <_ZN6uart_t4initERK13uart_pincfg_tt+0x184>
    17f2:	2603      	movs	r6, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    17f4:	688c      	ldr	r4, [r1, #8]
    17f6:	68cd      	ldr	r5, [r1, #12]
        if(pin & 1)
    17f8:	07eb      	lsls	r3, r5, #31
    17fa:	d400      	bmi.n	17fe <_ZN6uart_t4initERK13uart_pincfg_tt+0x82>
    17fc:	e082      	b.n	1904 <_ZN6uart_t4initERK13uart_pincfg_tt+0x188>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    17fe:	0feb      	lsrs	r3, r5, #31
    1800:	195b      	adds	r3, r3, r5
    1802:	105b      	asrs	r3, r3, #1
    1804:	469c      	mov	ip, r3
    1806:	270f      	movs	r7, #15
    1808:	403e      	ands	r6, r7
    180a:	01e3      	lsls	r3, r4, #7
    180c:	4a4e      	ldr	r2, [pc, #312]	; (1948 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    180e:	4690      	mov	r8, r2
    1810:	4443      	add	r3, r8
    1812:	4463      	add	r3, ip
    1814:	3330      	adds	r3, #48	; 0x30
    1816:	781a      	ldrb	r2, [r3, #0]
    1818:	0136      	lsls	r6, r6, #4
    181a:	4017      	ands	r7, r2
    181c:	4337      	orrs	r7, r6
    181e:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1820:	01e3      	lsls	r3, r4, #7
    1822:	4c49      	ldr	r4, [pc, #292]	; (1948 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1824:	46a4      	mov	ip, r4
    1826:	4463      	add	r3, ip
    1828:	195b      	adds	r3, r3, r5
    182a:	3340      	adds	r3, #64	; 0x40
    182c:	781c      	ldrb	r4, [r3, #0]
    182e:	2501      	movs	r5, #1
    1830:	432c      	orrs	r4, r5
    1832:	701c      	strb	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.ENABLE = 0;
    1834:	6804      	ldr	r4, [r0, #0]
    1836:	6823      	ldr	r3, [r4, #0]
    1838:	2502      	movs	r5, #2
    183a:	43ab      	bics	r3, r5
    183c:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.SWRST = 1;
    183e:	6804      	ldr	r4, [r0, #0]
    1840:	6823      	ldr	r3, [r4, #0]
    1842:	3d01      	subs	r5, #1
    1844:	432b      	orrs	r3, r5
    1846:	6023      	str	r3, [r4, #0]
    while(m_sercom->USART.CTRLA.bit.SWRST);
    1848:	6803      	ldr	r3, [r0, #0]
    184a:	681c      	ldr	r4, [r3, #0]
    184c:	07e4      	lsls	r4, r4, #31
    184e:	d4fb      	bmi.n	1848 <_ZN6uart_t4initERK13uart_pincfg_tt+0xcc>
    m_sercom->USART.CTRLA.bit.MODE = SERCOM_USART_CTRLA_MODE_USART_INT_CLK_Val;
    1850:	681c      	ldr	r4, [r3, #0]
    1852:	251c      	movs	r5, #28
    1854:	43ac      	bics	r4, r5
    1856:	3d18      	subs	r5, #24
    1858:	432c      	orrs	r4, r5
    185a:	601c      	str	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.DORD = 1;
    185c:	6804      	ldr	r4, [r0, #0]
    185e:	6825      	ldr	r5, [r4, #0]
    1860:	2380      	movs	r3, #128	; 0x80
    1862:	05db      	lsls	r3, r3, #23
    1864:	432b      	orrs	r3, r5
    1866:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.TXPO = pincfg.tx_pad;
    1868:	6806      	ldr	r6, [r0, #0]
    186a:	7c0d      	ldrb	r5, [r1, #16]
    186c:	2303      	movs	r3, #3
    186e:	401d      	ands	r5, r3
    1870:	6834      	ldr	r4, [r6, #0]
    1872:	042d      	lsls	r5, r5, #16
    1874:	4f35      	ldr	r7, [pc, #212]	; (194c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d0>)
    1876:	403c      	ands	r4, r7
    1878:	432c      	orrs	r4, r5
    187a:	6034      	str	r4, [r6, #0]
    m_sercom->USART.CTRLA.bit.RXPO = pincfg.rx_pad;
    187c:	6804      	ldr	r4, [r0, #0]
    187e:	7c4d      	ldrb	r5, [r1, #17]
    1880:	6821      	ldr	r1, [r4, #0]
    1882:	402b      	ands	r3, r5
    1884:	051b      	lsls	r3, r3, #20
    1886:	4d32      	ldr	r5, [pc, #200]	; (1950 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d4>)
    1888:	4029      	ands	r1, r5
    188a:	430b      	orrs	r3, r1
    188c:	6023      	str	r3, [r4, #0]
    m_sercom->USART.BAUD.reg = speed;
    188e:	6803      	ldr	r3, [r0, #0]
    1890:	464a      	mov	r2, r9
    1892:	819a      	strh	r2, [r3, #12]
    m_sercom->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
    1894:	6803      	ldr	r3, [r0, #0]
    1896:	22c0      	movs	r2, #192	; 0xc0
    1898:	0292      	lsls	r2, r2, #10
    189a:	605a      	str	r2, [r3, #4]
    m_sercom->USART.INTENSET.bit.RXC = 1;
    189c:	6802      	ldr	r2, [r0, #0]
    189e:	7d93      	ldrb	r3, [r2, #22]
    18a0:	2104      	movs	r1, #4
    18a2:	430b      	orrs	r3, r1
    18a4:	7593      	strb	r3, [r2, #22]
    if(m_sercom == SERCOM0)
    18a6:	6803      	ldr	r3, [r0, #0]
    18a8:	4a2a      	ldr	r2, [pc, #168]	; (1954 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d8>)
    18aa:	4293      	cmp	r3, r2
    18ac:	d039      	beq.n	1922 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1a6>
    else if(m_sercom == SERCOM1)
    18ae:	4a22      	ldr	r2, [pc, #136]	; (1938 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
    18b0:	4293      	cmp	r3, r2
    18b2:	d03b      	beq.n	192c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1b0>
    m_sercom->USART.CTRLA.bit.ENABLE = 1;
    18b4:	6802      	ldr	r2, [r0, #0]
    18b6:	6813      	ldr	r3, [r2, #0]
    18b8:	2102      	movs	r1, #2
    18ba:	430b      	orrs	r3, r1
    18bc:	6013      	str	r3, [r2, #0]
    m_used = true;
    18be:	4b26      	ldr	r3, [pc, #152]	; (1958 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1dc>)
    18c0:	2201      	movs	r2, #1
    18c2:	54c2      	strb	r2, [r0, r3]
}
    18c4:	bc0c      	pop	{r2, r3}
    18c6:	4690      	mov	r8, r2
    18c8:	4699      	mov	r9, r3
    18ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
    18cc:	4c1b      	ldr	r4, [pc, #108]	; (193c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
    18ce:	6a23      	ldr	r3, [r4, #32]
    18d0:	2508      	movs	r5, #8
    18d2:	432b      	orrs	r3, r5
    18d4:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) |
    18d6:	4b1a      	ldr	r3, [pc, #104]	; (1940 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
    18d8:	4c20      	ldr	r4, [pc, #128]	; (195c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e0>)
    18da:	805c      	strh	r4, [r3, #2]
    18dc:	e760      	b.n	17a0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x24>
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    18de:	2602      	movs	r6, #2
    18e0:	e763      	b.n	17aa <_ZN6uart_t4initERK13uart_pincfg_tt+0x2e>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    18e2:	0feb      	lsrs	r3, r5, #31
    18e4:	195b      	adds	r3, r3, r5
    18e6:	105f      	asrs	r7, r3, #1
    18e8:	01e3      	lsls	r3, r4, #7
    18ea:	4a17      	ldr	r2, [pc, #92]	; (1948 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    18ec:	4694      	mov	ip, r2
    18ee:	4463      	add	r3, ip
    18f0:	19db      	adds	r3, r3, r7
    18f2:	3330      	adds	r3, #48	; 0x30
    18f4:	781f      	ldrb	r7, [r3, #0]
    18f6:	220f      	movs	r2, #15
    18f8:	4397      	bics	r7, r2
    18fa:	433e      	orrs	r6, r7
    18fc:	701e      	strb	r6, [r3, #0]
    18fe:	e76a      	b.n	17d6 <_ZN6uart_t4initERK13uart_pincfg_tt+0x5a>
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1900:	2602      	movs	r6, #2
    1902:	e777      	b.n	17f4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x78>
    1904:	0feb      	lsrs	r3, r5, #31
    1906:	195b      	adds	r3, r3, r5
    1908:	105f      	asrs	r7, r3, #1
    190a:	01e3      	lsls	r3, r4, #7
    190c:	4a0e      	ldr	r2, [pc, #56]	; (1948 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    190e:	4694      	mov	ip, r2
    1910:	4463      	add	r3, ip
    1912:	19db      	adds	r3, r3, r7
    1914:	3330      	adds	r3, #48	; 0x30
    1916:	781f      	ldrb	r7, [r3, #0]
    1918:	220f      	movs	r2, #15
    191a:	4397      	bics	r7, r2
    191c:	433e      	orrs	r6, r7
    191e:	701e      	strb	r6, [r3, #0]
    1920:	e77e      	b.n	1820 <_ZN6uart_t4initERK13uart_pincfg_tt+0xa4>
    1922:	4b0f      	ldr	r3, [pc, #60]	; (1960 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
    1924:	2280      	movs	r2, #128	; 0x80
    1926:	0092      	lsls	r2, r2, #2
    1928:	601a      	str	r2, [r3, #0]
}
    192a:	e7c3      	b.n	18b4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    192c:	4b0c      	ldr	r3, [pc, #48]	; (1960 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
    192e:	2280      	movs	r2, #128	; 0x80
    1930:	00d2      	lsls	r2, r2, #3
    1932:	601a      	str	r2, [r3, #0]
}
    1934:	e7be      	b.n	18b4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	42000c00 	.word	0x42000c00
    193c:	40000400 	.word	0x40000400
    1940:	40000c00 	.word	0x40000c00
    1944:	0000400e 	.word	0x0000400e
    1948:	41004400 	.word	0x41004400
    194c:	fffcffff 	.word	0xfffcffff
    1950:	ffcfffff 	.word	0xffcfffff
    1954:	42000800 	.word	0x42000800
    1958:	00000209 	.word	0x00000209
    195c:	0000400f 	.word	0x0000400f
    1960:	e000e100 	.word	0xe000e100

00001964 <_ZN6uart_t14sercom_handlerEv>:
    if(!m_used) return;
    1964:	4b11      	ldr	r3, [pc, #68]	; (19ac <_ZN6uart_t14sercom_handlerEv+0x48>)
    1966:	5cc3      	ldrb	r3, [r0, r3]
    1968:	2b00      	cmp	r3, #0
    196a:	d01b      	beq.n	19a4 <_ZN6uart_t14sercom_handlerEv+0x40>
    if(!m_rxfull) {
    196c:	2382      	movs	r3, #130	; 0x82
    196e:	009b      	lsls	r3, r3, #2
    1970:	5cc3      	ldrb	r3, [r0, r3]
    1972:	2b00      	cmp	r3, #0
    1974:	d117      	bne.n	19a6 <_ZN6uart_t14sercom_handlerEv+0x42>
		m_rxbuf[m_rxhead] = m_sercom->USART.DATA.reg;
    1976:	6803      	ldr	r3, [r0, #0]
    1978:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    197a:	2281      	movs	r2, #129	; 0x81
    197c:	0092      	lsls	r2, r2, #2
    197e:	5a83      	ldrh	r3, [r0, r2]
    1980:	b2c9      	uxtb	r1, r1
    1982:	18c3      	adds	r3, r0, r3
    1984:	7119      	strb	r1, [r3, #4]
		m_rxhead = (m_rxhead+1) % sizeof(m_rxbuf);
    1986:	5a83      	ldrh	r3, [r0, r2]
    1988:	3301      	adds	r3, #1
    198a:	05db      	lsls	r3, r3, #23
    198c:	0ddb      	lsrs	r3, r3, #23
    198e:	5283      	strh	r3, [r0, r2]
		m_rxfull = m_rxtail == m_rxhead;
    1990:	4b07      	ldr	r3, [pc, #28]	; (19b0 <_ZN6uart_t14sercom_handlerEv+0x4c>)
    1992:	5ac3      	ldrh	r3, [r0, r3]
    1994:	5a82      	ldrh	r2, [r0, r2]
    1996:	1a9b      	subs	r3, r3, r2
    1998:	425a      	negs	r2, r3
    199a:	4153      	adcs	r3, r2
    199c:	b2db      	uxtb	r3, r3
    199e:	2282      	movs	r2, #130	; 0x82
    19a0:	0092      	lsls	r2, r2, #2
    19a2:	5483      	strb	r3, [r0, r2]
}
    19a4:	4770      	bx	lr
		(void)m_sercom->USART.DATA.reg; // Clear RX flag
    19a6:	6803      	ldr	r3, [r0, #0]
    19a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    19aa:	e7fb      	b.n	19a4 <_ZN6uart_t14sercom_handlerEv+0x40>
    19ac:	00000209 	.word	0x00000209
    19b0:	00000206 	.word	0x00000206

000019b4 <_ZN6uart_t5writeEc>:
    if(!m_used) return;
    19b4:	4b05      	ldr	r3, [pc, #20]	; (19cc <_ZN6uart_t5writeEc+0x18>)
    19b6:	5cc3      	ldrb	r3, [r0, r3]
    19b8:	2b00      	cmp	r3, #0
    19ba:	d006      	beq.n	19ca <_ZN6uart_t5writeEc+0x16>
    m_sercom->USART.DATA.reg = c;
    19bc:	b289      	uxth	r1, r1
    19be:	6803      	ldr	r3, [r0, #0]
    19c0:	8519      	strh	r1, [r3, #40]	; 0x28
	while(!m_sercom->USART.INTFLAG.bit.DRE);
    19c2:	6803      	ldr	r3, [r0, #0]
    19c4:	7e1b      	ldrb	r3, [r3, #24]
    19c6:	07db      	lsls	r3, r3, #31
    19c8:	d5fb      	bpl.n	19c2 <_ZN6uart_t5writeEc+0xe>
}
    19ca:	4770      	bx	lr
    19cc:	00000209 	.word	0x00000209

000019d0 <_ZN6uart_t5printEPKci>:
void uart_t::print(const char* str, int len) {
    19d0:	b570      	push	{r4, r5, r6, lr}
    19d2:	0006      	movs	r6, r0
    19d4:	0014      	movs	r4, r2
    if(!m_used) return;
    19d6:	4b09      	ldr	r3, [pc, #36]	; (19fc <_ZN6uart_t5printEPKci+0x2c>)
    19d8:	5cc3      	ldrb	r3, [r0, r3]
    19da:	2b00      	cmp	r3, #0
    19dc:	d10a      	bne.n	19f4 <_ZN6uart_t5printEPKci+0x24>
}
    19de:	bd70      	pop	{r4, r5, r6, pc}
    while((len == -1) ? *str : len--) write(*str++);
    19e0:	0023      	movs	r3, r4
    19e2:	3c01      	subs	r4, #1
    19e4:	2b00      	cmp	r3, #0
    19e6:	d0fa      	beq.n	19de <_ZN6uart_t5printEPKci+0xe>
    19e8:	1c4d      	adds	r5, r1, #1
    19ea:	7809      	ldrb	r1, [r1, #0]
    19ec:	0030      	movs	r0, r6
    19ee:	f7ff ffe1 	bl	19b4 <_ZN6uart_t5writeEc>
    19f2:	0029      	movs	r1, r5
    19f4:	1c63      	adds	r3, r4, #1
    19f6:	d1f3      	bne.n	19e0 <_ZN6uart_t5printEPKci+0x10>
    19f8:	780b      	ldrb	r3, [r1, #0]
    19fa:	e7f3      	b.n	19e4 <_ZN6uart_t5printEPKci+0x14>
    19fc:	00000209 	.word	0x00000209

00001a00 <_ZN6uart_t7rxemptyEv>:
	return (!m_rxfull && (m_rxhead == m_rxtail));
    1a00:	2382      	movs	r3, #130	; 0x82
    1a02:	009b      	lsls	r3, r3, #2
    1a04:	5cc3      	ldrb	r3, [r0, r3]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d10a      	bne.n	1a20 <_ZN6uart_t7rxemptyEv+0x20>
    1a0a:	2381      	movs	r3, #129	; 0x81
    1a0c:	009b      	lsls	r3, r3, #2
    1a0e:	5ac2      	ldrh	r2, [r0, r3]
    1a10:	b292      	uxth	r2, r2
    1a12:	4b05      	ldr	r3, [pc, #20]	; (1a28 <_ZN6uart_t7rxemptyEv+0x28>)
    1a14:	5ac3      	ldrh	r3, [r0, r3]
    1a16:	b29b      	uxth	r3, r3
    1a18:	429a      	cmp	r2, r3
    1a1a:	d003      	beq.n	1a24 <_ZN6uart_t7rxemptyEv+0x24>
    1a1c:	2000      	movs	r0, #0
    1a1e:	e000      	b.n	1a22 <_ZN6uart_t7rxemptyEv+0x22>
    1a20:	2000      	movs	r0, #0
}
    1a22:	4770      	bx	lr
	return (!m_rxfull && (m_rxhead == m_rxtail));
    1a24:	2001      	movs	r0, #1
    1a26:	e7fc      	b.n	1a22 <_ZN6uart_t7rxemptyEv+0x22>
    1a28:	00000206 	.word	0x00000206

00001a2c <_ZN6uart_t4getcEv>:
char uart_t::getc() {
    1a2c:	b510      	push	{r4, lr}
    1a2e:	0004      	movs	r4, r0
    if(!m_used) return '\0';
    1a30:	4b0c      	ldr	r3, [pc, #48]	; (1a64 <_ZN6uart_t4getcEv+0x38>)
    1a32:	5cc3      	ldrb	r3, [r0, r3]
    1a34:	2b00      	cmp	r3, #0
    1a36:	d013      	beq.n	1a60 <_ZN6uart_t4getcEv+0x34>
	while(rxempty());
    1a38:	0020      	movs	r0, r4
    1a3a:	f7ff ffe1 	bl	1a00 <_ZN6uart_t7rxemptyEv>
    1a3e:	2800      	cmp	r0, #0
    1a40:	d1fa      	bne.n	1a38 <_ZN6uart_t4getcEv+0xc>
	uint8_t c = m_rxbuf[m_rxtail];
    1a42:	4a09      	ldr	r2, [pc, #36]	; (1a68 <_ZN6uart_t4getcEv+0x3c>)
    1a44:	5aa3      	ldrh	r3, [r4, r2]
    1a46:	18e3      	adds	r3, r4, r3
    1a48:	7918      	ldrb	r0, [r3, #4]
    1a4a:	b2c0      	uxtb	r0, r0
	m_rxfull = false;
    1a4c:	2382      	movs	r3, #130	; 0x82
    1a4e:	009b      	lsls	r3, r3, #2
    1a50:	2100      	movs	r1, #0
    1a52:	54e1      	strb	r1, [r4, r3]
	m_rxtail = (m_rxtail+1) % sizeof(m_rxbuf);
    1a54:	5aa3      	ldrh	r3, [r4, r2]
    1a56:	3301      	adds	r3, #1
    1a58:	05db      	lsls	r3, r3, #23
    1a5a:	0ddb      	lsrs	r3, r3, #23
    1a5c:	52a3      	strh	r3, [r4, r2]
}
    1a5e:	bd10      	pop	{r4, pc}
    if(!m_used) return '\0';
    1a60:	2000      	movs	r0, #0
    1a62:	e7fc      	b.n	1a5e <_ZN6uart_t4getcEv+0x32>
    1a64:	00000209 	.word	0x00000209
    1a68:	00000206 	.word	0x00000206

00001a6c <_ZN6uart_t4peekEi>:
char uart_t::peek(int pos) {
    1a6c:	b570      	push	{r4, r5, r6, lr}
    1a6e:	0004      	movs	r4, r0
    1a70:	000d      	movs	r5, r1
    if(!m_used) return '\0';
    1a72:	4b1f      	ldr	r3, [pc, #124]	; (1af0 <_ZN6uart_t4peekEi+0x84>)
    1a74:	5cc3      	ldrb	r3, [r0, r3]
    1a76:	2b00      	cmp	r3, #0
    1a78:	d101      	bne.n	1a7e <_ZN6uart_t4peekEi+0x12>
    1a7a:	2000      	movs	r0, #0
}
    1a7c:	bd70      	pop	{r4, r5, r6, pc}
    if(rxempty() || pos >= available()) return '\0';
    1a7e:	f7ff ffbf 	bl	1a00 <_ZN6uart_t7rxemptyEv>
    1a82:	2800      	cmp	r0, #0
    1a84:	d12f      	bne.n	1ae6 <_ZN6uart_t4peekEi+0x7a>
        m_rxhead = 0;
        m_rxtail = 0;
        m_rxfull = false;
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
    1a86:	2381      	movs	r3, #129	; 0x81
    1a88:	009b      	lsls	r3, r3, #2
    1a8a:	5ae2      	ldrh	r2, [r4, r3]
    1a8c:	b292      	uxth	r2, r2
    1a8e:	4b19      	ldr	r3, [pc, #100]	; (1af4 <_ZN6uart_t4peekEi+0x88>)
    1a90:	5ae3      	ldrh	r3, [r4, r3]
    1a92:	b29b      	uxth	r3, r3
    1a94:	429a      	cmp	r2, r3
    1a96:	d313      	bcc.n	1ac0 <_ZN6uart_t4peekEi+0x54>
            return m_rxhead - m_rxtail;
    1a98:	2381      	movs	r3, #129	; 0x81
    1a9a:	009b      	lsls	r3, r3, #2
    1a9c:	5ae3      	ldrh	r3, [r4, r3]
    1a9e:	4a15      	ldr	r2, [pc, #84]	; (1af4 <_ZN6uart_t4peekEi+0x88>)
    1aa0:	5aa2      	ldrh	r2, [r4, r2]
    1aa2:	1a9b      	subs	r3, r3, r2
    1aa4:	b29b      	uxth	r3, r3
    1aa6:	42ab      	cmp	r3, r5
    1aa8:	dd1f      	ble.n	1aea <_ZN6uart_t4peekEi+0x7e>
    if(pos == -1)
    1aaa:	1c6b      	adds	r3, r5, #1
    1aac:	d015      	beq.n	1ada <_ZN6uart_t4peekEi+0x6e>
        return m_rxbuf[(m_rxtail + pos) % sizeof(m_rxbuf)];
    1aae:	4b11      	ldr	r3, [pc, #68]	; (1af4 <_ZN6uart_t4peekEi+0x88>)
    1ab0:	5ae0      	ldrh	r0, [r4, r3]
    1ab2:	1940      	adds	r0, r0, r5
    1ab4:	05c0      	lsls	r0, r0, #23
    1ab6:	0dc0      	lsrs	r0, r0, #23
    1ab8:	1824      	adds	r4, r4, r0
    1aba:	7920      	ldrb	r0, [r4, #4]
    1abc:	b2c0      	uxtb	r0, r0
    1abe:	e7dd      	b.n	1a7c <_ZN6uart_t4peekEi+0x10>
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1ac0:	2381      	movs	r3, #129	; 0x81
    1ac2:	009b      	lsls	r3, r3, #2
    1ac4:	5ae3      	ldrh	r3, [r4, r3]
    1ac6:	4a0b      	ldr	r2, [pc, #44]	; (1af4 <_ZN6uart_t4peekEi+0x88>)
    1ac8:	5aa2      	ldrh	r2, [r4, r2]
    1aca:	1a9b      	subs	r3, r3, r2
    1acc:	b29b      	uxth	r3, r3
    1ace:	2280      	movs	r2, #128	; 0x80
    1ad0:	0092      	lsls	r2, r2, #2
    1ad2:	4694      	mov	ip, r2
    1ad4:	4463      	add	r3, ip
    1ad6:	b29b      	uxth	r3, r3
    1ad8:	e7e5      	b.n	1aa6 <_ZN6uart_t4peekEi+0x3a>
        return m_rxbuf[m_rxtail];
    1ada:	4b06      	ldr	r3, [pc, #24]	; (1af4 <_ZN6uart_t4peekEi+0x88>)
    1adc:	5ae0      	ldrh	r0, [r4, r3]
    1ade:	1824      	adds	r4, r4, r0
    1ae0:	7920      	ldrb	r0, [r4, #4]
    1ae2:	b2c0      	uxtb	r0, r0
    1ae4:	e7ca      	b.n	1a7c <_ZN6uart_t4peekEi+0x10>
    if(rxempty() || pos >= available()) return '\0';
    1ae6:	2000      	movs	r0, #0
    1ae8:	e7c8      	b.n	1a7c <_ZN6uart_t4peekEi+0x10>
    1aea:	2000      	movs	r0, #0
    1aec:	e7c6      	b.n	1a7c <_ZN6uart_t4peekEi+0x10>
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	00000209 	.word	0x00000209
    1af4:	00000206 	.word	0x00000206

00001af8 <_ZN6uart_t4findEPKc>:
int uart_t::find(const char* str) {
    1af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1afa:	46c6      	mov	lr, r8
    1afc:	b500      	push	{lr}
    1afe:	0007      	movs	r7, r0
    1b00:	000d      	movs	r5, r1
    if(!m_used) return -1;
    1b02:	4b21      	ldr	r3, [pc, #132]	; (1b88 <_ZN6uart_t4findEPKc+0x90>)
    1b04:	5cc3      	ldrb	r3, [r0, r3]
    1b06:	2b00      	cmp	r3, #0
    1b08:	d035      	beq.n	1b76 <_ZN6uart_t4findEPKc+0x7e>
    for(int i = 0; i < available(); i++) {
    1b0a:	2300      	movs	r3, #0
    1b0c:	4698      	mov	r8, r3
        if(m_rxhead >= m_rxtail)
    1b0e:	2381      	movs	r3, #129	; 0x81
    1b10:	009b      	lsls	r3, r3, #2
    1b12:	5afa      	ldrh	r2, [r7, r3]
    1b14:	b292      	uxth	r2, r2
    1b16:	4b1d      	ldr	r3, [pc, #116]	; (1b8c <_ZN6uart_t4findEPKc+0x94>)
    1b18:	5afb      	ldrh	r3, [r7, r3]
    1b1a:	b29b      	uxth	r3, r3
    1b1c:	429a      	cmp	r2, r3
    1b1e:	d319      	bcc.n	1b54 <_ZN6uart_t4findEPKc+0x5c>
            return m_rxhead - m_rxtail;
    1b20:	2381      	movs	r3, #129	; 0x81
    1b22:	009b      	lsls	r3, r3, #2
    1b24:	5afb      	ldrh	r3, [r7, r3]
    1b26:	4a19      	ldr	r2, [pc, #100]	; (1b8c <_ZN6uart_t4findEPKc+0x94>)
    1b28:	5aba      	ldrh	r2, [r7, r2]
    1b2a:	1a9b      	subs	r3, r3, r2
    1b2c:	b29b      	uxth	r3, r3
    1b2e:	4543      	cmp	r3, r8
    1b30:	dd25      	ble.n	1b7e <_ZN6uart_t4findEPKc+0x86>
        int search_idx = 0;
    1b32:	2400      	movs	r4, #0
        while(str[search_idx] == peek(i + search_idx))
    1b34:	5d2e      	ldrb	r6, [r5, r4]
    1b36:	4643      	mov	r3, r8
    1b38:	1919      	adds	r1, r3, r4
    1b3a:	0038      	movs	r0, r7
    1b3c:	f7ff ff96 	bl	1a6c <_ZN6uart_t4peekEi>
    1b40:	4286      	cmp	r6, r0
    1b42:	d114      	bne.n	1b6e <_ZN6uart_t4findEPKc+0x76>
            if(!str[++search_idx]) return i;
    1b44:	3401      	adds	r4, #1
    1b46:	5d2b      	ldrb	r3, [r5, r4]
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d1f3      	bne.n	1b34 <_ZN6uart_t4findEPKc+0x3c>
}
    1b4c:	4640      	mov	r0, r8
    1b4e:	bc04      	pop	{r2}
    1b50:	4690      	mov	r8, r2
    1b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1b54:	2381      	movs	r3, #129	; 0x81
    1b56:	009b      	lsls	r3, r3, #2
    1b58:	5afb      	ldrh	r3, [r7, r3]
    1b5a:	4a0c      	ldr	r2, [pc, #48]	; (1b8c <_ZN6uart_t4findEPKc+0x94>)
    1b5c:	5aba      	ldrh	r2, [r7, r2]
    1b5e:	1a9b      	subs	r3, r3, r2
    1b60:	b29b      	uxth	r3, r3
    1b62:	2280      	movs	r2, #128	; 0x80
    1b64:	0092      	lsls	r2, r2, #2
    1b66:	4694      	mov	ip, r2
    1b68:	4463      	add	r3, ip
    1b6a:	b29b      	uxth	r3, r3
    1b6c:	e7df      	b.n	1b2e <_ZN6uart_t4findEPKc+0x36>
    for(int i = 0; i < available(); i++) {
    1b6e:	2301      	movs	r3, #1
    1b70:	469c      	mov	ip, r3
    1b72:	44e0      	add	r8, ip
    1b74:	e7cb      	b.n	1b0e <_ZN6uart_t4findEPKc+0x16>
    if(!m_used) return -1;
    1b76:	2301      	movs	r3, #1
    1b78:	425b      	negs	r3, r3
    1b7a:	4698      	mov	r8, r3
    1b7c:	e7e6      	b.n	1b4c <_ZN6uart_t4findEPKc+0x54>
    return -1;
    1b7e:	2301      	movs	r3, #1
    1b80:	425b      	negs	r3, r3
    1b82:	4698      	mov	r8, r3
    1b84:	e7e2      	b.n	1b4c <_ZN6uart_t4findEPKc+0x54>
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	00000209 	.word	0x00000209
    1b8c:	00000206 	.word	0x00000206

00001b90 <_ZN6uart_t4readEv>:
char* uart_t::read() {
    1b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b92:	46c6      	mov	lr, r8
    1b94:	b500      	push	{lr}
    1b96:	0005      	movs	r5, r0
    if(!m_used) return NULL;
    1b98:	4b1f      	ldr	r3, [pc, #124]	; (1c18 <_ZN6uart_t4readEv+0x88>)
    1b9a:	5cc3      	ldrb	r3, [r0, r3]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d036      	beq.n	1c0e <_ZN6uart_t4readEv+0x7e>
        if(m_rxhead >= m_rxtail)
    1ba0:	2381      	movs	r3, #129	; 0x81
    1ba2:	009b      	lsls	r3, r3, #2
    1ba4:	5ac2      	ldrh	r2, [r0, r3]
    1ba6:	b292      	uxth	r2, r2
    1ba8:	4b1c      	ldr	r3, [pc, #112]	; (1c1c <_ZN6uart_t4readEv+0x8c>)
    1baa:	5ac3      	ldrh	r3, [r0, r3]
    1bac:	b29b      	uxth	r3, r3
    1bae:	429a      	cmp	r2, r3
    1bb0:	d310      	bcc.n	1bd4 <_ZN6uart_t4readEv+0x44>
            return m_rxhead - m_rxtail;
    1bb2:	2381      	movs	r3, #129	; 0x81
    1bb4:	009b      	lsls	r3, r3, #2
    1bb6:	5ac0      	ldrh	r0, [r0, r3]
    1bb8:	4b18      	ldr	r3, [pc, #96]	; (1c1c <_ZN6uart_t4readEv+0x8c>)
    1bba:	5aeb      	ldrh	r3, [r5, r3]
    1bbc:	1ac0      	subs	r0, r0, r3
    1bbe:	b280      	uxth	r0, r0
    size_t avail = available();
    1bc0:	4680      	mov	r8, r0
    if(!avail) return NULL;
    1bc2:	2800      	cmp	r0, #0
    1bc4:	d025      	beq.n	1c12 <_ZN6uart_t4readEv+0x82>
    char* data = (char*)malloc(avail + 1);
    1bc6:	3001      	adds	r0, #1
    1bc8:	f000 fb3c 	bl	2244 <malloc>
    1bcc:	1e07      	subs	r7, r0, #0
    if(!data) return NULL;
    1bce:	d01a      	beq.n	1c06 <_ZN6uart_t4readEv+0x76>
    for(size_t i = 0; i < avail; i++)
    1bd0:	2400      	movs	r4, #0
    1bd2:	e012      	b.n	1bfa <_ZN6uart_t4readEv+0x6a>
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1bd4:	2381      	movs	r3, #129	; 0x81
    1bd6:	009b      	lsls	r3, r3, #2
    1bd8:	5ac0      	ldrh	r0, [r0, r3]
    1bda:	4b10      	ldr	r3, [pc, #64]	; (1c1c <_ZN6uart_t4readEv+0x8c>)
    1bdc:	5aeb      	ldrh	r3, [r5, r3]
    1bde:	1ac0      	subs	r0, r0, r3
    1be0:	b280      	uxth	r0, r0
    1be2:	2380      	movs	r3, #128	; 0x80
    1be4:	009b      	lsls	r3, r3, #2
    1be6:	469c      	mov	ip, r3
    1be8:	4460      	add	r0, ip
    1bea:	b280      	uxth	r0, r0
    1bec:	e7e8      	b.n	1bc0 <_ZN6uart_t4readEv+0x30>
        data[i] = getc();
    1bee:	193e      	adds	r6, r7, r4
    1bf0:	0028      	movs	r0, r5
    1bf2:	f7ff ff1b 	bl	1a2c <_ZN6uart_t4getcEv>
    1bf6:	7030      	strb	r0, [r6, #0]
    for(size_t i = 0; i < avail; i++)
    1bf8:	3401      	adds	r4, #1
    1bfa:	4544      	cmp	r4, r8
    1bfc:	d3f7      	bcc.n	1bee <_ZN6uart_t4readEv+0x5e>
    data[avail] = '\0';
    1bfe:	4643      	mov	r3, r8
    1c00:	18fb      	adds	r3, r7, r3
    1c02:	2200      	movs	r2, #0
    1c04:	701a      	strb	r2, [r3, #0]
}
    1c06:	0038      	movs	r0, r7
    1c08:	bc04      	pop	{r2}
    1c0a:	4690      	mov	r8, r2
    1c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!m_used) return NULL;
    1c0e:	2700      	movs	r7, #0
    1c10:	e7f9      	b.n	1c06 <_ZN6uart_t4readEv+0x76>
    if(!avail) return NULL;
    1c12:	2700      	movs	r7, #0
    1c14:	e7f7      	b.n	1c06 <_ZN6uart_t4readEv+0x76>
    1c16:	46c0      	nop			; (mov r8, r8)
    1c18:	00000209 	.word	0x00000209
    1c1c:	00000206 	.word	0x00000206

00001c20 <SERCOM0_Handler>:
void SERCOM0_Handler() {
    1c20:	b510      	push	{r4, lr}
    g_uart0.sercom_handler();
    1c22:	4802      	ldr	r0, [pc, #8]	; (1c2c <SERCOM0_Handler+0xc>)
    1c24:	f7ff fe9e 	bl	1964 <_ZN6uart_t14sercom_handlerEv>
}
    1c28:	bd10      	pop	{r4, pc}
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	200000f0 	.word	0x200000f0

00001c30 <SERCOM1_Handler>:
void SERCOM1_Handler() {
    1c30:	b510      	push	{r4, lr}
    g_uart1.sercom_handler();
    1c32:	4802      	ldr	r0, [pc, #8]	; (1c3c <SERCOM1_Handler+0xc>)
    1c34:	f7ff fe96 	bl	1964 <_ZN6uart_t14sercom_handlerEv>
    1c38:	bd10      	pop	{r4, pc}
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	200002fc 	.word	0x200002fc

00001c40 <_GLOBAL__sub_I_g_uart0>:
    1c40:	b510      	push	{r4, lr}
    1c42:	4902      	ldr	r1, [pc, #8]	; (1c4c <_GLOBAL__sub_I_g_uart0+0xc>)
    1c44:	2001      	movs	r0, #1
    1c46:	f7ff fd6d 	bl	1724 <_Z41__static_initialization_and_destruction_0ii>
    1c4a:	bd10      	pop	{r4, pc}
    1c4c:	0000ffff 	.word	0x0000ffff

00001c50 <_ZN9SensornetC1ERK4RF24>:

extern "C" {
#include <systick.h>
}

Sensornet::Sensornet(const RF24& radio) :
    1c50:	b530      	push	{r4, r5, lr}
    m_radio(radio)
    1c52:	0003      	movs	r3, r0
    1c54:	c934      	ldmia	r1!, {r2, r4, r5}
    1c56:	c334      	stmia	r3!, {r2, r4, r5}
    1c58:	c934      	ldmia	r1!, {r2, r4, r5}
    1c5a:	c334      	stmia	r3!, {r2, r4, r5}
    1c5c:	c934      	ldmia	r1!, {r2, r4, r5}
    1c5e:	c334      	stmia	r3!, {r2, r4, r5}
    1c60:	680a      	ldr	r2, [r1, #0]
    1c62:	601a      	str	r2, [r3, #0]
    Vector() : m_size(0), m_data(NULL) {}
    1c64:	2300      	movs	r3, #0
    1c66:	6283      	str	r3, [r0, #40]	; 0x28
    1c68:	62c3      	str	r3, [r0, #44]	; 0x2c
    1c6a:	6303      	str	r3, [r0, #48]	; 0x30
    1c6c:	6343      	str	r3, [r0, #52]	; 0x34
        },
        millis()
    };

    m_nodes.push_back(node2);*/
}
    1c6e:	bd30      	pop	{r4, r5, pc}

00001c70 <_ZN9Sensornet5beginEv>:

bool Sensornet::begin() {
    1c70:	b570      	push	{r4, r5, r6, lr}
    1c72:	0004      	movs	r4, r0
    if(!m_radio.begin())
    1c74:	f7fe fffa 	bl	c6c <_ZN4RF245beginEv>
    1c78:	1e05      	subs	r5, r0, #0
    1c7a:	d101      	bne.n	1c80 <_ZN9Sensornet5beginEv+0x10>
    m_radio.openReadingPipe(1, (uint64_t)55);

    m_radio.startListening();

    return true;
}
    1c7c:	0028      	movs	r0, r5
    1c7e:	bd70      	pop	{r4, r5, r6, pc}
    m_radio.setChannel(120);
    1c80:	2178      	movs	r1, #120	; 0x78
    1c82:	0020      	movs	r0, r4
    1c84:	f7fe fe2b 	bl	8de <_ZN4RF2410setChannelEh>
    m_radio.setAutoAck(true);
    1c88:	2101      	movs	r1, #1
    1c8a:	0020      	movs	r0, r4
    1c8c:	f7fe ff96 	bl	bbc <_ZN4RF2410setAutoAckEb>
    m_radio.setRetries(5, 15);
    1c90:	220f      	movs	r2, #15
    1c92:	2105      	movs	r1, #5
    1c94:	0020      	movs	r0, r4
    1c96:	f7fe ffdf 	bl	c58 <_ZN4RF2410setRetriesEhh>
    m_radio.setPayloadSize(32);
    1c9a:	2120      	movs	r1, #32
    1c9c:	0020      	movs	r0, r4
    1c9e:	f7fe fe27 	bl	8f0 <_ZN4RF2414setPayloadSizeEh>
    m_radio.setPALevel(RF24_PA_MAX);
    1ca2:	2103      	movs	r1, #3
    1ca4:	0020      	movs	r0, r4
    1ca6:	f7fe ff96 	bl	bd6 <_ZN4RF2410setPALevelEh>
    m_radio.setDataRate(RF24_1MBPS);
    1caa:	2100      	movs	r1, #0
    1cac:	0020      	movs	r0, r4
    1cae:	f7fe ffa9 	bl	c04 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    m_radio.openWritingPipe((uint64_t)56);
    1cb2:	2238      	movs	r2, #56	; 0x38
    1cb4:	2300      	movs	r3, #0
    1cb6:	0020      	movs	r0, r4
    1cb8:	f7fe fed2 	bl	a60 <_ZN4RF2415openWritingPipeEy>
    m_radio.openReadingPipe(1, (uint64_t)55);
    1cbc:	2237      	movs	r2, #55	; 0x37
    1cbe:	2300      	movs	r3, #0
    1cc0:	2101      	movs	r1, #1
    1cc2:	0020      	movs	r0, r4
    1cc4:	f7fe fee4 	bl	a90 <_ZN4RF2415openReadingPipeEhy>
    m_radio.startListening();
    1cc8:	0020      	movs	r0, r4
    1cca:	f7fe ff33 	bl	b34 <_ZN4RF2414startListeningEv>
    return true;
    1cce:	e7d5      	b.n	1c7c <_ZN9Sensornet5beginEv+0xc>

00001cd0 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>:
            }
        }
    }
}

void Sensornet::UpdateNode(const SensorPacket& pkt) {
    1cd0:	b570      	push	{r4, r5, r6, lr}
    1cd2:	b08a      	sub	sp, #40	; 0x28
    1cd4:	0006      	movs	r6, r0
        return m_data;
    1cd6:	6b44      	ldr	r4, [r0, #52]	; 0x34
        return m_data + m_size;
    1cd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1cda:	00dd      	lsls	r5, r3, #3
    1cdc:	18ed      	adds	r5, r5, r3
    1cde:	00ad      	lsls	r5, r5, #2
    1ce0:	1965      	adds	r5, r4, r5
    for(auto& node : m_nodes) {
    1ce2:	42ac      	cmp	r4, r5
    1ce4:	d00f      	beq.n	1d06 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x36>
        if(node.data.id == pkt.id) {
    1ce6:	2200      	movs	r2, #0
    1ce8:	56a2      	ldrsb	r2, [r4, r2]
    1cea:	2300      	movs	r3, #0
    1cec:	56cb      	ldrsb	r3, [r1, r3]
    1cee:	429a      	cmp	r2, r3
    1cf0:	d001      	beq.n	1cf6 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x26>
    for(auto& node : m_nodes) {
    1cf2:	3424      	adds	r4, #36	; 0x24
    1cf4:	e7f5      	b.n	1ce2 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x12>
            memcpy(&node.data, &pkt, sizeof(SensorPacket));
    1cf6:	2220      	movs	r2, #32
    1cf8:	0020      	movs	r0, r4
    1cfa:	f000 fab7 	bl	226c <memcpy>
            node.last_seen = millis();
    1cfe:	f7ff fcf7 	bl	16f0 <millis>
    1d02:	6220      	str	r0, [r4, #32]
            return;
    1d04:	e021      	b.n	1d4a <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x7a>
        }
    }

    m_nodes.push_back({ pkt, millis() });
    1d06:	0034      	movs	r4, r6
    1d08:	3430      	adds	r4, #48	; 0x30
    1d0a:	2220      	movs	r2, #32
    1d0c:	a801      	add	r0, sp, #4
    1d0e:	f000 faad 	bl	226c <memcpy>
    1d12:	f7ff fced 	bl	16f0 <millis>
    1d16:	9009      	str	r0, [sp, #36]	; 0x24
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1d18:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1d1a:	2900      	cmp	r1, #0
    1d1c:	d017      	beq.n	1d4e <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x7e>
    1d1e:	3101      	adds	r1, #1
    1d20:	00cb      	lsls	r3, r1, #3
    1d22:	1859      	adds	r1, r3, r1
    1d24:	0089      	lsls	r1, r1, #2
    1d26:	6860      	ldr	r0, [r4, #4]
    1d28:	f000 fb52 	bl	23d0 <realloc>
        if(!new_data) return;
    1d2c:	2800      	cmp	r0, #0
    1d2e:	d00c      	beq.n	1d4a <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x7a>
        m_data = new_data;
    1d30:	6060      	str	r0, [r4, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
    1d32:	6b32      	ldr	r2, [r6, #48]	; 0x30
    1d34:	00d3      	lsls	r3, r2, #3
    1d36:	189b      	adds	r3, r3, r2
    1d38:	009b      	lsls	r3, r3, #2
    1d3a:	18c0      	adds	r0, r0, r3
    1d3c:	2224      	movs	r2, #36	; 0x24
    1d3e:	a901      	add	r1, sp, #4
    1d40:	f000 fa94 	bl	226c <memcpy>
        m_size++;
    1d44:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1d46:	3301      	adds	r3, #1
    1d48:	6333      	str	r3, [r6, #48]	; 0x30
}
    1d4a:	b00a      	add	sp, #40	; 0x28
    1d4c:	bd70      	pop	{r4, r5, r6, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1d4e:	2024      	movs	r0, #36	; 0x24
    1d50:	f000 fa78 	bl	2244 <malloc>
    1d54:	e7ea      	b.n	1d2c <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x5c>

00001d56 <_ZN9Sensornet13ProcessPacketER12SensorPacket>:
void Sensornet::ProcessPacket(SensorPacket& pkt) {
    1d56:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d58:	46c6      	mov	lr, r8
    1d5a:	b500      	push	{lr}
    1d5c:	0006      	movs	r6, r0
    1d5e:	000d      	movs	r5, r1
    if(pkt.id == 0) {
    1d60:	2300      	movs	r3, #0
    1d62:	56cb      	ldrsb	r3, [r1, r3]
    1d64:	2b00      	cmp	r3, #0
    1d66:	d135      	bne.n	1dd4 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x7e>
        pkt.id = 1;
    1d68:	3301      	adds	r3, #1
    1d6a:	700b      	strb	r3, [r1, #0]
        return m_data;
    1d6c:	6b44      	ldr	r4, [r0, #52]	; 0x34
        return m_data + m_size;
    1d6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1d70:	00df      	lsls	r7, r3, #3
    1d72:	18ff      	adds	r7, r7, r3
    1d74:	00bf      	lsls	r7, r7, #2
    1d76:	19e7      	adds	r7, r4, r7
    1d78:	e019      	b.n	1dae <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x58>
                pkt.id = node.data.id;
    1d7a:	2300      	movs	r3, #0
    1d7c:	56e3      	ldrsb	r3, [r4, r3]
    1d7e:	702b      	strb	r3, [r5, #0]
        UpdateNode(pkt);
    1d80:	0029      	movs	r1, r5
    1d82:	0030      	movs	r0, r6
    1d84:	f7ff ffa4 	bl	1cd0 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
        m_radio.stopListening();
    1d88:	0030      	movs	r0, r6
    1d8a:	f7fe fdb7 	bl	8fc <_ZN4RF2413stopListeningEv>
        pkt.type = Sensors::TYPE_COMMAND;
    1d8e:	23ff      	movs	r3, #255	; 0xff
    1d90:	726b      	strb	r3, [r5, #9]
        pkt.data[0] = Sensors::COMMAND_SET_ID;
    1d92:	3bfe      	subs	r3, #254	; 0xfe
    1d94:	72ab      	strb	r3, [r5, #10]
        m_radio.write(&pkt, 32);
    1d96:	2220      	movs	r2, #32
    1d98:	0029      	movs	r1, r5
    1d9a:	0030      	movs	r0, r6
    1d9c:	f7fe fe37 	bl	a0e <_ZN4RF245writeEPKvh>
        m_radio.startListening();
    1da0:	0030      	movs	r0, r6
    1da2:	f7fe fec7 	bl	b34 <_ZN4RF2414startListeningEv>
}
    1da6:	bc04      	pop	{r2}
    1da8:	4690      	mov	r8, r2
    1daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(auto& node : m_nodes) {
    1dac:	3424      	adds	r4, #36	; 0x24
    1dae:	42bc      	cmp	r4, r7
    1db0:	d0e6      	beq.n	1d80 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x2a>
            if(strncmp(node.data.name, pkt.name, sizeof(SensorPacket::name)) == 0) {
    1db2:	1c60      	adds	r0, r4, #1
    1db4:	1c69      	adds	r1, r5, #1
    1db6:	2208      	movs	r2, #8
    1db8:	f000 fb91 	bl	24de <strncmp>
    1dbc:	2800      	cmp	r0, #0
    1dbe:	d0dc      	beq.n	1d7a <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x24>
            if(node.data.id >= pkt.id) pkt.id = node.data.id + 1;
    1dc0:	2300      	movs	r3, #0
    1dc2:	56e3      	ldrsb	r3, [r4, r3]
    1dc4:	2200      	movs	r2, #0
    1dc6:	56aa      	ldrsb	r2, [r5, r2]
    1dc8:	4293      	cmp	r3, r2
    1dca:	dbef      	blt.n	1dac <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x56>
    1dcc:	b2db      	uxtb	r3, r3
    1dce:	3301      	adds	r3, #1
    1dd0:	702b      	strb	r3, [r5, #0]
    1dd2:	e7eb      	b.n	1dac <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x56>
        UpdateNode(pkt);
    1dd4:	f7ff ff7c 	bl	1cd0 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
        for(size_t i = 0; i < m_cmd_queue.size(); i++) {
    1dd8:	2400      	movs	r4, #0
    1dda:	e008      	b.n	1dee <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x98>

        memcpy(it, it + 1, m_size * sizeof(T) - (it - begin()) - 1 * sizeof(T));

        m_size -= 1;
        if(!m_size) {
            free(m_data);
    1ddc:	4643      	mov	r3, r8
    1dde:	6858      	ldr	r0, [r3, #4]
    1de0:	f000 fa3a 	bl	2258 <free>
            m_data = NULL;
    1de4:	2300      	movs	r3, #0
    1de6:	4642      	mov	r2, r8
    1de8:	6053      	str	r3, [r2, #4]
                i--;
    1dea:	3c01      	subs	r4, #1
        for(size_t i = 0; i < m_cmd_queue.size(); i++) {
    1dec:	3401      	adds	r4, #1
    1dee:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1df0:	429c      	cmp	r4, r3
    1df2:	d2d8      	bcs.n	1da6 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x50>
        return *(m_data + idx);
    1df4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1df6:	0167      	lsls	r7, r4, #5
    1df8:	19da      	adds	r2, r3, r7
    1dfa:	4690      	mov	r8, r2
            if(cmd.id == pkt.id) {
    1dfc:	57da      	ldrsb	r2, [r3, r7]
    1dfe:	2300      	movs	r3, #0
    1e00:	56eb      	ldrsb	r3, [r5, r3]
    1e02:	429a      	cmp	r2, r3
    1e04:	d1f2      	bne.n	1dec <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x96>
                m_radio.stopListening();
    1e06:	0030      	movs	r0, r6
    1e08:	f7fe fd78 	bl	8fc <_ZN4RF2413stopListeningEv>
                m_radio.write(&cmd, 32);
    1e0c:	2220      	movs	r2, #32
    1e0e:	4641      	mov	r1, r8
    1e10:	0030      	movs	r0, r6
    1e12:	f7fe fdfc 	bl	a0e <_ZN4RF245writeEPKvh>
                m_radio.startListening();
    1e16:	0030      	movs	r0, r6
    1e18:	f7fe fe8c 	bl	b34 <_ZN4RF2414startListeningEv>
                m_cmd_queue.erase(m_cmd_queue.begin() + i);
    1e1c:	2328      	movs	r3, #40	; 0x28
    1e1e:	4698      	mov	r8, r3
    1e20:	44b0      	add	r8, r6
    1e22:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1e24:	469c      	mov	ip, r3
    1e26:	4467      	add	r7, ip
        if(!m_size || it < begin() || it >= end()) return;
    1e28:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d0dd      	beq.n	1dea <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x94>
        return m_data;
    1e2e:	4642      	mov	r2, r8
    1e30:	6852      	ldr	r2, [r2, #4]
        if(!m_size || it < begin() || it >= end()) return;
    1e32:	4297      	cmp	r7, r2
    1e34:	d3d9      	bcc.n	1dea <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x94>
        return m_data + m_size;
    1e36:	015b      	lsls	r3, r3, #5
    1e38:	18d1      	adds	r1, r2, r3
        if(!m_size || it < begin() || it >= end()) return;
    1e3a:	428f      	cmp	r7, r1
    1e3c:	d2d5      	bcs.n	1dea <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x94>
        memcpy(it, it + 1, m_size * sizeof(T) - (it - begin()) - 1 * sizeof(T));
    1e3e:	0039      	movs	r1, r7
    1e40:	3120      	adds	r1, #32
    1e42:	1aba      	subs	r2, r7, r2
    1e44:	1152      	asrs	r2, r2, #5
    1e46:	1a9a      	subs	r2, r3, r2
    1e48:	3a20      	subs	r2, #32
    1e4a:	0038      	movs	r0, r7
    1e4c:	f000 fa0e 	bl	226c <memcpy>
        m_size -= 1;
    1e50:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1e52:	1e59      	subs	r1, r3, #1
    1e54:	62b1      	str	r1, [r6, #40]	; 0x28
        if(!m_size) {
    1e56:	2900      	cmp	r1, #0
    1e58:	d0c0      	beq.n	1ddc <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x86>
            return;
        }

        auto new_data = (T*)realloc(m_data, m_size * sizeof(T));
    1e5a:	0149      	lsls	r1, r1, #5
    1e5c:	4643      	mov	r3, r8
    1e5e:	6858      	ldr	r0, [r3, #4]
    1e60:	f000 fab6 	bl	23d0 <realloc>
        if(!new_data) return;
    1e64:	2800      	cmp	r0, #0
    1e66:	d0c0      	beq.n	1dea <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x94>
        m_data = new_data;
    1e68:	4643      	mov	r3, r8
    1e6a:	6058      	str	r0, [r3, #4]
    1e6c:	e7bd      	b.n	1dea <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x94>

00001e6e <_ZN9Sensornet4PollEv>:
void Sensornet::Poll() {
    1e6e:	b510      	push	{r4, lr}
    1e70:	b088      	sub	sp, #32
    1e72:	0004      	movs	r4, r0
    if(m_radio.available()) {
    1e74:	f7fe fde5 	bl	a42 <_ZN4RF249availableEv>
    1e78:	2800      	cmp	r0, #0
    1e7a:	d101      	bne.n	1e80 <_ZN9Sensornet4PollEv+0x12>
}
    1e7c:	b008      	add	sp, #32
    1e7e:	bd10      	pop	{r4, pc}
        m_radio.read(&pkt, 32);
    1e80:	2220      	movs	r2, #32
    1e82:	4669      	mov	r1, sp
    1e84:	0020      	movs	r0, r4
    1e86:	f7fe fde1 	bl	a4c <_ZN4RF244readEPvh>
        ProcessPacket(pkt);
    1e8a:	4669      	mov	r1, sp
    1e8c:	0020      	movs	r0, r4
    1e8e:	f7ff ff62 	bl	1d56 <_ZN9Sensornet13ProcessPacketER12SensorPacket>
        m_radio.flush_rx();
    1e92:	0020      	movs	r0, r4
    1e94:	f7fe fcf5 	bl	882 <_ZN4RF248flush_rxEv>
}
    1e98:	e7f0      	b.n	1e7c <_ZN9Sensornet4PollEv+0xe>
    1e9a:	Address 0x00001e9a is out of bounds.


00001e9c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_>:

void Sensornet::CMDSetName(GSM* gsm, const char* sender, const char* c_args) {
    1e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e9e:	46ce      	mov	lr, r9
    1ea0:	4647      	mov	r7, r8
    1ea2:	b580      	push	{r7, lr}
    1ea4:	b089      	sub	sp, #36	; 0x24
    1ea6:	0006      	movs	r6, r0
    1ea8:	4688      	mov	r8, r1
    1eaa:	4691      	mov	r9, r2
    1eac:	1e1c      	subs	r4, r3, #0
    char* id_str = NULL;
    char* name = NULL;
    char* args = NULL;

    if(c_args) {
    1eae:	d032      	beq.n	1f16 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x7a>
        args = (char*)malloc(strlen(c_args));
    1eb0:	0018      	movs	r0, r3
    1eb2:	f000 fb0d 	bl	24d0 <strlen>
    1eb6:	f000 f9c5 	bl	2244 <malloc>
    1eba:	1e05      	subs	r5, r0, #0
        if(!args) {
    1ebc:	d025      	beq.n	1f0a <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x6e>
            gsm->SendSMS(sender, "malloc failed");
            return;
        }
        strcpy(args, c_args);
    1ebe:	0021      	movs	r1, r4
    1ec0:	f000 fafe 	bl	24c0 <strcpy>

        id_str = strtok(args, " ");
    1ec4:	4f2e      	ldr	r7, [pc, #184]	; (1f80 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xe4>)
    1ec6:	0039      	movs	r1, r7
    1ec8:	0028      	movs	r0, r5
    1eca:	f000 fb43 	bl	2554 <strtok>
    1ece:	0004      	movs	r4, r0
        name = strtok(NULL, " ");
    1ed0:	0039      	movs	r1, r7
    1ed2:	2000      	movs	r0, #0
    1ed4:	f000 fb3e 	bl	2554 <strtok>
    1ed8:	0007      	movs	r7, r0
    }

    if(id_str && name && atoi(id_str)) {
    1eda:	2c00      	cmp	r4, #0
    1edc:	d006      	beq.n	1eec <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x50>
    1ede:	2f00      	cmp	r7, #0
    1ee0:	d004      	beq.n	1eec <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x50>
    1ee2:	0020      	movs	r0, r4
    1ee4:	f000 f976 	bl	21d4 <atoi>
    1ee8:	2800      	cmp	r0, #0
    1eea:	d117      	bne.n	1f1c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x80>

        m_cmd_queue.push_back(cmd);

        gsm->SendSMS(sender, "Command queued");
    } else {
        gsm->SendSMS(sender, "Usage: setname <id> <new name>");
    1eec:	4a25      	ldr	r2, [pc, #148]	; (1f84 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xe8>)
    1eee:	4649      	mov	r1, r9
    1ef0:	4640      	mov	r0, r8
    1ef2:	f7fe fb39 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
    }

    if(args) free(args);
    1ef6:	2d00      	cmp	r5, #0
    1ef8:	d002      	beq.n	1f00 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x64>
    1efa:	0028      	movs	r0, r5
    1efc:	f000 f9ac 	bl	2258 <free>
    1f00:	b009      	add	sp, #36	; 0x24
    1f02:	bc0c      	pop	{r2, r3}
    1f04:	4690      	mov	r8, r2
    1f06:	4699      	mov	r9, r3
    1f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
            gsm->SendSMS(sender, "malloc failed");
    1f0a:	4a1f      	ldr	r2, [pc, #124]	; (1f88 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xec>)
    1f0c:	4649      	mov	r1, r9
    1f0e:	4640      	mov	r0, r8
    1f10:	f7fe fb2a 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
            return;
    1f14:	e7f4      	b.n	1f00 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x64>
    char* args = NULL;
    1f16:	001d      	movs	r5, r3
    char* name = NULL;
    1f18:	001f      	movs	r7, r3
    1f1a:	e7de      	b.n	1eda <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x3e>
        cmd.id = atoi(id_str);
    1f1c:	0020      	movs	r0, r4
    1f1e:	f000 f959 	bl	21d4 <atoi>
    1f22:	466b      	mov	r3, sp
    1f24:	7018      	strb	r0, [r3, #0]
        cmd.type = Sensors::TYPE_COMMAND;
    1f26:	23ff      	movs	r3, #255	; 0xff
    1f28:	466a      	mov	r2, sp
    1f2a:	7253      	strb	r3, [r2, #9]
        cmd.data[0] = Sensors::COMMAND_SET_NAME;
    1f2c:	3bfd      	subs	r3, #253	; 0xfd
    1f2e:	7293      	strb	r3, [r2, #10]
        strncpy(cmd.name, name, sizeof(cmd.name));
    1f30:	2208      	movs	r2, #8
    1f32:	0039      	movs	r1, r7
    1f34:	466b      	mov	r3, sp
    1f36:	1c58      	adds	r0, r3, #1
    1f38:	f000 fae2 	bl	2500 <strncpy>
        m_cmd_queue.push_back(cmd);
    1f3c:	0034      	movs	r4, r6
    1f3e:	3428      	adds	r4, #40	; 0x28
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1f40:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1f42:	2900      	cmp	r1, #0
    1f44:	d017      	beq.n	1f76 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xda>
    1f46:	3101      	adds	r1, #1
    1f48:	0149      	lsls	r1, r1, #5
    1f4a:	6860      	ldr	r0, [r4, #4]
    1f4c:	f000 fa40 	bl	23d0 <realloc>
        if(!new_data) return;
    1f50:	2800      	cmp	r0, #0
    1f52:	d00a      	beq.n	1f6a <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xce>
        m_data = new_data;
    1f54:	6060      	str	r0, [r4, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
    1f56:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1f58:	015b      	lsls	r3, r3, #5
    1f5a:	18c0      	adds	r0, r0, r3
    1f5c:	2220      	movs	r2, #32
    1f5e:	4669      	mov	r1, sp
    1f60:	f000 f984 	bl	226c <memcpy>
        m_size++;
    1f64:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1f66:	3301      	adds	r3, #1
    1f68:	62b3      	str	r3, [r6, #40]	; 0x28
        gsm->SendSMS(sender, "Command queued");
    1f6a:	4a08      	ldr	r2, [pc, #32]	; (1f8c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xf0>)
    1f6c:	4649      	mov	r1, r9
    1f6e:	4640      	mov	r0, r8
    1f70:	f7fe fafa 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
    1f74:	e7bf      	b.n	1ef6 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x5a>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1f76:	2020      	movs	r0, #32
    1f78:	f000 f964 	bl	2244 <malloc>
    1f7c:	e7e8      	b.n	1f50 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xb4>
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	00003060 	.word	0x00003060
    1f84:	00003074 	.word	0x00003074
    1f88:	00003050 	.word	0x00003050
    1f8c:	00003064 	.word	0x00003064

00001f90 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
    1f90:	e7fe      	b.n	1f90 <Dummy_Handler>
    1f92:	Address 0x00001f92 is out of bounds.


00001f94 <Reset_Handler>:
{
    1f94:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1f96:	4a1e      	ldr	r2, [pc, #120]	; (2010 <Reset_Handler+0x7c>)
    1f98:	4b1e      	ldr	r3, [pc, #120]	; (2014 <Reset_Handler+0x80>)
    1f9a:	429a      	cmp	r2, r3
    1f9c:	d007      	beq.n	1fae <Reset_Handler+0x1a>
        pDest = &_data;
    1f9e:	4b1d      	ldr	r3, [pc, #116]	; (2014 <Reset_Handler+0x80>)
        pSrc = &_etext;
    1fa0:	4a1b      	ldr	r2, [pc, #108]	; (2010 <Reset_Handler+0x7c>)
    1fa2:	e001      	b.n	1fa8 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
    1fa4:	ca02      	ldmia	r2!, {r1}
    1fa6:	c302      	stmia	r3!, {r1}
                for (; pDest < &_edata;) {
    1fa8:	491b      	ldr	r1, [pc, #108]	; (2018 <Reset_Handler+0x84>)
    1faa:	428b      	cmp	r3, r1
    1fac:	d3fa      	bcc.n	1fa4 <Reset_Handler+0x10>
        pSrc = &_etext;
    1fae:	4b1b      	ldr	r3, [pc, #108]	; (201c <Reset_Handler+0x88>)
    1fb0:	e001      	b.n	1fb6 <Reset_Handler+0x22>
                *pDest++ = 0;
    1fb2:	2200      	movs	r2, #0
    1fb4:	c304      	stmia	r3!, {r2}
        for (pDest = &_bss; pDest < &_ebss;) {
    1fb6:	4a1a      	ldr	r2, [pc, #104]	; (2020 <Reset_Handler+0x8c>)
    1fb8:	4293      	cmp	r3, r2
    1fba:	d3fa      	bcc.n	1fb2 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1fbc:	4b19      	ldr	r3, [pc, #100]	; (2024 <Reset_Handler+0x90>)
    1fbe:	227f      	movs	r2, #127	; 0x7f
    1fc0:	4393      	bics	r3, r2
    1fc2:	4a19      	ldr	r2, [pc, #100]	; (2028 <Reset_Handler+0x94>)
    1fc4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1fc6:	4a19      	ldr	r2, [pc, #100]	; (202c <Reset_Handler+0x98>)
    1fc8:	2390      	movs	r3, #144	; 0x90
    1fca:	005b      	lsls	r3, r3, #1
    1fcc:	2102      	movs	r1, #2
    1fce:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1fd0:	4b17      	ldr	r3, [pc, #92]	; (2030 <Reset_Handler+0x9c>)
    1fd2:	7b9a      	ldrb	r2, [r3, #14]
    1fd4:	312e      	adds	r1, #46	; 0x2e
    1fd6:	438a      	bics	r2, r1
    1fd8:	2120      	movs	r1, #32
    1fda:	430a      	orrs	r2, r1
    1fdc:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1fde:	7b9a      	ldrb	r2, [r3, #14]
    1fe0:	210c      	movs	r1, #12
    1fe2:	438a      	bics	r2, r1
    1fe4:	2108      	movs	r1, #8
    1fe6:	430a      	orrs	r2, r1
    1fe8:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1fea:	7b9a      	ldrb	r2, [r3, #14]
    1fec:	2103      	movs	r1, #3
    1fee:	438a      	bics	r2, r1
    1ff0:	2102      	movs	r1, #2
    1ff2:	430a      	orrs	r2, r1
    1ff4:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1ff6:	4a0f      	ldr	r2, [pc, #60]	; (2034 <Reset_Handler+0xa0>)
    1ff8:	6851      	ldr	r1, [r2, #4]
    1ffa:	2380      	movs	r3, #128	; 0x80
    1ffc:	430b      	orrs	r3, r1
    1ffe:	6053      	str	r3, [r2, #4]
        systick_init();
    2000:	f7ff fb46 	bl	1690 <systick_init>
        __libc_init_array();
    2004:	f000 f8fa 	bl	21fc <__libc_init_array>
        main();
    2008:	f7ff f8b8 	bl	117c <main>
        while (1);
    200c:	e7fe      	b.n	200c <Reset_Handler+0x78>
    200e:	46c0      	nop			; (mov r8, r8)
    2010:	00003264 	.word	0x00003264
    2014:	20000000 	.word	0x20000000
    2018:	20000078 	.word	0x20000078
    201c:	20000078 	.word	0x20000078
    2020:	20000524 	.word	0x20000524
    2024:	00000000 	.word	0x00000000
    2028:	e000ed00 	.word	0xe000ed00
    202c:	41007000 	.word	0x41007000
    2030:	41004800 	.word	0x41004800
    2034:	41004000 	.word	0x41004000

00002038 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2038:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    203a:	4a06      	ldr	r2, [pc, #24]	; (2054 <_sbrk+0x1c>)
    203c:	6812      	ldr	r2, [r2, #0]
    203e:	2a00      	cmp	r2, #0
    2040:	d004      	beq.n	204c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2042:	4a04      	ldr	r2, [pc, #16]	; (2054 <_sbrk+0x1c>)
    2044:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2046:	18c3      	adds	r3, r0, r3
    2048:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    204a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    204c:	4a01      	ldr	r2, [pc, #4]	; (2054 <_sbrk+0x1c>)
    204e:	4902      	ldr	r1, [pc, #8]	; (2058 <_sbrk+0x20>)
    2050:	6011      	str	r1, [r2, #0]
    2052:	e7f6      	b.n	2042 <_sbrk+0xa>
    2054:	20000508 	.word	0x20000508
    2058:	20000524 	.word	0x20000524

0000205c <__aeabi_atexit>:
    205c:	0003      	movs	r3, r0
    205e:	b510      	push	{r4, lr}
    2060:	0008      	movs	r0, r1
    2062:	0019      	movs	r1, r3
    2064:	f000 f8bc 	bl	21e0 <__cxa_atexit>
    2068:	bd10      	pop	{r4, pc}
    206a:	Address 0x0000206a is out of bounds.


0000206c <__udivsi3>:
    206c:	2200      	movs	r2, #0
    206e:	0843      	lsrs	r3, r0, #1
    2070:	428b      	cmp	r3, r1
    2072:	d374      	bcc.n	215e <__udivsi3+0xf2>
    2074:	0903      	lsrs	r3, r0, #4
    2076:	428b      	cmp	r3, r1
    2078:	d35f      	bcc.n	213a <__udivsi3+0xce>
    207a:	0a03      	lsrs	r3, r0, #8
    207c:	428b      	cmp	r3, r1
    207e:	d344      	bcc.n	210a <__udivsi3+0x9e>
    2080:	0b03      	lsrs	r3, r0, #12
    2082:	428b      	cmp	r3, r1
    2084:	d328      	bcc.n	20d8 <__udivsi3+0x6c>
    2086:	0c03      	lsrs	r3, r0, #16
    2088:	428b      	cmp	r3, r1
    208a:	d30d      	bcc.n	20a8 <__udivsi3+0x3c>
    208c:	22ff      	movs	r2, #255	; 0xff
    208e:	0209      	lsls	r1, r1, #8
    2090:	ba12      	rev	r2, r2
    2092:	0c03      	lsrs	r3, r0, #16
    2094:	428b      	cmp	r3, r1
    2096:	d302      	bcc.n	209e <__udivsi3+0x32>
    2098:	1212      	asrs	r2, r2, #8
    209a:	0209      	lsls	r1, r1, #8
    209c:	d065      	beq.n	216a <__udivsi3+0xfe>
    209e:	0b03      	lsrs	r3, r0, #12
    20a0:	428b      	cmp	r3, r1
    20a2:	d319      	bcc.n	20d8 <__udivsi3+0x6c>
    20a4:	e000      	b.n	20a8 <__udivsi3+0x3c>
    20a6:	0a09      	lsrs	r1, r1, #8
    20a8:	0bc3      	lsrs	r3, r0, #15
    20aa:	428b      	cmp	r3, r1
    20ac:	d301      	bcc.n	20b2 <__udivsi3+0x46>
    20ae:	03cb      	lsls	r3, r1, #15
    20b0:	1ac0      	subs	r0, r0, r3
    20b2:	4152      	adcs	r2, r2
    20b4:	0b83      	lsrs	r3, r0, #14
    20b6:	428b      	cmp	r3, r1
    20b8:	d301      	bcc.n	20be <__udivsi3+0x52>
    20ba:	038b      	lsls	r3, r1, #14
    20bc:	1ac0      	subs	r0, r0, r3
    20be:	4152      	adcs	r2, r2
    20c0:	0b43      	lsrs	r3, r0, #13
    20c2:	428b      	cmp	r3, r1
    20c4:	d301      	bcc.n	20ca <__udivsi3+0x5e>
    20c6:	034b      	lsls	r3, r1, #13
    20c8:	1ac0      	subs	r0, r0, r3
    20ca:	4152      	adcs	r2, r2
    20cc:	0b03      	lsrs	r3, r0, #12
    20ce:	428b      	cmp	r3, r1
    20d0:	d301      	bcc.n	20d6 <__udivsi3+0x6a>
    20d2:	030b      	lsls	r3, r1, #12
    20d4:	1ac0      	subs	r0, r0, r3
    20d6:	4152      	adcs	r2, r2
    20d8:	0ac3      	lsrs	r3, r0, #11
    20da:	428b      	cmp	r3, r1
    20dc:	d301      	bcc.n	20e2 <__udivsi3+0x76>
    20de:	02cb      	lsls	r3, r1, #11
    20e0:	1ac0      	subs	r0, r0, r3
    20e2:	4152      	adcs	r2, r2
    20e4:	0a83      	lsrs	r3, r0, #10
    20e6:	428b      	cmp	r3, r1
    20e8:	d301      	bcc.n	20ee <__udivsi3+0x82>
    20ea:	028b      	lsls	r3, r1, #10
    20ec:	1ac0      	subs	r0, r0, r3
    20ee:	4152      	adcs	r2, r2
    20f0:	0a43      	lsrs	r3, r0, #9
    20f2:	428b      	cmp	r3, r1
    20f4:	d301      	bcc.n	20fa <__udivsi3+0x8e>
    20f6:	024b      	lsls	r3, r1, #9
    20f8:	1ac0      	subs	r0, r0, r3
    20fa:	4152      	adcs	r2, r2
    20fc:	0a03      	lsrs	r3, r0, #8
    20fe:	428b      	cmp	r3, r1
    2100:	d301      	bcc.n	2106 <__udivsi3+0x9a>
    2102:	020b      	lsls	r3, r1, #8
    2104:	1ac0      	subs	r0, r0, r3
    2106:	4152      	adcs	r2, r2
    2108:	d2cd      	bcs.n	20a6 <__udivsi3+0x3a>
    210a:	09c3      	lsrs	r3, r0, #7
    210c:	428b      	cmp	r3, r1
    210e:	d301      	bcc.n	2114 <__udivsi3+0xa8>
    2110:	01cb      	lsls	r3, r1, #7
    2112:	1ac0      	subs	r0, r0, r3
    2114:	4152      	adcs	r2, r2
    2116:	0983      	lsrs	r3, r0, #6
    2118:	428b      	cmp	r3, r1
    211a:	d301      	bcc.n	2120 <__udivsi3+0xb4>
    211c:	018b      	lsls	r3, r1, #6
    211e:	1ac0      	subs	r0, r0, r3
    2120:	4152      	adcs	r2, r2
    2122:	0943      	lsrs	r3, r0, #5
    2124:	428b      	cmp	r3, r1
    2126:	d301      	bcc.n	212c <__udivsi3+0xc0>
    2128:	014b      	lsls	r3, r1, #5
    212a:	1ac0      	subs	r0, r0, r3
    212c:	4152      	adcs	r2, r2
    212e:	0903      	lsrs	r3, r0, #4
    2130:	428b      	cmp	r3, r1
    2132:	d301      	bcc.n	2138 <__udivsi3+0xcc>
    2134:	010b      	lsls	r3, r1, #4
    2136:	1ac0      	subs	r0, r0, r3
    2138:	4152      	adcs	r2, r2
    213a:	08c3      	lsrs	r3, r0, #3
    213c:	428b      	cmp	r3, r1
    213e:	d301      	bcc.n	2144 <__udivsi3+0xd8>
    2140:	00cb      	lsls	r3, r1, #3
    2142:	1ac0      	subs	r0, r0, r3
    2144:	4152      	adcs	r2, r2
    2146:	0883      	lsrs	r3, r0, #2
    2148:	428b      	cmp	r3, r1
    214a:	d301      	bcc.n	2150 <__udivsi3+0xe4>
    214c:	008b      	lsls	r3, r1, #2
    214e:	1ac0      	subs	r0, r0, r3
    2150:	4152      	adcs	r2, r2
    2152:	0843      	lsrs	r3, r0, #1
    2154:	428b      	cmp	r3, r1
    2156:	d301      	bcc.n	215c <__udivsi3+0xf0>
    2158:	004b      	lsls	r3, r1, #1
    215a:	1ac0      	subs	r0, r0, r3
    215c:	4152      	adcs	r2, r2
    215e:	1a41      	subs	r1, r0, r1
    2160:	d200      	bcs.n	2164 <__udivsi3+0xf8>
    2162:	4601      	mov	r1, r0
    2164:	4152      	adcs	r2, r2
    2166:	4610      	mov	r0, r2
    2168:	4770      	bx	lr
    216a:	e7ff      	b.n	216c <__udivsi3+0x100>
    216c:	b501      	push	{r0, lr}
    216e:	2000      	movs	r0, #0
    2170:	f000 f806 	bl	2180 <__aeabi_idiv0>
    2174:	bd02      	pop	{r1, pc}
    2176:	46c0      	nop			; (mov r8, r8)

00002178 <__aeabi_uidivmod>:
    2178:	2900      	cmp	r1, #0
    217a:	d0f7      	beq.n	216c <__udivsi3+0x100>
    217c:	e776      	b.n	206c <__udivsi3>
    217e:	4770      	bx	lr

00002180 <__aeabi_idiv0>:
    2180:	4770      	bx	lr
    2182:	46c0      	nop			; (mov r8, r8)

00002184 <__aeabi_lmul>:
    2184:	b5f0      	push	{r4, r5, r6, r7, lr}
    2186:	0415      	lsls	r5, r2, #16
    2188:	0c2d      	lsrs	r5, r5, #16
    218a:	000f      	movs	r7, r1
    218c:	0001      	movs	r1, r0
    218e:	002e      	movs	r6, r5
    2190:	46c6      	mov	lr, r8
    2192:	4684      	mov	ip, r0
    2194:	0400      	lsls	r0, r0, #16
    2196:	0c14      	lsrs	r4, r2, #16
    2198:	0c00      	lsrs	r0, r0, #16
    219a:	0c09      	lsrs	r1, r1, #16
    219c:	4346      	muls	r6, r0
    219e:	434d      	muls	r5, r1
    21a0:	4360      	muls	r0, r4
    21a2:	4361      	muls	r1, r4
    21a4:	1940      	adds	r0, r0, r5
    21a6:	0c34      	lsrs	r4, r6, #16
    21a8:	1824      	adds	r4, r4, r0
    21aa:	b500      	push	{lr}
    21ac:	42a5      	cmp	r5, r4
    21ae:	d903      	bls.n	21b8 <__aeabi_lmul+0x34>
    21b0:	2080      	movs	r0, #128	; 0x80
    21b2:	0240      	lsls	r0, r0, #9
    21b4:	4680      	mov	r8, r0
    21b6:	4441      	add	r1, r8
    21b8:	0c25      	lsrs	r5, r4, #16
    21ba:	186d      	adds	r5, r5, r1
    21bc:	4661      	mov	r1, ip
    21be:	4359      	muls	r1, r3
    21c0:	437a      	muls	r2, r7
    21c2:	0430      	lsls	r0, r6, #16
    21c4:	1949      	adds	r1, r1, r5
    21c6:	0424      	lsls	r4, r4, #16
    21c8:	0c00      	lsrs	r0, r0, #16
    21ca:	1820      	adds	r0, r4, r0
    21cc:	1889      	adds	r1, r1, r2
    21ce:	bc04      	pop	{r2}
    21d0:	4690      	mov	r8, r2
    21d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000021d4 <atoi>:
    21d4:	b510      	push	{r4, lr}
    21d6:	220a      	movs	r2, #10
    21d8:	2100      	movs	r1, #0
    21da:	f000 fa95 	bl	2708 <strtol>
    21de:	bd10      	pop	{r4, pc}

000021e0 <__cxa_atexit>:
    21e0:	b510      	push	{r4, lr}
    21e2:	0004      	movs	r4, r0
    21e4:	4804      	ldr	r0, [pc, #16]	; (21f8 <__cxa_atexit+0x18>)
    21e6:	0013      	movs	r3, r2
    21e8:	2800      	cmp	r0, #0
    21ea:	d004      	beq.n	21f6 <__cxa_atexit+0x16>
    21ec:	000a      	movs	r2, r1
    21ee:	2002      	movs	r0, #2
    21f0:	0021      	movs	r1, r4
    21f2:	e000      	b.n	21f6 <__cxa_atexit+0x16>
    21f4:	bf00      	nop
    21f6:	bd10      	pop	{r4, pc}
    21f8:	00000000 	.word	0x00000000

000021fc <__libc_init_array>:
    21fc:	b570      	push	{r4, r5, r6, lr}
    21fe:	2600      	movs	r6, #0
    2200:	4d0c      	ldr	r5, [pc, #48]	; (2234 <__libc_init_array+0x38>)
    2202:	4c0d      	ldr	r4, [pc, #52]	; (2238 <__libc_init_array+0x3c>)
    2204:	1b64      	subs	r4, r4, r5
    2206:	10a4      	asrs	r4, r4, #2
    2208:	42a6      	cmp	r6, r4
    220a:	d109      	bne.n	2220 <__libc_init_array+0x24>
    220c:	2600      	movs	r6, #0
    220e:	f001 f80b 	bl	3228 <_init>
    2212:	4d0a      	ldr	r5, [pc, #40]	; (223c <__libc_init_array+0x40>)
    2214:	4c0a      	ldr	r4, [pc, #40]	; (2240 <__libc_init_array+0x44>)
    2216:	1b64      	subs	r4, r4, r5
    2218:	10a4      	asrs	r4, r4, #2
    221a:	42a6      	cmp	r6, r4
    221c:	d105      	bne.n	222a <__libc_init_array+0x2e>
    221e:	bd70      	pop	{r4, r5, r6, pc}
    2220:	00b3      	lsls	r3, r6, #2
    2222:	58eb      	ldr	r3, [r5, r3]
    2224:	4798      	blx	r3
    2226:	3601      	adds	r6, #1
    2228:	e7ee      	b.n	2208 <__libc_init_array+0xc>
    222a:	00b3      	lsls	r3, r6, #2
    222c:	58eb      	ldr	r3, [r5, r3]
    222e:	4798      	blx	r3
    2230:	3601      	adds	r6, #1
    2232:	e7f2      	b.n	221a <__libc_init_array+0x1e>
    2234:	00003234 	.word	0x00003234
    2238:	00003234 	.word	0x00003234
    223c:	00003234 	.word	0x00003234
    2240:	00003244 	.word	0x00003244

00002244 <malloc>:
    2244:	b510      	push	{r4, lr}
    2246:	4b03      	ldr	r3, [pc, #12]	; (2254 <malloc+0x10>)
    2248:	0001      	movs	r1, r0
    224a:	6818      	ldr	r0, [r3, #0]
    224c:	f000 f862 	bl	2314 <_malloc_r>
    2250:	bd10      	pop	{r4, pc}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	20000014 	.word	0x20000014

00002258 <free>:
    2258:	b510      	push	{r4, lr}
    225a:	4b03      	ldr	r3, [pc, #12]	; (2268 <free+0x10>)
    225c:	0001      	movs	r1, r0
    225e:	6818      	ldr	r0, [r3, #0]
    2260:	f000 f80e 	bl	2280 <_free_r>
    2264:	bd10      	pop	{r4, pc}
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	20000014 	.word	0x20000014

0000226c <memcpy>:
    226c:	2300      	movs	r3, #0
    226e:	b510      	push	{r4, lr}
    2270:	429a      	cmp	r2, r3
    2272:	d100      	bne.n	2276 <memcpy+0xa>
    2274:	bd10      	pop	{r4, pc}
    2276:	5ccc      	ldrb	r4, [r1, r3]
    2278:	54c4      	strb	r4, [r0, r3]
    227a:	3301      	adds	r3, #1
    227c:	e7f8      	b.n	2270 <memcpy+0x4>
    227e:	Address 0x0000227e is out of bounds.


00002280 <_free_r>:
    2280:	b570      	push	{r4, r5, r6, lr}
    2282:	0005      	movs	r5, r0
    2284:	2900      	cmp	r1, #0
    2286:	d010      	beq.n	22aa <_free_r+0x2a>
    2288:	1f0c      	subs	r4, r1, #4
    228a:	6823      	ldr	r3, [r4, #0]
    228c:	2b00      	cmp	r3, #0
    228e:	da00      	bge.n	2292 <_free_r+0x12>
    2290:	18e4      	adds	r4, r4, r3
    2292:	0028      	movs	r0, r5
    2294:	f000 fa7e 	bl	2794 <__malloc_lock>
    2298:	4a1d      	ldr	r2, [pc, #116]	; (2310 <_free_r+0x90>)
    229a:	6813      	ldr	r3, [r2, #0]
    229c:	2b00      	cmp	r3, #0
    229e:	d105      	bne.n	22ac <_free_r+0x2c>
    22a0:	6063      	str	r3, [r4, #4]
    22a2:	6014      	str	r4, [r2, #0]
    22a4:	0028      	movs	r0, r5
    22a6:	f000 fa7d 	bl	27a4 <__malloc_unlock>
    22aa:	bd70      	pop	{r4, r5, r6, pc}
    22ac:	42a3      	cmp	r3, r4
    22ae:	d908      	bls.n	22c2 <_free_r+0x42>
    22b0:	6821      	ldr	r1, [r4, #0]
    22b2:	1860      	adds	r0, r4, r1
    22b4:	4283      	cmp	r3, r0
    22b6:	d1f3      	bne.n	22a0 <_free_r+0x20>
    22b8:	6818      	ldr	r0, [r3, #0]
    22ba:	685b      	ldr	r3, [r3, #4]
    22bc:	1841      	adds	r1, r0, r1
    22be:	6021      	str	r1, [r4, #0]
    22c0:	e7ee      	b.n	22a0 <_free_r+0x20>
    22c2:	001a      	movs	r2, r3
    22c4:	685b      	ldr	r3, [r3, #4]
    22c6:	2b00      	cmp	r3, #0
    22c8:	d001      	beq.n	22ce <_free_r+0x4e>
    22ca:	42a3      	cmp	r3, r4
    22cc:	d9f9      	bls.n	22c2 <_free_r+0x42>
    22ce:	6811      	ldr	r1, [r2, #0]
    22d0:	1850      	adds	r0, r2, r1
    22d2:	42a0      	cmp	r0, r4
    22d4:	d10b      	bne.n	22ee <_free_r+0x6e>
    22d6:	6820      	ldr	r0, [r4, #0]
    22d8:	1809      	adds	r1, r1, r0
    22da:	1850      	adds	r0, r2, r1
    22dc:	6011      	str	r1, [r2, #0]
    22de:	4283      	cmp	r3, r0
    22e0:	d1e0      	bne.n	22a4 <_free_r+0x24>
    22e2:	6818      	ldr	r0, [r3, #0]
    22e4:	685b      	ldr	r3, [r3, #4]
    22e6:	1841      	adds	r1, r0, r1
    22e8:	6011      	str	r1, [r2, #0]
    22ea:	6053      	str	r3, [r2, #4]
    22ec:	e7da      	b.n	22a4 <_free_r+0x24>
    22ee:	42a0      	cmp	r0, r4
    22f0:	d902      	bls.n	22f8 <_free_r+0x78>
    22f2:	230c      	movs	r3, #12
    22f4:	602b      	str	r3, [r5, #0]
    22f6:	e7d5      	b.n	22a4 <_free_r+0x24>
    22f8:	6821      	ldr	r1, [r4, #0]
    22fa:	1860      	adds	r0, r4, r1
    22fc:	4283      	cmp	r3, r0
    22fe:	d103      	bne.n	2308 <_free_r+0x88>
    2300:	6818      	ldr	r0, [r3, #0]
    2302:	685b      	ldr	r3, [r3, #4]
    2304:	1841      	adds	r1, r0, r1
    2306:	6021      	str	r1, [r4, #0]
    2308:	6063      	str	r3, [r4, #4]
    230a:	6054      	str	r4, [r2, #4]
    230c:	e7ca      	b.n	22a4 <_free_r+0x24>
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	2000050c 	.word	0x2000050c

00002314 <_malloc_r>:
    2314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2316:	2303      	movs	r3, #3
    2318:	1ccd      	adds	r5, r1, #3
    231a:	439d      	bics	r5, r3
    231c:	3508      	adds	r5, #8
    231e:	0006      	movs	r6, r0
    2320:	2d0c      	cmp	r5, #12
    2322:	d21f      	bcs.n	2364 <_malloc_r+0x50>
    2324:	250c      	movs	r5, #12
    2326:	42a9      	cmp	r1, r5
    2328:	d81e      	bhi.n	2368 <_malloc_r+0x54>
    232a:	0030      	movs	r0, r6
    232c:	f000 fa32 	bl	2794 <__malloc_lock>
    2330:	4925      	ldr	r1, [pc, #148]	; (23c8 <_malloc_r+0xb4>)
    2332:	680a      	ldr	r2, [r1, #0]
    2334:	0014      	movs	r4, r2
    2336:	2c00      	cmp	r4, #0
    2338:	d11a      	bne.n	2370 <_malloc_r+0x5c>
    233a:	4f24      	ldr	r7, [pc, #144]	; (23cc <_malloc_r+0xb8>)
    233c:	683b      	ldr	r3, [r7, #0]
    233e:	2b00      	cmp	r3, #0
    2340:	d104      	bne.n	234c <_malloc_r+0x38>
    2342:	0021      	movs	r1, r4
    2344:	0030      	movs	r0, r6
    2346:	f000 f84d 	bl	23e4 <_sbrk_r>
    234a:	6038      	str	r0, [r7, #0]
    234c:	0029      	movs	r1, r5
    234e:	0030      	movs	r0, r6
    2350:	f000 f848 	bl	23e4 <_sbrk_r>
    2354:	1c43      	adds	r3, r0, #1
    2356:	d12b      	bne.n	23b0 <_malloc_r+0x9c>
    2358:	230c      	movs	r3, #12
    235a:	0030      	movs	r0, r6
    235c:	6033      	str	r3, [r6, #0]
    235e:	f000 fa21 	bl	27a4 <__malloc_unlock>
    2362:	e003      	b.n	236c <_malloc_r+0x58>
    2364:	2d00      	cmp	r5, #0
    2366:	dade      	bge.n	2326 <_malloc_r+0x12>
    2368:	230c      	movs	r3, #12
    236a:	6033      	str	r3, [r6, #0]
    236c:	2000      	movs	r0, #0
    236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2370:	6823      	ldr	r3, [r4, #0]
    2372:	1b5b      	subs	r3, r3, r5
    2374:	d419      	bmi.n	23aa <_malloc_r+0x96>
    2376:	2b0b      	cmp	r3, #11
    2378:	d903      	bls.n	2382 <_malloc_r+0x6e>
    237a:	6023      	str	r3, [r4, #0]
    237c:	18e4      	adds	r4, r4, r3
    237e:	6025      	str	r5, [r4, #0]
    2380:	e003      	b.n	238a <_malloc_r+0x76>
    2382:	6863      	ldr	r3, [r4, #4]
    2384:	42a2      	cmp	r2, r4
    2386:	d10e      	bne.n	23a6 <_malloc_r+0x92>
    2388:	600b      	str	r3, [r1, #0]
    238a:	0030      	movs	r0, r6
    238c:	f000 fa0a 	bl	27a4 <__malloc_unlock>
    2390:	0020      	movs	r0, r4
    2392:	2207      	movs	r2, #7
    2394:	300b      	adds	r0, #11
    2396:	1d23      	adds	r3, r4, #4
    2398:	4390      	bics	r0, r2
    239a:	1ac2      	subs	r2, r0, r3
    239c:	4298      	cmp	r0, r3
    239e:	d0e6      	beq.n	236e <_malloc_r+0x5a>
    23a0:	1a1b      	subs	r3, r3, r0
    23a2:	50a3      	str	r3, [r4, r2]
    23a4:	e7e3      	b.n	236e <_malloc_r+0x5a>
    23a6:	6053      	str	r3, [r2, #4]
    23a8:	e7ef      	b.n	238a <_malloc_r+0x76>
    23aa:	0022      	movs	r2, r4
    23ac:	6864      	ldr	r4, [r4, #4]
    23ae:	e7c2      	b.n	2336 <_malloc_r+0x22>
    23b0:	2303      	movs	r3, #3
    23b2:	1cc4      	adds	r4, r0, #3
    23b4:	439c      	bics	r4, r3
    23b6:	42a0      	cmp	r0, r4
    23b8:	d0e1      	beq.n	237e <_malloc_r+0x6a>
    23ba:	1a21      	subs	r1, r4, r0
    23bc:	0030      	movs	r0, r6
    23be:	f000 f811 	bl	23e4 <_sbrk_r>
    23c2:	1c43      	adds	r3, r0, #1
    23c4:	d1db      	bne.n	237e <_malloc_r+0x6a>
    23c6:	e7c7      	b.n	2358 <_malloc_r+0x44>
    23c8:	2000050c 	.word	0x2000050c
    23cc:	20000510 	.word	0x20000510

000023d0 <realloc>:
    23d0:	b510      	push	{r4, lr}
    23d2:	4b03      	ldr	r3, [pc, #12]	; (23e0 <realloc+0x10>)
    23d4:	000a      	movs	r2, r1
    23d6:	0001      	movs	r1, r0
    23d8:	6818      	ldr	r0, [r3, #0]
    23da:	f000 f9eb 	bl	27b4 <_realloc_r>
    23de:	bd10      	pop	{r4, pc}
    23e0:	20000014 	.word	0x20000014

000023e4 <_sbrk_r>:
    23e4:	2300      	movs	r3, #0
    23e6:	b570      	push	{r4, r5, r6, lr}
    23e8:	4d06      	ldr	r5, [pc, #24]	; (2404 <_sbrk_r+0x20>)
    23ea:	0004      	movs	r4, r0
    23ec:	0008      	movs	r0, r1
    23ee:	602b      	str	r3, [r5, #0]
    23f0:	f7ff fe22 	bl	2038 <_sbrk>
    23f4:	1c43      	adds	r3, r0, #1
    23f6:	d103      	bne.n	2400 <_sbrk_r+0x1c>
    23f8:	682b      	ldr	r3, [r5, #0]
    23fa:	2b00      	cmp	r3, #0
    23fc:	d000      	beq.n	2400 <_sbrk_r+0x1c>
    23fe:	6023      	str	r3, [r4, #0]
    2400:	bd70      	pop	{r4, r5, r6, pc}
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	20000520 	.word	0x20000520

00002408 <sniprintf>:
    2408:	b40c      	push	{r2, r3}
    240a:	b530      	push	{r4, r5, lr}
    240c:	4b17      	ldr	r3, [pc, #92]	; (246c <sniprintf+0x64>)
    240e:	000c      	movs	r4, r1
    2410:	681d      	ldr	r5, [r3, #0]
    2412:	b09d      	sub	sp, #116	; 0x74
    2414:	2900      	cmp	r1, #0
    2416:	da08      	bge.n	242a <sniprintf+0x22>
    2418:	238b      	movs	r3, #139	; 0x8b
    241a:	2001      	movs	r0, #1
    241c:	602b      	str	r3, [r5, #0]
    241e:	4240      	negs	r0, r0
    2420:	b01d      	add	sp, #116	; 0x74
    2422:	bc30      	pop	{r4, r5}
    2424:	bc08      	pop	{r3}
    2426:	b002      	add	sp, #8
    2428:	4718      	bx	r3
    242a:	2382      	movs	r3, #130	; 0x82
    242c:	466a      	mov	r2, sp
    242e:	009b      	lsls	r3, r3, #2
    2430:	8293      	strh	r3, [r2, #20]
    2432:	2300      	movs	r3, #0
    2434:	9002      	str	r0, [sp, #8]
    2436:	9006      	str	r0, [sp, #24]
    2438:	4299      	cmp	r1, r3
    243a:	d000      	beq.n	243e <sniprintf+0x36>
    243c:	1e4b      	subs	r3, r1, #1
    243e:	9304      	str	r3, [sp, #16]
    2440:	9307      	str	r3, [sp, #28]
    2442:	2301      	movs	r3, #1
    2444:	466a      	mov	r2, sp
    2446:	425b      	negs	r3, r3
    2448:	82d3      	strh	r3, [r2, #22]
    244a:	0028      	movs	r0, r5
    244c:	ab21      	add	r3, sp, #132	; 0x84
    244e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    2450:	a902      	add	r1, sp, #8
    2452:	9301      	str	r3, [sp, #4]
    2454:	f000 fa36 	bl	28c4 <_svfiprintf_r>
    2458:	1c43      	adds	r3, r0, #1
    245a:	da01      	bge.n	2460 <sniprintf+0x58>
    245c:	238b      	movs	r3, #139	; 0x8b
    245e:	602b      	str	r3, [r5, #0]
    2460:	2c00      	cmp	r4, #0
    2462:	d0dd      	beq.n	2420 <sniprintf+0x18>
    2464:	2300      	movs	r3, #0
    2466:	9a02      	ldr	r2, [sp, #8]
    2468:	7013      	strb	r3, [r2, #0]
    246a:	e7d9      	b.n	2420 <sniprintf+0x18>
    246c:	20000014 	.word	0x20000014

00002470 <strcasecmp>:
    2470:	b5f0      	push	{r4, r5, r6, r7, lr}
    2472:	0005      	movs	r5, r0
    2474:	2400      	movs	r4, #0
    2476:	2703      	movs	r7, #3
    2478:	4e09      	ldr	r6, [pc, #36]	; (24a0 <strcasecmp+0x30>)
    247a:	5d2a      	ldrb	r2, [r5, r4]
    247c:	5cb3      	ldrb	r3, [r6, r2]
    247e:	403b      	ands	r3, r7
    2480:	2b01      	cmp	r3, #1
    2482:	d100      	bne.n	2486 <strcasecmp+0x16>
    2484:	3220      	adds	r2, #32
    2486:	5d0b      	ldrb	r3, [r1, r4]
    2488:	5cf0      	ldrb	r0, [r6, r3]
    248a:	4038      	ands	r0, r7
    248c:	2801      	cmp	r0, #1
    248e:	d100      	bne.n	2492 <strcasecmp+0x22>
    2490:	3320      	adds	r3, #32
    2492:	1ad0      	subs	r0, r2, r3
    2494:	429a      	cmp	r2, r3
    2496:	d102      	bne.n	249e <strcasecmp+0x2e>
    2498:	3401      	adds	r4, #1
    249a:	2b00      	cmp	r3, #0
    249c:	d1ed      	bne.n	247a <strcasecmp+0xa>
    249e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24a0:	00003094 	.word	0x00003094

000024a4 <strchr>:
    24a4:	b2c9      	uxtb	r1, r1
    24a6:	7803      	ldrb	r3, [r0, #0]
    24a8:	2b00      	cmp	r3, #0
    24aa:	d004      	beq.n	24b6 <strchr+0x12>
    24ac:	428b      	cmp	r3, r1
    24ae:	d100      	bne.n	24b2 <strchr+0xe>
    24b0:	4770      	bx	lr
    24b2:	3001      	adds	r0, #1
    24b4:	e7f7      	b.n	24a6 <strchr+0x2>
    24b6:	424b      	negs	r3, r1
    24b8:	4159      	adcs	r1, r3
    24ba:	4249      	negs	r1, r1
    24bc:	4008      	ands	r0, r1
    24be:	e7f7      	b.n	24b0 <strchr+0xc>

000024c0 <strcpy>:
    24c0:	0003      	movs	r3, r0
    24c2:	780a      	ldrb	r2, [r1, #0]
    24c4:	3101      	adds	r1, #1
    24c6:	701a      	strb	r2, [r3, #0]
    24c8:	3301      	adds	r3, #1
    24ca:	2a00      	cmp	r2, #0
    24cc:	d1f9      	bne.n	24c2 <strcpy+0x2>
    24ce:	4770      	bx	lr

000024d0 <strlen>:
    24d0:	2300      	movs	r3, #0
    24d2:	5cc2      	ldrb	r2, [r0, r3]
    24d4:	3301      	adds	r3, #1
    24d6:	2a00      	cmp	r2, #0
    24d8:	d1fb      	bne.n	24d2 <strlen+0x2>
    24da:	1e58      	subs	r0, r3, #1
    24dc:	4770      	bx	lr

000024de <strncmp>:
    24de:	b530      	push	{r4, r5, lr}
    24e0:	0005      	movs	r5, r0
    24e2:	1e10      	subs	r0, r2, #0
    24e4:	d00b      	beq.n	24fe <strncmp+0x20>
    24e6:	2400      	movs	r4, #0
    24e8:	3a01      	subs	r2, #1
    24ea:	5d2b      	ldrb	r3, [r5, r4]
    24ec:	5d08      	ldrb	r0, [r1, r4]
    24ee:	4283      	cmp	r3, r0
    24f0:	d104      	bne.n	24fc <strncmp+0x1e>
    24f2:	4294      	cmp	r4, r2
    24f4:	d002      	beq.n	24fc <strncmp+0x1e>
    24f6:	3401      	adds	r4, #1
    24f8:	2b00      	cmp	r3, #0
    24fa:	d1f6      	bne.n	24ea <strncmp+0xc>
    24fc:	1a18      	subs	r0, r3, r0
    24fe:	bd30      	pop	{r4, r5, pc}

00002500 <strncpy>:
    2500:	0003      	movs	r3, r0
    2502:	b530      	push	{r4, r5, lr}
    2504:	001d      	movs	r5, r3
    2506:	2a00      	cmp	r2, #0
    2508:	d006      	beq.n	2518 <strncpy+0x18>
    250a:	780c      	ldrb	r4, [r1, #0]
    250c:	3a01      	subs	r2, #1
    250e:	3301      	adds	r3, #1
    2510:	702c      	strb	r4, [r5, #0]
    2512:	3101      	adds	r1, #1
    2514:	2c00      	cmp	r4, #0
    2516:	d1f5      	bne.n	2504 <strncpy+0x4>
    2518:	2100      	movs	r1, #0
    251a:	189a      	adds	r2, r3, r2
    251c:	4293      	cmp	r3, r2
    251e:	d100      	bne.n	2522 <strncpy+0x22>
    2520:	bd30      	pop	{r4, r5, pc}
    2522:	7019      	strb	r1, [r3, #0]
    2524:	3301      	adds	r3, #1
    2526:	e7f9      	b.n	251c <strncpy+0x1c>

00002528 <strstr>:
    2528:	780a      	ldrb	r2, [r1, #0]
    252a:	b530      	push	{r4, r5, lr}
    252c:	2a00      	cmp	r2, #0
    252e:	d10c      	bne.n	254a <strstr+0x22>
    2530:	bd30      	pop	{r4, r5, pc}
    2532:	429a      	cmp	r2, r3
    2534:	d108      	bne.n	2548 <strstr+0x20>
    2536:	2301      	movs	r3, #1
    2538:	5ccc      	ldrb	r4, [r1, r3]
    253a:	2c00      	cmp	r4, #0
    253c:	d0f8      	beq.n	2530 <strstr+0x8>
    253e:	5cc5      	ldrb	r5, [r0, r3]
    2540:	42a5      	cmp	r5, r4
    2542:	d101      	bne.n	2548 <strstr+0x20>
    2544:	3301      	adds	r3, #1
    2546:	e7f7      	b.n	2538 <strstr+0x10>
    2548:	3001      	adds	r0, #1
    254a:	7803      	ldrb	r3, [r0, #0]
    254c:	2b00      	cmp	r3, #0
    254e:	d1f0      	bne.n	2532 <strstr+0xa>
    2550:	0018      	movs	r0, r3
    2552:	e7ed      	b.n	2530 <strstr+0x8>

00002554 <strtok>:
    2554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2556:	4b12      	ldr	r3, [pc, #72]	; (25a0 <strtok+0x4c>)
    2558:	0005      	movs	r5, r0
    255a:	681f      	ldr	r7, [r3, #0]
    255c:	000e      	movs	r6, r1
    255e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
    2560:	2c00      	cmp	r4, #0
    2562:	d116      	bne.n	2592 <strtok+0x3e>
    2564:	2050      	movs	r0, #80	; 0x50
    2566:	f7ff fe6d 	bl	2244 <malloc>
    256a:	65b8      	str	r0, [r7, #88]	; 0x58
    256c:	6004      	str	r4, [r0, #0]
    256e:	6044      	str	r4, [r0, #4]
    2570:	6084      	str	r4, [r0, #8]
    2572:	60c4      	str	r4, [r0, #12]
    2574:	6104      	str	r4, [r0, #16]
    2576:	6144      	str	r4, [r0, #20]
    2578:	6184      	str	r4, [r0, #24]
    257a:	6284      	str	r4, [r0, #40]	; 0x28
    257c:	62c4      	str	r4, [r0, #44]	; 0x2c
    257e:	6304      	str	r4, [r0, #48]	; 0x30
    2580:	6344      	str	r4, [r0, #52]	; 0x34
    2582:	6384      	str	r4, [r0, #56]	; 0x38
    2584:	63c4      	str	r4, [r0, #60]	; 0x3c
    2586:	6404      	str	r4, [r0, #64]	; 0x40
    2588:	6444      	str	r4, [r0, #68]	; 0x44
    258a:	6484      	str	r4, [r0, #72]	; 0x48
    258c:	64c4      	str	r4, [r0, #76]	; 0x4c
    258e:	7704      	strb	r4, [r0, #28]
    2590:	6244      	str	r4, [r0, #36]	; 0x24
    2592:	0031      	movs	r1, r6
    2594:	0028      	movs	r0, r5
    2596:	6dba      	ldr	r2, [r7, #88]	; 0x58
    2598:	2301      	movs	r3, #1
    259a:	f000 f803 	bl	25a4 <__strtok_r>
    259e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25a0:	20000014 	.word	0x20000014

000025a4 <__strtok_r>:
    25a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a6:	2800      	cmp	r0, #0
    25a8:	d102      	bne.n	25b0 <__strtok_r+0xc>
    25aa:	6810      	ldr	r0, [r2, #0]
    25ac:	2800      	cmp	r0, #0
    25ae:	d013      	beq.n	25d8 <__strtok_r+0x34>
    25b0:	0004      	movs	r4, r0
    25b2:	0020      	movs	r0, r4
    25b4:	000e      	movs	r6, r1
    25b6:	7805      	ldrb	r5, [r0, #0]
    25b8:	3401      	adds	r4, #1
    25ba:	7837      	ldrb	r7, [r6, #0]
    25bc:	2f00      	cmp	r7, #0
    25be:	d104      	bne.n	25ca <__strtok_r+0x26>
    25c0:	2d00      	cmp	r5, #0
    25c2:	d10f      	bne.n	25e4 <__strtok_r+0x40>
    25c4:	0028      	movs	r0, r5
    25c6:	6015      	str	r5, [r2, #0]
    25c8:	e006      	b.n	25d8 <__strtok_r+0x34>
    25ca:	3601      	adds	r6, #1
    25cc:	42bd      	cmp	r5, r7
    25ce:	d1f4      	bne.n	25ba <__strtok_r+0x16>
    25d0:	2b00      	cmp	r3, #0
    25d2:	d1ee      	bne.n	25b2 <__strtok_r+0xe>
    25d4:	6014      	str	r4, [r2, #0]
    25d6:	7003      	strb	r3, [r0, #0]
    25d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25da:	002f      	movs	r7, r5
    25dc:	e00f      	b.n	25fe <__strtok_r+0x5a>
    25de:	3301      	adds	r3, #1
    25e0:	2e00      	cmp	r6, #0
    25e2:	d104      	bne.n	25ee <__strtok_r+0x4a>
    25e4:	0023      	movs	r3, r4
    25e6:	3401      	adds	r4, #1
    25e8:	781d      	ldrb	r5, [r3, #0]
    25ea:	0027      	movs	r7, r4
    25ec:	000b      	movs	r3, r1
    25ee:	781e      	ldrb	r6, [r3, #0]
    25f0:	42b5      	cmp	r5, r6
    25f2:	d1f4      	bne.n	25de <__strtok_r+0x3a>
    25f4:	2d00      	cmp	r5, #0
    25f6:	d0f0      	beq.n	25da <__strtok_r+0x36>
    25f8:	2300      	movs	r3, #0
    25fa:	3c01      	subs	r4, #1
    25fc:	7023      	strb	r3, [r4, #0]
    25fe:	6017      	str	r7, [r2, #0]
    2600:	e7ea      	b.n	25d8 <__strtok_r+0x34>
    2602:	Address 0x00002602 is out of bounds.


00002604 <_strtol_l.isra.0>:
    2604:	b5f0      	push	{r4, r5, r6, r7, lr}
    2606:	001e      	movs	r6, r3
    2608:	4b3d      	ldr	r3, [pc, #244]	; (2700 <_strtol_l.isra.0+0xfc>)
    260a:	b087      	sub	sp, #28
    260c:	9005      	str	r0, [sp, #20]
    260e:	9202      	str	r2, [sp, #8]
    2610:	0008      	movs	r0, r1
    2612:	469c      	mov	ip, r3
    2614:	2208      	movs	r2, #8
    2616:	9101      	str	r1, [sp, #4]
    2618:	0003      	movs	r3, r0
    261a:	4661      	mov	r1, ip
    261c:	781c      	ldrb	r4, [r3, #0]
    261e:	1c45      	adds	r5, r0, #1
    2620:	5d09      	ldrb	r1, [r1, r4]
    2622:	0028      	movs	r0, r5
    2624:	000f      	movs	r7, r1
    2626:	4017      	ands	r7, r2
    2628:	4211      	tst	r1, r2
    262a:	d1f5      	bne.n	2618 <_strtol_l.isra.0+0x14>
    262c:	2c2d      	cmp	r4, #45	; 0x2d
    262e:	d133      	bne.n	2698 <_strtol_l.isra.0+0x94>
    2630:	2701      	movs	r7, #1
    2632:	782c      	ldrb	r4, [r5, #0]
    2634:	1c9d      	adds	r5, r3, #2
    2636:	2e00      	cmp	r6, #0
    2638:	d05d      	beq.n	26f6 <_strtol_l.isra.0+0xf2>
    263a:	2e10      	cmp	r6, #16
    263c:	d109      	bne.n	2652 <_strtol_l.isra.0+0x4e>
    263e:	2c30      	cmp	r4, #48	; 0x30
    2640:	d107      	bne.n	2652 <_strtol_l.isra.0+0x4e>
    2642:	2220      	movs	r2, #32
    2644:	782b      	ldrb	r3, [r5, #0]
    2646:	4393      	bics	r3, r2
    2648:	2b58      	cmp	r3, #88	; 0x58
    264a:	d14f      	bne.n	26ec <_strtol_l.isra.0+0xe8>
    264c:	2610      	movs	r6, #16
    264e:	786c      	ldrb	r4, [r5, #1]
    2650:	3502      	adds	r5, #2
    2652:	4b2c      	ldr	r3, [pc, #176]	; (2704 <_strtol_l.isra.0+0x100>)
    2654:	0031      	movs	r1, r6
    2656:	18fb      	adds	r3, r7, r3
    2658:	0018      	movs	r0, r3
    265a:	9303      	str	r3, [sp, #12]
    265c:	f7ff fd8c 	bl	2178 <__aeabi_uidivmod>
    2660:	2300      	movs	r3, #0
    2662:	2201      	movs	r2, #1
    2664:	4684      	mov	ip, r0
    2666:	0018      	movs	r0, r3
    2668:	9104      	str	r1, [sp, #16]
    266a:	4252      	negs	r2, r2
    266c:	0021      	movs	r1, r4
    266e:	3930      	subs	r1, #48	; 0x30
    2670:	2909      	cmp	r1, #9
    2672:	d816      	bhi.n	26a2 <_strtol_l.isra.0+0x9e>
    2674:	000c      	movs	r4, r1
    2676:	42a6      	cmp	r6, r4
    2678:	dd1f      	ble.n	26ba <_strtol_l.isra.0+0xb6>
    267a:	1c59      	adds	r1, r3, #1
    267c:	d009      	beq.n	2692 <_strtol_l.isra.0+0x8e>
    267e:	0013      	movs	r3, r2
    2680:	4584      	cmp	ip, r0
    2682:	d306      	bcc.n	2692 <_strtol_l.isra.0+0x8e>
    2684:	d102      	bne.n	268c <_strtol_l.isra.0+0x88>
    2686:	9904      	ldr	r1, [sp, #16]
    2688:	42a1      	cmp	r1, r4
    268a:	db02      	blt.n	2692 <_strtol_l.isra.0+0x8e>
    268c:	2301      	movs	r3, #1
    268e:	4370      	muls	r0, r6
    2690:	1820      	adds	r0, r4, r0
    2692:	782c      	ldrb	r4, [r5, #0]
    2694:	3501      	adds	r5, #1
    2696:	e7e9      	b.n	266c <_strtol_l.isra.0+0x68>
    2698:	2c2b      	cmp	r4, #43	; 0x2b
    269a:	d1cc      	bne.n	2636 <_strtol_l.isra.0+0x32>
    269c:	782c      	ldrb	r4, [r5, #0]
    269e:	1c9d      	adds	r5, r3, #2
    26a0:	e7c9      	b.n	2636 <_strtol_l.isra.0+0x32>
    26a2:	0021      	movs	r1, r4
    26a4:	3941      	subs	r1, #65	; 0x41
    26a6:	2919      	cmp	r1, #25
    26a8:	d801      	bhi.n	26ae <_strtol_l.isra.0+0xaa>
    26aa:	3c37      	subs	r4, #55	; 0x37
    26ac:	e7e3      	b.n	2676 <_strtol_l.isra.0+0x72>
    26ae:	0021      	movs	r1, r4
    26b0:	3961      	subs	r1, #97	; 0x61
    26b2:	2919      	cmp	r1, #25
    26b4:	d801      	bhi.n	26ba <_strtol_l.isra.0+0xb6>
    26b6:	3c57      	subs	r4, #87	; 0x57
    26b8:	e7dd      	b.n	2676 <_strtol_l.isra.0+0x72>
    26ba:	1c5a      	adds	r2, r3, #1
    26bc:	d108      	bne.n	26d0 <_strtol_l.isra.0+0xcc>
    26be:	9a05      	ldr	r2, [sp, #20]
    26c0:	3323      	adds	r3, #35	; 0x23
    26c2:	6013      	str	r3, [r2, #0]
    26c4:	9b02      	ldr	r3, [sp, #8]
    26c6:	9803      	ldr	r0, [sp, #12]
    26c8:	2b00      	cmp	r3, #0
    26ca:	d109      	bne.n	26e0 <_strtol_l.isra.0+0xdc>
    26cc:	b007      	add	sp, #28
    26ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26d0:	2f00      	cmp	r7, #0
    26d2:	d000      	beq.n	26d6 <_strtol_l.isra.0+0xd2>
    26d4:	4240      	negs	r0, r0
    26d6:	9a02      	ldr	r2, [sp, #8]
    26d8:	2a00      	cmp	r2, #0
    26da:	d0f7      	beq.n	26cc <_strtol_l.isra.0+0xc8>
    26dc:	2b00      	cmp	r3, #0
    26de:	d001      	beq.n	26e4 <_strtol_l.isra.0+0xe0>
    26e0:	1e6b      	subs	r3, r5, #1
    26e2:	9301      	str	r3, [sp, #4]
    26e4:	9b02      	ldr	r3, [sp, #8]
    26e6:	9a01      	ldr	r2, [sp, #4]
    26e8:	601a      	str	r2, [r3, #0]
    26ea:	e7ef      	b.n	26cc <_strtol_l.isra.0+0xc8>
    26ec:	2430      	movs	r4, #48	; 0x30
    26ee:	2e00      	cmp	r6, #0
    26f0:	d1af      	bne.n	2652 <_strtol_l.isra.0+0x4e>
    26f2:	3608      	adds	r6, #8
    26f4:	e7ad      	b.n	2652 <_strtol_l.isra.0+0x4e>
    26f6:	2c30      	cmp	r4, #48	; 0x30
    26f8:	d0a3      	beq.n	2642 <_strtol_l.isra.0+0x3e>
    26fa:	260a      	movs	r6, #10
    26fc:	e7a9      	b.n	2652 <_strtol_l.isra.0+0x4e>
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	00003094 	.word	0x00003094
    2704:	7fffffff 	.word	0x7fffffff

00002708 <strtol>:
    2708:	b510      	push	{r4, lr}
    270a:	0013      	movs	r3, r2
    270c:	000a      	movs	r2, r1
    270e:	0001      	movs	r1, r0
    2710:	4802      	ldr	r0, [pc, #8]	; (271c <strtol+0x14>)
    2712:	6800      	ldr	r0, [r0, #0]
    2714:	f7ff ff76 	bl	2604 <_strtol_l.isra.0>
    2718:	bd10      	pop	{r4, pc}
    271a:	46c0      	nop			; (mov r8, r8)
    271c:	20000014 	.word	0x20000014

00002720 <_vsniprintf_r>:
    2720:	b530      	push	{r4, r5, lr}
    2722:	0014      	movs	r4, r2
    2724:	0005      	movs	r5, r0
    2726:	001a      	movs	r2, r3
    2728:	b09b      	sub	sp, #108	; 0x6c
    272a:	2c00      	cmp	r4, #0
    272c:	da05      	bge.n	273a <_vsniprintf_r+0x1a>
    272e:	238b      	movs	r3, #139	; 0x8b
    2730:	6003      	str	r3, [r0, #0]
    2732:	2001      	movs	r0, #1
    2734:	4240      	negs	r0, r0
    2736:	b01b      	add	sp, #108	; 0x6c
    2738:	bd30      	pop	{r4, r5, pc}
    273a:	2382      	movs	r3, #130	; 0x82
    273c:	4668      	mov	r0, sp
    273e:	009b      	lsls	r3, r3, #2
    2740:	8183      	strh	r3, [r0, #12]
    2742:	2300      	movs	r3, #0
    2744:	9100      	str	r1, [sp, #0]
    2746:	9104      	str	r1, [sp, #16]
    2748:	429c      	cmp	r4, r3
    274a:	d000      	beq.n	274e <_vsniprintf_r+0x2e>
    274c:	1e63      	subs	r3, r4, #1
    274e:	9302      	str	r3, [sp, #8]
    2750:	9305      	str	r3, [sp, #20]
    2752:	2301      	movs	r3, #1
    2754:	4669      	mov	r1, sp
    2756:	425b      	negs	r3, r3
    2758:	81cb      	strh	r3, [r1, #14]
    275a:	0028      	movs	r0, r5
    275c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    275e:	f000 f8b1 	bl	28c4 <_svfiprintf_r>
    2762:	1c43      	adds	r3, r0, #1
    2764:	da01      	bge.n	276a <_vsniprintf_r+0x4a>
    2766:	238b      	movs	r3, #139	; 0x8b
    2768:	602b      	str	r3, [r5, #0]
    276a:	2c00      	cmp	r4, #0
    276c:	d0e3      	beq.n	2736 <_vsniprintf_r+0x16>
    276e:	2300      	movs	r3, #0
    2770:	9a00      	ldr	r2, [sp, #0]
    2772:	7013      	strb	r3, [r2, #0]
    2774:	e7df      	b.n	2736 <_vsniprintf_r+0x16>
    2776:	Address 0x00002776 is out of bounds.


00002778 <vsniprintf>:
    2778:	b507      	push	{r0, r1, r2, lr}
    277a:	9300      	str	r3, [sp, #0]
    277c:	0013      	movs	r3, r2
    277e:	000a      	movs	r2, r1
    2780:	0001      	movs	r1, r0
    2782:	4802      	ldr	r0, [pc, #8]	; (278c <vsniprintf+0x14>)
    2784:	6800      	ldr	r0, [r0, #0]
    2786:	f7ff ffcb 	bl	2720 <_vsniprintf_r>
    278a:	bd0e      	pop	{r1, r2, r3, pc}
    278c:	20000014 	.word	0x20000014

00002790 <__retarget_lock_acquire_recursive>:
    2790:	4770      	bx	lr

00002792 <__retarget_lock_release_recursive>:
    2792:	4770      	bx	lr

00002794 <__malloc_lock>:
    2794:	b510      	push	{r4, lr}
    2796:	4802      	ldr	r0, [pc, #8]	; (27a0 <__malloc_lock+0xc>)
    2798:	f7ff fffa 	bl	2790 <__retarget_lock_acquire_recursive>
    279c:	bd10      	pop	{r4, pc}
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	20000518 	.word	0x20000518

000027a4 <__malloc_unlock>:
    27a4:	b510      	push	{r4, lr}
    27a6:	4802      	ldr	r0, [pc, #8]	; (27b0 <__malloc_unlock+0xc>)
    27a8:	f7ff fff3 	bl	2792 <__retarget_lock_release_recursive>
    27ac:	bd10      	pop	{r4, pc}
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	20000518 	.word	0x20000518

000027b4 <_realloc_r>:
    27b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27b6:	0007      	movs	r7, r0
    27b8:	000d      	movs	r5, r1
    27ba:	0016      	movs	r6, r2
    27bc:	2900      	cmp	r1, #0
    27be:	d105      	bne.n	27cc <_realloc_r+0x18>
    27c0:	0011      	movs	r1, r2
    27c2:	f7ff fda7 	bl	2314 <_malloc_r>
    27c6:	0004      	movs	r4, r0
    27c8:	0020      	movs	r0, r4
    27ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27cc:	2a00      	cmp	r2, #0
    27ce:	d103      	bne.n	27d8 <_realloc_r+0x24>
    27d0:	f7ff fd56 	bl	2280 <_free_r>
    27d4:	0034      	movs	r4, r6
    27d6:	e7f7      	b.n	27c8 <_realloc_r+0x14>
    27d8:	f000 fb14 	bl	2e04 <_malloc_usable_size_r>
    27dc:	002c      	movs	r4, r5
    27de:	42b0      	cmp	r0, r6
    27e0:	d2f2      	bcs.n	27c8 <_realloc_r+0x14>
    27e2:	0031      	movs	r1, r6
    27e4:	0038      	movs	r0, r7
    27e6:	f7ff fd95 	bl	2314 <_malloc_r>
    27ea:	1e04      	subs	r4, r0, #0
    27ec:	d0ec      	beq.n	27c8 <_realloc_r+0x14>
    27ee:	0029      	movs	r1, r5
    27f0:	0032      	movs	r2, r6
    27f2:	f7ff fd3b 	bl	226c <memcpy>
    27f6:	0029      	movs	r1, r5
    27f8:	0038      	movs	r0, r7
    27fa:	f7ff fd41 	bl	2280 <_free_r>
    27fe:	e7e3      	b.n	27c8 <_realloc_r+0x14>

00002800 <__ssputs_r>:
    2800:	b5f0      	push	{r4, r5, r6, r7, lr}
    2802:	688e      	ldr	r6, [r1, #8]
    2804:	b085      	sub	sp, #20
    2806:	0007      	movs	r7, r0
    2808:	000c      	movs	r4, r1
    280a:	9203      	str	r2, [sp, #12]
    280c:	9301      	str	r3, [sp, #4]
    280e:	429e      	cmp	r6, r3
    2810:	d83c      	bhi.n	288c <__ssputs_r+0x8c>
    2812:	2390      	movs	r3, #144	; 0x90
    2814:	898a      	ldrh	r2, [r1, #12]
    2816:	00db      	lsls	r3, r3, #3
    2818:	421a      	tst	r2, r3
    281a:	d034      	beq.n	2886 <__ssputs_r+0x86>
    281c:	2503      	movs	r5, #3
    281e:	6909      	ldr	r1, [r1, #16]
    2820:	6823      	ldr	r3, [r4, #0]
    2822:	1a5b      	subs	r3, r3, r1
    2824:	9302      	str	r3, [sp, #8]
    2826:	6963      	ldr	r3, [r4, #20]
    2828:	9802      	ldr	r0, [sp, #8]
    282a:	435d      	muls	r5, r3
    282c:	0feb      	lsrs	r3, r5, #31
    282e:	195d      	adds	r5, r3, r5
    2830:	9b01      	ldr	r3, [sp, #4]
    2832:	106d      	asrs	r5, r5, #1
    2834:	3301      	adds	r3, #1
    2836:	181b      	adds	r3, r3, r0
    2838:	42ab      	cmp	r3, r5
    283a:	d900      	bls.n	283e <__ssputs_r+0x3e>
    283c:	001d      	movs	r5, r3
    283e:	0553      	lsls	r3, r2, #21
    2840:	d532      	bpl.n	28a8 <__ssputs_r+0xa8>
    2842:	0029      	movs	r1, r5
    2844:	0038      	movs	r0, r7
    2846:	f7ff fd65 	bl	2314 <_malloc_r>
    284a:	1e06      	subs	r6, r0, #0
    284c:	d109      	bne.n	2862 <__ssputs_r+0x62>
    284e:	230c      	movs	r3, #12
    2850:	603b      	str	r3, [r7, #0]
    2852:	2340      	movs	r3, #64	; 0x40
    2854:	2001      	movs	r0, #1
    2856:	89a2      	ldrh	r2, [r4, #12]
    2858:	4240      	negs	r0, r0
    285a:	4313      	orrs	r3, r2
    285c:	81a3      	strh	r3, [r4, #12]
    285e:	b005      	add	sp, #20
    2860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2862:	9a02      	ldr	r2, [sp, #8]
    2864:	6921      	ldr	r1, [r4, #16]
    2866:	f7ff fd01 	bl	226c <memcpy>
    286a:	89a3      	ldrh	r3, [r4, #12]
    286c:	4a14      	ldr	r2, [pc, #80]	; (28c0 <__ssputs_r+0xc0>)
    286e:	401a      	ands	r2, r3
    2870:	2380      	movs	r3, #128	; 0x80
    2872:	4313      	orrs	r3, r2
    2874:	81a3      	strh	r3, [r4, #12]
    2876:	9b02      	ldr	r3, [sp, #8]
    2878:	6126      	str	r6, [r4, #16]
    287a:	18f6      	adds	r6, r6, r3
    287c:	6026      	str	r6, [r4, #0]
    287e:	6165      	str	r5, [r4, #20]
    2880:	9e01      	ldr	r6, [sp, #4]
    2882:	1aed      	subs	r5, r5, r3
    2884:	60a5      	str	r5, [r4, #8]
    2886:	9b01      	ldr	r3, [sp, #4]
    2888:	429e      	cmp	r6, r3
    288a:	d900      	bls.n	288e <__ssputs_r+0x8e>
    288c:	9e01      	ldr	r6, [sp, #4]
    288e:	0032      	movs	r2, r6
    2890:	9903      	ldr	r1, [sp, #12]
    2892:	6820      	ldr	r0, [r4, #0]
    2894:	f000 faa3 	bl	2dde <memmove>
    2898:	68a3      	ldr	r3, [r4, #8]
    289a:	2000      	movs	r0, #0
    289c:	1b9b      	subs	r3, r3, r6
    289e:	60a3      	str	r3, [r4, #8]
    28a0:	6823      	ldr	r3, [r4, #0]
    28a2:	199e      	adds	r6, r3, r6
    28a4:	6026      	str	r6, [r4, #0]
    28a6:	e7da      	b.n	285e <__ssputs_r+0x5e>
    28a8:	002a      	movs	r2, r5
    28aa:	0038      	movs	r0, r7
    28ac:	f7ff ff82 	bl	27b4 <_realloc_r>
    28b0:	1e06      	subs	r6, r0, #0
    28b2:	d1e0      	bne.n	2876 <__ssputs_r+0x76>
    28b4:	0038      	movs	r0, r7
    28b6:	6921      	ldr	r1, [r4, #16]
    28b8:	f7ff fce2 	bl	2280 <_free_r>
    28bc:	e7c7      	b.n	284e <__ssputs_r+0x4e>
    28be:	46c0      	nop			; (mov r8, r8)
    28c0:	fffffb7f 	.word	0xfffffb7f

000028c4 <_svfiprintf_r>:
    28c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28c6:	b0a1      	sub	sp, #132	; 0x84
    28c8:	9003      	str	r0, [sp, #12]
    28ca:	001d      	movs	r5, r3
    28cc:	898b      	ldrh	r3, [r1, #12]
    28ce:	000f      	movs	r7, r1
    28d0:	0016      	movs	r6, r2
    28d2:	061b      	lsls	r3, r3, #24
    28d4:	d511      	bpl.n	28fa <_svfiprintf_r+0x36>
    28d6:	690b      	ldr	r3, [r1, #16]
    28d8:	2b00      	cmp	r3, #0
    28da:	d10e      	bne.n	28fa <_svfiprintf_r+0x36>
    28dc:	2140      	movs	r1, #64	; 0x40
    28de:	f7ff fd19 	bl	2314 <_malloc_r>
    28e2:	6038      	str	r0, [r7, #0]
    28e4:	6138      	str	r0, [r7, #16]
    28e6:	2800      	cmp	r0, #0
    28e8:	d105      	bne.n	28f6 <_svfiprintf_r+0x32>
    28ea:	230c      	movs	r3, #12
    28ec:	9a03      	ldr	r2, [sp, #12]
    28ee:	3801      	subs	r0, #1
    28f0:	6013      	str	r3, [r2, #0]
    28f2:	b021      	add	sp, #132	; 0x84
    28f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28f6:	2340      	movs	r3, #64	; 0x40
    28f8:	617b      	str	r3, [r7, #20]
    28fa:	2300      	movs	r3, #0
    28fc:	ac08      	add	r4, sp, #32
    28fe:	6163      	str	r3, [r4, #20]
    2900:	3320      	adds	r3, #32
    2902:	7663      	strb	r3, [r4, #25]
    2904:	3310      	adds	r3, #16
    2906:	76a3      	strb	r3, [r4, #26]
    2908:	9507      	str	r5, [sp, #28]
    290a:	0035      	movs	r5, r6
    290c:	782b      	ldrb	r3, [r5, #0]
    290e:	2b00      	cmp	r3, #0
    2910:	d001      	beq.n	2916 <_svfiprintf_r+0x52>
    2912:	2b25      	cmp	r3, #37	; 0x25
    2914:	d147      	bne.n	29a6 <_svfiprintf_r+0xe2>
    2916:	1bab      	subs	r3, r5, r6
    2918:	9305      	str	r3, [sp, #20]
    291a:	42b5      	cmp	r5, r6
    291c:	d00c      	beq.n	2938 <_svfiprintf_r+0x74>
    291e:	0032      	movs	r2, r6
    2920:	0039      	movs	r1, r7
    2922:	9803      	ldr	r0, [sp, #12]
    2924:	f7ff ff6c 	bl	2800 <__ssputs_r>
    2928:	1c43      	adds	r3, r0, #1
    292a:	d100      	bne.n	292e <_svfiprintf_r+0x6a>
    292c:	e0ae      	b.n	2a8c <_svfiprintf_r+0x1c8>
    292e:	6962      	ldr	r2, [r4, #20]
    2930:	9b05      	ldr	r3, [sp, #20]
    2932:	4694      	mov	ip, r2
    2934:	4463      	add	r3, ip
    2936:	6163      	str	r3, [r4, #20]
    2938:	782b      	ldrb	r3, [r5, #0]
    293a:	2b00      	cmp	r3, #0
    293c:	d100      	bne.n	2940 <_svfiprintf_r+0x7c>
    293e:	e0a5      	b.n	2a8c <_svfiprintf_r+0x1c8>
    2940:	2201      	movs	r2, #1
    2942:	2300      	movs	r3, #0
    2944:	4252      	negs	r2, r2
    2946:	6062      	str	r2, [r4, #4]
    2948:	a904      	add	r1, sp, #16
    294a:	3254      	adds	r2, #84	; 0x54
    294c:	1852      	adds	r2, r2, r1
    294e:	1c6e      	adds	r6, r5, #1
    2950:	6023      	str	r3, [r4, #0]
    2952:	60e3      	str	r3, [r4, #12]
    2954:	60a3      	str	r3, [r4, #8]
    2956:	7013      	strb	r3, [r2, #0]
    2958:	65a3      	str	r3, [r4, #88]	; 0x58
    295a:	2205      	movs	r2, #5
    295c:	7831      	ldrb	r1, [r6, #0]
    295e:	4854      	ldr	r0, [pc, #336]	; (2ab0 <_svfiprintf_r+0x1ec>)
    2960:	f000 fa32 	bl	2dc8 <memchr>
    2964:	1c75      	adds	r5, r6, #1
    2966:	2800      	cmp	r0, #0
    2968:	d11f      	bne.n	29aa <_svfiprintf_r+0xe6>
    296a:	6822      	ldr	r2, [r4, #0]
    296c:	06d3      	lsls	r3, r2, #27
    296e:	d504      	bpl.n	297a <_svfiprintf_r+0xb6>
    2970:	2353      	movs	r3, #83	; 0x53
    2972:	a904      	add	r1, sp, #16
    2974:	185b      	adds	r3, r3, r1
    2976:	2120      	movs	r1, #32
    2978:	7019      	strb	r1, [r3, #0]
    297a:	0713      	lsls	r3, r2, #28
    297c:	d504      	bpl.n	2988 <_svfiprintf_r+0xc4>
    297e:	2353      	movs	r3, #83	; 0x53
    2980:	a904      	add	r1, sp, #16
    2982:	185b      	adds	r3, r3, r1
    2984:	212b      	movs	r1, #43	; 0x2b
    2986:	7019      	strb	r1, [r3, #0]
    2988:	7833      	ldrb	r3, [r6, #0]
    298a:	2b2a      	cmp	r3, #42	; 0x2a
    298c:	d016      	beq.n	29bc <_svfiprintf_r+0xf8>
    298e:	0035      	movs	r5, r6
    2990:	2100      	movs	r1, #0
    2992:	200a      	movs	r0, #10
    2994:	68e3      	ldr	r3, [r4, #12]
    2996:	782a      	ldrb	r2, [r5, #0]
    2998:	1c6e      	adds	r6, r5, #1
    299a:	3a30      	subs	r2, #48	; 0x30
    299c:	2a09      	cmp	r2, #9
    299e:	d94e      	bls.n	2a3e <_svfiprintf_r+0x17a>
    29a0:	2900      	cmp	r1, #0
    29a2:	d111      	bne.n	29c8 <_svfiprintf_r+0x104>
    29a4:	e017      	b.n	29d6 <_svfiprintf_r+0x112>
    29a6:	3501      	adds	r5, #1
    29a8:	e7b0      	b.n	290c <_svfiprintf_r+0x48>
    29aa:	4b41      	ldr	r3, [pc, #260]	; (2ab0 <_svfiprintf_r+0x1ec>)
    29ac:	6822      	ldr	r2, [r4, #0]
    29ae:	1ac0      	subs	r0, r0, r3
    29b0:	2301      	movs	r3, #1
    29b2:	4083      	lsls	r3, r0
    29b4:	4313      	orrs	r3, r2
    29b6:	002e      	movs	r6, r5
    29b8:	6023      	str	r3, [r4, #0]
    29ba:	e7ce      	b.n	295a <_svfiprintf_r+0x96>
    29bc:	9b07      	ldr	r3, [sp, #28]
    29be:	1d19      	adds	r1, r3, #4
    29c0:	681b      	ldr	r3, [r3, #0]
    29c2:	9107      	str	r1, [sp, #28]
    29c4:	2b00      	cmp	r3, #0
    29c6:	db01      	blt.n	29cc <_svfiprintf_r+0x108>
    29c8:	930b      	str	r3, [sp, #44]	; 0x2c
    29ca:	e004      	b.n	29d6 <_svfiprintf_r+0x112>
    29cc:	425b      	negs	r3, r3
    29ce:	60e3      	str	r3, [r4, #12]
    29d0:	2302      	movs	r3, #2
    29d2:	4313      	orrs	r3, r2
    29d4:	6023      	str	r3, [r4, #0]
    29d6:	782b      	ldrb	r3, [r5, #0]
    29d8:	2b2e      	cmp	r3, #46	; 0x2e
    29da:	d10a      	bne.n	29f2 <_svfiprintf_r+0x12e>
    29dc:	786b      	ldrb	r3, [r5, #1]
    29de:	2b2a      	cmp	r3, #42	; 0x2a
    29e0:	d135      	bne.n	2a4e <_svfiprintf_r+0x18a>
    29e2:	9b07      	ldr	r3, [sp, #28]
    29e4:	3502      	adds	r5, #2
    29e6:	1d1a      	adds	r2, r3, #4
    29e8:	681b      	ldr	r3, [r3, #0]
    29ea:	9207      	str	r2, [sp, #28]
    29ec:	2b00      	cmp	r3, #0
    29ee:	db2b      	blt.n	2a48 <_svfiprintf_r+0x184>
    29f0:	9309      	str	r3, [sp, #36]	; 0x24
    29f2:	4e30      	ldr	r6, [pc, #192]	; (2ab4 <_svfiprintf_r+0x1f0>)
    29f4:	2203      	movs	r2, #3
    29f6:	0030      	movs	r0, r6
    29f8:	7829      	ldrb	r1, [r5, #0]
    29fa:	f000 f9e5 	bl	2dc8 <memchr>
    29fe:	2800      	cmp	r0, #0
    2a00:	d006      	beq.n	2a10 <_svfiprintf_r+0x14c>
    2a02:	2340      	movs	r3, #64	; 0x40
    2a04:	1b80      	subs	r0, r0, r6
    2a06:	4083      	lsls	r3, r0
    2a08:	6822      	ldr	r2, [r4, #0]
    2a0a:	3501      	adds	r5, #1
    2a0c:	4313      	orrs	r3, r2
    2a0e:	6023      	str	r3, [r4, #0]
    2a10:	7829      	ldrb	r1, [r5, #0]
    2a12:	2206      	movs	r2, #6
    2a14:	4828      	ldr	r0, [pc, #160]	; (2ab8 <_svfiprintf_r+0x1f4>)
    2a16:	1c6e      	adds	r6, r5, #1
    2a18:	7621      	strb	r1, [r4, #24]
    2a1a:	f000 f9d5 	bl	2dc8 <memchr>
    2a1e:	2800      	cmp	r0, #0
    2a20:	d03c      	beq.n	2a9c <_svfiprintf_r+0x1d8>
    2a22:	4b26      	ldr	r3, [pc, #152]	; (2abc <_svfiprintf_r+0x1f8>)
    2a24:	2b00      	cmp	r3, #0
    2a26:	d125      	bne.n	2a74 <_svfiprintf_r+0x1b0>
    2a28:	2207      	movs	r2, #7
    2a2a:	9b07      	ldr	r3, [sp, #28]
    2a2c:	3307      	adds	r3, #7
    2a2e:	4393      	bics	r3, r2
    2a30:	3308      	adds	r3, #8
    2a32:	9307      	str	r3, [sp, #28]
    2a34:	6963      	ldr	r3, [r4, #20]
    2a36:	9a04      	ldr	r2, [sp, #16]
    2a38:	189b      	adds	r3, r3, r2
    2a3a:	6163      	str	r3, [r4, #20]
    2a3c:	e765      	b.n	290a <_svfiprintf_r+0x46>
    2a3e:	4343      	muls	r3, r0
    2a40:	0035      	movs	r5, r6
    2a42:	2101      	movs	r1, #1
    2a44:	189b      	adds	r3, r3, r2
    2a46:	e7a6      	b.n	2996 <_svfiprintf_r+0xd2>
    2a48:	2301      	movs	r3, #1
    2a4a:	425b      	negs	r3, r3
    2a4c:	e7d0      	b.n	29f0 <_svfiprintf_r+0x12c>
    2a4e:	2300      	movs	r3, #0
    2a50:	200a      	movs	r0, #10
    2a52:	001a      	movs	r2, r3
    2a54:	3501      	adds	r5, #1
    2a56:	6063      	str	r3, [r4, #4]
    2a58:	7829      	ldrb	r1, [r5, #0]
    2a5a:	1c6e      	adds	r6, r5, #1
    2a5c:	3930      	subs	r1, #48	; 0x30
    2a5e:	2909      	cmp	r1, #9
    2a60:	d903      	bls.n	2a6a <_svfiprintf_r+0x1a6>
    2a62:	2b00      	cmp	r3, #0
    2a64:	d0c5      	beq.n	29f2 <_svfiprintf_r+0x12e>
    2a66:	9209      	str	r2, [sp, #36]	; 0x24
    2a68:	e7c3      	b.n	29f2 <_svfiprintf_r+0x12e>
    2a6a:	4342      	muls	r2, r0
    2a6c:	0035      	movs	r5, r6
    2a6e:	2301      	movs	r3, #1
    2a70:	1852      	adds	r2, r2, r1
    2a72:	e7f1      	b.n	2a58 <_svfiprintf_r+0x194>
    2a74:	ab07      	add	r3, sp, #28
    2a76:	9300      	str	r3, [sp, #0]
    2a78:	003a      	movs	r2, r7
    2a7a:	0021      	movs	r1, r4
    2a7c:	4b10      	ldr	r3, [pc, #64]	; (2ac0 <_svfiprintf_r+0x1fc>)
    2a7e:	9803      	ldr	r0, [sp, #12]
    2a80:	e000      	b.n	2a84 <_svfiprintf_r+0x1c0>
    2a82:	bf00      	nop
    2a84:	9004      	str	r0, [sp, #16]
    2a86:	9b04      	ldr	r3, [sp, #16]
    2a88:	3301      	adds	r3, #1
    2a8a:	d1d3      	bne.n	2a34 <_svfiprintf_r+0x170>
    2a8c:	89bb      	ldrh	r3, [r7, #12]
    2a8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2a90:	065b      	lsls	r3, r3, #25
    2a92:	d400      	bmi.n	2a96 <_svfiprintf_r+0x1d2>
    2a94:	e72d      	b.n	28f2 <_svfiprintf_r+0x2e>
    2a96:	2001      	movs	r0, #1
    2a98:	4240      	negs	r0, r0
    2a9a:	e72a      	b.n	28f2 <_svfiprintf_r+0x2e>
    2a9c:	ab07      	add	r3, sp, #28
    2a9e:	9300      	str	r3, [sp, #0]
    2aa0:	003a      	movs	r2, r7
    2aa2:	0021      	movs	r1, r4
    2aa4:	4b06      	ldr	r3, [pc, #24]	; (2ac0 <_svfiprintf_r+0x1fc>)
    2aa6:	9803      	ldr	r0, [sp, #12]
    2aa8:	f000 f87c 	bl	2ba4 <_printf_i>
    2aac:	e7ea      	b.n	2a84 <_svfiprintf_r+0x1c0>
    2aae:	46c0      	nop			; (mov r8, r8)
    2ab0:	000031f4 	.word	0x000031f4
    2ab4:	000031fa 	.word	0x000031fa
    2ab8:	000031fe 	.word	0x000031fe
    2abc:	00000000 	.word	0x00000000
    2ac0:	00002801 	.word	0x00002801

00002ac4 <_printf_common>:
    2ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ac6:	0015      	movs	r5, r2
    2ac8:	9301      	str	r3, [sp, #4]
    2aca:	688a      	ldr	r2, [r1, #8]
    2acc:	690b      	ldr	r3, [r1, #16]
    2ace:	000c      	movs	r4, r1
    2ad0:	9000      	str	r0, [sp, #0]
    2ad2:	4293      	cmp	r3, r2
    2ad4:	da00      	bge.n	2ad8 <_printf_common+0x14>
    2ad6:	0013      	movs	r3, r2
    2ad8:	0022      	movs	r2, r4
    2ada:	602b      	str	r3, [r5, #0]
    2adc:	3243      	adds	r2, #67	; 0x43
    2ade:	7812      	ldrb	r2, [r2, #0]
    2ae0:	2a00      	cmp	r2, #0
    2ae2:	d001      	beq.n	2ae8 <_printf_common+0x24>
    2ae4:	3301      	adds	r3, #1
    2ae6:	602b      	str	r3, [r5, #0]
    2ae8:	6823      	ldr	r3, [r4, #0]
    2aea:	069b      	lsls	r3, r3, #26
    2aec:	d502      	bpl.n	2af4 <_printf_common+0x30>
    2aee:	682b      	ldr	r3, [r5, #0]
    2af0:	3302      	adds	r3, #2
    2af2:	602b      	str	r3, [r5, #0]
    2af4:	6822      	ldr	r2, [r4, #0]
    2af6:	2306      	movs	r3, #6
    2af8:	0017      	movs	r7, r2
    2afa:	401f      	ands	r7, r3
    2afc:	421a      	tst	r2, r3
    2afe:	d027      	beq.n	2b50 <_printf_common+0x8c>
    2b00:	0023      	movs	r3, r4
    2b02:	3343      	adds	r3, #67	; 0x43
    2b04:	781b      	ldrb	r3, [r3, #0]
    2b06:	1e5a      	subs	r2, r3, #1
    2b08:	4193      	sbcs	r3, r2
    2b0a:	6822      	ldr	r2, [r4, #0]
    2b0c:	0692      	lsls	r2, r2, #26
    2b0e:	d430      	bmi.n	2b72 <_printf_common+0xae>
    2b10:	0022      	movs	r2, r4
    2b12:	9901      	ldr	r1, [sp, #4]
    2b14:	9800      	ldr	r0, [sp, #0]
    2b16:	9e08      	ldr	r6, [sp, #32]
    2b18:	3243      	adds	r2, #67	; 0x43
    2b1a:	47b0      	blx	r6
    2b1c:	1c43      	adds	r3, r0, #1
    2b1e:	d025      	beq.n	2b6c <_printf_common+0xa8>
    2b20:	2306      	movs	r3, #6
    2b22:	6820      	ldr	r0, [r4, #0]
    2b24:	682a      	ldr	r2, [r5, #0]
    2b26:	68e1      	ldr	r1, [r4, #12]
    2b28:	2500      	movs	r5, #0
    2b2a:	4003      	ands	r3, r0
    2b2c:	2b04      	cmp	r3, #4
    2b2e:	d103      	bne.n	2b38 <_printf_common+0x74>
    2b30:	1a8d      	subs	r5, r1, r2
    2b32:	43eb      	mvns	r3, r5
    2b34:	17db      	asrs	r3, r3, #31
    2b36:	401d      	ands	r5, r3
    2b38:	68a3      	ldr	r3, [r4, #8]
    2b3a:	6922      	ldr	r2, [r4, #16]
    2b3c:	4293      	cmp	r3, r2
    2b3e:	dd01      	ble.n	2b44 <_printf_common+0x80>
    2b40:	1a9b      	subs	r3, r3, r2
    2b42:	18ed      	adds	r5, r5, r3
    2b44:	2700      	movs	r7, #0
    2b46:	42bd      	cmp	r5, r7
    2b48:	d120      	bne.n	2b8c <_printf_common+0xc8>
    2b4a:	2000      	movs	r0, #0
    2b4c:	e010      	b.n	2b70 <_printf_common+0xac>
    2b4e:	3701      	adds	r7, #1
    2b50:	68e3      	ldr	r3, [r4, #12]
    2b52:	682a      	ldr	r2, [r5, #0]
    2b54:	1a9b      	subs	r3, r3, r2
    2b56:	42bb      	cmp	r3, r7
    2b58:	ddd2      	ble.n	2b00 <_printf_common+0x3c>
    2b5a:	0022      	movs	r2, r4
    2b5c:	2301      	movs	r3, #1
    2b5e:	9901      	ldr	r1, [sp, #4]
    2b60:	9800      	ldr	r0, [sp, #0]
    2b62:	9e08      	ldr	r6, [sp, #32]
    2b64:	3219      	adds	r2, #25
    2b66:	47b0      	blx	r6
    2b68:	1c43      	adds	r3, r0, #1
    2b6a:	d1f0      	bne.n	2b4e <_printf_common+0x8a>
    2b6c:	2001      	movs	r0, #1
    2b6e:	4240      	negs	r0, r0
    2b70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2b72:	2030      	movs	r0, #48	; 0x30
    2b74:	18e1      	adds	r1, r4, r3
    2b76:	3143      	adds	r1, #67	; 0x43
    2b78:	7008      	strb	r0, [r1, #0]
    2b7a:	0021      	movs	r1, r4
    2b7c:	1c5a      	adds	r2, r3, #1
    2b7e:	3145      	adds	r1, #69	; 0x45
    2b80:	7809      	ldrb	r1, [r1, #0]
    2b82:	18a2      	adds	r2, r4, r2
    2b84:	3243      	adds	r2, #67	; 0x43
    2b86:	3302      	adds	r3, #2
    2b88:	7011      	strb	r1, [r2, #0]
    2b8a:	e7c1      	b.n	2b10 <_printf_common+0x4c>
    2b8c:	0022      	movs	r2, r4
    2b8e:	2301      	movs	r3, #1
    2b90:	9901      	ldr	r1, [sp, #4]
    2b92:	9800      	ldr	r0, [sp, #0]
    2b94:	9e08      	ldr	r6, [sp, #32]
    2b96:	321a      	adds	r2, #26
    2b98:	47b0      	blx	r6
    2b9a:	1c43      	adds	r3, r0, #1
    2b9c:	d0e6      	beq.n	2b6c <_printf_common+0xa8>
    2b9e:	3701      	adds	r7, #1
    2ba0:	e7d1      	b.n	2b46 <_printf_common+0x82>
    2ba2:	Address 0x00002ba2 is out of bounds.


00002ba4 <_printf_i>:
    2ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ba6:	b08b      	sub	sp, #44	; 0x2c
    2ba8:	9206      	str	r2, [sp, #24]
    2baa:	000a      	movs	r2, r1
    2bac:	3243      	adds	r2, #67	; 0x43
    2bae:	9307      	str	r3, [sp, #28]
    2bb0:	9005      	str	r0, [sp, #20]
    2bb2:	9204      	str	r2, [sp, #16]
    2bb4:	7e0a      	ldrb	r2, [r1, #24]
    2bb6:	000c      	movs	r4, r1
    2bb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2bba:	2a78      	cmp	r2, #120	; 0x78
    2bbc:	d806      	bhi.n	2bcc <_printf_i+0x28>
    2bbe:	2a62      	cmp	r2, #98	; 0x62
    2bc0:	d808      	bhi.n	2bd4 <_printf_i+0x30>
    2bc2:	2a00      	cmp	r2, #0
    2bc4:	d100      	bne.n	2bc8 <_printf_i+0x24>
    2bc6:	e0c0      	b.n	2d4a <_printf_i+0x1a6>
    2bc8:	2a58      	cmp	r2, #88	; 0x58
    2bca:	d052      	beq.n	2c72 <_printf_i+0xce>
    2bcc:	0026      	movs	r6, r4
    2bce:	3642      	adds	r6, #66	; 0x42
    2bd0:	7032      	strb	r2, [r6, #0]
    2bd2:	e022      	b.n	2c1a <_printf_i+0x76>
    2bd4:	0010      	movs	r0, r2
    2bd6:	3863      	subs	r0, #99	; 0x63
    2bd8:	2815      	cmp	r0, #21
    2bda:	d8f7      	bhi.n	2bcc <_printf_i+0x28>
    2bdc:	f000 f91a 	bl	2e14 <__gnu_thumb1_case_shi>
    2be0:	001f0016 	.word	0x001f0016
    2be4:	fff6fff6 	.word	0xfff6fff6
    2be8:	fff6fff6 	.word	0xfff6fff6
    2bec:	fff6001f 	.word	0xfff6001f
    2bf0:	fff6fff6 	.word	0xfff6fff6
    2bf4:	00a8fff6 	.word	0x00a8fff6
    2bf8:	009a0036 	.word	0x009a0036
    2bfc:	fff6fff6 	.word	0xfff6fff6
    2c00:	fff600b9 	.word	0xfff600b9
    2c04:	fff60036 	.word	0xfff60036
    2c08:	009efff6 	.word	0x009efff6
    2c0c:	0026      	movs	r6, r4
    2c0e:	681a      	ldr	r2, [r3, #0]
    2c10:	3642      	adds	r6, #66	; 0x42
    2c12:	1d11      	adds	r1, r2, #4
    2c14:	6019      	str	r1, [r3, #0]
    2c16:	6813      	ldr	r3, [r2, #0]
    2c18:	7033      	strb	r3, [r6, #0]
    2c1a:	2301      	movs	r3, #1
    2c1c:	e0a7      	b.n	2d6e <_printf_i+0x1ca>
    2c1e:	6808      	ldr	r0, [r1, #0]
    2c20:	6819      	ldr	r1, [r3, #0]
    2c22:	1d0a      	adds	r2, r1, #4
    2c24:	0605      	lsls	r5, r0, #24
    2c26:	d50b      	bpl.n	2c40 <_printf_i+0x9c>
    2c28:	680d      	ldr	r5, [r1, #0]
    2c2a:	601a      	str	r2, [r3, #0]
    2c2c:	2d00      	cmp	r5, #0
    2c2e:	da03      	bge.n	2c38 <_printf_i+0x94>
    2c30:	232d      	movs	r3, #45	; 0x2d
    2c32:	9a04      	ldr	r2, [sp, #16]
    2c34:	426d      	negs	r5, r5
    2c36:	7013      	strb	r3, [r2, #0]
    2c38:	4b61      	ldr	r3, [pc, #388]	; (2dc0 <_printf_i+0x21c>)
    2c3a:	270a      	movs	r7, #10
    2c3c:	9303      	str	r3, [sp, #12]
    2c3e:	e032      	b.n	2ca6 <_printf_i+0x102>
    2c40:	680d      	ldr	r5, [r1, #0]
    2c42:	601a      	str	r2, [r3, #0]
    2c44:	0641      	lsls	r1, r0, #25
    2c46:	d5f1      	bpl.n	2c2c <_printf_i+0x88>
    2c48:	b22d      	sxth	r5, r5
    2c4a:	e7ef      	b.n	2c2c <_printf_i+0x88>
    2c4c:	680d      	ldr	r5, [r1, #0]
    2c4e:	6819      	ldr	r1, [r3, #0]
    2c50:	1d08      	adds	r0, r1, #4
    2c52:	6018      	str	r0, [r3, #0]
    2c54:	062e      	lsls	r6, r5, #24
    2c56:	d501      	bpl.n	2c5c <_printf_i+0xb8>
    2c58:	680d      	ldr	r5, [r1, #0]
    2c5a:	e003      	b.n	2c64 <_printf_i+0xc0>
    2c5c:	066d      	lsls	r5, r5, #25
    2c5e:	d5fb      	bpl.n	2c58 <_printf_i+0xb4>
    2c60:	680d      	ldr	r5, [r1, #0]
    2c62:	b2ad      	uxth	r5, r5
    2c64:	4b56      	ldr	r3, [pc, #344]	; (2dc0 <_printf_i+0x21c>)
    2c66:	270a      	movs	r7, #10
    2c68:	9303      	str	r3, [sp, #12]
    2c6a:	2a6f      	cmp	r2, #111	; 0x6f
    2c6c:	d117      	bne.n	2c9e <_printf_i+0xfa>
    2c6e:	2708      	movs	r7, #8
    2c70:	e015      	b.n	2c9e <_printf_i+0xfa>
    2c72:	3145      	adds	r1, #69	; 0x45
    2c74:	700a      	strb	r2, [r1, #0]
    2c76:	4a52      	ldr	r2, [pc, #328]	; (2dc0 <_printf_i+0x21c>)
    2c78:	9203      	str	r2, [sp, #12]
    2c7a:	681a      	ldr	r2, [r3, #0]
    2c7c:	6821      	ldr	r1, [r4, #0]
    2c7e:	ca20      	ldmia	r2!, {r5}
    2c80:	601a      	str	r2, [r3, #0]
    2c82:	0608      	lsls	r0, r1, #24
    2c84:	d550      	bpl.n	2d28 <_printf_i+0x184>
    2c86:	07cb      	lsls	r3, r1, #31
    2c88:	d502      	bpl.n	2c90 <_printf_i+0xec>
    2c8a:	2320      	movs	r3, #32
    2c8c:	4319      	orrs	r1, r3
    2c8e:	6021      	str	r1, [r4, #0]
    2c90:	2710      	movs	r7, #16
    2c92:	2d00      	cmp	r5, #0
    2c94:	d103      	bne.n	2c9e <_printf_i+0xfa>
    2c96:	2320      	movs	r3, #32
    2c98:	6822      	ldr	r2, [r4, #0]
    2c9a:	439a      	bics	r2, r3
    2c9c:	6022      	str	r2, [r4, #0]
    2c9e:	0023      	movs	r3, r4
    2ca0:	2200      	movs	r2, #0
    2ca2:	3343      	adds	r3, #67	; 0x43
    2ca4:	701a      	strb	r2, [r3, #0]
    2ca6:	6863      	ldr	r3, [r4, #4]
    2ca8:	60a3      	str	r3, [r4, #8]
    2caa:	2b00      	cmp	r3, #0
    2cac:	db03      	blt.n	2cb6 <_printf_i+0x112>
    2cae:	2204      	movs	r2, #4
    2cb0:	6821      	ldr	r1, [r4, #0]
    2cb2:	4391      	bics	r1, r2
    2cb4:	6021      	str	r1, [r4, #0]
    2cb6:	2d00      	cmp	r5, #0
    2cb8:	d102      	bne.n	2cc0 <_printf_i+0x11c>
    2cba:	9e04      	ldr	r6, [sp, #16]
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d00c      	beq.n	2cda <_printf_i+0x136>
    2cc0:	9e04      	ldr	r6, [sp, #16]
    2cc2:	0028      	movs	r0, r5
    2cc4:	0039      	movs	r1, r7
    2cc6:	f7ff fa57 	bl	2178 <__aeabi_uidivmod>
    2cca:	9b03      	ldr	r3, [sp, #12]
    2ccc:	3e01      	subs	r6, #1
    2cce:	5c5b      	ldrb	r3, [r3, r1]
    2cd0:	7033      	strb	r3, [r6, #0]
    2cd2:	002b      	movs	r3, r5
    2cd4:	0005      	movs	r5, r0
    2cd6:	429f      	cmp	r7, r3
    2cd8:	d9f3      	bls.n	2cc2 <_printf_i+0x11e>
    2cda:	2f08      	cmp	r7, #8
    2cdc:	d109      	bne.n	2cf2 <_printf_i+0x14e>
    2cde:	6823      	ldr	r3, [r4, #0]
    2ce0:	07db      	lsls	r3, r3, #31
    2ce2:	d506      	bpl.n	2cf2 <_printf_i+0x14e>
    2ce4:	6863      	ldr	r3, [r4, #4]
    2ce6:	6922      	ldr	r2, [r4, #16]
    2ce8:	4293      	cmp	r3, r2
    2cea:	dc02      	bgt.n	2cf2 <_printf_i+0x14e>
    2cec:	2330      	movs	r3, #48	; 0x30
    2cee:	3e01      	subs	r6, #1
    2cf0:	7033      	strb	r3, [r6, #0]
    2cf2:	9b04      	ldr	r3, [sp, #16]
    2cf4:	1b9b      	subs	r3, r3, r6
    2cf6:	6123      	str	r3, [r4, #16]
    2cf8:	9b07      	ldr	r3, [sp, #28]
    2cfa:	0021      	movs	r1, r4
    2cfc:	9300      	str	r3, [sp, #0]
    2cfe:	9805      	ldr	r0, [sp, #20]
    2d00:	9b06      	ldr	r3, [sp, #24]
    2d02:	aa09      	add	r2, sp, #36	; 0x24
    2d04:	f7ff fede 	bl	2ac4 <_printf_common>
    2d08:	1c43      	adds	r3, r0, #1
    2d0a:	d135      	bne.n	2d78 <_printf_i+0x1d4>
    2d0c:	2001      	movs	r0, #1
    2d0e:	4240      	negs	r0, r0
    2d10:	b00b      	add	sp, #44	; 0x2c
    2d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d14:	2220      	movs	r2, #32
    2d16:	6809      	ldr	r1, [r1, #0]
    2d18:	430a      	orrs	r2, r1
    2d1a:	6022      	str	r2, [r4, #0]
    2d1c:	0022      	movs	r2, r4
    2d1e:	2178      	movs	r1, #120	; 0x78
    2d20:	3245      	adds	r2, #69	; 0x45
    2d22:	7011      	strb	r1, [r2, #0]
    2d24:	4a27      	ldr	r2, [pc, #156]	; (2dc4 <_printf_i+0x220>)
    2d26:	e7a7      	b.n	2c78 <_printf_i+0xd4>
    2d28:	0648      	lsls	r0, r1, #25
    2d2a:	d5ac      	bpl.n	2c86 <_printf_i+0xe2>
    2d2c:	b2ad      	uxth	r5, r5
    2d2e:	e7aa      	b.n	2c86 <_printf_i+0xe2>
    2d30:	681a      	ldr	r2, [r3, #0]
    2d32:	680d      	ldr	r5, [r1, #0]
    2d34:	1d10      	adds	r0, r2, #4
    2d36:	6949      	ldr	r1, [r1, #20]
    2d38:	6018      	str	r0, [r3, #0]
    2d3a:	6813      	ldr	r3, [r2, #0]
    2d3c:	062e      	lsls	r6, r5, #24
    2d3e:	d501      	bpl.n	2d44 <_printf_i+0x1a0>
    2d40:	6019      	str	r1, [r3, #0]
    2d42:	e002      	b.n	2d4a <_printf_i+0x1a6>
    2d44:	066d      	lsls	r5, r5, #25
    2d46:	d5fb      	bpl.n	2d40 <_printf_i+0x19c>
    2d48:	8019      	strh	r1, [r3, #0]
    2d4a:	2300      	movs	r3, #0
    2d4c:	9e04      	ldr	r6, [sp, #16]
    2d4e:	6123      	str	r3, [r4, #16]
    2d50:	e7d2      	b.n	2cf8 <_printf_i+0x154>
    2d52:	681a      	ldr	r2, [r3, #0]
    2d54:	1d11      	adds	r1, r2, #4
    2d56:	6019      	str	r1, [r3, #0]
    2d58:	6816      	ldr	r6, [r2, #0]
    2d5a:	2100      	movs	r1, #0
    2d5c:	0030      	movs	r0, r6
    2d5e:	6862      	ldr	r2, [r4, #4]
    2d60:	f000 f832 	bl	2dc8 <memchr>
    2d64:	2800      	cmp	r0, #0
    2d66:	d001      	beq.n	2d6c <_printf_i+0x1c8>
    2d68:	1b80      	subs	r0, r0, r6
    2d6a:	6060      	str	r0, [r4, #4]
    2d6c:	6863      	ldr	r3, [r4, #4]
    2d6e:	6123      	str	r3, [r4, #16]
    2d70:	2300      	movs	r3, #0
    2d72:	9a04      	ldr	r2, [sp, #16]
    2d74:	7013      	strb	r3, [r2, #0]
    2d76:	e7bf      	b.n	2cf8 <_printf_i+0x154>
    2d78:	6923      	ldr	r3, [r4, #16]
    2d7a:	0032      	movs	r2, r6
    2d7c:	9906      	ldr	r1, [sp, #24]
    2d7e:	9805      	ldr	r0, [sp, #20]
    2d80:	9d07      	ldr	r5, [sp, #28]
    2d82:	47a8      	blx	r5
    2d84:	1c43      	adds	r3, r0, #1
    2d86:	d0c1      	beq.n	2d0c <_printf_i+0x168>
    2d88:	6823      	ldr	r3, [r4, #0]
    2d8a:	079b      	lsls	r3, r3, #30
    2d8c:	d415      	bmi.n	2dba <_printf_i+0x216>
    2d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d90:	68e0      	ldr	r0, [r4, #12]
    2d92:	4298      	cmp	r0, r3
    2d94:	dabc      	bge.n	2d10 <_printf_i+0x16c>
    2d96:	0018      	movs	r0, r3
    2d98:	e7ba      	b.n	2d10 <_printf_i+0x16c>
    2d9a:	0022      	movs	r2, r4
    2d9c:	2301      	movs	r3, #1
    2d9e:	9906      	ldr	r1, [sp, #24]
    2da0:	9805      	ldr	r0, [sp, #20]
    2da2:	9e07      	ldr	r6, [sp, #28]
    2da4:	3219      	adds	r2, #25
    2da6:	47b0      	blx	r6
    2da8:	1c43      	adds	r3, r0, #1
    2daa:	d0af      	beq.n	2d0c <_printf_i+0x168>
    2dac:	3501      	adds	r5, #1
    2dae:	68e3      	ldr	r3, [r4, #12]
    2db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2db2:	1a9b      	subs	r3, r3, r2
    2db4:	42ab      	cmp	r3, r5
    2db6:	dcf0      	bgt.n	2d9a <_printf_i+0x1f6>
    2db8:	e7e9      	b.n	2d8e <_printf_i+0x1ea>
    2dba:	2500      	movs	r5, #0
    2dbc:	e7f7      	b.n	2dae <_printf_i+0x20a>
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	00003205 	.word	0x00003205
    2dc4:	00003216 	.word	0x00003216

00002dc8 <memchr>:
    2dc8:	b2c9      	uxtb	r1, r1
    2dca:	1882      	adds	r2, r0, r2
    2dcc:	4290      	cmp	r0, r2
    2dce:	d101      	bne.n	2dd4 <memchr+0xc>
    2dd0:	2000      	movs	r0, #0
    2dd2:	4770      	bx	lr
    2dd4:	7803      	ldrb	r3, [r0, #0]
    2dd6:	428b      	cmp	r3, r1
    2dd8:	d0fb      	beq.n	2dd2 <memchr+0xa>
    2dda:	3001      	adds	r0, #1
    2ddc:	e7f6      	b.n	2dcc <memchr+0x4>

00002dde <memmove>:
    2dde:	b510      	push	{r4, lr}
    2de0:	4288      	cmp	r0, r1
    2de2:	d902      	bls.n	2dea <memmove+0xc>
    2de4:	188b      	adds	r3, r1, r2
    2de6:	4298      	cmp	r0, r3
    2de8:	d303      	bcc.n	2df2 <memmove+0x14>
    2dea:	2300      	movs	r3, #0
    2dec:	e007      	b.n	2dfe <memmove+0x20>
    2dee:	5c8b      	ldrb	r3, [r1, r2]
    2df0:	5483      	strb	r3, [r0, r2]
    2df2:	3a01      	subs	r2, #1
    2df4:	d2fb      	bcs.n	2dee <memmove+0x10>
    2df6:	bd10      	pop	{r4, pc}
    2df8:	5ccc      	ldrb	r4, [r1, r3]
    2dfa:	54c4      	strb	r4, [r0, r3]
    2dfc:	3301      	adds	r3, #1
    2dfe:	429a      	cmp	r2, r3
    2e00:	d1fa      	bne.n	2df8 <memmove+0x1a>
    2e02:	e7f8      	b.n	2df6 <memmove+0x18>

00002e04 <_malloc_usable_size_r>:
    2e04:	1f0b      	subs	r3, r1, #4
    2e06:	681b      	ldr	r3, [r3, #0]
    2e08:	1f18      	subs	r0, r3, #4
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	da01      	bge.n	2e12 <_malloc_usable_size_r+0xe>
    2e0e:	580b      	ldr	r3, [r1, r0]
    2e10:	18c0      	adds	r0, r0, r3
    2e12:	4770      	bx	lr

00002e14 <__gnu_thumb1_case_shi>:
    2e14:	b403      	push	{r0, r1}
    2e16:	4671      	mov	r1, lr
    2e18:	0849      	lsrs	r1, r1, #1
    2e1a:	0040      	lsls	r0, r0, #1
    2e1c:	0049      	lsls	r1, r1, #1
    2e1e:	5e09      	ldrsh	r1, [r1, r0]
    2e20:	0049      	lsls	r1, r1, #1
    2e22:	448e      	add	lr, r1
    2e24:	bc03      	pop	{r0, r1}
    2e26:	4770      	bx	lr
    2e28:	00002e7c 	.word	0x00002e7c
    2e2c:	000005d9 	.word	0x000005d9
	...
    2e38:	00000018 	.word	0x00000018
    2e3c:	00000000 	.word	0x00000000
    2e40:	00000019 	.word	0x00000019
    2e44:	00000301 	.word	0x00000301
    2e48:	00000000 	.word	0x00000000
    2e4c:	00000005 	.word	0x00000005
    2e50:	00000000 	.word	0x00000000
    2e54:	00000008 	.word	0x00000008
    2e58:	00000000 	.word	0x00000000
    2e5c:	00000009 	.word	0x00000009
    2e60:	01010101 	.word	0x01010101
    2e64:	00000001 	.word	0x00000001
    2e68:	00002f60 	.word	0x00002f60
    2e6c:	00001011 	.word	0x00001011
    2e70:	00000000 	.word	0x00000000
    2e74:	4c554e00 	.word	0x4c554e00
    2e78:	ffff004c 	.word	0xffff004c
    2e7c:	63657865 	.word	0x63657865
    2e80:	ffffff00 	.word	0xffffff00
    2e84:	ff005441 	.word	0xff005441
    2e88:	30455441 	.word	0x30455441
    2e8c:	00000000 	.word	0x00000000
    2e90:	4552432b 	.word	0x4552432b
    2e94:	30203a47 	.word	0x30203a47
    2e98:	0000312c 	.word	0x0000312c
    2e9c:	432b5441 	.word	0x432b5441
    2ea0:	3f474552 	.word	0x3f474552
    2ea4:	00000000 	.word	0x00000000
    2ea8:	432b5441 	.word	0x432b5441
    2eac:	3d46474d 	.word	0x3d46474d
    2eb0:	00000031 	.word	0x00000031
    2eb4:	432b5441 	.word	0x432b5441
    2eb8:	4144474d 	.word	0x4144474d
    2ebc:	4544223d 	.word	0x4544223d
    2ec0:	4c41204c 	.word	0x4c41204c
    2ec4:	ff00224c 	.word	0xff00224c
    2ec8:	432b5441 	.word	0x432b5441
    2ecc:	3d52474d 	.word	0x3d52474d
    2ed0:	00006425 	.word	0x00006425
    2ed4:	474d432b 	.word	0x474d432b
    2ed8:	00000052 	.word	0x00000052
    2edc:	0a0d0a0d 	.word	0x0a0d0a0d
    2ee0:	00004b4f 	.word	0x00004b4f
    2ee4:	ff00222c 	.word	0xff00222c
    2ee8:	474e4952 	.word	0x474e4952
    2eec:	00000000 	.word	0x00000000
    2ef0:	00485441 	.word	0x00485441
    2ef4:	544d432b 	.word	0x544d432b
    2ef8:	ffff0049 	.word	0xffff0049
    2efc:	432b5441 	.word	0x432b5441
    2f00:	3d53474d 	.word	0x3d53474d
    2f04:	22732522 	.word	0x22732522
    2f08:	00000000 	.word	0x00000000
    2f0c:	474d432b 	.word	0x474d432b
    2f10:	00000053 	.word	0x00000053
    2f14:	ffff001a 	.word	0xffff001a
    2f18:	6d6d6f43 	.word	0x6d6d6f43
    2f1c:	20646e61 	.word	0x20646e61
    2f20:	656d6974 	.word	0x656d6974
    2f24:	756f2064 	.word	0x756f2064
    2f28:	00000074 	.word	0x00000074
    2f2c:	74726175 	.word	0x74726175
    2f30:	65723e2d 	.word	0x65723e2d
    2f34:	29286461 	.word	0x29286461
    2f38:	74657220 	.word	0x74657220
    2f3c:	656e7275 	.word	0x656e7275
    2f40:	756e2064 	.word	0x756e2064
    2f44:	ff006c6c 	.word	0xff006c6c

00002f48 <_ZL10child_pipe>:
    2f48:	0d0c0b0a ffff0f0e                       ........

00002f50 <_ZL17child_pipe_enable>:
    2f50:	03020100 ffff0504                       ........

00002f58 <_ZL18child_payload_size>:
    2f58:	14131211 ffff1615 6f666e69 ffffff00     ........info....
    2f68:	7473694c 00000a3a 65646f4e 49200a3a     List:...Node:. I
    2f78:	25203a44 4e200a64 3a656d61 0a732520     D: %d. Name: %s.
    2f88:	70795420 25203a65 4c200a64 20747361      Type: %d. Last 
    2f98:	6e656573 6425203a 63657320 6f676120     seen: %d sec ago
    2fa8:	0000000a 696f5320 6f6d206c 75747369     .... Soil moistu
    2fb8:	73206572 6f736e65 200a3a72 696f4d20     re sensor:.  Moi
    2fc8:	72757473 25203a65 00000a64 6d655420     sture: %d... Tem
    2fd8:	61726570 65727574 68202b20 64696d75     perature + humid
    2fe8:	20797469 736e6573 0a3a726f 65542020     ity sensor:.  Te
    2ff8:	7265706d 72757461 25203a65 20200a64     mperature: %d.  
    3008:	696d7548 79746964 6425203a 0000000a     Humidity: %d....
    3018:	6d655420 61726570 65727574 6e657320      Temperature sen
    3028:	3a726f73 5420200a 65706d65 75746172     sor:.  Temperatu
    3038:	203a6572 000a6425 6e746573 00656d61     re: %d..setname.
    3048:	61656c63 ffff0072 6c6c616d 6620636f     clear...malloc f
    3058:	656c6961 00000064 00000020 6d6d6f43     ailed... ...Comm
    3068:	20646e61 75657571 00006465 67617355     and queued..Usag
    3078:	73203a65 616e7465 3c20656d 203e6469     e: setname <id> 
    3088:	77656e3c 6d616e20                        <new name>.

00003093 <_ctype_>:
    3093:	20202000 20202020 28282020 20282828     .         ((((( 
    30a3:	20202020 20202020 20202020 20202020                     
    30b3:	10108820 10101010 10101010 10101010      ...............
    30c3:	04040410 04040404 10040404 10101010     ................
    30d3:	41411010 41414141 01010101 01010101     ..AAAAAA........
    30e3:	01010101 01010101 01010101 10101010     ................
    30f3:	42421010 42424242 02020202 02020202     ..BBBBBB........
    3103:	02020202 02020202 02020202 10101010     ................
    3113:	00000020 00000000 00000000 00000000      ...............
	...

00003194 <__sf_fake_stderr>:
	...

000031b4 <__sf_fake_stdin>:
	...

000031d4 <__sf_fake_stdout>:
	...
    31f4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3204:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3214:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3224:	ff006665                                ef..

00003228 <_init>:
    3228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    322e:	bc08      	pop	{r3}
    3230:	469e      	mov	lr, r3
    3232:	4770      	bx	lr

00003234 <__init_array_start>:
    3234:	000000b5 	.word	0x000000b5
    3238:	00001291 	.word	0x00001291
    323c:	0000153d 	.word	0x0000153d
    3240:	00001c41 	.word	0x00001c41

00003244 <_fini>:
    3244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	bcf8      	pop	{r3, r4, r5, r6, r7}
    324a:	bc08      	pop	{r3}
    324c:	469e      	mov	lr, r3
    324e:	4770      	bx	lr

00003250 <__delay_usec_veneer>:
    3250:	b401      	push	{r0}
    3252:	4802      	ldr	r0, [pc, #8]	; (325c <__delay_usec_veneer+0xc>)
    3254:	4684      	mov	ip, r0
    3256:	bc01      	pop	{r0}
    3258:	4760      	bx	ip
    325a:	bf00      	nop
    325c:	20000001 	.word	0x20000001

00003260 <__fini_array_start>:
    3260:	0000008d 	.word	0x0000008d

Disassembly of section .data:

20000000 <delay_usec>:
	__asm (
20000000:	210f      	movs	r1, #15

20000002 <mydelay1>:
20000002:	3901      	subs	r1, #1
20000004:	d1fd      	bne.n	20000002 <mydelay1>
20000006:	3801      	subs	r0, #1
20000008:	d1fa      	bne.n	20000000 <delay_usec>
}
2000000a:	4770      	bx	lr

2000000c <__dso_handle>:
2000000c:	0000 0000                                   ....

20000010 <_ZN3Str11EmptyBufferE>:
20000010:	2e74 0000                                   t...

20000014 <_impure_ptr>:
20000014:	0018 2000                                   ... 

20000018 <impure_data>:
20000018:	0000 0000 31b4 0000 31d4 0000 3194 0000     .....1...1...1..
	...
