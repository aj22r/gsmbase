
build/gsmbase.elf:     file format elf32-littlearm
build/gsmbase.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000203d

Program Header:
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0000357c memsz 0x0000357c flags r-x
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x0000357c align 2**16
         filesz 0x0000024c memsz 0x0000024c flags rwx
    LOAD off    0x00020250 vaddr 0x20000250 paddr 0x000037c8 align 2**16
         filesz 0x00000000 memsz 0x000004ac flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000357c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024c  20000000  0000357c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004ac  20000250  000037c8  00020250  2**3
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
  4 .comment      00000079  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
  5 .debug_info   0003c7ce  00000000  00000000  000202ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000455a  00000000  00000000  0005cabb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00006b24  00000000  00000000  00061015  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000640  00000000  00000000  00067b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001068  00000000  00000000  00068179  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006e67  00000000  00000000  000691e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000e41b  00000000  00000000  00070048  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c14  00000000  00000000  0007e464  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000250 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_samd10.c
00000000 l    df *ABS*	00000000 crtstuff.c
0000008c l     F .text	00000000 __do_global_dtors_aux
20000250 l       .bss	00000001 completed.8911
00003578 l     O .text	00000000 __do_global_dtors_aux_fini_array_entry
000000b4 l     F .text	00000000 frame_dummy
20000254 l       .bss	00000018 object.8916
00003538 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 GSM.cpp
000002d4 l     F .text	0000004c _ZL9func_execP3GSMPKcS2_
00000320 l     F .text	00000048 _ZL12func_listcmdP3GSMPKcS2_
00000440 l     F .text	00000088 _ZL11func_setnumP3GSMPKcS2_
000004f4 l     F .text	0000001c _ZL11func_delnumP3GSMPKcS2_
000005cc l     F .text	00000098 _ZL12func_listnumP3GSMPKcS2_
000009e0 l     F .text	000000a0 _ZL11func_updateP3GSMPKcS2_
200001b0 l     O .data	0000000a _ZL11subtractors
200001ba l     O .data	00000027 _ZL6fsread
00000000 l    df *ABS*	00000000 RF24.cpp
00003276 l     O .text	00000006 _ZL10child_pipe
0000327c l     O .text	00000006 _ZL17child_pipe_enable
00003282 l     O .text	00000006 _ZL18child_payload_size
00000000 l    df *ABS*	00000000 main.cpp
00001208 l     F .text	00000014 _ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_
0000121c l     F .text	00000020 _ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_
00001410 l     F .text	000000d4 _ZL8cmd_infoP3GSMPKcS2_
00001600 l     F .text	00000068 _GLOBAL__sub_I__ZN3Str11EmptyBufferE
2000026c l     O .bss	00000014 _ZL3gsm
20000280 l     O .bss	00000038 _ZL3net
00000000 l    df *ABS*	00000000 spi.cpp
000017e4 l     F .text	00000020 _GLOBAL__sub_I_g_spi0
00000000 l    df *ABS*	00000000 systick.c
200001a0 l       .data	00000000 mydelay
200001a2 l       .data	00000000 mydelay1
200002c0 l     O .bss	00000008 _cycles
00000000 l    df *ABS*	00000000 uart.cpp
00001cd0 l     F .text	0000004c _GLOBAL__sub_I_g_uart0
00000000 l    df *ABS*	00000000 sensornet.cpp
00000000 l    df *ABS*	00000000 syscalls.c
200006e0 l     O .bss	00000004 heap.4639
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _udivsi3.o
00002108 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
000026f4 l     F .text	00000104 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 _thumb1_case_shi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 impure.c
200001ec l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00003558 l     F .text	00000010 ___ZN3GSM11WriteUpdateEv_veneer
00003568 l     F .text	00000010 __delay_usec_veneer
00000d60 g     F .text	0000000a _ZN4RF2410get_statusEv
00002ef4 g     F .text	00000010 _malloc_usable_size_r
0000105e g     F .text	00000028 _ZN4RF2410setPALevelEh
000025b0 g     F .text	00000010 strcpy
00000c42 g     F .text	0000002e _ZN4RF2414write_registerEhh
00000fcc g     F .text	00000060 _ZN4RF2414startListeningEv
00001d1c g     F .text	00000020 _ZN9SensornetC1ERK4RF24
000001e0 g     F .text	00000088 _ZN3GSM7PowerOnEv
00002038  w    F .text	00000002 DMAC_Handler
200006ec g     O .bss	00000001 __lock___atexit_recursive_mutex
00002038  w    F .text	00000002 HardFault_Handler
00002038  w    F .text	00000002 TC2_Handler
00000eee g     F .text	0000000a _ZN4RF249availableEv
00002894 g     F .text	00000010 __malloc_unlock
00000eba g     F .text	0000000a _ZN4RF245writeEPKvh
00002038  w    F .text	00000002 AC_Handler
0000198c g     F .text	0000001c SysTick_Handler
200006ed g     O .bss	00000001 __lock___arc4random_mutex
00002ece g     F .text	00000026 memmove
00002038  w    F .text	00000002 PendSV_Handler
000024e4 g     F .text	00000068 snprintf
00002038  w    F .text	00000002 NMI_Handler
00002694 g     F .text	0000005e __strtok_r
00000a80  w    F .text	00000038 _ZN6VectorI7SMSFuncE9push_backERKS0_
0000138a g     F .text	00000052 _ZN3Str13appendfv_fromEiPKcSt9__va_list
00000000 g       .text	00000000 _sfixed
00001cc0 g     F .text	00000010 SERCOM1_Handler
00002038  w    F .text	00000002 ADC_Handler
200006f8 g     O .bss	00000004 errno
0000357c g       .data	00000000 _etext
00000d6a g     F .text	00000038 _ZN4RF24C2E6gpio_tS0_R5spi_t
00000bd6  w    F .text	0000000a _ZN4RF2414endTransactionEv
20001000 g       .text	00000000 __top_ram
0000231c g     F .text	00000012 memcpy
00000128 g     F .text	00000012 _ZN3GSMD1Ev
000029b4 g     F .text	00000200 _svfprintf_r
00000c70 g     F .text	00000060 _ZN4RF2413write_payloadEPKvhh
00002038  w    F .text	00000002 SERCOM2_Handler
0000357c g       .text	00000000 __fini_array_end
00002038  w    F .text	00000002 TCC0_Handler
00000d56 g     F .text	0000000a _ZN4RF248flush_txEv
000022f4 g     F .text	00000014 malloc
00000db4 g     F .text	0000000c _ZN4RF2414setPayloadSizeEh
00002108 g     F .text	0000010a .hidden __udivsi3
00001bd8 g     F .text	00000048 _ZN6uart_t4peekEi
00002038  w    F .text	00000002 RTC_Handler
00002868 g     F .text	00000018 vsnprintf
000007a4 g     F .text	0000009c _ZN3GSM7ReadSMSEi
200001ac g     O .data	00000000 .hidden __dso_handle
00001b74 g     F .text	00000028 _ZN6uart_t7rxemptyEv
00000b9c g     F .text	00000030 _ZN4RF242ceEb
000013f8 g     F .text	00000016 _ZN3Str7appendfEPKcz
000024c0 g     F .text	00000024 _sbrk_r
200002c8 g     O .bss	0000020c g_uart0
00002038  w    F .text	00000002 EIC_Handler
000013dc g     F .text	0000001c _ZN3Str8appendfvEPKcSt9__va_list
000012cc g     F .text	00000062 _ZN3Str15reserve_discardEi
00002038  w    F .text	00000002 WDT_Handler
200002b8 g     O .bss	00000004 g_spi0
200006ee g     O .bss	00000001 __lock___env_recursive_mutex
200006ef g     O .bss	00000001 __lock___sinit_recursive_mutex
00002220 g     F .text	00000050 .hidden __aeabi_lmul
000008bc g     F .text	00000124 _ZN3GSM13PerformUpdateEPKcS1_S1_
000028a4 g     F .text	0000004c _realloc_r
000022ac g     F .text	00000048 __libc_init_array
000020d8 g     F .text	00000020 _sbrk
00000100  w    F .text	00000028 _ZN3StrD1Ev
00002038  w    F .text	00000002 TC1_Handler
0000352c g     F .text	00000000 _init
00000f0c g     F .text	0000002a _ZN4RF2415openWritingPipeEy
000027f8 g     F .text	00000018 strtol
00000e14 g     F .text	0000002c _ZN4RF247powerUpEv
00004000 g       .text	00000000 __top_flash
200006fc g       .bss	00000000 _ebss
0000203c g     F .text	0000009c Reset_Handler
00002868 g     F .text	00000018 vsniprintf
0000227c g     F .text	00000014 calloc
200006f0 g     O .bss	00000001 __lock___malloc_recursive_mutex
20001000 g       *ABS*	00000000 _stack_top
00000bcc  w    F .text	0000000a _ZN4RF2416beginTransactionEv
00001d94 g     F .text	00000086 _ZN9Sensornet10UpdateNodeERK12SensorPacket
00002038 g     F .text	00000002 Dummy_Handler
00001f32 g     F .text	0000002a _ZN9Sensornet4PollEv
00000100  w    F .text	00000028 _ZN3StrD2Ev
00003498 g     O .text	00000020 __sf_fake_stderr
000024e4 g     F .text	00000068 sniprintf
00000510 g     F .text	000000bc _ZN3GSM9GetAllNumEP6VectorIPcE
000003d4 g     F .text	0000006c _ZN3GSM11SetNumLevelEPKcc
00002882 g     F .text	00000002 __retarget_lock_release_recursive
00000d2e g     F .text	0000001e _ZN4RF248spiTransEh
000028f0 g     F .text	000000c4 __ssputs_r
00000e40 g     F .text	00000026 _ZN4RF2414startFastWriteEPKvhbb
00000e66 g     F .text	00000054 _ZN4RF245writeEPKvhb
00001f5c g     F .text	000000dc _ZN9Sensornet10CMDSetNameEP3GSMPKcS3_
00000ef8 g     F .text	00000014 _ZN4RF244readEPvh
00000840 g     F .text	0000007c _ZN3GSM4PollEv
00002eb8 g     F .text	00000016 memchr
0000235c g     F .text	00000094 _free_r
00001e1a g     F .text	00000118 _ZN9Sensornet13ProcessPacketER12SensorPacket
00002f04 g     F .text	00000014 .hidden __gnu_thumb1_case_shi
20000250 g       .bss	00000000 _bss
00001b40 g     F .text	00000034 _ZN6uart_t5printEPKci
00002618 g     F .text	0000002c strstr
200004d4 g     O .bss	0000020c g_uart1
00002038  w    F .text	00000002 PM_Handler
00001950 g     F .text	00000024 systick_cycles
0000125c g     F .text	00000070 _ZN3Str7reserveEi
200001e4 g     O .data	00000004 _ZN3Str11EmptyBufferE
000025ce g     F .text	00000022 strncmp
000011ec  w    F .text	0000001c _ZN9SensornetD2Ev
00001804 g     F .text	0000014c systick_init
000025f0 g     F .text	00000028 strncpy
00000664 g     F .text	000000d0 _ZN3GSM4InitEv
0000254c g     F .text	00000034 strcasecmp
000016b0 g     F .text	00000114 _ZN5spi_t4InitE12spi_pincfg_tt
00000128 g     F .text	00000012 _ZN3GSMD2Ev
000017c4 g     F .text	00000020 _ZN5spi_t8TransferEh
000024ac g     F .text	00000014 realloc
00001b9c g     F .text	0000003c _ZN6uart_t4getcEv
00000ec4 g     F .text	0000002a _ZN4RF249availableEPh
00002290 g     F .text	0000001c __cxa_atexit
00002644 g     F .text	00000050 strtok
2000002e g     F .data	0000004a _ZN3GSM17RAMFunc_print_intEt
0000221c  w    F .text	00000002 .hidden __aeabi_ldiv0
00000d4c g     F .text	0000000a _ZN4RF248flush_rxEv
00002810 g     F .text	00000056 _vsnprintf_r
0000013c g     F .text	00000070 _ZN3GSM7CommandEPKcS1_j
20000016 g     F .data	00000018 _ZN3GSM13RAMFunc_printEPKc
00002884 g     F .text	00000010 __malloc_lock
00003578 g       .text	00000000 __fini_array_start
0000233e g     F .text	0000001c _calloc_r
000034b8 g     O .text	00000020 __sf_fake_stdin
00000b70 g     F .text	0000002c _ZN4RF243csnEb
00002880 g     F .text	00000002 __retarget_lock_acquire_recursive
0000232e g     F .text	00000010 memset
000014e4 g     F .text	0000011c main
00001d3c g     F .text	00000058 _ZN9Sensornet5beginEv
200002bc g     O .bss	00000004 g_spi1
00002108 g     F .text	00000000 .hidden __aeabi_uidiv
00000268 g     F .text	0000006c _ZN3GSM7SendSMSEPKcS1_
00002038  w    F .text	00000002 SVC_Handler
200001a0 g     F .data	0000000c delay_usec
00002038  w    F .text	00000002 EVSYS_Handler
00003548 g       .text	00000000 __init_array_end
000023f0 g     F .text	000000bc _malloc_r
00000734 g     F .text	0000006e _ZN3GSM10ProcessSMSEPKcS1_
0000259c g     F .text	00000014 strcmp
00002038  w    F .text	00000002 NVMCTRL_Handler
20000078 g     F .data	00000020 _ZN3GSM15RAMFunc_wait_rxEv
00003548 g     F .text	00000000 _fini
0000102c g     F .text	00000020 _ZN4RF2415toggle_featuresEv
00001c6c g     F .text	00000044 _ZN6uart_t4readEv
000004c8 g     F .text	0000002c _ZN3GSM9RemoveNumEPKc
00001374 g     F .text	00000016 _ZN3Str4setfEPKcz
000019a8 g     F .text	00000128 _ZN6uart_t4initERK13uart_pincfg_tt
00001c20 g     F .text	0000004c _ZN6uart_t4findEPKc
20000098 g     F .data	00000108 _ZN3GSM11WriteUpdateEv
00001cb0 g     F .text	00000010 SERCOM0_Handler
00002bb4 g     F .text	000000de _printf_common
200001e8 g     O .data	00000004 _impure_ptr
00003538 g       .text	00000000 __preinit_array_end
000029b4 g     F .text	00000200 _svfiprintf_r
00000d6a g     F .text	00000038 _ZN4RF24C1E6gpio_tS0_R5spi_t
20000000 g       .data	00000000 _data
00000000 g     O .text	0000008c exception_table
0000123c  w    F .text	00000020 _ZNK3Str18is_using_local_bufEv
000011ec  w    F .text	0000001c _ZN9SensornetD1Ev
00002038  w    F .text	00000002 DAC_Handler
00000be0 g     F .text	00000028 _ZN4RF2413read_registerEh
00002810 g     F .text	00000056 _vsniprintf_r
00000cd0 g     F .text	0000005e _ZN4RF2412read_payloadEPvh
00000dc0 g     F .text	00000054 _ZN4RF2413stopListeningEv
00002214 g     F .text	00000008 .hidden __aeabi_uidivmod
2000024c g       .data	00000000 _edata
200006fc g       .bss	00000000 _end
200006f1 g     O .bss	00000001 __lock___at_quick_exit_mutex
00002038  w    F .text	00000002 PTC_Handler
000000d4  w    F .text	0000002c _ZN6uart_t9availableEv
00001d1c g     F .text	00000020 _ZN9SensornetC2ERK4RF24
000011d8 g     F .text	00000014 _ZN4RF2410setRetriesEhh
00000c08 g     F .text	0000003a _ZN4RF2414write_registerEhPKhh
000001ac g     F .text	00000034 _ZN3GSM13RepeatCommandEPKcS1_ii
00001086 g     F .text	00000048 _ZN4RF2411setDataRateE15rf24_datarate_e
00001b20 g     F .text	00000020 _ZN6uart_t5writeEc
000034d8 g     O .text	00000020 __sf_fake_stdout
00002270 g     F .text	0000000c atoi
00003394 g     O .text	00000101 _ctype_
0000221c  w    F .text	00000002 .hidden __aeabi_idiv0
00003538 g       .text	00000000 __init_array_start
00002220 g     F .text	00000050 .hidden __muldi3
00000368 g     F .text	0000006c _ZN3GSM11GetNumLevelEPKc
200006f2 g     O .bss	00000001 __lock___dd_hash_mutex
200006f3 g     O .bss	00000001 __lock___tz_mutex
00000ab8 g     F .text	000000b8 _ZN3GSMC2E6gpio_tP6uart_t
00000fa4 g     F .text	00000028 _ZN4RF2416closeReadingPipeEh
000025c0 g     F .text	0000000e strlen
00002c94 g     F .text	00000224 _printf_i
00001668  w    F .text	00000048 _ZN4gpio6pmuxenERK6gpio_th
200006e8 g     O .bss	00000004 __malloc_sbrk_start
0000132e g     F .text	00000046 _ZN3Str5setfvEPKcSt9__va_list
00000ab8 g     F .text	000000b8 _ZN3GSMC1E6gpio_tP6uart_t
00002580 g     F .text	0000001c strchr
200006e4 g     O .bss	00000004 __malloc_free_list
000010d0 g     F .text	00000108 _ZN4RF245beginEv
00003538 g       .text	00000000 __preinit_array_start
000020f8 g     F .text	0000000e __aeabi_atexit
00000da2 g     F .text	00000012 _ZN4RF2410setChannelEh
00001974 g     F .text	00000018 millis
0000104c g     F .text	00000012 _ZN4RF2410setAutoAckEb
00001ad0 g     F .text	00000050 _ZN6uart_t14sercom_handlerEv
00000f38 g     F .text	0000006c _ZN4RF2415openReadingPipeEhy
200006f4 g     O .bss	00000001 __lock___sfp_recursive_mutex
20000000 g     F .data	00000016 _ZN3GSM13RAMFunc_writeEc
00002308 g     F .text	00000014 free
00002038  w    F .text	00000002 SYSCTRL_Handler



Disassembly of section .text:

00000000 <exception_table>:
       0:	00 10 00 20 3d 20 00 00 39 20 00 00 39 20 00 00     ... = ..9 ..9 ..
	...
      2c:	39 20 00 00 00 00 00 00 00 00 00 00 39 20 00 00     9 ..........9 ..
      3c:	8d 19 00 00 39 20 00 00 39 20 00 00 39 20 00 00     ....9 ..9 ..9 ..
      4c:	39 20 00 00 39 20 00 00 39 20 00 00 39 20 00 00     9 ..9 ..9 ..9 ..
      5c:	00 00 00 00 39 20 00 00 b1 1c 00 00 c1 1c 00 00     ....9 ..........
      6c:	39 20 00 00 39 20 00 00 39 20 00 00 39 20 00 00     9 ..9 ..9 ..9 ..
      7c:	39 20 00 00 39 20 00 00 39 20 00 00 39 20 00 00     9 ..9 ..9 ..9 ..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000250 	.word	0x20000250
      ac:	00000000 	.word	0x00000000
      b0:	0000357c 	.word	0x0000357c

000000b4 <frame_dummy>:
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <frame_dummy+0x14>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4903      	ldr	r1, [pc, #12]	; (cc <frame_dummy+0x18>)
      be:	4804      	ldr	r0, [pc, #16]	; (d0 <frame_dummy+0x1c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	bd10      	pop	{r4, pc}
      c6:	46c0      	nop			; (mov r8, r8)
      c8:	00000000 	.word	0x00000000
      cc:	20000254 	.word	0x20000254
      d0:	0000357c 	.word	0x0000357c

000000d4 <_ZN6uart_t9availableEv>:
        m_rxhead = 0;
        m_rxtail = 0;
        m_rxfull = false;
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
      d4:	2380      	movs	r3, #128	; 0x80
    uint16_t available() {
      d6:	b510      	push	{r4, lr}
        if(m_rxhead >= m_rxtail)
      d8:	4a08      	ldr	r2, [pc, #32]	; (fc <_ZN6uart_t9availableEv+0x28>)
      da:	009b      	lsls	r3, r3, #2
      dc:	5ac4      	ldrh	r4, [r0, r3]
      de:	5a81      	ldrh	r1, [r0, r2]
            return m_rxhead - m_rxtail;
      e0:	5ac3      	ldrh	r3, [r0, r3]
        if(m_rxhead >= m_rxtail)
      e2:	428c      	cmp	r4, r1
      e4:	d303      	bcc.n	ee <_ZN6uart_t9availableEv+0x1a>
            return m_rxhead - m_rxtail;
      e6:	5a80      	ldrh	r0, [r0, r2]
      e8:	1a18      	subs	r0, r3, r0
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
      ea:	b280      	uxth	r0, r0
    }
      ec:	bd10      	pop	{r4, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
      ee:	2180      	movs	r1, #128	; 0x80
      f0:	5a82      	ldrh	r2, [r0, r2]
      f2:	0089      	lsls	r1, r1, #2
      f4:	1858      	adds	r0, r3, r1
      f6:	1a80      	subs	r0, r0, r2
      f8:	e7f7      	b.n	ea <_ZN6uart_t9availableEv+0x16>
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000202 	.word	0x00000202

00000100 <_ZN3StrD1Ev>:
#endif

    // Destructor for all variants
    inline ~Str()
    {
        if (Owned && !is_using_local_buf())
     100:	79c3      	ldrb	r3, [r0, #7]
    inline ~Str()
     102:	b510      	push	{r4, lr}
     104:	0004      	movs	r4, r0
        if (Owned && !is_using_local_buf())
     106:	2b7f      	cmp	r3, #127	; 0x7f
     108:	d90a      	bls.n	120 <_ZN3StrD1Ev+0x20>

    static char*        EmptyBuffer;

protected:
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
     10a:	0023      	movs	r3, r4
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     10c:	6800      	ldr	r0, [r0, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
     10e:	3308      	adds	r3, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     110:	4298      	cmp	r0, r3
     112:	d103      	bne.n	11c <_ZN3StrD1Ev+0x1c>
     114:	88e2      	ldrh	r2, [r4, #6]
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <_ZN3StrD1Ev+0x24>)
     118:	421a      	tst	r2, r3
     11a:	d101      	bne.n	120 <_ZN3StrD1Ev+0x20>
            STR_MEMFREE(Data);
     11c:	f002 f8f4 	bl	2308 <free>
    }
     120:	0020      	movs	r0, r4
     122:	bd10      	pop	{r4, pc}
     124:	00007fe0 	.word	0x00007fe0

00000128 <_ZN3GSMD1Ev>:
    m_smsfuncs.push_back({"listnum", func_listnum, LEVEL_USER});
    m_smsfuncs.push_back({"update", func_update, LEVEL_ADMIN});
    m_smsfuncs.push_back({"help", func_listcmd, LEVEL_USER});
}

GSM::~GSM() {
     128:	b510      	push	{r4, lr}
     12a:	0004      	movs	r4, r0
    T* m_data;

public:
    Vector() : m_size(0), m_data(NULL) {}
    ~Vector() {
        if(m_data) free(m_data);
     12c:	6900      	ldr	r0, [r0, #16]
     12e:	2800      	cmp	r0, #0
     130:	d001      	beq.n	136 <_ZN3GSMD1Ev+0xe>
     132:	f002 f8e9 	bl	2308 <free>
    
}
     136:	0020      	movs	r0, r4
     138:	bd10      	pop	{r4, pc}
     13a:	Address 0x0000013a is out of bounds.


0000013c <_ZN3GSM7CommandEPKcS1_j>:

bool GSM::Command(const char* cmd, const char* result, unsigned int response_time) {
     13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     13e:	0016      	movs	r6, r2
        m_rxhead = 0;
     140:	2280      	movs	r2, #128	; 0x80
     142:	9301      	str	r3, [sp, #4]
     144:	2300      	movs	r3, #0
     146:	0005      	movs	r5, r0
    uint32_t start;

    m_uart->flush_rx();
     148:	6880      	ldr	r0, [r0, #8]
     14a:	0092      	lsls	r2, r2, #2
     14c:	5283      	strh	r3, [r0, r2]
        m_rxtail = 0;
     14e:	4a15      	ldr	r2, [pc, #84]	; (1a4 <_ZN3GSM7CommandEPKcS1_j+0x68>)
     150:	5283      	strh	r3, [r0, r2]
        m_rxfull = false;
     152:	3202      	adds	r2, #2
     154:	5483      	strb	r3, [r0, r2]

    m_uart->print(cmd);
     156:	2201      	movs	r2, #1
     158:	4252      	negs	r2, r2
     15a:	f001 fcf1 	bl	1b40 <_ZN6uart_t5printEPKci>
    m_uart->write('\r');
     15e:	210d      	movs	r1, #13
     160:	68a8      	ldr	r0, [r5, #8]
     162:	f001 fcdd 	bl	1b20 <_ZN6uart_t5writeEc>
    // Allow up to response_time milliseconds to get a response
    start = millis();
     166:	f001 fc05 	bl	1974 <millis>
     16a:	0007      	movs	r7, r0
    while(!m_uart->available())
     16c:	68a8      	ldr	r0, [r5, #8]
     16e:	f7ff ffb1 	bl	d4 <_ZN6uart_t9availableEv>
     172:	1e04      	subs	r4, r0, #0
     174:	d107      	bne.n	186 <_ZN3GSM7CommandEPKcS1_j+0x4a>
        if(millis() - start >= response_time)
     176:	f001 fbfd 	bl	1974 <millis>
     17a:	9b01      	ldr	r3, [sp, #4]
     17c:	1bc0      	subs	r0, r0, r7
     17e:	4298      	cmp	r0, r3
     180:	d3f4      	bcc.n	16c <_ZN3GSM7CommandEPKcS1_j+0x30>
            return false;
     182:	0020      	movs	r0, r4
     184:	e00d      	b.n	1a2 <_ZN3GSM7CommandEPKcS1_j+0x66>
    
    delay_usec(100000); // wait 100 ms to get the whole response
     186:	4808      	ldr	r0, [pc, #32]	; (1a8 <_ZN3GSM7CommandEPKcS1_j+0x6c>)
     188:	f003 f9ee 	bl	3568 <__delay_usec_veneer>

    if(!result) return true;
     18c:	2001      	movs	r0, #1
     18e:	2e00      	cmp	r6, #0
     190:	d007      	beq.n	1a2 <_ZN3GSM7CommandEPKcS1_j+0x66>
    return m_uart->find(result) != -1;
     192:	0031      	movs	r1, r6
     194:	68a8      	ldr	r0, [r5, #8]
     196:	f001 fd43 	bl	1c20 <_ZN6uart_t4findEPKc>
     19a:	3001      	adds	r0, #1
     19c:	1e44      	subs	r4, r0, #1
     19e:	41a0      	sbcs	r0, r4
     1a0:	b2c0      	uxtb	r0, r0
}
     1a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     1a4:	00000202 	.word	0x00000202
     1a8:	000186a0 	.word	0x000186a0

000001ac <_ZN3GSM13RepeatCommandEPKcS1_ii>:

bool GSM::RepeatCommand(const char* cmd, const char* result, int repeats, int response_time) {
     1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     1ae:	0005      	movs	r5, r0
     1b0:	000e      	movs	r6, r1
     1b2:	0017      	movs	r7, r2
    for(int i = 0; i < repeats; i++) {
     1b4:	2400      	movs	r4, #0
bool GSM::RepeatCommand(const char* cmd, const char* result, int repeats, int response_time) {
     1b6:	9301      	str	r3, [sp, #4]
    for(int i = 0; i < repeats; i++) {
     1b8:	9b01      	ldr	r3, [sp, #4]
     1ba:	429c      	cmp	r4, r3
     1bc:	da0c      	bge.n	1d8 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x2c>
        if(Command(cmd, result, response_time))
     1be:	003a      	movs	r2, r7
     1c0:	0031      	movs	r1, r6
     1c2:	0028      	movs	r0, r5
     1c4:	9b08      	ldr	r3, [sp, #32]
     1c6:	f7ff ffb9 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     1ca:	2800      	cmp	r0, #0
     1cc:	d105      	bne.n	1da <_ZN3GSM13RepeatCommandEPKcS1_ii+0x2e>
            return true;
        
        delay_usec(500000);
     1ce:	4803      	ldr	r0, [pc, #12]	; (1dc <_ZN3GSM13RepeatCommandEPKcS1_ii+0x30>)
     1d0:	f003 f9ca 	bl	3568 <__delay_usec_veneer>
    for(int i = 0; i < repeats; i++) {
     1d4:	3401      	adds	r4, #1
     1d6:	e7ef      	b.n	1b8 <_ZN3GSM13RepeatCommandEPKcS1_ii+0xc>
    }
    return false;
     1d8:	2000      	movs	r0, #0
}
     1da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     1dc:	0007a120 	.word	0x0007a120

000001e0 <_ZN3GSM7PowerOnEv>:

bool GSM::PowerOn() {
     1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     1e2:	0004      	movs	r4, r0
    m_uart->write('\r');
     1e4:	210d      	movs	r1, #13
     1e6:	6880      	ldr	r0, [r0, #8]
     1e8:	f001 fc9a 	bl	1b20 <_ZN6uart_t5writeEc>

    // Check if the GSM module is already powered on
    if(Command("AT", "OK", 500))
     1ec:	23fa      	movs	r3, #250	; 0xfa
     1ee:	4e19      	ldr	r6, [pc, #100]	; (254 <_ZN3GSM7PowerOnEv+0x74>)
     1f0:	4f19      	ldr	r7, [pc, #100]	; (258 <_ZN3GSM7PowerOnEv+0x78>)
     1f2:	0032      	movs	r2, r6
     1f4:	0039      	movs	r1, r7
     1f6:	0020      	movs	r0, r4
     1f8:	005b      	lsls	r3, r3, #1
     1fa:	f7ff ff9f 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     1fe:	2800      	cmp	r0, #0
     200:	d126      	bne.n	250 <_ZN3GSM7PowerOnEv+0x70>
     202:	2503      	movs	r5, #3

    inline void set(const int port, const int pin, const bool en) {
        if(en)
            PORT->Group[port].OUTSET.reg = 1 << pin;
        else
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     204:	2201      	movs	r2, #1
     206:	6863      	ldr	r3, [r4, #4]
     208:	4914      	ldr	r1, [pc, #80]	; (25c <_ZN3GSM7PowerOnEv+0x7c>)
     20a:	409a      	lsls	r2, r3
     20c:	6823      	ldr	r3, [r4, #0]
        return true;
    
    // Fail after 3 attempts to power cycle
    for(int i = 0; i < 3; i++) {
        gpio::set(m_pwrkey, false); // Set pwrkey to low
        delay_usec(1000000); // Wait for SIM800C to register it
     20e:	4814      	ldr	r0, [pc, #80]	; (260 <_ZN3GSM7PowerOnEv+0x80>)
     210:	01db      	lsls	r3, r3, #7
     212:	185b      	adds	r3, r3, r1
     214:	601a      	str	r2, [r3, #0]
     216:	f003 f9a7 	bl	3568 <__delay_usec_veneer>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     21a:	2201      	movs	r2, #1
     21c:	6863      	ldr	r3, [r4, #4]
     21e:	4911      	ldr	r1, [pc, #68]	; (264 <_ZN3GSM7PowerOnEv+0x84>)
     220:	409a      	lsls	r2, r3
     222:	6823      	ldr	r3, [r4, #0]
        gpio::set(m_pwrkey, true); // Set pwrkey to high
        delay_usec(1000000);
     224:	480e      	ldr	r0, [pc, #56]	; (260 <_ZN3GSM7PowerOnEv+0x80>)
     226:	01db      	lsls	r3, r3, #7
     228:	185b      	adds	r3, r3, r1
     22a:	601a      	str	r2, [r3, #0]
     22c:	f003 f99c 	bl	3568 <__delay_usec_veneer>

        // Wait for response to AT command
        if(RepeatCommand("AT", "OK", 6, 500))
     230:	23fa      	movs	r3, #250	; 0xfa
     232:	005b      	lsls	r3, r3, #1
     234:	9300      	str	r3, [sp, #0]
     236:	3bef      	subs	r3, #239	; 0xef
     238:	0032      	movs	r2, r6
     23a:	0039      	movs	r1, r7
     23c:	0020      	movs	r0, r4
     23e:	3bff      	subs	r3, #255	; 0xff
     240:	f7ff ffb4 	bl	1ac <_ZN3GSM13RepeatCommandEPKcS1_ii>
     244:	2800      	cmp	r0, #0
     246:	d103      	bne.n	250 <_ZN3GSM7PowerOnEv+0x70>
    for(int i = 0; i < 3; i++) {
     248:	3d01      	subs	r5, #1
     24a:	2d00      	cmp	r5, #0
     24c:	d1da      	bne.n	204 <_ZN3GSM7PowerOnEv+0x24>
            return true;
    }
    return false;
}
     24e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return true;
     250:	2001      	movs	r0, #1
     252:	e7fc      	b.n	24e <_ZN3GSM7PowerOnEv+0x6e>
     254:	0000315b 	.word	0x0000315b
     258:	00002fcd 	.word	0x00002fcd
     25c:	41004414 	.word	0x41004414
     260:	000f4240 	.word	0x000f4240
     264:	41004418 	.word	0x41004418

00000268 <_ZN3GSM7SendSMSEPKcS1_>:
            break;
        }
    }
}

bool GSM::SendSMS(const char* number, const char* text) {
     268:	b530      	push	{r4, r5, lr}
     26a:	0004      	movs	r4, r0
     26c:	b091      	sub	sp, #68	; 0x44
     26e:	000b      	movs	r3, r1
     270:	0015      	movs	r5, r2
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+CMGS=\"%s\"", number);
     272:	2140      	movs	r1, #64	; 0x40
     274:	4a11      	ldr	r2, [pc, #68]	; (2bc <_ZN3GSM7SendSMSEPKcS1_+0x54>)
     276:	4668      	mov	r0, sp
     278:	f002 f934 	bl	24e4 <sniprintf>
    if(!Command(buf))
     27c:	2200      	movs	r2, #0
     27e:	4669      	mov	r1, sp
     280:	0020      	movs	r0, r4
     282:	4b0f      	ldr	r3, [pc, #60]	; (2c0 <_ZN3GSM7SendSMSEPKcS1_+0x58>)
     284:	f7ff ff5a 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     288:	2800      	cmp	r0, #0
     28a:	d014      	beq.n	2b6 <_ZN3GSM7SendSMSEPKcS1_+0x4e>
        return false;
    
    m_uart->print(text);
     28c:	2201      	movs	r2, #1
     28e:	0029      	movs	r1, r5
     290:	68a0      	ldr	r0, [r4, #8]
     292:	4252      	negs	r2, r2
     294:	f001 fc54 	bl	1b40 <_ZN6uart_t5printEPKci>

    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
     298:	4b0a      	ldr	r3, [pc, #40]	; (2c4 <_ZN3GSM7SendSMSEPKcS1_+0x5c>)
     29a:	4a0b      	ldr	r2, [pc, #44]	; (2c8 <_ZN3GSM7SendSMSEPKcS1_+0x60>)
     29c:	490b      	ldr	r1, [pc, #44]	; (2cc <_ZN3GSM7SendSMSEPKcS1_+0x64>)
     29e:	0020      	movs	r0, r4
     2a0:	f7ff ff4c 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
        m_rxhead = 0;
     2a4:	2180      	movs	r1, #128	; 0x80
     2a6:	2200      	movs	r2, #0
    m_uart->flush_rx();
     2a8:	68a3      	ldr	r3, [r4, #8]
     2aa:	0089      	lsls	r1, r1, #2
     2ac:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     2ae:	4908      	ldr	r1, [pc, #32]	; (2d0 <_ZN3GSM7SendSMSEPKcS1_+0x68>)
     2b0:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     2b2:	3102      	adds	r1, #2
     2b4:	545a      	strb	r2, [r3, r1]
    return success;
}
     2b6:	b011      	add	sp, #68	; 0x44
     2b8:	bd30      	pop	{r4, r5, pc}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	00002fd0 	.word	0x00002fd0
     2c0:	00000bb8 	.word	0x00000bb8
     2c4:	0000ea60 	.word	0x0000ea60
     2c8:	00002fdd 	.word	0x00002fdd
     2cc:	00002fe3 	.word	0x00002fe3
     2d0:	00000202 	.word	0x00000202

000002d4 <_ZL9func_execP3GSMPKcS2_>:
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     2d4:	b570      	push	{r4, r5, r6, lr}
    if(!gsm->Command(args)) {
     2d6:	4b0f      	ldr	r3, [pc, #60]	; (314 <_ZL9func_execP3GSMPKcS2_+0x40>)
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     2d8:	000e      	movs	r6, r1
     2da:	0011      	movs	r1, r2
    if(!gsm->Command(args)) {
     2dc:	2200      	movs	r2, #0
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     2de:	0004      	movs	r4, r0
    if(!gsm->Command(args)) {
     2e0:	f7ff ff2c 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
        gsm->SendSMS(sender, "Command timed out");
     2e4:	4a0c      	ldr	r2, [pc, #48]	; (318 <_ZL9func_execP3GSMPKcS2_+0x44>)
    if(!gsm->Command(args)) {
     2e6:	2800      	cmp	r0, #0
     2e8:	d005      	beq.n	2f6 <_ZL9func_execP3GSMPKcS2_+0x22>
        char* resp = gsm->m_uart->read();
     2ea:	68a0      	ldr	r0, [r4, #8]
     2ec:	f001 fcbe 	bl	1c6c <_ZN6uart_t4readEv>
     2f0:	1e05      	subs	r5, r0, #0
        if(!resp) {
     2f2:	d105      	bne.n	300 <_ZL9func_execP3GSMPKcS2_+0x2c>
            gsm->SendSMS(sender, "uart->read() returned null");
     2f4:	4a09      	ldr	r2, [pc, #36]	; (31c <_ZL9func_execP3GSMPKcS2_+0x48>)
     2f6:	0031      	movs	r1, r6
     2f8:	0020      	movs	r0, r4
     2fa:	f7ff ffb5 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
}
     2fe:	bd70      	pop	{r4, r5, r6, pc}
            gsm->SendSMS(sender, resp);
     300:	0002      	movs	r2, r0
     302:	0031      	movs	r1, r6
     304:	0020      	movs	r0, r4
     306:	f7ff ffaf 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
            free(resp);
     30a:	0028      	movs	r0, r5
     30c:	f001 fffc 	bl	2308 <free>
}
     310:	e7f5      	b.n	2fe <_ZL9func_execP3GSMPKcS2_+0x2a>
     312:	46c0      	nop			; (mov r8, r8)
     314:	00000bb8 	.word	0x00000bb8
     318:	00002fe5 	.word	0x00002fe5
     31c:	00002ff7 	.word	0x00002ff7

00000320 <_ZL12func_listcmdP3GSMPKcS2_>:
static void func_listcmd(GSM* gsm, const char* sender, const char* args) {
     320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    Owned = 0;
}

Str::Str()
{
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     322:	4b0f      	ldr	r3, [pc, #60]	; (360 <_ZL12func_listcmdP3GSMPKcS2_+0x40>)
    T* begin() {
        return m_data;
    }

    T* end() {
        return m_data + m_size;
     324:	260c      	movs	r6, #12
     326:	681b      	ldr	r3, [r3, #0]
     328:	0005      	movs	r5, r0
     32a:	9300      	str	r3, [sp, #0]
    Capacity = 0;
     32c:	2300      	movs	r3, #0
     32e:	9301      	str	r3, [sp, #4]
     330:	68c3      	ldr	r3, [r0, #12]
     332:	000f      	movs	r7, r1
     334:	435e      	muls	r6, r3
     336:	6903      	ldr	r3, [r0, #16]
     338:	001c      	movs	r4, r3
     33a:	199e      	adds	r6, r3, r6
    for(auto& cmd : gsm->m_smsfuncs) {
     33c:	42a6      	cmp	r6, r4
     33e:	d006      	beq.n	34e <_ZL12func_listcmdP3GSMPKcS2_+0x2e>
        str.appendf("%s\n", cmd.key);
     340:	6822      	ldr	r2, [r4, #0]
     342:	4668      	mov	r0, sp
     344:	4907      	ldr	r1, [pc, #28]	; (364 <_ZL12func_listcmdP3GSMPKcS2_+0x44>)
     346:	f001 f857 	bl	13f8 <_ZN3Str7appendfEPKcz>
    for(auto& cmd : gsm->m_smsfuncs) {
     34a:	340c      	adds	r4, #12
     34c:	e7f6      	b.n	33c <_ZL12func_listcmdP3GSMPKcS2_+0x1c>
    gsm->SendSMS(sender, str.c_str());
     34e:	0039      	movs	r1, r7
     350:	0028      	movs	r0, r5
     352:	9a00      	ldr	r2, [sp, #0]
     354:	f7ff ff88 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    Str str;
     358:	4668      	mov	r0, sp
     35a:	f7ff fed1 	bl	100 <_ZN3StrD1Ev>
}
     35e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     360:	200001e4 	.word	0x200001e4
     364:	00003012 	.word	0x00003012

00000368 <_ZN3GSM11GetNumLevelEPKc>:

char GSM::GetNumLevel(const char* num) {
     368:	b510      	push	{r4, lr}
     36a:	0004      	movs	r4, r0
     36c:	b090      	sub	sp, #64	; 0x40
     36e:	000b      	movs	r3, r1
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+FSREAD=C:\\%s.txt,0,1,0", num);
     370:	4a14      	ldr	r2, [pc, #80]	; (3c4 <_ZN3GSM11GetNumLevelEPKc+0x5c>)
     372:	2140      	movs	r1, #64	; 0x40
     374:	4668      	mov	r0, sp
     376:	f002 f8b5 	bl	24e4 <sniprintf>
    if(!Command(buf, "OK"))
     37a:	4669      	mov	r1, sp
     37c:	0020      	movs	r0, r4
     37e:	4b12      	ldr	r3, [pc, #72]	; (3c8 <_ZN3GSM11GetNumLevelEPKc+0x60>)
     380:	4a12      	ldr	r2, [pc, #72]	; (3cc <_ZN3GSM11GetNumLevelEPKc+0x64>)
     382:	f7ff fedb 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     386:	2800      	cmp	r0, #0
     388:	d102      	bne.n	390 <_ZN3GSM11GetNumLevelEPKc+0x28>
        return 0;
     38a:	2000      	movs	r0, #0
    m_uart->flush_rx();

    asm volatile("nop");

    return level;
}
     38c:	b010      	add	sp, #64	; 0x40
     38e:	bd10      	pop	{r4, pc}
    if(m_uart->available() < 3) return 0;
     390:	68a0      	ldr	r0, [r4, #8]
     392:	f7ff fe9f 	bl	d4 <_ZN6uart_t9availableEv>
     396:	2802      	cmp	r0, #2
     398:	d9f7      	bls.n	38a <_ZN3GSM11GetNumLevelEPKc+0x22>
    m_uart->getc(); m_uart->getc(); // skip \r\n
     39a:	68a0      	ldr	r0, [r4, #8]
     39c:	f001 fbfe 	bl	1b9c <_ZN6uart_t4getcEv>
     3a0:	68a0      	ldr	r0, [r4, #8]
     3a2:	f001 fbfb 	bl	1b9c <_ZN6uart_t4getcEv>
    char level = m_uart->getc();
     3a6:	68a0      	ldr	r0, [r4, #8]
     3a8:	f001 fbf8 	bl	1b9c <_ZN6uart_t4getcEv>
        m_rxhead = 0;
     3ac:	2180      	movs	r1, #128	; 0x80
     3ae:	2200      	movs	r2, #0
    m_uart->flush_rx();
     3b0:	68a3      	ldr	r3, [r4, #8]
     3b2:	0089      	lsls	r1, r1, #2
     3b4:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     3b6:	4906      	ldr	r1, [pc, #24]	; (3d0 <_ZN3GSM11GetNumLevelEPKc+0x68>)
     3b8:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     3ba:	3102      	adds	r1, #2
     3bc:	545a      	strb	r2, [r3, r1]
    asm volatile("nop");
     3be:	46c0      	nop			; (mov r8, r8)
    return level;
     3c0:	e7e4      	b.n	38c <_ZN3GSM11GetNumLevelEPKc+0x24>
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	00003016 	.word	0x00003016
     3c8:	00000bb8 	.word	0x00000bb8
     3cc:	0000315b 	.word	0x0000315b
     3d0:	00000202 	.word	0x00000202

000003d4 <_ZN3GSM11SetNumLevelEPKcc>:

void GSM::SetNumLevel(const char* num, char level) {
     3d4:	b570      	push	{r4, r5, r6, lr}
     3d6:	0004      	movs	r4, r0
     3d8:	000d      	movs	r5, r1
     3da:	b090      	sub	sp, #64	; 0x40
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+FSCREATE=C:\\%s.txt", num);
     3dc:	000b      	movs	r3, r1
void GSM::SetNumLevel(const char* num, char level) {
     3de:	0016      	movs	r6, r2
    snprintf(buf, sizeof(buf), "AT+FSCREATE=C:\\%s.txt", num);
     3e0:	2140      	movs	r1, #64	; 0x40
     3e2:	4a12      	ldr	r2, [pc, #72]	; (42c <_ZN3GSM11SetNumLevelEPKcc+0x58>)
     3e4:	4668      	mov	r0, sp
     3e6:	f002 f87d 	bl	24e4 <sniprintf>
    Command(buf);
     3ea:	2200      	movs	r2, #0
     3ec:	4669      	mov	r1, sp
     3ee:	4b10      	ldr	r3, [pc, #64]	; (430 <_ZN3GSM11SetNumLevelEPKcc+0x5c>)
     3f0:	0020      	movs	r0, r4
     3f2:	f7ff fea3 	bl	13c <_ZN3GSM7CommandEPKcS1_j>

    snprintf(buf, sizeof(buf), "AT+FSWRITE=C:\\%s.txt,0,1,1", num);
     3f6:	002b      	movs	r3, r5
     3f8:	2140      	movs	r1, #64	; 0x40
     3fa:	4a0e      	ldr	r2, [pc, #56]	; (434 <_ZN3GSM11SetNumLevelEPKcc+0x60>)
     3fc:	4668      	mov	r0, sp
     3fe:	f002 f871 	bl	24e4 <sniprintf>
    if(!Command(buf, ">"))
     402:	4669      	mov	r1, sp
     404:	0020      	movs	r0, r4
     406:	4b0a      	ldr	r3, [pc, #40]	; (430 <_ZN3GSM11SetNumLevelEPKcc+0x5c>)
     408:	4a0b      	ldr	r2, [pc, #44]	; (438 <_ZN3GSM11SetNumLevelEPKcc+0x64>)
     40a:	f7ff fe97 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     40e:	2800      	cmp	r0, #0
     410:	d009      	beq.n	426 <_ZN3GSM11SetNumLevelEPKcc+0x52>
        return;

    m_uart->write(level);
     412:	0031      	movs	r1, r6
     414:	68a0      	ldr	r0, [r4, #8]
     416:	f001 fb83 	bl	1b20 <_ZN6uart_t5writeEc>

    Command("\r\n");
     41a:	2200      	movs	r2, #0
     41c:	0020      	movs	r0, r4
     41e:	4b04      	ldr	r3, [pc, #16]	; (430 <_ZN3GSM11SetNumLevelEPKcc+0x5c>)
     420:	4906      	ldr	r1, [pc, #24]	; (43c <_ZN3GSM11SetNumLevelEPKcc+0x68>)
     422:	f7ff fe8b 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
}
     426:	b010      	add	sp, #64	; 0x40
     428:	bd70      	pop	{r4, r5, r6, pc}
     42a:	46c0      	nop			; (mov r8, r8)
     42c:	00003030 	.word	0x00003030
     430:	00000bb8 	.word	0x00000bb8
     434:	00003046 	.word	0x00003046
     438:	00003274 	.word	0x00003274
     43c:	00003061 	.word	0x00003061

00000440 <_ZL11func_setnumP3GSMPKcS2_>:
static void func_setnum(GSM* gsm, const char* sender, const char* c_args) {
     440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     442:	0005      	movs	r5, r0
     444:	000e      	movs	r6, r1
     446:	1e17      	subs	r7, r2, #0
    if(c_args) {
     448:	d02c      	beq.n	4a4 <_ZL11func_setnumP3GSMPKcS2_+0x64>
        args = (char*)malloc(strlen(c_args));
     44a:	0010      	movs	r0, r2
     44c:	f002 f8b8 	bl	25c0 <strlen>
     450:	f001 ff50 	bl	22f4 <malloc>
     454:	1e04      	subs	r4, r0, #0
        if(!args) {
     456:	d105      	bne.n	464 <_ZL11func_setnumP3GSMPKcS2_+0x24>
            gsm->SendSMS(sender, "malloc failed");
     458:	0031      	movs	r1, r6
     45a:	0028      	movs	r0, r5
     45c:	4a16      	ldr	r2, [pc, #88]	; (4b8 <_ZL11func_setnumP3GSMPKcS2_+0x78>)
     45e:	f7ff ff03 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
}
     462:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        strcpy(args, c_args);
     464:	0039      	movs	r1, r7
     466:	f002 f8a3 	bl	25b0 <strcpy>
        num = strtok(args, " ");
     46a:	4f14      	ldr	r7, [pc, #80]	; (4bc <_ZL11func_setnumP3GSMPKcS2_+0x7c>)
     46c:	0020      	movs	r0, r4
     46e:	0039      	movs	r1, r7
     470:	f002 f8e8 	bl	2644 <strtok>
        level = strtok(NULL, " ");
     474:	0039      	movs	r1, r7
        num = strtok(args, " ");
     476:	9001      	str	r0, [sp, #4]
        level = strtok(NULL, " ");
     478:	2000      	movs	r0, #0
     47a:	f002 f8e3 	bl	2644 <strtok>
    if(num && level) {
     47e:	9b01      	ldr	r3, [sp, #4]
     480:	2b00      	cmp	r3, #0
     482:	d010      	beq.n	4a6 <_ZL11func_setnumP3GSMPKcS2_+0x66>
     484:	2800      	cmp	r0, #0
     486:	d00e      	beq.n	4a6 <_ZL11func_setnumP3GSMPKcS2_+0x66>
        gsm->SetNumLevel(num, *level);
     488:	7802      	ldrb	r2, [r0, #0]
     48a:	0019      	movs	r1, r3
     48c:	0028      	movs	r0, r5
     48e:	f7ff ffa1 	bl	3d4 <_ZN3GSM11SetNumLevelEPKcc>
        gsm->SendSMS(sender, "OK");
     492:	0031      	movs	r1, r6
     494:	0028      	movs	r0, r5
     496:	4a0a      	ldr	r2, [pc, #40]	; (4c0 <_ZL11func_setnumP3GSMPKcS2_+0x80>)
     498:	f7ff fee6 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
     49c:	0020      	movs	r0, r4
     49e:	f001 ff33 	bl	2308 <free>
     4a2:	e7de      	b.n	462 <_ZL11func_setnumP3GSMPKcS2_+0x22>
    char* args = NULL;
     4a4:	0014      	movs	r4, r2
        gsm->SendSMS(sender, "Usage: setnum <number> <level>");
     4a6:	0031      	movs	r1, r6
     4a8:	0028      	movs	r0, r5
     4aa:	4a06      	ldr	r2, [pc, #24]	; (4c4 <_ZL11func_setnumP3GSMPKcS2_+0x84>)
     4ac:	f7ff fedc 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
     4b0:	2c00      	cmp	r4, #0
     4b2:	d0d6      	beq.n	462 <_ZL11func_setnumP3GSMPKcS2_+0x22>
     4b4:	e7f2      	b.n	49c <_ZL11func_setnumP3GSMPKcS2_+0x5c>
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	00003064 	.word	0x00003064
     4bc:	000034fc 	.word	0x000034fc
     4c0:	0000315b 	.word	0x0000315b
     4c4:	00003072 	.word	0x00003072

000004c8 <_ZN3GSM9RemoveNumEPKc>:

void GSM::RemoveNum(const char* num) {
     4c8:	b510      	push	{r4, lr}
     4ca:	0004      	movs	r4, r0
     4cc:	b090      	sub	sp, #64	; 0x40
     4ce:	000b      	movs	r3, r1
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+FSDEL=C:\\%s.txt", num);
     4d0:	4668      	mov	r0, sp
     4d2:	2140      	movs	r1, #64	; 0x40
     4d4:	4a05      	ldr	r2, [pc, #20]	; (4ec <_ZN3GSM9RemoveNumEPKc+0x24>)
     4d6:	f002 f805 	bl	24e4 <sniprintf>
    Command(buf);
     4da:	2200      	movs	r2, #0
     4dc:	4669      	mov	r1, sp
     4de:	0020      	movs	r0, r4
     4e0:	4b03      	ldr	r3, [pc, #12]	; (4f0 <_ZN3GSM9RemoveNumEPKc+0x28>)
     4e2:	f7ff fe2b 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
}
     4e6:	b010      	add	sp, #64	; 0x40
     4e8:	bd10      	pop	{r4, pc}
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	00003091 	.word	0x00003091
     4f0:	00000bb8 	.word	0x00000bb8

000004f4 <_ZL11func_delnumP3GSMPKcS2_>:
static void func_delnum(GSM* gsm, const char* sender, const char* args) {
     4f4:	b510      	push	{r4, lr}
    if(!args) {
     4f6:	2a00      	cmp	r2, #0
     4f8:	d103      	bne.n	502 <_ZL11func_delnumP3GSMPKcS2_+0xe>
        gsm->SendSMS(sender, "Usage: delnum <number>");
     4fa:	4a04      	ldr	r2, [pc, #16]	; (50c <_ZL11func_delnumP3GSMPKcS2_+0x18>)
     4fc:	f7ff feb4 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
}
     500:	bd10      	pop	{r4, pc}
    gsm->RemoveNum(args);
     502:	0011      	movs	r1, r2
     504:	f7ff ffe0 	bl	4c8 <_ZN3GSM9RemoveNumEPKc>
     508:	e7fa      	b.n	500 <_ZL11func_delnumP3GSMPKcS2_+0xc>
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	000030a4 	.word	0x000030a4

00000510 <_ZN3GSM9GetAllNumEP6VectorIPcE>:

int GSM::GetAllNum(Vector<char*>* list) {
     510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(!Command("AT+FSLS=C:\\"))
     512:	4b2a      	ldr	r3, [pc, #168]	; (5bc <_ZN3GSM9GetAllNumEP6VectorIPcE+0xac>)
int GSM::GetAllNum(Vector<char*>* list) {
     514:	000d      	movs	r5, r1
    if(!Command("AT+FSLS=C:\\"))
     516:	2200      	movs	r2, #0
     518:	4929      	ldr	r1, [pc, #164]	; (5c0 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xb0>)
int GSM::GetAllNum(Vector<char*>* list) {
     51a:	0004      	movs	r4, r0
    if(!Command("AT+FSLS=C:\\"))
     51c:	f7ff fe0e 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     520:	2800      	cmp	r0, #0
     522:	d102      	bne.n	52a <_ZN3GSM9GetAllNumEP6VectorIPcE+0x1a>
        return 0;
     524:	2700      	movs	r7, #0
    }

    free(data);

    return count;
}
     526:	0038      	movs	r0, r7
     528:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    char* data = m_uart->read();
     52a:	68a0      	ldr	r0, [r4, #8]
     52c:	f001 fb9e 	bl	1c6c <_ZN6uart_t4readEv>
     530:	1e06      	subs	r6, r0, #0
    if(!data) return 0;
     532:	d0f7      	beq.n	524 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x14>
    char* entry = strtok(data, "\r\n");
     534:	4923      	ldr	r1, [pc, #140]	; (5c4 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xb4>)
     536:	f002 f885 	bl	2644 <strtok>
    int count = 0;
     53a:	2700      	movs	r7, #0
    char* entry = strtok(data, "\r\n");
     53c:	0004      	movs	r4, r0
    while(entry) {
     53e:	2c00      	cmp	r4, #0
     540:	d038      	beq.n	5b4 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xa4>
        if(strlen(entry) > 4 && strcmp(entry + strlen(entry) - 4, ".txt") == 0) {
     542:	0020      	movs	r0, r4
     544:	f002 f83c 	bl	25c0 <strlen>
     548:	9001      	str	r0, [sp, #4]
     54a:	2804      	cmp	r0, #4
     54c:	d928      	bls.n	5a0 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x90>
     54e:	3804      	subs	r0, #4
     550:	491d      	ldr	r1, [pc, #116]	; (5c8 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xb8>)
     552:	1820      	adds	r0, r4, r0
     554:	f002 f822 	bl	259c <strcmp>
     558:	2800      	cmp	r0, #0
     55a:	d121      	bne.n	5a0 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x90>
            count++;
     55c:	3701      	adds	r7, #1
            if(list) {
     55e:	2d00      	cmp	r5, #0
     560:	d01e      	beq.n	5a0 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x90>
                char* file = (char*)calloc(strlen(entry) - 4 + 1, 1);
     562:	9801      	ldr	r0, [sp, #4]
     564:	2101      	movs	r1, #1
     566:	3803      	subs	r0, #3
     568:	f001 fe88 	bl	227c <calloc>
     56c:	9001      	str	r0, [sp, #4]
                memcpy(file, entry, strlen(entry) - 4);
     56e:	0020      	movs	r0, r4
     570:	f002 f826 	bl	25c0 <strlen>
     574:	0021      	movs	r1, r4
     576:	1f02      	subs	r2, r0, #4
     578:	9801      	ldr	r0, [sp, #4]
     57a:	f001 fecf 	bl	231c <memcpy>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     57e:	6829      	ldr	r1, [r5, #0]
     580:	2900      	cmp	r1, #0
     582:	d013      	beq.n	5ac <_ZN3GSM9GetAllNumEP6VectorIPcE+0x9c>
     584:	3101      	adds	r1, #1
     586:	6868      	ldr	r0, [r5, #4]
     588:	0089      	lsls	r1, r1, #2
     58a:	f001 ff8f 	bl	24ac <realloc>
        if(!new_data) return;
     58e:	2800      	cmp	r0, #0
     590:	d006      	beq.n	5a0 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x90>
        *(m_data + m_size) = elem;
     592:	682b      	ldr	r3, [r5, #0]
     594:	9901      	ldr	r1, [sp, #4]
     596:	009a      	lsls	r2, r3, #2
        m_size++;
     598:	3301      	adds	r3, #1
        m_data = new_data;
     59a:	6068      	str	r0, [r5, #4]
        *(m_data + m_size) = elem;
     59c:	5011      	str	r1, [r2, r0]
        m_size++;
     59e:	602b      	str	r3, [r5, #0]
        entry = strtok(NULL, "\r\n");
     5a0:	2000      	movs	r0, #0
     5a2:	4908      	ldr	r1, [pc, #32]	; (5c4 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xb4>)
     5a4:	f002 f84e 	bl	2644 <strtok>
     5a8:	0004      	movs	r4, r0
    while(entry) {
     5aa:	e7c8      	b.n	53e <_ZN3GSM9GetAllNumEP6VectorIPcE+0x2e>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     5ac:	2004      	movs	r0, #4
     5ae:	f001 fea1 	bl	22f4 <malloc>
     5b2:	e7ec      	b.n	58e <_ZN3GSM9GetAllNumEP6VectorIPcE+0x7e>
    free(data);
     5b4:	0030      	movs	r0, r6
     5b6:	f001 fea7 	bl	2308 <free>
    return count;
     5ba:	e7b4      	b.n	526 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x16>
     5bc:	00000bb8 	.word	0x00000bb8
     5c0:	000030bb 	.word	0x000030bb
     5c4:	00003061 	.word	0x00003061
     5c8:	00003041 	.word	0x00003041

000005cc <_ZL12func_listnumP3GSMPKcS2_>:
static void func_listnum(GSM* gsm, const char* sender, const char* args) {
     5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ce:	2400      	movs	r4, #0
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     5d0:	4b21      	ldr	r3, [pc, #132]	; (658 <_ZL12func_listnumP3GSMPKcS2_+0x8c>)
     5d2:	b087      	sub	sp, #28
     5d4:	681b      	ldr	r3, [r3, #0]
     5d6:	0005      	movs	r5, r0
     5d8:	000e      	movs	r6, r1
        reserve_discard(buf_len);
     5da:	a802      	add	r0, sp, #8
     5dc:	2107      	movs	r1, #7
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     5de:	9302      	str	r3, [sp, #8]
    Capacity = 0;
     5e0:	9403      	str	r4, [sp, #12]
        reserve_discard(buf_len);
     5e2:	f000 fe73 	bl	12cc <_ZN3Str15reserve_discardEi>
    memcpy(Data, src, buf_len);
     5e6:	2207      	movs	r2, #7
     5e8:	491c      	ldr	r1, [pc, #112]	; (65c <_ZL12func_listnumP3GSMPKcS2_+0x90>)
     5ea:	9802      	ldr	r0, [sp, #8]
     5ec:	f001 fe96 	bl	231c <memcpy>
    Owned = 1;
     5f0:	ab02      	add	r3, sp, #8
     5f2:	79da      	ldrb	r2, [r3, #7]
     5f4:	2380      	movs	r3, #128	; 0x80
     5f6:	425b      	negs	r3, r3
     5f8:	4313      	orrs	r3, r2
     5fa:	aa02      	add	r2, sp, #8
     5fc:	71d3      	strb	r3, [r2, #7]
    gsm->GetAllNum(&list);
     5fe:	0028      	movs	r0, r5
     600:	a904      	add	r1, sp, #16
    Vector() : m_size(0), m_data(NULL) {}
     602:	9404      	str	r4, [sp, #16]
     604:	9405      	str	r4, [sp, #20]
     606:	f7ff ff83 	bl	510 <_ZN3GSM9GetAllNumEP6VectorIPcE>
        return m_data + m_size;
     60a:	9a05      	ldr	r2, [sp, #20]
     60c:	9b04      	ldr	r3, [sp, #16]
     60e:	0014      	movs	r4, r2
     610:	009b      	lsls	r3, r3, #2
     612:	18d3      	adds	r3, r2, r3
     614:	9301      	str	r3, [sp, #4]
    for(auto num : list) {
     616:	9b01      	ldr	r3, [sp, #4]
     618:	42a3      	cmp	r3, r4
     61a:	d00e      	beq.n	63a <_ZL12func_listnumP3GSMPKcS2_+0x6e>
     61c:	cc80      	ldmia	r4!, {r7}
        str.appendf("%s: %c\n", num, gsm->GetNumLevel(num));
     61e:	0028      	movs	r0, r5
     620:	0039      	movs	r1, r7
     622:	f7ff fea1 	bl	368 <_ZN3GSM11GetNumLevelEPKc>
     626:	003a      	movs	r2, r7
     628:	0003      	movs	r3, r0
     62a:	490d      	ldr	r1, [pc, #52]	; (660 <_ZL12func_listnumP3GSMPKcS2_+0x94>)
     62c:	a802      	add	r0, sp, #8
     62e:	f000 fee3 	bl	13f8 <_ZN3Str7appendfEPKcz>
        free(num);
     632:	0038      	movs	r0, r7
     634:	f001 fe68 	bl	2308 <free>
    for(auto num : list) {
     638:	e7ed      	b.n	616 <_ZL12func_listnumP3GSMPKcS2_+0x4a>
    gsm->SendSMS(sender, str.c_str());
     63a:	0031      	movs	r1, r6
     63c:	0028      	movs	r0, r5
     63e:	9a02      	ldr	r2, [sp, #8]
     640:	f7ff fe12 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
        if(m_data) free(m_data);
     644:	9805      	ldr	r0, [sp, #20]
     646:	2800      	cmp	r0, #0
     648:	d001      	beq.n	64e <_ZL12func_listnumP3GSMPKcS2_+0x82>
     64a:	f001 fe5d 	bl	2308 <free>
    Str str = "List:\n";
     64e:	a802      	add	r0, sp, #8
     650:	f7ff fd56 	bl	100 <_ZN3StrD1Ev>
}
     654:	b007      	add	sp, #28
     656:	bdf0      	pop	{r4, r5, r6, r7, pc}
     658:	200001e4 	.word	0x200001e4
     65c:	000030c7 	.word	0x000030c7
     660:	000030ce 	.word	0x000030ce

00000664 <_ZN3GSM4InitEv>:
bool GSM::Init() {
     664:	b5f0      	push	{r4, r5, r6, r7, lr}
     666:	b087      	sub	sp, #28
     668:	0004      	movs	r4, r0
    if(!PowerOn())
     66a:	f7ff fdb9 	bl	1e0 <_ZN3GSM7PowerOnEv>
     66e:	2800      	cmp	r0, #0
     670:	d103      	bne.n	67a <_ZN3GSM4InitEv+0x16>
        return false;
     672:	2500      	movs	r5, #0
}
     674:	0028      	movs	r0, r5
     676:	b007      	add	sp, #28
     678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Command("ATE0");
     67a:	4e25      	ldr	r6, [pc, #148]	; (710 <_ZN3GSM4InitEv+0xac>)
     67c:	2200      	movs	r2, #0
     67e:	0033      	movs	r3, r6
     680:	4924      	ldr	r1, [pc, #144]	; (714 <_ZN3GSM4InitEv+0xb0>)
     682:	0020      	movs	r0, r4
     684:	f7ff fd5a 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    if(!RepeatCommand("AT+CREG?", "+CREG: 0,1", 25))
     688:	2319      	movs	r3, #25
     68a:	0020      	movs	r0, r4
     68c:	4a22      	ldr	r2, [pc, #136]	; (718 <_ZN3GSM4InitEv+0xb4>)
     68e:	4923      	ldr	r1, [pc, #140]	; (71c <_ZN3GSM4InitEv+0xb8>)
     690:	9600      	str	r6, [sp, #0]
     692:	f7ff fd8b 	bl	1ac <_ZN3GSM13RepeatCommandEPKcS1_ii>
     696:	1e05      	subs	r5, r0, #0
     698:	d0eb      	beq.n	672 <_ZN3GSM4InitEv+0xe>
    Command("AT+CMGF=1"); // SMS text mode
     69a:	0033      	movs	r3, r6
     69c:	2200      	movs	r2, #0
     69e:	4920      	ldr	r1, [pc, #128]	; (720 <_ZN3GSM4InitEv+0xbc>)
     6a0:	0020      	movs	r0, r4
     6a2:	f7ff fd4b 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms
     6a6:	0033      	movs	r3, r6
     6a8:	2200      	movs	r2, #0
     6aa:	491e      	ldr	r1, [pc, #120]	; (724 <_ZN3GSM4InitEv+0xc0>)
     6ac:	0020      	movs	r0, r4
     6ae:	f7ff fd45 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
        m_rxhead = 0;
     6b2:	2180      	movs	r1, #128	; 0x80
     6b4:	2300      	movs	r3, #0
    m_uart->flush_rx();
     6b6:	68a2      	ldr	r2, [r4, #8]
     6b8:	0089      	lsls	r1, r1, #2
     6ba:	5253      	strh	r3, [r2, r1]
        m_rxtail = 0;
     6bc:	491a      	ldr	r1, [pc, #104]	; (728 <_ZN3GSM4InitEv+0xc4>)
     6be:	5253      	strh	r3, [r2, r1]
        m_rxfull = false;
     6c0:	3102      	adds	r1, #2
     6c2:	5453      	strb	r3, [r2, r1]
    if(PM->RCAUSE.bit.SYST) {
     6c4:	4a19      	ldr	r2, [pc, #100]	; (72c <_ZN3GSM4InitEv+0xc8>)
     6c6:	7812      	ldrb	r2, [r2, #0]
     6c8:	0652      	lsls	r2, r2, #25
     6ca:	0fd1      	lsrs	r1, r2, #31
     6cc:	9103      	str	r1, [sp, #12]
     6ce:	429a      	cmp	r2, r3
     6d0:	dad0      	bge.n	674 <_ZN3GSM4InitEv+0x10>
        GetAllNum(&list);
     6d2:	0020      	movs	r0, r4
     6d4:	a904      	add	r1, sp, #16
    Vector() : m_size(0), m_data(NULL) {}
     6d6:	9304      	str	r3, [sp, #16]
     6d8:	9305      	str	r3, [sp, #20]
     6da:	f7ff ff19 	bl	510 <_ZN3GSM9GetAllNumEP6VectorIPcE>
        return m_data + m_size;
     6de:	9b04      	ldr	r3, [sp, #16]
     6e0:	009e      	lsls	r6, r3, #2
     6e2:	9b05      	ldr	r3, [sp, #20]
     6e4:	001d      	movs	r5, r3
     6e6:	199e      	adds	r6, r3, r6
        for(auto num : list) {
     6e8:	42ae      	cmp	r6, r5
     6ea:	d009      	beq.n	700 <_ZN3GSM4InitEv+0x9c>
     6ec:	cd80      	ldmia	r5!, {r7}
            SendSMS(num, "Update successful, version " VERSION);
     6ee:	0020      	movs	r0, r4
     6f0:	0039      	movs	r1, r7
     6f2:	4a0f      	ldr	r2, [pc, #60]	; (730 <_ZN3GSM4InitEv+0xcc>)
     6f4:	f7ff fdb8 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
            free(num);
     6f8:	0038      	movs	r0, r7
     6fa:	f001 fe05 	bl	2308 <free>
        for(auto num : list) {
     6fe:	e7f3      	b.n	6e8 <_ZN3GSM4InitEv+0x84>
        if(m_data) free(m_data);
     700:	9805      	ldr	r0, [sp, #20]
     702:	2800      	cmp	r0, #0
     704:	d001      	beq.n	70a <_ZN3GSM4InitEv+0xa6>
     706:	f001 fdff 	bl	2308 <free>
    return true;
     70a:	9d03      	ldr	r5, [sp, #12]
     70c:	e7b2      	b.n	674 <_ZN3GSM4InitEv+0x10>
     70e:	46c0      	nop			; (mov r8, r8)
     710:	00000bb8 	.word	0x00000bb8
     714:	000030d6 	.word	0x000030d6
     718:	000030db 	.word	0x000030db
     71c:	000030e6 	.word	0x000030e6
     720:	000030ef 	.word	0x000030ef
     724:	000030f9 	.word	0x000030f9
     728:	00000202 	.word	0x00000202
     72c:	40000438 	.word	0x40000438
     730:	0000310c 	.word	0x0000310c

00000734 <_ZN3GSM10ProcessSMSEPKcS1_>:
void GSM::ProcessSMS(const char* text, const char* sender) {
     734:	b5f0      	push	{r4, r5, r6, r7, lr}
     736:	b085      	sub	sp, #20
     738:	9102      	str	r1, [sp, #8]
     73a:	0004      	movs	r4, r0
    char* args_start = strchr(text, ' ');
     73c:	2120      	movs	r1, #32
     73e:	9802      	ldr	r0, [sp, #8]
void GSM::ProcessSMS(const char* text, const char* sender) {
     740:	0017      	movs	r7, r2
    char* args_start = strchr(text, ' ');
     742:	f001 ff1d 	bl	2580 <strchr>
     746:	1e05      	subs	r5, r0, #0
    if(args_start) {
     748:	d002      	beq.n	750 <_ZN3GSM10ProcessSMSEPKcS1_+0x1c>
        *args_start = '\0';
     74a:	2300      	movs	r3, #0
        args_start += 1;
     74c:	3501      	adds	r5, #1
        *args_start = '\0';
     74e:	7003      	strb	r3, [r0, #0]
        return m_data + m_size;
     750:	230c      	movs	r3, #12
     752:	68e2      	ldr	r2, [r4, #12]
     754:	4353      	muls	r3, r2
     756:	6922      	ldr	r2, [r4, #16]
     758:	18d3      	adds	r3, r2, r3
     75a:	9303      	str	r3, [sp, #12]
     75c:	0013      	movs	r3, r2
    for(auto& func : m_smsfuncs) {
     75e:	9a03      	ldr	r2, [sp, #12]
     760:	001e      	movs	r6, r3
     762:	429a      	cmp	r2, r3
     764:	d014      	beq.n	790 <_ZN3GSM10ProcessSMSEPKcS1_+0x5c>
        if(strcasecmp(func.key, text) == 0) {
     766:	6818      	ldr	r0, [r3, #0]
     768:	9902      	ldr	r1, [sp, #8]
     76a:	f001 feef 	bl	254c <strcasecmp>
     76e:	0033      	movs	r3, r6
     770:	9001      	str	r0, [sp, #4]
     772:	330c      	adds	r3, #12
     774:	2800      	cmp	r0, #0
     776:	d1f2      	bne.n	75e <_ZN3GSM10ProcessSMSEPKcS1_+0x2a>
            if(GetNumLevel(sender) >= func.level || GetAllNum() == 0)
     778:	0039      	movs	r1, r7
     77a:	0020      	movs	r0, r4
     77c:	f7ff fdf4 	bl	368 <_ZN3GSM11GetNumLevelEPKc>
     780:	7a33      	ldrb	r3, [r6, #8]
     782:	4283      	cmp	r3, r0
     784:	d806      	bhi.n	794 <_ZN3GSM10ProcessSMSEPKcS1_+0x60>
                func.callback(this, sender, args_start);
     786:	002a      	movs	r2, r5
     788:	0039      	movs	r1, r7
     78a:	0020      	movs	r0, r4
     78c:	6873      	ldr	r3, [r6, #4]
     78e:	4798      	blx	r3
}
     790:	b005      	add	sp, #20
     792:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(GetNumLevel(sender) >= func.level || GetAllNum() == 0)
     794:	0020      	movs	r0, r4
     796:	9901      	ldr	r1, [sp, #4]
     798:	f7ff feba 	bl	510 <_ZN3GSM9GetAllNumEP6VectorIPcE>
     79c:	2800      	cmp	r0, #0
     79e:	d0f2      	beq.n	786 <_ZN3GSM10ProcessSMSEPKcS1_+0x52>
     7a0:	e7f6      	b.n	790 <_ZN3GSM10ProcessSMSEPKcS1_+0x5c>
     7a2:	Address 0x000007a2 is out of bounds.


000007a4 <_ZN3GSM7ReadSMSEi>:
void GSM::ReadSMS(int index) {
     7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7a6:	0007      	movs	r7, r0
     7a8:	b091      	sub	sp, #68	; 0x44
     7aa:	000b      	movs	r3, r1
    snprintf(buf, sizeof(buf), "AT+CMGR=%d", index);
     7ac:	4a1f      	ldr	r2, [pc, #124]	; (82c <_ZN3GSM7ReadSMSEi+0x88>)
     7ae:	2140      	movs	r1, #64	; 0x40
     7b0:	4668      	mov	r0, sp
     7b2:	f001 fe97 	bl	24e4 <sniprintf>
    if(!Command(buf, "+CMGR"))
     7b6:	4d1e      	ldr	r5, [pc, #120]	; (830 <_ZN3GSM7ReadSMSEi+0x8c>)
     7b8:	4669      	mov	r1, sp
     7ba:	002a      	movs	r2, r5
     7bc:	0038      	movs	r0, r7
     7be:	4b1d      	ldr	r3, [pc, #116]	; (834 <_ZN3GSM7ReadSMSEi+0x90>)
     7c0:	f7ff fcbc 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     7c4:	2800      	cmp	r0, #0
     7c6:	d010      	beq.n	7ea <_ZN3GSM7ReadSMSEi+0x46>
    char* data = m_uart->read();
     7c8:	68b8      	ldr	r0, [r7, #8]
     7ca:	f001 fa4f 	bl	1c6c <_ZN6uart_t4readEv>
     7ce:	1e04      	subs	r4, r0, #0
    if(!data) return;
     7d0:	d00b      	beq.n	7ea <_ZN3GSM7ReadSMSEi+0x46>
    char* cmgr_start = strstr(data, "+CMGR"); // this shouldn't return null
     7d2:	0029      	movs	r1, r5
     7d4:	f001 ff20 	bl	2618 <strstr>
    char* text = strchr(cmgr_start, '\n');
     7d8:	210a      	movs	r1, #10
    char* cmgr_start = strstr(data, "+CMGR"); // this shouldn't return null
     7da:	0006      	movs	r6, r0
    char* text = strchr(cmgr_start, '\n');
     7dc:	f001 fed0 	bl	2580 <strchr>
     7e0:	1e05      	subs	r5, r0, #0
    if(!text) {
     7e2:	d104      	bne.n	7ee <_ZN3GSM7ReadSMSEi+0x4a>
    free(data);
     7e4:	0020      	movs	r0, r4
     7e6:	f001 fd8f 	bl	2308 <free>
}
     7ea:	b011      	add	sp, #68	; 0x44
     7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    text += 1; // ignore \n
     7ee:	3501      	adds	r5, #1
    char* text_end = strstr(text, "\r\n\r\nOK");
     7f0:	0028      	movs	r0, r5
     7f2:	4911      	ldr	r1, [pc, #68]	; (838 <_ZN3GSM7ReadSMSEi+0x94>)
     7f4:	f001 ff10 	bl	2618 <strstr>
    if(!text_end) {
     7f8:	2800      	cmp	r0, #0
     7fa:	d0f3      	beq.n	7e4 <_ZN3GSM7ReadSMSEi+0x40>
    *text_end = '\0';
     7fc:	2300      	movs	r3, #0
    char* sender = strstr(cmgr_start, ",\"");
     7fe:	490f      	ldr	r1, [pc, #60]	; (83c <_ZN3GSM7ReadSMSEi+0x98>)
    *text_end = '\0';
     800:	7003      	strb	r3, [r0, #0]
    char* sender = strstr(cmgr_start, ",\"");
     802:	0030      	movs	r0, r6
     804:	f001 ff08 	bl	2618 <strstr>
     808:	1e06      	subs	r6, r0, #0
    if(!sender) {
     80a:	d0eb      	beq.n	7e4 <_ZN3GSM7ReadSMSEi+0x40>
    sender += 2;
     80c:	3602      	adds	r6, #2
    if(!strchr(sender, '"')) {
     80e:	2122      	movs	r1, #34	; 0x22
     810:	0030      	movs	r0, r6
     812:	f001 feb5 	bl	2580 <strchr>
     816:	2800      	cmp	r0, #0
     818:	d0e4      	beq.n	7e4 <_ZN3GSM7ReadSMSEi+0x40>
    *strchr(sender, '"') = '\0';
     81a:	2300      	movs	r3, #0
    ProcessSMS(text, sender);
     81c:	0032      	movs	r2, r6
    *strchr(sender, '"') = '\0';
     81e:	7003      	strb	r3, [r0, #0]
    ProcessSMS(text, sender);
     820:	0029      	movs	r1, r5
     822:	0038      	movs	r0, r7
     824:	f7ff ff86 	bl	734 <_ZN3GSM10ProcessSMSEPKcS1_>
     828:	e7dc      	b.n	7e4 <_ZN3GSM7ReadSMSEi+0x40>
     82a:	46c0      	nop			; (mov r8, r8)
     82c:	00003146 	.word	0x00003146
     830:	00003151 	.word	0x00003151
     834:	00000bb8 	.word	0x00000bb8
     838:	00003157 	.word	0x00003157
     83c:	0000315e 	.word	0x0000315e

00000840 <_ZN3GSM4PollEv>:
void GSM::Poll() {
     840:	b570      	push	{r4, r5, r6, lr}
     842:	0005      	movs	r5, r0
    if(!m_uart->available()) return;
     844:	6880      	ldr	r0, [r0, #8]
     846:	f7ff fc45 	bl	d4 <_ZN6uart_t9availableEv>
     84a:	2800      	cmp	r0, #0
     84c:	d015      	beq.n	87a <_ZN3GSM4PollEv+0x3a>
    delay_usec(100000);
     84e:	4816      	ldr	r0, [pc, #88]	; (8a8 <_ZN3GSM4PollEv+0x68>)
     850:	f002 fe8a 	bl	3568 <__delay_usec_veneer>
    char* data = m_uart->read();
     854:	68a8      	ldr	r0, [r5, #8]
     856:	f001 fa09 	bl	1c6c <_ZN6uart_t4readEv>
     85a:	1e04      	subs	r4, r0, #0
    if(!data) return;
     85c:	d00d      	beq.n	87a <_ZN3GSM4PollEv+0x3a>
    if(strstr(data, "RING")) {
     85e:	4913      	ldr	r1, [pc, #76]	; (8ac <_ZN3GSM4PollEv+0x6c>)
     860:	f001 feda 	bl	2618 <strstr>
     864:	2800      	cmp	r0, #0
     866:	d009      	beq.n	87c <_ZN3GSM4PollEv+0x3c>
        Command("ATH"); // Disconnect call
     868:	2200      	movs	r2, #0
     86a:	0028      	movs	r0, r5
     86c:	4b10      	ldr	r3, [pc, #64]	; (8b0 <_ZN3GSM4PollEv+0x70>)
     86e:	4911      	ldr	r1, [pc, #68]	; (8b4 <_ZN3GSM4PollEv+0x74>)
     870:	f7ff fc64 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    free(data);
     874:	0020      	movs	r0, r4
     876:	f001 fd47 	bl	2308 <free>
}
     87a:	bd70      	pop	{r4, r5, r6, pc}
    } else if(strstr(data, "+CMTI")) {
     87c:	0020      	movs	r0, r4
     87e:	490e      	ldr	r1, [pc, #56]	; (8b8 <_ZN3GSM4PollEv+0x78>)
     880:	f001 feca 	bl	2618 <strstr>
     884:	2800      	cmp	r0, #0
     886:	d0f5      	beq.n	874 <_ZN3GSM4PollEv+0x34>
    while(*str) {
     888:	7801      	ldrb	r1, [r0, #0]
     88a:	2900      	cmp	r1, #0
     88c:	d005      	beq.n	89a <_ZN3GSM4PollEv+0x5a>
        if(isdigit(*str))
     88e:	3930      	subs	r1, #48	; 0x30
     890:	2909      	cmp	r1, #9
     892:	d806      	bhi.n	8a2 <_ZN3GSM4PollEv+0x62>
            return atoi(str);
     894:	f001 fcec 	bl	2270 <atoi>
     898:	0001      	movs	r1, r0
        ReadSMS(find_num(strstr(data, "+CMTI")));
     89a:	0028      	movs	r0, r5
     89c:	f7ff ff82 	bl	7a4 <_ZN3GSM7ReadSMSEi>
     8a0:	e7e8      	b.n	874 <_ZN3GSM4PollEv+0x34>
        str++;
     8a2:	3001      	adds	r0, #1
    while(*str) {
     8a4:	e7f0      	b.n	888 <_ZN3GSM4PollEv+0x48>
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	000186a0 	.word	0x000186a0
     8ac:	00003161 	.word	0x00003161
     8b0:	00000bb8 	.word	0x00000bb8
     8b4:	00003166 	.word	0x00003166
     8b8:	0000316a 	.word	0x0000316a

000008bc <_ZN3GSM13PerformUpdateEPKcS1_S1_>:

bool GSM::PerformUpdate(const char* server, const char* username, const char* password) {
     8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    Capacity = 0;
     8be:	2500      	movs	r5, #0
     8c0:	000f      	movs	r7, r1
     8c2:	0004      	movs	r4, r0
     8c4:	b087      	sub	sp, #28
     8c6:	9303      	str	r3, [sp, #12]
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     8c8:	4b35      	ldr	r3, [pc, #212]	; (9a0 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0xe4>)
    Str cmd;

    Command("AT+SAPBR=3,1,\"APN\",\"internet\"");
     8ca:	4e36      	ldr	r6, [pc, #216]	; (9a4 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0xe8>)
     8cc:	681b      	ldr	r3, [r3, #0]
     8ce:	4936      	ldr	r1, [pc, #216]	; (9a8 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0xec>)
bool GSM::PerformUpdate(const char* server, const char* username, const char* password) {
     8d0:	9202      	str	r2, [sp, #8]
     8d2:	9304      	str	r3, [sp, #16]
    Command("AT+SAPBR=3,1,\"APN\",\"internet\"");
     8d4:	002a      	movs	r2, r5
     8d6:	0033      	movs	r3, r6
    Capacity = 0;
     8d8:	9505      	str	r5, [sp, #20]
     8da:	f7ff fc2f 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    cmd.setf("AT+FTPSERV=%s", server);
     8de:	003a      	movs	r2, r7
     8e0:	4932      	ldr	r1, [pc, #200]	; (9ac <_ZN3GSM13PerformUpdateEPKcS1_S1_+0xf0>)
     8e2:	a804      	add	r0, sp, #16
     8e4:	f000 fd46 	bl	1374 <_ZN3Str4setfEPKcz>
	Command(cmd.c_str());
     8e8:	0033      	movs	r3, r6
     8ea:	002a      	movs	r2, r5
     8ec:	9904      	ldr	r1, [sp, #16]
     8ee:	0020      	movs	r0, r4
     8f0:	f7ff fc24 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    cmd.setf("AT+FTPUN=%s", username);
     8f4:	9a02      	ldr	r2, [sp, #8]
     8f6:	492e      	ldr	r1, [pc, #184]	; (9b0 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0xf4>)
     8f8:	a804      	add	r0, sp, #16
     8fa:	f000 fd3b 	bl	1374 <_ZN3Str4setfEPKcz>
	Command(cmd.c_str());
     8fe:	0033      	movs	r3, r6
     900:	002a      	movs	r2, r5
     902:	9904      	ldr	r1, [sp, #16]
     904:	0020      	movs	r0, r4
     906:	f7ff fc19 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    cmd.setf("AT+FTPPW=%s", password);
     90a:	9a03      	ldr	r2, [sp, #12]
     90c:	4929      	ldr	r1, [pc, #164]	; (9b4 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0xf8>)
     90e:	a804      	add	r0, sp, #16
     910:	f000 fd30 	bl	1374 <_ZN3Str4setfEPKcz>
	Command(cmd.c_str());
     914:	0033      	movs	r3, r6
     916:	002a      	movs	r2, r5
     918:	9904      	ldr	r1, [sp, #16]
     91a:	0020      	movs	r0, r4
     91c:	f7ff fc0e 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
	Command("AT+FTPGETPATH=/");
     920:	0033      	movs	r3, r6
     922:	002a      	movs	r2, r5
     924:	4924      	ldr	r1, [pc, #144]	; (9b8 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0xfc>)
     926:	0020      	movs	r0, r4
     928:	f7ff fc08 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
	Command("AT+FTPGETNAME=update.bin");
     92c:	0033      	movs	r3, r6
     92e:	002a      	movs	r2, r5
     930:	4922      	ldr	r1, [pc, #136]	; (9bc <_ZN3GSM13PerformUpdateEPKcS1_S1_+0x100>)
     932:	0020      	movs	r0, r4
     934:	f7ff fc02 	bl	13c <_ZN3GSM7CommandEPKcS1_j>

    Command("AT+SAPBR=1,1"); // Open bearer
     938:	0033      	movs	r3, r6
     93a:	002a      	movs	r2, r5
     93c:	4920      	ldr	r1, [pc, #128]	; (9c0 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0x104>)
     93e:	0020      	movs	r0, r4
     940:	f7ff fbfc 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    // Wait until we are connected
    if(!RepeatCommand("AT+SAPBR=2,1", "+SAPBR: 1,1", 25)) {
     944:	2319      	movs	r3, #25
     946:	0020      	movs	r0, r4
     948:	4a1e      	ldr	r2, [pc, #120]	; (9c4 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0x108>)
     94a:	491f      	ldr	r1, [pc, #124]	; (9c8 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0x10c>)
     94c:	9600      	str	r6, [sp, #0]
     94e:	f7ff fc2d 	bl	1ac <_ZN3GSM13RepeatCommandEPKcS1_ii>
     952:	4f1e      	ldr	r7, [pc, #120]	; (9cc <_ZN3GSM13PerformUpdateEPKcS1_S1_+0x110>)
     954:	42a8      	cmp	r0, r5
     956:	d017      	beq.n	988 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0xcc>
        Command("AT+SAPBR=0,1"); // Close bearer
        return false;
    }

    // Max response time: 75 seconds (In case no response is received from server)
    Command("AT+FTPGETTOFS=0,update.bin"); // Get "OK" response first
     958:	0033      	movs	r3, r6
     95a:	002a      	movs	r2, r5
     95c:	491c      	ldr	r1, [pc, #112]	; (9d0 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0x114>)
     95e:	0020      	movs	r0, r4
     960:	f7ff fbec 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    if(!Command("", "+FTPGETTOFS: 0,", 75000)) {
     964:	0020      	movs	r0, r4
     966:	4b1b      	ldr	r3, [pc, #108]	; (9d4 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0x118>)
     968:	4a1b      	ldr	r2, [pc, #108]	; (9d8 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0x11c>)
     96a:	491c      	ldr	r1, [pc, #112]	; (9dc <_ZN3GSM13PerformUpdateEPKcS1_S1_+0x120>)
     96c:	f7ff fbe6 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     970:	42a8      	cmp	r0, r5
     972:	d009      	beq.n	988 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0xcc>
        Command("AT+SAPBR=0,1"); // Close bearer
        return false;
    }

    Command("AT+SAPBR=0,1"); // Close bearer
     974:	0033      	movs	r3, r6
     976:	002a      	movs	r2, r5
     978:	0039      	movs	r1, r7
     97a:	0020      	movs	r0, r4
     97c:	f7ff fbde 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     980:	b672      	cpsid	i

    __disable_irq(); // Disable all interrupts

    WriteUpdate();
     982:	0020      	movs	r0, r4
     984:	f002 fde8 	bl	3558 <___ZN3GSM11WriteUpdateEv_veneer>
        Command("AT+SAPBR=0,1"); // Close bearer
     988:	2200      	movs	r2, #0
     98a:	0039      	movs	r1, r7
     98c:	4b05      	ldr	r3, [pc, #20]	; (9a4 <_ZN3GSM13PerformUpdateEPKcS1_S1_+0xe8>)
     98e:	0020      	movs	r0, r4
     990:	f7ff fbd4 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    Str cmd;
     994:	a804      	add	r0, sp, #16
     996:	f7ff fbb3 	bl	100 <_ZN3StrD1Ev>

    return true;
}
     99a:	2000      	movs	r0, #0
     99c:	b007      	add	sp, #28
     99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9a0:	200001e4 	.word	0x200001e4
     9a4:	00000bb8 	.word	0x00000bb8
     9a8:	00003170 	.word	0x00003170
     9ac:	0000318e 	.word	0x0000318e
     9b0:	0000319c 	.word	0x0000319c
     9b4:	000031a8 	.word	0x000031a8
     9b8:	000031b4 	.word	0x000031b4
     9bc:	000031c4 	.word	0x000031c4
     9c0:	000031dd 	.word	0x000031dd
     9c4:	000031ea 	.word	0x000031ea
     9c8:	000031f6 	.word	0x000031f6
     9cc:	00003203 	.word	0x00003203
     9d0:	00003210 	.word	0x00003210
     9d4:	000124f8 	.word	0x000124f8
     9d8:	0000322b 	.word	0x0000322b
     9dc:	00003063 	.word	0x00003063

000009e0 <_ZL11func_updateP3GSMPKcS2_>:
static void func_update(GSM* gsm, const char* sender, const char* c_args) {
     9e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     9e2:	0005      	movs	r5, r0
     9e4:	000e      	movs	r6, r1
     9e6:	1e17      	subs	r7, r2, #0
    if(c_args) {
     9e8:	d037      	beq.n	a5a <_ZL11func_updateP3GSMPKcS2_+0x7a>
        args = (char*)malloc(strlen(c_args));
     9ea:	0010      	movs	r0, r2
     9ec:	f001 fde8 	bl	25c0 <strlen>
     9f0:	f001 fc80 	bl	22f4 <malloc>
     9f4:	1e04      	subs	r4, r0, #0
        if(!args) {
     9f6:	d105      	bne.n	a04 <_ZL11func_updateP3GSMPKcS2_+0x24>
            gsm->SendSMS(sender, "malloc failed");
     9f8:	0031      	movs	r1, r6
     9fa:	0028      	movs	r0, r5
     9fc:	4a1b      	ldr	r2, [pc, #108]	; (a6c <_ZL11func_updateP3GSMPKcS2_+0x8c>)
     9fe:	f7ff fc33 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
}
     a02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        strcpy(args, c_args);
     a04:	0039      	movs	r1, r7
     a06:	f001 fdd3 	bl	25b0 <strcpy>
        server = strtok(args, " ");
     a0a:	4f19      	ldr	r7, [pc, #100]	; (a70 <_ZL11func_updateP3GSMPKcS2_+0x90>)
     a0c:	0020      	movs	r0, r4
     a0e:	0039      	movs	r1, r7
     a10:	f001 fe18 	bl	2644 <strtok>
        username = strtok(NULL, " ");
     a14:	0039      	movs	r1, r7
        server = strtok(args, " ");
     a16:	9000      	str	r0, [sp, #0]
        username = strtok(NULL, " ");
     a18:	2000      	movs	r0, #0
     a1a:	f001 fe13 	bl	2644 <strtok>
        pass = strtok(NULL, " ");
     a1e:	0039      	movs	r1, r7
        username = strtok(NULL, " ");
     a20:	9001      	str	r0, [sp, #4]
        pass = strtok(NULL, " ");
     a22:	2000      	movs	r0, #0
     a24:	f001 fe0e 	bl	2644 <strtok>
    if(server && username && pass) {
     a28:	9a00      	ldr	r2, [sp, #0]
        pass = strtok(NULL, " ");
     a2a:	0003      	movs	r3, r0
    if(server && username && pass) {
     a2c:	2a00      	cmp	r2, #0
     a2e:	d015      	beq.n	a5c <_ZL11func_updateP3GSMPKcS2_+0x7c>
     a30:	9a01      	ldr	r2, [sp, #4]
     a32:	2a00      	cmp	r2, #0
     a34:	d012      	beq.n	a5c <_ZL11func_updateP3GSMPKcS2_+0x7c>
     a36:	2800      	cmp	r0, #0
     a38:	d010      	beq.n	a5c <_ZL11func_updateP3GSMPKcS2_+0x7c>
        if(gsm->PerformUpdate(server, username, pass))
     a3a:	0028      	movs	r0, r5
     a3c:	9900      	ldr	r1, [sp, #0]
     a3e:	f7ff ff3d 	bl	8bc <_ZN3GSM13PerformUpdateEPKcS1_S1_>
            gsm->SendSMS(sender, "OK");
     a42:	4a0c      	ldr	r2, [pc, #48]	; (a74 <_ZL11func_updateP3GSMPKcS2_+0x94>)
        if(gsm->PerformUpdate(server, username, pass))
     a44:	2800      	cmp	r0, #0
     a46:	d100      	bne.n	a4a <_ZL11func_updateP3GSMPKcS2_+0x6a>
            gsm->SendSMS(sender, "Update failed");
     a48:	4a0b      	ldr	r2, [pc, #44]	; (a78 <_ZL11func_updateP3GSMPKcS2_+0x98>)
     a4a:	0031      	movs	r1, r6
     a4c:	0028      	movs	r0, r5
     a4e:	f7ff fc0b 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
     a52:	0020      	movs	r0, r4
     a54:	f001 fc58 	bl	2308 <free>
     a58:	e7d3      	b.n	a02 <_ZL11func_updateP3GSMPKcS2_+0x22>
    char* args = NULL;
     a5a:	0014      	movs	r4, r2
        gsm->SendSMS(sender, "Usage: update <server> <username> <password>");
     a5c:	0031      	movs	r1, r6
     a5e:	0028      	movs	r0, r5
     a60:	4a06      	ldr	r2, [pc, #24]	; (a7c <_ZL11func_updateP3GSMPKcS2_+0x9c>)
     a62:	f7ff fc01 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
     a66:	2c00      	cmp	r4, #0
     a68:	d0cb      	beq.n	a02 <_ZL11func_updateP3GSMPKcS2_+0x22>
     a6a:	e7f2      	b.n	a52 <_ZL11func_updateP3GSMPKcS2_+0x72>
     a6c:	00003064 	.word	0x00003064
     a70:	000034fc 	.word	0x000034fc
     a74:	0000315b 	.word	0x0000315b
     a78:	0000323b 	.word	0x0000323b
     a7c:	00003249 	.word	0x00003249

00000a80 <_ZN6VectorI7SMSFuncE9push_backERKS0_>:
    void push_back(const T& elem) {
     a80:	b570      	push	{r4, r5, r6, lr}
     a82:	000d      	movs	r5, r1
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     a84:	6801      	ldr	r1, [r0, #0]
    void push_back(const T& elem) {
     a86:	0004      	movs	r4, r0
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     a88:	2900      	cmp	r1, #0
     a8a:	d011      	beq.n	ab0 <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x30>
     a8c:	230c      	movs	r3, #12
     a8e:	3101      	adds	r1, #1
     a90:	4359      	muls	r1, r3
     a92:	6840      	ldr	r0, [r0, #4]
     a94:	f001 fd0a 	bl	24ac <realloc>
        if(!new_data) return;
     a98:	2800      	cmp	r0, #0
     a9a:	d008      	beq.n	aae <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x2e>
        *(m_data + m_size) = elem;
     a9c:	220c      	movs	r2, #12
     a9e:	6823      	ldr	r3, [r4, #0]
        m_data = new_data;
     aa0:	6060      	str	r0, [r4, #4]
        *(m_data + m_size) = elem;
     aa2:	435a      	muls	r2, r3
        m_size++;
     aa4:	3301      	adds	r3, #1
        *(m_data + m_size) = elem;
     aa6:	1880      	adds	r0, r0, r2
     aa8:	cd46      	ldmia	r5!, {r1, r2, r6}
     aaa:	c046      	stmia	r0!, {r1, r2, r6}
        m_size++;
     aac:	6023      	str	r3, [r4, #0]
    }
     aae:	bd70      	pop	{r4, r5, r6, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     ab0:	200c      	movs	r0, #12
     ab2:	f001 fc1f 	bl	22f4 <malloc>
     ab6:	e7ef      	b.n	a98 <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x18>

00000ab8 <_ZN3GSMC1E6gpio_tP6uart_t>:
GSM::GSM(const gpio_t pwrkey, uart_t* uart) :
     ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aba:	b087      	sub	sp, #28
     abc:	0005      	movs	r5, r0
     abe:	4668      	mov	r0, sp
     ac0:	9100      	str	r1, [sp, #0]
     ac2:	6042      	str	r2, [r0, #4]
    m_pwrkey(pwrkey), m_uart(uart)
     ac4:	0001      	movs	r1, r0
     ac6:	002a      	movs	r2, r5
     ac8:	c950      	ldmia	r1!, {r4, r6}
     aca:	c250      	stmia	r2!, {r4, r6}
     acc:	60ab      	str	r3, [r5, #8]
    Vector() : m_size(0), m_data(NULL) {}
     ace:	2300      	movs	r3, #0
            PORT->Group[port].DIRSET.reg = 1 << pin;
     ad0:	2101      	movs	r1, #1
     ad2:	60eb      	str	r3, [r5, #12]
     ad4:	612b      	str	r3, [r5, #16]
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     ad6:	6842      	ldr	r2, [r0, #4]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     ad8:	2402      	movs	r4, #2
            PORT->Group[port].DIRSET.reg = 1 << pin;
     ada:	4091      	lsls	r1, r2
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     adc:	6803      	ldr	r3, [r0, #0]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     ade:	4822      	ldr	r0, [pc, #136]	; (b68 <_ZN3GSMC1E6gpio_tP6uart_t+0xb0>)
     ae0:	01db      	lsls	r3, r3, #7
     ae2:	181b      	adds	r3, r3, r0
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     ae4:	189a      	adds	r2, r3, r2
            PORT->Group[port].DIRSET.reg = 1 << pin;
     ae6:	6099      	str	r1, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     ae8:	3240      	adds	r2, #64	; 0x40
     aea:	7810      	ldrb	r0, [r2, #0]
     aec:	002e      	movs	r6, r5
     aee:	43a0      	bics	r0, r4
    m_smsfuncs.push_back({"exec", func_exec, LEVEL_ADMIN});
     af0:	ac03      	add	r4, sp, #12
     af2:	7010      	strb	r0, [r2, #0]
     af4:	0022      	movs	r2, r4
            PORT->Group[port].OUTSET.reg = 1 << pin;
     af6:	6199      	str	r1, [r3, #24]
     af8:	4b1c      	ldr	r3, [pc, #112]	; (b6c <_ZN3GSMC1E6gpio_tP6uart_t+0xb4>)
    m_pwrkey(pwrkey), m_uart(uart)
     afa:	360c      	adds	r6, #12
    m_smsfuncs.push_back({"exec", func_exec, LEVEL_ADMIN});
     afc:	cb83      	ldmia	r3!, {r0, r1, r7}
     afe:	c283      	stmia	r2!, {r0, r1, r7}
     b00:	001f      	movs	r7, r3
     b02:	0021      	movs	r1, r4
     b04:	0030      	movs	r0, r6
     b06:	f7ff ffbb 	bl	a80 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    m_smsfuncs.push_back({"setnum", func_setnum, LEVEL_ADMIN});
     b0a:	003a      	movs	r2, r7
     b0c:	0023      	movs	r3, r4
     b0e:	ca83      	ldmia	r2!, {r0, r1, r7}
     b10:	c383      	stmia	r3!, {r0, r1, r7}
     b12:	0021      	movs	r1, r4
     b14:	0030      	movs	r0, r6
     b16:	f7ff ffb3 	bl	a80 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    m_smsfuncs.push_back({"delnum", func_delnum, LEVEL_ADMIN});
     b1a:	0022      	movs	r2, r4
     b1c:	4b13      	ldr	r3, [pc, #76]	; (b6c <_ZN3GSMC1E6gpio_tP6uart_t+0xb4>)
     b1e:	3318      	adds	r3, #24
     b20:	cb83      	ldmia	r3!, {r0, r1, r7}
     b22:	c283      	stmia	r2!, {r0, r1, r7}
     b24:	0021      	movs	r1, r4
     b26:	0030      	movs	r0, r6
     b28:	f7ff ffaa 	bl	a80 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    m_smsfuncs.push_back({"listnum", func_listnum, LEVEL_USER});
     b2c:	0022      	movs	r2, r4
     b2e:	4b0f      	ldr	r3, [pc, #60]	; (b6c <_ZN3GSMC1E6gpio_tP6uart_t+0xb4>)
     b30:	3324      	adds	r3, #36	; 0x24
     b32:	cb83      	ldmia	r3!, {r0, r1, r7}
     b34:	c283      	stmia	r2!, {r0, r1, r7}
     b36:	0021      	movs	r1, r4
     b38:	0030      	movs	r0, r6
     b3a:	f7ff ffa1 	bl	a80 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    m_smsfuncs.push_back({"update", func_update, LEVEL_ADMIN});
     b3e:	0022      	movs	r2, r4
     b40:	4b0a      	ldr	r3, [pc, #40]	; (b6c <_ZN3GSMC1E6gpio_tP6uart_t+0xb4>)
     b42:	3330      	adds	r3, #48	; 0x30
     b44:	cb83      	ldmia	r3!, {r0, r1, r7}
     b46:	c283      	stmia	r2!, {r0, r1, r7}
     b48:	0021      	movs	r1, r4
     b4a:	0030      	movs	r0, r6
     b4c:	f7ff ff98 	bl	a80 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    m_smsfuncs.push_back({"help", func_listcmd, LEVEL_USER});
     b50:	0022      	movs	r2, r4
     b52:	4b06      	ldr	r3, [pc, #24]	; (b6c <_ZN3GSMC1E6gpio_tP6uart_t+0xb4>)
     b54:	333c      	adds	r3, #60	; 0x3c
     b56:	cb83      	ldmia	r3!, {r0, r1, r7}
     b58:	c283      	stmia	r2!, {r0, r1, r7}
     b5a:	0030      	movs	r0, r6
     b5c:	0021      	movs	r1, r4
     b5e:	f7ff ff8f 	bl	a80 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
}
     b62:	0028      	movs	r0, r5
     b64:	b007      	add	sp, #28
     b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b68:	41004400 	.word	0x41004400
     b6c:	00002f18 	.word	0x00002f18

00000b70 <_ZN4RF243csnEb>:
        if(en)
     b70:	2201      	movs	r2, #1
     b72:	6903      	ldr	r3, [r0, #16]
#define pgm_read_byte(x) (*(uint8_t*)(x))

/****************************************************************************/

void RF24::csn(bool mode)
{
     b74:	b510      	push	{r4, lr}
     b76:	409a      	lsls	r2, r3
     b78:	68c3      	ldr	r3, [r0, #12]
     b7a:	01db      	lsls	r3, r3, #7
     b7c:	2900      	cmp	r1, #0
     b7e:	d006      	beq.n	b8e <_ZN4RF243csnEb+0x1e>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     b80:	4905      	ldr	r1, [pc, #20]	; (b98 <_ZN4RF243csnEb+0x28>)
     b82:	185b      	adds	r3, r3, r1
     b84:	619a      	str	r2, [r3, #24]
      _SPI.chipSelect(csn_pin);
    #endif // defined(RF24_RPi)

    #if !defined(RF24_LINUX)
    digitalWrite(csn_pin, mode);
    delay_usec(csDelay);
     b86:	6a40      	ldr	r0, [r0, #36]	; 0x24
     b88:	f002 fcee 	bl	3568 <__delay_usec_veneer>
    #endif // !defined(RF24_LINUX)
}
     b8c:	bd10      	pop	{r4, pc}
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     b8e:	4902      	ldr	r1, [pc, #8]	; (b98 <_ZN4RF243csnEb+0x28>)
     b90:	185b      	adds	r3, r3, r1
     b92:	615a      	str	r2, [r3, #20]
     b94:	e7f7      	b.n	b86 <_ZN4RF243csnEb+0x16>
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	41004400 	.word	0x41004400

00000b9c <_ZN4RF242ceEb>:
        return port == b.port && pin == b.pin;
     b9c:	6843      	ldr	r3, [r0, #4]
     b9e:	68c2      	ldr	r2, [r0, #12]

/****************************************************************************/

void RF24::ce(bool level)
{
     ba0:	b510      	push	{r4, lr}
     ba2:	6884      	ldr	r4, [r0, #8]
     ba4:	4293      	cmp	r3, r2
     ba6:	d102      	bne.n	bae <_ZN4RF242ceEb+0x12>
     ba8:	6902      	ldr	r2, [r0, #16]
     baa:	42a2      	cmp	r2, r4
     bac:	d007      	beq.n	bbe <_ZN4RF242ceEb+0x22>
        if(en)
     bae:	2201      	movs	r2, #1
     bb0:	01db      	lsls	r3, r3, #7
     bb2:	40a2      	lsls	r2, r4
     bb4:	2900      	cmp	r1, #0
     bb6:	d003      	beq.n	bc0 <_ZN4RF242ceEb+0x24>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     bb8:	4903      	ldr	r1, [pc, #12]	; (bc8 <_ZN4RF242ceEb+0x2c>)
     bba:	185b      	adds	r3, r3, r1
     bbc:	619a      	str	r2, [r3, #24]
    //Allow for 3-pin use on ATTiny
    if (ce_pin != csn_pin) {
        digitalWrite(ce_pin, level);
    }
}
     bbe:	bd10      	pop	{r4, pc}
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     bc0:	4901      	ldr	r1, [pc, #4]	; (bc8 <_ZN4RF242ceEb+0x2c>)
     bc2:	185b      	adds	r3, r3, r1
     bc4:	615a      	str	r2, [r3, #20]
     bc6:	e7fa      	b.n	bbe <_ZN4RF242ceEb+0x22>
     bc8:	41004400 	.word	0x41004400

00000bcc <_ZN4RF2416beginTransactionEv>:

/****************************************************************************/

inline void RF24::beginTransaction()
{
     bcc:	b510      	push	{r4, lr}
    #if defined(RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif // defined(RF24_SPI_TRANSACTIONS)
    csn(LOW);
     bce:	2100      	movs	r1, #0
     bd0:	f7ff ffce 	bl	b70 <_ZN4RF243csnEb>
}
     bd4:	bd10      	pop	{r4, pc}

00000bd6 <_ZN4RF2414endTransactionEv>:

/****************************************************************************/

inline void RF24::endTransaction()
{
     bd6:	b510      	push	{r4, lr}
    csn(HIGH);
     bd8:	2101      	movs	r1, #1
     bda:	f7ff ffc9 	bl	b70 <_ZN4RF243csnEb>
    #if defined(RF24_SPI_TRANSACTIONS)
    _SPI.endTransaction();
    #endif // defined(RF24_SPI_TRANSACTIONS)
}
     bde:	bd10      	pop	{r4, pc}

00000be0 <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     be0:	b570      	push	{r4, r5, r6, lr}
     be2:	0004      	movs	r4, r0
     be4:	000d      	movs	r5, r1
    result = *++prx;   // result is 2nd byte of receive buffer

    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
     be6:	f7ff fff1 	bl	bcc <_ZN4RF2416beginTransactionEv>
    _SPI.Transfer(R_REGISTER | (REGISTER_MASK & reg));
     bea:	211f      	movs	r1, #31
     bec:	6820      	ldr	r0, [r4, #0]
     bee:	4029      	ands	r1, r5
     bf0:	f000 fde8 	bl	17c4 <_ZN5spi_t8TransferEh>
    result = _SPI.Transfer(0xff);
     bf4:	21ff      	movs	r1, #255	; 0xff
     bf6:	6820      	ldr	r0, [r4, #0]
     bf8:	f000 fde4 	bl	17c4 <_ZN5spi_t8TransferEh>
     bfc:	0005      	movs	r5, r0
    endTransaction();
     bfe:	0020      	movs	r0, r4
     c00:	f7ff ffe9 	bl	bd6 <_ZN4RF2414endTransactionEv>

    #endif // !defined(RF24_LINUX)

    return result;
}
     c04:	0028      	movs	r0, r5
     c06:	bd70      	pop	{r4, r5, r6, pc}

00000c08 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c0a:	000f      	movs	r7, r1
     c0c:	0014      	movs	r4, r2
     c0e:	001e      	movs	r6, r3
     c10:	0005      	movs	r5, r0
    _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, size);
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
     c12:	f7ff ffdb 	bl	bcc <_ZN4RF2416beginTransactionEv>
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     c16:	211f      	movs	r1, #31
     c18:	400f      	ands	r7, r1
     c1a:	3101      	adds	r1, #1
     c1c:	4339      	orrs	r1, r7
     c1e:	6828      	ldr	r0, [r5, #0]
     c20:	f000 fdd0 	bl	17c4 <_ZN5spi_t8TransferEh>
     c24:	0007      	movs	r7, r0
     c26:	19a6      	adds	r6, r4, r6
    while (len--) {
     c28:	42b4      	cmp	r4, r6
     c2a:	d005      	beq.n	c38 <_ZN4RF2414write_registerEhPKhh+0x30>
        _SPI.Transfer(*buf++);
     c2c:	7821      	ldrb	r1, [r4, #0]
     c2e:	6828      	ldr	r0, [r5, #0]
     c30:	f000 fdc8 	bl	17c4 <_ZN5spi_t8TransferEh>
     c34:	3401      	adds	r4, #1
    while (len--) {
     c36:	e7f7      	b.n	c28 <_ZN4RF2414write_registerEhPKhh+0x20>
    }
    endTransaction();
     c38:	0028      	movs	r0, r5
     c3a:	f7ff ffcc 	bl	bd6 <_ZN4RF2414endTransactionEv>
    #endif // !defined(RF24_LINUX)

    return status;
}
     c3e:	0038      	movs	r0, r7
     c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000c42 <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     c42:	b570      	push	{r4, r5, r6, lr}
     c44:	0016      	movs	r6, r2
     c46:	0004      	movs	r4, r0
     c48:	000d      	movs	r5, r1
    _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
    status = *prx++; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
     c4a:	f7ff ffbf 	bl	bcc <_ZN4RF2416beginTransactionEv>
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     c4e:	211f      	movs	r1, #31
     c50:	400d      	ands	r5, r1
     c52:	3101      	adds	r1, #1
     c54:	4329      	orrs	r1, r5
     c56:	6820      	ldr	r0, [r4, #0]
     c58:	f000 fdb4 	bl	17c4 <_ZN5spi_t8TransferEh>
     c5c:	0005      	movs	r5, r0
    _SPI.Transfer(value);
     c5e:	0031      	movs	r1, r6
     c60:	6820      	ldr	r0, [r4, #0]
     c62:	f000 fdaf 	bl	17c4 <_ZN5spi_t8TransferEh>
    endTransaction();
     c66:	0020      	movs	r0, r4
     c68:	f7ff ffb5 	bl	bd6 <_ZN4RF2414endTransactionEv>

    #endif // !defined(RF24_LINUX)

    return status;
}
     c6c:	0028      	movs	r0, r5
     c6e:	bd70      	pop	{r4, r5, r6, pc}

00000c70 <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
     c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c72:	9100      	str	r1, [sp, #0]
     c74:	001d      	movs	r5, r3
    uint8_t status;
    const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

    data_len = rf24_min(data_len, payload_size);
     c76:	7dc3      	ldrb	r3, [r0, #23]
{
     c78:	0004      	movs	r4, r0
    data_len = rf24_min(data_len, payload_size);
     c7a:	1c1f      	adds	r7, r3, #0
     c7c:	4293      	cmp	r3, r2
     c7e:	d900      	bls.n	c82 <_ZN4RF2413write_payloadEPKvhh+0x12>
     c80:	1c17      	adds	r7, r2, #0
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     c82:	2600      	movs	r6, #0
     c84:	7e22      	ldrb	r2, [r4, #24]
     c86:	b2ff      	uxtb	r7, r7
     c88:	42b2      	cmp	r2, r6
     c8a:	d101      	bne.n	c90 <_ZN4RF2413write_payloadEPKvhh+0x20>
     c8c:	1bde      	subs	r6, r3, r7
     c8e:	b2f6      	uxtb	r6, r6
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();

    #else // !defined(RF24_LINUX)

    beginTransaction();
     c90:	0020      	movs	r0, r4
     c92:	f7ff ff9b 	bl	bcc <_ZN4RF2416beginTransactionEv>
    status = _SPI.Transfer(writeType);
     c96:	0029      	movs	r1, r5
     c98:	6820      	ldr	r0, [r4, #0]
     c9a:	f000 fd93 	bl	17c4 <_ZN5spi_t8TransferEh>
     c9e:	9d00      	ldr	r5, [sp, #0]
     ca0:	9001      	str	r0, [sp, #4]
     ca2:	19ef      	adds	r7, r5, r7
    while (data_len--) {
     ca4:	42bd      	cmp	r5, r7
     ca6:	d005      	beq.n	cb4 <_ZN4RF2413write_payloadEPKvhh+0x44>
        _SPI.Transfer(*current++);
     ca8:	7829      	ldrb	r1, [r5, #0]
     caa:	6820      	ldr	r0, [r4, #0]
     cac:	f000 fd8a 	bl	17c4 <_ZN5spi_t8TransferEh>
     cb0:	3501      	adds	r5, #1
    while (data_len--) {
     cb2:	e7f7      	b.n	ca4 <_ZN4RF2413write_payloadEPKvhh+0x34>
    }
    while (blank_len--) {
     cb4:	3e01      	subs	r6, #1
     cb6:	b2f6      	uxtb	r6, r6
     cb8:	2eff      	cmp	r6, #255	; 0xff
     cba:	d004      	beq.n	cc6 <_ZN4RF2413write_payloadEPKvhh+0x56>
        _SPI.Transfer(0);
     cbc:	2100      	movs	r1, #0
     cbe:	6820      	ldr	r0, [r4, #0]
     cc0:	f000 fd80 	bl	17c4 <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     cc4:	e7f6      	b.n	cb4 <_ZN4RF2413write_payloadEPKvhh+0x44>
    }
    endTransaction();
     cc6:	0020      	movs	r0, r4
     cc8:	f7ff ff85 	bl	bd6 <_ZN4RF2414endTransactionEv>

    #endif // !defined(RF24_LINUX)

    return status;
}
     ccc:	9801      	ldr	r0, [sp, #4]
     cce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00000cd0 <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t data_len)
{
     cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t status;
    uint8_t* current = reinterpret_cast<uint8_t*>(buf);

    if (data_len > payload_size) {
     cd2:	7dc3      	ldrb	r3, [r0, #23]
{
     cd4:	0004      	movs	r4, r0
     cd6:	000d      	movs	r5, r1
     cd8:	1c1f      	adds	r7, r3, #0
     cda:	4293      	cmp	r3, r2
     cdc:	d900      	bls.n	ce0 <_ZN4RF2412read_payloadEPvh+0x10>
     cde:	1c17      	adds	r7, r2, #0
        data_len = payload_size;
    }
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     ce0:	2600      	movs	r6, #0
     ce2:	7e22      	ldrb	r2, [r4, #24]
     ce4:	b2ff      	uxtb	r7, r7
     ce6:	42b2      	cmp	r2, r6
     ce8:	d101      	bne.n	cee <_ZN4RF2412read_payloadEPvh+0x1e>
     cea:	1bde      	subs	r6, r3, r7
     cec:	b2f6      	uxtb	r6, r6
      *current = *prx;
    }
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
     cee:	0020      	movs	r0, r4
     cf0:	f7ff ff6c 	bl	bcc <_ZN4RF2416beginTransactionEv>
    status = _SPI.Transfer(R_RX_PAYLOAD);
     cf4:	2161      	movs	r1, #97	; 0x61
     cf6:	6820      	ldr	r0, [r4, #0]
     cf8:	f000 fd64 	bl	17c4 <_ZN5spi_t8TransferEh>
     cfc:	19ef      	adds	r7, r5, r7
     cfe:	9001      	str	r0, [sp, #4]
    while (data_len--) {
     d00:	42bd      	cmp	r5, r7
     d02:	d006      	beq.n	d12 <_ZN4RF2412read_payloadEPvh+0x42>
        *current++ = _SPI.Transfer(0xFF);
     d04:	21ff      	movs	r1, #255	; 0xff
     d06:	6820      	ldr	r0, [r4, #0]
     d08:	f000 fd5c 	bl	17c4 <_ZN5spi_t8TransferEh>
     d0c:	7028      	strb	r0, [r5, #0]
     d0e:	3501      	adds	r5, #1
    while (data_len--) {
     d10:	e7f6      	b.n	d00 <_ZN4RF2412read_payloadEPvh+0x30>
    }
    while (blank_len--) {
     d12:	3e01      	subs	r6, #1
     d14:	b2f6      	uxtb	r6, r6
     d16:	2eff      	cmp	r6, #255	; 0xff
     d18:	d004      	beq.n	d24 <_ZN4RF2412read_payloadEPvh+0x54>
        _SPI.Transfer(0xff);
     d1a:	21ff      	movs	r1, #255	; 0xff
     d1c:	6820      	ldr	r0, [r4, #0]
     d1e:	f000 fd51 	bl	17c4 <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     d22:	e7f6      	b.n	d12 <_ZN4RF2412read_payloadEPvh+0x42>
    }
    endTransaction();
     d24:	0020      	movs	r0, r4
     d26:	f7ff ff56 	bl	bd6 <_ZN4RF2414endTransactionEv>

    #endif // !defined(RF24_LINUX)

    return status;
}
     d2a:	9801      	ldr	r0, [sp, #4]
     d2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00000d2e <_ZN4RF248spiTransEh>:
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd)
{
     d2e:	b570      	push	{r4, r5, r6, lr}
     d30:	0004      	movs	r4, r0
     d32:	000d      	movs	r5, r1

    uint8_t status;

    beginTransaction();
     d34:	f7ff ff4a 	bl	bcc <_ZN4RF2416beginTransactionEv>
    status = _SPI.Transfer(cmd);
     d38:	0029      	movs	r1, r5
     d3a:	6820      	ldr	r0, [r4, #0]
     d3c:	f000 fd42 	bl	17c4 <_ZN5spi_t8TransferEh>
     d40:	0005      	movs	r5, r0
    endTransaction();
     d42:	0020      	movs	r0, r4
     d44:	f7ff ff47 	bl	bd6 <_ZN4RF2414endTransactionEv>

    return status;
}
     d48:	0028      	movs	r0, r5
     d4a:	bd70      	pop	{r4, r5, r6, pc}

00000d4c <_ZN4RF248flush_rxEv>:
{
     d4c:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_RX);
     d4e:	21e2      	movs	r1, #226	; 0xe2
     d50:	f7ff ffed 	bl	d2e <_ZN4RF248spiTransEh>
}
     d54:	bd10      	pop	{r4, pc}

00000d56 <_ZN4RF248flush_txEv>:
{
     d56:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_TX);
     d58:	21e1      	movs	r1, #225	; 0xe1
     d5a:	f7ff ffe8 	bl	d2e <_ZN4RF248spiTransEh>
}
     d5e:	bd10      	pop	{r4, pc}

00000d60 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
     d60:	b510      	push	{r4, lr}
    return spiTrans(RF24_NOP);
     d62:	21ff      	movs	r1, #255	; 0xff
     d64:	f7ff ffe3 	bl	d2e <_ZN4RF248spiTransEh>
}
     d68:	bd10      	pop	{r4, pc}

00000d6a <_ZN4RF24C1E6gpio_tS0_R5spi_t>:

#endif

/****************************************************************************/

RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     d6a:	b082      	sub	sp, #8
     d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
     d6e:	9307      	str	r3, [sp, #28]
     d70:	466c      	mov	r4, sp
        :_SPI(_spi), ce_pin(_cepin), csn_pin(_cspin), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5),
         csDelay(5)//,pipe0_reading_address(0)
     d72:	0003      	movs	r3, r0
RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     d74:	9100      	str	r1, [sp, #0]
         csDelay(5)//,pipe0_reading_address(0)
     d76:	9909      	ldr	r1, [sp, #36]	; 0x24
RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     d78:	6062      	str	r2, [r4, #4]
         csDelay(5)//,pipe0_reading_address(0)
     d7a:	c302      	stmia	r3!, {r1}
     d7c:	cc22      	ldmia	r4!, {r1, r5}
     d7e:	c322      	stmia	r3!, {r1, r5}
     d80:	0003      	movs	r3, r0
RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     d82:	aa07      	add	r2, sp, #28
         csDelay(5)//,pipe0_reading_address(0)
     d84:	330c      	adds	r3, #12
     d86:	ca12      	ldmia	r2!, {r1, r4}
     d88:	c312      	stmia	r3!, {r1, r4}
     d8a:	2305      	movs	r3, #5
     d8c:	7783      	strb	r3, [r0, #30]
     d8e:	6243      	str	r3, [r0, #36]	; 0x24
     d90:	2380      	movs	r3, #128	; 0x80
     d92:	019b      	lsls	r3, r3, #6
     d94:	82c3      	strh	r3, [r0, #22]
     d96:	2300      	movs	r3, #0
     d98:	8303      	strh	r3, [r0, #24]
{
    pipe0_reading_address[0] = 0;
}
     d9a:	bc3e      	pop	{r1, r2, r3, r4, r5}
     d9c:	bc08      	pop	{r3}
     d9e:	b002      	add	sp, #8
     da0:	4718      	bx	r3

00000da2 <_ZN4RF2410setChannelEh>:

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     da2:	000a      	movs	r2, r1
     da4:	b510      	push	{r4, lr}
    const uint8_t max_channel = 125;
    write_register(RF_CH, rf24_min(channel, max_channel));
     da6:	297c      	cmp	r1, #124	; 0x7c
     da8:	d900      	bls.n	dac <_ZN4RF2410setChannelEh+0xa>
     daa:	227d      	movs	r2, #125	; 0x7d
     dac:	2105      	movs	r1, #5
     dae:	f7ff ff48 	bl	c42 <_ZN4RF2414write_registerEhh>
}
     db2:	bd10      	pop	{r4, pc}

00000db4 <_ZN4RF2414setPayloadSizeEh>:

/****************************************************************************/

void RF24::setPayloadSize(uint8_t size)
{
    payload_size = rf24_min(size, 32);
     db4:	1c0b      	adds	r3, r1, #0
     db6:	2920      	cmp	r1, #32
     db8:	d900      	bls.n	dbc <_ZN4RF2414setPayloadSizeEh+0x8>
     dba:	2320      	movs	r3, #32
     dbc:	75c3      	strb	r3, [r0, #23]
}
     dbe:	4770      	bx	lr

00000dc0 <_ZN4RF2413stopListeningEv>:
/****************************************************************************/
static const uint8_t child_pipe_enable[]
PROGMEM = {ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5};

void RF24::stopListening(void)
{
     dc0:	b570      	push	{r4, r5, r6, lr}
     dc2:	0004      	movs	r4, r0
    ce(LOW);
     dc4:	2100      	movs	r1, #0
     dc6:	f7ff fee9 	bl	b9c <_ZN4RF242ceEb>

    delay_usec(txDelay);
     dca:	6a20      	ldr	r0, [r4, #32]
     dcc:	f002 fbcc 	bl	3568 <__delay_usec_veneer>

    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
     dd0:	211d      	movs	r1, #29
     dd2:	0020      	movs	r0, r4
     dd4:	f7ff ff04 	bl	be0 <_ZN4RF2413read_registerEh>
     dd8:	0783      	lsls	r3, r0, #30
     dda:	d505      	bpl.n	de8 <_ZN4RF2413stopListeningEv+0x28>
        delay_usec(txDelay); //200
     ddc:	6a20      	ldr	r0, [r4, #32]
     dde:	f002 fbc3 	bl	3568 <__delay_usec_veneer>
        flush_tx();
     de2:	0020      	movs	r0, r4
     de4:	f7ff ffb7 	bl	d56 <_ZN4RF248flush_txEv>
    }
    //flush_rx();
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
     de8:	2100      	movs	r1, #0
     dea:	0020      	movs	r0, r4
     dec:	f7ff fef8 	bl	be0 <_ZN4RF2413read_registerEh>
     df0:	2501      	movs	r5, #1
     df2:	43a8      	bics	r0, r5
     df4:	b2c2      	uxtb	r2, r0
     df6:	2100      	movs	r1, #0
     df8:	0020      	movs	r0, r4
     dfa:	f7ff ff22 	bl	c42 <_ZN4RF2414write_registerEhh>
    if (ce_pin == csn_pin) {
      powerDown();
      powerUp();
    }
    #endif
    write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0]))); // Enable RX on pipe0
     dfe:	2102      	movs	r1, #2
     e00:	0020      	movs	r0, r4
     e02:	f7ff feed 	bl	be0 <_ZN4RF2413read_registerEh>
     e06:	4305      	orrs	r5, r0
     e08:	b2ea      	uxtb	r2, r5
     e0a:	2102      	movs	r1, #2
     e0c:	0020      	movs	r0, r4
     e0e:	f7ff ff18 	bl	c42 <_ZN4RF2414write_registerEhh>

    //delayMicroseconds(100);

}
     e12:	bd70      	pop	{r4, r5, r6, pc}

00000e14 <_ZN4RF247powerUpEv>:
/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
    uint8_t cfg = read_register(NRF_CONFIG);
     e14:	2100      	movs	r1, #0
{
     e16:	b510      	push	{r4, lr}
     e18:	0004      	movs	r4, r0
    uint8_t cfg = read_register(NRF_CONFIG);
     e1a:	f7ff fee1 	bl	be0 <_ZN4RF2413read_registerEh>

    // if not powered up then power up and wait for the radio to initialize
    if (!(cfg & _BV(PWR_UP))) {
     e1e:	2202      	movs	r2, #2
     e20:	0001      	movs	r1, r0
     e22:	4011      	ands	r1, r2
     e24:	4210      	tst	r0, r2
     e26:	d107      	bne.n	e38 <_ZN4RF247powerUpEv+0x24>
        write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
     e28:	4302      	orrs	r2, r0
     e2a:	b2d2      	uxtb	r2, r2
     e2c:	0020      	movs	r0, r4
     e2e:	f7ff ff08 	bl	c42 <_ZN4RF2414write_registerEhh>

        // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
        // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
        // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
        delay_usec(5000);
     e32:	4802      	ldr	r0, [pc, #8]	; (e3c <_ZN4RF247powerUpEv+0x28>)
     e34:	f002 fb98 	bl	3568 <__delay_usec_veneer>
    }
}
     e38:	bd10      	pop	{r4, pc}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	00001388 	.word	0x00001388

00000e40 <_ZN4RF2414startFastWriteEPKvhbb>:
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24::startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{ //TMRh20
     e40:	b570      	push	{r4, r5, r6, lr}
     e42:	0004      	movs	r4, r0
     e44:	0018      	movs	r0, r3
     e46:	ab04      	add	r3, sp, #16
     e48:	781d      	ldrb	r5, [r3, #0]

    //write_payload( buf,len);
    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
     e4a:	23b0      	movs	r3, #176	; 0xb0
     e4c:	2800      	cmp	r0, #0
     e4e:	d100      	bne.n	e52 <_ZN4RF2414startFastWriteEPKvhbb+0x12>
     e50:	3b10      	subs	r3, #16
     e52:	0020      	movs	r0, r4
     e54:	f7ff ff0c 	bl	c70 <_ZN4RF2413write_payloadEPKvhh>
    if (startTx) {
     e58:	2d00      	cmp	r5, #0
     e5a:	d003      	beq.n	e64 <_ZN4RF2414startFastWriteEPKvhbb+0x24>
        ce(HIGH);
     e5c:	2101      	movs	r1, #1
     e5e:	0020      	movs	r0, r4
     e60:	f7ff fe9c 	bl	b9c <_ZN4RF242ceEb>
    }

}
     e64:	bd70      	pop	{r4, r5, r6, pc}

00000e66 <_ZN4RF245writeEPKvhb>:
{
     e66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     e68:	0004      	movs	r4, r0
    startFastWrite(buf, len, multicast);
     e6a:	2001      	movs	r0, #1
     e6c:	9000      	str	r0, [sp, #0]
     e6e:	0020      	movs	r0, r4
     e70:	f7ff ffe6 	bl	e40 <_ZN4RF2414startFastWriteEPKvhbb>
    uint32_t timer = millis();
     e74:	f000 fd7e 	bl	1974 <millis>
    while (!(get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
     e78:	2730      	movs	r7, #48	; 0x30
    uint32_t timer = millis();
     e7a:	0006      	movs	r6, r0
    while (!(get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
     e7c:	0020      	movs	r0, r4
     e7e:	f7ff ff6f 	bl	d60 <_ZN4RF2410get_statusEv>
     e82:	4238      	tst	r0, r7
     e84:	d108      	bne.n	e98 <_ZN4RF245writeEPKvhb+0x32>
        if (millis() - timer > 95) {
     e86:	f000 fd75 	bl	1974 <millis>
     e8a:	1b80      	subs	r0, r0, r6
     e8c:	285f      	cmp	r0, #95	; 0x5f
     e8e:	d9f5      	bls.n	e7c <_ZN4RF245writeEPKvhb+0x16>
    failureDetected = 1;
     e90:	2301      	movs	r3, #1
     e92:	77e3      	strb	r3, [r4, #31]
        return 0;
     e94:	2000      	movs	r0, #0
}
     e96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ce(LOW);
     e98:	2100      	movs	r1, #0
     e9a:	0020      	movs	r0, r4
     e9c:	f7ff fe7e 	bl	b9c <_ZN4RF242ceEb>
    uint8_t status = write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     ea0:	2270      	movs	r2, #112	; 0x70
     ea2:	2107      	movs	r1, #7
     ea4:	0020      	movs	r0, r4
     ea6:	f7ff fecc 	bl	c42 <_ZN4RF2414write_registerEhh>
     eaa:	0003      	movs	r3, r0
    return 1;
     eac:	2001      	movs	r0, #1
    if (status & _BV(MAX_RT)) {
     eae:	06db      	lsls	r3, r3, #27
     eb0:	d5f1      	bpl.n	e96 <_ZN4RF245writeEPKvhb+0x30>
        flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
     eb2:	0020      	movs	r0, r4
     eb4:	f7ff ff4f 	bl	d56 <_ZN4RF248flush_txEv>
     eb8:	e7ec      	b.n	e94 <_ZN4RF245writeEPKvhb+0x2e>

00000eba <_ZN4RF245writeEPKvh>:
{
     eba:	b510      	push	{r4, lr}
    return write(buf, len, 0);
     ebc:	2300      	movs	r3, #0
     ebe:	f7ff ffd2 	bl	e66 <_ZN4RF245writeEPKvhb>
}
     ec2:	bd10      	pop	{r4, pc}

00000ec4 <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     ec4:	b570      	push	{r4, r5, r6, lr}
     ec6:	000c      	movs	r4, r1
    if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY))) {
     ec8:	2117      	movs	r1, #23
{
     eca:	0006      	movs	r6, r0
    if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY))) {
     ecc:	f7ff fe88 	bl	be0 <_ZN4RF2413read_registerEh>
     ed0:	2301      	movs	r3, #1
            *pipe_num = (status >> RX_P_NO) & 0x07;
        }
        return 1;
    }

    return 0;
     ed2:	2500      	movs	r5, #0
    if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY))) {
     ed4:	4218      	tst	r0, r3
     ed6:	d108      	bne.n	eea <_ZN4RF249availableEPh+0x26>
        if (pipe_num) {
     ed8:	001d      	movs	r5, r3
     eda:	2c00      	cmp	r4, #0
     edc:	d005      	beq.n	eea <_ZN4RF249availableEPh+0x26>
            uint8_t status = get_status();
     ede:	0030      	movs	r0, r6
     ee0:	f7ff ff3e 	bl	d60 <_ZN4RF2410get_statusEv>
            *pipe_num = (status >> RX_P_NO) & 0x07;
     ee4:	0700      	lsls	r0, r0, #28
     ee6:	0f40      	lsrs	r0, r0, #29
     ee8:	7020      	strb	r0, [r4, #0]


}
     eea:	0028      	movs	r0, r5
     eec:	bd70      	pop	{r4, r5, r6, pc}

00000eee <_ZN4RF249availableEv>:
{
     eee:	b510      	push	{r4, lr}
    return available(0);
     ef0:	2100      	movs	r1, #0
     ef2:	f7ff ffe7 	bl	ec4 <_ZN4RF249availableEPh>
}
     ef6:	bd10      	pop	{r4, pc}

00000ef8 <_ZN4RF244readEPvh>:

/****************************************************************************/

void RF24::read(void* buf, uint8_t len)
{
     ef8:	b510      	push	{r4, lr}
     efa:	0004      	movs	r4, r0

    // Fetch the payload
    read_payload(buf, len);
     efc:	f7ff fee8 	bl	cd0 <_ZN4RF2412read_payloadEPvh>

    //Clear the two possible interrupt flags with one command
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
     f00:	2270      	movs	r2, #112	; 0x70
     f02:	2107      	movs	r1, #7
     f04:	0020      	movs	r0, r4
     f06:	f7ff fe9c 	bl	c42 <_ZN4RF2414write_registerEhh>

}
     f0a:	bd10      	pop	{r4, pc}

00000f0c <_ZN4RF2415openWritingPipeEy>:
}

/****************************************************************************/

void RF24::openWritingPipe(uint64_t value)
{
     f0c:	b513      	push	{r0, r1, r4, lr}
     f0e:	0004      	movs	r4, r0
     f10:	9200      	str	r2, [sp, #0]
     f12:	9301      	str	r3, [sp, #4]
    // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
    // expects it LSB first too, so we're good.

    write_register(RX_ADDR_P0, reinterpret_cast<uint8_t*>(&value), addr_width);
     f14:	210a      	movs	r1, #10
     f16:	466a      	mov	r2, sp
     f18:	7f83      	ldrb	r3, [r0, #30]
     f1a:	f7ff fe75 	bl	c08 <_ZN4RF2414write_registerEhPKhh>
    write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), addr_width);
     f1e:	466a      	mov	r2, sp
     f20:	7fa3      	ldrb	r3, [r4, #30]
     f22:	2110      	movs	r1, #16
     f24:	0020      	movs	r0, r4
     f26:	f7ff fe6f 	bl	c08 <_ZN4RF2414write_registerEhPKhh>


    //const uint8_t max_payload_size = 32;
    //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
    write_register(RX_PW_P0, payload_size);
     f2a:	2111      	movs	r1, #17
     f2c:	0020      	movs	r0, r4
     f2e:	7de2      	ldrb	r2, [r4, #23]
     f30:	f7ff fe87 	bl	c42 <_ZN4RF2414write_registerEhh>
}
     f34:	bd13      	pop	{r0, r1, r4, pc}
     f36:	Address 0x00000f36 is out of bounds.


00000f38 <_ZN4RF2415openReadingPipeEhy>:
PROGMEM = {RX_ADDR_P0, RX_ADDR_P1, RX_ADDR_P2, RX_ADDR_P3, RX_ADDR_P4, RX_ADDR_P5};
static const uint8_t child_payload_size[]
PROGMEM = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};

void RF24::openReadingPipe(uint8_t child, uint64_t address)
{
     f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
     f3a:	0004      	movs	r4, r0
     f3c:	000d      	movs	r5, r1
     f3e:	9200      	str	r2, [sp, #0]
     f40:	9301      	str	r3, [sp, #4]
    // If this is pipe 0, cache the address.  This is needed because
    // openWritingPipe() will overwrite the pipe 0 address, so
    // startListening() will have to restore it.
    if (child == 0) {
     f42:	2900      	cmp	r1, #0
     f44:	d108      	bne.n	f58 <_ZN4RF2415openReadingPipeEhy+0x20>
        memcpy(pipe0_reading_address, &address, addr_width);
     f46:	7f82      	ldrb	r2, [r0, #30]
     f48:	4669      	mov	r1, sp
     f4a:	3019      	adds	r0, #25
     f4c:	f001 f9e6 	bl	231c <memcpy>
    }

    if (child <= 6) {
        // For pipes 2-5, only write the LSB
        if (child < 2) {
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
     f50:	4a11      	ldr	r2, [pc, #68]	; (f98 <_ZN4RF2415openReadingPipeEhy+0x60>)
     f52:	7fa3      	ldrb	r3, [r4, #30]
     f54:	5d51      	ldrb	r1, [r2, r5]
     f56:	e006      	b.n	f66 <_ZN4RF2415openReadingPipeEhy+0x2e>
    if (child <= 6) {
     f58:	2906      	cmp	r1, #6
     f5a:	d81c      	bhi.n	f96 <_ZN4RF2415openReadingPipeEhy+0x5e>
        if (child < 2) {
     f5c:	4b0e      	ldr	r3, [pc, #56]	; (f98 <_ZN4RF2415openReadingPipeEhy+0x60>)
     f5e:	5c59      	ldrb	r1, [r3, r1]
        } else {
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
     f60:	2301      	movs	r3, #1
        if (child < 2) {
     f62:	2d01      	cmp	r5, #1
     f64:	d0f4      	beq.n	f50 <_ZN4RF2415openReadingPipeEhy+0x18>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
     f66:	466a      	mov	r2, sp
     f68:	0020      	movs	r0, r4
     f6a:	f7ff fe4d 	bl	c08 <_ZN4RF2414write_registerEhPKhh>
        }

        write_register(pgm_read_byte(&child_payload_size[child]), payload_size);
     f6e:	4b0b      	ldr	r3, [pc, #44]	; (f9c <_ZN4RF2415openReadingPipeEhy+0x64>)
     f70:	7de2      	ldrb	r2, [r4, #23]
     f72:	5d59      	ldrb	r1, [r3, r5]
     f74:	0020      	movs	r0, r4
     f76:	f7ff fe64 	bl	c42 <_ZN4RF2414write_registerEhh>

        // Note it would be more efficient to set all of the bits for all open
        // pipes at once.  However, I thought it would make the calling code
        // more simple to do it this way.
        write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
     f7a:	2102      	movs	r1, #2
     f7c:	0020      	movs	r0, r4
     f7e:	f7ff fe2f 	bl	be0 <_ZN4RF2413read_registerEh>
     f82:	2201      	movs	r2, #1
     f84:	4b06      	ldr	r3, [pc, #24]	; (fa0 <_ZN4RF2415openReadingPipeEhy+0x68>)
     f86:	2102      	movs	r1, #2
     f88:	5d5b      	ldrb	r3, [r3, r5]
     f8a:	409a      	lsls	r2, r3
     f8c:	4302      	orrs	r2, r0
     f8e:	b2d2      	uxtb	r2, r2
     f90:	0020      	movs	r0, r4
     f92:	f7ff fe56 	bl	c42 <_ZN4RF2414write_registerEhh>
    }
}
     f96:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
     f98:	00003276 	.word	0x00003276
     f9c:	00003282 	.word	0x00003282
     fa0:	0000327c 	.word	0x0000327c

00000fa4 <_ZN4RF2416closeReadingPipeEh>:
}

/****************************************************************************/

void RF24::closeReadingPipe(uint8_t pipe)
{
     fa4:	b570      	push	{r4, r5, r6, lr}
     fa6:	000d      	movs	r5, r1
    write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
     fa8:	2102      	movs	r1, #2
{
     faa:	0004      	movs	r4, r0
    write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
     fac:	f7ff fe18 	bl	be0 <_ZN4RF2413read_registerEh>
     fb0:	4b05      	ldr	r3, [pc, #20]	; (fc8 <_ZN4RF2416closeReadingPipeEh+0x24>)
     fb2:	2102      	movs	r1, #2
     fb4:	5d5a      	ldrb	r2, [r3, r5]
     fb6:	2301      	movs	r3, #1
     fb8:	4093      	lsls	r3, r2
     fba:	4398      	bics	r0, r3
     fbc:	b2c2      	uxtb	r2, r0
     fbe:	0020      	movs	r0, r4
     fc0:	f7ff fe3f 	bl	c42 <_ZN4RF2414write_registerEhh>
}
     fc4:	bd70      	pop	{r4, r5, r6, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	0000327c 	.word	0x0000327c

00000fcc <_ZN4RF2414startListeningEv>:
{
     fcc:	b570      	push	{r4, r5, r6, lr}
     fce:	0004      	movs	r4, r0
    powerUp();
     fd0:	f7ff ff20 	bl	e14 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
     fd4:	2100      	movs	r1, #0
     fd6:	0020      	movs	r0, r4
     fd8:	f7ff fe02 	bl	be0 <_ZN4RF2413read_registerEh>
     fdc:	2501      	movs	r5, #1
     fde:	4328      	orrs	r0, r5
     fe0:	b2c2      	uxtb	r2, r0
     fe2:	2100      	movs	r1, #0
     fe4:	0020      	movs	r0, r4
     fe6:	f7ff fe2c 	bl	c42 <_ZN4RF2414write_registerEhh>
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     fea:	2270      	movs	r2, #112	; 0x70
     fec:	2107      	movs	r1, #7
     fee:	0020      	movs	r0, r4
     ff0:	f7ff fe27 	bl	c42 <_ZN4RF2414write_registerEhh>
    ce(HIGH);
     ff4:	0029      	movs	r1, r5
     ff6:	0020      	movs	r0, r4
     ff8:	f7ff fdd0 	bl	b9c <_ZN4RF242ceEb>
    if (pipe0_reading_address[0] > 0) {
     ffc:	7e61      	ldrb	r1, [r4, #25]
     ffe:	2900      	cmp	r1, #0
    1000:	d010      	beq.n	1024 <_ZN4RF2414startListeningEv+0x58>
        write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);
    1002:	0022      	movs	r2, r4
    1004:	210a      	movs	r1, #10
    1006:	0020      	movs	r0, r4
    1008:	7fa3      	ldrb	r3, [r4, #30]
    100a:	3219      	adds	r2, #25
    100c:	f7ff fdfc 	bl	c08 <_ZN4RF2414write_registerEhPKhh>
    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
    1010:	211d      	movs	r1, #29
    1012:	0020      	movs	r0, r4
    1014:	f7ff fde4 	bl	be0 <_ZN4RF2413read_registerEh>
    1018:	0783      	lsls	r3, r0, #30
    101a:	d502      	bpl.n	1022 <_ZN4RF2414startListeningEv+0x56>
        flush_tx();
    101c:	0020      	movs	r0, r4
    101e:	f7ff fe9a 	bl	d56 <_ZN4RF248flush_txEv>
}
    1022:	bd70      	pop	{r4, r5, r6, pc}
        closeReadingPipe(0);
    1024:	0020      	movs	r0, r4
    1026:	f7ff ffbd 	bl	fa4 <_ZN4RF2416closeReadingPipeEh>
    102a:	e7f1      	b.n	1010 <_ZN4RF2414startListeningEv+0x44>

0000102c <_ZN4RF2415toggle_featuresEv>:

/****************************************************************************/

void RF24::toggle_features(void)
{
    102c:	b510      	push	{r4, lr}
    102e:	0004      	movs	r4, r0
    beginTransaction();
    1030:	f7ff fdcc 	bl	bcc <_ZN4RF2416beginTransactionEv>
    _SPI.Transfer(ACTIVATE);
    1034:	2150      	movs	r1, #80	; 0x50
    1036:	6820      	ldr	r0, [r4, #0]
    1038:	f000 fbc4 	bl	17c4 <_ZN5spi_t8TransferEh>
    _SPI.Transfer(0x73);
    103c:	2173      	movs	r1, #115	; 0x73
    103e:	6820      	ldr	r0, [r4, #0]
    1040:	f000 fbc0 	bl	17c4 <_ZN5spi_t8TransferEh>
    endTransaction();
    1044:	0020      	movs	r0, r4
    1046:	f7ff fdc6 	bl	bd6 <_ZN4RF2414endTransactionEv>
}
    104a:	bd10      	pop	{r4, pc}

0000104c <_ZN4RF2410setAutoAckEb>:
}

/****************************************************************************/

void RF24::setAutoAck(bool enable)
{
    104c:	000a      	movs	r2, r1
    104e:	b510      	push	{r4, lr}
    if (enable) {
    1050:	2900      	cmp	r1, #0
    1052:	d000      	beq.n	1056 <_ZN4RF2410setAutoAckEb+0xa>
        write_register(EN_AA, 0x3F);
    1054:	223f      	movs	r2, #63	; 0x3f
    } else {
        write_register(EN_AA, 0);
    1056:	2101      	movs	r1, #1
    1058:	f7ff fdf3 	bl	c42 <_ZN4RF2414write_registerEhh>
    }
}
    105c:	bd10      	pop	{r4, pc}

0000105e <_ZN4RF2410setPALevelEh>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
    105e:	b570      	push	{r4, r5, r6, lr}
    1060:	000c      	movs	r4, r1

    uint8_t setup = read_register(RF_SETUP) & 0xF8;
    1062:	2106      	movs	r1, #6
{
    1064:	0005      	movs	r5, r0
    uint8_t setup = read_register(RF_SETUP) & 0xF8;
    1066:	f7ff fdbb 	bl	be0 <_ZN4RF2413read_registerEh>
    106a:	2107      	movs	r1, #7
    106c:	4388      	bics	r0, r1
    106e:	b2c2      	uxtb	r2, r0

    if (level > 3) {                        // If invalid level, go to max PA
    1070:	2c03      	cmp	r4, #3
    1072:	d802      	bhi.n	107a <_ZN4RF2410setPALevelEh+0x1c>
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
    } else {
        level = (level << 1) + 1;            // Else set level as requested
    1074:	0064      	lsls	r4, r4, #1
    1076:	3401      	adds	r4, #1
    1078:	b2e1      	uxtb	r1, r4
    }

    write_register(RF_SETUP, setup |= level);    // Write it to the chip
    107a:	0028      	movs	r0, r5
    107c:	430a      	orrs	r2, r1
    107e:	2106      	movs	r1, #6
    1080:	f7ff fddf 	bl	c42 <_ZN4RF2414write_registerEhh>
}
    1084:	bd70      	pop	{r4, r5, r6, pc}

00001086 <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
    1086:	b570      	push	{r4, r5, r6, lr}
    1088:	000e      	movs	r6, r1
    bool result = false;
    uint8_t setup = read_register(RF_SETUP);
    108a:	2106      	movs	r1, #6
{
    108c:	0005      	movs	r5, r0

    // HIGH and LOW '00' is 1Mbs - our default
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
    108e:	24d7      	movs	r4, #215	; 0xd7
    uint8_t setup = read_register(RF_SETUP);
    1090:	f7ff fda6 	bl	be0 <_ZN4RF2413read_registerEh>
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
    1094:	4004      	ands	r4, r0
    #if !defined(F_CPU) || F_CPU > 20000000
    txDelay = 250;
    #else //16Mhz Arduino
    txDelay=85;
    #endif
    if (speed == RF24_250KBPS) {
    1096:	2e02      	cmp	r6, #2
    1098:	d112      	bne.n	10c0 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x3a>
        // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
        // Making it '10'.
        setup |= _BV(RF_DR_LOW);
    109a:	2320      	movs	r3, #32
    109c:	431c      	orrs	r4, r3
        #if !defined(F_CPU) || F_CPU > 20000000
        txDelay = 450;
    109e:	33a3      	adds	r3, #163	; 0xa3
    10a0:	33ff      	adds	r3, #255	; 0xff
            #else // 16Mhz Arduino
            txDelay = 65;
            #endif
        }
    }
    write_register(RF_SETUP, setup);
    10a2:	0022      	movs	r2, r4
            txDelay = 190;
    10a4:	622b      	str	r3, [r5, #32]
    write_register(RF_SETUP, setup);
    10a6:	0028      	movs	r0, r5
    10a8:	2106      	movs	r1, #6
    10aa:	f7ff fdca 	bl	c42 <_ZN4RF2414write_registerEhh>

    // Verify our result
    if (read_register(RF_SETUP) == setup) {
    10ae:	0028      	movs	r0, r5
    10b0:	2106      	movs	r1, #6
    10b2:	f7ff fd95 	bl	be0 <_ZN4RF2413read_registerEh>
    10b6:	1b00      	subs	r0, r0, r4
    10b8:	4244      	negs	r4, r0
    10ba:	4160      	adcs	r0, r4
        result = true;
    }
    return result;
    10bc:	b2c0      	uxtb	r0, r0
}
    10be:	bd70      	pop	{r4, r5, r6, pc}
    txDelay = 250;
    10c0:	23fa      	movs	r3, #250	; 0xfa
        if (speed == RF24_2MBPS) {
    10c2:	2e01      	cmp	r6, #1
    10c4:	d1ed      	bne.n	10a2 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1c>
            setup |= _BV(RF_DR_HIGH);
    10c6:	2308      	movs	r3, #8
    10c8:	431c      	orrs	r4, r3
            txDelay = 190;
    10ca:	33b6      	adds	r3, #182	; 0xb6
    10cc:	e7e9      	b.n	10a2 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1c>
    10ce:	Address 0x000010ce is out of bounds.


000010d0 <_ZN4RF245beginEv>:
{
    10d0:	b570      	push	{r4, r5, r6, lr}
    10d2:	0004      	movs	r4, r0
        return port == b.port && pin == b.pin;
    10d4:	6840      	ldr	r0, [r0, #4]
    10d6:	68e3      	ldr	r3, [r4, #12]
    10d8:	68a2      	ldr	r2, [r4, #8]
    10da:	4298      	cmp	r0, r3
    10dc:	d102      	bne.n	10e4 <_ZN4RF245beginEv+0x14>
    10de:	6923      	ldr	r3, [r4, #16]
    10e0:	4293      	cmp	r3, r2
    10e2:	d00b      	beq.n	10fc <_ZN4RF245beginEv+0x2c>
            PORT->Group[port].DIRSET.reg = 1 << pin;
    10e4:	2101      	movs	r1, #1
    10e6:	4091      	lsls	r1, r2
    10e8:	4d39      	ldr	r5, [pc, #228]	; (11d0 <_ZN4RF245beginEv+0x100>)
    10ea:	01c3      	lsls	r3, r0, #7
    10ec:	195b      	adds	r3, r3, r5
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    10ee:	2502      	movs	r5, #2
            PORT->Group[port].DIRSET.reg = 1 << pin;
    10f0:	6099      	str	r1, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    10f2:	189b      	adds	r3, r3, r2
    10f4:	3340      	adds	r3, #64	; 0x40
    10f6:	7819      	ldrb	r1, [r3, #0]
    10f8:	43a9      	bics	r1, r5
    10fa:	7019      	strb	r1, [r3, #0]
    if (ce_pin != csn_pin)
    10fc:	68e3      	ldr	r3, [r4, #12]
    10fe:	6921      	ldr	r1, [r4, #16]
        return port == b.port && pin == b.pin;
    1100:	4283      	cmp	r3, r0
    1102:	d101      	bne.n	1108 <_ZN4RF245beginEv+0x38>
    1104:	428a      	cmp	r2, r1
    1106:	d00b      	beq.n	1120 <_ZN4RF245beginEv+0x50>
            PORT->Group[port].DIRSET.reg = 1 << pin;
    1108:	2201      	movs	r2, #1
    110a:	408a      	lsls	r2, r1
    110c:	4830      	ldr	r0, [pc, #192]	; (11d0 <_ZN4RF245beginEv+0x100>)
    110e:	01db      	lsls	r3, r3, #7
    1110:	181b      	adds	r3, r3, r0
    1112:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    1114:	185b      	adds	r3, r3, r1
    1116:	2102      	movs	r1, #2
    1118:	3340      	adds	r3, #64	; 0x40
    111a:	781a      	ldrb	r2, [r3, #0]
    111c:	438a      	bics	r2, r1
    111e:	701a      	strb	r2, [r3, #0]
    ce(LOW);
    1120:	2100      	movs	r1, #0
    1122:	0020      	movs	r0, r4
    1124:	f7ff fd3a 	bl	b9c <_ZN4RF242ceEb>
    csn(HIGH);
    1128:	2101      	movs	r1, #1
    112a:	0020      	movs	r0, r4
    112c:	f7ff fd20 	bl	b70 <_ZN4RF243csnEb>
    delay_usec(5000);
    1130:	4828      	ldr	r0, [pc, #160]	; (11d4 <_ZN4RF245beginEv+0x104>)
    1132:	f002 fa19 	bl	3568 <__delay_usec_veneer>
    write_register(NRF_CONFIG, 0x0C);
    1136:	220c      	movs	r2, #12
    1138:	2100      	movs	r1, #0
    113a:	0020      	movs	r0, r4
    113c:	f7ff fd81 	bl	c42 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
    1140:	2104      	movs	r1, #4
    1142:	225f      	movs	r2, #95	; 0x5f
    1144:	0020      	movs	r0, r4
    1146:	f7ff fd7c 	bl	c42 <_ZN4RF2414write_registerEhh>
    if (setDataRate(RF24_250KBPS)) {
    114a:	2102      	movs	r1, #2
    114c:	0020      	movs	r0, r4
    114e:	f7ff ff9a 	bl	1086 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    1152:	2800      	cmp	r0, #0
    1154:	d001      	beq.n	115a <_ZN4RF245beginEv+0x8a>
        p_variant = true;
    1156:	2301      	movs	r3, #1
    1158:	75a3      	strb	r3, [r4, #22]
    setup = read_register(RF_SETUP);
    115a:	2106      	movs	r1, #6
    115c:	0020      	movs	r0, r4
    115e:	f7ff fd3f 	bl	be0 <_ZN4RF2413read_registerEh>
    dynamic_payloads_enabled = false;
    1162:	2500      	movs	r5, #0
    setDataRate(RF24_1MBPS);
    1164:	2100      	movs	r1, #0
    setup = read_register(RF_SETUP);
    1166:	0006      	movs	r6, r0
    setDataRate(RF24_1MBPS);
    1168:	0020      	movs	r0, r4
    116a:	f7ff ff8c 	bl	1086 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    toggle_features();
    116e:	0020      	movs	r0, r4
    1170:	f7ff ff5c 	bl	102c <_ZN4RF2415toggle_featuresEv>
    write_register(FEATURE, 0);
    1174:	2200      	movs	r2, #0
    1176:	211d      	movs	r1, #29
    1178:	0020      	movs	r0, r4
    117a:	f7ff fd62 	bl	c42 <_ZN4RF2414write_registerEhh>
    write_register(DYNPD, 0);
    117e:	2200      	movs	r2, #0
    1180:	211c      	movs	r1, #28
    1182:	0020      	movs	r0, r4
    1184:	f7ff fd5d 	bl	c42 <_ZN4RF2414write_registerEhh>
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
    1188:	2270      	movs	r2, #112	; 0x70
    dynamic_payloads_enabled = false;
    118a:	7625      	strb	r5, [r4, #24]
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
    118c:	2107      	movs	r1, #7
    118e:	0020      	movs	r0, r4
    1190:	f7ff fd57 	bl	c42 <_ZN4RF2414write_registerEhh>
    setChannel(76);
    1194:	214c      	movs	r1, #76	; 0x4c
    1196:	0020      	movs	r0, r4
    1198:	f7ff fe03 	bl	da2 <_ZN4RF2410setChannelEh>
    flush_rx();
    119c:	0020      	movs	r0, r4
    119e:	f7ff fdd5 	bl	d4c <_ZN4RF248flush_rxEv>
    flush_tx();
    11a2:	0020      	movs	r0, r4
    11a4:	f7ff fdd7 	bl	d56 <_ZN4RF248flush_txEv>
    powerUp(); //Power up by default when begin() is called
    11a8:	0020      	movs	r0, r4
    11aa:	f7ff fe33 	bl	e14 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
    11ae:	0029      	movs	r1, r5
    11b0:	0020      	movs	r0, r4
    11b2:	f7ff fd15 	bl	be0 <_ZN4RF2413read_registerEh>
    11b6:	22fe      	movs	r2, #254	; 0xfe
    11b8:	0029      	movs	r1, r5
    11ba:	4002      	ands	r2, r0
    11bc:	0020      	movs	r0, r4
    11be:	f7ff fd40 	bl	c42 <_ZN4RF2414write_registerEhh>
    return (setup != 0 && setup != 0xff);
    11c2:	23fd      	movs	r3, #253	; 0xfd
    11c4:	3e01      	subs	r6, #1
    11c6:	b2f6      	uxtb	r6, r6
    11c8:	42b3      	cmp	r3, r6
    11ca:	416d      	adcs	r5, r5
    11cc:	b2e8      	uxtb	r0, r5
}
    11ce:	bd70      	pop	{r4, r5, r6, pc}
    11d0:	41004400 	.word	0x41004400
    11d4:	00001388 	.word	0x00001388

000011d8 <_ZN4RF2410setRetriesEhh>:
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
    11d8:	230f      	movs	r3, #15
{
    11da:	b510      	push	{r4, lr}
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
    11dc:	0109      	lsls	r1, r1, #4
    11de:	401a      	ands	r2, r3
    11e0:	430a      	orrs	r2, r1
    11e2:	b2d2      	uxtb	r2, r2
    11e4:	2104      	movs	r1, #4
    11e6:	f7ff fd2c 	bl	c42 <_ZN4RF2414write_registerEhh>
}
    11ea:	bd10      	pop	{r4, pc}

000011ec <_ZN9SensornetD1Ev>:
	char name[8]; // 8 bytes
	uint8_t type; // 1 byte
	uint8_t data[22]; // total 32 bytes (max nrf24l01 packet size)
};

class Sensornet {
    11ec:	b510      	push	{r4, lr}
    11ee:	0004      	movs	r4, r0
        if(m_data) free(m_data);
    11f0:	6b40      	ldr	r0, [r0, #52]	; 0x34
    11f2:	2800      	cmp	r0, #0
    11f4:	d001      	beq.n	11fa <_ZN9SensornetD1Ev+0xe>
    11f6:	f001 f887 	bl	2308 <free>
    11fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    11fc:	2800      	cmp	r0, #0
    11fe:	d001      	beq.n	1204 <_ZN9SensornetD1Ev+0x18>
    1200:	f001 f882 	bl	2308 <free>
    1204:	0020      	movs	r0, r4
    1206:	bd10      	pop	{r4, pc}

00001208 <_ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_>:
            delay_usec(200000);
        }
    }

    gsm.AddSMSFunc({ "info", cmd_info, GSM::LEVEL_USER });
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, GSM::LEVEL_USER });
    1208:	b510      	push	{r4, lr}
    120a:	0013      	movs	r3, r2
    120c:	000a      	movs	r2, r1
    120e:	0001      	movs	r1, r0
    1210:	4801      	ldr	r0, [pc, #4]	; (1218 <_ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_+0x10>)
    1212:	f000 fea3 	bl	1f5c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_>
    1216:	bd10      	pop	{r4, pc}
    1218:	20000280 	.word	0x20000280

0000121c <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_>:
    gsm.AddSMSFunc({ "clear", [](GSM* gsm, const char* sender, const char* args) { net.m_nodes.clear(); }, GSM::LEVEL_USER });
    121c:	b510      	push	{r4, lr}
    size_t size() {
        return m_size;
    }

    void clear() {
        if(m_data && m_size) free(m_data);
    121e:	4c06      	ldr	r4, [pc, #24]	; (1238 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x1c>)
    1220:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1222:	2800      	cmp	r0, #0
    1224:	d004      	beq.n	1230 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x14>
    1226:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1228:	2b00      	cmp	r3, #0
    122a:	d001      	beq.n	1230 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x14>
    122c:	f001 f86c 	bl	2308 <free>
        m_data = NULL;
    1230:	2300      	movs	r3, #0
    1232:	6363      	str	r3, [r4, #52]	; 0x34
        m_size = 0;
    1234:	6323      	str	r3, [r4, #48]	; 0x30
    1236:	bd10      	pop	{r4, pc}
    1238:	20000280 	.word	0x20000280

0000123c <_ZNK3Str18is_using_local_bufEv>:
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    123c:	0003      	movs	r3, r0
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
    123e:	0002      	movs	r2, r0
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1240:	6819      	ldr	r1, [r3, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
    1242:	3208      	adds	r2, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1244:	2000      	movs	r0, #0
    1246:	4291      	cmp	r1, r2
    1248:	d105      	bne.n	1256 <_ZNK3Str18is_using_local_bufEv+0x1a>
    124a:	88d8      	ldrh	r0, [r3, #6]
    124c:	4b02      	ldr	r3, [pc, #8]	; (1258 <_ZNK3Str18is_using_local_bufEv+0x1c>)
    124e:	4018      	ands	r0, r3
    1250:	1e43      	subs	r3, r0, #1
    1252:	4198      	sbcs	r0, r3
    1254:	b2c0      	uxtb	r0, r0
    1256:	4770      	bx	lr
    1258:	00007fe0 	.word	0x00007fe0

0000125c <_ZN3Str7reserveEi>:
    }
}

// Reserve memory, preserving the current of the buffer
void    Str::reserve(int new_capacity)
{
    125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (new_capacity <= Capacity)
    125e:	6843      	ldr	r3, [r0, #4]
{
    1260:	0005      	movs	r5, r0
    if (new_capacity <= Capacity)
    1262:	02db      	lsls	r3, r3, #11
{
    1264:	000f      	movs	r7, r1
    if (new_capacity <= Capacity)
    1266:	0adb      	lsrs	r3, r3, #11
    1268:	428b      	cmp	r3, r1
    126a:	da25      	bge.n	12b8 <_ZN3Str7reserveEi+0x5c>
        return;

    char* new_data;
    if (new_capacity < LocalBufSize)
    126c:	88c4      	ldrh	r4, [r0, #6]
    126e:	0464      	lsls	r4, r4, #17
    1270:	0da4      	lsrs	r4, r4, #22
    1272:	42a1      	cmp	r1, r4
    1274:	da21      	bge.n	12ba <_ZN3Str7reserveEi+0x5e>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
    1276:	0006      	movs	r6, r0
    1278:	3608      	adds	r6, #8
        // Disowned or LocalBuf -> Heap
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    }

    // string in Data might be longer than new_capacity if it wasn't owned, don't copy too much
    strncpy(new_data, Data, new_capacity - 1);
    127a:	1e62      	subs	r2, r4, #1
    127c:	0030      	movs	r0, r6
    127e:	6829      	ldr	r1, [r5, #0]
    1280:	f001 f9b6 	bl	25f0 <strncpy>
    new_data[new_capacity - 1] = 0;
    1284:	2200      	movs	r2, #0
    1286:	1933      	adds	r3, r6, r4
    1288:	3b01      	subs	r3, #1
    128a:	701a      	strb	r2, [r3, #0]

    if (Owned && !is_using_local_buf())
    128c:	79eb      	ldrb	r3, [r5, #7]
    128e:	2b7f      	cmp	r3, #127	; 0x7f
    1290:	d907      	bls.n	12a2 <_ZN3Str7reserveEi+0x46>
    1292:	0028      	movs	r0, r5
    1294:	f7ff ffd2 	bl	123c <_ZNK3Str18is_using_local_bufEv>
    1298:	2800      	cmp	r0, #0
    129a:	d102      	bne.n	12a2 <_ZN3Str7reserveEi+0x46>
        STR_MEMFREE(Data);
    129c:	6828      	ldr	r0, [r5, #0]
    129e:	f001 f833 	bl	2308 <free>

    Data = new_data;
    Capacity = new_capacity;
    12a2:	2380      	movs	r3, #128	; 0x80
    12a4:	02e4      	lsls	r4, r4, #11
    12a6:	061b      	lsls	r3, r3, #24
    12a8:	0ae4      	lsrs	r4, r4, #11
    12aa:	686a      	ldr	r2, [r5, #4]
    12ac:	431c      	orrs	r4, r3
    12ae:	4b06      	ldr	r3, [pc, #24]	; (12c8 <_ZN3Str7reserveEi+0x6c>)
    Data = new_data;
    12b0:	602e      	str	r6, [r5, #0]
    Capacity = new_capacity;
    12b2:	4013      	ands	r3, r2
    12b4:	431c      	orrs	r4, r3
    12b6:	606c      	str	r4, [r5, #4]
    Owned = 1;
}
    12b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    12ba:	0008      	movs	r0, r1
    12bc:	f001 f81a 	bl	22f4 <malloc>
    12c0:	003c      	movs	r4, r7
    12c2:	0006      	movs	r6, r0
    12c4:	e7d9      	b.n	127a <_ZN3Str7reserveEi+0x1e>
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	7fe00000 	.word	0x7fe00000

000012cc <_ZN3Str15reserve_discardEi>:

// Reserve memory, discarding the current of the buffer (if we expect to be fully rewritten)
void    Str::reserve_discard(int new_capacity)
{
    if (new_capacity <= Capacity)
    12cc:	6843      	ldr	r3, [r0, #4]
{
    12ce:	b570      	push	{r4, r5, r6, lr}
    if (new_capacity <= Capacity)
    12d0:	02db      	lsls	r3, r3, #11
{
    12d2:	0004      	movs	r4, r0
    12d4:	000d      	movs	r5, r1
    if (new_capacity <= Capacity)
    12d6:	0adb      	lsrs	r3, r3, #11
    12d8:	428b      	cmp	r3, r1
    12da:	da1b      	bge.n	1314 <_ZN3Str15reserve_discardEi+0x48>
        return;

    if (Owned && !is_using_local_buf())
    12dc:	79c3      	ldrb	r3, [r0, #7]
    12de:	2b7f      	cmp	r3, #127	; 0x7f
    12e0:	d906      	bls.n	12f0 <_ZN3Str15reserve_discardEi+0x24>
    12e2:	f7ff ffab 	bl	123c <_ZNK3Str18is_using_local_bufEv>
    12e6:	2800      	cmp	r0, #0
    12e8:	d102      	bne.n	12f0 <_ZN3Str15reserve_discardEi+0x24>
        STR_MEMFREE(Data);
    12ea:	6820      	ldr	r0, [r4, #0]
    12ec:	f001 f80c 	bl	2308 <free>

    if (new_capacity < LocalBufSize)
    12f0:	88e3      	ldrh	r3, [r4, #6]
    12f2:	045b      	lsls	r3, r3, #17
    12f4:	0d9a      	lsrs	r2, r3, #22
    12f6:	4295      	cmp	r5, r2
    12f8:	da0d      	bge.n	1316 <_ZN3Str15reserve_discardEi+0x4a>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
    12fa:	0023      	movs	r3, r4
    12fc:	3308      	adds	r3, #8
    {
        // Disowned -> LocalBuf
        Data = local_buf();
    12fe:	6023      	str	r3, [r4, #0]
        Capacity = LocalBufSize;
    1300:	6863      	ldr	r3, [r4, #4]
    1302:	0d5b      	lsrs	r3, r3, #21
    1304:	055b      	lsls	r3, r3, #21
    1306:	4313      	orrs	r3, r2
    1308:	6063      	str	r3, [r4, #4]
    {
        // Disowned or LocalBuf -> Heap
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
        Capacity = new_capacity;
    }
    Owned = 1;
    130a:	2380      	movs	r3, #128	; 0x80
    130c:	79e2      	ldrb	r2, [r4, #7]
    130e:	425b      	negs	r3, r3
    1310:	4313      	orrs	r3, r2
    1312:	71e3      	strb	r3, [r4, #7]
}
    1314:	bd70      	pop	{r4, r5, r6, pc}
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    1316:	0028      	movs	r0, r5
    1318:	f000 ffec 	bl	22f4 <malloc>
        Capacity = new_capacity;
    131c:	6863      	ldr	r3, [r4, #4]
    131e:	02ed      	lsls	r5, r5, #11
    1320:	0d59      	lsrs	r1, r3, #21
    1322:	0aed      	lsrs	r5, r5, #11
    1324:	0549      	lsls	r1, r1, #21
    1326:	430d      	orrs	r5, r1
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    1328:	6020      	str	r0, [r4, #0]
        Capacity = new_capacity;
    132a:	6065      	str	r5, [r4, #4]
    132c:	e7ed      	b.n	130a <_ZN3Str15reserve_discardEi+0x3e>

0000132e <_ZN3Str5setfvEPKcSt9__va_list>:
    Capacity = new_capacity;
}

// FIXME: merge setfv() and appendfv()?
int     Str::setfv(const char* fmt, va_list args)
{
    132e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1330:	0013      	movs	r3, r2
    // Needed for portability on platforms where va_list are passed by reference and modified by functions
    va_list args2;
    va_copy(args2, args);
    1332:	9201      	str	r2, [sp, #4]
    if (Capacity < len + 1)
        reserve_discard(len + 1);
    len = vsnprintf(Data, len + 1, fmt, args2);
#else
    // First try
    int len = vsnprintf(Owned ? Data : NULL, Owned ? Capacity : 0, fmt, args);
    1334:	79c2      	ldrb	r2, [r0, #7]
{
    1336:	0005      	movs	r5, r0
    1338:	000e      	movs	r6, r1
    int len = vsnprintf(Owned ? Data : NULL, Owned ? Capacity : 0, fmt, args);
    133a:	2a7f      	cmp	r2, #127	; 0x7f
    133c:	d917      	bls.n	136e <_ZN3Str5setfvEPKcSt9__va_list+0x40>
    133e:	686a      	ldr	r2, [r5, #4]
    1340:	6800      	ldr	r0, [r0, #0]
    1342:	02d1      	lsls	r1, r2, #11
    1344:	0ac9      	lsrs	r1, r1, #11
    1346:	0032      	movs	r2, r6
    1348:	f001 fa8e 	bl	2868 <vsniprintf>
    STR_ASSERT(len >= 0);

    if (Capacity < len + 1)
    134c:	686b      	ldr	r3, [r5, #4]
    134e:	02db      	lsls	r3, r3, #11
    1350:	0adb      	lsrs	r3, r3, #11
    1352:	4283      	cmp	r3, r0
    1354:	dc0a      	bgt.n	136c <_ZN3Str5setfvEPKcSt9__va_list+0x3e>
    {
        reserve_discard(len + 1);
    1356:	1c44      	adds	r4, r0, #1
    1358:	0021      	movs	r1, r4
    135a:	0028      	movs	r0, r5
    135c:	f7ff ffb6 	bl	12cc <_ZN3Str15reserve_discardEi>
        len = vsnprintf(Data, len + 1, fmt, args2);
    1360:	0032      	movs	r2, r6
    1362:	0021      	movs	r1, r4
    1364:	9b01      	ldr	r3, [sp, #4]
    1366:	6828      	ldr	r0, [r5, #0]
    1368:	f001 fa7e 	bl	2868 <vsniprintf>
    }
#endif

    STR_ASSERT(Owned);
    return len;
}
    136c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    int len = vsnprintf(Owned ? Data : NULL, Owned ? Capacity : 0, fmt, args);
    136e:	2000      	movs	r0, #0
    1370:	0001      	movs	r1, r0
    1372:	e7e8      	b.n	1346 <_ZN3Str5setfvEPKcSt9__va_list+0x18>

00001374 <_ZN3Str4setfEPKcz>:

int     Str::setf(const char* fmt, ...)
{
    1374:	b40e      	push	{r1, r2, r3}
    1376:	b503      	push	{r0, r1, lr}
    1378:	aa03      	add	r2, sp, #12
    137a:	ca02      	ldmia	r2!, {r1}
    va_list args;
    va_start(args, fmt);
    137c:	9201      	str	r2, [sp, #4]
    int len = setfv(fmt, args);
    137e:	f7ff ffd6 	bl	132e <_ZN3Str5setfvEPKcSt9__va_list>
    va_end(args);
    return len;
}
    1382:	b002      	add	sp, #8
    1384:	bc08      	pop	{r3}
    1386:	b003      	add	sp, #12
    1388:	4718      	bx	r3

0000138a <_ZN3Str13appendfv_fromEiPKcSt9__va_list>:
    return add_len;
}

// FIXME: merge setfv() and appendfv()?
int     Str::appendfv_from(int idx, const char* fmt, va_list args)
{
    138a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    138c:	0017      	movs	r7, r2
    if (Capacity < idx + add_len + 1)
        reserve(idx + add_len + 1);
    add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
#else
    // First try
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    138e:	79c2      	ldrb	r2, [r0, #7]
{
    1390:	0005      	movs	r5, r0
    1392:	000e      	movs	r6, r1
    va_copy(args2, args);
    1394:	9301      	str	r3, [sp, #4]
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    1396:	2a7f      	cmp	r2, #127	; 0x7f
    1398:	d91d      	bls.n	13d6 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x4c>
    139a:	6802      	ldr	r2, [r0, #0]
    139c:	1850      	adds	r0, r2, r1
    139e:	686a      	ldr	r2, [r5, #4]
    13a0:	02d1      	lsls	r1, r2, #11
    13a2:	0ac9      	lsrs	r1, r1, #11
    13a4:	1b89      	subs	r1, r1, r6
    13a6:	003a      	movs	r2, r7
    13a8:	f001 fa5e 	bl	2868 <vsniprintf>
    STR_ASSERT(add_len >= 0);

    if (Capacity < idx + add_len + 1)
    13ac:	686b      	ldr	r3, [r5, #4]
    13ae:	1831      	adds	r1, r6, r0
    13b0:	02db      	lsls	r3, r3, #11
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    13b2:	0004      	movs	r4, r0
    if (Capacity < idx + add_len + 1)
    13b4:	0adb      	lsrs	r3, r3, #11
    13b6:	4299      	cmp	r1, r3
    13b8:	db0b      	blt.n	13d2 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x48>
    {
        reserve(idx + add_len + 1);
    13ba:	0028      	movs	r0, r5
    13bc:	3101      	adds	r1, #1
    13be:	f7ff ff4d 	bl	125c <_ZN3Str7reserveEi>
        add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
    13c2:	6828      	ldr	r0, [r5, #0]
    13c4:	1c61      	adds	r1, r4, #1
    13c6:	003a      	movs	r2, r7
    13c8:	9b01      	ldr	r3, [sp, #4]
    13ca:	1980      	adds	r0, r0, r6
    13cc:	f001 fa4c 	bl	2868 <vsniprintf>
    13d0:	0004      	movs	r4, r0
    }
#endif

    STR_ASSERT(Owned);
    return add_len;
}
    13d2:	0020      	movs	r0, r4
    13d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    13d6:	2000      	movs	r0, #0
    13d8:	0001      	movs	r1, r0
    13da:	e7e4      	b.n	13a6 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x1c>

000013dc <_ZN3Str8appendfvEPKcSt9__va_list>:
    int cur_len = length();
    return append_from(cur_len, s, s_end);
}

int     Str::appendfv(const char* fmt, va_list args)
{
    13dc:	b570      	push	{r4, r5, r6, lr}
    13de:	0004      	movs	r4, r0
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
    13e0:	6800      	ldr	r0, [r0, #0]
{
    13e2:	000d      	movs	r5, r1
    13e4:	0016      	movs	r6, r2
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
    13e6:	f001 f8eb 	bl	25c0 <strlen>
    int cur_len = length();
    return appendfv_from(cur_len, fmt, args);
    13ea:	0033      	movs	r3, r6
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
    13ec:	0001      	movs	r1, r0
    return appendfv_from(cur_len, fmt, args);
    13ee:	002a      	movs	r2, r5
    13f0:	0020      	movs	r0, r4
    13f2:	f7ff ffca 	bl	138a <_ZN3Str13appendfv_fromEiPKcSt9__va_list>
}
    13f6:	bd70      	pop	{r4, r5, r6, pc}

000013f8 <_ZN3Str7appendfEPKcz>:

int     Str::appendf(const char* fmt, ...)
{
    13f8:	b40e      	push	{r1, r2, r3}
    13fa:	b503      	push	{r0, r1, lr}
    13fc:	aa03      	add	r2, sp, #12
    13fe:	ca02      	ldmia	r2!, {r1}
    va_list args;
    va_start(args, fmt);
    1400:	9201      	str	r2, [sp, #4]
    int len = appendfv(fmt, args);
    1402:	f7ff ffeb 	bl	13dc <_ZN3Str8appendfvEPKcSt9__va_list>
    va_end(args);
    return len;
}
    1406:	b002      	add	sp, #8
    1408:	bc08      	pop	{r3}
    140a:	b003      	add	sp, #12
    140c:	4718      	bx	r3
    140e:	Address 0x0000140e is out of bounds.


00001410 <_ZL8cmd_infoP3GSMPKcS2_>:
static void cmd_info(GSM* gsm, const char* sender, const char* args) {
    1410:	b5f0      	push	{r4, r5, r6, r7, lr}
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
    1412:	4b2d      	ldr	r3, [pc, #180]	; (14c8 <_ZL8cmd_infoP3GSMPKcS2_+0xb8>)
    1414:	b089      	sub	sp, #36	; 0x24
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	0005      	movs	r5, r0
    141a:	9306      	str	r3, [sp, #24]
    Capacity = 0;
    141c:	2300      	movs	r3, #0
        reserve_discard(buf_len);
    141e:	a806      	add	r0, sp, #24
    1420:	000e      	movs	r6, r1
    1422:	2107      	movs	r1, #7
    Capacity = 0;
    1424:	9307      	str	r3, [sp, #28]
        reserve_discard(buf_len);
    1426:	f7ff ff51 	bl	12cc <_ZN3Str15reserve_discardEi>
    memcpy(Data, src, buf_len);
    142a:	2207      	movs	r2, #7
    142c:	4927      	ldr	r1, [pc, #156]	; (14cc <_ZL8cmd_infoP3GSMPKcS2_+0xbc>)
    142e:	9806      	ldr	r0, [sp, #24]
    1430:	f000 ff74 	bl	231c <memcpy>
    Owned = 1;
    1434:	ab04      	add	r3, sp, #16
    1436:	7bda      	ldrb	r2, [r3, #15]
    1438:	2380      	movs	r3, #128	; 0x80
    143a:	425b      	negs	r3, r3
    143c:	4313      	orrs	r3, r2
    143e:	aa04      	add	r2, sp, #16
    1440:	73d3      	strb	r3, [r2, #15]
        return m_data + m_size;
    1442:	2224      	movs	r2, #36	; 0x24
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    1444:	27fa      	movs	r7, #250	; 0xfa
    for(auto& node : net.m_nodes) {
    1446:	4b22      	ldr	r3, [pc, #136]	; (14d0 <_ZL8cmd_infoP3GSMPKcS2_+0xc0>)
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    1448:	00bf      	lsls	r7, r7, #2
    for(auto& node : net.m_nodes) {
    144a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    144e:	4353      	muls	r3, r2
    1450:	18e3      	adds	r3, r4, r3
    1452:	9305      	str	r3, [sp, #20]
    1454:	9b05      	ldr	r3, [sp, #20]
    1456:	42a3      	cmp	r3, r4
    1458:	d02c      	beq.n	14b4 <_ZL8cmd_infoP3GSMPKcS2_+0xa4>
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    145a:	2300      	movs	r3, #0
    145c:	56e3      	ldrsb	r3, [r4, r3]
    145e:	9303      	str	r3, [sp, #12]
    1460:	7a63      	ldrb	r3, [r4, #9]
    1462:	9304      	str	r3, [sp, #16]
            node.data.id, node.data.name, node.data.type, (millis() - node.last_seen) / 1000);
    1464:	f000 fa86 	bl	1974 <millis>
    1468:	6a23      	ldr	r3, [r4, #32]
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    146a:	0039      	movs	r1, r7
            node.data.id, node.data.name, node.data.type, (millis() - node.last_seen) / 1000);
    146c:	1ac0      	subs	r0, r0, r3
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    146e:	f000 fe4b 	bl	2108 <__udivsi3>
    1472:	9b04      	ldr	r3, [sp, #16]
    1474:	9001      	str	r0, [sp, #4]
    1476:	9300      	str	r3, [sp, #0]
    1478:	9a03      	ldr	r2, [sp, #12]
    147a:	1c63      	adds	r3, r4, #1
    147c:	4915      	ldr	r1, [pc, #84]	; (14d4 <_ZL8cmd_infoP3GSMPKcS2_+0xc4>)
    147e:	a806      	add	r0, sp, #24
    1480:	f7ff ffba 	bl	13f8 <_ZN3Str7appendfEPKcz>
        switch(node.data.type) {
    1484:	7a63      	ldrb	r3, [r4, #9]
    1486:	2b02      	cmp	r3, #2
    1488:	d009      	beq.n	149e <_ZL8cmd_infoP3GSMPKcS2_+0x8e>
    148a:	2b03      	cmp	r3, #3
    148c:	d00f      	beq.n	14ae <_ZL8cmd_infoP3GSMPKcS2_+0x9e>
    148e:	2b01      	cmp	r3, #1
    1490:	d10b      	bne.n	14aa <_ZL8cmd_infoP3GSMPKcS2_+0x9a>
                str.appendf(" Soil moisture sensor:\n  Moisture: %d\n", ((Sensors::Soil*)node.data.data)->moisture);
    1492:	8962      	ldrh	r2, [r4, #10]
    1494:	4910      	ldr	r1, [pc, #64]	; (14d8 <_ZL8cmd_infoP3GSMPKcS2_+0xc8>)
                str.appendf(" Temperature sensor:\n  Temperature: %d\n",
    1496:	a806      	add	r0, sp, #24
    1498:	f7ff ffae 	bl	13f8 <_ZN3Str7appendfEPKcz>
                break;
    149c:	e005      	b.n	14aa <_ZL8cmd_infoP3GSMPKcS2_+0x9a>
                str.appendf(" Temperature + humidity sensor:\n  Temperature: %d\n  Humidity: %d\n",
    149e:	89a3      	ldrh	r3, [r4, #12]
    14a0:	8962      	ldrh	r2, [r4, #10]
    14a2:	490e      	ldr	r1, [pc, #56]	; (14dc <_ZL8cmd_infoP3GSMPKcS2_+0xcc>)
    14a4:	a806      	add	r0, sp, #24
    14a6:	f7ff ffa7 	bl	13f8 <_ZN3Str7appendfEPKcz>
    for(auto& node : net.m_nodes) {
    14aa:	3424      	adds	r4, #36	; 0x24
    14ac:	e7d2      	b.n	1454 <_ZL8cmd_infoP3GSMPKcS2_+0x44>
                str.appendf(" Temperature sensor:\n  Temperature: %d\n",
    14ae:	8962      	ldrh	r2, [r4, #10]
    14b0:	490b      	ldr	r1, [pc, #44]	; (14e0 <_ZL8cmd_infoP3GSMPKcS2_+0xd0>)
    14b2:	e7f0      	b.n	1496 <_ZL8cmd_infoP3GSMPKcS2_+0x86>
    gsm->SendSMS(sender, str.c_str());
    14b4:	0031      	movs	r1, r6
    14b6:	9a06      	ldr	r2, [sp, #24]
    14b8:	0028      	movs	r0, r5
    14ba:	f7fe fed5 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    Str str = "List:\n";
    14be:	a806      	add	r0, sp, #24
    14c0:	f7fe fe1e 	bl	100 <_ZN3StrD1Ev>
}
    14c4:	b009      	add	sp, #36	; 0x24
    14c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14c8:	200001e4 	.word	0x200001e4
    14cc:	000030c7 	.word	0x000030c7
    14d0:	20000280 	.word	0x20000280
    14d4:	0000328d 	.word	0x0000328d
    14d8:	000032c7 	.word	0x000032c7
    14dc:	000032ee 	.word	0x000032ee
    14e0:	00003330 	.word	0x00003330

000014e4 <main>:
int main() {
    14e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    g_uart1.init({{GPIO_PORTA, 24}, {GPIO_PORTA, 25}, UART_SER1_TXPO_PA24, UART_SER1_RXPO_PA25}, CALC_BAUD(115200));
    14e6:	4c38      	ldr	r4, [pc, #224]	; (15c8 <main+0xe4>)
int main() {
    14e8:	b093      	sub	sp, #76	; 0x4c
    g_uart1.init({{GPIO_PORTA, 24}, {GPIO_PORTA, 25}, UART_SER1_TXPO_PA24, UART_SER1_RXPO_PA25}, CALC_BAUD(115200));
    14ea:	ad0a      	add	r5, sp, #40	; 0x28
    14ec:	002b      	movs	r3, r5
    14ee:	0022      	movs	r2, r4
    14f0:	ca43      	ldmia	r2!, {r0, r1, r6}
    14f2:	c343      	stmia	r3!, {r0, r1, r6}
    14f4:	ca03      	ldmia	r2!, {r0, r1}
    14f6:	c303      	stmia	r3!, {r0, r1}
    14f8:	0029      	movs	r1, r5
    14fa:	4834      	ldr	r0, [pc, #208]	; (15cc <main+0xe8>)
    14fc:	4a34      	ldr	r2, [pc, #208]	; (15d0 <main+0xec>)
    14fe:	f000 fa53 	bl	19a8 <_ZN6uart_t4initERK13uart_pincfg_tt>
    g_spi0.Init({
    1502:	0023      	movs	r3, r4
    1504:	002a      	movs	r2, r5
    1506:	3314      	adds	r3, #20
    1508:	cb43      	ldmia	r3!, {r0, r1, r6}
    150a:	c243      	stmia	r2!, {r0, r1, r6}
    150c:	cb43      	ldmia	r3!, {r0, r1, r6}
    150e:	c243      	stmia	r2!, {r0, r1, r6}
    1510:	cb03      	ldmia	r3!, {r0, r1}
    1512:	c203      	stmia	r2!, {r0, r1}
    1514:	2314      	movs	r3, #20
    1516:	466a      	mov	r2, sp
    1518:	9305      	str	r3, [sp, #20]
    151a:	ab0d      	add	r3, sp, #52	; 0x34
    151c:	cb43      	ldmia	r3!, {r0, r1, r6}
    151e:	c243      	stmia	r2!, {r0, r1, r6}
    1520:	cb03      	ldmia	r3!, {r0, r1}
    1522:	c203      	stmia	r2!, {r0, r1}
    1524:	482b      	ldr	r0, [pc, #172]	; (15d4 <main+0xf0>)
    1526:	990a      	ldr	r1, [sp, #40]	; 0x28
    1528:	686a      	ldr	r2, [r5, #4]
    152a:	68ab      	ldr	r3, [r5, #8]
    152c:	f000 f8c0 	bl	16b0 <_ZN5spi_t4InitE12spi_pincfg_tt>
            PORT->Group[port].DIRSET.reg = 1 << pin;
    1530:	2010      	movs	r0, #16
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    1532:	2102      	movs	r1, #2
            PORT->Group[port].DIRSET.reg = 1 << pin;
    1534:	4e28      	ldr	r6, [pc, #160]	; (15d8 <main+0xf4>)
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    1536:	4a29      	ldr	r2, [pc, #164]	; (15dc <main+0xf8>)
            PORT->Group[port].DIRSET.reg = 1 << pin;
    1538:	60b0      	str	r0, [r6, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    153a:	7813      	ldrb	r3, [r2, #0]
    if(!net.begin()) {
    153c:	4f28      	ldr	r7, [pc, #160]	; (15e0 <main+0xfc>)
    153e:	438b      	bics	r3, r1
    1540:	7013      	strb	r3, [r2, #0]
            PORT->Group[port].OUTCLR.reg = 1 << pin;
    1542:	6170      	str	r0, [r6, #20]
    1544:	0038      	movs	r0, r7
    1546:	f000 fbf9 	bl	1d3c <_ZN9Sensornet5beginEv>
    154a:	2800      	cmp	r0, #0
    154c:	d105      	bne.n	155a <main+0x76>
    }
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }

    inline void toggle(const int port, const int pin) {
        PORT->Group[port].OUTTGL.reg = 1 << pin;
    154e:	2410      	movs	r4, #16
            delay_usec(800000);
    1550:	4824      	ldr	r0, [pc, #144]	; (15e4 <main+0x100>)
    1552:	61f4      	str	r4, [r6, #28]
    1554:	f002 f808 	bl	3568 <__delay_usec_veneer>
        while(1) {
    1558:	e7fa      	b.n	1550 <main+0x6c>
    if(!gsm.Init()) {
    155a:	4823      	ldr	r0, [pc, #140]	; (15e8 <main+0x104>)
    155c:	f7ff f882 	bl	664 <_ZN3GSM4InitEv>
    1560:	2800      	cmp	r0, #0
    1562:	d108      	bne.n	1576 <main+0x92>
    1564:	2410      	movs	r4, #16
            net.Poll();
    1566:	0038      	movs	r0, r7
    1568:	f000 fce3 	bl	1f32 <_ZN9Sensornet4PollEv>
            delay_usec(200000);
    156c:	481f      	ldr	r0, [pc, #124]	; (15ec <main+0x108>)
    156e:	61f4      	str	r4, [r6, #28]
    1570:	f001 fffa 	bl	3568 <__delay_usec_veneer>
        while(1) {
    1574:	e7f7      	b.n	1566 <main+0x82>
    gsm.AddSMSFunc({ "info", cmd_info, GSM::LEVEL_USER });
    1576:	ad07      	add	r5, sp, #28
    1578:	002b      	movs	r3, r5
    157a:	3434      	adds	r4, #52	; 0x34
    157c:	cc07      	ldmia	r4!, {r0, r1, r2}
    157e:	c307      	stmia	r3!, {r0, r1, r2}

    void ReadSMS(int index);
    void ProcessSMS(const char* text, const char* sender);
    bool SendSMS(const char* number, const char* text);

    void AddSMSFunc(const SMSFunc& func) { m_smsfuncs.push_back(func); }
    1580:	4c19      	ldr	r4, [pc, #100]	; (15e8 <main+0x104>)
    1582:	0029      	movs	r1, r5
    1584:	340c      	adds	r4, #12
    1586:	0020      	movs	r0, r4
    1588:	f7ff fa7a 	bl	a80 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, GSM::LEVEL_USER });
    158c:	4b18      	ldr	r3, [pc, #96]	; (15f0 <main+0x10c>)
    158e:	0020      	movs	r0, r4
    1590:	9307      	str	r3, [sp, #28]
    1592:	4b18      	ldr	r3, [pc, #96]	; (15f4 <main+0x110>)
    1594:	0029      	movs	r1, r5
    1596:	606b      	str	r3, [r5, #4]
    1598:	2361      	movs	r3, #97	; 0x61
    159a:	722b      	strb	r3, [r5, #8]
    159c:	f7ff fa70 	bl	a80 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    gsm.AddSMSFunc({ "clear", [](GSM* gsm, const char* sender, const char* args) { net.m_nodes.clear(); }, GSM::LEVEL_USER });
    15a0:	4b15      	ldr	r3, [pc, #84]	; (15f8 <main+0x114>)
    15a2:	0020      	movs	r0, r4
    15a4:	9307      	str	r3, [sp, #28]
    15a6:	4b15      	ldr	r3, [pc, #84]	; (15fc <main+0x118>)
    15a8:	0029      	movs	r1, r5
    15aa:	606b      	str	r3, [r5, #4]
    15ac:	2361      	movs	r3, #97	; 0x61
    15ae:	2410      	movs	r4, #16
    15b0:	722b      	strb	r3, [r5, #8]
    15b2:	f7ff fa65 	bl	a80 <_ZN6VectorI7SMSFuncE9push_backERKS0_>

    while(1) {
        gsm.Poll();
    15b6:	480c      	ldr	r0, [pc, #48]	; (15e8 <main+0x104>)
    15b8:	f7ff f942 	bl	840 <_ZN3GSM4PollEv>
        net.Poll();
    15bc:	0038      	movs	r0, r7
    15be:	f000 fcb8 	bl	1f32 <_ZN9Sensornet4PollEv>
    15c2:	61f4      	str	r4, [r6, #28]
    15c4:	e7f7      	b.n	15b6 <main+0xd2>
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	00002f60 	.word	0x00002f60
    15cc:	200004d4 	.word	0x200004d4
    15d0:	0000f62b 	.word	0x0000f62b
    15d4:	200002b8 	.word	0x200002b8
    15d8:	41004400 	.word	0x41004400
    15dc:	41004444 	.word	0x41004444
    15e0:	20000280 	.word	0x20000280
    15e4:	000c3500 	.word	0x000c3500
    15e8:	2000026c 	.word	0x2000026c
    15ec:	00030d40 	.word	0x00030d40
    15f0:	00003358 	.word	0x00003358
    15f4:	00001209 	.word	0x00001209
    15f8:	00003360 	.word	0x00003360
    15fc:	0000121d 	.word	0x0000121d

00001600 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE>:
        
        gpio::toggle(led);
        //auto start = millis();
        //while(millis() - start < 500);
    }
    1600:	b570      	push	{r4, r5, r6, lr}
);
    1602:	2400      	movs	r4, #0
    1604:	4e11      	ldr	r6, [pc, #68]	; (164c <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x4c>)
    1606:	b092      	sub	sp, #72	; 0x48
);
    1608:	0021      	movs	r1, r4
    160a:	4b11      	ldr	r3, [pc, #68]	; (1650 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x50>)
    160c:	2202      	movs	r2, #2
    160e:	0030      	movs	r0, r6
    1610:	f7ff fa52 	bl	ab8 <_ZN3GSMC1E6gpio_tP6uart_t>
static GSM gsm(
    1614:	4d0f      	ldr	r5, [pc, #60]	; (1654 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x54>)
    1616:	0030      	movs	r0, r6
    1618:	002a      	movs	r2, r5
    161a:	490f      	ldr	r1, [pc, #60]	; (1658 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x58>)
    161c:	f000 fd6c 	bl	20f8 <__aeabi_atexit>
static Sensornet net(RF24({ GPIO_PORTA, 14 }, { GPIO_PORTA, 15 }, g_spi0));
    1620:	4b0e      	ldr	r3, [pc, #56]	; (165c <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x5c>)
    1622:	0021      	movs	r1, r4
    1624:	9301      	str	r3, [sp, #4]
    1626:	230f      	movs	r3, #15
    1628:	220e      	movs	r2, #14
    162a:	9300      	str	r3, [sp, #0]
    162c:	a808      	add	r0, sp, #32
    162e:	0023      	movs	r3, r4
    1630:	f7ff fb9b 	bl	d6a <_ZN4RF24C1E6gpio_tS0_R5spi_t>
    1634:	4c0a      	ldr	r4, [pc, #40]	; (1660 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x60>)
    1636:	a908      	add	r1, sp, #32
    1638:	0020      	movs	r0, r4
    163a:	f000 fb6f 	bl	1d1c <_ZN9SensornetC1ERK4RF24>
    163e:	002a      	movs	r2, r5
    1640:	0020      	movs	r0, r4
    1642:	4908      	ldr	r1, [pc, #32]	; (1664 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x64>)
    1644:	f000 fd58 	bl	20f8 <__aeabi_atexit>
    1648:	b012      	add	sp, #72	; 0x48
    164a:	bd70      	pop	{r4, r5, r6, pc}
    164c:	2000026c 	.word	0x2000026c
    1650:	200004d4 	.word	0x200004d4
    1654:	200001ac 	.word	0x200001ac
    1658:	00000129 	.word	0x00000129
    165c:	200002b8 	.word	0x200002b8
    1660:	20000280 	.word	0x20000280
    1664:	000011ed 	.word	0x000011ed

00001668 <_ZN4gpio6pmuxenERK6gpio_th>:
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1668:	0003      	movs	r3, r0
    166a:	b530      	push	{r4, r5, lr}
    166c:	cb05      	ldmia	r3!, {r0, r2}
        if(pin & 1)
    166e:	250f      	movs	r5, #15
    1670:	0fd3      	lsrs	r3, r2, #31
    1672:	189b      	adds	r3, r3, r2
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1674:	4c0c      	ldr	r4, [pc, #48]	; (16a8 <_ZN4gpio6pmuxenERK6gpio_th+0x40>)
    1676:	105b      	asrs	r3, r3, #1
    1678:	01c0      	lsls	r0, r0, #7
    167a:	181b      	adds	r3, r3, r0
    167c:	4029      	ands	r1, r5
    167e:	191b      	adds	r3, r3, r4
        if(pin & 1)
    1680:	07d4      	lsls	r4, r2, #31
    1682:	d50c      	bpl.n	169e <_ZN4gpio6pmuxenERK6gpio_th+0x36>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1684:	781c      	ldrb	r4, [r3, #0]
    1686:	0109      	lsls	r1, r1, #4
    1688:	4025      	ands	r5, r4
    168a:	4329      	orrs	r1, r5
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    168c:	7019      	strb	r1, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    168e:	4b07      	ldr	r3, [pc, #28]	; (16ac <_ZN4gpio6pmuxenERK6gpio_th+0x44>)
    1690:	1812      	adds	r2, r2, r0
    1692:	18d2      	adds	r2, r2, r3
    1694:	2301      	movs	r3, #1
    1696:	7811      	ldrb	r1, [r2, #0]
    1698:	430b      	orrs	r3, r1
    169a:	7013      	strb	r3, [r2, #0]
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    169c:	bd30      	pop	{r4, r5, pc}
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    169e:	781c      	ldrb	r4, [r3, #0]
    16a0:	43ac      	bics	r4, r5
    16a2:	4321      	orrs	r1, r4
    16a4:	e7f2      	b.n	168c <_ZN4gpio6pmuxenERK6gpio_th+0x24>
    16a6:	46c0      	nop			; (mov r8, r8)
    16a8:	41004430 	.word	0x41004430
    16ac:	41004440 	.word	0x41004440

000016b0 <_ZN5spi_t4InitE12spi_pincfg_tt>:
#include "spi.h"

spi_t g_spi0(SERCOM0);
spi_t g_spi1(SERCOM1);

void spi_t::Init(spi_pincfg_t pincfg, uint16_t speed) {
    16b0:	b084      	sub	sp, #16
    16b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16b4:	0004      	movs	r4, r0
    16b6:	9107      	str	r1, [sp, #28]
    if(m_sercom == SERCOM1) {
    16b8:	6800      	ldr	r0, [r0, #0]
    16ba:	493b      	ldr	r1, [pc, #236]	; (17a8 <_ZN5spi_t4InitE12spi_pincfg_tt+0xf8>)
void spi_t::Init(spi_pincfg_t pincfg, uint16_t speed) {
    16bc:	9309      	str	r3, [sp, #36]	; 0x24
    16be:	ab0f      	add	r3, sp, #60	; 0x3c
    16c0:	ad07      	add	r5, sp, #28
    16c2:	881e      	ldrh	r6, [r3, #0]
    16c4:	606a      	str	r2, [r5, #4]
    16c6:	4b39      	ldr	r3, [pc, #228]	; (17ac <_ZN5spi_t4InitE12spi_pincfg_tt+0xfc>)
    16c8:	4a39      	ldr	r2, [pc, #228]	; (17b0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x100>)
    if(m_sercom == SERCOM1) {
    16ca:	4288      	cmp	r0, r1
    16cc:	d161      	bne.n	1792 <_ZN5spi_t4InitE12spi_pincfg_tt+0xe2>
        /*PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) |
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);*/
        PM->APBCMASK.bit.SERCOM1_ = 1;
    16ce:	2108      	movs	r1, #8
    16d0:	6a10      	ldr	r0, [r2, #32]
    16d2:	4301      	orrs	r1, r0
    16d4:	6211      	str	r1, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    16d6:	4a37      	ldr	r2, [pc, #220]	; (17b4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x104>)
    16d8:	805a      	strh	r2, [r3, #2]
        while(GCLK->STATUS.bit.SYNCBUSY);
    16da:	785a      	ldrb	r2, [r3, #1]
    16dc:	09d2      	lsrs	r2, r2, #7
    16de:	d1fc      	bne.n	16da <_ZN5spi_t4InitE12spi_pincfg_tt+0x2a>
        PM->APBCMASK.bit.SERCOM0_ = 1;
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
        while(GCLK->STATUS.bit.SYNCBUSY);
    }
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    16e0:	7e29      	ldrb	r1, [r5, #24]
    16e2:	0028      	movs	r0, r5
    16e4:	1e4b      	subs	r3, r1, #1
    16e6:	4199      	sbcs	r1, r3
    16e8:	3102      	adds	r1, #2
    16ea:	f7ff ffbd 	bl	1668 <_ZN4gpio6pmuxenERK6gpio_th>
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    16ee:	7e69      	ldrb	r1, [r5, #25]
    16f0:	a809      	add	r0, sp, #36	; 0x24
    16f2:	1e4b      	subs	r3, r1, #1
    16f4:	4199      	sbcs	r1, r3
    16f6:	3102      	adds	r1, #2
    16f8:	f7ff ffb6 	bl	1668 <_ZN4gpio6pmuxenERK6gpio_th>
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    16fc:	7ea9      	ldrb	r1, [r5, #26]
    16fe:	a80b      	add	r0, sp, #44	; 0x2c
    1700:	1e4b      	subs	r3, r1, #1
    1702:	4199      	sbcs	r1, r3
    1704:	3102      	adds	r1, #2
    1706:	f7ff ffaf 	bl	1668 <_ZN4gpio6pmuxenERK6gpio_th>

    m_sercom->SPI.CTRLA.bit.ENABLE = 0;
    170a:	2102      	movs	r1, #2
    170c:	6822      	ldr	r2, [r4, #0]
    170e:	6813      	ldr	r3, [r2, #0]
    1710:	438b      	bics	r3, r1
    1712:	6013      	str	r3, [r2, #0]
	m_sercom->SPI.CTRLA.bit.SWRST = 1;
    1714:	2301      	movs	r3, #1
    1716:	6822      	ldr	r2, [r4, #0]
    1718:	6811      	ldr	r1, [r2, #0]
    171a:	430b      	orrs	r3, r1
    171c:	6013      	str	r3, [r2, #0]
	while(m_sercom->SPI.CTRLA.bit.SWRST);
    171e:	6823      	ldr	r3, [r4, #0]
    1720:	681a      	ldr	r2, [r3, #0]
    1722:	07d2      	lsls	r2, r2, #31
    1724:	d4fc      	bmi.n	1720 <_ZN5spi_t4InitE12spi_pincfg_tt+0x70>

	m_sercom->SPI.CTRLA.bit.MODE = SERCOM_SPI_CTRLA_MODE_SPI_MASTER_Val;
    1726:	211c      	movs	r1, #28
    1728:	681a      	ldr	r2, [r3, #0]
	m_sercom->SPI.CTRLA.bit.DOPO = pincfg.mosisckpad;
    172a:	2003      	movs	r0, #3
	m_sercom->SPI.CTRLA.bit.MODE = SERCOM_SPI_CTRLA_MODE_SPI_MASTER_Val;
    172c:	438a      	bics	r2, r1
    172e:	0011      	movs	r1, r2
    1730:	220c      	movs	r2, #12
    1732:	430a      	orrs	r2, r1
    1734:	601a      	str	r2, [r3, #0]
	m_sercom->SPI.CTRLA.bit.DOPO = pincfg.mosisckpad;
    1736:	6822      	ldr	r2, [r4, #0]
    1738:	7f2b      	ldrb	r3, [r5, #28]
    173a:	6811      	ldr	r1, [r2, #0]
    173c:	4f1e      	ldr	r7, [pc, #120]	; (17b8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x108>)
    173e:	4003      	ands	r3, r0
    1740:	041b      	lsls	r3, r3, #16
    1742:	4039      	ands	r1, r7
    1744:	4319      	orrs	r1, r3
    1746:	6011      	str	r1, [r2, #0]
	m_sercom->SPI.CTRLA.bit.DIPO = pincfg.misopad;
    1748:	6821      	ldr	r1, [r4, #0]
    174a:	7eea      	ldrb	r2, [r5, #27]
    174c:	680b      	ldr	r3, [r1, #0]
    174e:	4002      	ands	r2, r0
    1750:	481a      	ldr	r0, [pc, #104]	; (17bc <_ZN5spi_t4InitE12spi_pincfg_tt+0x10c>)
    1752:	0512      	lsls	r2, r2, #20
    1754:	4003      	ands	r3, r0
    1756:	4313      	orrs	r3, r2
    1758:	600b      	str	r3, [r1, #0]

    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    175a:	6823      	ldr	r3, [r4, #0]
    175c:	69da      	ldr	r2, [r3, #28]
    175e:	0752      	lsls	r2, r2, #29
    1760:	d4fc      	bmi.n	175c <_ZN5spi_t4InitE12spi_pincfg_tt+0xac>
    /* SPI receiver is enabled */
    m_sercom->SPI.CTRLB.bit.RXEN = 1;
    1762:	2280      	movs	r2, #128	; 0x80
    1764:	6859      	ldr	r1, [r3, #4]
    1766:	0292      	lsls	r2, r2, #10
    1768:	430a      	orrs	r2, r1
    176a:	605a      	str	r2, [r3, #4]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    176c:	6823      	ldr	r3, [r4, #0]
    176e:	69da      	ldr	r2, [r3, #28]
    1770:	0752      	lsls	r2, r2, #29
    1772:	d4fc      	bmi.n	176e <_ZN5spi_t4InitE12spi_pincfg_tt+0xbe>

    /* baud register value corresponds to the SPI speed */
    m_sercom->SPI.BAUD.reg = speed;
    1774:	b2f6      	uxtb	r6, r6
    1776:	731e      	strb	r6, [r3, #12]
    /* SERCOM peripheral enabled */
    m_sercom->SPI.CTRLA.bit.ENABLE = 1;
    1778:	2302      	movs	r3, #2
    177a:	6822      	ldr	r2, [r4, #0]
    177c:	6811      	ldr	r1, [r2, #0]
    177e:	430b      	orrs	r3, r1
    1780:	6013      	str	r3, [r2, #0]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.ENABLE);
    1782:	6822      	ldr	r2, [r4, #0]
    1784:	69d3      	ldr	r3, [r2, #28]
    1786:	079b      	lsls	r3, r3, #30
    1788:	d4fc      	bmi.n	1784 <_ZN5spi_t4InitE12spi_pincfg_tt+0xd4>
}
    178a:	bcf8      	pop	{r3, r4, r5, r6, r7}
    178c:	bc08      	pop	{r3}
    178e:	b004      	add	sp, #16
    1790:	4718      	bx	r3
        PM->APBCMASK.bit.SERCOM0_ = 1;
    1792:	2104      	movs	r1, #4
    1794:	6a10      	ldr	r0, [r2, #32]
    1796:	4301      	orrs	r1, r0
    1798:	6211      	str	r1, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    179a:	4a09      	ldr	r2, [pc, #36]	; (17c0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x110>)
    179c:	805a      	strh	r2, [r3, #2]
        while(GCLK->STATUS.bit.SYNCBUSY);
    179e:	785a      	ldrb	r2, [r3, #1]
    17a0:	09d2      	lsrs	r2, r2, #7
    17a2:	d1fc      	bne.n	179e <_ZN5spi_t4InitE12spi_pincfg_tt+0xee>
    17a4:	e79c      	b.n	16e0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x30>
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	42000c00 	.word	0x42000c00
    17ac:	40000c00 	.word	0x40000c00
    17b0:	40000400 	.word	0x40000400
    17b4:	0000400f 	.word	0x0000400f
    17b8:	fffcffff 	.word	0xfffcffff
    17bc:	ffcfffff 	.word	0xffcfffff
    17c0:	0000400e 	.word	0x0000400e

000017c4 <_ZN5spi_t8TransferEh>:
spi_t::spi_t(Sercom* sercom) {
    m_sercom = sercom;
}

uint8_t spi_t::Transfer(uint8_t b) {
    if(!m_sercom) return 0xFF;
    17c4:	6802      	ldr	r2, [r0, #0]
uint8_t spi_t::Transfer(uint8_t b) {
    17c6:	0003      	movs	r3, r0
    if(!m_sercom) return 0xFF;
    17c8:	20ff      	movs	r0, #255	; 0xff
    17ca:	2a00      	cmp	r2, #0
    17cc:	d009      	beq.n	17e2 <_ZN5spi_t8TransferEh+0x1e>

    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    17ce:	7e10      	ldrb	r0, [r2, #24]
    17d0:	07c0      	lsls	r0, r0, #31
    17d2:	d5fc      	bpl.n	17ce <_ZN5spi_t8TransferEh+0xa>
    //m_sercom->SPI.INTFLAG.bit.RXC = 1; // Clear RXC flag by setting it to 1
    m_sercom->SPI.DATA.reg = b;
    17d4:	6291      	str	r1, [r2, #40]	; 0x28
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
    17d6:	681b      	ldr	r3, [r3, #0]
    17d8:	7e1a      	ldrb	r2, [r3, #24]
    17da:	0752      	lsls	r2, r2, #29
    17dc:	d5fc      	bpl.n	17d8 <_ZN5spi_t8TransferEh+0x14>
	return m_sercom->SPI.DATA.reg;
    17de:	6a98      	ldr	r0, [r3, #40]	; 0x28
    17e0:	b2c0      	uxtb	r0, r0
    17e2:	4770      	bx	lr

000017e4 <_GLOBAL__sub_I_g_spi0>:
    m_sercom = sercom;
    17e4:	4b03      	ldr	r3, [pc, #12]	; (17f4 <_GLOBAL__sub_I_g_spi0+0x10>)
    17e6:	4a04      	ldr	r2, [pc, #16]	; (17f8 <_GLOBAL__sub_I_g_spi0+0x14>)
    17e8:	601a      	str	r2, [r3, #0]
    17ea:	4b04      	ldr	r3, [pc, #16]	; (17fc <_GLOBAL__sub_I_g_spi0+0x18>)
    17ec:	4a04      	ldr	r2, [pc, #16]	; (1800 <_GLOBAL__sub_I_g_spi0+0x1c>)
    17ee:	601a      	str	r2, [r3, #0]
    17f0:	4770      	bx	lr
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	200002b8 	.word	0x200002b8
    17f8:	42000800 	.word	0x42000800
    17fc:	200002bc 	.word	0x200002bc
    1800:	42000c00 	.word	0x42000c00

00001804 <systick_init>:

static volatile uint64_t _cycles;

static void initializeSystemFor48MHz()
{
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    1804:	22c0      	movs	r2, #192	; 0xc0
	GCLK_GENCTRL_IDC | // Set improved duty cycle 50/50
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
}

void systick_init() {
    1806:	b530      	push	{r4, r5, lr}
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    1808:	4b45      	ldr	r3, [pc, #276]	; (1920 <systick_init+0x11c>)
    180a:	0092      	lsls	r2, r2, #2
    180c:	6a19      	ldr	r1, [r3, #32]
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
    180e:	4845      	ldr	r0, [pc, #276]	; (1924 <systick_init+0x120>)
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    1810:	430a      	orrs	r2, r1
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
    1812:	211e      	movs	r1, #30
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    1814:	621a      	str	r2, [r3, #32]
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
    1816:	6842      	ldr	r2, [r0, #4]
    1818:	438a      	bics	r2, r1
    181a:	0011      	movs	r1, r2
    181c:	2202      	movs	r2, #2
    181e:	430a      	orrs	r2, r1
    1820:	6042      	str	r2, [r0, #4]
	PM->APBAMASK.bit.GCLK_ = 1;
    1822:	2208      	movs	r2, #8
    1824:	4940      	ldr	r1, [pc, #256]	; (1928 <systick_init+0x124>)
    1826:	6988      	ldr	r0, [r1, #24]
    1828:	4302      	orrs	r2, r0
    182a:	618a      	str	r2, [r1, #24]
	GCLK->CTRL.bit.SWRST = 1;
    182c:	2101      	movs	r1, #1
    182e:	4a3f      	ldr	r2, [pc, #252]	; (192c <systick_init+0x128>)
    1830:	7810      	ldrb	r0, [r2, #0]
    1832:	4301      	orrs	r1, r0
    1834:	7011      	strb	r1, [r2, #0]
	while (GCLK->CTRL.bit.SWRST && GCLK->STATUS.bit.SYNCBUSY) {};
    1836:	7811      	ldrb	r1, [r2, #0]
    1838:	07c9      	lsls	r1, r1, #31
    183a:	d502      	bpl.n	1842 <systick_init+0x3e>
    183c:	7851      	ldrb	r1, [r2, #1]
    183e:	09c9      	lsrs	r1, r1, #7
    1840:	d1f9      	bne.n	1836 <systick_init+0x32>
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
    1842:	2080      	movs	r0, #128	; 0x80
    1844:	6a19      	ldr	r1, [r3, #32]
    1846:	4381      	bics	r1, r0
    1848:	6219      	str	r1, [r3, #32]
	GCLK->GENDIV.reg =
    184a:	4939      	ldr	r1, [pc, #228]	; (1930 <systick_init+0x12c>)
    184c:	6091      	str	r1, [r2, #8]
	GCLK->GENCTRL.reg =
    184e:	4939      	ldr	r1, [pc, #228]	; (1934 <systick_init+0x130>)
    1850:	6051      	str	r1, [r2, #4]
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1852:	7851      	ldrb	r1, [r2, #1]
    1854:	09c9      	lsrs	r1, r1, #7
    1856:	d1fc      	bne.n	1852 <systick_init+0x4e>
	GCLK->CLKCTRL.reg =
    1858:	2186      	movs	r1, #134	; 0x86
    185a:	01c9      	lsls	r1, r1, #7
    185c:	8051      	strh	r1, [r2, #2]
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    185e:	7851      	ldrb	r1, [r2, #1]
    1860:	09c9      	lsrs	r1, r1, #7
    1862:	d1fc      	bne.n	185e <systick_init+0x5a>
	SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
    1864:	2080      	movs	r0, #128	; 0x80
    1866:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    1868:	4381      	bics	r1, r0
    186a:	8499      	strh	r1, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    186c:	68d9      	ldr	r1, [r3, #12]
    186e:	06c9      	lsls	r1, r1, #27
    1870:	d5fc      	bpl.n	186c <systick_init+0x68>
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
    1872:	20c0      	movs	r0, #192	; 0xc0
    1874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1876:	0100      	lsls	r0, r0, #4
    1878:	0c09      	lsrs	r1, r1, #16
    187a:	0409      	lsls	r1, r1, #16
    187c:	4301      	orrs	r1, r0
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
    187e:	2080      	movs	r0, #128	; 0x80
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
    1880:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
    1882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1884:	04c0      	lsls	r0, r0, #19
    1886:	0189      	lsls	r1, r1, #6
    1888:	0989      	lsrs	r1, r1, #6
    188a:	4301      	orrs	r1, r0
    188c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.FSTEP = 1; // Fine step = 1
    188e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1890:	4829      	ldr	r0, [pc, #164]	; (1938 <systick_init+0x134>)
    1892:	4008      	ands	r0, r1
    1894:	2180      	movs	r1, #128	; 0x80
    1896:	0249      	lsls	r1, r1, #9
    1898:	4301      	orrs	r1, r0
    189a:	62d9      	str	r1, [r3, #44]	; 0x2c
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    189c:	68d9      	ldr	r1, [r3, #12]
    189e:	06c9      	lsls	r1, r1, #27
    18a0:	d5fc      	bpl.n	189c <systick_init+0x98>
	SYSCTRL->DFLLCTRL.reg |=
    18a2:	2181      	movs	r1, #129	; 0x81
    18a4:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    18a6:	0089      	lsls	r1, r1, #2
    18a8:	4301      	orrs	r1, r0
    18aa:	8499      	strh	r1, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    18ac:	68d9      	ldr	r1, [r3, #12]
    18ae:	06c9      	lsls	r1, r1, #27
    18b0:	d5fc      	bpl.n	18ac <systick_init+0xa8>
	SYSCTRL->INTFLAG.bit.DFLLLCKC = 1;
    18b2:	2180      	movs	r1, #128	; 0x80
    18b4:	6898      	ldr	r0, [r3, #8]
    18b6:	4301      	orrs	r1, r0
    18b8:	6099      	str	r1, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLLCKF = 1;
    18ba:	2140      	movs	r1, #64	; 0x40
    18bc:	6898      	ldr	r0, [r3, #8]
    18be:	4301      	orrs	r1, r0
    18c0:	6099      	str	r1, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLRDY = 1;
    18c2:	2110      	movs	r1, #16
    18c4:	6898      	ldr	r0, [r3, #8]
    18c6:	4301      	orrs	r1, r0
    18c8:	6099      	str	r1, [r3, #8]
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
    18ca:	2102      	movs	r1, #2
    18cc:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    18ce:	4301      	orrs	r1, r0
    18d0:	8499      	strh	r1, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    18d2:	68d9      	ldr	r1, [r3, #12]
    18d4:	06c9      	lsls	r1, r1, #27
    18d6:	d5fc      	bpl.n	18d2 <systick_init+0xce>
	while (!SYSCTRL->INTFLAG.bit.DFLLLCKC && !SYSCTRL->INTFLAG.bit.DFLLLCKF) {};
    18d8:	6899      	ldr	r1, [r3, #8]
    18da:	0609      	lsls	r1, r1, #24
    18dc:	d402      	bmi.n	18e4 <systick_init+0xe0>
    18de:	6899      	ldr	r1, [r3, #8]
    18e0:	0649      	lsls	r1, r1, #25
    18e2:	d5f9      	bpl.n	18d8 <systick_init+0xd4>
	while (!SYSCTRL->INTFLAG.bit.DFLLRDY) {};
    18e4:	6899      	ldr	r1, [r3, #8]
    18e6:	06c9      	lsls	r1, r1, #27
    18e8:	d5fc      	bpl.n	18e4 <systick_init+0xe0>
	GCLK->GENDIV.reg =
    18ea:	2300      	movs	r3, #0
    18ec:	6093      	str	r3, [r2, #8]
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    18ee:	7853      	ldrb	r3, [r2, #1]
    18f0:	09db      	lsrs	r3, r3, #7
    18f2:	d1fc      	bne.n	18ee <systick_init+0xea>
	GCLK->GENCTRL.reg =
    18f4:	4b11      	ldr	r3, [pc, #68]	; (193c <systick_init+0x138>)
    18f6:	6053      	str	r3, [r2, #4]
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    18f8:	7851      	ldrb	r1, [r2, #1]
    18fa:	09c9      	lsrs	r1, r1, #7
    18fc:	d1fc      	bne.n	18f8 <systick_init+0xf4>
	initializeSystemFor48MHz();
	
	_cycles = 0;
    18fe:	2500      	movs	r5, #0
    1900:	2400      	movs	r4, #0
    1902:	4b0f      	ldr	r3, [pc, #60]	; (1940 <systick_init+0x13c>)

	SysTick->CTRL = 0;
	SysTick->LOAD = 0xFFFFFF;
    1904:	4a0f      	ldr	r2, [pc, #60]	; (1944 <systick_init+0x140>)
	_cycles = 0;
    1906:	601c      	str	r4, [r3, #0]
    1908:	605d      	str	r5, [r3, #4]
	SysTick->CTRL = 0;
    190a:	4b0f      	ldr	r3, [pc, #60]	; (1948 <systick_init+0x144>)
    190c:	6019      	str	r1, [r3, #0]
	SysTick->LOAD = 0xFFFFFF;
    190e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0xFFFFFF;
    1910:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
    1912:	2207      	movs	r2, #7
    1914:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1916:	2280      	movs	r2, #128	; 0x80
    1918:	4b0c      	ldr	r3, [pc, #48]	; (194c <systick_init+0x148>)
    191a:	0612      	lsls	r2, r2, #24
    191c:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(SysTick_IRQn);
}
    191e:	bd30      	pop	{r4, r5, pc}
    1920:	40000800 	.word	0x40000800
    1924:	41004000 	.word	0x41004000
    1928:	40000400 	.word	0x40000400
    192c:	40000c00 	.word	0x40000c00
    1930:	00004003 	.word	0x00004003
    1934:	00010603 	.word	0x00010603
    1938:	fc00ffff 	.word	0xfc00ffff
    193c:	00030700 	.word	0x00030700
    1940:	200002c0 	.word	0x200002c0
    1944:	00ffffff 	.word	0x00ffffff
    1948:	e000e010 	.word	0xe000e010
    194c:	e000e100 	.word	0xe000e100

00001950 <systick_cycles>:

uint64_t systick_cycles() {
	return _cycles + (0xFFFFFF - SysTick->VAL);
    1950:	2100      	movs	r1, #0
uint64_t systick_cycles() {
    1952:	b530      	push	{r4, r5, lr}
	return _cycles + (0xFFFFFF - SysTick->VAL);
    1954:	4b04      	ldr	r3, [pc, #16]	; (1968 <systick_cycles+0x18>)
    1956:	4d05      	ldr	r5, [pc, #20]	; (196c <systick_cycles+0x1c>)
    1958:	689c      	ldr	r4, [r3, #8]
    195a:	4b05      	ldr	r3, [pc, #20]	; (1970 <systick_cycles+0x20>)
    195c:	1b28      	subs	r0, r5, r4
    195e:	681a      	ldr	r2, [r3, #0]
    1960:	685b      	ldr	r3, [r3, #4]
    1962:	1880      	adds	r0, r0, r2
    1964:	4159      	adcs	r1, r3
}
    1966:	bd30      	pop	{r4, r5, pc}
    1968:	e000e010 	.word	0xe000e010
    196c:	00ffffff 	.word	0x00ffffff
    1970:	200002c0 	.word	0x200002c0

00001974 <millis>:
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000000) + 0.99999999 );
	ticks >>= 35;
	return (uint32_t)ticks;
}

uint32_t millis() {
    1974:	b510      	push	{r4, lr}
	// https://en.wikipedia.org/wiki/Division_algorithm#Division_by_a_constant
	uint64_t ticks = systick_cycles();
    1976:	f7ff ffeb 	bl	1950 <systick_cycles>
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000) + 0.99999999 );
    197a:	2300      	movs	r3, #0
    197c:	4a02      	ldr	r2, [pc, #8]	; (1988 <millis+0x14>)
    197e:	f000 fc4f 	bl	2220 <__aeabi_lmul>
	ticks >>= 35;
    1982:	08c8      	lsrs	r0, r1, #3
	return (uint32_t)ticks;
}
    1984:	bd10      	pop	{r4, pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	000aec34 	.word	0x000aec34

0000198c <SysTick_Handler>:

void SysTick_Handler() {
    198c:	b530      	push	{r4, r5, lr}
	_cycles += 0x1000000;
    198e:	2480      	movs	r4, #128	; 0x80
    1990:	2500      	movs	r5, #0
    1992:	4904      	ldr	r1, [pc, #16]	; (19a4 <SysTick_Handler+0x18>)
    1994:	0464      	lsls	r4, r4, #17
    1996:	680a      	ldr	r2, [r1, #0]
    1998:	684b      	ldr	r3, [r1, #4]
    199a:	1912      	adds	r2, r2, r4
    199c:	416b      	adcs	r3, r5
    199e:	600a      	str	r2, [r1, #0]
    19a0:	604b      	str	r3, [r1, #4]
    19a2:	bd30      	pop	{r4, r5, pc}
    19a4:	200002c0 	.word	0x200002c0

000019a8 <_ZN6uart_t4initERK13uart_pincfg_tt>:
    return 0;
}*/

void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {

    if(m_sercom == SERCOM1) {
    19a8:	2382      	movs	r3, #130	; 0x82
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
    19aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(m_sercom == SERCOM1) {
    19ac:	009b      	lsls	r3, r3, #2
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
    19ae:	b085      	sub	sp, #20
    19b0:	9201      	str	r2, [sp, #4]
    19b2:	4e3d      	ldr	r6, [pc, #244]	; (1aa8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x100>)
    if(m_sercom == SERCOM1) {
    19b4:	58c2      	ldr	r2, [r0, r3]
    19b6:	4b3d      	ldr	r3, [pc, #244]	; (1aac <_ZN6uart_t4initERK13uart_pincfg_tt+0x104>)
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
    19b8:	0004      	movs	r4, r0
    19ba:	000d      	movs	r5, r1
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
    19bc:	6a18      	ldr	r0, [r3, #32]
    19be:	493c      	ldr	r1, [pc, #240]	; (1ab0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x108>)
    if(m_sercom == SERCOM1) {
    19c0:	42b2      	cmp	r2, r6
    19c2:	d166      	bne.n	1a92 <_ZN6uart_t4initERK13uart_pincfg_tt+0xea>
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
    19c4:	2208      	movs	r2, #8
    19c6:	4302      	orrs	r2, r0
    19c8:	621a      	str	r2, [r3, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) |
    19ca:	4b3a      	ldr	r3, [pc, #232]	; (1ab4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x10c>)
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
    } else {
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    19cc:	804b      	strh	r3, [r1, #2]
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
    }

    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    19ce:	7ca9      	ldrb	r1, [r5, #18]
    19d0:	0028      	movs	r0, r5
    19d2:	1e4b      	subs	r3, r1, #1
    19d4:	4199      	sbcs	r1, r3
    19d6:	3102      	adds	r1, #2
    19d8:	f7ff fe46 	bl	1668 <_ZN4gpio6pmuxenERK6gpio_th>
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    19dc:	7ce9      	ldrb	r1, [r5, #19]
    19de:	0028      	movs	r0, r5
    19e0:	1e4b      	subs	r3, r1, #1
    19e2:	4199      	sbcs	r1, r3
    19e4:	3008      	adds	r0, #8
    19e6:	3102      	adds	r1, #2
    19e8:	f7ff fe3e 	bl	1668 <_ZN4gpio6pmuxenERK6gpio_th>

    m_sercom->USART.CTRLA.bit.ENABLE = 0;
    19ec:	2382      	movs	r3, #130	; 0x82
    19ee:	2002      	movs	r0, #2
    19f0:	009b      	lsls	r3, r3, #2
    19f2:	58e1      	ldr	r1, [r4, r3]
    19f4:	680a      	ldr	r2, [r1, #0]
    19f6:	4382      	bics	r2, r0
    19f8:	600a      	str	r2, [r1, #0]
    m_sercom->USART.CTRLA.bit.SWRST = 1;
    19fa:	2201      	movs	r2, #1
    19fc:	58e1      	ldr	r1, [r4, r3]
    19fe:	6808      	ldr	r0, [r1, #0]
    1a00:	4302      	orrs	r2, r0
    1a02:	600a      	str	r2, [r1, #0]
    while(m_sercom->USART.CTRLA.bit.SWRST);
    1a04:	58e2      	ldr	r2, [r4, r3]
    1a06:	6813      	ldr	r3, [r2, #0]
    1a08:	07db      	lsls	r3, r3, #31
    1a0a:	d4fc      	bmi.n	1a06 <_ZN6uart_t4initERK13uart_pincfg_tt+0x5e>

    m_sercom->USART.CTRLA.bit.MODE = SERCOM_USART_CTRLA_MODE_USART_INT_CLK_Val;
    1a0c:	211c      	movs	r1, #28
    1a0e:	2004      	movs	r0, #4
    1a10:	6813      	ldr	r3, [r2, #0]
    1a12:	438b      	bics	r3, r1
    1a14:	4303      	orrs	r3, r0
    1a16:	6013      	str	r3, [r2, #0]
    m_sercom->USART.CTRLA.bit.DORD = 1;
    1a18:	2382      	movs	r3, #130	; 0x82
    1a1a:	2280      	movs	r2, #128	; 0x80
    1a1c:	009b      	lsls	r3, r3, #2
    1a1e:	58e1      	ldr	r1, [r4, r3]
    1a20:	05d2      	lsls	r2, r2, #23
    1a22:	680f      	ldr	r7, [r1, #0]
    1a24:	433a      	orrs	r2, r7
    m_sercom->USART.CTRLA.bit.TXPO = pincfg.tx_pad;
    1a26:	2703      	movs	r7, #3
    m_sercom->USART.CTRLA.bit.DORD = 1;
    1a28:	600a      	str	r2, [r1, #0]
    m_sercom->USART.CTRLA.bit.TXPO = pincfg.tx_pad;
    1a2a:	58e2      	ldr	r2, [r4, r3]
    1a2c:	7c29      	ldrb	r1, [r5, #16]
    1a2e:	6812      	ldr	r2, [r2, #0]
    1a30:	4039      	ands	r1, r7
    1a32:	9202      	str	r2, [sp, #8]
    1a34:	040a      	lsls	r2, r1, #16
    1a36:	9203      	str	r2, [sp, #12]
    1a38:	9902      	ldr	r1, [sp, #8]
    1a3a:	4a1f      	ldr	r2, [pc, #124]	; (1ab8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x110>)
    1a3c:	4011      	ands	r1, r2
    1a3e:	000a      	movs	r2, r1
    1a40:	9903      	ldr	r1, [sp, #12]
    1a42:	430a      	orrs	r2, r1
    1a44:	58e1      	ldr	r1, [r4, r3]
    1a46:	600a      	str	r2, [r1, #0]
    m_sercom->USART.CTRLA.bit.RXPO = pincfg.rx_pad;
    1a48:	58e2      	ldr	r2, [r4, r3]
    1a4a:	7c6d      	ldrb	r5, [r5, #17]
    1a4c:	6811      	ldr	r1, [r2, #0]
    1a4e:	403d      	ands	r5, r7
    1a50:	4f1a      	ldr	r7, [pc, #104]	; (1abc <_ZN6uart_t4initERK13uart_pincfg_tt+0x114>)
    1a52:	052d      	lsls	r5, r5, #20
    1a54:	400f      	ands	r7, r1
    1a56:	432f      	orrs	r7, r5
    1a58:	6017      	str	r7, [r2, #0]
    m_sercom->USART.BAUD.reg = speed;
    1a5a:	58e2      	ldr	r2, [r4, r3]
    1a5c:	9901      	ldr	r1, [sp, #4]
    1a5e:	8191      	strh	r1, [r2, #12]
    m_sercom->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
    1a60:	21c0      	movs	r1, #192	; 0xc0
    1a62:	58e2      	ldr	r2, [r4, r3]
    1a64:	0289      	lsls	r1, r1, #10
    1a66:	6051      	str	r1, [r2, #4]

    m_sercom->USART.INTENSET.bit.RXC = 1;
    1a68:	58e2      	ldr	r2, [r4, r3]
    1a6a:	7d91      	ldrb	r1, [r2, #22]
    1a6c:	4308      	orrs	r0, r1
    1a6e:	7590      	strb	r0, [r2, #22]
    if(m_sercom == SERCOM0)
    1a70:	58e2      	ldr	r2, [r4, r3]
    1a72:	4b13      	ldr	r3, [pc, #76]	; (1ac0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x118>)
    1a74:	429a      	cmp	r2, r3
    1a76:	d111      	bne.n	1a9c <_ZN6uart_t4initERK13uart_pincfg_tt+0xf4>
    1a78:	2180      	movs	r1, #128	; 0x80
    1a7a:	4b12      	ldr	r3, [pc, #72]	; (1ac4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x11c>)
    1a7c:	0089      	lsls	r1, r1, #2
    1a7e:	6019      	str	r1, [r3, #0]
        NVIC_EnableIRQ(SERCOM0_IRQn);
    else if(m_sercom == SERCOM1)
        NVIC_EnableIRQ(SERCOM1_IRQn);

    m_sercom->USART.CTRLA.bit.ENABLE = 1;
    1a80:	2302      	movs	r3, #2
    1a82:	6811      	ldr	r1, [r2, #0]
    1a84:	430b      	orrs	r3, r1
    1a86:	6013      	str	r3, [r2, #0]

    m_used = true;
    1a88:	2201      	movs	r2, #1
    1a8a:	4b0f      	ldr	r3, [pc, #60]	; (1ac8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x120>)
    1a8c:	54e2      	strb	r2, [r4, r3]
}
    1a8e:	b005      	add	sp, #20
    1a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
    1a92:	2204      	movs	r2, #4
    1a94:	4302      	orrs	r2, r0
    1a96:	621a      	str	r2, [r3, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    1a98:	4b0c      	ldr	r3, [pc, #48]	; (1acc <_ZN6uart_t4initERK13uart_pincfg_tt+0x124>)
    1a9a:	e797      	b.n	19cc <_ZN6uart_t4initERK13uart_pincfg_tt+0x24>
    else if(m_sercom == SERCOM1)
    1a9c:	42b2      	cmp	r2, r6
    1a9e:	d1ef      	bne.n	1a80 <_ZN6uart_t4initERK13uart_pincfg_tt+0xd8>
    1aa0:	2180      	movs	r1, #128	; 0x80
    1aa2:	4b08      	ldr	r3, [pc, #32]	; (1ac4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x11c>)
    1aa4:	00c9      	lsls	r1, r1, #3
    1aa6:	e7ea      	b.n	1a7e <_ZN6uart_t4initERK13uart_pincfg_tt+0xd6>
    1aa8:	42000c00 	.word	0x42000c00
    1aac:	40000400 	.word	0x40000400
    1ab0:	40000c00 	.word	0x40000c00
    1ab4:	0000400f 	.word	0x0000400f
    1ab8:	fffcffff 	.word	0xfffcffff
    1abc:	ffcfffff 	.word	0xffcfffff
    1ac0:	42000800 	.word	0x42000800
    1ac4:	e000e100 	.word	0xe000e100
    1ac8:	00000205 	.word	0x00000205
    1acc:	0000400e 	.word	0x0000400e

00001ad0 <_ZN6uart_t14sercom_handlerEv>:

void uart_t::sercom_handler() {
    if(!m_used) return;
    1ad0:	4b11      	ldr	r3, [pc, #68]	; (1b18 <_ZN6uart_t14sercom_handlerEv+0x48>)
void uart_t::sercom_handler() {
    1ad2:	b510      	push	{r4, lr}
    if(!m_used) return;
    1ad4:	5cc3      	ldrb	r3, [r0, r3]
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d01b      	beq.n	1b12 <_ZN6uart_t14sercom_handlerEv+0x42>

    if(!m_rxfull) {
    1ada:	2281      	movs	r2, #129	; 0x81
    1adc:	2382      	movs	r3, #130	; 0x82
    1ade:	0092      	lsls	r2, r2, #2
    1ae0:	5c81      	ldrb	r1, [r0, r2]
    1ae2:	009b      	lsls	r3, r3, #2
    1ae4:	58c3      	ldr	r3, [r0, r3]
    1ae6:	2900      	cmp	r1, #0
    1ae8:	d114      	bne.n	1b14 <_ZN6uart_t14sercom_handlerEv+0x44>
		m_rxbuf[m_rxhead] = m_sercom->USART.DATA.reg;
    1aea:	2180      	movs	r1, #128	; 0x80
    1aec:	0089      	lsls	r1, r1, #2
    1aee:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
    1af0:	5a43      	ldrh	r3, [r0, r1]
    1af2:	b2e4      	uxtb	r4, r4
    1af4:	b29b      	uxth	r3, r3
    1af6:	54c4      	strb	r4, [r0, r3]
		m_rxhead = (m_rxhead+1) % sizeof(m_rxbuf);
    1af8:	5a43      	ldrh	r3, [r0, r1]
    1afa:	3301      	adds	r3, #1
    1afc:	05db      	lsls	r3, r3, #23
    1afe:	0ddb      	lsrs	r3, r3, #23
    1b00:	5243      	strh	r3, [r0, r1]
		m_rxfull = m_rxtail == m_rxhead;
    1b02:	4b06      	ldr	r3, [pc, #24]	; (1b1c <_ZN6uart_t14sercom_handlerEv+0x4c>)
    1b04:	5ac3      	ldrh	r3, [r0, r3]
    1b06:	5a41      	ldrh	r1, [r0, r1]
    1b08:	1a5b      	subs	r3, r3, r1
    1b0a:	4259      	negs	r1, r3
    1b0c:	414b      	adcs	r3, r1
    1b0e:	b2db      	uxtb	r3, r3
    1b10:	5483      	strb	r3, [r0, r2]
	} else {
		(void)m_sercom->USART.DATA.reg; // Clear RX flag
	}
}
    1b12:	bd10      	pop	{r4, pc}
		(void)m_sercom->USART.DATA.reg; // Clear RX flag
    1b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1b16:	e7fc      	b.n	1b12 <_ZN6uart_t14sercom_handlerEv+0x42>
    1b18:	00000205 	.word	0x00000205
    1b1c:	00000202 	.word	0x00000202

00001b20 <_ZN6uart_t5writeEc>:

void uart_t::write(char c) {
    if(!m_used) return;
    1b20:	4b06      	ldr	r3, [pc, #24]	; (1b3c <_ZN6uart_t5writeEc+0x1c>)
    1b22:	5cc3      	ldrb	r3, [r0, r3]
    1b24:	2b00      	cmp	r3, #0
    1b26:	d008      	beq.n	1b3a <_ZN6uart_t5writeEc+0x1a>
    
    m_sercom->USART.DATA.reg = c;
    1b28:	2382      	movs	r3, #130	; 0x82
    1b2a:	009b      	lsls	r3, r3, #2
    1b2c:	58c2      	ldr	r2, [r0, r3]
    1b2e:	b289      	uxth	r1, r1
    1b30:	8511      	strh	r1, [r2, #40]	; 0x28
	while(!m_sercom->USART.INTFLAG.bit.DRE);
    1b32:	58c2      	ldr	r2, [r0, r3]
    1b34:	7e13      	ldrb	r3, [r2, #24]
    1b36:	07db      	lsls	r3, r3, #31
    1b38:	d5fc      	bpl.n	1b34 <_ZN6uart_t5writeEc+0x14>
}
    1b3a:	4770      	bx	lr
    1b3c:	00000205 	.word	0x00000205

00001b40 <_ZN6uart_t5printEPKci>:

void uart_t::print(const char* str, int len) {
    1b40:	b570      	push	{r4, r5, r6, lr}
    if(!m_used) return;
    1b42:	4b0b      	ldr	r3, [pc, #44]	; (1b70 <_ZN6uart_t5printEPKci+0x30>)
void uart_t::print(const char* str, int len) {
    1b44:	0005      	movs	r5, r0
    if(!m_used) return;
    1b46:	5cc3      	ldrb	r3, [r0, r3]
void uart_t::print(const char* str, int len) {
    1b48:	000c      	movs	r4, r1
    1b4a:	0016      	movs	r6, r2
    if(!m_used) return;
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d00d      	beq.n	1b6c <_ZN6uart_t5printEPKci+0x2c>
    
    while((len == -1) ? *str : len--) write(*str++);
    1b50:	1c73      	adds	r3, r6, #1
    1b52:	d108      	bne.n	1b66 <_ZN6uart_t5printEPKci+0x26>
    1b54:	7823      	ldrb	r3, [r4, #0]
    1b56:	2b00      	cmp	r3, #0
    1b58:	d008      	beq.n	1b6c <_ZN6uart_t5printEPKci+0x2c>
    1b5a:	7821      	ldrb	r1, [r4, #0]
    1b5c:	0028      	movs	r0, r5
    1b5e:	f7ff ffdf 	bl	1b20 <_ZN6uart_t5writeEc>
    1b62:	3401      	adds	r4, #1
    1b64:	e7f4      	b.n	1b50 <_ZN6uart_t5printEPKci+0x10>
    1b66:	0033      	movs	r3, r6
    1b68:	3e01      	subs	r6, #1
    1b6a:	e7f4      	b.n	1b56 <_ZN6uart_t5printEPKci+0x16>
}
    1b6c:	bd70      	pop	{r4, r5, r6, pc}
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	00000205 	.word	0x00000205

00001b74 <_ZN6uart_t7rxemptyEv>:
	
	return c;
}

bool uart_t::rxempty() {
	return (!m_rxfull && (m_rxhead == m_rxtail));
    1b74:	2381      	movs	r3, #129	; 0x81
    1b76:	009b      	lsls	r3, r3, #2
bool uart_t::rxempty() {
    1b78:	0002      	movs	r2, r0
	return (!m_rxfull && (m_rxhead == m_rxtail));
    1b7a:	5cc3      	ldrb	r3, [r0, r3]
    1b7c:	2000      	movs	r0, #0
    1b7e:	4283      	cmp	r3, r0
    1b80:	d108      	bne.n	1b94 <_ZN6uart_t7rxemptyEv+0x20>
    1b82:	2380      	movs	r3, #128	; 0x80
    1b84:	4904      	ldr	r1, [pc, #16]	; (1b98 <_ZN6uart_t7rxemptyEv+0x24>)
    1b86:	009b      	lsls	r3, r3, #2
    1b88:	5ad3      	ldrh	r3, [r2, r3]
    1b8a:	5a50      	ldrh	r0, [r2, r1]
    1b8c:	1a18      	subs	r0, r3, r0
    1b8e:	4243      	negs	r3, r0
    1b90:	4158      	adcs	r0, r3
    1b92:	b2c0      	uxtb	r0, r0
}
    1b94:	4770      	bx	lr
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	00000202 	.word	0x00000202

00001b9c <_ZN6uart_t4getcEv>:
char uart_t::getc() {
    1b9c:	b510      	push	{r4, lr}
    if(!m_used) return '\0';
    1b9e:	4b0c      	ldr	r3, [pc, #48]	; (1bd0 <_ZN6uart_t4getcEv+0x34>)
char uart_t::getc() {
    1ba0:	0004      	movs	r4, r0
    if(!m_used) return '\0';
    1ba2:	5cc3      	ldrb	r3, [r0, r3]
    1ba4:	1e18      	subs	r0, r3, #0
    1ba6:	d011      	beq.n	1bcc <_ZN6uart_t4getcEv+0x30>
	while(rxempty());
    1ba8:	0020      	movs	r0, r4
    1baa:	f7ff ffe3 	bl	1b74 <_ZN6uart_t7rxemptyEv>
    1bae:	1e03      	subs	r3, r0, #0
    1bb0:	d1fa      	bne.n	1ba8 <_ZN6uart_t4getcEv+0xc>
	uint8_t c = m_rxbuf[m_rxtail];
    1bb2:	4a08      	ldr	r2, [pc, #32]	; (1bd4 <_ZN6uart_t4getcEv+0x38>)
    1bb4:	5aa1      	ldrh	r1, [r4, r2]
    1bb6:	b289      	uxth	r1, r1
    1bb8:	5c60      	ldrb	r0, [r4, r1]
	m_rxfull = false;
    1bba:	2181      	movs	r1, #129	; 0x81
    1bbc:	0089      	lsls	r1, r1, #2
    1bbe:	5463      	strb	r3, [r4, r1]
	m_rxtail = (m_rxtail+1) % sizeof(m_rxbuf);
    1bc0:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t c = m_rxbuf[m_rxtail];
    1bc2:	b2c0      	uxtb	r0, r0
	m_rxtail = (m_rxtail+1) % sizeof(m_rxbuf);
    1bc4:	3301      	adds	r3, #1
    1bc6:	05db      	lsls	r3, r3, #23
    1bc8:	0ddb      	lsrs	r3, r3, #23
    1bca:	52a3      	strh	r3, [r4, r2]
}
    1bcc:	bd10      	pop	{r4, pc}
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	00000205 	.word	0x00000205
    1bd4:	00000202 	.word	0x00000202

00001bd8 <_ZN6uart_t4peekEi>:
		*s++ = c;
	}
	*s = 0;
}

char uart_t::peek(int pos) {
    1bd8:	b570      	push	{r4, r5, r6, lr}
    if(!m_used) return '\0';
    1bda:	4b0f      	ldr	r3, [pc, #60]	; (1c18 <_ZN6uart_t4peekEi+0x40>)
char uart_t::peek(int pos) {
    1bdc:	0004      	movs	r4, r0
    if(!m_used) return '\0';
    1bde:	5cc3      	ldrb	r3, [r0, r3]
char uart_t::peek(int pos) {
    1be0:	000d      	movs	r5, r1
    if(!m_used) return '\0';
    1be2:	2b00      	cmp	r3, #0
    1be4:	d101      	bne.n	1bea <_ZN6uart_t4peekEi+0x12>
    1be6:	2000      	movs	r0, #0

    if(pos == -1)
        return m_rxbuf[m_rxtail];
    else
        return m_rxbuf[(m_rxtail + pos) % sizeof(m_rxbuf)];
}
    1be8:	bd70      	pop	{r4, r5, r6, pc}
    if(rxempty() || pos >= available()) return '\0';
    1bea:	f7ff ffc3 	bl	1b74 <_ZN6uart_t7rxemptyEv>
    1bee:	2800      	cmp	r0, #0
    1bf0:	d1f9      	bne.n	1be6 <_ZN6uart_t4peekEi+0xe>
    1bf2:	0020      	movs	r0, r4
    1bf4:	f7fe fa6e 	bl	d4 <_ZN6uart_t9availableEv>
    1bf8:	42a8      	cmp	r0, r5
    1bfa:	ddf4      	ble.n	1be6 <_ZN6uart_t4peekEi+0xe>
    if(pos == -1)
    1bfc:	4b07      	ldr	r3, [pc, #28]	; (1c1c <_ZN6uart_t4peekEi+0x44>)
    1bfe:	1c6a      	adds	r2, r5, #1
    1c00:	d104      	bne.n	1c0c <_ZN6uart_t4peekEi+0x34>
        return m_rxbuf[m_rxtail];
    1c02:	5ae3      	ldrh	r3, [r4, r3]
    1c04:	b29b      	uxth	r3, r3
    1c06:	5ce0      	ldrb	r0, [r4, r3]
        return m_rxbuf[(m_rxtail + pos) % sizeof(m_rxbuf)];
    1c08:	b2c0      	uxtb	r0, r0
    1c0a:	e7ed      	b.n	1be8 <_ZN6uart_t4peekEi+0x10>
    1c0c:	5ae1      	ldrh	r1, [r4, r3]
    1c0e:	1949      	adds	r1, r1, r5
    1c10:	05c9      	lsls	r1, r1, #23
    1c12:	0dc9      	lsrs	r1, r1, #23
    1c14:	5c60      	ldrb	r0, [r4, r1]
    1c16:	e7f7      	b.n	1c08 <_ZN6uart_t4peekEi+0x30>
    1c18:	00000205 	.word	0x00000205
    1c1c:	00000202 	.word	0x00000202

00001c20 <_ZN6uart_t4findEPKc>:

int uart_t::find(const char* str) {
    1c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(!m_used) return -1;
    1c22:	4b11      	ldr	r3, [pc, #68]	; (1c68 <_ZN6uart_t4findEPKc+0x48>)
int uart_t::find(const char* str) {
    1c24:	9100      	str	r1, [sp, #0]
    if(!m_used) return -1;
    1c26:	5cc3      	ldrb	r3, [r0, r3]
int uart_t::find(const char* str) {
    1c28:	0004      	movs	r4, r0
    if(!m_used) return -1;
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d019      	beq.n	1c62 <_ZN6uart_t4findEPKc+0x42>
    1c2e:	424e      	negs	r6, r1
    1c30:	9b00      	ldr	r3, [sp, #0]
    
    for(int i = 0; i < available(); i++) {
    1c32:	0020      	movs	r0, r4
    1c34:	199f      	adds	r7, r3, r6
    1c36:	f7fe fa4d 	bl	d4 <_ZN6uart_t9availableEv>
    1c3a:	42b8      	cmp	r0, r7
    1c3c:	dd11      	ble.n	1c62 <_ZN6uart_t4findEPKc+0x42>
    1c3e:	9d00      	ldr	r5, [sp, #0]
        int search_idx = 0;
        while(str[search_idx] == peek(i + search_idx))
    1c40:	782b      	ldrb	r3, [r5, #0]
    1c42:	0020      	movs	r0, r4
    1c44:	19a9      	adds	r1, r5, r6
    1c46:	9301      	str	r3, [sp, #4]
    1c48:	f7ff ffc6 	bl	1bd8 <_ZN6uart_t4peekEi>
    1c4c:	9b01      	ldr	r3, [sp, #4]
    1c4e:	4283      	cmp	r3, r0
    1c50:	d105      	bne.n	1c5e <_ZN6uart_t4findEPKc+0x3e>
            if(!str[++search_idx]) return i;
    1c52:	786b      	ldrb	r3, [r5, #1]
    1c54:	3501      	adds	r5, #1
    1c56:	2b00      	cmp	r3, #0
    1c58:	d1f2      	bne.n	1c40 <_ZN6uart_t4findEPKc+0x20>
    }

    return -1;
}
    1c5a:	0038      	movs	r0, r7
    1c5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    for(int i = 0; i < available(); i++) {
    1c5e:	3601      	adds	r6, #1
    1c60:	e7e6      	b.n	1c30 <_ZN6uart_t4findEPKc+0x10>
    if(!m_used) return -1;
    1c62:	2701      	movs	r7, #1
    1c64:	427f      	negs	r7, r7
    1c66:	e7f8      	b.n	1c5a <_ZN6uart_t4findEPKc+0x3a>
    1c68:	00000205 	.word	0x00000205

00001c6c <_ZN6uart_t4readEv>:

char* uart_t::read() {
    1c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(!m_used) return NULL;
    1c6e:	4b0f      	ldr	r3, [pc, #60]	; (1cac <_ZN6uart_t4readEv+0x40>)
char* uart_t::read() {
    1c70:	0005      	movs	r5, r0
    if(!m_used) return NULL;
    1c72:	5cc3      	ldrb	r3, [r0, r3]
    1c74:	2b00      	cmp	r3, #0
    1c76:	d102      	bne.n	1c7e <_ZN6uart_t4readEv+0x12>
    1c78:	2400      	movs	r4, #0
        data[i] = getc();

    data[avail] = '\0';
    
    return data;
}
    1c7a:	0020      	movs	r0, r4
    1c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    size_t avail = available();
    1c7e:	f7fe fa29 	bl	d4 <_ZN6uart_t9availableEv>
    1c82:	1e07      	subs	r7, r0, #0
    if(!avail) return NULL;
    1c84:	d0f8      	beq.n	1c78 <_ZN6uart_t4readEv+0xc>
    char* data = (char*)malloc(avail + 1);
    1c86:	3001      	adds	r0, #1
    1c88:	f000 fb34 	bl	22f4 <malloc>
    1c8c:	1e04      	subs	r4, r0, #0
    if(!data) return NULL;
    1c8e:	d0f3      	beq.n	1c78 <_ZN6uart_t4readEv+0xc>
    1c90:	0006      	movs	r6, r0
    1c92:	19c3      	adds	r3, r0, r7
    1c94:	9301      	str	r3, [sp, #4]
        data[i] = getc();
    1c96:	0028      	movs	r0, r5
    1c98:	f7ff ff80 	bl	1b9c <_ZN6uart_t4getcEv>
    for(size_t i = 0; i < avail; i++)
    1c9c:	9b01      	ldr	r3, [sp, #4]
        data[i] = getc();
    1c9e:	7030      	strb	r0, [r6, #0]
    for(size_t i = 0; i < avail; i++)
    1ca0:	3601      	adds	r6, #1
    1ca2:	429e      	cmp	r6, r3
    1ca4:	d1f7      	bne.n	1c96 <_ZN6uart_t4readEv+0x2a>
    data[avail] = '\0';
    1ca6:	2300      	movs	r3, #0
    1ca8:	55e3      	strb	r3, [r4, r7]
    return data;
    1caa:	e7e6      	b.n	1c7a <_ZN6uart_t4readEv+0xe>
    1cac:	00000205 	.word	0x00000205

00001cb0 <SERCOM0_Handler>:

void SERCOM0_Handler() {
    1cb0:	b510      	push	{r4, lr}
    g_uart0.sercom_handler();
    1cb2:	4802      	ldr	r0, [pc, #8]	; (1cbc <SERCOM0_Handler+0xc>)
    1cb4:	f7ff ff0c 	bl	1ad0 <_ZN6uart_t14sercom_handlerEv>
}
    1cb8:	bd10      	pop	{r4, pc}
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	200002c8 	.word	0x200002c8

00001cc0 <SERCOM1_Handler>:

void SERCOM1_Handler() {
    1cc0:	b510      	push	{r4, lr}
    g_uart1.sercom_handler();
    1cc2:	4802      	ldr	r0, [pc, #8]	; (1ccc <SERCOM1_Handler+0xc>)
    1cc4:	f7ff ff04 	bl	1ad0 <_ZN6uart_t14sercom_handlerEv>
    1cc8:	bd10      	pop	{r4, pc}
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	200004d4 	.word	0x200004d4

00001cd0 <_GLOBAL__sub_I_g_uart0>:
    1cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool m_used = false;

public:
    Sercom* m_sercom = NULL;
    
    uart_t(Sercom* sercom) { m_sercom = sercom; }
    1cd2:	2182      	movs	r1, #130	; 0x82
    1cd4:	2680      	movs	r6, #128	; 0x80
    1cd6:	2481      	movs	r4, #129	; 0x81
    1cd8:	2300      	movs	r3, #0
    1cda:	4a0a      	ldr	r2, [pc, #40]	; (1d04 <_GLOBAL__sub_I_g_uart0+0x34>)
    1cdc:	4d0a      	ldr	r5, [pc, #40]	; (1d08 <_GLOBAL__sub_I_g_uart0+0x38>)
    1cde:	480b      	ldr	r0, [pc, #44]	; (1d0c <_GLOBAL__sub_I_g_uart0+0x3c>)
    1ce0:	4f0b      	ldr	r7, [pc, #44]	; (1d10 <_GLOBAL__sub_I_g_uart0+0x40>)
    1ce2:	00b6      	lsls	r6, r6, #2
    1ce4:	00a4      	lsls	r4, r4, #2
    1ce6:	0089      	lsls	r1, r1, #2
    1ce8:	5393      	strh	r3, [r2, r6]
    1cea:	5413      	strb	r3, [r2, r0]
    1cec:	5353      	strh	r3, [r2, r5]
    1cee:	5057      	str	r7, [r2, r1]
    1cf0:	5513      	strb	r3, [r2, r4]
    1cf2:	4a08      	ldr	r2, [pc, #32]	; (1d14 <_GLOBAL__sub_I_g_uart0+0x44>)
    1cf4:	5393      	strh	r3, [r2, r6]
    1cf6:	5413      	strb	r3, [r2, r0]
    1cf8:	5353      	strh	r3, [r2, r5]
    1cfa:	5513      	strb	r3, [r2, r4]
    1cfc:	4b06      	ldr	r3, [pc, #24]	; (1d18 <_GLOBAL__sub_I_g_uart0+0x48>)
    1cfe:	5053      	str	r3, [r2, r1]
    1d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	200002c8 	.word	0x200002c8
    1d08:	00000202 	.word	0x00000202
    1d0c:	00000205 	.word	0x00000205
    1d10:	42000800 	.word	0x42000800
    1d14:	200004d4 	.word	0x200004d4
    1d18:	42000c00 	.word	0x42000c00

00001d1c <_ZN9SensornetC1ERK4RF24>:
extern "C" {
#include <systick.h>
}

Sensornet::Sensornet(const RF24& radio) :
    m_radio(radio)
    1d1c:	0003      	movs	r3, r0
Sensornet::Sensornet(const RF24& radio) :
    1d1e:	b530      	push	{r4, r5, lr}
    m_radio(radio)
    1d20:	c934      	ldmia	r1!, {r2, r4, r5}
    1d22:	c334      	stmia	r3!, {r2, r4, r5}
    1d24:	c934      	ldmia	r1!, {r2, r4, r5}
    1d26:	c334      	stmia	r3!, {r2, r4, r5}
    1d28:	c934      	ldmia	r1!, {r2, r4, r5}
    1d2a:	c334      	stmia	r3!, {r2, r4, r5}
    1d2c:	680a      	ldr	r2, [r1, #0]
    1d2e:	601a      	str	r2, [r3, #0]
    Vector() : m_size(0), m_data(NULL) {}
    1d30:	2300      	movs	r3, #0
    1d32:	6283      	str	r3, [r0, #40]	; 0x28
    1d34:	62c3      	str	r3, [r0, #44]	; 0x2c
    1d36:	6303      	str	r3, [r0, #48]	; 0x30
    1d38:	6343      	str	r3, [r0, #52]	; 0x34
        },
        millis()
    };

    m_nodes.push_back(node2);*/
}
    1d3a:	bd30      	pop	{r4, r5, pc}

00001d3c <_ZN9Sensornet5beginEv>:

bool Sensornet::begin() {
    1d3c:	b570      	push	{r4, r5, r6, lr}
    1d3e:	0004      	movs	r4, r0
    if(!m_radio.begin())
    1d40:	f7ff f9c6 	bl	10d0 <_ZN4RF245beginEv>
    1d44:	1e05      	subs	r5, r0, #0
    1d46:	d021      	beq.n	1d8c <_ZN9Sensornet5beginEv+0x50>
        return false;

    m_radio.setChannel(120);
    1d48:	2178      	movs	r1, #120	; 0x78
    1d4a:	0020      	movs	r0, r4
    1d4c:	f7ff f829 	bl	da2 <_ZN4RF2410setChannelEh>
    m_radio.setAutoAck(true);
    1d50:	2101      	movs	r1, #1
    1d52:	0020      	movs	r0, r4
    1d54:	f7ff f97a 	bl	104c <_ZN4RF2410setAutoAckEb>
    //m_radio.enableAckPayload();
    m_radio.setRetries(5, 15);
    1d58:	220f      	movs	r2, #15
    1d5a:	2105      	movs	r1, #5
    1d5c:	0020      	movs	r0, r4
    1d5e:	f7ff fa3b 	bl	11d8 <_ZN4RF2410setRetriesEhh>
    m_radio.setPayloadSize(32);
    1d62:	2120      	movs	r1, #32
    1d64:	0020      	movs	r0, r4
    1d66:	f7ff f825 	bl	db4 <_ZN4RF2414setPayloadSizeEh>

    m_radio.setPALevel(RF24_PA_MAX);
    1d6a:	2103      	movs	r1, #3
    1d6c:	0020      	movs	r0, r4
    1d6e:	f7ff f976 	bl	105e <_ZN4RF2410setPALevelEh>
    m_radio.setDataRate(RF24_1MBPS);
    1d72:	2100      	movs	r1, #0
    1d74:	0020      	movs	r0, r4
    1d76:	f7ff f986 	bl	1086 <_ZN4RF2411setDataRateE15rf24_datarate_e>

    // Open pipe 1 for reading on address 255
    m_radio.openReadingPipe(1, (uint64_t)255 | (1 << 10));
    1d7a:	0020      	movs	r0, r4
    1d7c:	2300      	movs	r3, #0
    1d7e:	2101      	movs	r1, #1
    1d80:	4a03      	ldr	r2, [pc, #12]	; (1d90 <_ZN9Sensornet5beginEv+0x54>)
    1d82:	f7ff f8d9 	bl	f38 <_ZN4RF2415openReadingPipeEhy>

    m_radio.startListening();
    1d86:	0020      	movs	r0, r4
    1d88:	f7ff f920 	bl	fcc <_ZN4RF2414startListeningEv>

    return true;
}
    1d8c:	0028      	movs	r0, r5
    1d8e:	bd70      	pop	{r4, r5, r6, pc}
    1d90:	000004ff 	.word	0x000004ff

00001d94 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>:
        return m_data + m_size;
    1d94:	2224      	movs	r2, #36	; 0x24
            }
        }
    }
}

void Sensornet::UpdateNode(const SensorPacket& pkt) {
    1d96:	b570      	push	{r4, r5, r6, lr}
    1d98:	0005      	movs	r5, r0
    1d9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1d9c:	b08a      	sub	sp, #40	; 0x28
    1d9e:	435a      	muls	r2, r3
    1da0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    1da2:	189a      	adds	r2, r3, r2
    1da4:	001c      	movs	r4, r3
    for(auto& node : m_nodes) {
    1da6:	4293      	cmp	r3, r2
    1da8:	d00f      	beq.n	1dca <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x36>
        if(node.data.id == pkt.id) {
    1daa:	2600      	movs	r6, #0
    1dac:	2000      	movs	r0, #0
    1dae:	57a6      	ldrsb	r6, [r4, r6]
    1db0:	5608      	ldrsb	r0, [r1, r0]
    1db2:	3324      	adds	r3, #36	; 0x24
    1db4:	4286      	cmp	r6, r0
    1db6:	d1f5      	bne.n	1da4 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x10>
            memcpy(&node.data, &pkt, sizeof(SensorPacket));
    1db8:	2220      	movs	r2, #32
    1dba:	0020      	movs	r0, r4
    1dbc:	f000 faae 	bl	231c <memcpy>
            node.last_seen = millis();
    1dc0:	f7ff fdd8 	bl	1974 <millis>
    1dc4:	6220      	str	r0, [r4, #32]
            return;
        }
    }

    m_nodes.push_back({ pkt, millis() });
}
    1dc6:	b00a      	add	sp, #40	; 0x28
    1dc8:	bd70      	pop	{r4, r5, r6, pc}
    m_nodes.push_back({ pkt, millis() });
    1dca:	ac01      	add	r4, sp, #4
    1dcc:	2220      	movs	r2, #32
    1dce:	0020      	movs	r0, r4
    1dd0:	f000 faa4 	bl	231c <memcpy>
    1dd4:	f7ff fdce 	bl	1974 <millis>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1dd8:	6b29      	ldr	r1, [r5, #48]	; 0x30
    1dda:	0006      	movs	r6, r0
    1ddc:	2900      	cmp	r1, #0
    1dde:	d018      	beq.n	1e12 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x7e>
    1de0:	2324      	movs	r3, #36	; 0x24
    1de2:	3101      	adds	r1, #1
    1de4:	4359      	muls	r1, r3
    1de6:	6b68      	ldr	r0, [r5, #52]	; 0x34
    1de8:	f000 fb60 	bl	24ac <realloc>
        if(!new_data) return;
    1dec:	2800      	cmp	r0, #0
    1dee:	d0ea      	beq.n	1dc6 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x32>
        *(m_data + m_size) = elem;
    1df0:	2224      	movs	r2, #36	; 0x24
    1df2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        m_data = new_data;
    1df4:	6368      	str	r0, [r5, #52]	; 0x34
        *(m_data + m_size) = elem;
    1df6:	435a      	muls	r2, r3
    1df8:	9609      	str	r6, [sp, #36]	; 0x24
    1dfa:	1882      	adds	r2, r0, r2
    1dfc:	cc0b      	ldmia	r4!, {r0, r1, r3}
    1dfe:	c20b      	stmia	r2!, {r0, r1, r3}
    1e00:	0011      	movs	r1, r2
    1e02:	cc0d      	ldmia	r4!, {r0, r2, r3}
    1e04:	c10d      	stmia	r1!, {r0, r2, r3}
    1e06:	cc0d      	ldmia	r4!, {r0, r2, r3}
    1e08:	c10d      	stmia	r1!, {r0, r2, r3}
        m_size++;
    1e0a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    1e0c:	3301      	adds	r3, #1
    1e0e:	632b      	str	r3, [r5, #48]	; 0x30
    1e10:	e7d9      	b.n	1dc6 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x32>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1e12:	2024      	movs	r0, #36	; 0x24
    1e14:	f000 fa6e 	bl	22f4 <malloc>
    1e18:	e7e8      	b.n	1dec <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x58>

00001e1a <_ZN9Sensornet13ProcessPacketER12SensorPacket>:
    if(pkt.id == 0) {
    1e1a:	2300      	movs	r3, #0
void Sensornet::ProcessPacket(SensorPacket& pkt) {
    1e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(pkt.id == 0) {
    1e1e:	56cb      	ldrsb	r3, [r1, r3]
void Sensornet::ProcessPacket(SensorPacket& pkt) {
    1e20:	0004      	movs	r4, r0
    1e22:	000d      	movs	r5, r1
    if(pkt.id == 0) {
    1e24:	2b00      	cmp	r3, #0
    1e26:	d13a      	bne.n	1e9e <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x84>
        pkt.id = 1;
    1e28:	3301      	adds	r3, #1
    1e2a:	700b      	strb	r3, [r1, #0]
        return m_data + m_size;
    1e2c:	6b02      	ldr	r2, [r0, #48]	; 0x30
    1e2e:	3323      	adds	r3, #35	; 0x23
    1e30:	4353      	muls	r3, r2
    1e32:	6b42      	ldr	r2, [r0, #52]	; 0x34
            if(strncmp(node.data.name, pkt.name, sizeof(SensorPacket::name)) == 0) {
    1e34:	2708      	movs	r7, #8
    1e36:	0016      	movs	r6, r2
    1e38:	18d3      	adds	r3, r2, r3
    1e3a:	9300      	str	r3, [sp, #0]
    1e3c:	1c4b      	adds	r3, r1, #1
    1e3e:	9301      	str	r3, [sp, #4]
        for(auto& node : m_nodes) {
    1e40:	9b00      	ldr	r3, [sp, #0]
    1e42:	42b3      	cmp	r3, r6
    1e44:	d009      	beq.n	1e5a <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x40>
            if(strncmp(node.data.name, pkt.name, sizeof(SensorPacket::name)) == 0) {
    1e46:	003a      	movs	r2, r7
    1e48:	9901      	ldr	r1, [sp, #4]
    1e4a:	1c70      	adds	r0, r6, #1
    1e4c:	f000 fbbf 	bl	25ce <strncmp>
    1e50:	2300      	movs	r3, #0
    1e52:	56f3      	ldrsb	r3, [r6, r3]
    1e54:	2800      	cmp	r0, #0
    1e56:	d11a      	bne.n	1e8e <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x74>
                pkt.id = node.data.id;
    1e58:	702b      	strb	r3, [r5, #0]
        UpdateNode(pkt);
    1e5a:	0029      	movs	r1, r5
    1e5c:	0020      	movs	r0, r4
    1e5e:	f7ff ff99 	bl	1d94 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
        m_radio.stopListening();
    1e62:	0020      	movs	r0, r4
    1e64:	f7fe ffac 	bl	dc0 <_ZN4RF2413stopListeningEv>
        pkt.type = Sensors::TYPE_COMMAND;
    1e68:	23ff      	movs	r3, #255	; 0xff
        m_radio.openWritingPipe((uint64_t)0 | (1 << 10));
    1e6a:	2280      	movs	r2, #128	; 0x80
        pkt.type = Sensors::TYPE_COMMAND;
    1e6c:	726b      	strb	r3, [r5, #9]
        pkt.data[0] = Sensors::COMMAND_SET_ID;
    1e6e:	3bfe      	subs	r3, #254	; 0xfe
        m_radio.openWritingPipe((uint64_t)0 | (1 << 10));
    1e70:	0020      	movs	r0, r4
        pkt.data[0] = Sensors::COMMAND_SET_ID;
    1e72:	72ab      	strb	r3, [r5, #10]
        m_radio.openWritingPipe((uint64_t)0 | (1 << 10));
    1e74:	00d2      	lsls	r2, r2, #3
    1e76:	2300      	movs	r3, #0
    1e78:	f7ff f848 	bl	f0c <_ZN4RF2415openWritingPipeEy>
        m_radio.write(&pkt, 32);
    1e7c:	2220      	movs	r2, #32
    1e7e:	0029      	movs	r1, r5
    1e80:	0020      	movs	r0, r4
    1e82:	f7ff f81a 	bl	eba <_ZN4RF245writeEPKvh>
        m_radio.startListening();
    1e86:	0020      	movs	r0, r4
    1e88:	f7ff f8a0 	bl	fcc <_ZN4RF2414startListeningEv>
}
    1e8c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            if(node.data.id >= pkt.id) pkt.id = node.data.id + 1;
    1e8e:	2200      	movs	r2, #0
    1e90:	56aa      	ldrsb	r2, [r5, r2]
    1e92:	429a      	cmp	r2, r3
    1e94:	dc01      	bgt.n	1e9a <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x80>
    1e96:	3301      	adds	r3, #1
    1e98:	702b      	strb	r3, [r5, #0]
        for(auto& node : m_nodes) {
    1e9a:	3624      	adds	r6, #36	; 0x24
    1e9c:	e7d0      	b.n	1e40 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x26>
        UpdateNode(pkt);
    1e9e:	f7ff ff79 	bl	1d94 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
        for(size_t i = 0; i < m_cmd_queue.size(); i++) {
    1ea2:	2600      	movs	r6, #0
    1ea4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ea6:	429e      	cmp	r6, r3
    1ea8:	d2f0      	bcs.n	1e8c <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x72>
        return *(m_data + idx);
    1eaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1eac:	0177      	lsls	r7, r6, #5
    1eae:	19da      	adds	r2, r3, r7
    1eb0:	9200      	str	r2, [sp, #0]
            if(cmd.id == pkt.id) {
    1eb2:	57da      	ldrsb	r2, [r3, r7]
    1eb4:	2300      	movs	r3, #0
    1eb6:	56eb      	ldrsb	r3, [r5, r3]
    1eb8:	429a      	cmp	r2, r3
    1eba:	d130      	bne.n	1f1e <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x104>
                m_radio.stopListening();
    1ebc:	0020      	movs	r0, r4
    1ebe:	f7fe ff7f 	bl	dc0 <_ZN4RF2413stopListeningEv>
                m_radio.openWritingPipe((uint64_t)cmd.id | (1 << 10));
    1ec2:	2200      	movs	r2, #0
    1ec4:	2180      	movs	r1, #128	; 0x80
    1ec6:	9b00      	ldr	r3, [sp, #0]
    1ec8:	00c9      	lsls	r1, r1, #3
    1eca:	569a      	ldrsb	r2, [r3, r2]
    1ecc:	0020      	movs	r0, r4
    1ece:	17d3      	asrs	r3, r2, #31
    1ed0:	430a      	orrs	r2, r1
    1ed2:	f7ff f81b 	bl	f0c <_ZN4RF2415openWritingPipeEy>
                m_radio.write(&cmd, 32);
    1ed6:	2220      	movs	r2, #32
    1ed8:	9900      	ldr	r1, [sp, #0]
    1eda:	0020      	movs	r0, r4
    1edc:	f7fe ffed 	bl	eba <_ZN4RF245writeEPKvh>
                m_radio.startListening();
    1ee0:	0020      	movs	r0, r4
    1ee2:	f7ff f873 	bl	fcc <_ZN4RF2414startListeningEv>
    }

    void erase(T* it) {
        if(!m_size || it < begin() || it >= end()) return;
    1ee6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1ee8:	2a00      	cmp	r2, #0
    1eea:	d017      	beq.n	1f1c <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x102>
                m_cmd_queue.erase(m_cmd_queue.begin() + i);
    1eec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1eee:	19d8      	adds	r0, r3, r7
    1ef0:	4298      	cmp	r0, r3
    1ef2:	d313      	bcc.n	1f1c <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x102>
        return m_data + m_size;
    1ef4:	0152      	lsls	r2, r2, #5
    1ef6:	189b      	adds	r3, r3, r2
        if(!m_size || it < begin() || it >= end()) return;
    1ef8:	4298      	cmp	r0, r3
    1efa:	d20f      	bcs.n	1f1c <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x102>

        memcpy(it, it + 1, m_size * sizeof(T) - (it - begin()) - 1 * sizeof(T));
    1efc:	0001      	movs	r1, r0
    1efe:	117f      	asrs	r7, r7, #5
    1f00:	3a20      	subs	r2, #32
    1f02:	1bd2      	subs	r2, r2, r7
    1f04:	3120      	adds	r1, #32
    1f06:	f000 fa09 	bl	231c <memcpy>

        m_size -= 1;
    1f0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f0c:	1e5f      	subs	r7, r3, #1
    1f0e:	62a7      	str	r7, [r4, #40]	; 0x28
        if(!m_size) {
    1f10:	2f00      	cmp	r7, #0
    1f12:	d106      	bne.n	1f22 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x108>
            free(m_data);
    1f14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1f16:	f000 f9f7 	bl	2308 <free>
            m_data = NULL;
    1f1a:	62e7      	str	r7, [r4, #44]	; 0x2c
                i--;
    1f1c:	3e01      	subs	r6, #1
        for(size_t i = 0; i < m_cmd_queue.size(); i++) {
    1f1e:	3601      	adds	r6, #1
    1f20:	e7c0      	b.n	1ea4 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x8a>
            return;
        }

        auto new_data = (T*)realloc(m_data, m_size * sizeof(T));
    1f22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1f24:	0179      	lsls	r1, r7, #5
    1f26:	f000 fac1 	bl	24ac <realloc>
        if(!new_data) return;
    1f2a:	2800      	cmp	r0, #0
    1f2c:	d0f6      	beq.n	1f1c <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x102>
        m_data = new_data;
    1f2e:	62e0      	str	r0, [r4, #44]	; 0x2c
    1f30:	e7f4      	b.n	1f1c <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x102>

00001f32 <_ZN9Sensornet4PollEv>:
void Sensornet::Poll() {
    1f32:	b510      	push	{r4, lr}
    1f34:	b088      	sub	sp, #32
    1f36:	0004      	movs	r4, r0
    if(m_radio.available()) {
    1f38:	f7fe ffd9 	bl	eee <_ZN4RF249availableEv>
    1f3c:	2800      	cmp	r0, #0
    1f3e:	d00b      	beq.n	1f58 <_ZN9Sensornet4PollEv+0x26>
        m_radio.read(&pkt, 32);
    1f40:	2220      	movs	r2, #32
    1f42:	4669      	mov	r1, sp
    1f44:	0020      	movs	r0, r4
    1f46:	f7fe ffd7 	bl	ef8 <_ZN4RF244readEPvh>
        ProcessPacket(pkt);
    1f4a:	0020      	movs	r0, r4
    1f4c:	4669      	mov	r1, sp
    1f4e:	f7ff ff64 	bl	1e1a <_ZN9Sensornet13ProcessPacketER12SensorPacket>
        m_radio.flush_rx();
    1f52:	0020      	movs	r0, r4
    1f54:	f7fe fefa 	bl	d4c <_ZN4RF248flush_rxEv>
}
    1f58:	b008      	add	sp, #32
    1f5a:	bd10      	pop	{r4, pc}

00001f5c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_>:

void Sensornet::CMDSetName(GSM* gsm, const char* sender, const char* c_args) {
    1f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f5e:	b08b      	sub	sp, #44	; 0x2c
    1f60:	0005      	movs	r5, r0
    1f62:	0017      	movs	r7, r2
    1f64:	1e1e      	subs	r6, r3, #0
    1f66:	9100      	str	r1, [sp, #0]
    char* id_str = NULL;
    char* name = NULL;
    char* args = NULL;

    if(c_args) {
    1f68:	d055      	beq.n	2016 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xba>
        args = (char*)malloc(strlen(c_args));
    1f6a:	0018      	movs	r0, r3
    1f6c:	f000 fb28 	bl	25c0 <strlen>
    1f70:	f000 f9c0 	bl	22f4 <malloc>
    1f74:	1e04      	subs	r4, r0, #0
        if(!args) {
    1f76:	d106      	bne.n	1f86 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x2a>
            gsm->SendSMS(sender, "malloc failed");
    1f78:	0039      	movs	r1, r7
    1f7a:	4a2b      	ldr	r2, [pc, #172]	; (2028 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xcc>)
    1f7c:	9800      	ldr	r0, [sp, #0]
    1f7e:	f7fe f973 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    } else {
        gsm->SendSMS(sender, "Usage: setname <id> <new name>");
    }

    if(args) free(args);
    1f82:	b00b      	add	sp, #44	; 0x2c
    1f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        strcpy(args, c_args);
    1f86:	0031      	movs	r1, r6
    1f88:	f000 fb12 	bl	25b0 <strcpy>
        id_str = strtok(args, " ");
    1f8c:	4927      	ldr	r1, [pc, #156]	; (202c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xd0>)
    1f8e:	0020      	movs	r0, r4
    1f90:	f000 fb58 	bl	2644 <strtok>
        name = strtok(NULL, " ");
    1f94:	4925      	ldr	r1, [pc, #148]	; (202c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xd0>)
        id_str = strtok(args, " ");
    1f96:	0006      	movs	r6, r0
        name = strtok(NULL, " ");
    1f98:	2000      	movs	r0, #0
    1f9a:	f000 fb53 	bl	2644 <strtok>
    1f9e:	9001      	str	r0, [sp, #4]
    if(id_str && name && atoi(id_str)) {
    1fa0:	2e00      	cmp	r6, #0
    1fa2:	d039      	beq.n	2018 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xbc>
    1fa4:	2800      	cmp	r0, #0
    1fa6:	d037      	beq.n	2018 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xbc>
    1fa8:	0030      	movs	r0, r6
    1faa:	f000 f961 	bl	2270 <atoi>
    1fae:	2800      	cmp	r0, #0
    1fb0:	d032      	beq.n	2018 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xbc>
        cmd.id = atoi(id_str);
    1fb2:	0030      	movs	r0, r6
    1fb4:	f000 f95c 	bl	2270 <atoi>
    1fb8:	ab02      	add	r3, sp, #8
    1fba:	7018      	strb	r0, [r3, #0]
        cmd.type = Sensors::TYPE_COMMAND;
    1fbc:	23ff      	movs	r3, #255	; 0xff
    1fbe:	aa02      	add	r2, sp, #8
    1fc0:	7253      	strb	r3, [r2, #9]
        cmd.data[0] = Sensors::COMMAND_SET_NAME;
    1fc2:	3bfd      	subs	r3, #253	; 0xfd
    1fc4:	7293      	strb	r3, [r2, #10]
        strncpy(cmd.name, name, sizeof(cmd.name));
    1fc6:	ab02      	add	r3, sp, #8
    1fc8:	9901      	ldr	r1, [sp, #4]
    1fca:	2208      	movs	r2, #8
    1fcc:	1c58      	adds	r0, r3, #1
    1fce:	f000 fb0f 	bl	25f0 <strncpy>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1fd2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    1fd4:	2900      	cmp	r1, #0
    1fd6:	d01a      	beq.n	200e <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xb2>
    1fd8:	3101      	adds	r1, #1
    1fda:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    1fdc:	0149      	lsls	r1, r1, #5
    1fde:	f000 fa65 	bl	24ac <realloc>
        if(!new_data) return;
    1fe2:	2800      	cmp	r0, #0
    1fe4:	d00a      	beq.n	1ffc <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xa0>
        *(m_data + m_size) = elem;
    1fe6:	6aab      	ldr	r3, [r5, #40]	; 0x28
        m_data = new_data;
    1fe8:	62e8      	str	r0, [r5, #44]	; 0x2c
        *(m_data + m_size) = elem;
    1fea:	015b      	lsls	r3, r3, #5
    1fec:	18c0      	adds	r0, r0, r3
    1fee:	2220      	movs	r2, #32
    1ff0:	a902      	add	r1, sp, #8
    1ff2:	f000 f993 	bl	231c <memcpy>
        m_size++;
    1ff6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1ff8:	3301      	adds	r3, #1
    1ffa:	62ab      	str	r3, [r5, #40]	; 0x28
        gsm->SendSMS(sender, "Command queued");
    1ffc:	0039      	movs	r1, r7
    1ffe:	4a0c      	ldr	r2, [pc, #48]	; (2030 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xd4>)
    2000:	9800      	ldr	r0, [sp, #0]
    2002:	f7fe f931 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
    2006:	0020      	movs	r0, r4
    2008:	f000 f97e 	bl	2308 <free>
    200c:	e7b9      	b.n	1f82 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x26>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    200e:	2020      	movs	r0, #32
    2010:	f000 f970 	bl	22f4 <malloc>
    2014:	e7e5      	b.n	1fe2 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x86>
    char* args = NULL;
    2016:	001c      	movs	r4, r3
        gsm->SendSMS(sender, "Usage: setname <id> <new name>");
    2018:	0039      	movs	r1, r7
    201a:	4a06      	ldr	r2, [pc, #24]	; (2034 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xd8>)
    201c:	9800      	ldr	r0, [sp, #0]
    201e:	f7fe f923 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
    2022:	2c00      	cmp	r4, #0
    2024:	d0ad      	beq.n	1f82 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x26>
    2026:	e7ee      	b.n	2006 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xaa>
    2028:	00003064 	.word	0x00003064
    202c:	000034fc 	.word	0x000034fc
    2030:	00003366 	.word	0x00003366
    2034:	00003375 	.word	0x00003375

00002038 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
    2038:	e7fe      	b.n	2038 <Dummy_Handler>
    203a:	Address 0x0000203a is out of bounds.


0000203c <Reset_Handler>:
        if (pSrc != pDest) {
    203c:	4a1c      	ldr	r2, [pc, #112]	; (20b0 <Reset_Handler+0x74>)
    203e:	4b1d      	ldr	r3, [pc, #116]	; (20b4 <Reset_Handler+0x78>)
{
    2040:	b510      	push	{r4, lr}
                for (; pDest < &_edata;) {
    2042:	491d      	ldr	r1, [pc, #116]	; (20b8 <Reset_Handler+0x7c>)
        if (pSrc != pDest) {
    2044:	429a      	cmp	r2, r3
    2046:	d12e      	bne.n	20a6 <Reset_Handler+0x6a>
                *pDest++ = 0;
    2048:	2100      	movs	r1, #0
    204a:	4b1c      	ldr	r3, [pc, #112]	; (20bc <Reset_Handler+0x80>)
        for (pDest = &_bss; pDest < &_ebss;) {
    204c:	4a1c      	ldr	r2, [pc, #112]	; (20c0 <Reset_Handler+0x84>)
    204e:	4293      	cmp	r3, r2
    2050:	d32c      	bcc.n	20ac <Reset_Handler+0x70>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2052:	227f      	movs	r2, #127	; 0x7f
    2054:	4b1b      	ldr	r3, [pc, #108]	; (20c4 <Reset_Handler+0x88>)
        DMAC->QOSCTRL.bit.DQOS = 2;
    2056:	2030      	movs	r0, #48	; 0x30
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2058:	4393      	bics	r3, r2
    205a:	4a1b      	ldr	r2, [pc, #108]	; (20c8 <Reset_Handler+0x8c>)
    205c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    205e:	2202      	movs	r2, #2
    2060:	4b1a      	ldr	r3, [pc, #104]	; (20cc <Reset_Handler+0x90>)
    2062:	625a      	str	r2, [r3, #36]	; 0x24
        DMAC->QOSCTRL.bit.DQOS = 2;
    2064:	4b1a      	ldr	r3, [pc, #104]	; (20d0 <Reset_Handler+0x94>)
    2066:	7b99      	ldrb	r1, [r3, #14]
    2068:	4381      	bics	r1, r0
    206a:	0008      	movs	r0, r1
    206c:	2120      	movs	r1, #32
    206e:	4301      	orrs	r1, r0
        DMAC->QOSCTRL.bit.FQOS = 2;
    2070:	200c      	movs	r0, #12
        DMAC->QOSCTRL.bit.DQOS = 2;
    2072:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2074:	7b99      	ldrb	r1, [r3, #14]
    2076:	4381      	bics	r1, r0
    2078:	0008      	movs	r0, r1
    207a:	2108      	movs	r1, #8
    207c:	4301      	orrs	r1, r0
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    207e:	2003      	movs	r0, #3
        DMAC->QOSCTRL.bit.FQOS = 2;
    2080:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2082:	7b99      	ldrb	r1, [r3, #14]
    2084:	4381      	bics	r1, r0
    2086:	430a      	orrs	r2, r1
    2088:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    208a:	2380      	movs	r3, #128	; 0x80
    208c:	4a11      	ldr	r2, [pc, #68]	; (20d4 <Reset_Handler+0x98>)
    208e:	6851      	ldr	r1, [r2, #4]
    2090:	430b      	orrs	r3, r1
    2092:	6053      	str	r3, [r2, #4]
        systick_init();
    2094:	f7ff fbb6 	bl	1804 <systick_init>
        __libc_init_array();
    2098:	f000 f908 	bl	22ac <__libc_init_array>
        main();
    209c:	f7ff fa22 	bl	14e4 <main>
        while (1);
    20a0:	e7fe      	b.n	20a0 <Reset_Handler+0x64>
                        *pDest++ = *pSrc++;
    20a2:	ca01      	ldmia	r2!, {r0}
    20a4:	c301      	stmia	r3!, {r0}
                for (; pDest < &_edata;) {
    20a6:	428b      	cmp	r3, r1
    20a8:	d3fb      	bcc.n	20a2 <Reset_Handler+0x66>
    20aa:	e7cd      	b.n	2048 <Reset_Handler+0xc>
                *pDest++ = 0;
    20ac:	c302      	stmia	r3!, {r1}
    20ae:	e7ce      	b.n	204e <Reset_Handler+0x12>
    20b0:	0000357c 	.word	0x0000357c
    20b4:	20000000 	.word	0x20000000
    20b8:	2000024c 	.word	0x2000024c
    20bc:	20000250 	.word	0x20000250
    20c0:	200006fc 	.word	0x200006fc
    20c4:	00000000 	.word	0x00000000
    20c8:	e000ed00 	.word	0xe000ed00
    20cc:	410070fc 	.word	0x410070fc
    20d0:	41004800 	.word	0x41004800
    20d4:	41004000 	.word	0x41004000

000020d8 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    20d8:	4a05      	ldr	r2, [pc, #20]	; (20f0 <_sbrk+0x18>)
{
    20da:	0003      	movs	r3, r0
	if (heap == NULL) {
    20dc:	6811      	ldr	r1, [r2, #0]
    20de:	2900      	cmp	r1, #0
    20e0:	d101      	bne.n	20e6 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    20e2:	4904      	ldr	r1, [pc, #16]	; (20f4 <_sbrk+0x1c>)
    20e4:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    20e6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    20e8:	18c3      	adds	r3, r0, r3
    20ea:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    20ec:	4770      	bx	lr
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	200006e0 	.word	0x200006e0
    20f4:	200006fc 	.word	0x200006fc

000020f8 <__aeabi_atexit>:
    20f8:	0003      	movs	r3, r0
    20fa:	b510      	push	{r4, lr}
    20fc:	0008      	movs	r0, r1
    20fe:	0019      	movs	r1, r3
    2100:	f000 f8c6 	bl	2290 <__cxa_atexit>
    2104:	bd10      	pop	{r4, pc}
    2106:	Address 0x00002106 is out of bounds.


00002108 <__udivsi3>:
    2108:	2200      	movs	r2, #0
    210a:	0843      	lsrs	r3, r0, #1
    210c:	428b      	cmp	r3, r1
    210e:	d374      	bcc.n	21fa <__udivsi3+0xf2>
    2110:	0903      	lsrs	r3, r0, #4
    2112:	428b      	cmp	r3, r1
    2114:	d35f      	bcc.n	21d6 <__udivsi3+0xce>
    2116:	0a03      	lsrs	r3, r0, #8
    2118:	428b      	cmp	r3, r1
    211a:	d344      	bcc.n	21a6 <__udivsi3+0x9e>
    211c:	0b03      	lsrs	r3, r0, #12
    211e:	428b      	cmp	r3, r1
    2120:	d328      	bcc.n	2174 <__udivsi3+0x6c>
    2122:	0c03      	lsrs	r3, r0, #16
    2124:	428b      	cmp	r3, r1
    2126:	d30d      	bcc.n	2144 <__udivsi3+0x3c>
    2128:	22ff      	movs	r2, #255	; 0xff
    212a:	0209      	lsls	r1, r1, #8
    212c:	ba12      	rev	r2, r2
    212e:	0c03      	lsrs	r3, r0, #16
    2130:	428b      	cmp	r3, r1
    2132:	d302      	bcc.n	213a <__udivsi3+0x32>
    2134:	1212      	asrs	r2, r2, #8
    2136:	0209      	lsls	r1, r1, #8
    2138:	d065      	beq.n	2206 <__udivsi3+0xfe>
    213a:	0b03      	lsrs	r3, r0, #12
    213c:	428b      	cmp	r3, r1
    213e:	d319      	bcc.n	2174 <__udivsi3+0x6c>
    2140:	e000      	b.n	2144 <__udivsi3+0x3c>
    2142:	0a09      	lsrs	r1, r1, #8
    2144:	0bc3      	lsrs	r3, r0, #15
    2146:	428b      	cmp	r3, r1
    2148:	d301      	bcc.n	214e <__udivsi3+0x46>
    214a:	03cb      	lsls	r3, r1, #15
    214c:	1ac0      	subs	r0, r0, r3
    214e:	4152      	adcs	r2, r2
    2150:	0b83      	lsrs	r3, r0, #14
    2152:	428b      	cmp	r3, r1
    2154:	d301      	bcc.n	215a <__udivsi3+0x52>
    2156:	038b      	lsls	r3, r1, #14
    2158:	1ac0      	subs	r0, r0, r3
    215a:	4152      	adcs	r2, r2
    215c:	0b43      	lsrs	r3, r0, #13
    215e:	428b      	cmp	r3, r1
    2160:	d301      	bcc.n	2166 <__udivsi3+0x5e>
    2162:	034b      	lsls	r3, r1, #13
    2164:	1ac0      	subs	r0, r0, r3
    2166:	4152      	adcs	r2, r2
    2168:	0b03      	lsrs	r3, r0, #12
    216a:	428b      	cmp	r3, r1
    216c:	d301      	bcc.n	2172 <__udivsi3+0x6a>
    216e:	030b      	lsls	r3, r1, #12
    2170:	1ac0      	subs	r0, r0, r3
    2172:	4152      	adcs	r2, r2
    2174:	0ac3      	lsrs	r3, r0, #11
    2176:	428b      	cmp	r3, r1
    2178:	d301      	bcc.n	217e <__udivsi3+0x76>
    217a:	02cb      	lsls	r3, r1, #11
    217c:	1ac0      	subs	r0, r0, r3
    217e:	4152      	adcs	r2, r2
    2180:	0a83      	lsrs	r3, r0, #10
    2182:	428b      	cmp	r3, r1
    2184:	d301      	bcc.n	218a <__udivsi3+0x82>
    2186:	028b      	lsls	r3, r1, #10
    2188:	1ac0      	subs	r0, r0, r3
    218a:	4152      	adcs	r2, r2
    218c:	0a43      	lsrs	r3, r0, #9
    218e:	428b      	cmp	r3, r1
    2190:	d301      	bcc.n	2196 <__udivsi3+0x8e>
    2192:	024b      	lsls	r3, r1, #9
    2194:	1ac0      	subs	r0, r0, r3
    2196:	4152      	adcs	r2, r2
    2198:	0a03      	lsrs	r3, r0, #8
    219a:	428b      	cmp	r3, r1
    219c:	d301      	bcc.n	21a2 <__udivsi3+0x9a>
    219e:	020b      	lsls	r3, r1, #8
    21a0:	1ac0      	subs	r0, r0, r3
    21a2:	4152      	adcs	r2, r2
    21a4:	d2cd      	bcs.n	2142 <__udivsi3+0x3a>
    21a6:	09c3      	lsrs	r3, r0, #7
    21a8:	428b      	cmp	r3, r1
    21aa:	d301      	bcc.n	21b0 <__udivsi3+0xa8>
    21ac:	01cb      	lsls	r3, r1, #7
    21ae:	1ac0      	subs	r0, r0, r3
    21b0:	4152      	adcs	r2, r2
    21b2:	0983      	lsrs	r3, r0, #6
    21b4:	428b      	cmp	r3, r1
    21b6:	d301      	bcc.n	21bc <__udivsi3+0xb4>
    21b8:	018b      	lsls	r3, r1, #6
    21ba:	1ac0      	subs	r0, r0, r3
    21bc:	4152      	adcs	r2, r2
    21be:	0943      	lsrs	r3, r0, #5
    21c0:	428b      	cmp	r3, r1
    21c2:	d301      	bcc.n	21c8 <__udivsi3+0xc0>
    21c4:	014b      	lsls	r3, r1, #5
    21c6:	1ac0      	subs	r0, r0, r3
    21c8:	4152      	adcs	r2, r2
    21ca:	0903      	lsrs	r3, r0, #4
    21cc:	428b      	cmp	r3, r1
    21ce:	d301      	bcc.n	21d4 <__udivsi3+0xcc>
    21d0:	010b      	lsls	r3, r1, #4
    21d2:	1ac0      	subs	r0, r0, r3
    21d4:	4152      	adcs	r2, r2
    21d6:	08c3      	lsrs	r3, r0, #3
    21d8:	428b      	cmp	r3, r1
    21da:	d301      	bcc.n	21e0 <__udivsi3+0xd8>
    21dc:	00cb      	lsls	r3, r1, #3
    21de:	1ac0      	subs	r0, r0, r3
    21e0:	4152      	adcs	r2, r2
    21e2:	0883      	lsrs	r3, r0, #2
    21e4:	428b      	cmp	r3, r1
    21e6:	d301      	bcc.n	21ec <__udivsi3+0xe4>
    21e8:	008b      	lsls	r3, r1, #2
    21ea:	1ac0      	subs	r0, r0, r3
    21ec:	4152      	adcs	r2, r2
    21ee:	0843      	lsrs	r3, r0, #1
    21f0:	428b      	cmp	r3, r1
    21f2:	d301      	bcc.n	21f8 <__udivsi3+0xf0>
    21f4:	004b      	lsls	r3, r1, #1
    21f6:	1ac0      	subs	r0, r0, r3
    21f8:	4152      	adcs	r2, r2
    21fa:	1a41      	subs	r1, r0, r1
    21fc:	d200      	bcs.n	2200 <__udivsi3+0xf8>
    21fe:	4601      	mov	r1, r0
    2200:	4152      	adcs	r2, r2
    2202:	4610      	mov	r0, r2
    2204:	4770      	bx	lr
    2206:	e7ff      	b.n	2208 <__udivsi3+0x100>
    2208:	b501      	push	{r0, lr}
    220a:	2000      	movs	r0, #0
    220c:	f000 f806 	bl	221c <__aeabi_idiv0>
    2210:	bd02      	pop	{r1, pc}
    2212:	46c0      	nop			; (mov r8, r8)

00002214 <__aeabi_uidivmod>:
    2214:	2900      	cmp	r1, #0
    2216:	d0f7      	beq.n	2208 <__udivsi3+0x100>
    2218:	e776      	b.n	2108 <__udivsi3>
    221a:	4770      	bx	lr

0000221c <__aeabi_idiv0>:
    221c:	4770      	bx	lr
    221e:	46c0      	nop			; (mov r8, r8)

00002220 <__aeabi_lmul>:
    2220:	b5f0      	push	{r4, r5, r6, r7, lr}
    2222:	0415      	lsls	r5, r2, #16
    2224:	0c2d      	lsrs	r5, r5, #16
    2226:	000f      	movs	r7, r1
    2228:	0001      	movs	r1, r0
    222a:	002e      	movs	r6, r5
    222c:	46c6      	mov	lr, r8
    222e:	4684      	mov	ip, r0
    2230:	0400      	lsls	r0, r0, #16
    2232:	0c14      	lsrs	r4, r2, #16
    2234:	0c00      	lsrs	r0, r0, #16
    2236:	0c09      	lsrs	r1, r1, #16
    2238:	4346      	muls	r6, r0
    223a:	434d      	muls	r5, r1
    223c:	4360      	muls	r0, r4
    223e:	4361      	muls	r1, r4
    2240:	1940      	adds	r0, r0, r5
    2242:	0c34      	lsrs	r4, r6, #16
    2244:	1824      	adds	r4, r4, r0
    2246:	b500      	push	{lr}
    2248:	42a5      	cmp	r5, r4
    224a:	d903      	bls.n	2254 <__aeabi_lmul+0x34>
    224c:	2080      	movs	r0, #128	; 0x80
    224e:	0240      	lsls	r0, r0, #9
    2250:	4680      	mov	r8, r0
    2252:	4441      	add	r1, r8
    2254:	0c25      	lsrs	r5, r4, #16
    2256:	186d      	adds	r5, r5, r1
    2258:	4661      	mov	r1, ip
    225a:	4359      	muls	r1, r3
    225c:	437a      	muls	r2, r7
    225e:	0430      	lsls	r0, r6, #16
    2260:	1949      	adds	r1, r1, r5
    2262:	0424      	lsls	r4, r4, #16
    2264:	0c00      	lsrs	r0, r0, #16
    2266:	1820      	adds	r0, r4, r0
    2268:	1889      	adds	r1, r1, r2
    226a:	bc04      	pop	{r2}
    226c:	4690      	mov	r8, r2
    226e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002270 <atoi>:
    2270:	b510      	push	{r4, lr}
    2272:	220a      	movs	r2, #10
    2274:	2100      	movs	r1, #0
    2276:	f000 fabf 	bl	27f8 <strtol>
    227a:	bd10      	pop	{r4, pc}

0000227c <calloc>:
    227c:	b510      	push	{r4, lr}
    227e:	4b03      	ldr	r3, [pc, #12]	; (228c <calloc+0x10>)
    2280:	000a      	movs	r2, r1
    2282:	0001      	movs	r1, r0
    2284:	6818      	ldr	r0, [r3, #0]
    2286:	f000 f85a 	bl	233e <_calloc_r>
    228a:	bd10      	pop	{r4, pc}
    228c:	200001e8 	.word	0x200001e8

00002290 <__cxa_atexit>:
    2290:	b510      	push	{r4, lr}
    2292:	0004      	movs	r4, r0
    2294:	4804      	ldr	r0, [pc, #16]	; (22a8 <__cxa_atexit+0x18>)
    2296:	0013      	movs	r3, r2
    2298:	2800      	cmp	r0, #0
    229a:	d004      	beq.n	22a6 <__cxa_atexit+0x16>
    229c:	000a      	movs	r2, r1
    229e:	2002      	movs	r0, #2
    22a0:	0021      	movs	r1, r4
    22a2:	e000      	b.n	22a6 <__cxa_atexit+0x16>
    22a4:	bf00      	nop
    22a6:	bd10      	pop	{r4, pc}
    22a8:	00000000 	.word	0x00000000

000022ac <__libc_init_array>:
    22ac:	b570      	push	{r4, r5, r6, lr}
    22ae:	2600      	movs	r6, #0
    22b0:	4d0c      	ldr	r5, [pc, #48]	; (22e4 <__libc_init_array+0x38>)
    22b2:	4c0d      	ldr	r4, [pc, #52]	; (22e8 <__libc_init_array+0x3c>)
    22b4:	1b64      	subs	r4, r4, r5
    22b6:	10a4      	asrs	r4, r4, #2
    22b8:	42a6      	cmp	r6, r4
    22ba:	d109      	bne.n	22d0 <__libc_init_array+0x24>
    22bc:	2600      	movs	r6, #0
    22be:	f001 f935 	bl	352c <_init>
    22c2:	4d0a      	ldr	r5, [pc, #40]	; (22ec <__libc_init_array+0x40>)
    22c4:	4c0a      	ldr	r4, [pc, #40]	; (22f0 <__libc_init_array+0x44>)
    22c6:	1b64      	subs	r4, r4, r5
    22c8:	10a4      	asrs	r4, r4, #2
    22ca:	42a6      	cmp	r6, r4
    22cc:	d105      	bne.n	22da <__libc_init_array+0x2e>
    22ce:	bd70      	pop	{r4, r5, r6, pc}
    22d0:	00b3      	lsls	r3, r6, #2
    22d2:	58eb      	ldr	r3, [r5, r3]
    22d4:	4798      	blx	r3
    22d6:	3601      	adds	r6, #1
    22d8:	e7ee      	b.n	22b8 <__libc_init_array+0xc>
    22da:	00b3      	lsls	r3, r6, #2
    22dc:	58eb      	ldr	r3, [r5, r3]
    22de:	4798      	blx	r3
    22e0:	3601      	adds	r6, #1
    22e2:	e7f2      	b.n	22ca <__libc_init_array+0x1e>
    22e4:	00003538 	.word	0x00003538
    22e8:	00003538 	.word	0x00003538
    22ec:	00003538 	.word	0x00003538
    22f0:	00003548 	.word	0x00003548

000022f4 <malloc>:
    22f4:	b510      	push	{r4, lr}
    22f6:	4b03      	ldr	r3, [pc, #12]	; (2304 <malloc+0x10>)
    22f8:	0001      	movs	r1, r0
    22fa:	6818      	ldr	r0, [r3, #0]
    22fc:	f000 f878 	bl	23f0 <_malloc_r>
    2300:	bd10      	pop	{r4, pc}
    2302:	46c0      	nop			; (mov r8, r8)
    2304:	200001e8 	.word	0x200001e8

00002308 <free>:
    2308:	b510      	push	{r4, lr}
    230a:	4b03      	ldr	r3, [pc, #12]	; (2318 <free+0x10>)
    230c:	0001      	movs	r1, r0
    230e:	6818      	ldr	r0, [r3, #0]
    2310:	f000 f824 	bl	235c <_free_r>
    2314:	bd10      	pop	{r4, pc}
    2316:	46c0      	nop			; (mov r8, r8)
    2318:	200001e8 	.word	0x200001e8

0000231c <memcpy>:
    231c:	2300      	movs	r3, #0
    231e:	b510      	push	{r4, lr}
    2320:	429a      	cmp	r2, r3
    2322:	d100      	bne.n	2326 <memcpy+0xa>
    2324:	bd10      	pop	{r4, pc}
    2326:	5ccc      	ldrb	r4, [r1, r3]
    2328:	54c4      	strb	r4, [r0, r3]
    232a:	3301      	adds	r3, #1
    232c:	e7f8      	b.n	2320 <memcpy+0x4>

0000232e <memset>:
    232e:	0003      	movs	r3, r0
    2330:	1882      	adds	r2, r0, r2
    2332:	4293      	cmp	r3, r2
    2334:	d100      	bne.n	2338 <memset+0xa>
    2336:	4770      	bx	lr
    2338:	7019      	strb	r1, [r3, #0]
    233a:	3301      	adds	r3, #1
    233c:	e7f9      	b.n	2332 <memset+0x4>

0000233e <_calloc_r>:
    233e:	434a      	muls	r2, r1
    2340:	b570      	push	{r4, r5, r6, lr}
    2342:	0011      	movs	r1, r2
    2344:	0015      	movs	r5, r2
    2346:	f000 f853 	bl	23f0 <_malloc_r>
    234a:	1e04      	subs	r4, r0, #0
    234c:	d003      	beq.n	2356 <_calloc_r+0x18>
    234e:	002a      	movs	r2, r5
    2350:	2100      	movs	r1, #0
    2352:	f7ff ffec 	bl	232e <memset>
    2356:	0020      	movs	r0, r4
    2358:	bd70      	pop	{r4, r5, r6, pc}
    235a:	Address 0x0000235a is out of bounds.


0000235c <_free_r>:
    235c:	b570      	push	{r4, r5, r6, lr}
    235e:	0005      	movs	r5, r0
    2360:	2900      	cmp	r1, #0
    2362:	d010      	beq.n	2386 <_free_r+0x2a>
    2364:	1f0c      	subs	r4, r1, #4
    2366:	6823      	ldr	r3, [r4, #0]
    2368:	2b00      	cmp	r3, #0
    236a:	da00      	bge.n	236e <_free_r+0x12>
    236c:	18e4      	adds	r4, r4, r3
    236e:	0028      	movs	r0, r5
    2370:	f000 fa88 	bl	2884 <__malloc_lock>
    2374:	4a1d      	ldr	r2, [pc, #116]	; (23ec <_free_r+0x90>)
    2376:	6813      	ldr	r3, [r2, #0]
    2378:	2b00      	cmp	r3, #0
    237a:	d105      	bne.n	2388 <_free_r+0x2c>
    237c:	6063      	str	r3, [r4, #4]
    237e:	6014      	str	r4, [r2, #0]
    2380:	0028      	movs	r0, r5
    2382:	f000 fa87 	bl	2894 <__malloc_unlock>
    2386:	bd70      	pop	{r4, r5, r6, pc}
    2388:	42a3      	cmp	r3, r4
    238a:	d908      	bls.n	239e <_free_r+0x42>
    238c:	6821      	ldr	r1, [r4, #0]
    238e:	1860      	adds	r0, r4, r1
    2390:	4283      	cmp	r3, r0
    2392:	d1f3      	bne.n	237c <_free_r+0x20>
    2394:	6818      	ldr	r0, [r3, #0]
    2396:	685b      	ldr	r3, [r3, #4]
    2398:	1841      	adds	r1, r0, r1
    239a:	6021      	str	r1, [r4, #0]
    239c:	e7ee      	b.n	237c <_free_r+0x20>
    239e:	001a      	movs	r2, r3
    23a0:	685b      	ldr	r3, [r3, #4]
    23a2:	2b00      	cmp	r3, #0
    23a4:	d001      	beq.n	23aa <_free_r+0x4e>
    23a6:	42a3      	cmp	r3, r4
    23a8:	d9f9      	bls.n	239e <_free_r+0x42>
    23aa:	6811      	ldr	r1, [r2, #0]
    23ac:	1850      	adds	r0, r2, r1
    23ae:	42a0      	cmp	r0, r4
    23b0:	d10b      	bne.n	23ca <_free_r+0x6e>
    23b2:	6820      	ldr	r0, [r4, #0]
    23b4:	1809      	adds	r1, r1, r0
    23b6:	1850      	adds	r0, r2, r1
    23b8:	6011      	str	r1, [r2, #0]
    23ba:	4283      	cmp	r3, r0
    23bc:	d1e0      	bne.n	2380 <_free_r+0x24>
    23be:	6818      	ldr	r0, [r3, #0]
    23c0:	685b      	ldr	r3, [r3, #4]
    23c2:	1841      	adds	r1, r0, r1
    23c4:	6011      	str	r1, [r2, #0]
    23c6:	6053      	str	r3, [r2, #4]
    23c8:	e7da      	b.n	2380 <_free_r+0x24>
    23ca:	42a0      	cmp	r0, r4
    23cc:	d902      	bls.n	23d4 <_free_r+0x78>
    23ce:	230c      	movs	r3, #12
    23d0:	602b      	str	r3, [r5, #0]
    23d2:	e7d5      	b.n	2380 <_free_r+0x24>
    23d4:	6821      	ldr	r1, [r4, #0]
    23d6:	1860      	adds	r0, r4, r1
    23d8:	4283      	cmp	r3, r0
    23da:	d103      	bne.n	23e4 <_free_r+0x88>
    23dc:	6818      	ldr	r0, [r3, #0]
    23de:	685b      	ldr	r3, [r3, #4]
    23e0:	1841      	adds	r1, r0, r1
    23e2:	6021      	str	r1, [r4, #0]
    23e4:	6063      	str	r3, [r4, #4]
    23e6:	6054      	str	r4, [r2, #4]
    23e8:	e7ca      	b.n	2380 <_free_r+0x24>
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	200006e4 	.word	0x200006e4

000023f0 <_malloc_r>:
    23f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23f2:	2303      	movs	r3, #3
    23f4:	1ccd      	adds	r5, r1, #3
    23f6:	439d      	bics	r5, r3
    23f8:	3508      	adds	r5, #8
    23fa:	0006      	movs	r6, r0
    23fc:	2d0c      	cmp	r5, #12
    23fe:	d21f      	bcs.n	2440 <_malloc_r+0x50>
    2400:	250c      	movs	r5, #12
    2402:	42a9      	cmp	r1, r5
    2404:	d81e      	bhi.n	2444 <_malloc_r+0x54>
    2406:	0030      	movs	r0, r6
    2408:	f000 fa3c 	bl	2884 <__malloc_lock>
    240c:	4925      	ldr	r1, [pc, #148]	; (24a4 <_malloc_r+0xb4>)
    240e:	680a      	ldr	r2, [r1, #0]
    2410:	0014      	movs	r4, r2
    2412:	2c00      	cmp	r4, #0
    2414:	d11a      	bne.n	244c <_malloc_r+0x5c>
    2416:	4f24      	ldr	r7, [pc, #144]	; (24a8 <_malloc_r+0xb8>)
    2418:	683b      	ldr	r3, [r7, #0]
    241a:	2b00      	cmp	r3, #0
    241c:	d104      	bne.n	2428 <_malloc_r+0x38>
    241e:	0021      	movs	r1, r4
    2420:	0030      	movs	r0, r6
    2422:	f000 f84d 	bl	24c0 <_sbrk_r>
    2426:	6038      	str	r0, [r7, #0]
    2428:	0029      	movs	r1, r5
    242a:	0030      	movs	r0, r6
    242c:	f000 f848 	bl	24c0 <_sbrk_r>
    2430:	1c43      	adds	r3, r0, #1
    2432:	d12b      	bne.n	248c <_malloc_r+0x9c>
    2434:	230c      	movs	r3, #12
    2436:	0030      	movs	r0, r6
    2438:	6033      	str	r3, [r6, #0]
    243a:	f000 fa2b 	bl	2894 <__malloc_unlock>
    243e:	e003      	b.n	2448 <_malloc_r+0x58>
    2440:	2d00      	cmp	r5, #0
    2442:	dade      	bge.n	2402 <_malloc_r+0x12>
    2444:	230c      	movs	r3, #12
    2446:	6033      	str	r3, [r6, #0]
    2448:	2000      	movs	r0, #0
    244a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    244c:	6823      	ldr	r3, [r4, #0]
    244e:	1b5b      	subs	r3, r3, r5
    2450:	d419      	bmi.n	2486 <_malloc_r+0x96>
    2452:	2b0b      	cmp	r3, #11
    2454:	d903      	bls.n	245e <_malloc_r+0x6e>
    2456:	6023      	str	r3, [r4, #0]
    2458:	18e4      	adds	r4, r4, r3
    245a:	6025      	str	r5, [r4, #0]
    245c:	e003      	b.n	2466 <_malloc_r+0x76>
    245e:	6863      	ldr	r3, [r4, #4]
    2460:	42a2      	cmp	r2, r4
    2462:	d10e      	bne.n	2482 <_malloc_r+0x92>
    2464:	600b      	str	r3, [r1, #0]
    2466:	0030      	movs	r0, r6
    2468:	f000 fa14 	bl	2894 <__malloc_unlock>
    246c:	0020      	movs	r0, r4
    246e:	2207      	movs	r2, #7
    2470:	300b      	adds	r0, #11
    2472:	1d23      	adds	r3, r4, #4
    2474:	4390      	bics	r0, r2
    2476:	1ac2      	subs	r2, r0, r3
    2478:	4298      	cmp	r0, r3
    247a:	d0e6      	beq.n	244a <_malloc_r+0x5a>
    247c:	1a1b      	subs	r3, r3, r0
    247e:	50a3      	str	r3, [r4, r2]
    2480:	e7e3      	b.n	244a <_malloc_r+0x5a>
    2482:	6053      	str	r3, [r2, #4]
    2484:	e7ef      	b.n	2466 <_malloc_r+0x76>
    2486:	0022      	movs	r2, r4
    2488:	6864      	ldr	r4, [r4, #4]
    248a:	e7c2      	b.n	2412 <_malloc_r+0x22>
    248c:	2303      	movs	r3, #3
    248e:	1cc4      	adds	r4, r0, #3
    2490:	439c      	bics	r4, r3
    2492:	42a0      	cmp	r0, r4
    2494:	d0e1      	beq.n	245a <_malloc_r+0x6a>
    2496:	1a21      	subs	r1, r4, r0
    2498:	0030      	movs	r0, r6
    249a:	f000 f811 	bl	24c0 <_sbrk_r>
    249e:	1c43      	adds	r3, r0, #1
    24a0:	d1db      	bne.n	245a <_malloc_r+0x6a>
    24a2:	e7c7      	b.n	2434 <_malloc_r+0x44>
    24a4:	200006e4 	.word	0x200006e4
    24a8:	200006e8 	.word	0x200006e8

000024ac <realloc>:
    24ac:	b510      	push	{r4, lr}
    24ae:	4b03      	ldr	r3, [pc, #12]	; (24bc <realloc+0x10>)
    24b0:	000a      	movs	r2, r1
    24b2:	0001      	movs	r1, r0
    24b4:	6818      	ldr	r0, [r3, #0]
    24b6:	f000 f9f5 	bl	28a4 <_realloc_r>
    24ba:	bd10      	pop	{r4, pc}
    24bc:	200001e8 	.word	0x200001e8

000024c0 <_sbrk_r>:
    24c0:	2300      	movs	r3, #0
    24c2:	b570      	push	{r4, r5, r6, lr}
    24c4:	4d06      	ldr	r5, [pc, #24]	; (24e0 <_sbrk_r+0x20>)
    24c6:	0004      	movs	r4, r0
    24c8:	0008      	movs	r0, r1
    24ca:	602b      	str	r3, [r5, #0]
    24cc:	f7ff fe04 	bl	20d8 <_sbrk>
    24d0:	1c43      	adds	r3, r0, #1
    24d2:	d103      	bne.n	24dc <_sbrk_r+0x1c>
    24d4:	682b      	ldr	r3, [r5, #0]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d000      	beq.n	24dc <_sbrk_r+0x1c>
    24da:	6023      	str	r3, [r4, #0]
    24dc:	bd70      	pop	{r4, r5, r6, pc}
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	200006f8 	.word	0x200006f8

000024e4 <sniprintf>:
    24e4:	b40c      	push	{r2, r3}
    24e6:	b530      	push	{r4, r5, lr}
    24e8:	4b17      	ldr	r3, [pc, #92]	; (2548 <sniprintf+0x64>)
    24ea:	000c      	movs	r4, r1
    24ec:	681d      	ldr	r5, [r3, #0]
    24ee:	b09d      	sub	sp, #116	; 0x74
    24f0:	2900      	cmp	r1, #0
    24f2:	da08      	bge.n	2506 <sniprintf+0x22>
    24f4:	238b      	movs	r3, #139	; 0x8b
    24f6:	2001      	movs	r0, #1
    24f8:	602b      	str	r3, [r5, #0]
    24fa:	4240      	negs	r0, r0
    24fc:	b01d      	add	sp, #116	; 0x74
    24fe:	bc30      	pop	{r4, r5}
    2500:	bc08      	pop	{r3}
    2502:	b002      	add	sp, #8
    2504:	4718      	bx	r3
    2506:	2382      	movs	r3, #130	; 0x82
    2508:	466a      	mov	r2, sp
    250a:	009b      	lsls	r3, r3, #2
    250c:	8293      	strh	r3, [r2, #20]
    250e:	2300      	movs	r3, #0
    2510:	9002      	str	r0, [sp, #8]
    2512:	9006      	str	r0, [sp, #24]
    2514:	4299      	cmp	r1, r3
    2516:	d000      	beq.n	251a <sniprintf+0x36>
    2518:	1e4b      	subs	r3, r1, #1
    251a:	9304      	str	r3, [sp, #16]
    251c:	9307      	str	r3, [sp, #28]
    251e:	2301      	movs	r3, #1
    2520:	466a      	mov	r2, sp
    2522:	425b      	negs	r3, r3
    2524:	82d3      	strh	r3, [r2, #22]
    2526:	0028      	movs	r0, r5
    2528:	ab21      	add	r3, sp, #132	; 0x84
    252a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    252c:	a902      	add	r1, sp, #8
    252e:	9301      	str	r3, [sp, #4]
    2530:	f000 fa40 	bl	29b4 <_svfiprintf_r>
    2534:	1c43      	adds	r3, r0, #1
    2536:	da01      	bge.n	253c <sniprintf+0x58>
    2538:	238b      	movs	r3, #139	; 0x8b
    253a:	602b      	str	r3, [r5, #0]
    253c:	2c00      	cmp	r4, #0
    253e:	d0dd      	beq.n	24fc <sniprintf+0x18>
    2540:	2300      	movs	r3, #0
    2542:	9a02      	ldr	r2, [sp, #8]
    2544:	7013      	strb	r3, [r2, #0]
    2546:	e7d9      	b.n	24fc <sniprintf+0x18>
    2548:	200001e8 	.word	0x200001e8

0000254c <strcasecmp>:
    254c:	b5f0      	push	{r4, r5, r6, r7, lr}
    254e:	0005      	movs	r5, r0
    2550:	2400      	movs	r4, #0
    2552:	2703      	movs	r7, #3
    2554:	4e09      	ldr	r6, [pc, #36]	; (257c <strcasecmp+0x30>)
    2556:	5d2a      	ldrb	r2, [r5, r4]
    2558:	5cb3      	ldrb	r3, [r6, r2]
    255a:	403b      	ands	r3, r7
    255c:	2b01      	cmp	r3, #1
    255e:	d100      	bne.n	2562 <strcasecmp+0x16>
    2560:	3220      	adds	r2, #32
    2562:	5d0b      	ldrb	r3, [r1, r4]
    2564:	5cf0      	ldrb	r0, [r6, r3]
    2566:	4038      	ands	r0, r7
    2568:	2801      	cmp	r0, #1
    256a:	d100      	bne.n	256e <strcasecmp+0x22>
    256c:	3320      	adds	r3, #32
    256e:	1ad0      	subs	r0, r2, r3
    2570:	429a      	cmp	r2, r3
    2572:	d102      	bne.n	257a <strcasecmp+0x2e>
    2574:	3401      	adds	r4, #1
    2576:	2b00      	cmp	r3, #0
    2578:	d1ed      	bne.n	2556 <strcasecmp+0xa>
    257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    257c:	00003395 	.word	0x00003395

00002580 <strchr>:
    2580:	b2c9      	uxtb	r1, r1
    2582:	7803      	ldrb	r3, [r0, #0]
    2584:	2b00      	cmp	r3, #0
    2586:	d004      	beq.n	2592 <strchr+0x12>
    2588:	428b      	cmp	r3, r1
    258a:	d100      	bne.n	258e <strchr+0xe>
    258c:	4770      	bx	lr
    258e:	3001      	adds	r0, #1
    2590:	e7f7      	b.n	2582 <strchr+0x2>
    2592:	424b      	negs	r3, r1
    2594:	4159      	adcs	r1, r3
    2596:	4249      	negs	r1, r1
    2598:	4008      	ands	r0, r1
    259a:	e7f7      	b.n	258c <strchr+0xc>

0000259c <strcmp>:
    259c:	7802      	ldrb	r2, [r0, #0]
    259e:	780b      	ldrb	r3, [r1, #0]
    25a0:	2a00      	cmp	r2, #0
    25a2:	d003      	beq.n	25ac <strcmp+0x10>
    25a4:	3001      	adds	r0, #1
    25a6:	3101      	adds	r1, #1
    25a8:	429a      	cmp	r2, r3
    25aa:	d0f7      	beq.n	259c <strcmp>
    25ac:	1ad0      	subs	r0, r2, r3
    25ae:	4770      	bx	lr

000025b0 <strcpy>:
    25b0:	0003      	movs	r3, r0
    25b2:	780a      	ldrb	r2, [r1, #0]
    25b4:	3101      	adds	r1, #1
    25b6:	701a      	strb	r2, [r3, #0]
    25b8:	3301      	adds	r3, #1
    25ba:	2a00      	cmp	r2, #0
    25bc:	d1f9      	bne.n	25b2 <strcpy+0x2>
    25be:	4770      	bx	lr

000025c0 <strlen>:
    25c0:	2300      	movs	r3, #0
    25c2:	5cc2      	ldrb	r2, [r0, r3]
    25c4:	3301      	adds	r3, #1
    25c6:	2a00      	cmp	r2, #0
    25c8:	d1fb      	bne.n	25c2 <strlen+0x2>
    25ca:	1e58      	subs	r0, r3, #1
    25cc:	4770      	bx	lr

000025ce <strncmp>:
    25ce:	b530      	push	{r4, r5, lr}
    25d0:	0005      	movs	r5, r0
    25d2:	1e10      	subs	r0, r2, #0
    25d4:	d00b      	beq.n	25ee <strncmp+0x20>
    25d6:	2400      	movs	r4, #0
    25d8:	3a01      	subs	r2, #1
    25da:	5d2b      	ldrb	r3, [r5, r4]
    25dc:	5d08      	ldrb	r0, [r1, r4]
    25de:	4283      	cmp	r3, r0
    25e0:	d104      	bne.n	25ec <strncmp+0x1e>
    25e2:	4294      	cmp	r4, r2
    25e4:	d002      	beq.n	25ec <strncmp+0x1e>
    25e6:	3401      	adds	r4, #1
    25e8:	2b00      	cmp	r3, #0
    25ea:	d1f6      	bne.n	25da <strncmp+0xc>
    25ec:	1a18      	subs	r0, r3, r0
    25ee:	bd30      	pop	{r4, r5, pc}

000025f0 <strncpy>:
    25f0:	0003      	movs	r3, r0
    25f2:	b530      	push	{r4, r5, lr}
    25f4:	001d      	movs	r5, r3
    25f6:	2a00      	cmp	r2, #0
    25f8:	d006      	beq.n	2608 <strncpy+0x18>
    25fa:	780c      	ldrb	r4, [r1, #0]
    25fc:	3a01      	subs	r2, #1
    25fe:	3301      	adds	r3, #1
    2600:	702c      	strb	r4, [r5, #0]
    2602:	3101      	adds	r1, #1
    2604:	2c00      	cmp	r4, #0
    2606:	d1f5      	bne.n	25f4 <strncpy+0x4>
    2608:	2100      	movs	r1, #0
    260a:	189a      	adds	r2, r3, r2
    260c:	4293      	cmp	r3, r2
    260e:	d100      	bne.n	2612 <strncpy+0x22>
    2610:	bd30      	pop	{r4, r5, pc}
    2612:	7019      	strb	r1, [r3, #0]
    2614:	3301      	adds	r3, #1
    2616:	e7f9      	b.n	260c <strncpy+0x1c>

00002618 <strstr>:
    2618:	780a      	ldrb	r2, [r1, #0]
    261a:	b530      	push	{r4, r5, lr}
    261c:	2a00      	cmp	r2, #0
    261e:	d10c      	bne.n	263a <strstr+0x22>
    2620:	bd30      	pop	{r4, r5, pc}
    2622:	429a      	cmp	r2, r3
    2624:	d108      	bne.n	2638 <strstr+0x20>
    2626:	2301      	movs	r3, #1
    2628:	5ccc      	ldrb	r4, [r1, r3]
    262a:	2c00      	cmp	r4, #0
    262c:	d0f8      	beq.n	2620 <strstr+0x8>
    262e:	5cc5      	ldrb	r5, [r0, r3]
    2630:	42a5      	cmp	r5, r4
    2632:	d101      	bne.n	2638 <strstr+0x20>
    2634:	3301      	adds	r3, #1
    2636:	e7f7      	b.n	2628 <strstr+0x10>
    2638:	3001      	adds	r0, #1
    263a:	7803      	ldrb	r3, [r0, #0]
    263c:	2b00      	cmp	r3, #0
    263e:	d1f0      	bne.n	2622 <strstr+0xa>
    2640:	0018      	movs	r0, r3
    2642:	e7ed      	b.n	2620 <strstr+0x8>

00002644 <strtok>:
    2644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2646:	4b12      	ldr	r3, [pc, #72]	; (2690 <strtok+0x4c>)
    2648:	0005      	movs	r5, r0
    264a:	681f      	ldr	r7, [r3, #0]
    264c:	000e      	movs	r6, r1
    264e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
    2650:	2c00      	cmp	r4, #0
    2652:	d116      	bne.n	2682 <strtok+0x3e>
    2654:	2050      	movs	r0, #80	; 0x50
    2656:	f7ff fe4d 	bl	22f4 <malloc>
    265a:	65b8      	str	r0, [r7, #88]	; 0x58
    265c:	6004      	str	r4, [r0, #0]
    265e:	6044      	str	r4, [r0, #4]
    2660:	6084      	str	r4, [r0, #8]
    2662:	60c4      	str	r4, [r0, #12]
    2664:	6104      	str	r4, [r0, #16]
    2666:	6144      	str	r4, [r0, #20]
    2668:	6184      	str	r4, [r0, #24]
    266a:	6284      	str	r4, [r0, #40]	; 0x28
    266c:	62c4      	str	r4, [r0, #44]	; 0x2c
    266e:	6304      	str	r4, [r0, #48]	; 0x30
    2670:	6344      	str	r4, [r0, #52]	; 0x34
    2672:	6384      	str	r4, [r0, #56]	; 0x38
    2674:	63c4      	str	r4, [r0, #60]	; 0x3c
    2676:	6404      	str	r4, [r0, #64]	; 0x40
    2678:	6444      	str	r4, [r0, #68]	; 0x44
    267a:	6484      	str	r4, [r0, #72]	; 0x48
    267c:	64c4      	str	r4, [r0, #76]	; 0x4c
    267e:	7704      	strb	r4, [r0, #28]
    2680:	6244      	str	r4, [r0, #36]	; 0x24
    2682:	0031      	movs	r1, r6
    2684:	0028      	movs	r0, r5
    2686:	6dba      	ldr	r2, [r7, #88]	; 0x58
    2688:	2301      	movs	r3, #1
    268a:	f000 f803 	bl	2694 <__strtok_r>
    268e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2690:	200001e8 	.word	0x200001e8

00002694 <__strtok_r>:
    2694:	b5f0      	push	{r4, r5, r6, r7, lr}
    2696:	2800      	cmp	r0, #0
    2698:	d102      	bne.n	26a0 <__strtok_r+0xc>
    269a:	6810      	ldr	r0, [r2, #0]
    269c:	2800      	cmp	r0, #0
    269e:	d013      	beq.n	26c8 <__strtok_r+0x34>
    26a0:	0004      	movs	r4, r0
    26a2:	0020      	movs	r0, r4
    26a4:	000e      	movs	r6, r1
    26a6:	7805      	ldrb	r5, [r0, #0]
    26a8:	3401      	adds	r4, #1
    26aa:	7837      	ldrb	r7, [r6, #0]
    26ac:	2f00      	cmp	r7, #0
    26ae:	d104      	bne.n	26ba <__strtok_r+0x26>
    26b0:	2d00      	cmp	r5, #0
    26b2:	d10f      	bne.n	26d4 <__strtok_r+0x40>
    26b4:	0028      	movs	r0, r5
    26b6:	6015      	str	r5, [r2, #0]
    26b8:	e006      	b.n	26c8 <__strtok_r+0x34>
    26ba:	3601      	adds	r6, #1
    26bc:	42bd      	cmp	r5, r7
    26be:	d1f4      	bne.n	26aa <__strtok_r+0x16>
    26c0:	2b00      	cmp	r3, #0
    26c2:	d1ee      	bne.n	26a2 <__strtok_r+0xe>
    26c4:	6014      	str	r4, [r2, #0]
    26c6:	7003      	strb	r3, [r0, #0]
    26c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26ca:	002f      	movs	r7, r5
    26cc:	e00f      	b.n	26ee <__strtok_r+0x5a>
    26ce:	3301      	adds	r3, #1
    26d0:	2e00      	cmp	r6, #0
    26d2:	d104      	bne.n	26de <__strtok_r+0x4a>
    26d4:	0023      	movs	r3, r4
    26d6:	3401      	adds	r4, #1
    26d8:	781d      	ldrb	r5, [r3, #0]
    26da:	0027      	movs	r7, r4
    26dc:	000b      	movs	r3, r1
    26de:	781e      	ldrb	r6, [r3, #0]
    26e0:	42b5      	cmp	r5, r6
    26e2:	d1f4      	bne.n	26ce <__strtok_r+0x3a>
    26e4:	2d00      	cmp	r5, #0
    26e6:	d0f0      	beq.n	26ca <__strtok_r+0x36>
    26e8:	2300      	movs	r3, #0
    26ea:	3c01      	subs	r4, #1
    26ec:	7023      	strb	r3, [r4, #0]
    26ee:	6017      	str	r7, [r2, #0]
    26f0:	e7ea      	b.n	26c8 <__strtok_r+0x34>
    26f2:	Address 0x000026f2 is out of bounds.


000026f4 <_strtol_l.isra.0>:
    26f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26f6:	001e      	movs	r6, r3
    26f8:	4b3d      	ldr	r3, [pc, #244]	; (27f0 <_strtol_l.isra.0+0xfc>)
    26fa:	b087      	sub	sp, #28
    26fc:	9005      	str	r0, [sp, #20]
    26fe:	9202      	str	r2, [sp, #8]
    2700:	0008      	movs	r0, r1
    2702:	469c      	mov	ip, r3
    2704:	2208      	movs	r2, #8
    2706:	9101      	str	r1, [sp, #4]
    2708:	0003      	movs	r3, r0
    270a:	4661      	mov	r1, ip
    270c:	781c      	ldrb	r4, [r3, #0]
    270e:	1c45      	adds	r5, r0, #1
    2710:	5d09      	ldrb	r1, [r1, r4]
    2712:	0028      	movs	r0, r5
    2714:	000f      	movs	r7, r1
    2716:	4017      	ands	r7, r2
    2718:	4211      	tst	r1, r2
    271a:	d1f5      	bne.n	2708 <_strtol_l.isra.0+0x14>
    271c:	2c2d      	cmp	r4, #45	; 0x2d
    271e:	d133      	bne.n	2788 <_strtol_l.isra.0+0x94>
    2720:	2701      	movs	r7, #1
    2722:	782c      	ldrb	r4, [r5, #0]
    2724:	1c9d      	adds	r5, r3, #2
    2726:	2e00      	cmp	r6, #0
    2728:	d05d      	beq.n	27e6 <_strtol_l.isra.0+0xf2>
    272a:	2e10      	cmp	r6, #16
    272c:	d109      	bne.n	2742 <_strtol_l.isra.0+0x4e>
    272e:	2c30      	cmp	r4, #48	; 0x30
    2730:	d107      	bne.n	2742 <_strtol_l.isra.0+0x4e>
    2732:	2220      	movs	r2, #32
    2734:	782b      	ldrb	r3, [r5, #0]
    2736:	4393      	bics	r3, r2
    2738:	2b58      	cmp	r3, #88	; 0x58
    273a:	d14f      	bne.n	27dc <_strtol_l.isra.0+0xe8>
    273c:	2610      	movs	r6, #16
    273e:	786c      	ldrb	r4, [r5, #1]
    2740:	3502      	adds	r5, #2
    2742:	4b2c      	ldr	r3, [pc, #176]	; (27f4 <_strtol_l.isra.0+0x100>)
    2744:	0031      	movs	r1, r6
    2746:	18fb      	adds	r3, r7, r3
    2748:	0018      	movs	r0, r3
    274a:	9303      	str	r3, [sp, #12]
    274c:	f7ff fd62 	bl	2214 <__aeabi_uidivmod>
    2750:	2300      	movs	r3, #0
    2752:	2201      	movs	r2, #1
    2754:	4684      	mov	ip, r0
    2756:	0018      	movs	r0, r3
    2758:	9104      	str	r1, [sp, #16]
    275a:	4252      	negs	r2, r2
    275c:	0021      	movs	r1, r4
    275e:	3930      	subs	r1, #48	; 0x30
    2760:	2909      	cmp	r1, #9
    2762:	d816      	bhi.n	2792 <_strtol_l.isra.0+0x9e>
    2764:	000c      	movs	r4, r1
    2766:	42a6      	cmp	r6, r4
    2768:	dd1f      	ble.n	27aa <_strtol_l.isra.0+0xb6>
    276a:	1c59      	adds	r1, r3, #1
    276c:	d009      	beq.n	2782 <_strtol_l.isra.0+0x8e>
    276e:	0013      	movs	r3, r2
    2770:	4584      	cmp	ip, r0
    2772:	d306      	bcc.n	2782 <_strtol_l.isra.0+0x8e>
    2774:	d102      	bne.n	277c <_strtol_l.isra.0+0x88>
    2776:	9904      	ldr	r1, [sp, #16]
    2778:	42a1      	cmp	r1, r4
    277a:	db02      	blt.n	2782 <_strtol_l.isra.0+0x8e>
    277c:	2301      	movs	r3, #1
    277e:	4370      	muls	r0, r6
    2780:	1820      	adds	r0, r4, r0
    2782:	782c      	ldrb	r4, [r5, #0]
    2784:	3501      	adds	r5, #1
    2786:	e7e9      	b.n	275c <_strtol_l.isra.0+0x68>
    2788:	2c2b      	cmp	r4, #43	; 0x2b
    278a:	d1cc      	bne.n	2726 <_strtol_l.isra.0+0x32>
    278c:	782c      	ldrb	r4, [r5, #0]
    278e:	1c9d      	adds	r5, r3, #2
    2790:	e7c9      	b.n	2726 <_strtol_l.isra.0+0x32>
    2792:	0021      	movs	r1, r4
    2794:	3941      	subs	r1, #65	; 0x41
    2796:	2919      	cmp	r1, #25
    2798:	d801      	bhi.n	279e <_strtol_l.isra.0+0xaa>
    279a:	3c37      	subs	r4, #55	; 0x37
    279c:	e7e3      	b.n	2766 <_strtol_l.isra.0+0x72>
    279e:	0021      	movs	r1, r4
    27a0:	3961      	subs	r1, #97	; 0x61
    27a2:	2919      	cmp	r1, #25
    27a4:	d801      	bhi.n	27aa <_strtol_l.isra.0+0xb6>
    27a6:	3c57      	subs	r4, #87	; 0x57
    27a8:	e7dd      	b.n	2766 <_strtol_l.isra.0+0x72>
    27aa:	1c5a      	adds	r2, r3, #1
    27ac:	d108      	bne.n	27c0 <_strtol_l.isra.0+0xcc>
    27ae:	9a05      	ldr	r2, [sp, #20]
    27b0:	3323      	adds	r3, #35	; 0x23
    27b2:	6013      	str	r3, [r2, #0]
    27b4:	9b02      	ldr	r3, [sp, #8]
    27b6:	9803      	ldr	r0, [sp, #12]
    27b8:	2b00      	cmp	r3, #0
    27ba:	d109      	bne.n	27d0 <_strtol_l.isra.0+0xdc>
    27bc:	b007      	add	sp, #28
    27be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27c0:	2f00      	cmp	r7, #0
    27c2:	d000      	beq.n	27c6 <_strtol_l.isra.0+0xd2>
    27c4:	4240      	negs	r0, r0
    27c6:	9a02      	ldr	r2, [sp, #8]
    27c8:	2a00      	cmp	r2, #0
    27ca:	d0f7      	beq.n	27bc <_strtol_l.isra.0+0xc8>
    27cc:	2b00      	cmp	r3, #0
    27ce:	d001      	beq.n	27d4 <_strtol_l.isra.0+0xe0>
    27d0:	1e6b      	subs	r3, r5, #1
    27d2:	9301      	str	r3, [sp, #4]
    27d4:	9b02      	ldr	r3, [sp, #8]
    27d6:	9a01      	ldr	r2, [sp, #4]
    27d8:	601a      	str	r2, [r3, #0]
    27da:	e7ef      	b.n	27bc <_strtol_l.isra.0+0xc8>
    27dc:	2430      	movs	r4, #48	; 0x30
    27de:	2e00      	cmp	r6, #0
    27e0:	d1af      	bne.n	2742 <_strtol_l.isra.0+0x4e>
    27e2:	3608      	adds	r6, #8
    27e4:	e7ad      	b.n	2742 <_strtol_l.isra.0+0x4e>
    27e6:	2c30      	cmp	r4, #48	; 0x30
    27e8:	d0a3      	beq.n	2732 <_strtol_l.isra.0+0x3e>
    27ea:	260a      	movs	r6, #10
    27ec:	e7a9      	b.n	2742 <_strtol_l.isra.0+0x4e>
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	00003395 	.word	0x00003395
    27f4:	7fffffff 	.word	0x7fffffff

000027f8 <strtol>:
    27f8:	b510      	push	{r4, lr}
    27fa:	0013      	movs	r3, r2
    27fc:	000a      	movs	r2, r1
    27fe:	0001      	movs	r1, r0
    2800:	4802      	ldr	r0, [pc, #8]	; (280c <strtol+0x14>)
    2802:	6800      	ldr	r0, [r0, #0]
    2804:	f7ff ff76 	bl	26f4 <_strtol_l.isra.0>
    2808:	bd10      	pop	{r4, pc}
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	200001e8 	.word	0x200001e8

00002810 <_vsniprintf_r>:
    2810:	b530      	push	{r4, r5, lr}
    2812:	0014      	movs	r4, r2
    2814:	0005      	movs	r5, r0
    2816:	001a      	movs	r2, r3
    2818:	b09b      	sub	sp, #108	; 0x6c
    281a:	2c00      	cmp	r4, #0
    281c:	da05      	bge.n	282a <_vsniprintf_r+0x1a>
    281e:	238b      	movs	r3, #139	; 0x8b
    2820:	6003      	str	r3, [r0, #0]
    2822:	2001      	movs	r0, #1
    2824:	4240      	negs	r0, r0
    2826:	b01b      	add	sp, #108	; 0x6c
    2828:	bd30      	pop	{r4, r5, pc}
    282a:	2382      	movs	r3, #130	; 0x82
    282c:	4668      	mov	r0, sp
    282e:	009b      	lsls	r3, r3, #2
    2830:	8183      	strh	r3, [r0, #12]
    2832:	2300      	movs	r3, #0
    2834:	9100      	str	r1, [sp, #0]
    2836:	9104      	str	r1, [sp, #16]
    2838:	429c      	cmp	r4, r3
    283a:	d000      	beq.n	283e <_vsniprintf_r+0x2e>
    283c:	1e63      	subs	r3, r4, #1
    283e:	9302      	str	r3, [sp, #8]
    2840:	9305      	str	r3, [sp, #20]
    2842:	2301      	movs	r3, #1
    2844:	4669      	mov	r1, sp
    2846:	425b      	negs	r3, r3
    2848:	81cb      	strh	r3, [r1, #14]
    284a:	0028      	movs	r0, r5
    284c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    284e:	f000 f8b1 	bl	29b4 <_svfiprintf_r>
    2852:	1c43      	adds	r3, r0, #1
    2854:	da01      	bge.n	285a <_vsniprintf_r+0x4a>
    2856:	238b      	movs	r3, #139	; 0x8b
    2858:	602b      	str	r3, [r5, #0]
    285a:	2c00      	cmp	r4, #0
    285c:	d0e3      	beq.n	2826 <_vsniprintf_r+0x16>
    285e:	2300      	movs	r3, #0
    2860:	9a00      	ldr	r2, [sp, #0]
    2862:	7013      	strb	r3, [r2, #0]
    2864:	e7df      	b.n	2826 <_vsniprintf_r+0x16>
    2866:	Address 0x00002866 is out of bounds.


00002868 <vsniprintf>:
    2868:	b507      	push	{r0, r1, r2, lr}
    286a:	9300      	str	r3, [sp, #0]
    286c:	0013      	movs	r3, r2
    286e:	000a      	movs	r2, r1
    2870:	0001      	movs	r1, r0
    2872:	4802      	ldr	r0, [pc, #8]	; (287c <vsniprintf+0x14>)
    2874:	6800      	ldr	r0, [r0, #0]
    2876:	f7ff ffcb 	bl	2810 <_vsniprintf_r>
    287a:	bd0e      	pop	{r1, r2, r3, pc}
    287c:	200001e8 	.word	0x200001e8

00002880 <__retarget_lock_acquire_recursive>:
    2880:	4770      	bx	lr

00002882 <__retarget_lock_release_recursive>:
    2882:	4770      	bx	lr

00002884 <__malloc_lock>:
    2884:	b510      	push	{r4, lr}
    2886:	4802      	ldr	r0, [pc, #8]	; (2890 <__malloc_lock+0xc>)
    2888:	f7ff fffa 	bl	2880 <__retarget_lock_acquire_recursive>
    288c:	bd10      	pop	{r4, pc}
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	200006f0 	.word	0x200006f0

00002894 <__malloc_unlock>:
    2894:	b510      	push	{r4, lr}
    2896:	4802      	ldr	r0, [pc, #8]	; (28a0 <__malloc_unlock+0xc>)
    2898:	f7ff fff3 	bl	2882 <__retarget_lock_release_recursive>
    289c:	bd10      	pop	{r4, pc}
    289e:	46c0      	nop			; (mov r8, r8)
    28a0:	200006f0 	.word	0x200006f0

000028a4 <_realloc_r>:
    28a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28a6:	0007      	movs	r7, r0
    28a8:	000d      	movs	r5, r1
    28aa:	0016      	movs	r6, r2
    28ac:	2900      	cmp	r1, #0
    28ae:	d105      	bne.n	28bc <_realloc_r+0x18>
    28b0:	0011      	movs	r1, r2
    28b2:	f7ff fd9d 	bl	23f0 <_malloc_r>
    28b6:	0004      	movs	r4, r0
    28b8:	0020      	movs	r0, r4
    28ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28bc:	2a00      	cmp	r2, #0
    28be:	d103      	bne.n	28c8 <_realloc_r+0x24>
    28c0:	f7ff fd4c 	bl	235c <_free_r>
    28c4:	0034      	movs	r4, r6
    28c6:	e7f7      	b.n	28b8 <_realloc_r+0x14>
    28c8:	f000 fb14 	bl	2ef4 <_malloc_usable_size_r>
    28cc:	002c      	movs	r4, r5
    28ce:	42b0      	cmp	r0, r6
    28d0:	d2f2      	bcs.n	28b8 <_realloc_r+0x14>
    28d2:	0031      	movs	r1, r6
    28d4:	0038      	movs	r0, r7
    28d6:	f7ff fd8b 	bl	23f0 <_malloc_r>
    28da:	1e04      	subs	r4, r0, #0
    28dc:	d0ec      	beq.n	28b8 <_realloc_r+0x14>
    28de:	0029      	movs	r1, r5
    28e0:	0032      	movs	r2, r6
    28e2:	f7ff fd1b 	bl	231c <memcpy>
    28e6:	0029      	movs	r1, r5
    28e8:	0038      	movs	r0, r7
    28ea:	f7ff fd37 	bl	235c <_free_r>
    28ee:	e7e3      	b.n	28b8 <_realloc_r+0x14>

000028f0 <__ssputs_r>:
    28f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f2:	688e      	ldr	r6, [r1, #8]
    28f4:	b085      	sub	sp, #20
    28f6:	0007      	movs	r7, r0
    28f8:	000c      	movs	r4, r1
    28fa:	9203      	str	r2, [sp, #12]
    28fc:	9301      	str	r3, [sp, #4]
    28fe:	429e      	cmp	r6, r3
    2900:	d83c      	bhi.n	297c <__ssputs_r+0x8c>
    2902:	2390      	movs	r3, #144	; 0x90
    2904:	898a      	ldrh	r2, [r1, #12]
    2906:	00db      	lsls	r3, r3, #3
    2908:	421a      	tst	r2, r3
    290a:	d034      	beq.n	2976 <__ssputs_r+0x86>
    290c:	2503      	movs	r5, #3
    290e:	6909      	ldr	r1, [r1, #16]
    2910:	6823      	ldr	r3, [r4, #0]
    2912:	1a5b      	subs	r3, r3, r1
    2914:	9302      	str	r3, [sp, #8]
    2916:	6963      	ldr	r3, [r4, #20]
    2918:	9802      	ldr	r0, [sp, #8]
    291a:	435d      	muls	r5, r3
    291c:	0feb      	lsrs	r3, r5, #31
    291e:	195d      	adds	r5, r3, r5
    2920:	9b01      	ldr	r3, [sp, #4]
    2922:	106d      	asrs	r5, r5, #1
    2924:	3301      	adds	r3, #1
    2926:	181b      	adds	r3, r3, r0
    2928:	42ab      	cmp	r3, r5
    292a:	d900      	bls.n	292e <__ssputs_r+0x3e>
    292c:	001d      	movs	r5, r3
    292e:	0553      	lsls	r3, r2, #21
    2930:	d532      	bpl.n	2998 <__ssputs_r+0xa8>
    2932:	0029      	movs	r1, r5
    2934:	0038      	movs	r0, r7
    2936:	f7ff fd5b 	bl	23f0 <_malloc_r>
    293a:	1e06      	subs	r6, r0, #0
    293c:	d109      	bne.n	2952 <__ssputs_r+0x62>
    293e:	230c      	movs	r3, #12
    2940:	603b      	str	r3, [r7, #0]
    2942:	2340      	movs	r3, #64	; 0x40
    2944:	2001      	movs	r0, #1
    2946:	89a2      	ldrh	r2, [r4, #12]
    2948:	4240      	negs	r0, r0
    294a:	4313      	orrs	r3, r2
    294c:	81a3      	strh	r3, [r4, #12]
    294e:	b005      	add	sp, #20
    2950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2952:	9a02      	ldr	r2, [sp, #8]
    2954:	6921      	ldr	r1, [r4, #16]
    2956:	f7ff fce1 	bl	231c <memcpy>
    295a:	89a3      	ldrh	r3, [r4, #12]
    295c:	4a14      	ldr	r2, [pc, #80]	; (29b0 <__ssputs_r+0xc0>)
    295e:	401a      	ands	r2, r3
    2960:	2380      	movs	r3, #128	; 0x80
    2962:	4313      	orrs	r3, r2
    2964:	81a3      	strh	r3, [r4, #12]
    2966:	9b02      	ldr	r3, [sp, #8]
    2968:	6126      	str	r6, [r4, #16]
    296a:	18f6      	adds	r6, r6, r3
    296c:	6026      	str	r6, [r4, #0]
    296e:	6165      	str	r5, [r4, #20]
    2970:	9e01      	ldr	r6, [sp, #4]
    2972:	1aed      	subs	r5, r5, r3
    2974:	60a5      	str	r5, [r4, #8]
    2976:	9b01      	ldr	r3, [sp, #4]
    2978:	429e      	cmp	r6, r3
    297a:	d900      	bls.n	297e <__ssputs_r+0x8e>
    297c:	9e01      	ldr	r6, [sp, #4]
    297e:	0032      	movs	r2, r6
    2980:	9903      	ldr	r1, [sp, #12]
    2982:	6820      	ldr	r0, [r4, #0]
    2984:	f000 faa3 	bl	2ece <memmove>
    2988:	68a3      	ldr	r3, [r4, #8]
    298a:	2000      	movs	r0, #0
    298c:	1b9b      	subs	r3, r3, r6
    298e:	60a3      	str	r3, [r4, #8]
    2990:	6823      	ldr	r3, [r4, #0]
    2992:	199e      	adds	r6, r3, r6
    2994:	6026      	str	r6, [r4, #0]
    2996:	e7da      	b.n	294e <__ssputs_r+0x5e>
    2998:	002a      	movs	r2, r5
    299a:	0038      	movs	r0, r7
    299c:	f7ff ff82 	bl	28a4 <_realloc_r>
    29a0:	1e06      	subs	r6, r0, #0
    29a2:	d1e0      	bne.n	2966 <__ssputs_r+0x76>
    29a4:	0038      	movs	r0, r7
    29a6:	6921      	ldr	r1, [r4, #16]
    29a8:	f7ff fcd8 	bl	235c <_free_r>
    29ac:	e7c7      	b.n	293e <__ssputs_r+0x4e>
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	fffffb7f 	.word	0xfffffb7f

000029b4 <_svfiprintf_r>:
    29b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29b6:	b0a1      	sub	sp, #132	; 0x84
    29b8:	9003      	str	r0, [sp, #12]
    29ba:	001d      	movs	r5, r3
    29bc:	898b      	ldrh	r3, [r1, #12]
    29be:	000f      	movs	r7, r1
    29c0:	0016      	movs	r6, r2
    29c2:	061b      	lsls	r3, r3, #24
    29c4:	d511      	bpl.n	29ea <_svfiprintf_r+0x36>
    29c6:	690b      	ldr	r3, [r1, #16]
    29c8:	2b00      	cmp	r3, #0
    29ca:	d10e      	bne.n	29ea <_svfiprintf_r+0x36>
    29cc:	2140      	movs	r1, #64	; 0x40
    29ce:	f7ff fd0f 	bl	23f0 <_malloc_r>
    29d2:	6038      	str	r0, [r7, #0]
    29d4:	6138      	str	r0, [r7, #16]
    29d6:	2800      	cmp	r0, #0
    29d8:	d105      	bne.n	29e6 <_svfiprintf_r+0x32>
    29da:	230c      	movs	r3, #12
    29dc:	9a03      	ldr	r2, [sp, #12]
    29de:	3801      	subs	r0, #1
    29e0:	6013      	str	r3, [r2, #0]
    29e2:	b021      	add	sp, #132	; 0x84
    29e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29e6:	2340      	movs	r3, #64	; 0x40
    29e8:	617b      	str	r3, [r7, #20]
    29ea:	2300      	movs	r3, #0
    29ec:	ac08      	add	r4, sp, #32
    29ee:	6163      	str	r3, [r4, #20]
    29f0:	3320      	adds	r3, #32
    29f2:	7663      	strb	r3, [r4, #25]
    29f4:	3310      	adds	r3, #16
    29f6:	76a3      	strb	r3, [r4, #26]
    29f8:	9507      	str	r5, [sp, #28]
    29fa:	0035      	movs	r5, r6
    29fc:	782b      	ldrb	r3, [r5, #0]
    29fe:	2b00      	cmp	r3, #0
    2a00:	d001      	beq.n	2a06 <_svfiprintf_r+0x52>
    2a02:	2b25      	cmp	r3, #37	; 0x25
    2a04:	d147      	bne.n	2a96 <_svfiprintf_r+0xe2>
    2a06:	1bab      	subs	r3, r5, r6
    2a08:	9305      	str	r3, [sp, #20]
    2a0a:	42b5      	cmp	r5, r6
    2a0c:	d00c      	beq.n	2a28 <_svfiprintf_r+0x74>
    2a0e:	0032      	movs	r2, r6
    2a10:	0039      	movs	r1, r7
    2a12:	9803      	ldr	r0, [sp, #12]
    2a14:	f7ff ff6c 	bl	28f0 <__ssputs_r>
    2a18:	1c43      	adds	r3, r0, #1
    2a1a:	d100      	bne.n	2a1e <_svfiprintf_r+0x6a>
    2a1c:	e0ae      	b.n	2b7c <_svfiprintf_r+0x1c8>
    2a1e:	6962      	ldr	r2, [r4, #20]
    2a20:	9b05      	ldr	r3, [sp, #20]
    2a22:	4694      	mov	ip, r2
    2a24:	4463      	add	r3, ip
    2a26:	6163      	str	r3, [r4, #20]
    2a28:	782b      	ldrb	r3, [r5, #0]
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d100      	bne.n	2a30 <_svfiprintf_r+0x7c>
    2a2e:	e0a5      	b.n	2b7c <_svfiprintf_r+0x1c8>
    2a30:	2201      	movs	r2, #1
    2a32:	2300      	movs	r3, #0
    2a34:	4252      	negs	r2, r2
    2a36:	6062      	str	r2, [r4, #4]
    2a38:	a904      	add	r1, sp, #16
    2a3a:	3254      	adds	r2, #84	; 0x54
    2a3c:	1852      	adds	r2, r2, r1
    2a3e:	1c6e      	adds	r6, r5, #1
    2a40:	6023      	str	r3, [r4, #0]
    2a42:	60e3      	str	r3, [r4, #12]
    2a44:	60a3      	str	r3, [r4, #8]
    2a46:	7013      	strb	r3, [r2, #0]
    2a48:	65a3      	str	r3, [r4, #88]	; 0x58
    2a4a:	2205      	movs	r2, #5
    2a4c:	7831      	ldrb	r1, [r6, #0]
    2a4e:	4854      	ldr	r0, [pc, #336]	; (2ba0 <_svfiprintf_r+0x1ec>)
    2a50:	f000 fa32 	bl	2eb8 <memchr>
    2a54:	1c75      	adds	r5, r6, #1
    2a56:	2800      	cmp	r0, #0
    2a58:	d11f      	bne.n	2a9a <_svfiprintf_r+0xe6>
    2a5a:	6822      	ldr	r2, [r4, #0]
    2a5c:	06d3      	lsls	r3, r2, #27
    2a5e:	d504      	bpl.n	2a6a <_svfiprintf_r+0xb6>
    2a60:	2353      	movs	r3, #83	; 0x53
    2a62:	a904      	add	r1, sp, #16
    2a64:	185b      	adds	r3, r3, r1
    2a66:	2120      	movs	r1, #32
    2a68:	7019      	strb	r1, [r3, #0]
    2a6a:	0713      	lsls	r3, r2, #28
    2a6c:	d504      	bpl.n	2a78 <_svfiprintf_r+0xc4>
    2a6e:	2353      	movs	r3, #83	; 0x53
    2a70:	a904      	add	r1, sp, #16
    2a72:	185b      	adds	r3, r3, r1
    2a74:	212b      	movs	r1, #43	; 0x2b
    2a76:	7019      	strb	r1, [r3, #0]
    2a78:	7833      	ldrb	r3, [r6, #0]
    2a7a:	2b2a      	cmp	r3, #42	; 0x2a
    2a7c:	d016      	beq.n	2aac <_svfiprintf_r+0xf8>
    2a7e:	0035      	movs	r5, r6
    2a80:	2100      	movs	r1, #0
    2a82:	200a      	movs	r0, #10
    2a84:	68e3      	ldr	r3, [r4, #12]
    2a86:	782a      	ldrb	r2, [r5, #0]
    2a88:	1c6e      	adds	r6, r5, #1
    2a8a:	3a30      	subs	r2, #48	; 0x30
    2a8c:	2a09      	cmp	r2, #9
    2a8e:	d94e      	bls.n	2b2e <_svfiprintf_r+0x17a>
    2a90:	2900      	cmp	r1, #0
    2a92:	d111      	bne.n	2ab8 <_svfiprintf_r+0x104>
    2a94:	e017      	b.n	2ac6 <_svfiprintf_r+0x112>
    2a96:	3501      	adds	r5, #1
    2a98:	e7b0      	b.n	29fc <_svfiprintf_r+0x48>
    2a9a:	4b41      	ldr	r3, [pc, #260]	; (2ba0 <_svfiprintf_r+0x1ec>)
    2a9c:	6822      	ldr	r2, [r4, #0]
    2a9e:	1ac0      	subs	r0, r0, r3
    2aa0:	2301      	movs	r3, #1
    2aa2:	4083      	lsls	r3, r0
    2aa4:	4313      	orrs	r3, r2
    2aa6:	002e      	movs	r6, r5
    2aa8:	6023      	str	r3, [r4, #0]
    2aaa:	e7ce      	b.n	2a4a <_svfiprintf_r+0x96>
    2aac:	9b07      	ldr	r3, [sp, #28]
    2aae:	1d19      	adds	r1, r3, #4
    2ab0:	681b      	ldr	r3, [r3, #0]
    2ab2:	9107      	str	r1, [sp, #28]
    2ab4:	2b00      	cmp	r3, #0
    2ab6:	db01      	blt.n	2abc <_svfiprintf_r+0x108>
    2ab8:	930b      	str	r3, [sp, #44]	; 0x2c
    2aba:	e004      	b.n	2ac6 <_svfiprintf_r+0x112>
    2abc:	425b      	negs	r3, r3
    2abe:	60e3      	str	r3, [r4, #12]
    2ac0:	2302      	movs	r3, #2
    2ac2:	4313      	orrs	r3, r2
    2ac4:	6023      	str	r3, [r4, #0]
    2ac6:	782b      	ldrb	r3, [r5, #0]
    2ac8:	2b2e      	cmp	r3, #46	; 0x2e
    2aca:	d10a      	bne.n	2ae2 <_svfiprintf_r+0x12e>
    2acc:	786b      	ldrb	r3, [r5, #1]
    2ace:	2b2a      	cmp	r3, #42	; 0x2a
    2ad0:	d135      	bne.n	2b3e <_svfiprintf_r+0x18a>
    2ad2:	9b07      	ldr	r3, [sp, #28]
    2ad4:	3502      	adds	r5, #2
    2ad6:	1d1a      	adds	r2, r3, #4
    2ad8:	681b      	ldr	r3, [r3, #0]
    2ada:	9207      	str	r2, [sp, #28]
    2adc:	2b00      	cmp	r3, #0
    2ade:	db2b      	blt.n	2b38 <_svfiprintf_r+0x184>
    2ae0:	9309      	str	r3, [sp, #36]	; 0x24
    2ae2:	4e30      	ldr	r6, [pc, #192]	; (2ba4 <_svfiprintf_r+0x1f0>)
    2ae4:	2203      	movs	r2, #3
    2ae6:	0030      	movs	r0, r6
    2ae8:	7829      	ldrb	r1, [r5, #0]
    2aea:	f000 f9e5 	bl	2eb8 <memchr>
    2aee:	2800      	cmp	r0, #0
    2af0:	d006      	beq.n	2b00 <_svfiprintf_r+0x14c>
    2af2:	2340      	movs	r3, #64	; 0x40
    2af4:	1b80      	subs	r0, r0, r6
    2af6:	4083      	lsls	r3, r0
    2af8:	6822      	ldr	r2, [r4, #0]
    2afa:	3501      	adds	r5, #1
    2afc:	4313      	orrs	r3, r2
    2afe:	6023      	str	r3, [r4, #0]
    2b00:	7829      	ldrb	r1, [r5, #0]
    2b02:	2206      	movs	r2, #6
    2b04:	4828      	ldr	r0, [pc, #160]	; (2ba8 <_svfiprintf_r+0x1f4>)
    2b06:	1c6e      	adds	r6, r5, #1
    2b08:	7621      	strb	r1, [r4, #24]
    2b0a:	f000 f9d5 	bl	2eb8 <memchr>
    2b0e:	2800      	cmp	r0, #0
    2b10:	d03c      	beq.n	2b8c <_svfiprintf_r+0x1d8>
    2b12:	4b26      	ldr	r3, [pc, #152]	; (2bac <_svfiprintf_r+0x1f8>)
    2b14:	2b00      	cmp	r3, #0
    2b16:	d125      	bne.n	2b64 <_svfiprintf_r+0x1b0>
    2b18:	2207      	movs	r2, #7
    2b1a:	9b07      	ldr	r3, [sp, #28]
    2b1c:	3307      	adds	r3, #7
    2b1e:	4393      	bics	r3, r2
    2b20:	3308      	adds	r3, #8
    2b22:	9307      	str	r3, [sp, #28]
    2b24:	6963      	ldr	r3, [r4, #20]
    2b26:	9a04      	ldr	r2, [sp, #16]
    2b28:	189b      	adds	r3, r3, r2
    2b2a:	6163      	str	r3, [r4, #20]
    2b2c:	e765      	b.n	29fa <_svfiprintf_r+0x46>
    2b2e:	4343      	muls	r3, r0
    2b30:	0035      	movs	r5, r6
    2b32:	2101      	movs	r1, #1
    2b34:	189b      	adds	r3, r3, r2
    2b36:	e7a6      	b.n	2a86 <_svfiprintf_r+0xd2>
    2b38:	2301      	movs	r3, #1
    2b3a:	425b      	negs	r3, r3
    2b3c:	e7d0      	b.n	2ae0 <_svfiprintf_r+0x12c>
    2b3e:	2300      	movs	r3, #0
    2b40:	200a      	movs	r0, #10
    2b42:	001a      	movs	r2, r3
    2b44:	3501      	adds	r5, #1
    2b46:	6063      	str	r3, [r4, #4]
    2b48:	7829      	ldrb	r1, [r5, #0]
    2b4a:	1c6e      	adds	r6, r5, #1
    2b4c:	3930      	subs	r1, #48	; 0x30
    2b4e:	2909      	cmp	r1, #9
    2b50:	d903      	bls.n	2b5a <_svfiprintf_r+0x1a6>
    2b52:	2b00      	cmp	r3, #0
    2b54:	d0c5      	beq.n	2ae2 <_svfiprintf_r+0x12e>
    2b56:	9209      	str	r2, [sp, #36]	; 0x24
    2b58:	e7c3      	b.n	2ae2 <_svfiprintf_r+0x12e>
    2b5a:	4342      	muls	r2, r0
    2b5c:	0035      	movs	r5, r6
    2b5e:	2301      	movs	r3, #1
    2b60:	1852      	adds	r2, r2, r1
    2b62:	e7f1      	b.n	2b48 <_svfiprintf_r+0x194>
    2b64:	ab07      	add	r3, sp, #28
    2b66:	9300      	str	r3, [sp, #0]
    2b68:	003a      	movs	r2, r7
    2b6a:	0021      	movs	r1, r4
    2b6c:	4b10      	ldr	r3, [pc, #64]	; (2bb0 <_svfiprintf_r+0x1fc>)
    2b6e:	9803      	ldr	r0, [sp, #12]
    2b70:	e000      	b.n	2b74 <_svfiprintf_r+0x1c0>
    2b72:	bf00      	nop
    2b74:	9004      	str	r0, [sp, #16]
    2b76:	9b04      	ldr	r3, [sp, #16]
    2b78:	3301      	adds	r3, #1
    2b7a:	d1d3      	bne.n	2b24 <_svfiprintf_r+0x170>
    2b7c:	89bb      	ldrh	r3, [r7, #12]
    2b7e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2b80:	065b      	lsls	r3, r3, #25
    2b82:	d400      	bmi.n	2b86 <_svfiprintf_r+0x1d2>
    2b84:	e72d      	b.n	29e2 <_svfiprintf_r+0x2e>
    2b86:	2001      	movs	r0, #1
    2b88:	4240      	negs	r0, r0
    2b8a:	e72a      	b.n	29e2 <_svfiprintf_r+0x2e>
    2b8c:	ab07      	add	r3, sp, #28
    2b8e:	9300      	str	r3, [sp, #0]
    2b90:	003a      	movs	r2, r7
    2b92:	0021      	movs	r1, r4
    2b94:	4b06      	ldr	r3, [pc, #24]	; (2bb0 <_svfiprintf_r+0x1fc>)
    2b96:	9803      	ldr	r0, [sp, #12]
    2b98:	f000 f87c 	bl	2c94 <_printf_i>
    2b9c:	e7ea      	b.n	2b74 <_svfiprintf_r+0x1c0>
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	000034f8 	.word	0x000034f8
    2ba4:	000034fe 	.word	0x000034fe
    2ba8:	00003502 	.word	0x00003502
    2bac:	00000000 	.word	0x00000000
    2bb0:	000028f1 	.word	0x000028f1

00002bb4 <_printf_common>:
    2bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2bb6:	0015      	movs	r5, r2
    2bb8:	9301      	str	r3, [sp, #4]
    2bba:	688a      	ldr	r2, [r1, #8]
    2bbc:	690b      	ldr	r3, [r1, #16]
    2bbe:	000c      	movs	r4, r1
    2bc0:	9000      	str	r0, [sp, #0]
    2bc2:	4293      	cmp	r3, r2
    2bc4:	da00      	bge.n	2bc8 <_printf_common+0x14>
    2bc6:	0013      	movs	r3, r2
    2bc8:	0022      	movs	r2, r4
    2bca:	602b      	str	r3, [r5, #0]
    2bcc:	3243      	adds	r2, #67	; 0x43
    2bce:	7812      	ldrb	r2, [r2, #0]
    2bd0:	2a00      	cmp	r2, #0
    2bd2:	d001      	beq.n	2bd8 <_printf_common+0x24>
    2bd4:	3301      	adds	r3, #1
    2bd6:	602b      	str	r3, [r5, #0]
    2bd8:	6823      	ldr	r3, [r4, #0]
    2bda:	069b      	lsls	r3, r3, #26
    2bdc:	d502      	bpl.n	2be4 <_printf_common+0x30>
    2bde:	682b      	ldr	r3, [r5, #0]
    2be0:	3302      	adds	r3, #2
    2be2:	602b      	str	r3, [r5, #0]
    2be4:	6822      	ldr	r2, [r4, #0]
    2be6:	2306      	movs	r3, #6
    2be8:	0017      	movs	r7, r2
    2bea:	401f      	ands	r7, r3
    2bec:	421a      	tst	r2, r3
    2bee:	d027      	beq.n	2c40 <_printf_common+0x8c>
    2bf0:	0023      	movs	r3, r4
    2bf2:	3343      	adds	r3, #67	; 0x43
    2bf4:	781b      	ldrb	r3, [r3, #0]
    2bf6:	1e5a      	subs	r2, r3, #1
    2bf8:	4193      	sbcs	r3, r2
    2bfa:	6822      	ldr	r2, [r4, #0]
    2bfc:	0692      	lsls	r2, r2, #26
    2bfe:	d430      	bmi.n	2c62 <_printf_common+0xae>
    2c00:	0022      	movs	r2, r4
    2c02:	9901      	ldr	r1, [sp, #4]
    2c04:	9800      	ldr	r0, [sp, #0]
    2c06:	9e08      	ldr	r6, [sp, #32]
    2c08:	3243      	adds	r2, #67	; 0x43
    2c0a:	47b0      	blx	r6
    2c0c:	1c43      	adds	r3, r0, #1
    2c0e:	d025      	beq.n	2c5c <_printf_common+0xa8>
    2c10:	2306      	movs	r3, #6
    2c12:	6820      	ldr	r0, [r4, #0]
    2c14:	682a      	ldr	r2, [r5, #0]
    2c16:	68e1      	ldr	r1, [r4, #12]
    2c18:	2500      	movs	r5, #0
    2c1a:	4003      	ands	r3, r0
    2c1c:	2b04      	cmp	r3, #4
    2c1e:	d103      	bne.n	2c28 <_printf_common+0x74>
    2c20:	1a8d      	subs	r5, r1, r2
    2c22:	43eb      	mvns	r3, r5
    2c24:	17db      	asrs	r3, r3, #31
    2c26:	401d      	ands	r5, r3
    2c28:	68a3      	ldr	r3, [r4, #8]
    2c2a:	6922      	ldr	r2, [r4, #16]
    2c2c:	4293      	cmp	r3, r2
    2c2e:	dd01      	ble.n	2c34 <_printf_common+0x80>
    2c30:	1a9b      	subs	r3, r3, r2
    2c32:	18ed      	adds	r5, r5, r3
    2c34:	2700      	movs	r7, #0
    2c36:	42bd      	cmp	r5, r7
    2c38:	d120      	bne.n	2c7c <_printf_common+0xc8>
    2c3a:	2000      	movs	r0, #0
    2c3c:	e010      	b.n	2c60 <_printf_common+0xac>
    2c3e:	3701      	adds	r7, #1
    2c40:	68e3      	ldr	r3, [r4, #12]
    2c42:	682a      	ldr	r2, [r5, #0]
    2c44:	1a9b      	subs	r3, r3, r2
    2c46:	42bb      	cmp	r3, r7
    2c48:	ddd2      	ble.n	2bf0 <_printf_common+0x3c>
    2c4a:	0022      	movs	r2, r4
    2c4c:	2301      	movs	r3, #1
    2c4e:	9901      	ldr	r1, [sp, #4]
    2c50:	9800      	ldr	r0, [sp, #0]
    2c52:	9e08      	ldr	r6, [sp, #32]
    2c54:	3219      	adds	r2, #25
    2c56:	47b0      	blx	r6
    2c58:	1c43      	adds	r3, r0, #1
    2c5a:	d1f0      	bne.n	2c3e <_printf_common+0x8a>
    2c5c:	2001      	movs	r0, #1
    2c5e:	4240      	negs	r0, r0
    2c60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2c62:	2030      	movs	r0, #48	; 0x30
    2c64:	18e1      	adds	r1, r4, r3
    2c66:	3143      	adds	r1, #67	; 0x43
    2c68:	7008      	strb	r0, [r1, #0]
    2c6a:	0021      	movs	r1, r4
    2c6c:	1c5a      	adds	r2, r3, #1
    2c6e:	3145      	adds	r1, #69	; 0x45
    2c70:	7809      	ldrb	r1, [r1, #0]
    2c72:	18a2      	adds	r2, r4, r2
    2c74:	3243      	adds	r2, #67	; 0x43
    2c76:	3302      	adds	r3, #2
    2c78:	7011      	strb	r1, [r2, #0]
    2c7a:	e7c1      	b.n	2c00 <_printf_common+0x4c>
    2c7c:	0022      	movs	r2, r4
    2c7e:	2301      	movs	r3, #1
    2c80:	9901      	ldr	r1, [sp, #4]
    2c82:	9800      	ldr	r0, [sp, #0]
    2c84:	9e08      	ldr	r6, [sp, #32]
    2c86:	321a      	adds	r2, #26
    2c88:	47b0      	blx	r6
    2c8a:	1c43      	adds	r3, r0, #1
    2c8c:	d0e6      	beq.n	2c5c <_printf_common+0xa8>
    2c8e:	3701      	adds	r7, #1
    2c90:	e7d1      	b.n	2c36 <_printf_common+0x82>
    2c92:	Address 0x00002c92 is out of bounds.


00002c94 <_printf_i>:
    2c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c96:	b08b      	sub	sp, #44	; 0x2c
    2c98:	9206      	str	r2, [sp, #24]
    2c9a:	000a      	movs	r2, r1
    2c9c:	3243      	adds	r2, #67	; 0x43
    2c9e:	9307      	str	r3, [sp, #28]
    2ca0:	9005      	str	r0, [sp, #20]
    2ca2:	9204      	str	r2, [sp, #16]
    2ca4:	7e0a      	ldrb	r2, [r1, #24]
    2ca6:	000c      	movs	r4, r1
    2ca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2caa:	2a78      	cmp	r2, #120	; 0x78
    2cac:	d806      	bhi.n	2cbc <_printf_i+0x28>
    2cae:	2a62      	cmp	r2, #98	; 0x62
    2cb0:	d808      	bhi.n	2cc4 <_printf_i+0x30>
    2cb2:	2a00      	cmp	r2, #0
    2cb4:	d100      	bne.n	2cb8 <_printf_i+0x24>
    2cb6:	e0c0      	b.n	2e3a <_printf_i+0x1a6>
    2cb8:	2a58      	cmp	r2, #88	; 0x58
    2cba:	d052      	beq.n	2d62 <_printf_i+0xce>
    2cbc:	0026      	movs	r6, r4
    2cbe:	3642      	adds	r6, #66	; 0x42
    2cc0:	7032      	strb	r2, [r6, #0]
    2cc2:	e022      	b.n	2d0a <_printf_i+0x76>
    2cc4:	0010      	movs	r0, r2
    2cc6:	3863      	subs	r0, #99	; 0x63
    2cc8:	2815      	cmp	r0, #21
    2cca:	d8f7      	bhi.n	2cbc <_printf_i+0x28>
    2ccc:	f000 f91a 	bl	2f04 <__gnu_thumb1_case_shi>
    2cd0:	001f0016 	.word	0x001f0016
    2cd4:	fff6fff6 	.word	0xfff6fff6
    2cd8:	fff6fff6 	.word	0xfff6fff6
    2cdc:	fff6001f 	.word	0xfff6001f
    2ce0:	fff6fff6 	.word	0xfff6fff6
    2ce4:	00a8fff6 	.word	0x00a8fff6
    2ce8:	009a0036 	.word	0x009a0036
    2cec:	fff6fff6 	.word	0xfff6fff6
    2cf0:	fff600b9 	.word	0xfff600b9
    2cf4:	fff60036 	.word	0xfff60036
    2cf8:	009efff6 	.word	0x009efff6
    2cfc:	0026      	movs	r6, r4
    2cfe:	681a      	ldr	r2, [r3, #0]
    2d00:	3642      	adds	r6, #66	; 0x42
    2d02:	1d11      	adds	r1, r2, #4
    2d04:	6019      	str	r1, [r3, #0]
    2d06:	6813      	ldr	r3, [r2, #0]
    2d08:	7033      	strb	r3, [r6, #0]
    2d0a:	2301      	movs	r3, #1
    2d0c:	e0a7      	b.n	2e5e <_printf_i+0x1ca>
    2d0e:	6808      	ldr	r0, [r1, #0]
    2d10:	6819      	ldr	r1, [r3, #0]
    2d12:	1d0a      	adds	r2, r1, #4
    2d14:	0605      	lsls	r5, r0, #24
    2d16:	d50b      	bpl.n	2d30 <_printf_i+0x9c>
    2d18:	680d      	ldr	r5, [r1, #0]
    2d1a:	601a      	str	r2, [r3, #0]
    2d1c:	2d00      	cmp	r5, #0
    2d1e:	da03      	bge.n	2d28 <_printf_i+0x94>
    2d20:	232d      	movs	r3, #45	; 0x2d
    2d22:	9a04      	ldr	r2, [sp, #16]
    2d24:	426d      	negs	r5, r5
    2d26:	7013      	strb	r3, [r2, #0]
    2d28:	4b61      	ldr	r3, [pc, #388]	; (2eb0 <_printf_i+0x21c>)
    2d2a:	270a      	movs	r7, #10
    2d2c:	9303      	str	r3, [sp, #12]
    2d2e:	e032      	b.n	2d96 <_printf_i+0x102>
    2d30:	680d      	ldr	r5, [r1, #0]
    2d32:	601a      	str	r2, [r3, #0]
    2d34:	0641      	lsls	r1, r0, #25
    2d36:	d5f1      	bpl.n	2d1c <_printf_i+0x88>
    2d38:	b22d      	sxth	r5, r5
    2d3a:	e7ef      	b.n	2d1c <_printf_i+0x88>
    2d3c:	680d      	ldr	r5, [r1, #0]
    2d3e:	6819      	ldr	r1, [r3, #0]
    2d40:	1d08      	adds	r0, r1, #4
    2d42:	6018      	str	r0, [r3, #0]
    2d44:	062e      	lsls	r6, r5, #24
    2d46:	d501      	bpl.n	2d4c <_printf_i+0xb8>
    2d48:	680d      	ldr	r5, [r1, #0]
    2d4a:	e003      	b.n	2d54 <_printf_i+0xc0>
    2d4c:	066d      	lsls	r5, r5, #25
    2d4e:	d5fb      	bpl.n	2d48 <_printf_i+0xb4>
    2d50:	680d      	ldr	r5, [r1, #0]
    2d52:	b2ad      	uxth	r5, r5
    2d54:	4b56      	ldr	r3, [pc, #344]	; (2eb0 <_printf_i+0x21c>)
    2d56:	270a      	movs	r7, #10
    2d58:	9303      	str	r3, [sp, #12]
    2d5a:	2a6f      	cmp	r2, #111	; 0x6f
    2d5c:	d117      	bne.n	2d8e <_printf_i+0xfa>
    2d5e:	2708      	movs	r7, #8
    2d60:	e015      	b.n	2d8e <_printf_i+0xfa>
    2d62:	3145      	adds	r1, #69	; 0x45
    2d64:	700a      	strb	r2, [r1, #0]
    2d66:	4a52      	ldr	r2, [pc, #328]	; (2eb0 <_printf_i+0x21c>)
    2d68:	9203      	str	r2, [sp, #12]
    2d6a:	681a      	ldr	r2, [r3, #0]
    2d6c:	6821      	ldr	r1, [r4, #0]
    2d6e:	ca20      	ldmia	r2!, {r5}
    2d70:	601a      	str	r2, [r3, #0]
    2d72:	0608      	lsls	r0, r1, #24
    2d74:	d550      	bpl.n	2e18 <_printf_i+0x184>
    2d76:	07cb      	lsls	r3, r1, #31
    2d78:	d502      	bpl.n	2d80 <_printf_i+0xec>
    2d7a:	2320      	movs	r3, #32
    2d7c:	4319      	orrs	r1, r3
    2d7e:	6021      	str	r1, [r4, #0]
    2d80:	2710      	movs	r7, #16
    2d82:	2d00      	cmp	r5, #0
    2d84:	d103      	bne.n	2d8e <_printf_i+0xfa>
    2d86:	2320      	movs	r3, #32
    2d88:	6822      	ldr	r2, [r4, #0]
    2d8a:	439a      	bics	r2, r3
    2d8c:	6022      	str	r2, [r4, #0]
    2d8e:	0023      	movs	r3, r4
    2d90:	2200      	movs	r2, #0
    2d92:	3343      	adds	r3, #67	; 0x43
    2d94:	701a      	strb	r2, [r3, #0]
    2d96:	6863      	ldr	r3, [r4, #4]
    2d98:	60a3      	str	r3, [r4, #8]
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	db03      	blt.n	2da6 <_printf_i+0x112>
    2d9e:	2204      	movs	r2, #4
    2da0:	6821      	ldr	r1, [r4, #0]
    2da2:	4391      	bics	r1, r2
    2da4:	6021      	str	r1, [r4, #0]
    2da6:	2d00      	cmp	r5, #0
    2da8:	d102      	bne.n	2db0 <_printf_i+0x11c>
    2daa:	9e04      	ldr	r6, [sp, #16]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d00c      	beq.n	2dca <_printf_i+0x136>
    2db0:	9e04      	ldr	r6, [sp, #16]
    2db2:	0028      	movs	r0, r5
    2db4:	0039      	movs	r1, r7
    2db6:	f7ff fa2d 	bl	2214 <__aeabi_uidivmod>
    2dba:	9b03      	ldr	r3, [sp, #12]
    2dbc:	3e01      	subs	r6, #1
    2dbe:	5c5b      	ldrb	r3, [r3, r1]
    2dc0:	7033      	strb	r3, [r6, #0]
    2dc2:	002b      	movs	r3, r5
    2dc4:	0005      	movs	r5, r0
    2dc6:	429f      	cmp	r7, r3
    2dc8:	d9f3      	bls.n	2db2 <_printf_i+0x11e>
    2dca:	2f08      	cmp	r7, #8
    2dcc:	d109      	bne.n	2de2 <_printf_i+0x14e>
    2dce:	6823      	ldr	r3, [r4, #0]
    2dd0:	07db      	lsls	r3, r3, #31
    2dd2:	d506      	bpl.n	2de2 <_printf_i+0x14e>
    2dd4:	6863      	ldr	r3, [r4, #4]
    2dd6:	6922      	ldr	r2, [r4, #16]
    2dd8:	4293      	cmp	r3, r2
    2dda:	dc02      	bgt.n	2de2 <_printf_i+0x14e>
    2ddc:	2330      	movs	r3, #48	; 0x30
    2dde:	3e01      	subs	r6, #1
    2de0:	7033      	strb	r3, [r6, #0]
    2de2:	9b04      	ldr	r3, [sp, #16]
    2de4:	1b9b      	subs	r3, r3, r6
    2de6:	6123      	str	r3, [r4, #16]
    2de8:	9b07      	ldr	r3, [sp, #28]
    2dea:	0021      	movs	r1, r4
    2dec:	9300      	str	r3, [sp, #0]
    2dee:	9805      	ldr	r0, [sp, #20]
    2df0:	9b06      	ldr	r3, [sp, #24]
    2df2:	aa09      	add	r2, sp, #36	; 0x24
    2df4:	f7ff fede 	bl	2bb4 <_printf_common>
    2df8:	1c43      	adds	r3, r0, #1
    2dfa:	d135      	bne.n	2e68 <_printf_i+0x1d4>
    2dfc:	2001      	movs	r0, #1
    2dfe:	4240      	negs	r0, r0
    2e00:	b00b      	add	sp, #44	; 0x2c
    2e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e04:	2220      	movs	r2, #32
    2e06:	6809      	ldr	r1, [r1, #0]
    2e08:	430a      	orrs	r2, r1
    2e0a:	6022      	str	r2, [r4, #0]
    2e0c:	0022      	movs	r2, r4
    2e0e:	2178      	movs	r1, #120	; 0x78
    2e10:	3245      	adds	r2, #69	; 0x45
    2e12:	7011      	strb	r1, [r2, #0]
    2e14:	4a27      	ldr	r2, [pc, #156]	; (2eb4 <_printf_i+0x220>)
    2e16:	e7a7      	b.n	2d68 <_printf_i+0xd4>
    2e18:	0648      	lsls	r0, r1, #25
    2e1a:	d5ac      	bpl.n	2d76 <_printf_i+0xe2>
    2e1c:	b2ad      	uxth	r5, r5
    2e1e:	e7aa      	b.n	2d76 <_printf_i+0xe2>
    2e20:	681a      	ldr	r2, [r3, #0]
    2e22:	680d      	ldr	r5, [r1, #0]
    2e24:	1d10      	adds	r0, r2, #4
    2e26:	6949      	ldr	r1, [r1, #20]
    2e28:	6018      	str	r0, [r3, #0]
    2e2a:	6813      	ldr	r3, [r2, #0]
    2e2c:	062e      	lsls	r6, r5, #24
    2e2e:	d501      	bpl.n	2e34 <_printf_i+0x1a0>
    2e30:	6019      	str	r1, [r3, #0]
    2e32:	e002      	b.n	2e3a <_printf_i+0x1a6>
    2e34:	066d      	lsls	r5, r5, #25
    2e36:	d5fb      	bpl.n	2e30 <_printf_i+0x19c>
    2e38:	8019      	strh	r1, [r3, #0]
    2e3a:	2300      	movs	r3, #0
    2e3c:	9e04      	ldr	r6, [sp, #16]
    2e3e:	6123      	str	r3, [r4, #16]
    2e40:	e7d2      	b.n	2de8 <_printf_i+0x154>
    2e42:	681a      	ldr	r2, [r3, #0]
    2e44:	1d11      	adds	r1, r2, #4
    2e46:	6019      	str	r1, [r3, #0]
    2e48:	6816      	ldr	r6, [r2, #0]
    2e4a:	2100      	movs	r1, #0
    2e4c:	0030      	movs	r0, r6
    2e4e:	6862      	ldr	r2, [r4, #4]
    2e50:	f000 f832 	bl	2eb8 <memchr>
    2e54:	2800      	cmp	r0, #0
    2e56:	d001      	beq.n	2e5c <_printf_i+0x1c8>
    2e58:	1b80      	subs	r0, r0, r6
    2e5a:	6060      	str	r0, [r4, #4]
    2e5c:	6863      	ldr	r3, [r4, #4]
    2e5e:	6123      	str	r3, [r4, #16]
    2e60:	2300      	movs	r3, #0
    2e62:	9a04      	ldr	r2, [sp, #16]
    2e64:	7013      	strb	r3, [r2, #0]
    2e66:	e7bf      	b.n	2de8 <_printf_i+0x154>
    2e68:	6923      	ldr	r3, [r4, #16]
    2e6a:	0032      	movs	r2, r6
    2e6c:	9906      	ldr	r1, [sp, #24]
    2e6e:	9805      	ldr	r0, [sp, #20]
    2e70:	9d07      	ldr	r5, [sp, #28]
    2e72:	47a8      	blx	r5
    2e74:	1c43      	adds	r3, r0, #1
    2e76:	d0c1      	beq.n	2dfc <_printf_i+0x168>
    2e78:	6823      	ldr	r3, [r4, #0]
    2e7a:	079b      	lsls	r3, r3, #30
    2e7c:	d415      	bmi.n	2eaa <_printf_i+0x216>
    2e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e80:	68e0      	ldr	r0, [r4, #12]
    2e82:	4298      	cmp	r0, r3
    2e84:	dabc      	bge.n	2e00 <_printf_i+0x16c>
    2e86:	0018      	movs	r0, r3
    2e88:	e7ba      	b.n	2e00 <_printf_i+0x16c>
    2e8a:	0022      	movs	r2, r4
    2e8c:	2301      	movs	r3, #1
    2e8e:	9906      	ldr	r1, [sp, #24]
    2e90:	9805      	ldr	r0, [sp, #20]
    2e92:	9e07      	ldr	r6, [sp, #28]
    2e94:	3219      	adds	r2, #25
    2e96:	47b0      	blx	r6
    2e98:	1c43      	adds	r3, r0, #1
    2e9a:	d0af      	beq.n	2dfc <_printf_i+0x168>
    2e9c:	3501      	adds	r5, #1
    2e9e:	68e3      	ldr	r3, [r4, #12]
    2ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2ea2:	1a9b      	subs	r3, r3, r2
    2ea4:	42ab      	cmp	r3, r5
    2ea6:	dcf0      	bgt.n	2e8a <_printf_i+0x1f6>
    2ea8:	e7e9      	b.n	2e7e <_printf_i+0x1ea>
    2eaa:	2500      	movs	r5, #0
    2eac:	e7f7      	b.n	2e9e <_printf_i+0x20a>
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	00003509 	.word	0x00003509
    2eb4:	0000351a 	.word	0x0000351a

00002eb8 <memchr>:
    2eb8:	b2c9      	uxtb	r1, r1
    2eba:	1882      	adds	r2, r0, r2
    2ebc:	4290      	cmp	r0, r2
    2ebe:	d101      	bne.n	2ec4 <memchr+0xc>
    2ec0:	2000      	movs	r0, #0
    2ec2:	4770      	bx	lr
    2ec4:	7803      	ldrb	r3, [r0, #0]
    2ec6:	428b      	cmp	r3, r1
    2ec8:	d0fb      	beq.n	2ec2 <memchr+0xa>
    2eca:	3001      	adds	r0, #1
    2ecc:	e7f6      	b.n	2ebc <memchr+0x4>

00002ece <memmove>:
    2ece:	b510      	push	{r4, lr}
    2ed0:	4288      	cmp	r0, r1
    2ed2:	d902      	bls.n	2eda <memmove+0xc>
    2ed4:	188b      	adds	r3, r1, r2
    2ed6:	4298      	cmp	r0, r3
    2ed8:	d303      	bcc.n	2ee2 <memmove+0x14>
    2eda:	2300      	movs	r3, #0
    2edc:	e007      	b.n	2eee <memmove+0x20>
    2ede:	5c8b      	ldrb	r3, [r1, r2]
    2ee0:	5483      	strb	r3, [r0, r2]
    2ee2:	3a01      	subs	r2, #1
    2ee4:	d2fb      	bcs.n	2ede <memmove+0x10>
    2ee6:	bd10      	pop	{r4, pc}
    2ee8:	5ccc      	ldrb	r4, [r1, r3]
    2eea:	54c4      	strb	r4, [r0, r3]
    2eec:	3301      	adds	r3, #1
    2eee:	429a      	cmp	r2, r3
    2ef0:	d1fa      	bne.n	2ee8 <memmove+0x1a>
    2ef2:	e7f8      	b.n	2ee6 <memmove+0x18>

00002ef4 <_malloc_usable_size_r>:
    2ef4:	1f0b      	subs	r3, r1, #4
    2ef6:	681b      	ldr	r3, [r3, #0]
    2ef8:	1f18      	subs	r0, r3, #4
    2efa:	2b00      	cmp	r3, #0
    2efc:	da01      	bge.n	2f02 <_malloc_usable_size_r+0xe>
    2efe:	580b      	ldr	r3, [r1, r0]
    2f00:	18c0      	adds	r0, r0, r3
    2f02:	4770      	bx	lr

00002f04 <__gnu_thumb1_case_shi>:
    2f04:	b403      	push	{r0, r1}
    2f06:	4671      	mov	r1, lr
    2f08:	0849      	lsrs	r1, r1, #1
    2f0a:	0040      	lsls	r0, r0, #1
    2f0c:	0049      	lsls	r1, r1, #1
    2f0e:	5e09      	ldrsh	r1, [r1, r0]
    2f10:	0049      	lsls	r1, r1, #1
    2f12:	448e      	add	lr, r1
    2f14:	bc03      	pop	{r0, r1}
    2f16:	4770      	bx	lr
    2f18:	00002fa6 	.word	0x00002fa6
    2f1c:	000002d5 	.word	0x000002d5
    2f20:	00000067 	.word	0x00000067
    2f24:	00002fab 	.word	0x00002fab
    2f28:	00000441 	.word	0x00000441
    2f2c:	00000067 	.word	0x00000067
    2f30:	00002fb2 	.word	0x00002fb2
    2f34:	000004f5 	.word	0x000004f5
    2f38:	00000067 	.word	0x00000067
    2f3c:	00002fb9 	.word	0x00002fb9
    2f40:	000005cd 	.word	0x000005cd
    2f44:	00000061 	.word	0x00000061
    2f48:	00002fc1 	.word	0x00002fc1
    2f4c:	000009e1 	.word	0x000009e1
    2f50:	00000067 	.word	0x00000067
    2f54:	00002fc8 	.word	0x00002fc8
    2f58:	00000321 	.word	0x00000321
    2f5c:	00000061 	.word	0x00000061
    2f60:	00000000 	.word	0x00000000
    2f64:	00000018 	.word	0x00000018
    2f68:	00000000 	.word	0x00000000
    2f6c:	00000019 	.word	0x00000019
    2f70:	00000301 	.word	0x00000301
    2f74:	00000000 	.word	0x00000000
    2f78:	00000005 	.word	0x00000005
    2f7c:	00000000 	.word	0x00000000
    2f80:	00000008 	.word	0x00000008
    2f84:	00000000 	.word	0x00000000
    2f88:	00000009 	.word	0x00000009
    2f8c:	01010101 	.word	0x01010101
    2f90:	00000001 	.word	0x00000001
    2f94:	00003288 	.word	0x00003288
    2f98:	00001411 	.word	0x00001411
    2f9c:	00000061 	.word	0x00000061
    2fa0:	4c554e00 	.word	0x4c554e00
    2fa4:	004c      	.short	0x004c
    2fa6:	7865      	.short	0x7865
    2fa8:	73006365 	.word	0x73006365
    2fac:	756e7465 	.word	0x756e7465
    2fb0:	6564006d 	.word	0x6564006d
    2fb4:	6d756e6c 	.word	0x6d756e6c
    2fb8:	73696c00 	.word	0x73696c00
    2fbc:	6d756e74 	.word	0x6d756e74
    2fc0:	64707500 	.word	0x64707500
    2fc4:	00657461 	.word	0x00657461
    2fc8:	706c6568 	.word	0x706c6568
    2fcc:	00          	.byte	0x00
    2fcd:	41          	.byte	0x41
    2fce:	0054      	.short	0x0054
    2fd0:	432b5441 	.word	0x432b5441
    2fd4:	3d53474d 	.word	0x3d53474d
    2fd8:	22732522 	.word	0x22732522
    2fdc:	4d432b00 	.word	0x4d432b00
    2fe0:	1a005347 	.word	0x1a005347
    2fe4:	00          	.byte	0x00
    2fe5:	43          	.byte	0x43
    2fe6:	6d6f      	.short	0x6d6f
    2fe8:	646e616d 	.word	0x646e616d
    2fec:	6d697420 	.word	0x6d697420
    2ff0:	6f206465 	.word	0x6f206465
    2ff4:	75007475 	.word	0x75007475
    2ff8:	2d747261 	.word	0x2d747261
    2ffc:	6165723e 	.word	0x6165723e
    3000:	20292864 	.word	0x20292864
    3004:	75746572 	.word	0x75746572
    3008:	64656e72 	.word	0x64656e72
    300c:	6c756e20 	.word	0x6c756e20
    3010:	006c      	.short	0x006c
    3012:	7325      	.short	0x7325
    3014:	000a      	.short	0x000a
    3016:	5441      	.short	0x5441
    3018:	5253462b 	.word	0x5253462b
    301c:	3d444145 	.word	0x3d444145
    3020:	255c3a43 	.word	0x255c3a43
    3024:	78742e73 	.word	0x78742e73
    3028:	2c302c74 	.word	0x2c302c74
    302c:	00302c31 	.word	0x00302c31
    3030:	462b5441 	.word	0x462b5441
    3034:	45524353 	.word	0x45524353
    3038:	3d455441 	.word	0x3d455441
    303c:	255c3a43 	.word	0x255c3a43
    3040:	78742e73 	.word	0x78742e73
    3044:	54410074 	.word	0x54410074
    3048:	5753462b 	.word	0x5753462b
    304c:	45544952 	.word	0x45544952
    3050:	5c3a433d 	.word	0x5c3a433d
    3054:	742e7325 	.word	0x742e7325
    3058:	302c7478 	.word	0x302c7478
    305c:	312c312c 	.word	0x312c312c
    3060:	000a0d00 	.word	0x000a0d00
    3064:	6c6c616d 	.word	0x6c6c616d
    3068:	6620636f 	.word	0x6620636f
    306c:	656c6961 	.word	0x656c6961
    3070:	73550064 	.word	0x73550064
    3074:	3a656761 	.word	0x3a656761
    3078:	74657320 	.word	0x74657320
    307c:	206d756e 	.word	0x206d756e
    3080:	6d756e3c 	.word	0x6d756e3c
    3084:	3e726562 	.word	0x3e726562
    3088:	656c3c20 	.word	0x656c3c20
    308c:	3e6c6576 	.word	0x3e6c6576
    3090:	00          	.byte	0x00
    3091:	41          	.byte	0x41
    3092:	2b54      	.short	0x2b54
    3094:	45445346 	.word	0x45445346
    3098:	3a433d4c 	.word	0x3a433d4c
    309c:	2e73255c 	.word	0x2e73255c
    30a0:	00747874 	.word	0x00747874
    30a4:	67617355 	.word	0x67617355
    30a8:	64203a65 	.word	0x64203a65
    30ac:	756e6c65 	.word	0x756e6c65
    30b0:	6e3c206d 	.word	0x6e3c206d
    30b4:	65626d75 	.word	0x65626d75
    30b8:	3e72      	.short	0x3e72
    30ba:	00          	.byte	0x00
    30bb:	41          	.byte	0x41
    30bc:	53462b54 	.word	0x53462b54
    30c0:	433d534c 	.word	0x433d534c
    30c4:	5c3a      	.short	0x5c3a
    30c6:	00          	.byte	0x00
    30c7:	4c          	.byte	0x4c
    30c8:	3a747369 	.word	0x3a747369
    30cc:	7325000a 	.word	0x7325000a
    30d0:	6325203a 	.word	0x6325203a
    30d4:	000a      	.short	0x000a
    30d6:	5441      	.short	0x5441
    30d8:	2b003045 	.word	0x2b003045
    30dc:	47455243 	.word	0x47455243
    30e0:	2c30203a 	.word	0x2c30203a
    30e4:	54410031 	.word	0x54410031
    30e8:	4552432b 	.word	0x4552432b
    30ec:	41003f47 	.word	0x41003f47
    30f0:	4d432b54 	.word	0x4d432b54
    30f4:	313d4647 	.word	0x313d4647
    30f8:	2b544100 	.word	0x2b544100
    30fc:	44474d43 	.word	0x44474d43
    3100:	44223d41 	.word	0x44223d41
    3104:	41204c45 	.word	0x41204c45
    3108:	00224c4c 	.word	0x00224c4c
    310c:	61647055 	.word	0x61647055
    3110:	73206574 	.word	0x73206574
    3114:	65636375 	.word	0x65636375
    3118:	75667373 	.word	0x75667373
    311c:	76202c6c 	.word	0x76202c6c
    3120:	69737265 	.word	0x69737265
    3124:	31206e6f 	.word	0x31206e6f
    3128:	6220302e 	.word	0x6220302e
    312c:	746c6975 	.word	0x746c6975
    3130:	79614d20 	.word	0x79614d20
    3134:	20362020 	.word	0x20362020
    3138:	30323032 	.word	0x30323032
    313c:	3a353120 	.word	0x3a353120
    3140:	323a3234 	.word	0x323a3234
    3144:	0039      	.short	0x0039
    3146:	5441      	.short	0x5441
    3148:	474d432b 	.word	0x474d432b
    314c:	64253d52 	.word	0x64253d52
    3150:	4d432b00 	.word	0x4d432b00
    3154:	0d005247 	.word	0x0d005247
    3158:	4f0a0d0a 	.word	0x4f0a0d0a
    315c:	222c004b 	.word	0x222c004b
    3160:	00          	.byte	0x00
    3161:	52          	.byte	0x52
    3162:	4e49      	.short	0x4e49
    3164:	54410047 	.word	0x54410047
    3168:	432b0048 	.word	0x432b0048
    316c:	0049544d 	.word	0x0049544d
    3170:	532b5441 	.word	0x532b5441
    3174:	52425041 	.word	0x52425041
    3178:	312c333d 	.word	0x312c333d
    317c:	5041222c 	.word	0x5041222c
    3180:	222c224e 	.word	0x222c224e
    3184:	65746e69 	.word	0x65746e69
    3188:	74656e72 	.word	0x74656e72
    318c:	54410022 	.word	0x54410022
    3190:	5054462b 	.word	0x5054462b
    3194:	56524553 	.word	0x56524553
    3198:	0073253d 	.word	0x0073253d
    319c:	462b5441 	.word	0x462b5441
    31a0:	4e555054 	.word	0x4e555054
    31a4:	0073253d 	.word	0x0073253d
    31a8:	462b5441 	.word	0x462b5441
    31ac:	57505054 	.word	0x57505054
    31b0:	0073253d 	.word	0x0073253d
    31b4:	462b5441 	.word	0x462b5441
    31b8:	45475054 	.word	0x45475054
    31bc:	54415054 	.word	0x54415054
    31c0:	002f3d48 	.word	0x002f3d48
    31c4:	462b5441 	.word	0x462b5441
    31c8:	45475054 	.word	0x45475054
    31cc:	4d414e54 	.word	0x4d414e54
    31d0:	70753d45 	.word	0x70753d45
    31d4:	65746164 	.word	0x65746164
    31d8:	6e69622e 	.word	0x6e69622e
    31dc:	2b544100 	.word	0x2b544100
    31e0:	42504153 	.word	0x42504153
    31e4:	2c313d52 	.word	0x2c313d52
    31e8:	532b0031 	.word	0x532b0031
    31ec:	52425041 	.word	0x52425041
    31f0:	2c31203a 	.word	0x2c31203a
    31f4:	54410031 	.word	0x54410031
    31f8:	5041532b 	.word	0x5041532b
    31fc:	323d5242 	.word	0x323d5242
    3200:	4100312c 	.word	0x4100312c
    3204:	41532b54 	.word	0x41532b54
    3208:	3d524250 	.word	0x3d524250
    320c:	00312c30 	.word	0x00312c30
    3210:	462b5441 	.word	0x462b5441
    3214:	45475054 	.word	0x45475054
    3218:	464f5454 	.word	0x464f5454
    321c:	2c303d53 	.word	0x2c303d53
    3220:	61647075 	.word	0x61647075
    3224:	622e6574 	.word	0x622e6574
    3228:	2b006e69 	.word	0x2b006e69
    322c:	47505446 	.word	0x47505446
    3230:	4f545445 	.word	0x4f545445
    3234:	203a5346 	.word	0x203a5346
    3238:	2c30      	.short	0x2c30
    323a:	00          	.byte	0x00
    323b:	55          	.byte	0x55
    323c:	74616470 	.word	0x74616470
    3240:	61662065 	.word	0x61662065
    3244:	64656c69 	.word	0x64656c69
    3248:	61735500 	.word	0x61735500
    324c:	203a6567 	.word	0x203a6567
    3250:	61647075 	.word	0x61647075
    3254:	3c206574 	.word	0x3c206574
    3258:	76726573 	.word	0x76726573
    325c:	203e7265 	.word	0x203e7265
    3260:	6573753c 	.word	0x6573753c
    3264:	6d616e72 	.word	0x6d616e72
    3268:	3c203e65 	.word	0x3c203e65
    326c:	73736170 	.word	0x73736170
    3270:	64726f77 	.word	0x64726f77
    3274:	003e      	.short	0x003e

00003276 <_ZL10child_pipe>:
    3276:	0b0a 0d0c 0f0e                              ......

0000327c <_ZL17child_pipe_enable>:
    327c:	0100 0302 0504                              ......

00003282 <_ZL18child_payload_size>:
    3282:	1211 1413 1615 6e69 6f66 4e00 646f 3a65     ......info.Node:
    3292:	200a 4449 203a 6425 200a 614e 656d 203a     . ID: %d. Name: 
    32a2:	7325 200a 7954 6570 203a 6425 200a 614c     %s. Type: %d. La
    32b2:	7473 7320 6565 3a6e 2520 2064 6573 2063     st seen: %d sec 
    32c2:	6761 0a6f 2000 6f53 6c69 6d20 696f 7473     ago.. Soil moist
    32d2:	7275 2065 6573 736e 726f 0a3a 2020 6f4d     ure sensor:.  Mo
    32e2:	7369 7574 6572 203a 6425 000a 5420 6d65     isture: %d.. Tem
    32f2:	6570 6172 7574 6572 2b20 6820 6d75 6469     perature + humid
    3302:	7469 2079 6573 736e 726f 0a3a 2020 6554     ity sensor:.  Te
    3312:	706d 7265 7461 7275 3a65 2520 0a64 2020     mperature: %d.  
    3322:	7548 696d 6964 7974 203a 6425 000a 5420     Humidity: %d.. T
    3332:	6d65 6570 6172 7574 6572 7320 6e65 6f73     emperature senso
    3342:	3a72 200a 5420 6d65 6570 6172 7574 6572     r:.  Temperature
    3352:	203a 6425 000a 6573 6e74 6d61 0065 6c63     : %d..setname.cl
    3362:	6165 0072 6f43 6d6d 6e61 2064 7571 7565     ear.Command queu
    3372:	6465 5500 6173 6567 203a 6573 6e74 6d61     ed.Usage: setnam
    3382:	2065 693c 3e64 3c20 656e 2077 616e 656d     e <id> <new name
    3392:	003e                                        >.

00003394 <_ctype_>:
    3394:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    33a4:	2020 2020 2020 2020 2020 2020 2020 2020                     
    33b4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    33c4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    33d4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    33e4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    33f4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    3404:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    3414:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
    3494:	ff00 ffff                                   ....

00003498 <__sf_fake_stderr>:
	...

000034b8 <__sf_fake_stdin>:
	...

000034d8 <__sf_fake_stdout>:
	...
    34f8:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    3508:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    3518:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    3528:	6665 ff00                                   ef..

0000352c <_init>:
    352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    352e:	46c0      	nop			; (mov r8, r8)
    3530:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3532:	bc08      	pop	{r3}
    3534:	469e      	mov	lr, r3
    3536:	4770      	bx	lr

00003538 <__init_array_start>:
    3538:	000000b5 	.word	0x000000b5
    353c:	00001601 	.word	0x00001601
    3540:	000017e5 	.word	0x000017e5
    3544:	00001cd1 	.word	0x00001cd1

00003548 <_fini>:
    3548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    354a:	46c0      	nop			; (mov r8, r8)
    354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    354e:	bc08      	pop	{r3}
    3550:	469e      	mov	lr, r3
    3552:	4770      	bx	lr
    3554:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00003558 <___ZN3GSM11WriteUpdateEv_veneer>:
    3558:	b401      	push	{r0}
    355a:	4802      	ldr	r0, [pc, #8]	; (3564 <___ZN3GSM11WriteUpdateEv_veneer+0xc>)
    355c:	4684      	mov	ip, r0
    355e:	bc01      	pop	{r0}
    3560:	4760      	bx	ip
    3562:	bf00      	nop
    3564:	20000099 	.word	0x20000099

00003568 <__delay_usec_veneer>:
    3568:	b401      	push	{r0}
    356a:	4802      	ldr	r0, [pc, #8]	; (3574 <__delay_usec_veneer+0xc>)
    356c:	4684      	mov	ip, r0
    356e:	bc01      	pop	{r0}
    3570:	4760      	bx	ip
    3572:	bf00      	nop
    3574:	200001a1 	.word	0x200001a1

00003578 <__fini_array_start>:
    3578:	0000008d 	.word	0x0000008d

Disassembly of section .data:

20000000 <_ZN3GSM13RAMFunc_writeEc>:
    NVIC_SystemReset();
    while(1);
}

void GSM::RAMFunc_write(const char c) {
    m_uart->m_sercom->USART.DATA.reg = c;
20000000:	2382      	movs	r3, #130	; 0x82
20000002:	6882      	ldr	r2, [r0, #8]
20000004:	009b      	lsls	r3, r3, #2
20000006:	58d2      	ldr	r2, [r2, r3]
20000008:	8511      	strh	r1, [r2, #40]	; 0x28
	while(!m_uart->m_sercom->USART.INTFLAG.bit.DRE);
2000000a:	6882      	ldr	r2, [r0, #8]
2000000c:	58d2      	ldr	r2, [r2, r3]
2000000e:	7e13      	ldrb	r3, [r2, #24]
20000010:	07db      	lsls	r3, r3, #31
20000012:	d5fc      	bpl.n	2000000e <_ZN3GSM13RAMFunc_writeEc+0xe>
}
20000014:	4770      	bx	lr

20000016 <_ZN3GSM13RAMFunc_printEPKc>:

void GSM::RAMFunc_print(const char* c) {
20000016:	b570      	push	{r4, r5, r6, lr}
20000018:	0005      	movs	r5, r0
2000001a:	000c      	movs	r4, r1
    while(*c) RAMFunc_write(*c++);
2000001c:	7821      	ldrb	r1, [r4, #0]
2000001e:	2900      	cmp	r1, #0
20000020:	d004      	beq.n	2000002c <_ZN3GSM13RAMFunc_printEPKc+0x16>
20000022:	0028      	movs	r0, r5
20000024:	3401      	adds	r4, #1
20000026:	f7ff ffeb 	bl	20000000 <_ZN3GSM13RAMFunc_writeEc>
2000002a:	e7f7      	b.n	2000001c <_ZN3GSM13RAMFunc_printEPKc+0x6>
}
2000002c:	bd70      	pop	{r4, r5, r6, pc}

2000002e <_ZN3GSM17RAMFunc_print_intEt>:

static uint16_t subtractors[] = {10000, 1000, 100, 10, 1};
void GSM::RAMFunc_print_int(uint16_t u) {
2000002e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20000030:	0007      	movs	r7, r0
20000032:	000c      	movs	r4, r1
	char n;
	uint16_t *sub = subtractors;
	uint8_t  i = 5;
20000034:	2305      	movs	r3, #5
	uint16_t *sub = subtractors;
20000036:	4e0f      	ldr	r6, [pc, #60]	; (20000074 <_ZN3GSM17RAMFunc_print_intEt+0x46>)
	while (i > 1 && u < *sub) {
20000038:	8832      	ldrh	r2, [r6, #0]
2000003a:	001d      	movs	r5, r3
2000003c:	3b01      	subs	r3, #1
2000003e:	b2db      	uxtb	r3, r3
20000040:	42a2      	cmp	r2, r4
20000042:	d80c      	bhi.n	2000005e <_ZN3GSM17RAMFunc_print_intEt+0x30>
		i--;
		sub++;
	}
	while (i--) {
20000044:	3d01      	subs	r5, #1
20000046:	b2ed      	uxtb	r5, r5
20000048:	2dff      	cmp	r5, #255	; 0xff
2000004a:	d012      	beq.n	20000072 <_ZN3GSM17RAMFunc_print_intEt+0x44>
		n = '0';
2000004c:	2130      	movs	r1, #48	; 0x30
		while (u >= *sub) {
2000004e:	8833      	ldrh	r3, [r6, #0]
20000050:	42a3      	cmp	r3, r4
20000052:	d809      	bhi.n	20000068 <_ZN3GSM17RAMFunc_print_intEt+0x3a>
			u -= *sub;
20000054:	1ae4      	subs	r4, r4, r3
			n++;
20000056:	3101      	adds	r1, #1
			u -= *sub;
20000058:	b2a4      	uxth	r4, r4
			n++;
2000005a:	b2c9      	uxtb	r1, r1
		while (u >= *sub) {
2000005c:	e7f8      	b.n	20000050 <_ZN3GSM17RAMFunc_print_intEt+0x22>
		sub++;
2000005e:	3602      	adds	r6, #2
	while (i > 1 && u < *sub) {
20000060:	2b01      	cmp	r3, #1
20000062:	d1e9      	bne.n	20000038 <_ZN3GSM17RAMFunc_print_intEt+0xa>
20000064:	001d      	movs	r5, r3
20000066:	e7ed      	b.n	20000044 <_ZN3GSM17RAMFunc_print_intEt+0x16>
		}
		RAMFunc_write(n);
20000068:	0038      	movs	r0, r7
2000006a:	f7ff ffc9 	bl	20000000 <_ZN3GSM13RAMFunc_writeEc>
		sub++;
2000006e:	3602      	adds	r6, #2
	while (i--) {
20000070:	e7e8      	b.n	20000044 <_ZN3GSM17RAMFunc_print_intEt+0x16>
	}
}
20000072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000074:	200001b0 	.word	0x200001b0

20000078 <_ZN3GSM15RAMFunc_wait_rxEv>:

bool GSM::RAMFunc_wait_rx() {
    int timeout = 0;
    while(!m_uart->m_sercom->USART.INTFLAG.bit.RXC) {
20000078:	2382      	movs	r3, #130	; 0x82
2000007a:	6882      	ldr	r2, [r0, #8]
2000007c:	009b      	lsls	r3, r3, #2
2000007e:	58d1      	ldr	r1, [r2, r3]
20000080:	4a04      	ldr	r2, [pc, #16]	; (20000094 <_ZN3GSM15RAMFunc_wait_rxEv+0x1c>)
20000082:	7e0b      	ldrb	r3, [r1, #24]
20000084:	075b      	lsls	r3, r3, #29
20000086:	0fd8      	lsrs	r0, r3, #31
20000088:	2b00      	cmp	r3, #0
2000008a:	db02      	blt.n	20000092 <_ZN3GSM15RAMFunc_wait_rxEv+0x1a>
        if(timeout++ >= 1000000) return false;
2000008c:	3a01      	subs	r2, #1
2000008e:	2a00      	cmp	r2, #0
20000090:	d1f7      	bne.n	20000082 <_ZN3GSM15RAMFunc_wait_rxEv+0xa>
    }
    return true;
20000092:	4770      	bx	lr
20000094:	000f4241 	.word	0x000f4241

20000098 <_ZN3GSM11WriteUpdateEv>:
__always_inline void flash_write_dword(uint32_t data, uint32_t addr) {
    *(uint32_t*)(addr) = data;
}

__always_inline void flash_setup_write() {
    NVMCTRL->CTRLB.bit.MANW = 0;
20000098:	2180      	movs	r1, #128	; 0x80
void GSM::WriteUpdate() {
2000009a:	b5f0      	push	{r4, r5, r6, r7, lr}
2000009c:	4b3b      	ldr	r3, [pc, #236]	; (2000018c <_ZN3GSM11WriteUpdateEv+0xf4>)
                (void)m_uart->m_sercom->USART.DATA.reg; // Clear RXC flag
2000009e:	2782      	movs	r7, #130	; 0x82
200000a0:	685a      	ldr	r2, [r3, #4]
void GSM::WriteUpdate() {
200000a2:	0004      	movs	r4, r0
200000a4:	438a      	bics	r2, r1
200000a6:	605a      	str	r2, [r3, #4]
200000a8:	2200      	movs	r2, #0
200000aa:	b087      	sub	sp, #28
200000ac:	9201      	str	r2, [sp, #4]
200000ae:	3201      	adds	r2, #1
200000b0:	32ff      	adds	r2, #255	; 0xff
200000b2:	9203      	str	r2, [sp, #12]
200000b4:	9304      	str	r3, [sp, #16]
                (void)m_uart->m_sercom->USART.DATA.reg; // Clear RXC flag
200000b6:	00bf      	lsls	r7, r7, #2
        flash_erase_page((row * FLASH_PAGE_SIZE * 4) >> 1); // shift right for some reason
200000b8:	9b01      	ldr	r3, [sp, #4]
    NVMCTRL->ADDR.reg = addr;
200000ba:	9a04      	ldr	r2, [sp, #16]
200000bc:	019d      	lsls	r5, r3, #6
200000be:	086b      	lsrs	r3, r5, #1
200000c0:	61d3      	str	r3, [r2, #28]
    NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
200000c2:	4b33      	ldr	r3, [pc, #204]	; (20000190 <_ZN3GSM11WriteUpdateEv+0xf8>)
200000c4:	9a04      	ldr	r2, [sp, #16]
200000c6:	8013      	strh	r3, [r2, #0]
            for(unsigned int i = 0; i < FLASH_PAGE_SIZE; i++) {
200000c8:	2600      	movs	r6, #0
            RAMFunc_print(fsread);
200000ca:	0020      	movs	r0, r4
200000cc:	4931      	ldr	r1, [pc, #196]	; (20000194 <_ZN3GSM11WriteUpdateEv+0xfc>)
200000ce:	f7ff ffa2 	bl	20000016 <_ZN3GSM13RAMFunc_printEPKc>
            RAMFunc_print_int(row * FLASH_PAGE_SIZE * 4 + page * FLASH_PAGE_SIZE);
200000d2:	0020      	movs	r0, r4
200000d4:	b2a9      	uxth	r1, r5
200000d6:	f7ff ffaa 	bl	2000002e <_ZN3GSM17RAMFunc_print_intEt>
            RAMFunc_write('\r');
200000da:	210d      	movs	r1, #13
200000dc:	0020      	movs	r0, r4
200000de:	f7ff ff8f 	bl	20000000 <_ZN3GSM13RAMFunc_writeEc>
                RAMFunc_wait_rx();
200000e2:	0020      	movs	r0, r4
200000e4:	f7ff ffc8 	bl	20000078 <_ZN3GSM15RAMFunc_wait_rxEv>
                (void)m_uart->m_sercom->USART.DATA.reg; // Clear RXC flag
200000e8:	68a3      	ldr	r3, [r4, #8]
                RAMFunc_wait_rx();
200000ea:	0020      	movs	r0, r4
                (void)m_uart->m_sercom->USART.DATA.reg; // Clear RXC flag
200000ec:	59db      	ldr	r3, [r3, r7]
200000ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
                RAMFunc_wait_rx();
200000f0:	f7ff ffc2 	bl	20000078 <_ZN3GSM15RAMFunc_wait_rxEv>
                (void)m_uart->m_sercom->USART.DATA.reg; // Clear RXC flag
200000f4:	0030      	movs	r0, r6
200000f6:	68a3      	ldr	r3, [r4, #8]
200000f8:	59db      	ldr	r3, [r3, r7]
200000fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
            for(unsigned int i = 0; i < FLASH_PAGE_SIZE; i++) {
200000fc:	1eeb      	subs	r3, r5, #3
200000fe:	9305      	str	r3, [sp, #20]
                if(!done) done = !RAMFunc_wait_rx();
20000100:	2800      	cmp	r0, #0
20000102:	d105      	bne.n	20000110 <_ZN3GSM11WriteUpdateEv+0x78>
20000104:	0020      	movs	r0, r4
20000106:	f7ff ffb7 	bl	20000078 <_ZN3GSM15RAMFunc_wait_rxEv>
2000010a:	2301      	movs	r3, #1
2000010c:	4058      	eors	r0, r3
2000010e:	b2c0      	uxtb	r0, r0
                acc &= ~(0xFF << ((i & 3) * 8));
20000110:	2203      	movs	r2, #3
20000112:	23ff      	movs	r3, #255	; 0xff
20000114:	4032      	ands	r2, r6
20000116:	00d1      	lsls	r1, r2, #3
20000118:	408b      	lsls	r3, r1
2000011a:	4694      	mov	ip, r2
2000011c:	9a02      	ldr	r2, [sp, #8]
2000011e:	439a      	bics	r2, r3
20000120:	9202      	str	r2, [sp, #8]
                if(!done) acc |= uint8_t(m_uart->m_sercom->USART.DATA.reg) << ((i & 3) * 8);
20000122:	2800      	cmp	r0, #0
20000124:	d106      	bne.n	20000134 <_ZN3GSM11WriteUpdateEv+0x9c>
20000126:	68a3      	ldr	r3, [r4, #8]
20000128:	59db      	ldr	r3, [r3, r7]
2000012a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000012c:	b2db      	uxtb	r3, r3
2000012e:	408b      	lsls	r3, r1
20000130:	431a      	orrs	r2, r3
20000132:	9202      	str	r2, [sp, #8]
                if((i & 3) == 3) *(uint32_t*)(row * FLASH_PAGE_SIZE * 4 + page * FLASH_PAGE_SIZE + i - 3) = acc;
20000134:	4663      	mov	r3, ip
20000136:	2b03      	cmp	r3, #3
20000138:	d102      	bne.n	20000140 <_ZN3GSM11WriteUpdateEv+0xa8>
2000013a:	9b05      	ldr	r3, [sp, #20]
2000013c:	9a02      	ldr	r2, [sp, #8]
2000013e:	519a      	str	r2, [r3, r6]
            for(unsigned int i = 0; i < FLASH_PAGE_SIZE; i++) {
20000140:	3601      	adds	r6, #1
20000142:	2e40      	cmp	r6, #64	; 0x40
20000144:	d1dc      	bne.n	20000100 <_ZN3GSM11WriteUpdateEv+0x68>
            if(done) break;
20000146:	2800      	cmp	r0, #0
20000148:	d118      	bne.n	2000017c <_ZN3GSM11WriteUpdateEv+0xe4>
            while(RAMFunc_wait_rx()) (void)m_uart->m_sercom->USART.DATA.reg;
2000014a:	0020      	movs	r0, r4
2000014c:	f7ff ff94 	bl	20000078 <_ZN3GSM15RAMFunc_wait_rxEv>
20000150:	2800      	cmp	r0, #0
20000152:	d003      	beq.n	2000015c <_ZN3GSM11WriteUpdateEv+0xc4>
20000154:	68a3      	ldr	r3, [r4, #8]
20000156:	59db      	ldr	r3, [r3, r7]
20000158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000015a:	e7f6      	b.n	2000014a <_ZN3GSM11WriteUpdateEv+0xb2>
        for(unsigned int page = 0; page < 4; page++) {
2000015c:	9b03      	ldr	r3, [sp, #12]
2000015e:	3540      	adds	r5, #64	; 0x40
20000160:	42ab      	cmp	r3, r5
20000162:	d1b1      	bne.n	200000c8 <_ZN3GSM11WriteUpdateEv+0x30>
    for(unsigned int row = 0; row < FLASH_SIZE / (FLASH_PAGE_SIZE * 4); row++) {
20000164:	9b03      	ldr	r3, [sp, #12]
20000166:	3301      	adds	r3, #1
20000168:	33ff      	adds	r3, #255	; 0xff
2000016a:	9303      	str	r3, [sp, #12]
2000016c:	9b01      	ldr	r3, [sp, #4]
2000016e:	3304      	adds	r3, #4
20000170:	9301      	str	r3, [sp, #4]
20000172:	2380      	movs	r3, #128	; 0x80
20000174:	9a01      	ldr	r2, [sp, #4]
20000176:	005b      	lsls	r3, r3, #1
20000178:	429a      	cmp	r2, r3
2000017a:	d19d      	bne.n	200000b8 <_ZN3GSM11WriteUpdateEv+0x20>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
2000017c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
20000180:	4b05      	ldr	r3, [pc, #20]	; (20000198 <_ZN3GSM11WriteUpdateEv+0x100>)
20000182:	4a06      	ldr	r2, [pc, #24]	; (2000019c <_ZN3GSM11WriteUpdateEv+0x104>)
20000184:	60da      	str	r2, [r3, #12]
20000186:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
2000018a:	e7fe      	b.n	2000018a <_ZN3GSM11WriteUpdateEv+0xf2>
2000018c:	41004000 	.word	0x41004000
20000190:	ffffa502 	.word	0xffffa502
20000194:	200001ba 	.word	0x200001ba
20000198:	e000ed00 	.word	0xe000ed00
2000019c:	05fa0004 	.word	0x05fa0004

200001a0 <delay_usec>:
	__asm (
200001a0:	210f      	movs	r1, #15

200001a2 <mydelay1>:
200001a2:	3901      	subs	r1, #1
200001a4:	d1fd      	bne.n	200001a2 <mydelay1>
200001a6:	3801      	subs	r0, #1
200001a8:	d1fa      	bne.n	200001a0 <delay_usec>
}
200001aa:	4770      	bx	lr

200001ac <__dso_handle>:
200001ac:	0000 0000                                   ....

200001b0 <_ZL11subtractors>:
200001b0:	2710 03e8 0064 000a 0001                    .'..d.....

200001ba <_ZL6fsread>:
200001ba:	5441 462b 5253 4145 3d44 3a43 555c 6573     AT+FSREAD=C:\Use
200001ca:	5c72 5446 5c50 7075 6164 6574 622e 6e69     r\FTP\update.bin
200001da:	312c 362c 2c34 ff00 ffff                    ,1,64,....

200001e4 <_ZN3Str11EmptyBufferE>:
200001e4:	2fa0 0000                                   ./..

200001e8 <_impure_ptr>:
200001e8:	01ec 2000                                   ... 

200001ec <impure_data>:
200001ec:	0000 0000 34b8 0000 34d8 0000 3498 0000     .....4...4...4..
	...
