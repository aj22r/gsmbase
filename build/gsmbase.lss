
build/gsmbase.elf:     file format elf32-littlearm
build/gsmbase.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000db9

Program Header:
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00001cfc memsz 0x00001cfc flags r-x
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x00001cfc align 2**16
         filesz 0x00000074 memsz 0x00000074 flags rwx
    LOAD off    0x00020078 vaddr 0x20000078 paddr 0x00001d70 align 2**16
         filesz 0x00000000 memsz 0x0000046c flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cfc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  20000000  00001cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000046c  20000078  00001d70  00020078  2**3
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  4 .comment      00000079  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  5 .debug_info   00022d30  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000026ba  00000000  00000000  00042e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000017eb  00000000  00000000  000454ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000220  00000000  00000000  00046cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000340  00000000  00000000  00046f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002da6  00000000  00000000  0004724a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000c4e3  00000000  00000000  00049ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b08  00000000  00000000  000564d4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000078 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_samd10.c
00000000 l    df *ABS*	00000000 crtstuff.c
0000008c l     F .text	00000000 __do_global_dtors_aux
20000078 l       .bss	00000001 completed.8911
00001cf8 l     O .text	00000000 __do_global_dtors_aux_fini_array_entry
000000b4 l     F .text	00000000 frame_dummy
2000007c l       .bss	00000018 object.8916
00001cd0 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 GSM.cpp
000000d4 l     F .text	0000001c _ZL8find_numPKc
000005ac l     F .text	0000004c _ZL9func_execP3GSMPKcS2_
00000000 l    df *ABS*	00000000 main.cpp
000005f8 l     F .text	00000040 _Z41__static_initialization_and_destruction_0ii
000006a0 l     F .text	00000010 _GLOBAL__sub_I_main
20000094 l     O .bss	00000014 _ZL3gsm
00000000 l    df *ABS*	00000000 systick.c
000006b0 l     F .text	00000144 initializeSystemFor48MHz
20000000 l       .data	00000000 mydelay
20000002 l       .data	00000000 mydelay1
200000a8 l     O .bss	00000008 _cycles
00000000 l    df *ABS*	00000000 uart.cpp
00000888 l     F .text	00000058 _Z41__static_initialization_and_destruction_0ii
00000da4 l     F .text	00000010 _GLOBAL__sub_I_g_uart0
00000000 l    df *ABS*	00000000 syscalls.c
200004c8 l     O .bss	00000004 heap.4639
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strtol.c
000011c4 l     F .text	00000104 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 _thumb1_case_shi.o
00000000 l    df *ABS*	00000000 _udivsi3.o
0000198c l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000014 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00001ce8 l     F .text	00000010 __delay_usec_veneer
00001966 g     F .text	00000010 _malloc_usable_size_r
0000029c g     F .text	0000007c _ZN3GSM7PowerOnEv
00000db4  w    F .text	00000002 DMAC_Handler
200004d8 g     O .bss	00000001 __lock___atexit_recursive_mutex
00000db4  w    F .text	00000002 HardFault_Handler
00000db4  w    F .text	00000002 TC2_Handler
000012f0 g     F .text	00000010 __malloc_unlock
00000db4  w    F .text	00000002 AC_Handler
0000086c g     F .text	0000001c SysTick_Handler
200004d9 g     O .bss	00000001 __lock___arc4random_mutex
00001940 g     F .text	00000026 memmove
00000db4  w    F .text	00000002 PendSV_Handler
00001100 g     F .text	00000068 snprintf
00000db4  w    F .text	00000002 NMI_Handler
00000000 g       .text	00000000 _sfixed
00000d94 g     F .text	00000010 SERCOM1_Handler
00000db4  w    F .text	00000002 ADC_Handler
200004d4 g     O .bss	00000004 errno
00001cfc g       .data	00000000 _etext
20001000 g       .text	00000000 __top_ram
0000192e g     F .text	00000012 memcpy
00000194 g     F .text	00000012 _ZN3GSMD1Ev
00001410 g     F .text	00000200 _svfprintf_r
00000db4  w    F .text	00000002 SERCOM2_Handler
00001cfc g       .text	00000000 __fini_array_end
00000db4  w    F .text	00000002 TCC0_Handler
00000f50 g     F .text	00000014 malloc
0000198c g     F .text	0000010a .hidden __udivsi3
00000bd0 g     F .text	0000008c _ZN6uart_t4peekEi
00000db4  w    F .text	00000002 RTC_Handler
000003f4 g     F .text	000000b8 _ZN3GSM7ReadSMSEi
2000000c g     O .data	00000000 .hidden __dso_handle
00000b64 g     F .text	0000002c _ZN6uart_t7rxemptyEv
000010dc g     F .text	00000024 _sbrk_r
200000b0 g     O .bss	0000020c g_uart0
00000db4  w    F .text	00000002 EIC_Handler
00000db4  w    F .text	00000002 WDT_Handler
200004da g     O .bss	00000001 __lock___env_recursive_mutex
200004db g     O .bss	00000001 __lock___sinit_recursive_mutex
00000e90 g     F .text	00000050 .hidden __aeabi_lmul
00001300 g     F .text	0000004c _realloc_r
00000f08 g     F .text	00000048 __libc_init_array
00000e5c g     F .text	00000024 _sbrk
00000db4  w    F .text	00000002 TC1_Handler
00001cc4 g     F .text	00000000 _init
000012c8 g     F .text	00000018 strtol
00004000 g       .text	00000000 __top_flash
200004e4 g       .bss	00000000 _ebss
00000db8 g     F .text	000000a4 Reset_Handler
200004dc g     O .bss	00000001 __lock___malloc_recursive_mutex
20001000 g       *ABS*	00000000 _stack_top
00000db4 g     F .text	00000002 Dummy_Handler
00001100 g     F .text	00000068 sniprintf
00001916 g     F .text	00000002 __retarget_lock_release_recursive
0000134c g     F .text	000000c4 __ssputs_r
000004ac g     F .text	000000a8 _ZN3GSM4PollEv
00001918 g     F .text	00000016 memchr
00000f78 g     F .text	00000094 _free_r
00001978 g     F .text	00000014 .hidden __gnu_thumb1_case_shi
20000078 g       .bss	00000000 _bss
00000b34 g     F .text	00000030 _ZN6uart_t5printEPKci
00001198 g     F .text	0000002c strstr
200002bc g     O .bss	0000020c g_uart1
00000db4  w    F .text	00000002 PM_Handler
00000830 g     F .text	00000024 systick_cycles
000007f4 g     F .text	0000003c systick_init
00000318 g     F .text	00000084 _ZN3GSM4InitEv
00000194 g     F .text	00000012 _ZN3GSMD2Ev
000010c8 g     F .text	00000014 realloc
00000b90 g     F .text	00000040 _ZN6uart_t4getcEv
00000eec g     F .text	0000001c __cxa_atexit
00001aa0  w    F .text	00000002 .hidden __aeabi_ldiv0
000012e0 g     F .text	00000010 __malloc_lock
00001cf8 g       .text	00000000 __fini_array_start
00001914 g     F .text	00000002 __retarget_lock_acquire_recursive
00000638 g     F .text	00000068 main
0000198c g     F .text	00000000 .hidden __aeabi_uidiv
00000554 g     F .text	00000058 _ZN3GSM7SendSMSEPKcS1_
00000db4  w    F .text	00000002 SVC_Handler
20000000 g     F .data	0000000c delay_usec
00000db4  w    F .text	00000002 EVSYS_Handler
00001cdc g       .text	00000000 __init_array_end
0000100c g     F .text	000000bc _malloc_r
0000039c g     F .text	00000058 _ZN3GSM10ProcessSMSEPKcS1_
00001184 g     F .text	00000014 strcmp
00000db4  w    F .text	00000002 NVMCTRL_Handler
00001cdc g     F .text	00000000 _fini
00000cf4 g     F .text	00000090 _ZN6uart_t4readEv
000008e0 g     F .text	000001e8 _ZN6uart_t4initERK13uart_pincfg_tt
00000c5c g     F .text	00000098 _ZN6uart_t4findEPKc
00000d84 g     F .text	00000010 SERCOM0_Handler
00001610 g     F .text	000000de _printf_common
20000010 g     O .data	00000004 _impure_ptr
00001cd0 g       .text	00000000 __preinit_array_end
00001410 g     F .text	00000200 _svfiprintf_r
20000000 g       .data	00000000 _data
00000000 g     O .text	0000008c exception_table
00000db4  w    F .text	00000002 DAC_Handler
00001a98 g     F .text	00000008 .hidden __aeabi_uidivmod
20000074 g       .data	00000000 _edata
200004e4 g       .bss	00000000 _end
200004dd g     O .bss	00000001 __lock___at_quick_exit_mutex
00000db4  w    F .text	00000002 PTC_Handler
00000258 g     F .text	00000044 _ZN3GSM13RepeatCommandEPKcS1_ii
00000b18 g     F .text	0000001c _ZN6uart_t5writeEc
00000ee0 g     F .text	0000000c atoi
00001b8f g     O .text	00000101 _ctype_
00001aa0  w    F .text	00000002 .hidden __aeabi_idiv0
00001cd0 g       .text	00000000 __init_array_start
00000e90 g     F .text	00000050 .hidden __muldi3
200004de g     O .bss	00000001 __lock___dd_hash_mutex
200004df g     O .bss	00000001 __lock___tz_mutex
000000f0 g     F .text	000000a4 _ZN3GSMC2E6gpio_tP6uart_t
000016f0 g     F .text	00000224 _printf_i
200004d0 g     O .bss	00000004 __malloc_sbrk_start
000000f0 g     F .text	000000a4 _ZN3GSMC1E6gpio_tP6uart_t
00001168 g     F .text	0000001c strchr
200004cc g     O .bss	00000004 __malloc_free_list
00001cd0 g       .text	00000000 __preinit_array_start
00000e80 g     F .text	0000000e __aeabi_atexit
00000854 g     F .text	00000018 millis
000001a8 g     F .text	000000b0 _ZN3GSM7CommandEPKcS1_i
00000ac8 g     F .text	00000050 _ZN6uart_t14sercom_handlerEv
200004e0 g     O .bss	00000001 __lock___sfp_recursive_mutex
00000f64 g     F .text	00000014 free
00000db4  w    F .text	00000002 SYSCTRL_Handler



Disassembly of section .text:

00000000 <exception_table>:
       0:	00 10 00 20 b9 0d 00 00 b5 0d 00 00 b5 0d 00 00     ... ............
	...
      2c:	b5 0d 00 00 00 00 00 00 00 00 00 00 b5 0d 00 00     ................
      3c:	6d 08 00 00 b5 0d 00 00 b5 0d 00 00 b5 0d 00 00     m...............
      4c:	b5 0d 00 00 b5 0d 00 00 b5 0d 00 00 b5 0d 00 00     ................
      5c:	00 00 00 00 b5 0d 00 00 85 0d 00 00 95 0d 00 00     ................
      6c:	b5 0d 00 00 b5 0d 00 00 b5 0d 00 00 b5 0d 00 00     ................
      7c:	b5 0d 00 00 b5 0d 00 00 b5 0d 00 00 b5 0d 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000078 	.word	0x20000078
      ac:	00000000 	.word	0x00000000
      b0:	00001cfc 	.word	0x00001cfc

000000b4 <frame_dummy>:
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <frame_dummy+0x14>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4903      	ldr	r1, [pc, #12]	; (cc <frame_dummy+0x18>)
      be:	4804      	ldr	r0, [pc, #16]	; (d0 <frame_dummy+0x1c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	bd10      	pop	{r4, pc}
      c6:	46c0      	nop			; (mov r8, r8)
      c8:	00000000 	.word	0x00000000
      cc:	2000007c 	.word	0x2000007c
      d0:	00001cfc 	.word	0x00001cfc

000000d4 <_ZL8find_numPKc>:
#include <string.h>
extern "C" {
#include <systick.h>
}

static int find_num(const char* str) {
      d4:	b510      	push	{r4, lr}
    while(*str) {
      d6:	7803      	ldrb	r3, [r0, #0]
      d8:	2b00      	cmp	r3, #0
      da:	d007      	beq.n	ec <_ZL8find_numPKc+0x18>
        if(isdigit(*str))
      dc:	3b30      	subs	r3, #48	; 0x30
      de:	2b09      	cmp	r3, #9
      e0:	d901      	bls.n	e6 <_ZL8find_numPKc+0x12>
            return atoi(str);
        str++;
      e2:	3001      	adds	r0, #1
    while(*str) {
      e4:	e7f7      	b.n	d6 <_ZL8find_numPKc+0x2>
            return atoi(str);
      e6:	f000 fefb 	bl	ee0 <atoi>
      ea:	e000      	b.n	ee <_ZL8find_numPKc+0x1a>
    }
    return 0;
      ec:	2000      	movs	r0, #0
}
      ee:	bd10      	pop	{r4, pc}

000000f0 <_ZN3GSMC1E6gpio_tP6uart_t>:
            gsm->SendSMS(sender, resp);
        }
    }
}

GSM::GSM(const gpio_t pwrkey, uart_t* uart) :
      f0:	b5f0      	push	{r4, r5, r6, r7, lr}
      f2:	b089      	sub	sp, #36	; 0x24
      f4:	0004      	movs	r4, r0
      f6:	466e      	mov	r6, sp
      f8:	9100      	str	r1, [sp, #0]
      fa:	6072      	str	r2, [r6, #4]
    m_pwrkey(pwrkey), m_uart(uart)
      fc:	0032      	movs	r2, r6
      fe:	ca22      	ldmia	r2!, {r1, r5}
     100:	c022      	stmia	r0!, {r1, r5}
     102:	0005      	movs	r5, r0
private:
    size_t m_size;
    T* m_data;

public:
    Vector() : m_size(0), m_data(NULL) {}
     104:	2200      	movs	r2, #0
     106:	60a2      	str	r2, [r4, #8]
     108:	60e2      	str	r2, [r4, #12]
     10a:	6123      	str	r3, [r4, #16]
        } else {
            PORT->Group[port].DIRSET.reg = 1 << pin;
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
        }
    }
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     10c:	6871      	ldr	r1, [r6, #4]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     10e:	3201      	adds	r2, #1
     110:	0016      	movs	r6, r2
     112:	408e      	lsls	r6, r1
     114:	6823      	ldr	r3, [r4, #0]
     116:	01db      	lsls	r3, r3, #7
     118:	4f1c      	ldr	r7, [pc, #112]	; (18c <_ZN3GSMC1E6gpio_tP6uart_t+0x9c>)
     11a:	46bc      	mov	ip, r7
     11c:	4463      	add	r3, ip
     11e:	609e      	str	r6, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     120:	185b      	adds	r3, r3, r1
     122:	3340      	adds	r3, #64	; 0x40
     124:	7819      	ldrb	r1, [r3, #0]
     126:	2602      	movs	r6, #2
     128:	43b1      	bics	r1, r6
     12a:	7019      	strb	r1, [r3, #0]
    }
    inline void drvstr(const gpio_t& gp, const bool en) { drvstr(gp.port, gp.pin, en); }

    inline void set(const int port, const int pin, const bool en) {
        if(en)
            PORT->Group[port].OUTSET.reg = 1 << pin;
     12c:	6863      	ldr	r3, [r4, #4]
     12e:	409a      	lsls	r2, r3
     130:	6823      	ldr	r3, [r4, #0]
     132:	01db      	lsls	r3, r3, #7
     134:	4463      	add	r3, ip
     136:	619a      	str	r2, [r3, #24]
{
    gpio::mode(m_pwrkey, GPIO_DIR_OUT); // Set pwrkey pin to output
    gpio::set(m_pwrkey, true); // Set pwrkey to high

    m_smsfuncs.push_back({"exec", func_exec, 0});
     138:	ab05      	add	r3, sp, #20
     13a:	469c      	mov	ip, r3
     13c:	4a14      	ldr	r2, [pc, #80]	; (190 <_ZN3GSMC1E6gpio_tP6uart_t+0xa0>)
     13e:	0019      	movs	r1, r3
     140:	cac8      	ldmia	r2!, {r3, r6, r7}
     142:	c1c8      	stmia	r1!, {r3, r6, r7}
     144:	aa02      	add	r2, sp, #8
     146:	4663      	mov	r3, ip
     148:	cbc2      	ldmia	r3!, {r1, r6, r7}
     14a:	c2c2      	stmia	r2!, {r1, r6, r7}
    ~Vector() {
        if(m_data) free(m_data);
    }

    void push_back(T elem) {
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     14c:	6801      	ldr	r1, [r0, #0]
     14e:	2900      	cmp	r1, #0
     150:	d017      	beq.n	182 <_ZN3GSMC1E6gpio_tP6uart_t+0x92>
     152:	6840      	ldr	r0, [r0, #4]
     154:	3101      	adds	r1, #1
     156:	004b      	lsls	r3, r1, #1
     158:	1859      	adds	r1, r3, r1
     15a:	0089      	lsls	r1, r1, #2
     15c:	f000 ffb4 	bl	10c8 <realloc>
        if(!new_data) return;
     160:	2800      	cmp	r0, #0
     162:	d00b      	beq.n	17c <_ZN3GSMC1E6gpio_tP6uart_t+0x8c>
        m_data = new_data;
     164:	6068      	str	r0, [r5, #4]

        *(m_data + m_size) = elem;
     166:	682b      	ldr	r3, [r5, #0]
     168:	005a      	lsls	r2, r3, #1
     16a:	18d2      	adds	r2, r2, r3
     16c:	0092      	lsls	r2, r2, #2
     16e:	ab02      	add	r3, sp, #8
     170:	1880      	adds	r0, r0, r2
     172:	cb46      	ldmia	r3!, {r1, r2, r6}
     174:	c046      	stmia	r0!, {r1, r2, r6}
        m_size++;
     176:	682b      	ldr	r3, [r5, #0]
     178:	3301      	adds	r3, #1
     17a:	602b      	str	r3, [r5, #0]
}
     17c:	0020      	movs	r0, r4
     17e:	b009      	add	sp, #36	; 0x24
     180:	bdf0      	pop	{r4, r5, r6, r7, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     182:	200c      	movs	r0, #12
     184:	f000 fee4 	bl	f50 <malloc>
     188:	e7ea      	b.n	160 <_ZN3GSMC1E6gpio_tP6uart_t+0x70>
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	41004400 	.word	0x41004400
     190:	00001aa4 	.word	0x00001aa4

00000194 <_ZN3GSMD1Ev>:

GSM::~GSM() {
     194:	b510      	push	{r4, lr}
     196:	0004      	movs	r4, r0
        if(m_data) free(m_data);
     198:	68c0      	ldr	r0, [r0, #12]
     19a:	2800      	cmp	r0, #0
     19c:	d001      	beq.n	1a2 <_ZN3GSMD1Ev+0xe>
     19e:	f000 fee1 	bl	f64 <free>
    
}
     1a2:	0020      	movs	r0, r4
     1a4:	bd10      	pop	{r4, pc}
     1a6:	Address 0x000001a6 is out of bounds.


000001a8 <_ZN3GSM7CommandEPKcS1_i>:

bool GSM::Command(const char* cmd, const char* result, int response_time) {
     1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1aa:	0004      	movs	r4, r0
     1ac:	0017      	movs	r7, r2
     1ae:	001e      	movs	r6, r3
    uint32_t start;

    m_uart->flush_rx();
     1b0:	6903      	ldr	r3, [r0, #16]
    // Allocates a buffer and reads all available data into it
    char* read();

    bool rxempty();
    void flush_rx() {
        m_rxhead = 0;
     1b2:	2200      	movs	r2, #0
     1b4:	2081      	movs	r0, #129	; 0x81
     1b6:	0080      	lsls	r0, r0, #2
     1b8:	521a      	strh	r2, [r3, r0]
        m_rxtail = 0;
     1ba:	4825      	ldr	r0, [pc, #148]	; (250 <_ZN3GSM7CommandEPKcS1_i+0xa8>)
     1bc:	521a      	strh	r2, [r3, r0]
        m_rxfull = false;
     1be:	2000      	movs	r0, #0
     1c0:	2282      	movs	r2, #130	; 0x82
     1c2:	0092      	lsls	r2, r2, #2
     1c4:	5498      	strb	r0, [r3, r2]

    m_uart->print(cmd);
     1c6:	2201      	movs	r2, #1
     1c8:	4252      	negs	r2, r2
     1ca:	6920      	ldr	r0, [r4, #16]
     1cc:	f000 fcb2 	bl	b34 <_ZN6uart_t5printEPKci>
    m_uart->write('\r');
     1d0:	210d      	movs	r1, #13
     1d2:	6920      	ldr	r0, [r4, #16]
     1d4:	f000 fca0 	bl	b18 <_ZN6uart_t5writeEc>
    // Allow up to response_time milliseconds to get a response
    start = millis();
     1d8:	f000 fb3c 	bl	854 <millis>
     1dc:	0005      	movs	r5, r0
     1de:	e012      	b.n	206 <_ZN3GSM7CommandEPKcS1_i+0x5e>
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
            return m_rxhead - m_rxtail;
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     1e0:	2281      	movs	r2, #129	; 0x81
     1e2:	0092      	lsls	r2, r2, #2
     1e4:	5a99      	ldrh	r1, [r3, r2]
     1e6:	4a1a      	ldr	r2, [pc, #104]	; (250 <_ZN3GSM7CommandEPKcS1_i+0xa8>)
     1e8:	5a9b      	ldrh	r3, [r3, r2]
     1ea:	1ac9      	subs	r1, r1, r3
     1ec:	b289      	uxth	r1, r1
     1ee:	2380      	movs	r3, #128	; 0x80
     1f0:	009b      	lsls	r3, r3, #2
     1f2:	469c      	mov	ip, r3
     1f4:	4461      	add	r1, ip
     1f6:	b289      	uxth	r1, r1
    while(!m_uart->available())
     1f8:	2900      	cmp	r1, #0
     1fa:	d116      	bne.n	22a <_ZN3GSM7CommandEPKcS1_i+0x82>
        if(millis() - start >= response_time)
     1fc:	f000 fb2a 	bl	854 <millis>
     200:	1b40      	subs	r0, r0, r5
     202:	42b0      	cmp	r0, r6
     204:	d21f      	bcs.n	246 <_ZN3GSM7CommandEPKcS1_i+0x9e>
    while(!m_uart->available())
     206:	6923      	ldr	r3, [r4, #16]
        if(m_rxhead >= m_rxtail)
     208:	2281      	movs	r2, #129	; 0x81
     20a:	0092      	lsls	r2, r2, #2
     20c:	5a99      	ldrh	r1, [r3, r2]
     20e:	b289      	uxth	r1, r1
     210:	4a0f      	ldr	r2, [pc, #60]	; (250 <_ZN3GSM7CommandEPKcS1_i+0xa8>)
     212:	5a9a      	ldrh	r2, [r3, r2]
     214:	b292      	uxth	r2, r2
     216:	4291      	cmp	r1, r2
     218:	d3e2      	bcc.n	1e0 <_ZN3GSM7CommandEPKcS1_i+0x38>
            return m_rxhead - m_rxtail;
     21a:	2281      	movs	r2, #129	; 0x81
     21c:	0092      	lsls	r2, r2, #2
     21e:	5a99      	ldrh	r1, [r3, r2]
     220:	4a0b      	ldr	r2, [pc, #44]	; (250 <_ZN3GSM7CommandEPKcS1_i+0xa8>)
     222:	5a9b      	ldrh	r3, [r3, r2]
     224:	1ac9      	subs	r1, r1, r3
     226:	b289      	uxth	r1, r1
     228:	e7e6      	b.n	1f8 <_ZN3GSM7CommandEPKcS1_i+0x50>
            return false;
    
    delay_usec(100000); // wait 100 ms to get the whole response
     22a:	480a      	ldr	r0, [pc, #40]	; (254 <_ZN3GSM7CommandEPKcS1_i+0xac>)
     22c:	f001 fd5c 	bl	1ce8 <__delay_usec_veneer>

    if(!result) return true;
     230:	2f00      	cmp	r7, #0
     232:	d00a      	beq.n	24a <_ZN3GSM7CommandEPKcS1_i+0xa2>
    return m_uart->find(result) != -1;
     234:	6920      	ldr	r0, [r4, #16]
     236:	0039      	movs	r1, r7
     238:	f000 fd10 	bl	c5c <_ZN6uart_t4findEPKc>
     23c:	3001      	adds	r0, #1
     23e:	1e43      	subs	r3, r0, #1
     240:	4198      	sbcs	r0, r3
     242:	b2c0      	uxtb	r0, r0
     244:	e000      	b.n	248 <_ZN3GSM7CommandEPKcS1_i+0xa0>
            return false;
     246:	2000      	movs	r0, #0
}
     248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!result) return true;
     24a:	2001      	movs	r0, #1
     24c:	e7fc      	b.n	248 <_ZN3GSM7CommandEPKcS1_i+0xa0>
     24e:	46c0      	nop			; (mov r8, r8)
     250:	00000206 	.word	0x00000206
     254:	000186a0 	.word	0x000186a0

00000258 <_ZN3GSM13RepeatCommandEPKcS1_ii>:

bool GSM::RepeatCommand(const char* cmd, const char* result, int repeats, int response_time) {
     258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     25a:	46ce      	mov	lr, r9
     25c:	4647      	mov	r7, r8
     25e:	b580      	push	{r7, lr}
     260:	4680      	mov	r8, r0
     262:	000f      	movs	r7, r1
     264:	0016      	movs	r6, r2
     266:	001d      	movs	r5, r3
     268:	9b08      	ldr	r3, [sp, #32]
     26a:	4699      	mov	r9, r3
    for(int i = 0; i < repeats; i++) {
     26c:	2400      	movs	r4, #0
     26e:	42ac      	cmp	r4, r5
     270:	da0c      	bge.n	28c <_ZN3GSM13RepeatCommandEPKcS1_ii+0x34>
        if(Command(cmd, result, response_time))
     272:	464b      	mov	r3, r9
     274:	0032      	movs	r2, r6
     276:	0039      	movs	r1, r7
     278:	4640      	mov	r0, r8
     27a:	f7ff ff95 	bl	1a8 <_ZN3GSM7CommandEPKcS1_i>
     27e:	2800      	cmp	r0, #0
     280:	d105      	bne.n	28e <_ZN3GSM13RepeatCommandEPKcS1_ii+0x36>
            return true;
        
        delay_usec(500000);
     282:	4805      	ldr	r0, [pc, #20]	; (298 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x40>)
     284:	f001 fd30 	bl	1ce8 <__delay_usec_veneer>
    for(int i = 0; i < repeats; i++) {
     288:	3401      	adds	r4, #1
     28a:	e7f0      	b.n	26e <_ZN3GSM13RepeatCommandEPKcS1_ii+0x16>
    }
    return false;
     28c:	2000      	movs	r0, #0
}
     28e:	bc0c      	pop	{r2, r3}
     290:	4690      	mov	r8, r2
     292:	4699      	mov	r9, r3
     294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     296:	46c0      	nop			; (mov r8, r8)
     298:	0007a120 	.word	0x0007a120

0000029c <_ZN3GSM7PowerOnEv>:

bool GSM::PowerOn() {
     29c:	b5f0      	push	{r4, r5, r6, r7, lr}
     29e:	b083      	sub	sp, #12
     2a0:	0004      	movs	r4, r0
    m_uart->write('\r');
     2a2:	210d      	movs	r1, #13
     2a4:	6900      	ldr	r0, [r0, #16]
     2a6:	f000 fc37 	bl	b18 <_ZN6uart_t5writeEc>
    
    // Fail after 3 attempts to power cycle
    for(int i = 0; i < 3; i++) {
     2aa:	2600      	movs	r6, #0
     2ac:	e000      	b.n	2b0 <_ZN3GSM7PowerOnEv+0x14>
     2ae:	3601      	adds	r6, #1
     2b0:	2e02      	cmp	r6, #2
     2b2:	dc25      	bgt.n	300 <_ZN3GSM7PowerOnEv+0x64>
        else
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     2b4:	2501      	movs	r5, #1
     2b6:	002a      	movs	r2, r5
     2b8:	6863      	ldr	r3, [r4, #4]
     2ba:	409a      	lsls	r2, r3
     2bc:	6823      	ldr	r3, [r4, #0]
     2be:	01db      	lsls	r3, r3, #7
     2c0:	4911      	ldr	r1, [pc, #68]	; (308 <_ZN3GSM7PowerOnEv+0x6c>)
     2c2:	468c      	mov	ip, r1
     2c4:	4463      	add	r3, ip
     2c6:	615a      	str	r2, [r3, #20]
        gpio::set(m_pwrkey, false); // Set pwrkey to low
        delay_usec(1000000); // Wait for SIM800C to register it
     2c8:	4f10      	ldr	r7, [pc, #64]	; (30c <_ZN3GSM7PowerOnEv+0x70>)
     2ca:	0038      	movs	r0, r7
     2cc:	f001 fd0c 	bl	1ce8 <__delay_usec_veneer>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     2d0:	6863      	ldr	r3, [r4, #4]
     2d2:	409d      	lsls	r5, r3
     2d4:	6823      	ldr	r3, [r4, #0]
     2d6:	01db      	lsls	r3, r3, #7
     2d8:	4a0b      	ldr	r2, [pc, #44]	; (308 <_ZN3GSM7PowerOnEv+0x6c>)
     2da:	4694      	mov	ip, r2
     2dc:	4463      	add	r3, ip
     2de:	619d      	str	r5, [r3, #24]
        gpio::set(m_pwrkey, true); // Set pwrkey to high
        delay_usec(1000000);
     2e0:	0038      	movs	r0, r7
     2e2:	f001 fd01 	bl	1ce8 <__delay_usec_veneer>

        // Wait for response to AT command
        if(RepeatCommand("AT", "OK", 6, 500))
     2e6:	23fa      	movs	r3, #250	; 0xfa
     2e8:	005b      	lsls	r3, r3, #1
     2ea:	9300      	str	r3, [sp, #0]
     2ec:	3bef      	subs	r3, #239	; 0xef
     2ee:	3bff      	subs	r3, #255	; 0xff
     2f0:	4a07      	ldr	r2, [pc, #28]	; (310 <_ZN3GSM7PowerOnEv+0x74>)
     2f2:	4908      	ldr	r1, [pc, #32]	; (314 <_ZN3GSM7PowerOnEv+0x78>)
     2f4:	0020      	movs	r0, r4
     2f6:	f7ff ffaf 	bl	258 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     2fa:	2800      	cmp	r0, #0
     2fc:	d0d7      	beq.n	2ae <_ZN3GSM7PowerOnEv+0x12>
     2fe:	e000      	b.n	302 <_ZN3GSM7PowerOnEv+0x66>
            return true;
    }
    return false;
     300:	2000      	movs	r0, #0
}
     302:	b003      	add	sp, #12
     304:	bdf0      	pop	{r4, r5, r6, r7, pc}
     306:	46c0      	nop			; (mov r8, r8)
     308:	41004400 	.word	0x41004400
     30c:	000f4240 	.word	0x000f4240
     310:	00001b28 	.word	0x00001b28
     314:	00001acc 	.word	0x00001acc

00000318 <_ZN3GSM4InitEv>:

bool GSM::Init() {
     318:	b570      	push	{r4, r5, r6, lr}
     31a:	b082      	sub	sp, #8
     31c:	0005      	movs	r5, r0
    if(!PowerOn())
     31e:	f7ff ffbd 	bl	29c <_ZN3GSM7PowerOnEv>
     322:	1e04      	subs	r4, r0, #0
     324:	d102      	bne.n	32c <_ZN3GSM4InitEv+0x14>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms

    m_uart->flush_rx();

    return true;
}
     326:	0020      	movs	r0, r4
     328:	b002      	add	sp, #8
     32a:	bd70      	pop	{r4, r5, r6, pc}
    Command("ATE0");
     32c:	4c14      	ldr	r4, [pc, #80]	; (380 <_ZN3GSM4InitEv+0x68>)
     32e:	0023      	movs	r3, r4
     330:	2200      	movs	r2, #0
     332:	4914      	ldr	r1, [pc, #80]	; (384 <_ZN3GSM4InitEv+0x6c>)
     334:	0028      	movs	r0, r5
     336:	f7ff ff37 	bl	1a8 <_ZN3GSM7CommandEPKcS1_i>
    if(!RepeatCommand("AT+CREG?", "+CREG: 0,1", 25))
     33a:	9400      	str	r4, [sp, #0]
     33c:	2319      	movs	r3, #25
     33e:	4a12      	ldr	r2, [pc, #72]	; (388 <_ZN3GSM4InitEv+0x70>)
     340:	4912      	ldr	r1, [pc, #72]	; (38c <_ZN3GSM4InitEv+0x74>)
     342:	0028      	movs	r0, r5
     344:	f7ff ff88 	bl	258 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     348:	1e04      	subs	r4, r0, #0
     34a:	d0ec      	beq.n	326 <_ZN3GSM4InitEv+0xe>
    Command("AT+CMGF=1"); // SMS text mode
     34c:	4e0c      	ldr	r6, [pc, #48]	; (380 <_ZN3GSM4InitEv+0x68>)
     34e:	0033      	movs	r3, r6
     350:	2200      	movs	r2, #0
     352:	490f      	ldr	r1, [pc, #60]	; (390 <_ZN3GSM4InitEv+0x78>)
     354:	0028      	movs	r0, r5
     356:	f7ff ff27 	bl	1a8 <_ZN3GSM7CommandEPKcS1_i>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms
     35a:	0033      	movs	r3, r6
     35c:	2200      	movs	r2, #0
     35e:	490d      	ldr	r1, [pc, #52]	; (394 <_ZN3GSM4InitEv+0x7c>)
     360:	0028      	movs	r0, r5
     362:	f7ff ff21 	bl	1a8 <_ZN3GSM7CommandEPKcS1_i>
    m_uart->flush_rx();
     366:	692b      	ldr	r3, [r5, #16]
        m_rxhead = 0;
     368:	2200      	movs	r2, #0
     36a:	2181      	movs	r1, #129	; 0x81
     36c:	0089      	lsls	r1, r1, #2
     36e:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     370:	4909      	ldr	r1, [pc, #36]	; (398 <_ZN3GSM4InitEv+0x80>)
     372:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     374:	2100      	movs	r1, #0
     376:	2282      	movs	r2, #130	; 0x82
     378:	0092      	lsls	r2, r2, #2
     37a:	5499      	strb	r1, [r3, r2]
    return true;
     37c:	e7d3      	b.n	326 <_ZN3GSM4InitEv+0xe>
     37e:	46c0      	nop			; (mov r8, r8)
     380:	00000bb8 	.word	0x00000bb8
     384:	00001ad0 	.word	0x00001ad0
     388:	00001ad8 	.word	0x00001ad8
     38c:	00001ae4 	.word	0x00001ae4
     390:	00001af0 	.word	0x00001af0
     394:	00001afc 	.word	0x00001afc
     398:	00000206 	.word	0x00000206

0000039c <_ZN3GSM10ProcessSMSEPKcS1_>:
    ProcessSMS(text, sender);

    free(data);
}

void GSM::ProcessSMS(const char* text, const char* sender) {
     39c:	b5f0      	push	{r4, r5, r6, r7, lr}
     39e:	46c6      	mov	lr, r8
     3a0:	b500      	push	{lr}
     3a2:	b082      	sub	sp, #8
     3a4:	0006      	movs	r6, r0
     3a6:	000f      	movs	r7, r1
     3a8:	9201      	str	r2, [sp, #4]
    char* args_start = strchr(text, ' ');
     3aa:	2120      	movs	r1, #32
     3ac:	0038      	movs	r0, r7
     3ae:	f000 fedb 	bl	1168 <strchr>
     3b2:	4680      	mov	r8, r0
    if(args_start) {
     3b4:	2800      	cmp	r0, #0
     3b6:	d004      	beq.n	3c2 <_ZN3GSM10ProcessSMSEPKcS1_+0x26>
        *args_start = '\0';
     3b8:	2300      	movs	r3, #0
     3ba:	7003      	strb	r3, [r0, #0]
        args_start += 1;
     3bc:	3301      	adds	r3, #1
     3be:	469c      	mov	ip, r3
     3c0:	44e0      	add	r8, ip
        if(idx >= m_size) return {};
        return *(m_data + idx);
    }

    T* begin() {
        return m_data;
     3c2:	68f4      	ldr	r4, [r6, #12]
    }

    T* end() {
        return m_data + m_size;
     3c4:	68b3      	ldr	r3, [r6, #8]
     3c6:	005d      	lsls	r5, r3, #1
     3c8:	18ed      	adds	r5, r5, r3
     3ca:	00ad      	lsls	r5, r5, #2
     3cc:	1965      	adds	r5, r4, r5
    }

    for(auto& func : m_smsfuncs) {
     3ce:	42ac      	cmp	r4, r5
     3d0:	d00c      	beq.n	3ec <_ZN3GSM10ProcessSMSEPKcS1_+0x50>
        if(strcmp(func.key, text) == 0) {
     3d2:	0039      	movs	r1, r7
     3d4:	6820      	ldr	r0, [r4, #0]
     3d6:	f000 fed5 	bl	1184 <strcmp>
     3da:	2800      	cmp	r0, #0
     3dc:	d001      	beq.n	3e2 <_ZN3GSM10ProcessSMSEPKcS1_+0x46>
    for(auto& func : m_smsfuncs) {
     3de:	340c      	adds	r4, #12
     3e0:	e7f5      	b.n	3ce <_ZN3GSM10ProcessSMSEPKcS1_+0x32>
            func.callback(this, sender, args_start);
     3e2:	6863      	ldr	r3, [r4, #4]
     3e4:	4642      	mov	r2, r8
     3e6:	9901      	ldr	r1, [sp, #4]
     3e8:	0030      	movs	r0, r6
     3ea:	4798      	blx	r3
            break;
        }
    }
}
     3ec:	b002      	add	sp, #8
     3ee:	bc04      	pop	{r2}
     3f0:	4690      	mov	r8, r2
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003f4 <_ZN3GSM7ReadSMSEi>:
void GSM::ReadSMS(int index) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	b091      	sub	sp, #68	; 0x44
     3f8:	0004      	movs	r4, r0
     3fa:	000b      	movs	r3, r1
    snprintf(buf, sizeof(buf), "AT+CMGR=%d", index);
     3fc:	4a26      	ldr	r2, [pc, #152]	; (498 <_ZN3GSM7ReadSMSEi+0xa4>)
     3fe:	2140      	movs	r1, #64	; 0x40
     400:	4668      	mov	r0, sp
     402:	f000 fe7d 	bl	1100 <sniprintf>
    if(!Command(buf, "+CMGR"))
     406:	4b25      	ldr	r3, [pc, #148]	; (49c <_ZN3GSM7ReadSMSEi+0xa8>)
     408:	4a25      	ldr	r2, [pc, #148]	; (4a0 <_ZN3GSM7ReadSMSEi+0xac>)
     40a:	4669      	mov	r1, sp
     40c:	0020      	movs	r0, r4
     40e:	f7ff fecb 	bl	1a8 <_ZN3GSM7CommandEPKcS1_i>
     412:	2800      	cmp	r0, #0
     414:	d101      	bne.n	41a <_ZN3GSM7ReadSMSEi+0x26>
}
     416:	b011      	add	sp, #68	; 0x44
     418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    char* data = m_uart->read();
     41a:	6920      	ldr	r0, [r4, #16]
     41c:	f000 fc6a 	bl	cf4 <_ZN6uart_t4readEv>
     420:	1e07      	subs	r7, r0, #0
    if(!data) return;
     422:	d0f8      	beq.n	416 <_ZN3GSM7ReadSMSEi+0x22>
    char* cmgr_start = strstr(data, "+CMGR"); // this shouldn't return null
     424:	491e      	ldr	r1, [pc, #120]	; (4a0 <_ZN3GSM7ReadSMSEi+0xac>)
     426:	f000 feb7 	bl	1198 <strstr>
     42a:	0005      	movs	r5, r0
    char* text = strchr(cmgr_start, '\n');
     42c:	210a      	movs	r1, #10
     42e:	f000 fe9b 	bl	1168 <strchr>
    if(!text) {
     432:	2800      	cmp	r0, #0
     434:	d020      	beq.n	478 <_ZN3GSM7ReadSMSEi+0x84>
    text += 1; // ignore \n
     436:	1c46      	adds	r6, r0, #1
    char* text_end = strstr(text, "\r\n\r\nOK");
     438:	491a      	ldr	r1, [pc, #104]	; (4a4 <_ZN3GSM7ReadSMSEi+0xb0>)
     43a:	0030      	movs	r0, r6
     43c:	f000 feac 	bl	1198 <strstr>
    if(!text_end) {
     440:	2800      	cmp	r0, #0
     442:	d01d      	beq.n	480 <_ZN3GSM7ReadSMSEi+0x8c>
    *text_end = '\0';
     444:	2300      	movs	r3, #0
     446:	7003      	strb	r3, [r0, #0]
    char* sender = strstr(cmgr_start, ",\"");
     448:	4917      	ldr	r1, [pc, #92]	; (4a8 <_ZN3GSM7ReadSMSEi+0xb4>)
     44a:	0028      	movs	r0, r5
     44c:	f000 fea4 	bl	1198 <strstr>
    if(!sender) {
     450:	2800      	cmp	r0, #0
     452:	d019      	beq.n	488 <_ZN3GSM7ReadSMSEi+0x94>
    sender += 2;
     454:	1c85      	adds	r5, r0, #2
    if(!strchr(sender, '"')) {
     456:	2122      	movs	r1, #34	; 0x22
     458:	0028      	movs	r0, r5
     45a:	f000 fe85 	bl	1168 <strchr>
     45e:	2800      	cmp	r0, #0
     460:	d016      	beq.n	490 <_ZN3GSM7ReadSMSEi+0x9c>
    *strchr(sender, '"') = '\0';
     462:	2300      	movs	r3, #0
     464:	7003      	strb	r3, [r0, #0]
    ProcessSMS(text, sender);
     466:	002a      	movs	r2, r5
     468:	0031      	movs	r1, r6
     46a:	0020      	movs	r0, r4
     46c:	f7ff ff96 	bl	39c <_ZN3GSM10ProcessSMSEPKcS1_>
    free(data);
     470:	0038      	movs	r0, r7
     472:	f000 fd77 	bl	f64 <free>
     476:	e7ce      	b.n	416 <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     478:	0038      	movs	r0, r7
     47a:	f000 fd73 	bl	f64 <free>
        return;
     47e:	e7ca      	b.n	416 <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     480:	0038      	movs	r0, r7
     482:	f000 fd6f 	bl	f64 <free>
        return;
     486:	e7c6      	b.n	416 <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     488:	0038      	movs	r0, r7
     48a:	f000 fd6b 	bl	f64 <free>
        return;
     48e:	e7c2      	b.n	416 <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     490:	0038      	movs	r0, r7
     492:	f000 fd67 	bl	f64 <free>
        return;
     496:	e7be      	b.n	416 <_ZN3GSM7ReadSMSEi+0x22>
     498:	00001b10 	.word	0x00001b10
     49c:	00000bb8 	.word	0x00000bb8
     4a0:	00001b1c 	.word	0x00001b1c
     4a4:	00001b24 	.word	0x00001b24
     4a8:	00001b2c 	.word	0x00001b2c

000004ac <_ZN3GSM4PollEv>:
void GSM::Poll() {
     4ac:	b570      	push	{r4, r5, r6, lr}
     4ae:	0004      	movs	r4, r0
    if(!m_uart->available()) return;
     4b0:	6902      	ldr	r2, [r0, #16]
        if(m_rxhead >= m_rxtail)
     4b2:	2381      	movs	r3, #129	; 0x81
     4b4:	009b      	lsls	r3, r3, #2
     4b6:	5ad1      	ldrh	r1, [r2, r3]
     4b8:	b289      	uxth	r1, r1
     4ba:	4b20      	ldr	r3, [pc, #128]	; (53c <_ZN3GSM4PollEv+0x90>)
     4bc:	5ad3      	ldrh	r3, [r2, r3]
     4be:	b29b      	uxth	r3, r3
     4c0:	4299      	cmp	r1, r3
     4c2:	d309      	bcc.n	4d8 <_ZN3GSM4PollEv+0x2c>
            return m_rxhead - m_rxtail;
     4c4:	2381      	movs	r3, #129	; 0x81
     4c6:	009b      	lsls	r3, r3, #2
     4c8:	5ad3      	ldrh	r3, [r2, r3]
     4ca:	491c      	ldr	r1, [pc, #112]	; (53c <_ZN3GSM4PollEv+0x90>)
     4cc:	5a52      	ldrh	r2, [r2, r1]
     4ce:	1a9b      	subs	r3, r3, r2
     4d0:	b29b      	uxth	r3, r3
     4d2:	2b00      	cmp	r3, #0
     4d4:	d10d      	bne.n	4f2 <_ZN3GSM4PollEv+0x46>
}
     4d6:	bd70      	pop	{r4, r5, r6, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     4d8:	2381      	movs	r3, #129	; 0x81
     4da:	009b      	lsls	r3, r3, #2
     4dc:	5ad3      	ldrh	r3, [r2, r3]
     4de:	4917      	ldr	r1, [pc, #92]	; (53c <_ZN3GSM4PollEv+0x90>)
     4e0:	5a52      	ldrh	r2, [r2, r1]
     4e2:	1a9b      	subs	r3, r3, r2
     4e4:	b29b      	uxth	r3, r3
     4e6:	2280      	movs	r2, #128	; 0x80
     4e8:	0092      	lsls	r2, r2, #2
     4ea:	4694      	mov	ip, r2
     4ec:	4463      	add	r3, ip
     4ee:	b29b      	uxth	r3, r3
     4f0:	e7ef      	b.n	4d2 <_ZN3GSM4PollEv+0x26>
    delay_usec(100000);
     4f2:	4813      	ldr	r0, [pc, #76]	; (540 <_ZN3GSM4PollEv+0x94>)
     4f4:	f001 fbf8 	bl	1ce8 <__delay_usec_veneer>
    char* data = m_uart->read();
     4f8:	6920      	ldr	r0, [r4, #16]
     4fa:	f000 fbfb 	bl	cf4 <_ZN6uart_t4readEv>
     4fe:	1e05      	subs	r5, r0, #0
    if(!data) return;
     500:	d0e9      	beq.n	4d6 <_ZN3GSM4PollEv+0x2a>
    if(strstr(data, "RING")) {
     502:	4910      	ldr	r1, [pc, #64]	; (544 <_ZN3GSM4PollEv+0x98>)
     504:	f000 fe48 	bl	1198 <strstr>
     508:	2800      	cmp	r0, #0
     50a:	d009      	beq.n	520 <_ZN3GSM4PollEv+0x74>
        Command("ATH"); // Disconnect call
     50c:	4b0e      	ldr	r3, [pc, #56]	; (548 <_ZN3GSM4PollEv+0x9c>)
     50e:	2200      	movs	r2, #0
     510:	490e      	ldr	r1, [pc, #56]	; (54c <_ZN3GSM4PollEv+0xa0>)
     512:	0020      	movs	r0, r4
     514:	f7ff fe48 	bl	1a8 <_ZN3GSM7CommandEPKcS1_i>
    free(data);
     518:	0028      	movs	r0, r5
     51a:	f000 fd23 	bl	f64 <free>
     51e:	e7da      	b.n	4d6 <_ZN3GSM4PollEv+0x2a>
    } else if(strstr(data, "+CMTI")) {
     520:	490b      	ldr	r1, [pc, #44]	; (550 <_ZN3GSM4PollEv+0xa4>)
     522:	0028      	movs	r0, r5
     524:	f000 fe38 	bl	1198 <strstr>
     528:	2800      	cmp	r0, #0
     52a:	d0f5      	beq.n	518 <_ZN3GSM4PollEv+0x6c>
        ReadSMS(find_num(strstr(data, "+CMTI")));
     52c:	f7ff fdd2 	bl	d4 <_ZL8find_numPKc>
     530:	0001      	movs	r1, r0
     532:	0020      	movs	r0, r4
     534:	f7ff ff5e 	bl	3f4 <_ZN3GSM7ReadSMSEi>
     538:	e7ee      	b.n	518 <_ZN3GSM4PollEv+0x6c>
     53a:	46c0      	nop			; (mov r8, r8)
     53c:	00000206 	.word	0x00000206
     540:	000186a0 	.word	0x000186a0
     544:	00001b30 	.word	0x00001b30
     548:	00000bb8 	.word	0x00000bb8
     54c:	00001b38 	.word	0x00001b38
     550:	00001b3c 	.word	0x00001b3c

00000554 <_ZN3GSM7SendSMSEPKcS1_>:

bool GSM::SendSMS(const char* number, const char* text) {
     554:	b530      	push	{r4, r5, lr}
     556:	b091      	sub	sp, #68	; 0x44
     558:	0004      	movs	r4, r0
     55a:	000b      	movs	r3, r1
     55c:	0015      	movs	r5, r2
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+CMGS=\"%s\"", number);
     55e:	4a0e      	ldr	r2, [pc, #56]	; (598 <_ZN3GSM7SendSMSEPKcS1_+0x44>)
     560:	2140      	movs	r1, #64	; 0x40
     562:	4668      	mov	r0, sp
     564:	f000 fdcc 	bl	1100 <sniprintf>
    if(!Command(buf))
     568:	4b0c      	ldr	r3, [pc, #48]	; (59c <_ZN3GSM7SendSMSEPKcS1_+0x48>)
     56a:	2200      	movs	r2, #0
     56c:	4669      	mov	r1, sp
     56e:	0020      	movs	r0, r4
     570:	f7ff fe1a 	bl	1a8 <_ZN3GSM7CommandEPKcS1_i>
     574:	2800      	cmp	r0, #0
     576:	d101      	bne.n	57c <_ZN3GSM7SendSMSEPKcS1_+0x28>
        return false;
    
    m_uart->print(text);

    return Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
     578:	b011      	add	sp, #68	; 0x44
     57a:	bd30      	pop	{r4, r5, pc}
    m_uart->print(text);
     57c:	2201      	movs	r2, #1
     57e:	4252      	negs	r2, r2
     580:	0029      	movs	r1, r5
     582:	6920      	ldr	r0, [r4, #16]
     584:	f000 fad6 	bl	b34 <_ZN6uart_t5printEPKci>
    return Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
     588:	4b05      	ldr	r3, [pc, #20]	; (5a0 <_ZN3GSM7SendSMSEPKcS1_+0x4c>)
     58a:	4a06      	ldr	r2, [pc, #24]	; (5a4 <_ZN3GSM7SendSMSEPKcS1_+0x50>)
     58c:	4906      	ldr	r1, [pc, #24]	; (5a8 <_ZN3GSM7SendSMSEPKcS1_+0x54>)
     58e:	0020      	movs	r0, r4
     590:	f7ff fe0a 	bl	1a8 <_ZN3GSM7CommandEPKcS1_i>
     594:	e7f0      	b.n	578 <_ZN3GSM7SendSMSEPKcS1_+0x24>
     596:	46c0      	nop			; (mov r8, r8)
     598:	00001b44 	.word	0x00001b44
     59c:	00000bb8 	.word	0x00000bb8
     5a0:	0000ea60 	.word	0x0000ea60
     5a4:	00001b54 	.word	0x00001b54
     5a8:	00001b5c 	.word	0x00001b5c

000005ac <_ZL9func_execP3GSMPKcS2_>:
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     5ac:	b570      	push	{r4, r5, r6, lr}
     5ae:	0004      	movs	r4, r0
     5b0:	000d      	movs	r5, r1
     5b2:	0011      	movs	r1, r2
    if(!gsm->Command(args)) {
     5b4:	4b0d      	ldr	r3, [pc, #52]	; (5ec <_ZL9func_execP3GSMPKcS2_+0x40>)
     5b6:	2200      	movs	r2, #0
     5b8:	f7ff fdf6 	bl	1a8 <_ZN3GSM7CommandEPKcS1_i>
     5bc:	2800      	cmp	r0, #0
     5be:	d105      	bne.n	5cc <_ZL9func_execP3GSMPKcS2_+0x20>
        gsm->SendSMS(sender, "Command timed out");
     5c0:	4a0b      	ldr	r2, [pc, #44]	; (5f0 <_ZL9func_execP3GSMPKcS2_+0x44>)
     5c2:	0029      	movs	r1, r5
     5c4:	0020      	movs	r0, r4
     5c6:	f7ff ffc5 	bl	554 <_ZN3GSM7SendSMSEPKcS1_>
}
     5ca:	bd70      	pop	{r4, r5, r6, pc}
        char* resp = gsm->m_uart->read();
     5cc:	6920      	ldr	r0, [r4, #16]
     5ce:	f000 fb91 	bl	cf4 <_ZN6uart_t4readEv>
     5d2:	1e02      	subs	r2, r0, #0
        if(!resp) {
     5d4:	d004      	beq.n	5e0 <_ZL9func_execP3GSMPKcS2_+0x34>
            gsm->SendSMS(sender, resp);
     5d6:	0029      	movs	r1, r5
     5d8:	0020      	movs	r0, r4
     5da:	f7ff ffbb 	bl	554 <_ZN3GSM7SendSMSEPKcS1_>
}
     5de:	e7f4      	b.n	5ca <_ZL9func_execP3GSMPKcS2_+0x1e>
            gsm->SendSMS(sender, "uart->read() returned null");
     5e0:	4a04      	ldr	r2, [pc, #16]	; (5f4 <_ZL9func_execP3GSMPKcS2_+0x48>)
     5e2:	0029      	movs	r1, r5
     5e4:	0020      	movs	r0, r4
     5e6:	f7ff ffb5 	bl	554 <_ZN3GSM7SendSMSEPKcS1_>
     5ea:	e7ee      	b.n	5ca <_ZL9func_execP3GSMPKcS2_+0x1e>
     5ec:	00000bb8 	.word	0x00000bb8
     5f0:	00001b60 	.word	0x00001b60
     5f4:	00001b74 	.word	0x00001b74

000005f8 <_Z41__static_initialization_and_destruction_0ii>:
        
        gpio::toggle(led);
        //auto start = millis();
        //while(millis() - start < 500);
    }
     5f8:	b510      	push	{r4, lr}
     5fa:	b082      	sub	sp, #8
     5fc:	2801      	cmp	r0, #1
     5fe:	d001      	beq.n	604 <_Z41__static_initialization_and_destruction_0ii+0xc>
     600:	b002      	add	sp, #8
     602:	bd10      	pop	{r4, pc}
     604:	4b07      	ldr	r3, [pc, #28]	; (624 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     606:	4299      	cmp	r1, r3
     608:	d1fa      	bne.n	600 <_Z41__static_initialization_and_destruction_0ii+0x8>
);
     60a:	4c07      	ldr	r4, [pc, #28]	; (628 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     60c:	4b07      	ldr	r3, [pc, #28]	; (62c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     60e:	2100      	movs	r1, #0
     610:	2202      	movs	r2, #2
     612:	0020      	movs	r0, r4
     614:	f7ff fd6c 	bl	f0 <_ZN3GSMC1E6gpio_tP6uart_t>
static GSM gsm(
     618:	4a05      	ldr	r2, [pc, #20]	; (630 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     61a:	4906      	ldr	r1, [pc, #24]	; (634 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     61c:	0020      	movs	r0, r4
     61e:	f000 fc2f 	bl	e80 <__aeabi_atexit>
     622:	e7ed      	b.n	600 <_Z41__static_initialization_and_destruction_0ii+0x8>
     624:	0000ffff 	.word	0x0000ffff
     628:	20000094 	.word	0x20000094
     62c:	200002bc 	.word	0x200002bc
     630:	2000000c 	.word	0x2000000c
     634:	00000195 	.word	0x00000195

00000638 <main>:
int main() {
     638:	b530      	push	{r4, r5, lr}
     63a:	b087      	sub	sp, #28
    g_uart1.init({{GPIO_PORTA, 24}, {GPIO_PORTA, 25}, UART_SER1_TXPO_PA24, UART_SER1_RXPO_PA25}, CALC_BAUD(115200));
     63c:	a901      	add	r1, sp, #4
     63e:	4b12      	ldr	r3, [pc, #72]	; (688 <main+0x50>)
     640:	000a      	movs	r2, r1
     642:	cb31      	ldmia	r3!, {r0, r4, r5}
     644:	c231      	stmia	r2!, {r0, r4, r5}
     646:	cb11      	ldmia	r3!, {r0, r4}
     648:	c211      	stmia	r2!, {r0, r4}
     64a:	4a10      	ldr	r2, [pc, #64]	; (68c <main+0x54>)
     64c:	4810      	ldr	r0, [pc, #64]	; (690 <main+0x58>)
     64e:	f000 f947 	bl	8e0 <_ZN6uart_t4initERK13uart_pincfg_tt>
            PORT->Group[port].DIRSET.reg = 1 << pin;
     652:	4b10      	ldr	r3, [pc, #64]	; (694 <main+0x5c>)
     654:	2210      	movs	r2, #16
     656:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     658:	2144      	movs	r1, #68	; 0x44
     65a:	5c5a      	ldrb	r2, [r3, r1]
     65c:	2002      	movs	r0, #2
     65e:	4382      	bics	r2, r0
     660:	545a      	strb	r2, [r3, r1]
    if(!gsm.Init()) {
     662:	480d      	ldr	r0, [pc, #52]	; (698 <main+0x60>)
     664:	f7ff fe58 	bl	318 <_ZN3GSM4InitEv>
     668:	2800      	cmp	r0, #0
     66a:	d106      	bne.n	67a <main+0x42>
    }
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }

    inline void toggle(const int port, const int pin) {
        PORT->Group[port].OUTTGL.reg = 1 << pin;
     66c:	4b09      	ldr	r3, [pc, #36]	; (694 <main+0x5c>)
     66e:	2210      	movs	r2, #16
     670:	61da      	str	r2, [r3, #28]
            delay_usec(200000);
     672:	480a      	ldr	r0, [pc, #40]	; (69c <main+0x64>)
     674:	f001 fb38 	bl	1ce8 <__delay_usec_veneer>
        while(1) {
     678:	e7f8      	b.n	66c <main+0x34>
        gsm.Poll();
     67a:	4807      	ldr	r0, [pc, #28]	; (698 <main+0x60>)
     67c:	f7ff ff16 	bl	4ac <_ZN3GSM4PollEv>
     680:	4b04      	ldr	r3, [pc, #16]	; (694 <main+0x5c>)
     682:	2210      	movs	r2, #16
     684:	61da      	str	r2, [r3, #28]
     686:	e7f8      	b.n	67a <main+0x42>
     688:	00001ab0 	.word	0x00001ab0
     68c:	0000f62b 	.word	0x0000f62b
     690:	200002bc 	.word	0x200002bc
     694:	41004400 	.word	0x41004400
     698:	20000094 	.word	0x20000094
     69c:	00030d40 	.word	0x00030d40

000006a0 <_GLOBAL__sub_I_main>:
     6a0:	b510      	push	{r4, lr}
     6a2:	4902      	ldr	r1, [pc, #8]	; (6ac <_GLOBAL__sub_I_main+0xc>)
     6a4:	2001      	movs	r0, #1
     6a6:	f7ff ffa7 	bl	5f8 <_Z41__static_initialization_and_destruction_0ii>
     6aa:	bd10      	pop	{r4, pc}
     6ac:	0000ffff 	.word	0x0000ffff

000006b0 <initializeSystemFor48MHz>:

static volatile uint64_t _cycles;

static void initializeSystemFor48MHz()
{
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
     6b0:	4a48      	ldr	r2, [pc, #288]	; (7d4 <initializeSystemFor48MHz+0x124>)
     6b2:	6a11      	ldr	r1, [r2, #32]
     6b4:	23c0      	movs	r3, #192	; 0xc0
     6b6:	009b      	lsls	r3, r3, #2
     6b8:	430b      	orrs	r3, r1
     6ba:	6213      	str	r3, [r2, #32]
	// Change the timing of the NVM access
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
     6bc:	4946      	ldr	r1, [pc, #280]	; (7d8 <initializeSystemFor48MHz+0x128>)
     6be:	684a      	ldr	r2, [r1, #4]
     6c0:	231e      	movs	r3, #30
     6c2:	439a      	bics	r2, r3
     6c4:	3b1c      	subs	r3, #28
     6c6:	4313      	orrs	r3, r2
     6c8:	604b      	str	r3, [r1, #4]

	// Enable the bus clock for the clock system.
	PM->APBAMASK.bit.GCLK_ = 1;
     6ca:	4a44      	ldr	r2, [pc, #272]	; (7dc <initializeSystemFor48MHz+0x12c>)
     6cc:	6991      	ldr	r1, [r2, #24]
     6ce:	2308      	movs	r3, #8
     6d0:	430b      	orrs	r3, r1
     6d2:	6193      	str	r3, [r2, #24]

	// Initialise the DFLL to run in closed-loop mode at 48MHz
	// 1. Make a software reset of the clock system.
	GCLK->CTRL.bit.SWRST = 1;
     6d4:	4a42      	ldr	r2, [pc, #264]	; (7e0 <initializeSystemFor48MHz+0x130>)
     6d6:	7813      	ldrb	r3, [r2, #0]
     6d8:	2101      	movs	r1, #1
     6da:	430b      	orrs	r3, r1
     6dc:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.bit.SWRST && GCLK->STATUS.bit.SYNCBUSY) {};
     6de:	4b40      	ldr	r3, [pc, #256]	; (7e0 <initializeSystemFor48MHz+0x130>)
     6e0:	781b      	ldrb	r3, [r3, #0]
     6e2:	07db      	lsls	r3, r3, #31
     6e4:	d503      	bpl.n	6ee <initializeSystemFor48MHz+0x3e>
     6e6:	4b3e      	ldr	r3, [pc, #248]	; (7e0 <initializeSystemFor48MHz+0x130>)
     6e8:	785b      	ldrb	r3, [r3, #1]
     6ea:	09db      	lsrs	r3, r3, #7
     6ec:	d1f7      	bne.n	6de <initializeSystemFor48MHz+0x2e>
	// 2. Make sure the OCM8M keeps running.
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
     6ee:	4b39      	ldr	r3, [pc, #228]	; (7d4 <initializeSystemFor48MHz+0x124>)
     6f0:	6a19      	ldr	r1, [r3, #32]
     6f2:	2280      	movs	r2, #128	; 0x80
     6f4:	4391      	bics	r1, r2
     6f6:	6219      	str	r1, [r3, #32]
	// 3. Set the division factor to 64, which reduces the 1MHz source to 15.625kHz
	GCLK->GENDIV.reg =
     6f8:	4b39      	ldr	r3, [pc, #228]	; (7e0 <initializeSystemFor48MHz+0x130>)
     6fa:	4a3a      	ldr	r2, [pc, #232]	; (7e4 <initializeSystemFor48MHz+0x134>)
     6fc:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(3) | // Select generator 3
	GCLK_GENDIV_DIV(64); // Set the division factor to 64
	// 4. Create generic clock generator 3 for the 15KHz signal of the DFLL
	GCLK->GENCTRL.reg =
     6fe:	4a3a      	ldr	r2, [pc, #232]	; (7e8 <initializeSystemFor48MHz+0x138>)
     700:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(3) | // Select generator 3
	GCLK_GENCTRL_SRC_OSC8M | // Select source OSC8M
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     702:	4b37      	ldr	r3, [pc, #220]	; (7e0 <initializeSystemFor48MHz+0x130>)
     704:	785b      	ldrb	r3, [r3, #1]
     706:	09db      	lsrs	r3, r3, #7
     708:	d1fb      	bne.n	702 <initializeSystemFor48MHz+0x52>
	// 5. Configure DFLL with the
	GCLK->CLKCTRL.reg =
     70a:	4b35      	ldr	r3, [pc, #212]	; (7e0 <initializeSystemFor48MHz+0x130>)
     70c:	2286      	movs	r2, #134	; 0x86
     70e:	01d2      	lsls	r2, r2, #7
     710:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID_DFLL48 | // Target is DFLL48M
	GCLK_CLKCTRL_GEN(3) | // Select generator 3 as source.
	GCLK_CLKCTRL_CLKEN; // Enable the DFLL48M
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     712:	4b33      	ldr	r3, [pc, #204]	; (7e0 <initializeSystemFor48MHz+0x130>)
     714:	785b      	ldrb	r3, [r3, #1]
     716:	09db      	lsrs	r3, r3, #7
     718:	d1fb      	bne.n	712 <initializeSystemFor48MHz+0x62>
	// 6. Workaround to be able to configure the DFLL.
	SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
     71a:	4a2e      	ldr	r2, [pc, #184]	; (7d4 <initializeSystemFor48MHz+0x124>)
     71c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     71e:	2180      	movs	r1, #128	; 0x80
     720:	438b      	bics	r3, r1
     722:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     724:	4b2b      	ldr	r3, [pc, #172]	; (7d4 <initializeSystemFor48MHz+0x124>)
     726:	68db      	ldr	r3, [r3, #12]
     728:	06db      	lsls	r3, r3, #27
     72a:	d5fb      	bpl.n	724 <initializeSystemFor48MHz+0x74>
	// 7. Change the multiplication factor.
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
     72c:	4b29      	ldr	r3, [pc, #164]	; (7d4 <initializeSystemFor48MHz+0x124>)
     72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     730:	0c12      	lsrs	r2, r2, #16
     732:	0412      	lsls	r2, r2, #16
     734:	21c0      	movs	r1, #192	; 0xc0
     736:	0109      	lsls	r1, r1, #4
     738:	4311      	orrs	r1, r2
     73a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
     73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     73e:	0192      	lsls	r2, r2, #6
     740:	0992      	lsrs	r2, r2, #6
     742:	2180      	movs	r1, #128	; 0x80
     744:	04c9      	lsls	r1, r1, #19
     746:	4311      	orrs	r1, r2
     748:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.FSTEP = 1; // Fine step = 1
     74a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     74c:	4a27      	ldr	r2, [pc, #156]	; (7ec <initializeSystemFor48MHz+0x13c>)
     74e:	4011      	ands	r1, r2
     750:	2280      	movs	r2, #128	; 0x80
     752:	0252      	lsls	r2, r2, #9
     754:	430a      	orrs	r2, r1
     756:	62da      	str	r2, [r3, #44]	; 0x2c
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     758:	4b1e      	ldr	r3, [pc, #120]	; (7d4 <initializeSystemFor48MHz+0x124>)
     75a:	68db      	ldr	r3, [r3, #12]
     75c:	06db      	lsls	r3, r3, #27
     75e:	d5fb      	bpl.n	758 <initializeSystemFor48MHz+0xa8>
	// 8. Start closed-loop mode
	SYSCTRL->DFLLCTRL.reg |=
     760:	4a1c      	ldr	r2, [pc, #112]	; (7d4 <initializeSystemFor48MHz+0x124>)
     762:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     764:	2181      	movs	r1, #129	; 0x81
     766:	0089      	lsls	r1, r1, #2
     768:	430b      	orrs	r3, r1
     76a:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_MODE | // 1 = Closed loop mode.
	SYSCTRL_DFLLCTRL_QLDIS; // 1 = Disable quick lock.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     76c:	4b19      	ldr	r3, [pc, #100]	; (7d4 <initializeSystemFor48MHz+0x124>)
     76e:	68db      	ldr	r3, [r3, #12]
     770:	06db      	lsls	r3, r3, #27
     772:	d5fb      	bpl.n	76c <initializeSystemFor48MHz+0xbc>
	// 9. Clear the lock flags.
	SYSCTRL->INTFLAG.bit.DFLLLCKC = 1;
     774:	4b17      	ldr	r3, [pc, #92]	; (7d4 <initializeSystemFor48MHz+0x124>)
     776:	6899      	ldr	r1, [r3, #8]
     778:	2280      	movs	r2, #128	; 0x80
     77a:	430a      	orrs	r2, r1
     77c:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLLCKF = 1;
     77e:	6899      	ldr	r1, [r3, #8]
     780:	2240      	movs	r2, #64	; 0x40
     782:	430a      	orrs	r2, r1
     784:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLRDY = 1;
     786:	6899      	ldr	r1, [r3, #8]
     788:	2210      	movs	r2, #16
     78a:	430a      	orrs	r2, r1
     78c:	609a      	str	r2, [r3, #8]
	// 10. Enable the DFLL
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
     78e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
     790:	2102      	movs	r1, #2
     792:	430a      	orrs	r2, r1
     794:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     796:	4b0f      	ldr	r3, [pc, #60]	; (7d4 <initializeSystemFor48MHz+0x124>)
     798:	68db      	ldr	r3, [r3, #12]
     79a:	06db      	lsls	r3, r3, #27
     79c:	d5fb      	bpl.n	796 <initializeSystemFor48MHz+0xe6>
	// 11. Wait for the fine and coarse locks.
	while (!SYSCTRL->INTFLAG.bit.DFLLLCKC && !SYSCTRL->INTFLAG.bit.DFLLLCKF) {};
     79e:	4b0d      	ldr	r3, [pc, #52]	; (7d4 <initializeSystemFor48MHz+0x124>)
     7a0:	689b      	ldr	r3, [r3, #8]
     7a2:	061b      	lsls	r3, r3, #24
     7a4:	d403      	bmi.n	7ae <initializeSystemFor48MHz+0xfe>
     7a6:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <initializeSystemFor48MHz+0x124>)
     7a8:	689b      	ldr	r3, [r3, #8]
     7aa:	065b      	lsls	r3, r3, #25
     7ac:	d5f7      	bpl.n	79e <initializeSystemFor48MHz+0xee>
	// 12. Wait until the DFLL is ready.
	while (!SYSCTRL->INTFLAG.bit.DFLLRDY) {};
     7ae:	4b09      	ldr	r3, [pc, #36]	; (7d4 <initializeSystemFor48MHz+0x124>)
     7b0:	689b      	ldr	r3, [r3, #8]
     7b2:	06db      	lsls	r3, r3, #27
     7b4:	d5fb      	bpl.n	7ae <initializeSystemFor48MHz+0xfe>

	// Switch the main clock speed.
	// 1. Set the divisor of generic clock 0 to 0
	GCLK->GENDIV.reg =
     7b6:	4b0a      	ldr	r3, [pc, #40]	; (7e0 <initializeSystemFor48MHz+0x130>)
     7b8:	2200      	movs	r2, #0
     7ba:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(0) | // Select generator 0
	GCLK_GENDIV_DIV(0);
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     7bc:	4b08      	ldr	r3, [pc, #32]	; (7e0 <initializeSystemFor48MHz+0x130>)
     7be:	785b      	ldrb	r3, [r3, #1]
     7c0:	09db      	lsrs	r3, r3, #7
     7c2:	d1fb      	bne.n	7bc <initializeSystemFor48MHz+0x10c>
	// 2. Switch generic clock 0 to the DFLL
	GCLK->GENCTRL.reg =
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <initializeSystemFor48MHz+0x130>)
     7c6:	4a0a      	ldr	r2, [pc, #40]	; (7f0 <initializeSystemFor48MHz+0x140>)
     7c8:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(0) | // Select generator 0
	GCLK_GENCTRL_SRC_DFLL48M | // Select source DFLL
	GCLK_GENCTRL_IDC | // Set improved duty cycle 50/50
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     7ca:	4b05      	ldr	r3, [pc, #20]	; (7e0 <initializeSystemFor48MHz+0x130>)
     7cc:	785b      	ldrb	r3, [r3, #1]
     7ce:	09db      	lsrs	r3, r3, #7
     7d0:	d1fb      	bne.n	7ca <initializeSystemFor48MHz+0x11a>
}
     7d2:	4770      	bx	lr
     7d4:	40000800 	.word	0x40000800
     7d8:	41004000 	.word	0x41004000
     7dc:	40000400 	.word	0x40000400
     7e0:	40000c00 	.word	0x40000c00
     7e4:	00004003 	.word	0x00004003
     7e8:	00010603 	.word	0x00010603
     7ec:	fc00ffff 	.word	0xfc00ffff
     7f0:	00030700 	.word	0x00030700

000007f4 <systick_init>:

void systick_init() {
     7f4:	b510      	push	{r4, lr}
	initializeSystemFor48MHz();
     7f6:	f7ff ff5b 	bl	6b0 <initializeSystemFor48MHz>
	
	_cycles = 0;
     7fa:	4b09      	ldr	r3, [pc, #36]	; (820 <systick_init+0x2c>)
     7fc:	2000      	movs	r0, #0
     7fe:	2100      	movs	r1, #0
     800:	6018      	str	r0, [r3, #0]
     802:	6059      	str	r1, [r3, #4]

	SysTick->CTRL = 0;
     804:	4b07      	ldr	r3, [pc, #28]	; (824 <systick_init+0x30>)
     806:	2200      	movs	r2, #0
     808:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0xFFFFFF;
     80a:	4a07      	ldr	r2, [pc, #28]	; (828 <systick_init+0x34>)
     80c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0xFFFFFF;
     80e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
     810:	2207      	movs	r2, #7
     812:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     814:	4b05      	ldr	r3, [pc, #20]	; (82c <systick_init+0x38>)
     816:	2280      	movs	r2, #128	; 0x80
     818:	0612      	lsls	r2, r2, #24
     81a:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(SysTick_IRQn);
}
     81c:	bd10      	pop	{r4, pc}
     81e:	46c0      	nop			; (mov r8, r8)
     820:	200000a8 	.word	0x200000a8
     824:	e000e010 	.word	0xe000e010
     828:	00ffffff 	.word	0x00ffffff
     82c:	e000e100 	.word	0xe000e100

00000830 <systick_cycles>:

uint64_t systick_cycles() {
	return _cycles + (0xFFFFFF - SysTick->VAL);
     830:	4b05      	ldr	r3, [pc, #20]	; (848 <systick_cycles+0x18>)
     832:	689b      	ldr	r3, [r3, #8]
     834:	4a05      	ldr	r2, [pc, #20]	; (84c <systick_cycles+0x1c>)
     836:	1ad0      	subs	r0, r2, r3
     838:	2100      	movs	r1, #0
     83a:	4b05      	ldr	r3, [pc, #20]	; (850 <systick_cycles+0x20>)
     83c:	681a      	ldr	r2, [r3, #0]
     83e:	685b      	ldr	r3, [r3, #4]
     840:	1880      	adds	r0, r0, r2
     842:	4159      	adcs	r1, r3
}
     844:	4770      	bx	lr
     846:	46c0      	nop			; (mov r8, r8)
     848:	e000e010 	.word	0xe000e010
     84c:	00ffffff 	.word	0x00ffffff
     850:	200000a8 	.word	0x200000a8

00000854 <millis>:
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000000) + 0.99999999 );
	ticks >>= 35;
	return (uint32_t)ticks;
}

uint32_t millis() {
     854:	b510      	push	{r4, lr}
	// https://en.wikipedia.org/wiki/Division_algorithm#Division_by_a_constant
	uint64_t ticks = systick_cycles();
     856:	f7ff ffeb 	bl	830 <systick_cycles>
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000) + 0.99999999 );
     85a:	4a03      	ldr	r2, [pc, #12]	; (868 <millis+0x14>)
     85c:	2300      	movs	r3, #0
     85e:	f000 fb17 	bl	e90 <__aeabi_lmul>
	ticks >>= 35;
     862:	08c8      	lsrs	r0, r1, #3
	return (uint32_t)ticks;
}
     864:	bd10      	pop	{r4, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	000aec34 	.word	0x000aec34

0000086c <SysTick_Handler>:

void SysTick_Handler() {
     86c:	b530      	push	{r4, r5, lr}
	_cycles += 0x1000000;
     86e:	4905      	ldr	r1, [pc, #20]	; (884 <SysTick_Handler+0x18>)
     870:	680a      	ldr	r2, [r1, #0]
     872:	684b      	ldr	r3, [r1, #4]
     874:	2480      	movs	r4, #128	; 0x80
     876:	0464      	lsls	r4, r4, #17
     878:	2500      	movs	r5, #0
     87a:	1912      	adds	r2, r2, r4
     87c:	416b      	adcs	r3, r5
     87e:	600a      	str	r2, [r1, #0]
     880:	604b      	str	r3, [r1, #4]
     882:	bd30      	pop	{r4, r5, pc}
     884:	200000a8 	.word	0x200000a8

00000888 <_Z41__static_initialization_and_destruction_0ii>:
    g_uart0.sercom_handler();
}

void SERCOM1_Handler() {
    g_uart1.sercom_handler();
     888:	b570      	push	{r4, r5, r6, lr}
     88a:	2801      	cmp	r0, #1
     88c:	d000      	beq.n	890 <_Z41__static_initialization_and_destruction_0ii+0x8>
     88e:	bd70      	pop	{r4, r5, r6, pc}
     890:	4b0c      	ldr	r3, [pc, #48]	; (8c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     892:	4299      	cmp	r1, r3
     894:	d1fb      	bne.n	88e <_Z41__static_initialization_and_destruction_0ii+0x6>
    volatile bool m_rxfull = false;

    bool m_used = false;

public:
    uart_t(Sercom* sercom) { m_sercom = sercom; }
     896:	4a0c      	ldr	r2, [pc, #48]	; (8c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     898:	2581      	movs	r5, #129	; 0x81
     89a:	00ad      	lsls	r5, r5, #2
     89c:	2300      	movs	r3, #0
     89e:	5353      	strh	r3, [r2, r5]
     8a0:	4c0a      	ldr	r4, [pc, #40]	; (8cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     8a2:	5313      	strh	r3, [r2, r4]
     8a4:	2082      	movs	r0, #130	; 0x82
     8a6:	0080      	lsls	r0, r0, #2
     8a8:	5413      	strb	r3, [r2, r0]
     8aa:	4909      	ldr	r1, [pc, #36]	; (8d0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     8ac:	5453      	strb	r3, [r2, r1]
     8ae:	4e09      	ldr	r6, [pc, #36]	; (8d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     8b0:	6016      	str	r6, [r2, #0]
     8b2:	4a09      	ldr	r2, [pc, #36]	; (8d8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     8b4:	5353      	strh	r3, [r2, r5]
     8b6:	5313      	strh	r3, [r2, r4]
     8b8:	5413      	strb	r3, [r2, r0]
     8ba:	5453      	strb	r3, [r2, r1]
     8bc:	4b07      	ldr	r3, [pc, #28]	; (8dc <_Z41__static_initialization_and_destruction_0ii+0x54>)
     8be:	6013      	str	r3, [r2, #0]
     8c0:	e7e5      	b.n	88e <_Z41__static_initialization_and_destruction_0ii+0x6>
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	0000ffff 	.word	0x0000ffff
     8c8:	200000b0 	.word	0x200000b0
     8cc:	00000206 	.word	0x00000206
     8d0:	00000209 	.word	0x00000209
     8d4:	42000800 	.word	0x42000800
     8d8:	200002bc 	.word	0x200002bc
     8dc:	42000c00 	.word	0x42000c00

000008e0 <_ZN6uart_t4initERK13uart_pincfg_tt>:
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
     8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8e2:	46ce      	mov	lr, r9
     8e4:	4647      	mov	r7, r8
     8e6:	b580      	push	{r7, lr}
     8e8:	4691      	mov	r9, r2
    if(m_sercom == SERCOM1) {
     8ea:	4b6c      	ldr	r3, [pc, #432]	; (a9c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
     8ec:	6804      	ldr	r4, [r0, #0]
     8ee:	429c      	cmp	r4, r3
     8f0:	d100      	bne.n	8f4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x14>
     8f2:	e09d      	b.n	a30 <_ZN6uart_t4initERK13uart_pincfg_tt+0x150>
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
     8f4:	4c6a      	ldr	r4, [pc, #424]	; (aa0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
     8f6:	6a23      	ldr	r3, [r4, #32]
     8f8:	2504      	movs	r5, #4
     8fa:	432b      	orrs	r3, r5
     8fc:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
     8fe:	4b69      	ldr	r3, [pc, #420]	; (aa4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
     900:	4c69      	ldr	r4, [pc, #420]	; (aa8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c8>)
     902:	805c      	strh	r4, [r3, #2]
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
     904:	7c8b      	ldrb	r3, [r1, #18]
     906:	2b00      	cmp	r3, #0
     908:	d100      	bne.n	90c <_ZN6uart_t4initERK13uart_pincfg_tt+0x2c>
     90a:	e09a      	b.n	a42 <_ZN6uart_t4initERK13uart_pincfg_tt+0x162>
     90c:	2603      	movs	r6, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
     90e:	680c      	ldr	r4, [r1, #0]
     910:	684d      	ldr	r5, [r1, #4]
        if(pin & 1)
     912:	07eb      	lsls	r3, r5, #31
     914:	d400      	bmi.n	918 <_ZN6uart_t4initERK13uart_pincfg_tt+0x38>
     916:	e096      	b.n	a46 <_ZN6uart_t4initERK13uart_pincfg_tt+0x166>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
     918:	0feb      	lsrs	r3, r5, #31
     91a:	195b      	adds	r3, r3, r5
     91c:	105b      	asrs	r3, r3, #1
     91e:	469c      	mov	ip, r3
     920:	270f      	movs	r7, #15
     922:	403e      	ands	r6, r7
     924:	01e3      	lsls	r3, r4, #7
     926:	4a61      	ldr	r2, [pc, #388]	; (aac <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     928:	4690      	mov	r8, r2
     92a:	4443      	add	r3, r8
     92c:	4463      	add	r3, ip
     92e:	3330      	adds	r3, #48	; 0x30
     930:	781a      	ldrb	r2, [r3, #0]
     932:	0136      	lsls	r6, r6, #4
     934:	4017      	ands	r7, r2
     936:	4337      	orrs	r7, r6
     938:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
     93a:	01e3      	lsls	r3, r4, #7
     93c:	4c5b      	ldr	r4, [pc, #364]	; (aac <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     93e:	46a4      	mov	ip, r4
     940:	4463      	add	r3, ip
     942:	195b      	adds	r3, r3, r5
     944:	3340      	adds	r3, #64	; 0x40
     946:	781c      	ldrb	r4, [r3, #0]
     948:	2501      	movs	r5, #1
     94a:	432c      	orrs	r4, r5
     94c:	701c      	strb	r4, [r3, #0]
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
     94e:	7ccb      	ldrb	r3, [r1, #19]
     950:	2b00      	cmp	r3, #0
     952:	d100      	bne.n	956 <_ZN6uart_t4initERK13uart_pincfg_tt+0x76>
     954:	e086      	b.n	a64 <_ZN6uart_t4initERK13uart_pincfg_tt+0x184>
     956:	2603      	movs	r6, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
     958:	688c      	ldr	r4, [r1, #8]
     95a:	68cd      	ldr	r5, [r1, #12]
        if(pin & 1)
     95c:	07eb      	lsls	r3, r5, #31
     95e:	d400      	bmi.n	962 <_ZN6uart_t4initERK13uart_pincfg_tt+0x82>
     960:	e082      	b.n	a68 <_ZN6uart_t4initERK13uart_pincfg_tt+0x188>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
     962:	0feb      	lsrs	r3, r5, #31
     964:	195b      	adds	r3, r3, r5
     966:	105b      	asrs	r3, r3, #1
     968:	469c      	mov	ip, r3
     96a:	270f      	movs	r7, #15
     96c:	403e      	ands	r6, r7
     96e:	01e3      	lsls	r3, r4, #7
     970:	4a4e      	ldr	r2, [pc, #312]	; (aac <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     972:	4690      	mov	r8, r2
     974:	4443      	add	r3, r8
     976:	4463      	add	r3, ip
     978:	3330      	adds	r3, #48	; 0x30
     97a:	781a      	ldrb	r2, [r3, #0]
     97c:	0136      	lsls	r6, r6, #4
     97e:	4017      	ands	r7, r2
     980:	4337      	orrs	r7, r6
     982:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
     984:	01e3      	lsls	r3, r4, #7
     986:	4c49      	ldr	r4, [pc, #292]	; (aac <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     988:	46a4      	mov	ip, r4
     98a:	4463      	add	r3, ip
     98c:	195b      	adds	r3, r3, r5
     98e:	3340      	adds	r3, #64	; 0x40
     990:	781c      	ldrb	r4, [r3, #0]
     992:	2501      	movs	r5, #1
     994:	432c      	orrs	r4, r5
     996:	701c      	strb	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.ENABLE = 0;
     998:	6804      	ldr	r4, [r0, #0]
     99a:	6823      	ldr	r3, [r4, #0]
     99c:	2502      	movs	r5, #2
     99e:	43ab      	bics	r3, r5
     9a0:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.SWRST = 1;
     9a2:	6804      	ldr	r4, [r0, #0]
     9a4:	6823      	ldr	r3, [r4, #0]
     9a6:	3d01      	subs	r5, #1
     9a8:	432b      	orrs	r3, r5
     9aa:	6023      	str	r3, [r4, #0]
    while(m_sercom->USART.CTRLA.bit.SWRST);
     9ac:	6803      	ldr	r3, [r0, #0]
     9ae:	681c      	ldr	r4, [r3, #0]
     9b0:	07e4      	lsls	r4, r4, #31
     9b2:	d4fb      	bmi.n	9ac <_ZN6uart_t4initERK13uart_pincfg_tt+0xcc>
    m_sercom->USART.CTRLA.bit.MODE = SERCOM_USART_CTRLA_MODE_USART_INT_CLK_Val;
     9b4:	681c      	ldr	r4, [r3, #0]
     9b6:	251c      	movs	r5, #28
     9b8:	43ac      	bics	r4, r5
     9ba:	3d18      	subs	r5, #24
     9bc:	432c      	orrs	r4, r5
     9be:	601c      	str	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.DORD = 1;
     9c0:	6804      	ldr	r4, [r0, #0]
     9c2:	6825      	ldr	r5, [r4, #0]
     9c4:	2380      	movs	r3, #128	; 0x80
     9c6:	05db      	lsls	r3, r3, #23
     9c8:	432b      	orrs	r3, r5
     9ca:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.TXPO = pincfg.tx_pad;
     9cc:	6806      	ldr	r6, [r0, #0]
     9ce:	7c0d      	ldrb	r5, [r1, #16]
     9d0:	2303      	movs	r3, #3
     9d2:	401d      	ands	r5, r3
     9d4:	6834      	ldr	r4, [r6, #0]
     9d6:	042d      	lsls	r5, r5, #16
     9d8:	4f35      	ldr	r7, [pc, #212]	; (ab0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d0>)
     9da:	403c      	ands	r4, r7
     9dc:	432c      	orrs	r4, r5
     9de:	6034      	str	r4, [r6, #0]
    m_sercom->USART.CTRLA.bit.RXPO = pincfg.rx_pad;
     9e0:	6804      	ldr	r4, [r0, #0]
     9e2:	7c4d      	ldrb	r5, [r1, #17]
     9e4:	6821      	ldr	r1, [r4, #0]
     9e6:	402b      	ands	r3, r5
     9e8:	051b      	lsls	r3, r3, #20
     9ea:	4d32      	ldr	r5, [pc, #200]	; (ab4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d4>)
     9ec:	4029      	ands	r1, r5
     9ee:	430b      	orrs	r3, r1
     9f0:	6023      	str	r3, [r4, #0]
    m_sercom->USART.BAUD.reg = speed;
     9f2:	6803      	ldr	r3, [r0, #0]
     9f4:	464a      	mov	r2, r9
     9f6:	819a      	strh	r2, [r3, #12]
    m_sercom->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
     9f8:	6803      	ldr	r3, [r0, #0]
     9fa:	22c0      	movs	r2, #192	; 0xc0
     9fc:	0292      	lsls	r2, r2, #10
     9fe:	605a      	str	r2, [r3, #4]
    m_sercom->USART.INTENSET.bit.RXC = 1;
     a00:	6802      	ldr	r2, [r0, #0]
     a02:	7d93      	ldrb	r3, [r2, #22]
     a04:	2104      	movs	r1, #4
     a06:	430b      	orrs	r3, r1
     a08:	7593      	strb	r3, [r2, #22]
    if(m_sercom == SERCOM0)
     a0a:	6803      	ldr	r3, [r0, #0]
     a0c:	4a2a      	ldr	r2, [pc, #168]	; (ab8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d8>)
     a0e:	4293      	cmp	r3, r2
     a10:	d039      	beq.n	a86 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1a6>
    else if(m_sercom == SERCOM1)
     a12:	4a22      	ldr	r2, [pc, #136]	; (a9c <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
     a14:	4293      	cmp	r3, r2
     a16:	d03b      	beq.n	a90 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1b0>
    m_sercom->USART.CTRLA.bit.ENABLE = 1;
     a18:	6802      	ldr	r2, [r0, #0]
     a1a:	6813      	ldr	r3, [r2, #0]
     a1c:	2102      	movs	r1, #2
     a1e:	430b      	orrs	r3, r1
     a20:	6013      	str	r3, [r2, #0]
    m_used = true;
     a22:	4b26      	ldr	r3, [pc, #152]	; (abc <_ZN6uart_t4initERK13uart_pincfg_tt+0x1dc>)
     a24:	2201      	movs	r2, #1
     a26:	54c2      	strb	r2, [r0, r3]
}
     a28:	bc0c      	pop	{r2, r3}
     a2a:	4690      	mov	r8, r2
     a2c:	4699      	mov	r9, r3
     a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
     a30:	4c1b      	ldr	r4, [pc, #108]	; (aa0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
     a32:	6a23      	ldr	r3, [r4, #32]
     a34:	2508      	movs	r5, #8
     a36:	432b      	orrs	r3, r5
     a38:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) |
     a3a:	4b1a      	ldr	r3, [pc, #104]	; (aa4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
     a3c:	4c20      	ldr	r4, [pc, #128]	; (ac0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e0>)
     a3e:	805c      	strh	r4, [r3, #2]
     a40:	e760      	b.n	904 <_ZN6uart_t4initERK13uart_pincfg_tt+0x24>
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
     a42:	2602      	movs	r6, #2
     a44:	e763      	b.n	90e <_ZN6uart_t4initERK13uart_pincfg_tt+0x2e>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
     a46:	0feb      	lsrs	r3, r5, #31
     a48:	195b      	adds	r3, r3, r5
     a4a:	105f      	asrs	r7, r3, #1
     a4c:	01e3      	lsls	r3, r4, #7
     a4e:	4a17      	ldr	r2, [pc, #92]	; (aac <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     a50:	4694      	mov	ip, r2
     a52:	4463      	add	r3, ip
     a54:	19db      	adds	r3, r3, r7
     a56:	3330      	adds	r3, #48	; 0x30
     a58:	781f      	ldrb	r7, [r3, #0]
     a5a:	220f      	movs	r2, #15
     a5c:	4397      	bics	r7, r2
     a5e:	433e      	orrs	r6, r7
     a60:	701e      	strb	r6, [r3, #0]
     a62:	e76a      	b.n	93a <_ZN6uart_t4initERK13uart_pincfg_tt+0x5a>
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
     a64:	2602      	movs	r6, #2
     a66:	e777      	b.n	958 <_ZN6uart_t4initERK13uart_pincfg_tt+0x78>
     a68:	0feb      	lsrs	r3, r5, #31
     a6a:	195b      	adds	r3, r3, r5
     a6c:	105f      	asrs	r7, r3, #1
     a6e:	01e3      	lsls	r3, r4, #7
     a70:	4a0e      	ldr	r2, [pc, #56]	; (aac <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
     a72:	4694      	mov	ip, r2
     a74:	4463      	add	r3, ip
     a76:	19db      	adds	r3, r3, r7
     a78:	3330      	adds	r3, #48	; 0x30
     a7a:	781f      	ldrb	r7, [r3, #0]
     a7c:	220f      	movs	r2, #15
     a7e:	4397      	bics	r7, r2
     a80:	433e      	orrs	r6, r7
     a82:	701e      	strb	r6, [r3, #0]
     a84:	e77e      	b.n	984 <_ZN6uart_t4initERK13uart_pincfg_tt+0xa4>
     a86:	4b0f      	ldr	r3, [pc, #60]	; (ac4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
     a88:	2280      	movs	r2, #128	; 0x80
     a8a:	0092      	lsls	r2, r2, #2
     a8c:	601a      	str	r2, [r3, #0]
}
     a8e:	e7c3      	b.n	a18 <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     a90:	4b0c      	ldr	r3, [pc, #48]	; (ac4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
     a92:	2280      	movs	r2, #128	; 0x80
     a94:	00d2      	lsls	r2, r2, #3
     a96:	601a      	str	r2, [r3, #0]
}
     a98:	e7be      	b.n	a18 <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	42000c00 	.word	0x42000c00
     aa0:	40000400 	.word	0x40000400
     aa4:	40000c00 	.word	0x40000c00
     aa8:	0000400e 	.word	0x0000400e
     aac:	41004400 	.word	0x41004400
     ab0:	fffcffff 	.word	0xfffcffff
     ab4:	ffcfffff 	.word	0xffcfffff
     ab8:	42000800 	.word	0x42000800
     abc:	00000209 	.word	0x00000209
     ac0:	0000400f 	.word	0x0000400f
     ac4:	e000e100 	.word	0xe000e100

00000ac8 <_ZN6uart_t14sercom_handlerEv>:
    if(!m_used) return;
     ac8:	4b11      	ldr	r3, [pc, #68]	; (b10 <_ZN6uart_t14sercom_handlerEv+0x48>)
     aca:	5cc3      	ldrb	r3, [r0, r3]
     acc:	2b00      	cmp	r3, #0
     ace:	d01b      	beq.n	b08 <_ZN6uart_t14sercom_handlerEv+0x40>
    if(!m_rxfull) {
     ad0:	2382      	movs	r3, #130	; 0x82
     ad2:	009b      	lsls	r3, r3, #2
     ad4:	5cc3      	ldrb	r3, [r0, r3]
     ad6:	2b00      	cmp	r3, #0
     ad8:	d117      	bne.n	b0a <_ZN6uart_t14sercom_handlerEv+0x42>
		m_rxbuf[m_rxhead] = m_sercom->USART.DATA.reg;
     ada:	6803      	ldr	r3, [r0, #0]
     adc:	8d19      	ldrh	r1, [r3, #40]	; 0x28
     ade:	2281      	movs	r2, #129	; 0x81
     ae0:	0092      	lsls	r2, r2, #2
     ae2:	5a83      	ldrh	r3, [r0, r2]
     ae4:	b2c9      	uxtb	r1, r1
     ae6:	18c3      	adds	r3, r0, r3
     ae8:	7119      	strb	r1, [r3, #4]
		m_rxhead = (m_rxhead+1) % sizeof(m_rxbuf);
     aea:	5a83      	ldrh	r3, [r0, r2]
     aec:	3301      	adds	r3, #1
     aee:	05db      	lsls	r3, r3, #23
     af0:	0ddb      	lsrs	r3, r3, #23
     af2:	5283      	strh	r3, [r0, r2]
		m_rxfull = m_rxtail == m_rxhead;
     af4:	4b07      	ldr	r3, [pc, #28]	; (b14 <_ZN6uart_t14sercom_handlerEv+0x4c>)
     af6:	5ac3      	ldrh	r3, [r0, r3]
     af8:	5a82      	ldrh	r2, [r0, r2]
     afa:	1a9b      	subs	r3, r3, r2
     afc:	425a      	negs	r2, r3
     afe:	4153      	adcs	r3, r2
     b00:	b2db      	uxtb	r3, r3
     b02:	2282      	movs	r2, #130	; 0x82
     b04:	0092      	lsls	r2, r2, #2
     b06:	5483      	strb	r3, [r0, r2]
}
     b08:	4770      	bx	lr
		(void)m_sercom->USART.DATA.reg; // Clear RX flag
     b0a:	6803      	ldr	r3, [r0, #0]
     b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     b0e:	e7fb      	b.n	b08 <_ZN6uart_t14sercom_handlerEv+0x40>
     b10:	00000209 	.word	0x00000209
     b14:	00000206 	.word	0x00000206

00000b18 <_ZN6uart_t5writeEc>:
    if(!m_used) return;
     b18:	4b05      	ldr	r3, [pc, #20]	; (b30 <_ZN6uart_t5writeEc+0x18>)
     b1a:	5cc3      	ldrb	r3, [r0, r3]
     b1c:	2b00      	cmp	r3, #0
     b1e:	d006      	beq.n	b2e <_ZN6uart_t5writeEc+0x16>
    m_sercom->USART.DATA.reg = c;
     b20:	b289      	uxth	r1, r1
     b22:	6803      	ldr	r3, [r0, #0]
     b24:	8519      	strh	r1, [r3, #40]	; 0x28
	while(!m_sercom->USART.INTFLAG.bit.DRE);
     b26:	6803      	ldr	r3, [r0, #0]
     b28:	7e1b      	ldrb	r3, [r3, #24]
     b2a:	07db      	lsls	r3, r3, #31
     b2c:	d5fb      	bpl.n	b26 <_ZN6uart_t5writeEc+0xe>
}
     b2e:	4770      	bx	lr
     b30:	00000209 	.word	0x00000209

00000b34 <_ZN6uart_t5printEPKci>:
void uart_t::print(const char* str, int len) {
     b34:	b570      	push	{r4, r5, r6, lr}
     b36:	0006      	movs	r6, r0
     b38:	0014      	movs	r4, r2
    if(!m_used) return;
     b3a:	4b09      	ldr	r3, [pc, #36]	; (b60 <_ZN6uart_t5printEPKci+0x2c>)
     b3c:	5cc3      	ldrb	r3, [r0, r3]
     b3e:	2b00      	cmp	r3, #0
     b40:	d10a      	bne.n	b58 <_ZN6uart_t5printEPKci+0x24>
}
     b42:	bd70      	pop	{r4, r5, r6, pc}
    while((len == -1) ? *str : len--) write(*str++);
     b44:	0023      	movs	r3, r4
     b46:	3c01      	subs	r4, #1
     b48:	2b00      	cmp	r3, #0
     b4a:	d0fa      	beq.n	b42 <_ZN6uart_t5printEPKci+0xe>
     b4c:	1c4d      	adds	r5, r1, #1
     b4e:	7809      	ldrb	r1, [r1, #0]
     b50:	0030      	movs	r0, r6
     b52:	f7ff ffe1 	bl	b18 <_ZN6uart_t5writeEc>
     b56:	0029      	movs	r1, r5
     b58:	1c63      	adds	r3, r4, #1
     b5a:	d1f3      	bne.n	b44 <_ZN6uart_t5printEPKci+0x10>
     b5c:	780b      	ldrb	r3, [r1, #0]
     b5e:	e7f3      	b.n	b48 <_ZN6uart_t5printEPKci+0x14>
     b60:	00000209 	.word	0x00000209

00000b64 <_ZN6uart_t7rxemptyEv>:
	return (!m_rxfull && (m_rxhead == m_rxtail));
     b64:	2382      	movs	r3, #130	; 0x82
     b66:	009b      	lsls	r3, r3, #2
     b68:	5cc3      	ldrb	r3, [r0, r3]
     b6a:	2b00      	cmp	r3, #0
     b6c:	d10a      	bne.n	b84 <_ZN6uart_t7rxemptyEv+0x20>
     b6e:	2381      	movs	r3, #129	; 0x81
     b70:	009b      	lsls	r3, r3, #2
     b72:	5ac2      	ldrh	r2, [r0, r3]
     b74:	b292      	uxth	r2, r2
     b76:	4b05      	ldr	r3, [pc, #20]	; (b8c <_ZN6uart_t7rxemptyEv+0x28>)
     b78:	5ac3      	ldrh	r3, [r0, r3]
     b7a:	b29b      	uxth	r3, r3
     b7c:	429a      	cmp	r2, r3
     b7e:	d003      	beq.n	b88 <_ZN6uart_t7rxemptyEv+0x24>
     b80:	2000      	movs	r0, #0
     b82:	e000      	b.n	b86 <_ZN6uart_t7rxemptyEv+0x22>
     b84:	2000      	movs	r0, #0
}
     b86:	4770      	bx	lr
	return (!m_rxfull && (m_rxhead == m_rxtail));
     b88:	2001      	movs	r0, #1
     b8a:	e7fc      	b.n	b86 <_ZN6uart_t7rxemptyEv+0x22>
     b8c:	00000206 	.word	0x00000206

00000b90 <_ZN6uart_t4getcEv>:
char uart_t::getc() {
     b90:	b510      	push	{r4, lr}
     b92:	0004      	movs	r4, r0
    if(!m_used) return '\0';
     b94:	4b0c      	ldr	r3, [pc, #48]	; (bc8 <_ZN6uart_t4getcEv+0x38>)
     b96:	5cc3      	ldrb	r3, [r0, r3]
     b98:	2b00      	cmp	r3, #0
     b9a:	d013      	beq.n	bc4 <_ZN6uart_t4getcEv+0x34>
	while(rxempty());
     b9c:	0020      	movs	r0, r4
     b9e:	f7ff ffe1 	bl	b64 <_ZN6uart_t7rxemptyEv>
     ba2:	2800      	cmp	r0, #0
     ba4:	d1fa      	bne.n	b9c <_ZN6uart_t4getcEv+0xc>
	uint8_t c = m_rxbuf[m_rxtail];
     ba6:	4a09      	ldr	r2, [pc, #36]	; (bcc <_ZN6uart_t4getcEv+0x3c>)
     ba8:	5aa3      	ldrh	r3, [r4, r2]
     baa:	18e3      	adds	r3, r4, r3
     bac:	7918      	ldrb	r0, [r3, #4]
     bae:	b2c0      	uxtb	r0, r0
	m_rxfull = false;
     bb0:	2382      	movs	r3, #130	; 0x82
     bb2:	009b      	lsls	r3, r3, #2
     bb4:	2100      	movs	r1, #0
     bb6:	54e1      	strb	r1, [r4, r3]
	m_rxtail = (m_rxtail+1) % sizeof(m_rxbuf);
     bb8:	5aa3      	ldrh	r3, [r4, r2]
     bba:	3301      	adds	r3, #1
     bbc:	05db      	lsls	r3, r3, #23
     bbe:	0ddb      	lsrs	r3, r3, #23
     bc0:	52a3      	strh	r3, [r4, r2]
}
     bc2:	bd10      	pop	{r4, pc}
    if(!m_used) return '\0';
     bc4:	2000      	movs	r0, #0
     bc6:	e7fc      	b.n	bc2 <_ZN6uart_t4getcEv+0x32>
     bc8:	00000209 	.word	0x00000209
     bcc:	00000206 	.word	0x00000206

00000bd0 <_ZN6uart_t4peekEi>:
char uart_t::peek(int pos) {
     bd0:	b570      	push	{r4, r5, r6, lr}
     bd2:	0004      	movs	r4, r0
     bd4:	000d      	movs	r5, r1
    if(!m_used) return '\0';
     bd6:	4b1f      	ldr	r3, [pc, #124]	; (c54 <_ZN6uart_t4peekEi+0x84>)
     bd8:	5cc3      	ldrb	r3, [r0, r3]
     bda:	2b00      	cmp	r3, #0
     bdc:	d101      	bne.n	be2 <_ZN6uart_t4peekEi+0x12>
     bde:	2000      	movs	r0, #0
}
     be0:	bd70      	pop	{r4, r5, r6, pc}
    if(rxempty() || pos >= available()) return '\0';
     be2:	f7ff ffbf 	bl	b64 <_ZN6uart_t7rxemptyEv>
     be6:	2800      	cmp	r0, #0
     be8:	d12f      	bne.n	c4a <_ZN6uart_t4peekEi+0x7a>
        m_rxhead = 0;
        m_rxtail = 0;
        m_rxfull = false;
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
     bea:	2381      	movs	r3, #129	; 0x81
     bec:	009b      	lsls	r3, r3, #2
     bee:	5ae2      	ldrh	r2, [r4, r3]
     bf0:	b292      	uxth	r2, r2
     bf2:	4b19      	ldr	r3, [pc, #100]	; (c58 <_ZN6uart_t4peekEi+0x88>)
     bf4:	5ae3      	ldrh	r3, [r4, r3]
     bf6:	b29b      	uxth	r3, r3
     bf8:	429a      	cmp	r2, r3
     bfa:	d313      	bcc.n	c24 <_ZN6uart_t4peekEi+0x54>
            return m_rxhead - m_rxtail;
     bfc:	2381      	movs	r3, #129	; 0x81
     bfe:	009b      	lsls	r3, r3, #2
     c00:	5ae3      	ldrh	r3, [r4, r3]
     c02:	4a15      	ldr	r2, [pc, #84]	; (c58 <_ZN6uart_t4peekEi+0x88>)
     c04:	5aa2      	ldrh	r2, [r4, r2]
     c06:	1a9b      	subs	r3, r3, r2
     c08:	b29b      	uxth	r3, r3
     c0a:	42ab      	cmp	r3, r5
     c0c:	dd1f      	ble.n	c4e <_ZN6uart_t4peekEi+0x7e>
    if(pos == -1)
     c0e:	1c6b      	adds	r3, r5, #1
     c10:	d015      	beq.n	c3e <_ZN6uart_t4peekEi+0x6e>
        return m_rxbuf[(m_rxtail + pos) % sizeof(m_rxbuf)];
     c12:	4b11      	ldr	r3, [pc, #68]	; (c58 <_ZN6uart_t4peekEi+0x88>)
     c14:	5ae0      	ldrh	r0, [r4, r3]
     c16:	1940      	adds	r0, r0, r5
     c18:	05c0      	lsls	r0, r0, #23
     c1a:	0dc0      	lsrs	r0, r0, #23
     c1c:	1824      	adds	r4, r4, r0
     c1e:	7920      	ldrb	r0, [r4, #4]
     c20:	b2c0      	uxtb	r0, r0
     c22:	e7dd      	b.n	be0 <_ZN6uart_t4peekEi+0x10>
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     c24:	2381      	movs	r3, #129	; 0x81
     c26:	009b      	lsls	r3, r3, #2
     c28:	5ae3      	ldrh	r3, [r4, r3]
     c2a:	4a0b      	ldr	r2, [pc, #44]	; (c58 <_ZN6uart_t4peekEi+0x88>)
     c2c:	5aa2      	ldrh	r2, [r4, r2]
     c2e:	1a9b      	subs	r3, r3, r2
     c30:	b29b      	uxth	r3, r3
     c32:	2280      	movs	r2, #128	; 0x80
     c34:	0092      	lsls	r2, r2, #2
     c36:	4694      	mov	ip, r2
     c38:	4463      	add	r3, ip
     c3a:	b29b      	uxth	r3, r3
     c3c:	e7e5      	b.n	c0a <_ZN6uart_t4peekEi+0x3a>
        return m_rxbuf[m_rxtail];
     c3e:	4b06      	ldr	r3, [pc, #24]	; (c58 <_ZN6uart_t4peekEi+0x88>)
     c40:	5ae0      	ldrh	r0, [r4, r3]
     c42:	1824      	adds	r4, r4, r0
     c44:	7920      	ldrb	r0, [r4, #4]
     c46:	b2c0      	uxtb	r0, r0
     c48:	e7ca      	b.n	be0 <_ZN6uart_t4peekEi+0x10>
    if(rxempty() || pos >= available()) return '\0';
     c4a:	2000      	movs	r0, #0
     c4c:	e7c8      	b.n	be0 <_ZN6uart_t4peekEi+0x10>
     c4e:	2000      	movs	r0, #0
     c50:	e7c6      	b.n	be0 <_ZN6uart_t4peekEi+0x10>
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	00000209 	.word	0x00000209
     c58:	00000206 	.word	0x00000206

00000c5c <_ZN6uart_t4findEPKc>:
int uart_t::find(const char* str) {
     c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c5e:	46c6      	mov	lr, r8
     c60:	b500      	push	{lr}
     c62:	0007      	movs	r7, r0
     c64:	000d      	movs	r5, r1
    if(!m_used) return -1;
     c66:	4b21      	ldr	r3, [pc, #132]	; (cec <_ZN6uart_t4findEPKc+0x90>)
     c68:	5cc3      	ldrb	r3, [r0, r3]
     c6a:	2b00      	cmp	r3, #0
     c6c:	d035      	beq.n	cda <_ZN6uart_t4findEPKc+0x7e>
    for(int i = 0; i < available(); i++) {
     c6e:	2300      	movs	r3, #0
     c70:	4698      	mov	r8, r3
        if(m_rxhead >= m_rxtail)
     c72:	2381      	movs	r3, #129	; 0x81
     c74:	009b      	lsls	r3, r3, #2
     c76:	5afa      	ldrh	r2, [r7, r3]
     c78:	b292      	uxth	r2, r2
     c7a:	4b1d      	ldr	r3, [pc, #116]	; (cf0 <_ZN6uart_t4findEPKc+0x94>)
     c7c:	5afb      	ldrh	r3, [r7, r3]
     c7e:	b29b      	uxth	r3, r3
     c80:	429a      	cmp	r2, r3
     c82:	d319      	bcc.n	cb8 <_ZN6uart_t4findEPKc+0x5c>
            return m_rxhead - m_rxtail;
     c84:	2381      	movs	r3, #129	; 0x81
     c86:	009b      	lsls	r3, r3, #2
     c88:	5afb      	ldrh	r3, [r7, r3]
     c8a:	4a19      	ldr	r2, [pc, #100]	; (cf0 <_ZN6uart_t4findEPKc+0x94>)
     c8c:	5aba      	ldrh	r2, [r7, r2]
     c8e:	1a9b      	subs	r3, r3, r2
     c90:	b29b      	uxth	r3, r3
     c92:	4543      	cmp	r3, r8
     c94:	dd25      	ble.n	ce2 <_ZN6uart_t4findEPKc+0x86>
        int search_idx = 0;
     c96:	2400      	movs	r4, #0
        while(str[search_idx] == peek(i + search_idx))
     c98:	5d2e      	ldrb	r6, [r5, r4]
     c9a:	4643      	mov	r3, r8
     c9c:	1919      	adds	r1, r3, r4
     c9e:	0038      	movs	r0, r7
     ca0:	f7ff ff96 	bl	bd0 <_ZN6uart_t4peekEi>
     ca4:	4286      	cmp	r6, r0
     ca6:	d114      	bne.n	cd2 <_ZN6uart_t4findEPKc+0x76>
            if(!str[++search_idx]) return i;
     ca8:	3401      	adds	r4, #1
     caa:	5d2b      	ldrb	r3, [r5, r4]
     cac:	2b00      	cmp	r3, #0
     cae:	d1f3      	bne.n	c98 <_ZN6uart_t4findEPKc+0x3c>
}
     cb0:	4640      	mov	r0, r8
     cb2:	bc04      	pop	{r2}
     cb4:	4690      	mov	r8, r2
     cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     cb8:	2381      	movs	r3, #129	; 0x81
     cba:	009b      	lsls	r3, r3, #2
     cbc:	5afb      	ldrh	r3, [r7, r3]
     cbe:	4a0c      	ldr	r2, [pc, #48]	; (cf0 <_ZN6uart_t4findEPKc+0x94>)
     cc0:	5aba      	ldrh	r2, [r7, r2]
     cc2:	1a9b      	subs	r3, r3, r2
     cc4:	b29b      	uxth	r3, r3
     cc6:	2280      	movs	r2, #128	; 0x80
     cc8:	0092      	lsls	r2, r2, #2
     cca:	4694      	mov	ip, r2
     ccc:	4463      	add	r3, ip
     cce:	b29b      	uxth	r3, r3
     cd0:	e7df      	b.n	c92 <_ZN6uart_t4findEPKc+0x36>
    for(int i = 0; i < available(); i++) {
     cd2:	2301      	movs	r3, #1
     cd4:	469c      	mov	ip, r3
     cd6:	44e0      	add	r8, ip
     cd8:	e7cb      	b.n	c72 <_ZN6uart_t4findEPKc+0x16>
    if(!m_used) return -1;
     cda:	2301      	movs	r3, #1
     cdc:	425b      	negs	r3, r3
     cde:	4698      	mov	r8, r3
     ce0:	e7e6      	b.n	cb0 <_ZN6uart_t4findEPKc+0x54>
    return -1;
     ce2:	2301      	movs	r3, #1
     ce4:	425b      	negs	r3, r3
     ce6:	4698      	mov	r8, r3
     ce8:	e7e2      	b.n	cb0 <_ZN6uart_t4findEPKc+0x54>
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	00000209 	.word	0x00000209
     cf0:	00000206 	.word	0x00000206

00000cf4 <_ZN6uart_t4readEv>:
char* uart_t::read() {
     cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cf6:	46c6      	mov	lr, r8
     cf8:	b500      	push	{lr}
     cfa:	0005      	movs	r5, r0
    if(!m_used) return NULL;
     cfc:	4b1f      	ldr	r3, [pc, #124]	; (d7c <_ZN6uart_t4readEv+0x88>)
     cfe:	5cc3      	ldrb	r3, [r0, r3]
     d00:	2b00      	cmp	r3, #0
     d02:	d036      	beq.n	d72 <_ZN6uart_t4readEv+0x7e>
        if(m_rxhead >= m_rxtail)
     d04:	2381      	movs	r3, #129	; 0x81
     d06:	009b      	lsls	r3, r3, #2
     d08:	5ac2      	ldrh	r2, [r0, r3]
     d0a:	b292      	uxth	r2, r2
     d0c:	4b1c      	ldr	r3, [pc, #112]	; (d80 <_ZN6uart_t4readEv+0x8c>)
     d0e:	5ac3      	ldrh	r3, [r0, r3]
     d10:	b29b      	uxth	r3, r3
     d12:	429a      	cmp	r2, r3
     d14:	d310      	bcc.n	d38 <_ZN6uart_t4readEv+0x44>
            return m_rxhead - m_rxtail;
     d16:	2381      	movs	r3, #129	; 0x81
     d18:	009b      	lsls	r3, r3, #2
     d1a:	5ac0      	ldrh	r0, [r0, r3]
     d1c:	4b18      	ldr	r3, [pc, #96]	; (d80 <_ZN6uart_t4readEv+0x8c>)
     d1e:	5aeb      	ldrh	r3, [r5, r3]
     d20:	1ac0      	subs	r0, r0, r3
     d22:	b280      	uxth	r0, r0
    size_t avail = available();
     d24:	4680      	mov	r8, r0
    if(!avail) return NULL;
     d26:	2800      	cmp	r0, #0
     d28:	d025      	beq.n	d76 <_ZN6uart_t4readEv+0x82>
    char* data = (char*)malloc(avail + 1);
     d2a:	3001      	adds	r0, #1
     d2c:	f000 f910 	bl	f50 <malloc>
     d30:	1e07      	subs	r7, r0, #0
    if(!data) return NULL;
     d32:	d01a      	beq.n	d6a <_ZN6uart_t4readEv+0x76>
    for(size_t i = 0; i < avail; i++)
     d34:	2400      	movs	r4, #0
     d36:	e012      	b.n	d5e <_ZN6uart_t4readEv+0x6a>
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     d38:	2381      	movs	r3, #129	; 0x81
     d3a:	009b      	lsls	r3, r3, #2
     d3c:	5ac0      	ldrh	r0, [r0, r3]
     d3e:	4b10      	ldr	r3, [pc, #64]	; (d80 <_ZN6uart_t4readEv+0x8c>)
     d40:	5aeb      	ldrh	r3, [r5, r3]
     d42:	1ac0      	subs	r0, r0, r3
     d44:	b280      	uxth	r0, r0
     d46:	2380      	movs	r3, #128	; 0x80
     d48:	009b      	lsls	r3, r3, #2
     d4a:	469c      	mov	ip, r3
     d4c:	4460      	add	r0, ip
     d4e:	b280      	uxth	r0, r0
     d50:	e7e8      	b.n	d24 <_ZN6uart_t4readEv+0x30>
        data[i] = getc();
     d52:	193e      	adds	r6, r7, r4
     d54:	0028      	movs	r0, r5
     d56:	f7ff ff1b 	bl	b90 <_ZN6uart_t4getcEv>
     d5a:	7030      	strb	r0, [r6, #0]
    for(size_t i = 0; i < avail; i++)
     d5c:	3401      	adds	r4, #1
     d5e:	4544      	cmp	r4, r8
     d60:	d3f7      	bcc.n	d52 <_ZN6uart_t4readEv+0x5e>
    data[avail] = '\0';
     d62:	4643      	mov	r3, r8
     d64:	18fb      	adds	r3, r7, r3
     d66:	2200      	movs	r2, #0
     d68:	701a      	strb	r2, [r3, #0]
}
     d6a:	0038      	movs	r0, r7
     d6c:	bc04      	pop	{r2}
     d6e:	4690      	mov	r8, r2
     d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!m_used) return NULL;
     d72:	2700      	movs	r7, #0
     d74:	e7f9      	b.n	d6a <_ZN6uart_t4readEv+0x76>
    if(!avail) return NULL;
     d76:	2700      	movs	r7, #0
     d78:	e7f7      	b.n	d6a <_ZN6uart_t4readEv+0x76>
     d7a:	46c0      	nop			; (mov r8, r8)
     d7c:	00000209 	.word	0x00000209
     d80:	00000206 	.word	0x00000206

00000d84 <SERCOM0_Handler>:
void SERCOM0_Handler() {
     d84:	b510      	push	{r4, lr}
    g_uart0.sercom_handler();
     d86:	4802      	ldr	r0, [pc, #8]	; (d90 <SERCOM0_Handler+0xc>)
     d88:	f7ff fe9e 	bl	ac8 <_ZN6uart_t14sercom_handlerEv>
}
     d8c:	bd10      	pop	{r4, pc}
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	200000b0 	.word	0x200000b0

00000d94 <SERCOM1_Handler>:
void SERCOM1_Handler() {
     d94:	b510      	push	{r4, lr}
    g_uart1.sercom_handler();
     d96:	4802      	ldr	r0, [pc, #8]	; (da0 <SERCOM1_Handler+0xc>)
     d98:	f7ff fe96 	bl	ac8 <_ZN6uart_t14sercom_handlerEv>
     d9c:	bd10      	pop	{r4, pc}
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	200002bc 	.word	0x200002bc

00000da4 <_GLOBAL__sub_I_g_uart0>:
     da4:	b510      	push	{r4, lr}
     da6:	4902      	ldr	r1, [pc, #8]	; (db0 <_GLOBAL__sub_I_g_uart0+0xc>)
     da8:	2001      	movs	r0, #1
     daa:	f7ff fd6d 	bl	888 <_Z41__static_initialization_and_destruction_0ii>
     dae:	bd10      	pop	{r4, pc}
     db0:	0000ffff 	.word	0x0000ffff

00000db4 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
     db4:	e7fe      	b.n	db4 <Dummy_Handler>
     db6:	Address 0x00000db6 is out of bounds.


00000db8 <Reset_Handler>:
{
     db8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     dba:	4a1e      	ldr	r2, [pc, #120]	; (e34 <Reset_Handler+0x7c>)
     dbc:	4b1e      	ldr	r3, [pc, #120]	; (e38 <Reset_Handler+0x80>)
     dbe:	429a      	cmp	r2, r3
     dc0:	d007      	beq.n	dd2 <Reset_Handler+0x1a>
        pDest = &_data;
     dc2:	4b1d      	ldr	r3, [pc, #116]	; (e38 <Reset_Handler+0x80>)
        pSrc = &_etext;
     dc4:	4a1b      	ldr	r2, [pc, #108]	; (e34 <Reset_Handler+0x7c>)
     dc6:	e001      	b.n	dcc <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
     dc8:	ca02      	ldmia	r2!, {r1}
     dca:	c302      	stmia	r3!, {r1}
                for (; pDest < &_edata;) {
     dcc:	491b      	ldr	r1, [pc, #108]	; (e3c <Reset_Handler+0x84>)
     dce:	428b      	cmp	r3, r1
     dd0:	d3fa      	bcc.n	dc8 <Reset_Handler+0x10>
        pSrc = &_etext;
     dd2:	4b1b      	ldr	r3, [pc, #108]	; (e40 <Reset_Handler+0x88>)
     dd4:	e001      	b.n	dda <Reset_Handler+0x22>
                *pDest++ = 0;
     dd6:	2200      	movs	r2, #0
     dd8:	c304      	stmia	r3!, {r2}
        for (pDest = &_bss; pDest < &_ebss;) {
     dda:	4a1a      	ldr	r2, [pc, #104]	; (e44 <Reset_Handler+0x8c>)
     ddc:	4293      	cmp	r3, r2
     dde:	d3fa      	bcc.n	dd6 <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     de0:	4b19      	ldr	r3, [pc, #100]	; (e48 <Reset_Handler+0x90>)
     de2:	227f      	movs	r2, #127	; 0x7f
     de4:	4393      	bics	r3, r2
     de6:	4a19      	ldr	r2, [pc, #100]	; (e4c <Reset_Handler+0x94>)
     de8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     dea:	4a19      	ldr	r2, [pc, #100]	; (e50 <Reset_Handler+0x98>)
     dec:	2390      	movs	r3, #144	; 0x90
     dee:	005b      	lsls	r3, r3, #1
     df0:	2102      	movs	r1, #2
     df2:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     df4:	4b17      	ldr	r3, [pc, #92]	; (e54 <Reset_Handler+0x9c>)
     df6:	7b9a      	ldrb	r2, [r3, #14]
     df8:	312e      	adds	r1, #46	; 0x2e
     dfa:	438a      	bics	r2, r1
     dfc:	2120      	movs	r1, #32
     dfe:	430a      	orrs	r2, r1
     e00:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     e02:	7b9a      	ldrb	r2, [r3, #14]
     e04:	210c      	movs	r1, #12
     e06:	438a      	bics	r2, r1
     e08:	2108      	movs	r1, #8
     e0a:	430a      	orrs	r2, r1
     e0c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     e0e:	7b9a      	ldrb	r2, [r3, #14]
     e10:	2103      	movs	r1, #3
     e12:	438a      	bics	r2, r1
     e14:	2102      	movs	r1, #2
     e16:	430a      	orrs	r2, r1
     e18:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     e1a:	4a0f      	ldr	r2, [pc, #60]	; (e58 <Reset_Handler+0xa0>)
     e1c:	6851      	ldr	r1, [r2, #4]
     e1e:	2380      	movs	r3, #128	; 0x80
     e20:	430b      	orrs	r3, r1
     e22:	6053      	str	r3, [r2, #4]
        systick_init();
     e24:	f7ff fce6 	bl	7f4 <systick_init>
        __libc_init_array();
     e28:	f000 f86e 	bl	f08 <__libc_init_array>
        main();
     e2c:	f7ff fc04 	bl	638 <main>
        while (1);
     e30:	e7fe      	b.n	e30 <Reset_Handler+0x78>
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	00001cfc 	.word	0x00001cfc
     e38:	20000000 	.word	0x20000000
     e3c:	20000074 	.word	0x20000074
     e40:	20000078 	.word	0x20000078
     e44:	200004e4 	.word	0x200004e4
     e48:	00000000 	.word	0x00000000
     e4c:	e000ed00 	.word	0xe000ed00
     e50:	41007000 	.word	0x41007000
     e54:	41004800 	.word	0x41004800
     e58:	41004000 	.word	0x41004000

00000e5c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     e5c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     e5e:	4a06      	ldr	r2, [pc, #24]	; (e78 <_sbrk+0x1c>)
     e60:	6812      	ldr	r2, [r2, #0]
     e62:	2a00      	cmp	r2, #0
     e64:	d004      	beq.n	e70 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     e66:	4a04      	ldr	r2, [pc, #16]	; (e78 <_sbrk+0x1c>)
     e68:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     e6a:	18c3      	adds	r3, r0, r3
     e6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
     e6e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     e70:	4a01      	ldr	r2, [pc, #4]	; (e78 <_sbrk+0x1c>)
     e72:	4902      	ldr	r1, [pc, #8]	; (e7c <_sbrk+0x20>)
     e74:	6011      	str	r1, [r2, #0]
     e76:	e7f6      	b.n	e66 <_sbrk+0xa>
     e78:	200004c8 	.word	0x200004c8
     e7c:	200004e4 	.word	0x200004e4

00000e80 <__aeabi_atexit>:
     e80:	0003      	movs	r3, r0
     e82:	b510      	push	{r4, lr}
     e84:	0008      	movs	r0, r1
     e86:	0019      	movs	r1, r3
     e88:	f000 f830 	bl	eec <__cxa_atexit>
     e8c:	bd10      	pop	{r4, pc}
     e8e:	Address 0x00000e8e is out of bounds.


00000e90 <__aeabi_lmul>:
     e90:	b5f0      	push	{r4, r5, r6, r7, lr}
     e92:	0415      	lsls	r5, r2, #16
     e94:	0c2d      	lsrs	r5, r5, #16
     e96:	000f      	movs	r7, r1
     e98:	0001      	movs	r1, r0
     e9a:	002e      	movs	r6, r5
     e9c:	46c6      	mov	lr, r8
     e9e:	4684      	mov	ip, r0
     ea0:	0400      	lsls	r0, r0, #16
     ea2:	0c14      	lsrs	r4, r2, #16
     ea4:	0c00      	lsrs	r0, r0, #16
     ea6:	0c09      	lsrs	r1, r1, #16
     ea8:	4346      	muls	r6, r0
     eaa:	434d      	muls	r5, r1
     eac:	4360      	muls	r0, r4
     eae:	4361      	muls	r1, r4
     eb0:	1940      	adds	r0, r0, r5
     eb2:	0c34      	lsrs	r4, r6, #16
     eb4:	1824      	adds	r4, r4, r0
     eb6:	b500      	push	{lr}
     eb8:	42a5      	cmp	r5, r4
     eba:	d903      	bls.n	ec4 <__aeabi_lmul+0x34>
     ebc:	2080      	movs	r0, #128	; 0x80
     ebe:	0240      	lsls	r0, r0, #9
     ec0:	4680      	mov	r8, r0
     ec2:	4441      	add	r1, r8
     ec4:	0c25      	lsrs	r5, r4, #16
     ec6:	186d      	adds	r5, r5, r1
     ec8:	4661      	mov	r1, ip
     eca:	4359      	muls	r1, r3
     ecc:	437a      	muls	r2, r7
     ece:	0430      	lsls	r0, r6, #16
     ed0:	1949      	adds	r1, r1, r5
     ed2:	0424      	lsls	r4, r4, #16
     ed4:	0c00      	lsrs	r0, r0, #16
     ed6:	1820      	adds	r0, r4, r0
     ed8:	1889      	adds	r1, r1, r2
     eda:	bc04      	pop	{r2}
     edc:	4690      	mov	r8, r2
     ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ee0 <atoi>:
     ee0:	b510      	push	{r4, lr}
     ee2:	220a      	movs	r2, #10
     ee4:	2100      	movs	r1, #0
     ee6:	f000 f9ef 	bl	12c8 <strtol>
     eea:	bd10      	pop	{r4, pc}

00000eec <__cxa_atexit>:
     eec:	b510      	push	{r4, lr}
     eee:	0004      	movs	r4, r0
     ef0:	4804      	ldr	r0, [pc, #16]	; (f04 <__cxa_atexit+0x18>)
     ef2:	0013      	movs	r3, r2
     ef4:	2800      	cmp	r0, #0
     ef6:	d004      	beq.n	f02 <__cxa_atexit+0x16>
     ef8:	000a      	movs	r2, r1
     efa:	2002      	movs	r0, #2
     efc:	0021      	movs	r1, r4
     efe:	e000      	b.n	f02 <__cxa_atexit+0x16>
     f00:	bf00      	nop
     f02:	bd10      	pop	{r4, pc}
     f04:	00000000 	.word	0x00000000

00000f08 <__libc_init_array>:
     f08:	b570      	push	{r4, r5, r6, lr}
     f0a:	2600      	movs	r6, #0
     f0c:	4d0c      	ldr	r5, [pc, #48]	; (f40 <__libc_init_array+0x38>)
     f0e:	4c0d      	ldr	r4, [pc, #52]	; (f44 <__libc_init_array+0x3c>)
     f10:	1b64      	subs	r4, r4, r5
     f12:	10a4      	asrs	r4, r4, #2
     f14:	42a6      	cmp	r6, r4
     f16:	d109      	bne.n	f2c <__libc_init_array+0x24>
     f18:	2600      	movs	r6, #0
     f1a:	f000 fed3 	bl	1cc4 <_init>
     f1e:	4d0a      	ldr	r5, [pc, #40]	; (f48 <__libc_init_array+0x40>)
     f20:	4c0a      	ldr	r4, [pc, #40]	; (f4c <__libc_init_array+0x44>)
     f22:	1b64      	subs	r4, r4, r5
     f24:	10a4      	asrs	r4, r4, #2
     f26:	42a6      	cmp	r6, r4
     f28:	d105      	bne.n	f36 <__libc_init_array+0x2e>
     f2a:	bd70      	pop	{r4, r5, r6, pc}
     f2c:	00b3      	lsls	r3, r6, #2
     f2e:	58eb      	ldr	r3, [r5, r3]
     f30:	4798      	blx	r3
     f32:	3601      	adds	r6, #1
     f34:	e7ee      	b.n	f14 <__libc_init_array+0xc>
     f36:	00b3      	lsls	r3, r6, #2
     f38:	58eb      	ldr	r3, [r5, r3]
     f3a:	4798      	blx	r3
     f3c:	3601      	adds	r6, #1
     f3e:	e7f2      	b.n	f26 <__libc_init_array+0x1e>
     f40:	00001cd0 	.word	0x00001cd0
     f44:	00001cd0 	.word	0x00001cd0
     f48:	00001cd0 	.word	0x00001cd0
     f4c:	00001cdc 	.word	0x00001cdc

00000f50 <malloc>:
     f50:	b510      	push	{r4, lr}
     f52:	4b03      	ldr	r3, [pc, #12]	; (f60 <malloc+0x10>)
     f54:	0001      	movs	r1, r0
     f56:	6818      	ldr	r0, [r3, #0]
     f58:	f000 f858 	bl	100c <_malloc_r>
     f5c:	bd10      	pop	{r4, pc}
     f5e:	46c0      	nop			; (mov r8, r8)
     f60:	20000010 	.word	0x20000010

00000f64 <free>:
     f64:	b510      	push	{r4, lr}
     f66:	4b03      	ldr	r3, [pc, #12]	; (f74 <free+0x10>)
     f68:	0001      	movs	r1, r0
     f6a:	6818      	ldr	r0, [r3, #0]
     f6c:	f000 f804 	bl	f78 <_free_r>
     f70:	bd10      	pop	{r4, pc}
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	20000010 	.word	0x20000010

00000f78 <_free_r>:
     f78:	b570      	push	{r4, r5, r6, lr}
     f7a:	0005      	movs	r5, r0
     f7c:	2900      	cmp	r1, #0
     f7e:	d010      	beq.n	fa2 <_free_r+0x2a>
     f80:	1f0c      	subs	r4, r1, #4
     f82:	6823      	ldr	r3, [r4, #0]
     f84:	2b00      	cmp	r3, #0
     f86:	da00      	bge.n	f8a <_free_r+0x12>
     f88:	18e4      	adds	r4, r4, r3
     f8a:	0028      	movs	r0, r5
     f8c:	f000 f9a8 	bl	12e0 <__malloc_lock>
     f90:	4a1d      	ldr	r2, [pc, #116]	; (1008 <_free_r+0x90>)
     f92:	6813      	ldr	r3, [r2, #0]
     f94:	2b00      	cmp	r3, #0
     f96:	d105      	bne.n	fa4 <_free_r+0x2c>
     f98:	6063      	str	r3, [r4, #4]
     f9a:	6014      	str	r4, [r2, #0]
     f9c:	0028      	movs	r0, r5
     f9e:	f000 f9a7 	bl	12f0 <__malloc_unlock>
     fa2:	bd70      	pop	{r4, r5, r6, pc}
     fa4:	42a3      	cmp	r3, r4
     fa6:	d908      	bls.n	fba <_free_r+0x42>
     fa8:	6821      	ldr	r1, [r4, #0]
     faa:	1860      	adds	r0, r4, r1
     fac:	4283      	cmp	r3, r0
     fae:	d1f3      	bne.n	f98 <_free_r+0x20>
     fb0:	6818      	ldr	r0, [r3, #0]
     fb2:	685b      	ldr	r3, [r3, #4]
     fb4:	1841      	adds	r1, r0, r1
     fb6:	6021      	str	r1, [r4, #0]
     fb8:	e7ee      	b.n	f98 <_free_r+0x20>
     fba:	001a      	movs	r2, r3
     fbc:	685b      	ldr	r3, [r3, #4]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d001      	beq.n	fc6 <_free_r+0x4e>
     fc2:	42a3      	cmp	r3, r4
     fc4:	d9f9      	bls.n	fba <_free_r+0x42>
     fc6:	6811      	ldr	r1, [r2, #0]
     fc8:	1850      	adds	r0, r2, r1
     fca:	42a0      	cmp	r0, r4
     fcc:	d10b      	bne.n	fe6 <_free_r+0x6e>
     fce:	6820      	ldr	r0, [r4, #0]
     fd0:	1809      	adds	r1, r1, r0
     fd2:	1850      	adds	r0, r2, r1
     fd4:	6011      	str	r1, [r2, #0]
     fd6:	4283      	cmp	r3, r0
     fd8:	d1e0      	bne.n	f9c <_free_r+0x24>
     fda:	6818      	ldr	r0, [r3, #0]
     fdc:	685b      	ldr	r3, [r3, #4]
     fde:	1841      	adds	r1, r0, r1
     fe0:	6011      	str	r1, [r2, #0]
     fe2:	6053      	str	r3, [r2, #4]
     fe4:	e7da      	b.n	f9c <_free_r+0x24>
     fe6:	42a0      	cmp	r0, r4
     fe8:	d902      	bls.n	ff0 <_free_r+0x78>
     fea:	230c      	movs	r3, #12
     fec:	602b      	str	r3, [r5, #0]
     fee:	e7d5      	b.n	f9c <_free_r+0x24>
     ff0:	6821      	ldr	r1, [r4, #0]
     ff2:	1860      	adds	r0, r4, r1
     ff4:	4283      	cmp	r3, r0
     ff6:	d103      	bne.n	1000 <_free_r+0x88>
     ff8:	6818      	ldr	r0, [r3, #0]
     ffa:	685b      	ldr	r3, [r3, #4]
     ffc:	1841      	adds	r1, r0, r1
     ffe:	6021      	str	r1, [r4, #0]
    1000:	6063      	str	r3, [r4, #4]
    1002:	6054      	str	r4, [r2, #4]
    1004:	e7ca      	b.n	f9c <_free_r+0x24>
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	200004cc 	.word	0x200004cc

0000100c <_malloc_r>:
    100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    100e:	2303      	movs	r3, #3
    1010:	1ccd      	adds	r5, r1, #3
    1012:	439d      	bics	r5, r3
    1014:	3508      	adds	r5, #8
    1016:	0006      	movs	r6, r0
    1018:	2d0c      	cmp	r5, #12
    101a:	d21f      	bcs.n	105c <_malloc_r+0x50>
    101c:	250c      	movs	r5, #12
    101e:	42a9      	cmp	r1, r5
    1020:	d81e      	bhi.n	1060 <_malloc_r+0x54>
    1022:	0030      	movs	r0, r6
    1024:	f000 f95c 	bl	12e0 <__malloc_lock>
    1028:	4925      	ldr	r1, [pc, #148]	; (10c0 <_malloc_r+0xb4>)
    102a:	680a      	ldr	r2, [r1, #0]
    102c:	0014      	movs	r4, r2
    102e:	2c00      	cmp	r4, #0
    1030:	d11a      	bne.n	1068 <_malloc_r+0x5c>
    1032:	4f24      	ldr	r7, [pc, #144]	; (10c4 <_malloc_r+0xb8>)
    1034:	683b      	ldr	r3, [r7, #0]
    1036:	2b00      	cmp	r3, #0
    1038:	d104      	bne.n	1044 <_malloc_r+0x38>
    103a:	0021      	movs	r1, r4
    103c:	0030      	movs	r0, r6
    103e:	f000 f84d 	bl	10dc <_sbrk_r>
    1042:	6038      	str	r0, [r7, #0]
    1044:	0029      	movs	r1, r5
    1046:	0030      	movs	r0, r6
    1048:	f000 f848 	bl	10dc <_sbrk_r>
    104c:	1c43      	adds	r3, r0, #1
    104e:	d12b      	bne.n	10a8 <_malloc_r+0x9c>
    1050:	230c      	movs	r3, #12
    1052:	0030      	movs	r0, r6
    1054:	6033      	str	r3, [r6, #0]
    1056:	f000 f94b 	bl	12f0 <__malloc_unlock>
    105a:	e003      	b.n	1064 <_malloc_r+0x58>
    105c:	2d00      	cmp	r5, #0
    105e:	dade      	bge.n	101e <_malloc_r+0x12>
    1060:	230c      	movs	r3, #12
    1062:	6033      	str	r3, [r6, #0]
    1064:	2000      	movs	r0, #0
    1066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1068:	6823      	ldr	r3, [r4, #0]
    106a:	1b5b      	subs	r3, r3, r5
    106c:	d419      	bmi.n	10a2 <_malloc_r+0x96>
    106e:	2b0b      	cmp	r3, #11
    1070:	d903      	bls.n	107a <_malloc_r+0x6e>
    1072:	6023      	str	r3, [r4, #0]
    1074:	18e4      	adds	r4, r4, r3
    1076:	6025      	str	r5, [r4, #0]
    1078:	e003      	b.n	1082 <_malloc_r+0x76>
    107a:	6863      	ldr	r3, [r4, #4]
    107c:	42a2      	cmp	r2, r4
    107e:	d10e      	bne.n	109e <_malloc_r+0x92>
    1080:	600b      	str	r3, [r1, #0]
    1082:	0030      	movs	r0, r6
    1084:	f000 f934 	bl	12f0 <__malloc_unlock>
    1088:	0020      	movs	r0, r4
    108a:	2207      	movs	r2, #7
    108c:	300b      	adds	r0, #11
    108e:	1d23      	adds	r3, r4, #4
    1090:	4390      	bics	r0, r2
    1092:	1ac2      	subs	r2, r0, r3
    1094:	4298      	cmp	r0, r3
    1096:	d0e6      	beq.n	1066 <_malloc_r+0x5a>
    1098:	1a1b      	subs	r3, r3, r0
    109a:	50a3      	str	r3, [r4, r2]
    109c:	e7e3      	b.n	1066 <_malloc_r+0x5a>
    109e:	6053      	str	r3, [r2, #4]
    10a0:	e7ef      	b.n	1082 <_malloc_r+0x76>
    10a2:	0022      	movs	r2, r4
    10a4:	6864      	ldr	r4, [r4, #4]
    10a6:	e7c2      	b.n	102e <_malloc_r+0x22>
    10a8:	2303      	movs	r3, #3
    10aa:	1cc4      	adds	r4, r0, #3
    10ac:	439c      	bics	r4, r3
    10ae:	42a0      	cmp	r0, r4
    10b0:	d0e1      	beq.n	1076 <_malloc_r+0x6a>
    10b2:	1a21      	subs	r1, r4, r0
    10b4:	0030      	movs	r0, r6
    10b6:	f000 f811 	bl	10dc <_sbrk_r>
    10ba:	1c43      	adds	r3, r0, #1
    10bc:	d1db      	bne.n	1076 <_malloc_r+0x6a>
    10be:	e7c7      	b.n	1050 <_malloc_r+0x44>
    10c0:	200004cc 	.word	0x200004cc
    10c4:	200004d0 	.word	0x200004d0

000010c8 <realloc>:
    10c8:	b510      	push	{r4, lr}
    10ca:	4b03      	ldr	r3, [pc, #12]	; (10d8 <realloc+0x10>)
    10cc:	000a      	movs	r2, r1
    10ce:	0001      	movs	r1, r0
    10d0:	6818      	ldr	r0, [r3, #0]
    10d2:	f000 f915 	bl	1300 <_realloc_r>
    10d6:	bd10      	pop	{r4, pc}
    10d8:	20000010 	.word	0x20000010

000010dc <_sbrk_r>:
    10dc:	2300      	movs	r3, #0
    10de:	b570      	push	{r4, r5, r6, lr}
    10e0:	4d06      	ldr	r5, [pc, #24]	; (10fc <_sbrk_r+0x20>)
    10e2:	0004      	movs	r4, r0
    10e4:	0008      	movs	r0, r1
    10e6:	602b      	str	r3, [r5, #0]
    10e8:	f7ff feb8 	bl	e5c <_sbrk>
    10ec:	1c43      	adds	r3, r0, #1
    10ee:	d103      	bne.n	10f8 <_sbrk_r+0x1c>
    10f0:	682b      	ldr	r3, [r5, #0]
    10f2:	2b00      	cmp	r3, #0
    10f4:	d000      	beq.n	10f8 <_sbrk_r+0x1c>
    10f6:	6023      	str	r3, [r4, #0]
    10f8:	bd70      	pop	{r4, r5, r6, pc}
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	200004d4 	.word	0x200004d4

00001100 <sniprintf>:
    1100:	b40c      	push	{r2, r3}
    1102:	b530      	push	{r4, r5, lr}
    1104:	4b17      	ldr	r3, [pc, #92]	; (1164 <sniprintf+0x64>)
    1106:	000c      	movs	r4, r1
    1108:	681d      	ldr	r5, [r3, #0]
    110a:	b09d      	sub	sp, #116	; 0x74
    110c:	2900      	cmp	r1, #0
    110e:	da08      	bge.n	1122 <sniprintf+0x22>
    1110:	238b      	movs	r3, #139	; 0x8b
    1112:	2001      	movs	r0, #1
    1114:	602b      	str	r3, [r5, #0]
    1116:	4240      	negs	r0, r0
    1118:	b01d      	add	sp, #116	; 0x74
    111a:	bc30      	pop	{r4, r5}
    111c:	bc08      	pop	{r3}
    111e:	b002      	add	sp, #8
    1120:	4718      	bx	r3
    1122:	2382      	movs	r3, #130	; 0x82
    1124:	466a      	mov	r2, sp
    1126:	009b      	lsls	r3, r3, #2
    1128:	8293      	strh	r3, [r2, #20]
    112a:	2300      	movs	r3, #0
    112c:	9002      	str	r0, [sp, #8]
    112e:	9006      	str	r0, [sp, #24]
    1130:	4299      	cmp	r1, r3
    1132:	d000      	beq.n	1136 <sniprintf+0x36>
    1134:	1e4b      	subs	r3, r1, #1
    1136:	9304      	str	r3, [sp, #16]
    1138:	9307      	str	r3, [sp, #28]
    113a:	2301      	movs	r3, #1
    113c:	466a      	mov	r2, sp
    113e:	425b      	negs	r3, r3
    1140:	82d3      	strh	r3, [r2, #22]
    1142:	0028      	movs	r0, r5
    1144:	ab21      	add	r3, sp, #132	; 0x84
    1146:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1148:	a902      	add	r1, sp, #8
    114a:	9301      	str	r3, [sp, #4]
    114c:	f000 f960 	bl	1410 <_svfiprintf_r>
    1150:	1c43      	adds	r3, r0, #1
    1152:	da01      	bge.n	1158 <sniprintf+0x58>
    1154:	238b      	movs	r3, #139	; 0x8b
    1156:	602b      	str	r3, [r5, #0]
    1158:	2c00      	cmp	r4, #0
    115a:	d0dd      	beq.n	1118 <sniprintf+0x18>
    115c:	2300      	movs	r3, #0
    115e:	9a02      	ldr	r2, [sp, #8]
    1160:	7013      	strb	r3, [r2, #0]
    1162:	e7d9      	b.n	1118 <sniprintf+0x18>
    1164:	20000010 	.word	0x20000010

00001168 <strchr>:
    1168:	b2c9      	uxtb	r1, r1
    116a:	7803      	ldrb	r3, [r0, #0]
    116c:	2b00      	cmp	r3, #0
    116e:	d004      	beq.n	117a <strchr+0x12>
    1170:	428b      	cmp	r3, r1
    1172:	d100      	bne.n	1176 <strchr+0xe>
    1174:	4770      	bx	lr
    1176:	3001      	adds	r0, #1
    1178:	e7f7      	b.n	116a <strchr+0x2>
    117a:	424b      	negs	r3, r1
    117c:	4159      	adcs	r1, r3
    117e:	4249      	negs	r1, r1
    1180:	4008      	ands	r0, r1
    1182:	e7f7      	b.n	1174 <strchr+0xc>

00001184 <strcmp>:
    1184:	7802      	ldrb	r2, [r0, #0]
    1186:	780b      	ldrb	r3, [r1, #0]
    1188:	2a00      	cmp	r2, #0
    118a:	d003      	beq.n	1194 <strcmp+0x10>
    118c:	3001      	adds	r0, #1
    118e:	3101      	adds	r1, #1
    1190:	429a      	cmp	r2, r3
    1192:	d0f7      	beq.n	1184 <strcmp>
    1194:	1ad0      	subs	r0, r2, r3
    1196:	4770      	bx	lr

00001198 <strstr>:
    1198:	780a      	ldrb	r2, [r1, #0]
    119a:	b530      	push	{r4, r5, lr}
    119c:	2a00      	cmp	r2, #0
    119e:	d10c      	bne.n	11ba <strstr+0x22>
    11a0:	bd30      	pop	{r4, r5, pc}
    11a2:	429a      	cmp	r2, r3
    11a4:	d108      	bne.n	11b8 <strstr+0x20>
    11a6:	2301      	movs	r3, #1
    11a8:	5ccc      	ldrb	r4, [r1, r3]
    11aa:	2c00      	cmp	r4, #0
    11ac:	d0f8      	beq.n	11a0 <strstr+0x8>
    11ae:	5cc5      	ldrb	r5, [r0, r3]
    11b0:	42a5      	cmp	r5, r4
    11b2:	d101      	bne.n	11b8 <strstr+0x20>
    11b4:	3301      	adds	r3, #1
    11b6:	e7f7      	b.n	11a8 <strstr+0x10>
    11b8:	3001      	adds	r0, #1
    11ba:	7803      	ldrb	r3, [r0, #0]
    11bc:	2b00      	cmp	r3, #0
    11be:	d1f0      	bne.n	11a2 <strstr+0xa>
    11c0:	0018      	movs	r0, r3
    11c2:	e7ed      	b.n	11a0 <strstr+0x8>

000011c4 <_strtol_l.isra.0>:
    11c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11c6:	001e      	movs	r6, r3
    11c8:	4b3d      	ldr	r3, [pc, #244]	; (12c0 <_strtol_l.isra.0+0xfc>)
    11ca:	b087      	sub	sp, #28
    11cc:	9005      	str	r0, [sp, #20]
    11ce:	9202      	str	r2, [sp, #8]
    11d0:	0008      	movs	r0, r1
    11d2:	469c      	mov	ip, r3
    11d4:	2208      	movs	r2, #8
    11d6:	9101      	str	r1, [sp, #4]
    11d8:	0003      	movs	r3, r0
    11da:	4661      	mov	r1, ip
    11dc:	781c      	ldrb	r4, [r3, #0]
    11de:	1c45      	adds	r5, r0, #1
    11e0:	5d09      	ldrb	r1, [r1, r4]
    11e2:	0028      	movs	r0, r5
    11e4:	000f      	movs	r7, r1
    11e6:	4017      	ands	r7, r2
    11e8:	4211      	tst	r1, r2
    11ea:	d1f5      	bne.n	11d8 <_strtol_l.isra.0+0x14>
    11ec:	2c2d      	cmp	r4, #45	; 0x2d
    11ee:	d133      	bne.n	1258 <_strtol_l.isra.0+0x94>
    11f0:	2701      	movs	r7, #1
    11f2:	782c      	ldrb	r4, [r5, #0]
    11f4:	1c9d      	adds	r5, r3, #2
    11f6:	2e00      	cmp	r6, #0
    11f8:	d05d      	beq.n	12b6 <_strtol_l.isra.0+0xf2>
    11fa:	2e10      	cmp	r6, #16
    11fc:	d109      	bne.n	1212 <_strtol_l.isra.0+0x4e>
    11fe:	2c30      	cmp	r4, #48	; 0x30
    1200:	d107      	bne.n	1212 <_strtol_l.isra.0+0x4e>
    1202:	2220      	movs	r2, #32
    1204:	782b      	ldrb	r3, [r5, #0]
    1206:	4393      	bics	r3, r2
    1208:	2b58      	cmp	r3, #88	; 0x58
    120a:	d14f      	bne.n	12ac <_strtol_l.isra.0+0xe8>
    120c:	2610      	movs	r6, #16
    120e:	786c      	ldrb	r4, [r5, #1]
    1210:	3502      	adds	r5, #2
    1212:	4b2c      	ldr	r3, [pc, #176]	; (12c4 <_strtol_l.isra.0+0x100>)
    1214:	0031      	movs	r1, r6
    1216:	18fb      	adds	r3, r7, r3
    1218:	0018      	movs	r0, r3
    121a:	9303      	str	r3, [sp, #12]
    121c:	f000 fc3c 	bl	1a98 <__aeabi_uidivmod>
    1220:	2300      	movs	r3, #0
    1222:	2201      	movs	r2, #1
    1224:	4684      	mov	ip, r0
    1226:	0018      	movs	r0, r3
    1228:	9104      	str	r1, [sp, #16]
    122a:	4252      	negs	r2, r2
    122c:	0021      	movs	r1, r4
    122e:	3930      	subs	r1, #48	; 0x30
    1230:	2909      	cmp	r1, #9
    1232:	d816      	bhi.n	1262 <_strtol_l.isra.0+0x9e>
    1234:	000c      	movs	r4, r1
    1236:	42a6      	cmp	r6, r4
    1238:	dd1f      	ble.n	127a <_strtol_l.isra.0+0xb6>
    123a:	1c59      	adds	r1, r3, #1
    123c:	d009      	beq.n	1252 <_strtol_l.isra.0+0x8e>
    123e:	0013      	movs	r3, r2
    1240:	4584      	cmp	ip, r0
    1242:	d306      	bcc.n	1252 <_strtol_l.isra.0+0x8e>
    1244:	d102      	bne.n	124c <_strtol_l.isra.0+0x88>
    1246:	9904      	ldr	r1, [sp, #16]
    1248:	42a1      	cmp	r1, r4
    124a:	db02      	blt.n	1252 <_strtol_l.isra.0+0x8e>
    124c:	2301      	movs	r3, #1
    124e:	4370      	muls	r0, r6
    1250:	1820      	adds	r0, r4, r0
    1252:	782c      	ldrb	r4, [r5, #0]
    1254:	3501      	adds	r5, #1
    1256:	e7e9      	b.n	122c <_strtol_l.isra.0+0x68>
    1258:	2c2b      	cmp	r4, #43	; 0x2b
    125a:	d1cc      	bne.n	11f6 <_strtol_l.isra.0+0x32>
    125c:	782c      	ldrb	r4, [r5, #0]
    125e:	1c9d      	adds	r5, r3, #2
    1260:	e7c9      	b.n	11f6 <_strtol_l.isra.0+0x32>
    1262:	0021      	movs	r1, r4
    1264:	3941      	subs	r1, #65	; 0x41
    1266:	2919      	cmp	r1, #25
    1268:	d801      	bhi.n	126e <_strtol_l.isra.0+0xaa>
    126a:	3c37      	subs	r4, #55	; 0x37
    126c:	e7e3      	b.n	1236 <_strtol_l.isra.0+0x72>
    126e:	0021      	movs	r1, r4
    1270:	3961      	subs	r1, #97	; 0x61
    1272:	2919      	cmp	r1, #25
    1274:	d801      	bhi.n	127a <_strtol_l.isra.0+0xb6>
    1276:	3c57      	subs	r4, #87	; 0x57
    1278:	e7dd      	b.n	1236 <_strtol_l.isra.0+0x72>
    127a:	1c5a      	adds	r2, r3, #1
    127c:	d108      	bne.n	1290 <_strtol_l.isra.0+0xcc>
    127e:	9a05      	ldr	r2, [sp, #20]
    1280:	3323      	adds	r3, #35	; 0x23
    1282:	6013      	str	r3, [r2, #0]
    1284:	9b02      	ldr	r3, [sp, #8]
    1286:	9803      	ldr	r0, [sp, #12]
    1288:	2b00      	cmp	r3, #0
    128a:	d109      	bne.n	12a0 <_strtol_l.isra.0+0xdc>
    128c:	b007      	add	sp, #28
    128e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1290:	2f00      	cmp	r7, #0
    1292:	d000      	beq.n	1296 <_strtol_l.isra.0+0xd2>
    1294:	4240      	negs	r0, r0
    1296:	9a02      	ldr	r2, [sp, #8]
    1298:	2a00      	cmp	r2, #0
    129a:	d0f7      	beq.n	128c <_strtol_l.isra.0+0xc8>
    129c:	2b00      	cmp	r3, #0
    129e:	d001      	beq.n	12a4 <_strtol_l.isra.0+0xe0>
    12a0:	1e6b      	subs	r3, r5, #1
    12a2:	9301      	str	r3, [sp, #4]
    12a4:	9b02      	ldr	r3, [sp, #8]
    12a6:	9a01      	ldr	r2, [sp, #4]
    12a8:	601a      	str	r2, [r3, #0]
    12aa:	e7ef      	b.n	128c <_strtol_l.isra.0+0xc8>
    12ac:	2430      	movs	r4, #48	; 0x30
    12ae:	2e00      	cmp	r6, #0
    12b0:	d1af      	bne.n	1212 <_strtol_l.isra.0+0x4e>
    12b2:	3608      	adds	r6, #8
    12b4:	e7ad      	b.n	1212 <_strtol_l.isra.0+0x4e>
    12b6:	2c30      	cmp	r4, #48	; 0x30
    12b8:	d0a3      	beq.n	1202 <_strtol_l.isra.0+0x3e>
    12ba:	260a      	movs	r6, #10
    12bc:	e7a9      	b.n	1212 <_strtol_l.isra.0+0x4e>
    12be:	46c0      	nop			; (mov r8, r8)
    12c0:	00001b90 	.word	0x00001b90
    12c4:	7fffffff 	.word	0x7fffffff

000012c8 <strtol>:
    12c8:	b510      	push	{r4, lr}
    12ca:	0013      	movs	r3, r2
    12cc:	000a      	movs	r2, r1
    12ce:	0001      	movs	r1, r0
    12d0:	4802      	ldr	r0, [pc, #8]	; (12dc <strtol+0x14>)
    12d2:	6800      	ldr	r0, [r0, #0]
    12d4:	f7ff ff76 	bl	11c4 <_strtol_l.isra.0>
    12d8:	bd10      	pop	{r4, pc}
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	20000010 	.word	0x20000010

000012e0 <__malloc_lock>:
    12e0:	b510      	push	{r4, lr}
    12e2:	4802      	ldr	r0, [pc, #8]	; (12ec <__malloc_lock+0xc>)
    12e4:	f000 fb16 	bl	1914 <__retarget_lock_acquire_recursive>
    12e8:	bd10      	pop	{r4, pc}
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	200004dc 	.word	0x200004dc

000012f0 <__malloc_unlock>:
    12f0:	b510      	push	{r4, lr}
    12f2:	4802      	ldr	r0, [pc, #8]	; (12fc <__malloc_unlock+0xc>)
    12f4:	f000 fb0f 	bl	1916 <__retarget_lock_release_recursive>
    12f8:	bd10      	pop	{r4, pc}
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	200004dc 	.word	0x200004dc

00001300 <_realloc_r>:
    1300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1302:	0007      	movs	r7, r0
    1304:	000d      	movs	r5, r1
    1306:	0016      	movs	r6, r2
    1308:	2900      	cmp	r1, #0
    130a:	d105      	bne.n	1318 <_realloc_r+0x18>
    130c:	0011      	movs	r1, r2
    130e:	f7ff fe7d 	bl	100c <_malloc_r>
    1312:	0004      	movs	r4, r0
    1314:	0020      	movs	r0, r4
    1316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1318:	2a00      	cmp	r2, #0
    131a:	d103      	bne.n	1324 <_realloc_r+0x24>
    131c:	f7ff fe2c 	bl	f78 <_free_r>
    1320:	0034      	movs	r4, r6
    1322:	e7f7      	b.n	1314 <_realloc_r+0x14>
    1324:	f000 fb1f 	bl	1966 <_malloc_usable_size_r>
    1328:	002c      	movs	r4, r5
    132a:	42b0      	cmp	r0, r6
    132c:	d2f2      	bcs.n	1314 <_realloc_r+0x14>
    132e:	0031      	movs	r1, r6
    1330:	0038      	movs	r0, r7
    1332:	f7ff fe6b 	bl	100c <_malloc_r>
    1336:	1e04      	subs	r4, r0, #0
    1338:	d0ec      	beq.n	1314 <_realloc_r+0x14>
    133a:	0029      	movs	r1, r5
    133c:	0032      	movs	r2, r6
    133e:	f000 faf6 	bl	192e <memcpy>
    1342:	0029      	movs	r1, r5
    1344:	0038      	movs	r0, r7
    1346:	f7ff fe17 	bl	f78 <_free_r>
    134a:	e7e3      	b.n	1314 <_realloc_r+0x14>

0000134c <__ssputs_r>:
    134c:	b5f0      	push	{r4, r5, r6, r7, lr}
    134e:	688e      	ldr	r6, [r1, #8]
    1350:	b085      	sub	sp, #20
    1352:	0007      	movs	r7, r0
    1354:	000c      	movs	r4, r1
    1356:	9203      	str	r2, [sp, #12]
    1358:	9301      	str	r3, [sp, #4]
    135a:	429e      	cmp	r6, r3
    135c:	d83c      	bhi.n	13d8 <__ssputs_r+0x8c>
    135e:	2390      	movs	r3, #144	; 0x90
    1360:	898a      	ldrh	r2, [r1, #12]
    1362:	00db      	lsls	r3, r3, #3
    1364:	421a      	tst	r2, r3
    1366:	d034      	beq.n	13d2 <__ssputs_r+0x86>
    1368:	2503      	movs	r5, #3
    136a:	6909      	ldr	r1, [r1, #16]
    136c:	6823      	ldr	r3, [r4, #0]
    136e:	1a5b      	subs	r3, r3, r1
    1370:	9302      	str	r3, [sp, #8]
    1372:	6963      	ldr	r3, [r4, #20]
    1374:	9802      	ldr	r0, [sp, #8]
    1376:	435d      	muls	r5, r3
    1378:	0feb      	lsrs	r3, r5, #31
    137a:	195d      	adds	r5, r3, r5
    137c:	9b01      	ldr	r3, [sp, #4]
    137e:	106d      	asrs	r5, r5, #1
    1380:	3301      	adds	r3, #1
    1382:	181b      	adds	r3, r3, r0
    1384:	42ab      	cmp	r3, r5
    1386:	d900      	bls.n	138a <__ssputs_r+0x3e>
    1388:	001d      	movs	r5, r3
    138a:	0553      	lsls	r3, r2, #21
    138c:	d532      	bpl.n	13f4 <__ssputs_r+0xa8>
    138e:	0029      	movs	r1, r5
    1390:	0038      	movs	r0, r7
    1392:	f7ff fe3b 	bl	100c <_malloc_r>
    1396:	1e06      	subs	r6, r0, #0
    1398:	d109      	bne.n	13ae <__ssputs_r+0x62>
    139a:	230c      	movs	r3, #12
    139c:	603b      	str	r3, [r7, #0]
    139e:	2340      	movs	r3, #64	; 0x40
    13a0:	2001      	movs	r0, #1
    13a2:	89a2      	ldrh	r2, [r4, #12]
    13a4:	4240      	negs	r0, r0
    13a6:	4313      	orrs	r3, r2
    13a8:	81a3      	strh	r3, [r4, #12]
    13aa:	b005      	add	sp, #20
    13ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13ae:	9a02      	ldr	r2, [sp, #8]
    13b0:	6921      	ldr	r1, [r4, #16]
    13b2:	f000 fabc 	bl	192e <memcpy>
    13b6:	89a3      	ldrh	r3, [r4, #12]
    13b8:	4a14      	ldr	r2, [pc, #80]	; (140c <__ssputs_r+0xc0>)
    13ba:	401a      	ands	r2, r3
    13bc:	2380      	movs	r3, #128	; 0x80
    13be:	4313      	orrs	r3, r2
    13c0:	81a3      	strh	r3, [r4, #12]
    13c2:	9b02      	ldr	r3, [sp, #8]
    13c4:	6126      	str	r6, [r4, #16]
    13c6:	18f6      	adds	r6, r6, r3
    13c8:	6026      	str	r6, [r4, #0]
    13ca:	6165      	str	r5, [r4, #20]
    13cc:	9e01      	ldr	r6, [sp, #4]
    13ce:	1aed      	subs	r5, r5, r3
    13d0:	60a5      	str	r5, [r4, #8]
    13d2:	9b01      	ldr	r3, [sp, #4]
    13d4:	429e      	cmp	r6, r3
    13d6:	d900      	bls.n	13da <__ssputs_r+0x8e>
    13d8:	9e01      	ldr	r6, [sp, #4]
    13da:	0032      	movs	r2, r6
    13dc:	9903      	ldr	r1, [sp, #12]
    13de:	6820      	ldr	r0, [r4, #0]
    13e0:	f000 faae 	bl	1940 <memmove>
    13e4:	68a3      	ldr	r3, [r4, #8]
    13e6:	2000      	movs	r0, #0
    13e8:	1b9b      	subs	r3, r3, r6
    13ea:	60a3      	str	r3, [r4, #8]
    13ec:	6823      	ldr	r3, [r4, #0]
    13ee:	199e      	adds	r6, r3, r6
    13f0:	6026      	str	r6, [r4, #0]
    13f2:	e7da      	b.n	13aa <__ssputs_r+0x5e>
    13f4:	002a      	movs	r2, r5
    13f6:	0038      	movs	r0, r7
    13f8:	f7ff ff82 	bl	1300 <_realloc_r>
    13fc:	1e06      	subs	r6, r0, #0
    13fe:	d1e0      	bne.n	13c2 <__ssputs_r+0x76>
    1400:	0038      	movs	r0, r7
    1402:	6921      	ldr	r1, [r4, #16]
    1404:	f7ff fdb8 	bl	f78 <_free_r>
    1408:	e7c7      	b.n	139a <__ssputs_r+0x4e>
    140a:	46c0      	nop			; (mov r8, r8)
    140c:	fffffb7f 	.word	0xfffffb7f

00001410 <_svfiprintf_r>:
    1410:	b5f0      	push	{r4, r5, r6, r7, lr}
    1412:	b0a1      	sub	sp, #132	; 0x84
    1414:	9003      	str	r0, [sp, #12]
    1416:	001d      	movs	r5, r3
    1418:	898b      	ldrh	r3, [r1, #12]
    141a:	000f      	movs	r7, r1
    141c:	0016      	movs	r6, r2
    141e:	061b      	lsls	r3, r3, #24
    1420:	d511      	bpl.n	1446 <_svfiprintf_r+0x36>
    1422:	690b      	ldr	r3, [r1, #16]
    1424:	2b00      	cmp	r3, #0
    1426:	d10e      	bne.n	1446 <_svfiprintf_r+0x36>
    1428:	2140      	movs	r1, #64	; 0x40
    142a:	f7ff fdef 	bl	100c <_malloc_r>
    142e:	6038      	str	r0, [r7, #0]
    1430:	6138      	str	r0, [r7, #16]
    1432:	2800      	cmp	r0, #0
    1434:	d105      	bne.n	1442 <_svfiprintf_r+0x32>
    1436:	230c      	movs	r3, #12
    1438:	9a03      	ldr	r2, [sp, #12]
    143a:	3801      	subs	r0, #1
    143c:	6013      	str	r3, [r2, #0]
    143e:	b021      	add	sp, #132	; 0x84
    1440:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1442:	2340      	movs	r3, #64	; 0x40
    1444:	617b      	str	r3, [r7, #20]
    1446:	2300      	movs	r3, #0
    1448:	ac08      	add	r4, sp, #32
    144a:	6163      	str	r3, [r4, #20]
    144c:	3320      	adds	r3, #32
    144e:	7663      	strb	r3, [r4, #25]
    1450:	3310      	adds	r3, #16
    1452:	76a3      	strb	r3, [r4, #26]
    1454:	9507      	str	r5, [sp, #28]
    1456:	0035      	movs	r5, r6
    1458:	782b      	ldrb	r3, [r5, #0]
    145a:	2b00      	cmp	r3, #0
    145c:	d001      	beq.n	1462 <_svfiprintf_r+0x52>
    145e:	2b25      	cmp	r3, #37	; 0x25
    1460:	d147      	bne.n	14f2 <_svfiprintf_r+0xe2>
    1462:	1bab      	subs	r3, r5, r6
    1464:	9305      	str	r3, [sp, #20]
    1466:	42b5      	cmp	r5, r6
    1468:	d00c      	beq.n	1484 <_svfiprintf_r+0x74>
    146a:	0032      	movs	r2, r6
    146c:	0039      	movs	r1, r7
    146e:	9803      	ldr	r0, [sp, #12]
    1470:	f7ff ff6c 	bl	134c <__ssputs_r>
    1474:	1c43      	adds	r3, r0, #1
    1476:	d100      	bne.n	147a <_svfiprintf_r+0x6a>
    1478:	e0ae      	b.n	15d8 <_svfiprintf_r+0x1c8>
    147a:	6962      	ldr	r2, [r4, #20]
    147c:	9b05      	ldr	r3, [sp, #20]
    147e:	4694      	mov	ip, r2
    1480:	4463      	add	r3, ip
    1482:	6163      	str	r3, [r4, #20]
    1484:	782b      	ldrb	r3, [r5, #0]
    1486:	2b00      	cmp	r3, #0
    1488:	d100      	bne.n	148c <_svfiprintf_r+0x7c>
    148a:	e0a5      	b.n	15d8 <_svfiprintf_r+0x1c8>
    148c:	2201      	movs	r2, #1
    148e:	2300      	movs	r3, #0
    1490:	4252      	negs	r2, r2
    1492:	6062      	str	r2, [r4, #4]
    1494:	a904      	add	r1, sp, #16
    1496:	3254      	adds	r2, #84	; 0x54
    1498:	1852      	adds	r2, r2, r1
    149a:	1c6e      	adds	r6, r5, #1
    149c:	6023      	str	r3, [r4, #0]
    149e:	60e3      	str	r3, [r4, #12]
    14a0:	60a3      	str	r3, [r4, #8]
    14a2:	7013      	strb	r3, [r2, #0]
    14a4:	65a3      	str	r3, [r4, #88]	; 0x58
    14a6:	2205      	movs	r2, #5
    14a8:	7831      	ldrb	r1, [r6, #0]
    14aa:	4854      	ldr	r0, [pc, #336]	; (15fc <_svfiprintf_r+0x1ec>)
    14ac:	f000 fa34 	bl	1918 <memchr>
    14b0:	1c75      	adds	r5, r6, #1
    14b2:	2800      	cmp	r0, #0
    14b4:	d11f      	bne.n	14f6 <_svfiprintf_r+0xe6>
    14b6:	6822      	ldr	r2, [r4, #0]
    14b8:	06d3      	lsls	r3, r2, #27
    14ba:	d504      	bpl.n	14c6 <_svfiprintf_r+0xb6>
    14bc:	2353      	movs	r3, #83	; 0x53
    14be:	a904      	add	r1, sp, #16
    14c0:	185b      	adds	r3, r3, r1
    14c2:	2120      	movs	r1, #32
    14c4:	7019      	strb	r1, [r3, #0]
    14c6:	0713      	lsls	r3, r2, #28
    14c8:	d504      	bpl.n	14d4 <_svfiprintf_r+0xc4>
    14ca:	2353      	movs	r3, #83	; 0x53
    14cc:	a904      	add	r1, sp, #16
    14ce:	185b      	adds	r3, r3, r1
    14d0:	212b      	movs	r1, #43	; 0x2b
    14d2:	7019      	strb	r1, [r3, #0]
    14d4:	7833      	ldrb	r3, [r6, #0]
    14d6:	2b2a      	cmp	r3, #42	; 0x2a
    14d8:	d016      	beq.n	1508 <_svfiprintf_r+0xf8>
    14da:	0035      	movs	r5, r6
    14dc:	2100      	movs	r1, #0
    14de:	200a      	movs	r0, #10
    14e0:	68e3      	ldr	r3, [r4, #12]
    14e2:	782a      	ldrb	r2, [r5, #0]
    14e4:	1c6e      	adds	r6, r5, #1
    14e6:	3a30      	subs	r2, #48	; 0x30
    14e8:	2a09      	cmp	r2, #9
    14ea:	d94e      	bls.n	158a <_svfiprintf_r+0x17a>
    14ec:	2900      	cmp	r1, #0
    14ee:	d111      	bne.n	1514 <_svfiprintf_r+0x104>
    14f0:	e017      	b.n	1522 <_svfiprintf_r+0x112>
    14f2:	3501      	adds	r5, #1
    14f4:	e7b0      	b.n	1458 <_svfiprintf_r+0x48>
    14f6:	4b41      	ldr	r3, [pc, #260]	; (15fc <_svfiprintf_r+0x1ec>)
    14f8:	6822      	ldr	r2, [r4, #0]
    14fa:	1ac0      	subs	r0, r0, r3
    14fc:	2301      	movs	r3, #1
    14fe:	4083      	lsls	r3, r0
    1500:	4313      	orrs	r3, r2
    1502:	002e      	movs	r6, r5
    1504:	6023      	str	r3, [r4, #0]
    1506:	e7ce      	b.n	14a6 <_svfiprintf_r+0x96>
    1508:	9b07      	ldr	r3, [sp, #28]
    150a:	1d19      	adds	r1, r3, #4
    150c:	681b      	ldr	r3, [r3, #0]
    150e:	9107      	str	r1, [sp, #28]
    1510:	2b00      	cmp	r3, #0
    1512:	db01      	blt.n	1518 <_svfiprintf_r+0x108>
    1514:	930b      	str	r3, [sp, #44]	; 0x2c
    1516:	e004      	b.n	1522 <_svfiprintf_r+0x112>
    1518:	425b      	negs	r3, r3
    151a:	60e3      	str	r3, [r4, #12]
    151c:	2302      	movs	r3, #2
    151e:	4313      	orrs	r3, r2
    1520:	6023      	str	r3, [r4, #0]
    1522:	782b      	ldrb	r3, [r5, #0]
    1524:	2b2e      	cmp	r3, #46	; 0x2e
    1526:	d10a      	bne.n	153e <_svfiprintf_r+0x12e>
    1528:	786b      	ldrb	r3, [r5, #1]
    152a:	2b2a      	cmp	r3, #42	; 0x2a
    152c:	d135      	bne.n	159a <_svfiprintf_r+0x18a>
    152e:	9b07      	ldr	r3, [sp, #28]
    1530:	3502      	adds	r5, #2
    1532:	1d1a      	adds	r2, r3, #4
    1534:	681b      	ldr	r3, [r3, #0]
    1536:	9207      	str	r2, [sp, #28]
    1538:	2b00      	cmp	r3, #0
    153a:	db2b      	blt.n	1594 <_svfiprintf_r+0x184>
    153c:	9309      	str	r3, [sp, #36]	; 0x24
    153e:	4e30      	ldr	r6, [pc, #192]	; (1600 <_svfiprintf_r+0x1f0>)
    1540:	2203      	movs	r2, #3
    1542:	0030      	movs	r0, r6
    1544:	7829      	ldrb	r1, [r5, #0]
    1546:	f000 f9e7 	bl	1918 <memchr>
    154a:	2800      	cmp	r0, #0
    154c:	d006      	beq.n	155c <_svfiprintf_r+0x14c>
    154e:	2340      	movs	r3, #64	; 0x40
    1550:	1b80      	subs	r0, r0, r6
    1552:	4083      	lsls	r3, r0
    1554:	6822      	ldr	r2, [r4, #0]
    1556:	3501      	adds	r5, #1
    1558:	4313      	orrs	r3, r2
    155a:	6023      	str	r3, [r4, #0]
    155c:	7829      	ldrb	r1, [r5, #0]
    155e:	2206      	movs	r2, #6
    1560:	4828      	ldr	r0, [pc, #160]	; (1604 <_svfiprintf_r+0x1f4>)
    1562:	1c6e      	adds	r6, r5, #1
    1564:	7621      	strb	r1, [r4, #24]
    1566:	f000 f9d7 	bl	1918 <memchr>
    156a:	2800      	cmp	r0, #0
    156c:	d03c      	beq.n	15e8 <_svfiprintf_r+0x1d8>
    156e:	4b26      	ldr	r3, [pc, #152]	; (1608 <_svfiprintf_r+0x1f8>)
    1570:	2b00      	cmp	r3, #0
    1572:	d125      	bne.n	15c0 <_svfiprintf_r+0x1b0>
    1574:	2207      	movs	r2, #7
    1576:	9b07      	ldr	r3, [sp, #28]
    1578:	3307      	adds	r3, #7
    157a:	4393      	bics	r3, r2
    157c:	3308      	adds	r3, #8
    157e:	9307      	str	r3, [sp, #28]
    1580:	6963      	ldr	r3, [r4, #20]
    1582:	9a04      	ldr	r2, [sp, #16]
    1584:	189b      	adds	r3, r3, r2
    1586:	6163      	str	r3, [r4, #20]
    1588:	e765      	b.n	1456 <_svfiprintf_r+0x46>
    158a:	4343      	muls	r3, r0
    158c:	0035      	movs	r5, r6
    158e:	2101      	movs	r1, #1
    1590:	189b      	adds	r3, r3, r2
    1592:	e7a6      	b.n	14e2 <_svfiprintf_r+0xd2>
    1594:	2301      	movs	r3, #1
    1596:	425b      	negs	r3, r3
    1598:	e7d0      	b.n	153c <_svfiprintf_r+0x12c>
    159a:	2300      	movs	r3, #0
    159c:	200a      	movs	r0, #10
    159e:	001a      	movs	r2, r3
    15a0:	3501      	adds	r5, #1
    15a2:	6063      	str	r3, [r4, #4]
    15a4:	7829      	ldrb	r1, [r5, #0]
    15a6:	1c6e      	adds	r6, r5, #1
    15a8:	3930      	subs	r1, #48	; 0x30
    15aa:	2909      	cmp	r1, #9
    15ac:	d903      	bls.n	15b6 <_svfiprintf_r+0x1a6>
    15ae:	2b00      	cmp	r3, #0
    15b0:	d0c5      	beq.n	153e <_svfiprintf_r+0x12e>
    15b2:	9209      	str	r2, [sp, #36]	; 0x24
    15b4:	e7c3      	b.n	153e <_svfiprintf_r+0x12e>
    15b6:	4342      	muls	r2, r0
    15b8:	0035      	movs	r5, r6
    15ba:	2301      	movs	r3, #1
    15bc:	1852      	adds	r2, r2, r1
    15be:	e7f1      	b.n	15a4 <_svfiprintf_r+0x194>
    15c0:	ab07      	add	r3, sp, #28
    15c2:	9300      	str	r3, [sp, #0]
    15c4:	003a      	movs	r2, r7
    15c6:	0021      	movs	r1, r4
    15c8:	4b10      	ldr	r3, [pc, #64]	; (160c <_svfiprintf_r+0x1fc>)
    15ca:	9803      	ldr	r0, [sp, #12]
    15cc:	e000      	b.n	15d0 <_svfiprintf_r+0x1c0>
    15ce:	bf00      	nop
    15d0:	9004      	str	r0, [sp, #16]
    15d2:	9b04      	ldr	r3, [sp, #16]
    15d4:	3301      	adds	r3, #1
    15d6:	d1d3      	bne.n	1580 <_svfiprintf_r+0x170>
    15d8:	89bb      	ldrh	r3, [r7, #12]
    15da:	980d      	ldr	r0, [sp, #52]	; 0x34
    15dc:	065b      	lsls	r3, r3, #25
    15de:	d400      	bmi.n	15e2 <_svfiprintf_r+0x1d2>
    15e0:	e72d      	b.n	143e <_svfiprintf_r+0x2e>
    15e2:	2001      	movs	r0, #1
    15e4:	4240      	negs	r0, r0
    15e6:	e72a      	b.n	143e <_svfiprintf_r+0x2e>
    15e8:	ab07      	add	r3, sp, #28
    15ea:	9300      	str	r3, [sp, #0]
    15ec:	003a      	movs	r2, r7
    15ee:	0021      	movs	r1, r4
    15f0:	4b06      	ldr	r3, [pc, #24]	; (160c <_svfiprintf_r+0x1fc>)
    15f2:	9803      	ldr	r0, [sp, #12]
    15f4:	f000 f87c 	bl	16f0 <_printf_i>
    15f8:	e7ea      	b.n	15d0 <_svfiprintf_r+0x1c0>
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	00001c90 	.word	0x00001c90
    1600:	00001c96 	.word	0x00001c96
    1604:	00001c9a 	.word	0x00001c9a
    1608:	00000000 	.word	0x00000000
    160c:	0000134d 	.word	0x0000134d

00001610 <_printf_common>:
    1610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1612:	0015      	movs	r5, r2
    1614:	9301      	str	r3, [sp, #4]
    1616:	688a      	ldr	r2, [r1, #8]
    1618:	690b      	ldr	r3, [r1, #16]
    161a:	000c      	movs	r4, r1
    161c:	9000      	str	r0, [sp, #0]
    161e:	4293      	cmp	r3, r2
    1620:	da00      	bge.n	1624 <_printf_common+0x14>
    1622:	0013      	movs	r3, r2
    1624:	0022      	movs	r2, r4
    1626:	602b      	str	r3, [r5, #0]
    1628:	3243      	adds	r2, #67	; 0x43
    162a:	7812      	ldrb	r2, [r2, #0]
    162c:	2a00      	cmp	r2, #0
    162e:	d001      	beq.n	1634 <_printf_common+0x24>
    1630:	3301      	adds	r3, #1
    1632:	602b      	str	r3, [r5, #0]
    1634:	6823      	ldr	r3, [r4, #0]
    1636:	069b      	lsls	r3, r3, #26
    1638:	d502      	bpl.n	1640 <_printf_common+0x30>
    163a:	682b      	ldr	r3, [r5, #0]
    163c:	3302      	adds	r3, #2
    163e:	602b      	str	r3, [r5, #0]
    1640:	6822      	ldr	r2, [r4, #0]
    1642:	2306      	movs	r3, #6
    1644:	0017      	movs	r7, r2
    1646:	401f      	ands	r7, r3
    1648:	421a      	tst	r2, r3
    164a:	d027      	beq.n	169c <_printf_common+0x8c>
    164c:	0023      	movs	r3, r4
    164e:	3343      	adds	r3, #67	; 0x43
    1650:	781b      	ldrb	r3, [r3, #0]
    1652:	1e5a      	subs	r2, r3, #1
    1654:	4193      	sbcs	r3, r2
    1656:	6822      	ldr	r2, [r4, #0]
    1658:	0692      	lsls	r2, r2, #26
    165a:	d430      	bmi.n	16be <_printf_common+0xae>
    165c:	0022      	movs	r2, r4
    165e:	9901      	ldr	r1, [sp, #4]
    1660:	9800      	ldr	r0, [sp, #0]
    1662:	9e08      	ldr	r6, [sp, #32]
    1664:	3243      	adds	r2, #67	; 0x43
    1666:	47b0      	blx	r6
    1668:	1c43      	adds	r3, r0, #1
    166a:	d025      	beq.n	16b8 <_printf_common+0xa8>
    166c:	2306      	movs	r3, #6
    166e:	6820      	ldr	r0, [r4, #0]
    1670:	682a      	ldr	r2, [r5, #0]
    1672:	68e1      	ldr	r1, [r4, #12]
    1674:	2500      	movs	r5, #0
    1676:	4003      	ands	r3, r0
    1678:	2b04      	cmp	r3, #4
    167a:	d103      	bne.n	1684 <_printf_common+0x74>
    167c:	1a8d      	subs	r5, r1, r2
    167e:	43eb      	mvns	r3, r5
    1680:	17db      	asrs	r3, r3, #31
    1682:	401d      	ands	r5, r3
    1684:	68a3      	ldr	r3, [r4, #8]
    1686:	6922      	ldr	r2, [r4, #16]
    1688:	4293      	cmp	r3, r2
    168a:	dd01      	ble.n	1690 <_printf_common+0x80>
    168c:	1a9b      	subs	r3, r3, r2
    168e:	18ed      	adds	r5, r5, r3
    1690:	2700      	movs	r7, #0
    1692:	42bd      	cmp	r5, r7
    1694:	d120      	bne.n	16d8 <_printf_common+0xc8>
    1696:	2000      	movs	r0, #0
    1698:	e010      	b.n	16bc <_printf_common+0xac>
    169a:	3701      	adds	r7, #1
    169c:	68e3      	ldr	r3, [r4, #12]
    169e:	682a      	ldr	r2, [r5, #0]
    16a0:	1a9b      	subs	r3, r3, r2
    16a2:	42bb      	cmp	r3, r7
    16a4:	ddd2      	ble.n	164c <_printf_common+0x3c>
    16a6:	0022      	movs	r2, r4
    16a8:	2301      	movs	r3, #1
    16aa:	9901      	ldr	r1, [sp, #4]
    16ac:	9800      	ldr	r0, [sp, #0]
    16ae:	9e08      	ldr	r6, [sp, #32]
    16b0:	3219      	adds	r2, #25
    16b2:	47b0      	blx	r6
    16b4:	1c43      	adds	r3, r0, #1
    16b6:	d1f0      	bne.n	169a <_printf_common+0x8a>
    16b8:	2001      	movs	r0, #1
    16ba:	4240      	negs	r0, r0
    16bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    16be:	2030      	movs	r0, #48	; 0x30
    16c0:	18e1      	adds	r1, r4, r3
    16c2:	3143      	adds	r1, #67	; 0x43
    16c4:	7008      	strb	r0, [r1, #0]
    16c6:	0021      	movs	r1, r4
    16c8:	1c5a      	adds	r2, r3, #1
    16ca:	3145      	adds	r1, #69	; 0x45
    16cc:	7809      	ldrb	r1, [r1, #0]
    16ce:	18a2      	adds	r2, r4, r2
    16d0:	3243      	adds	r2, #67	; 0x43
    16d2:	3302      	adds	r3, #2
    16d4:	7011      	strb	r1, [r2, #0]
    16d6:	e7c1      	b.n	165c <_printf_common+0x4c>
    16d8:	0022      	movs	r2, r4
    16da:	2301      	movs	r3, #1
    16dc:	9901      	ldr	r1, [sp, #4]
    16de:	9800      	ldr	r0, [sp, #0]
    16e0:	9e08      	ldr	r6, [sp, #32]
    16e2:	321a      	adds	r2, #26
    16e4:	47b0      	blx	r6
    16e6:	1c43      	adds	r3, r0, #1
    16e8:	d0e6      	beq.n	16b8 <_printf_common+0xa8>
    16ea:	3701      	adds	r7, #1
    16ec:	e7d1      	b.n	1692 <_printf_common+0x82>
    16ee:	Address 0x000016ee is out of bounds.


000016f0 <_printf_i>:
    16f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f2:	b08b      	sub	sp, #44	; 0x2c
    16f4:	9206      	str	r2, [sp, #24]
    16f6:	000a      	movs	r2, r1
    16f8:	3243      	adds	r2, #67	; 0x43
    16fa:	9307      	str	r3, [sp, #28]
    16fc:	9005      	str	r0, [sp, #20]
    16fe:	9204      	str	r2, [sp, #16]
    1700:	7e0a      	ldrb	r2, [r1, #24]
    1702:	000c      	movs	r4, r1
    1704:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1706:	2a78      	cmp	r2, #120	; 0x78
    1708:	d806      	bhi.n	1718 <_printf_i+0x28>
    170a:	2a62      	cmp	r2, #98	; 0x62
    170c:	d808      	bhi.n	1720 <_printf_i+0x30>
    170e:	2a00      	cmp	r2, #0
    1710:	d100      	bne.n	1714 <_printf_i+0x24>
    1712:	e0c0      	b.n	1896 <_printf_i+0x1a6>
    1714:	2a58      	cmp	r2, #88	; 0x58
    1716:	d052      	beq.n	17be <_printf_i+0xce>
    1718:	0026      	movs	r6, r4
    171a:	3642      	adds	r6, #66	; 0x42
    171c:	7032      	strb	r2, [r6, #0]
    171e:	e022      	b.n	1766 <_printf_i+0x76>
    1720:	0010      	movs	r0, r2
    1722:	3863      	subs	r0, #99	; 0x63
    1724:	2815      	cmp	r0, #21
    1726:	d8f7      	bhi.n	1718 <_printf_i+0x28>
    1728:	f000 f926 	bl	1978 <__gnu_thumb1_case_shi>
    172c:	001f0016 	.word	0x001f0016
    1730:	fff6fff6 	.word	0xfff6fff6
    1734:	fff6fff6 	.word	0xfff6fff6
    1738:	fff6001f 	.word	0xfff6001f
    173c:	fff6fff6 	.word	0xfff6fff6
    1740:	00a8fff6 	.word	0x00a8fff6
    1744:	009a0036 	.word	0x009a0036
    1748:	fff6fff6 	.word	0xfff6fff6
    174c:	fff600b9 	.word	0xfff600b9
    1750:	fff60036 	.word	0xfff60036
    1754:	009efff6 	.word	0x009efff6
    1758:	0026      	movs	r6, r4
    175a:	681a      	ldr	r2, [r3, #0]
    175c:	3642      	adds	r6, #66	; 0x42
    175e:	1d11      	adds	r1, r2, #4
    1760:	6019      	str	r1, [r3, #0]
    1762:	6813      	ldr	r3, [r2, #0]
    1764:	7033      	strb	r3, [r6, #0]
    1766:	2301      	movs	r3, #1
    1768:	e0a7      	b.n	18ba <_printf_i+0x1ca>
    176a:	6808      	ldr	r0, [r1, #0]
    176c:	6819      	ldr	r1, [r3, #0]
    176e:	1d0a      	adds	r2, r1, #4
    1770:	0605      	lsls	r5, r0, #24
    1772:	d50b      	bpl.n	178c <_printf_i+0x9c>
    1774:	680d      	ldr	r5, [r1, #0]
    1776:	601a      	str	r2, [r3, #0]
    1778:	2d00      	cmp	r5, #0
    177a:	da03      	bge.n	1784 <_printf_i+0x94>
    177c:	232d      	movs	r3, #45	; 0x2d
    177e:	9a04      	ldr	r2, [sp, #16]
    1780:	426d      	negs	r5, r5
    1782:	7013      	strb	r3, [r2, #0]
    1784:	4b61      	ldr	r3, [pc, #388]	; (190c <_printf_i+0x21c>)
    1786:	270a      	movs	r7, #10
    1788:	9303      	str	r3, [sp, #12]
    178a:	e032      	b.n	17f2 <_printf_i+0x102>
    178c:	680d      	ldr	r5, [r1, #0]
    178e:	601a      	str	r2, [r3, #0]
    1790:	0641      	lsls	r1, r0, #25
    1792:	d5f1      	bpl.n	1778 <_printf_i+0x88>
    1794:	b22d      	sxth	r5, r5
    1796:	e7ef      	b.n	1778 <_printf_i+0x88>
    1798:	680d      	ldr	r5, [r1, #0]
    179a:	6819      	ldr	r1, [r3, #0]
    179c:	1d08      	adds	r0, r1, #4
    179e:	6018      	str	r0, [r3, #0]
    17a0:	062e      	lsls	r6, r5, #24
    17a2:	d501      	bpl.n	17a8 <_printf_i+0xb8>
    17a4:	680d      	ldr	r5, [r1, #0]
    17a6:	e003      	b.n	17b0 <_printf_i+0xc0>
    17a8:	066d      	lsls	r5, r5, #25
    17aa:	d5fb      	bpl.n	17a4 <_printf_i+0xb4>
    17ac:	680d      	ldr	r5, [r1, #0]
    17ae:	b2ad      	uxth	r5, r5
    17b0:	4b56      	ldr	r3, [pc, #344]	; (190c <_printf_i+0x21c>)
    17b2:	270a      	movs	r7, #10
    17b4:	9303      	str	r3, [sp, #12]
    17b6:	2a6f      	cmp	r2, #111	; 0x6f
    17b8:	d117      	bne.n	17ea <_printf_i+0xfa>
    17ba:	2708      	movs	r7, #8
    17bc:	e015      	b.n	17ea <_printf_i+0xfa>
    17be:	3145      	adds	r1, #69	; 0x45
    17c0:	700a      	strb	r2, [r1, #0]
    17c2:	4a52      	ldr	r2, [pc, #328]	; (190c <_printf_i+0x21c>)
    17c4:	9203      	str	r2, [sp, #12]
    17c6:	681a      	ldr	r2, [r3, #0]
    17c8:	6821      	ldr	r1, [r4, #0]
    17ca:	ca20      	ldmia	r2!, {r5}
    17cc:	601a      	str	r2, [r3, #0]
    17ce:	0608      	lsls	r0, r1, #24
    17d0:	d550      	bpl.n	1874 <_printf_i+0x184>
    17d2:	07cb      	lsls	r3, r1, #31
    17d4:	d502      	bpl.n	17dc <_printf_i+0xec>
    17d6:	2320      	movs	r3, #32
    17d8:	4319      	orrs	r1, r3
    17da:	6021      	str	r1, [r4, #0]
    17dc:	2710      	movs	r7, #16
    17de:	2d00      	cmp	r5, #0
    17e0:	d103      	bne.n	17ea <_printf_i+0xfa>
    17e2:	2320      	movs	r3, #32
    17e4:	6822      	ldr	r2, [r4, #0]
    17e6:	439a      	bics	r2, r3
    17e8:	6022      	str	r2, [r4, #0]
    17ea:	0023      	movs	r3, r4
    17ec:	2200      	movs	r2, #0
    17ee:	3343      	adds	r3, #67	; 0x43
    17f0:	701a      	strb	r2, [r3, #0]
    17f2:	6863      	ldr	r3, [r4, #4]
    17f4:	60a3      	str	r3, [r4, #8]
    17f6:	2b00      	cmp	r3, #0
    17f8:	db03      	blt.n	1802 <_printf_i+0x112>
    17fa:	2204      	movs	r2, #4
    17fc:	6821      	ldr	r1, [r4, #0]
    17fe:	4391      	bics	r1, r2
    1800:	6021      	str	r1, [r4, #0]
    1802:	2d00      	cmp	r5, #0
    1804:	d102      	bne.n	180c <_printf_i+0x11c>
    1806:	9e04      	ldr	r6, [sp, #16]
    1808:	2b00      	cmp	r3, #0
    180a:	d00c      	beq.n	1826 <_printf_i+0x136>
    180c:	9e04      	ldr	r6, [sp, #16]
    180e:	0028      	movs	r0, r5
    1810:	0039      	movs	r1, r7
    1812:	f000 f941 	bl	1a98 <__aeabi_uidivmod>
    1816:	9b03      	ldr	r3, [sp, #12]
    1818:	3e01      	subs	r6, #1
    181a:	5c5b      	ldrb	r3, [r3, r1]
    181c:	7033      	strb	r3, [r6, #0]
    181e:	002b      	movs	r3, r5
    1820:	0005      	movs	r5, r0
    1822:	429f      	cmp	r7, r3
    1824:	d9f3      	bls.n	180e <_printf_i+0x11e>
    1826:	2f08      	cmp	r7, #8
    1828:	d109      	bne.n	183e <_printf_i+0x14e>
    182a:	6823      	ldr	r3, [r4, #0]
    182c:	07db      	lsls	r3, r3, #31
    182e:	d506      	bpl.n	183e <_printf_i+0x14e>
    1830:	6863      	ldr	r3, [r4, #4]
    1832:	6922      	ldr	r2, [r4, #16]
    1834:	4293      	cmp	r3, r2
    1836:	dc02      	bgt.n	183e <_printf_i+0x14e>
    1838:	2330      	movs	r3, #48	; 0x30
    183a:	3e01      	subs	r6, #1
    183c:	7033      	strb	r3, [r6, #0]
    183e:	9b04      	ldr	r3, [sp, #16]
    1840:	1b9b      	subs	r3, r3, r6
    1842:	6123      	str	r3, [r4, #16]
    1844:	9b07      	ldr	r3, [sp, #28]
    1846:	0021      	movs	r1, r4
    1848:	9300      	str	r3, [sp, #0]
    184a:	9805      	ldr	r0, [sp, #20]
    184c:	9b06      	ldr	r3, [sp, #24]
    184e:	aa09      	add	r2, sp, #36	; 0x24
    1850:	f7ff fede 	bl	1610 <_printf_common>
    1854:	1c43      	adds	r3, r0, #1
    1856:	d135      	bne.n	18c4 <_printf_i+0x1d4>
    1858:	2001      	movs	r0, #1
    185a:	4240      	negs	r0, r0
    185c:	b00b      	add	sp, #44	; 0x2c
    185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1860:	2220      	movs	r2, #32
    1862:	6809      	ldr	r1, [r1, #0]
    1864:	430a      	orrs	r2, r1
    1866:	6022      	str	r2, [r4, #0]
    1868:	0022      	movs	r2, r4
    186a:	2178      	movs	r1, #120	; 0x78
    186c:	3245      	adds	r2, #69	; 0x45
    186e:	7011      	strb	r1, [r2, #0]
    1870:	4a27      	ldr	r2, [pc, #156]	; (1910 <_printf_i+0x220>)
    1872:	e7a7      	b.n	17c4 <_printf_i+0xd4>
    1874:	0648      	lsls	r0, r1, #25
    1876:	d5ac      	bpl.n	17d2 <_printf_i+0xe2>
    1878:	b2ad      	uxth	r5, r5
    187a:	e7aa      	b.n	17d2 <_printf_i+0xe2>
    187c:	681a      	ldr	r2, [r3, #0]
    187e:	680d      	ldr	r5, [r1, #0]
    1880:	1d10      	adds	r0, r2, #4
    1882:	6949      	ldr	r1, [r1, #20]
    1884:	6018      	str	r0, [r3, #0]
    1886:	6813      	ldr	r3, [r2, #0]
    1888:	062e      	lsls	r6, r5, #24
    188a:	d501      	bpl.n	1890 <_printf_i+0x1a0>
    188c:	6019      	str	r1, [r3, #0]
    188e:	e002      	b.n	1896 <_printf_i+0x1a6>
    1890:	066d      	lsls	r5, r5, #25
    1892:	d5fb      	bpl.n	188c <_printf_i+0x19c>
    1894:	8019      	strh	r1, [r3, #0]
    1896:	2300      	movs	r3, #0
    1898:	9e04      	ldr	r6, [sp, #16]
    189a:	6123      	str	r3, [r4, #16]
    189c:	e7d2      	b.n	1844 <_printf_i+0x154>
    189e:	681a      	ldr	r2, [r3, #0]
    18a0:	1d11      	adds	r1, r2, #4
    18a2:	6019      	str	r1, [r3, #0]
    18a4:	6816      	ldr	r6, [r2, #0]
    18a6:	2100      	movs	r1, #0
    18a8:	0030      	movs	r0, r6
    18aa:	6862      	ldr	r2, [r4, #4]
    18ac:	f000 f834 	bl	1918 <memchr>
    18b0:	2800      	cmp	r0, #0
    18b2:	d001      	beq.n	18b8 <_printf_i+0x1c8>
    18b4:	1b80      	subs	r0, r0, r6
    18b6:	6060      	str	r0, [r4, #4]
    18b8:	6863      	ldr	r3, [r4, #4]
    18ba:	6123      	str	r3, [r4, #16]
    18bc:	2300      	movs	r3, #0
    18be:	9a04      	ldr	r2, [sp, #16]
    18c0:	7013      	strb	r3, [r2, #0]
    18c2:	e7bf      	b.n	1844 <_printf_i+0x154>
    18c4:	6923      	ldr	r3, [r4, #16]
    18c6:	0032      	movs	r2, r6
    18c8:	9906      	ldr	r1, [sp, #24]
    18ca:	9805      	ldr	r0, [sp, #20]
    18cc:	9d07      	ldr	r5, [sp, #28]
    18ce:	47a8      	blx	r5
    18d0:	1c43      	adds	r3, r0, #1
    18d2:	d0c1      	beq.n	1858 <_printf_i+0x168>
    18d4:	6823      	ldr	r3, [r4, #0]
    18d6:	079b      	lsls	r3, r3, #30
    18d8:	d415      	bmi.n	1906 <_printf_i+0x216>
    18da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18dc:	68e0      	ldr	r0, [r4, #12]
    18de:	4298      	cmp	r0, r3
    18e0:	dabc      	bge.n	185c <_printf_i+0x16c>
    18e2:	0018      	movs	r0, r3
    18e4:	e7ba      	b.n	185c <_printf_i+0x16c>
    18e6:	0022      	movs	r2, r4
    18e8:	2301      	movs	r3, #1
    18ea:	9906      	ldr	r1, [sp, #24]
    18ec:	9805      	ldr	r0, [sp, #20]
    18ee:	9e07      	ldr	r6, [sp, #28]
    18f0:	3219      	adds	r2, #25
    18f2:	47b0      	blx	r6
    18f4:	1c43      	adds	r3, r0, #1
    18f6:	d0af      	beq.n	1858 <_printf_i+0x168>
    18f8:	3501      	adds	r5, #1
    18fa:	68e3      	ldr	r3, [r4, #12]
    18fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    18fe:	1a9b      	subs	r3, r3, r2
    1900:	42ab      	cmp	r3, r5
    1902:	dcf0      	bgt.n	18e6 <_printf_i+0x1f6>
    1904:	e7e9      	b.n	18da <_printf_i+0x1ea>
    1906:	2500      	movs	r5, #0
    1908:	e7f7      	b.n	18fa <_printf_i+0x20a>
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	00001ca1 	.word	0x00001ca1
    1910:	00001cb2 	.word	0x00001cb2

00001914 <__retarget_lock_acquire_recursive>:
    1914:	4770      	bx	lr

00001916 <__retarget_lock_release_recursive>:
    1916:	4770      	bx	lr

00001918 <memchr>:
    1918:	b2c9      	uxtb	r1, r1
    191a:	1882      	adds	r2, r0, r2
    191c:	4290      	cmp	r0, r2
    191e:	d101      	bne.n	1924 <memchr+0xc>
    1920:	2000      	movs	r0, #0
    1922:	4770      	bx	lr
    1924:	7803      	ldrb	r3, [r0, #0]
    1926:	428b      	cmp	r3, r1
    1928:	d0fb      	beq.n	1922 <memchr+0xa>
    192a:	3001      	adds	r0, #1
    192c:	e7f6      	b.n	191c <memchr+0x4>

0000192e <memcpy>:
    192e:	2300      	movs	r3, #0
    1930:	b510      	push	{r4, lr}
    1932:	429a      	cmp	r2, r3
    1934:	d100      	bne.n	1938 <memcpy+0xa>
    1936:	bd10      	pop	{r4, pc}
    1938:	5ccc      	ldrb	r4, [r1, r3]
    193a:	54c4      	strb	r4, [r0, r3]
    193c:	3301      	adds	r3, #1
    193e:	e7f8      	b.n	1932 <memcpy+0x4>

00001940 <memmove>:
    1940:	b510      	push	{r4, lr}
    1942:	4288      	cmp	r0, r1
    1944:	d902      	bls.n	194c <memmove+0xc>
    1946:	188b      	adds	r3, r1, r2
    1948:	4298      	cmp	r0, r3
    194a:	d303      	bcc.n	1954 <memmove+0x14>
    194c:	2300      	movs	r3, #0
    194e:	e007      	b.n	1960 <memmove+0x20>
    1950:	5c8b      	ldrb	r3, [r1, r2]
    1952:	5483      	strb	r3, [r0, r2]
    1954:	3a01      	subs	r2, #1
    1956:	d2fb      	bcs.n	1950 <memmove+0x10>
    1958:	bd10      	pop	{r4, pc}
    195a:	5ccc      	ldrb	r4, [r1, r3]
    195c:	54c4      	strb	r4, [r0, r3]
    195e:	3301      	adds	r3, #1
    1960:	429a      	cmp	r2, r3
    1962:	d1fa      	bne.n	195a <memmove+0x1a>
    1964:	e7f8      	b.n	1958 <memmove+0x18>

00001966 <_malloc_usable_size_r>:
    1966:	1f0b      	subs	r3, r1, #4
    1968:	681b      	ldr	r3, [r3, #0]
    196a:	1f18      	subs	r0, r3, #4
    196c:	2b00      	cmp	r3, #0
    196e:	da01      	bge.n	1974 <_malloc_usable_size_r+0xe>
    1970:	580b      	ldr	r3, [r1, r0]
    1972:	18c0      	adds	r0, r0, r3
    1974:	4770      	bx	lr
    1976:	Address 0x00001976 is out of bounds.


00001978 <__gnu_thumb1_case_shi>:
    1978:	b403      	push	{r0, r1}
    197a:	4671      	mov	r1, lr
    197c:	0849      	lsrs	r1, r1, #1
    197e:	0040      	lsls	r0, r0, #1
    1980:	0049      	lsls	r1, r1, #1
    1982:	5e09      	ldrsh	r1, [r1, r0]
    1984:	0049      	lsls	r1, r1, #1
    1986:	448e      	add	lr, r1
    1988:	bc03      	pop	{r0, r1}
    198a:	4770      	bx	lr

0000198c <__udivsi3>:
    198c:	2200      	movs	r2, #0
    198e:	0843      	lsrs	r3, r0, #1
    1990:	428b      	cmp	r3, r1
    1992:	d374      	bcc.n	1a7e <__udivsi3+0xf2>
    1994:	0903      	lsrs	r3, r0, #4
    1996:	428b      	cmp	r3, r1
    1998:	d35f      	bcc.n	1a5a <__udivsi3+0xce>
    199a:	0a03      	lsrs	r3, r0, #8
    199c:	428b      	cmp	r3, r1
    199e:	d344      	bcc.n	1a2a <__udivsi3+0x9e>
    19a0:	0b03      	lsrs	r3, r0, #12
    19a2:	428b      	cmp	r3, r1
    19a4:	d328      	bcc.n	19f8 <__udivsi3+0x6c>
    19a6:	0c03      	lsrs	r3, r0, #16
    19a8:	428b      	cmp	r3, r1
    19aa:	d30d      	bcc.n	19c8 <__udivsi3+0x3c>
    19ac:	22ff      	movs	r2, #255	; 0xff
    19ae:	0209      	lsls	r1, r1, #8
    19b0:	ba12      	rev	r2, r2
    19b2:	0c03      	lsrs	r3, r0, #16
    19b4:	428b      	cmp	r3, r1
    19b6:	d302      	bcc.n	19be <__udivsi3+0x32>
    19b8:	1212      	asrs	r2, r2, #8
    19ba:	0209      	lsls	r1, r1, #8
    19bc:	d065      	beq.n	1a8a <__udivsi3+0xfe>
    19be:	0b03      	lsrs	r3, r0, #12
    19c0:	428b      	cmp	r3, r1
    19c2:	d319      	bcc.n	19f8 <__udivsi3+0x6c>
    19c4:	e000      	b.n	19c8 <__udivsi3+0x3c>
    19c6:	0a09      	lsrs	r1, r1, #8
    19c8:	0bc3      	lsrs	r3, r0, #15
    19ca:	428b      	cmp	r3, r1
    19cc:	d301      	bcc.n	19d2 <__udivsi3+0x46>
    19ce:	03cb      	lsls	r3, r1, #15
    19d0:	1ac0      	subs	r0, r0, r3
    19d2:	4152      	adcs	r2, r2
    19d4:	0b83      	lsrs	r3, r0, #14
    19d6:	428b      	cmp	r3, r1
    19d8:	d301      	bcc.n	19de <__udivsi3+0x52>
    19da:	038b      	lsls	r3, r1, #14
    19dc:	1ac0      	subs	r0, r0, r3
    19de:	4152      	adcs	r2, r2
    19e0:	0b43      	lsrs	r3, r0, #13
    19e2:	428b      	cmp	r3, r1
    19e4:	d301      	bcc.n	19ea <__udivsi3+0x5e>
    19e6:	034b      	lsls	r3, r1, #13
    19e8:	1ac0      	subs	r0, r0, r3
    19ea:	4152      	adcs	r2, r2
    19ec:	0b03      	lsrs	r3, r0, #12
    19ee:	428b      	cmp	r3, r1
    19f0:	d301      	bcc.n	19f6 <__udivsi3+0x6a>
    19f2:	030b      	lsls	r3, r1, #12
    19f4:	1ac0      	subs	r0, r0, r3
    19f6:	4152      	adcs	r2, r2
    19f8:	0ac3      	lsrs	r3, r0, #11
    19fa:	428b      	cmp	r3, r1
    19fc:	d301      	bcc.n	1a02 <__udivsi3+0x76>
    19fe:	02cb      	lsls	r3, r1, #11
    1a00:	1ac0      	subs	r0, r0, r3
    1a02:	4152      	adcs	r2, r2
    1a04:	0a83      	lsrs	r3, r0, #10
    1a06:	428b      	cmp	r3, r1
    1a08:	d301      	bcc.n	1a0e <__udivsi3+0x82>
    1a0a:	028b      	lsls	r3, r1, #10
    1a0c:	1ac0      	subs	r0, r0, r3
    1a0e:	4152      	adcs	r2, r2
    1a10:	0a43      	lsrs	r3, r0, #9
    1a12:	428b      	cmp	r3, r1
    1a14:	d301      	bcc.n	1a1a <__udivsi3+0x8e>
    1a16:	024b      	lsls	r3, r1, #9
    1a18:	1ac0      	subs	r0, r0, r3
    1a1a:	4152      	adcs	r2, r2
    1a1c:	0a03      	lsrs	r3, r0, #8
    1a1e:	428b      	cmp	r3, r1
    1a20:	d301      	bcc.n	1a26 <__udivsi3+0x9a>
    1a22:	020b      	lsls	r3, r1, #8
    1a24:	1ac0      	subs	r0, r0, r3
    1a26:	4152      	adcs	r2, r2
    1a28:	d2cd      	bcs.n	19c6 <__udivsi3+0x3a>
    1a2a:	09c3      	lsrs	r3, r0, #7
    1a2c:	428b      	cmp	r3, r1
    1a2e:	d301      	bcc.n	1a34 <__udivsi3+0xa8>
    1a30:	01cb      	lsls	r3, r1, #7
    1a32:	1ac0      	subs	r0, r0, r3
    1a34:	4152      	adcs	r2, r2
    1a36:	0983      	lsrs	r3, r0, #6
    1a38:	428b      	cmp	r3, r1
    1a3a:	d301      	bcc.n	1a40 <__udivsi3+0xb4>
    1a3c:	018b      	lsls	r3, r1, #6
    1a3e:	1ac0      	subs	r0, r0, r3
    1a40:	4152      	adcs	r2, r2
    1a42:	0943      	lsrs	r3, r0, #5
    1a44:	428b      	cmp	r3, r1
    1a46:	d301      	bcc.n	1a4c <__udivsi3+0xc0>
    1a48:	014b      	lsls	r3, r1, #5
    1a4a:	1ac0      	subs	r0, r0, r3
    1a4c:	4152      	adcs	r2, r2
    1a4e:	0903      	lsrs	r3, r0, #4
    1a50:	428b      	cmp	r3, r1
    1a52:	d301      	bcc.n	1a58 <__udivsi3+0xcc>
    1a54:	010b      	lsls	r3, r1, #4
    1a56:	1ac0      	subs	r0, r0, r3
    1a58:	4152      	adcs	r2, r2
    1a5a:	08c3      	lsrs	r3, r0, #3
    1a5c:	428b      	cmp	r3, r1
    1a5e:	d301      	bcc.n	1a64 <__udivsi3+0xd8>
    1a60:	00cb      	lsls	r3, r1, #3
    1a62:	1ac0      	subs	r0, r0, r3
    1a64:	4152      	adcs	r2, r2
    1a66:	0883      	lsrs	r3, r0, #2
    1a68:	428b      	cmp	r3, r1
    1a6a:	d301      	bcc.n	1a70 <__udivsi3+0xe4>
    1a6c:	008b      	lsls	r3, r1, #2
    1a6e:	1ac0      	subs	r0, r0, r3
    1a70:	4152      	adcs	r2, r2
    1a72:	0843      	lsrs	r3, r0, #1
    1a74:	428b      	cmp	r3, r1
    1a76:	d301      	bcc.n	1a7c <__udivsi3+0xf0>
    1a78:	004b      	lsls	r3, r1, #1
    1a7a:	1ac0      	subs	r0, r0, r3
    1a7c:	4152      	adcs	r2, r2
    1a7e:	1a41      	subs	r1, r0, r1
    1a80:	d200      	bcs.n	1a84 <__udivsi3+0xf8>
    1a82:	4601      	mov	r1, r0
    1a84:	4152      	adcs	r2, r2
    1a86:	4610      	mov	r0, r2
    1a88:	4770      	bx	lr
    1a8a:	e7ff      	b.n	1a8c <__udivsi3+0x100>
    1a8c:	b501      	push	{r0, lr}
    1a8e:	2000      	movs	r0, #0
    1a90:	f000 f806 	bl	1aa0 <__aeabi_idiv0>
    1a94:	bd02      	pop	{r1, pc}
    1a96:	46c0      	nop			; (mov r8, r8)

00001a98 <__aeabi_uidivmod>:
    1a98:	2900      	cmp	r1, #0
    1a9a:	d0f7      	beq.n	1a8c <__udivsi3+0x100>
    1a9c:	e776      	b.n	198c <__udivsi3>
    1a9e:	4770      	bx	lr

00001aa0 <__aeabi_idiv0>:
    1aa0:	4770      	bx	lr
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	00001ac4 	.word	0x00001ac4
    1aa8:	000005ad 	.word	0x000005ad
	...
    1ab4:	00000018 	.word	0x00000018
    1ab8:	00000000 	.word	0x00000000
    1abc:	00000019 	.word	0x00000019
    1ac0:	00000301 	.word	0x00000301
    1ac4:	63657865 	.word	0x63657865
    1ac8:	ffffff00 	.word	0xffffff00
    1acc:	ff005441 	.word	0xff005441
    1ad0:	30455441 	.word	0x30455441
    1ad4:	00000000 	.word	0x00000000
    1ad8:	4552432b 	.word	0x4552432b
    1adc:	30203a47 	.word	0x30203a47
    1ae0:	0000312c 	.word	0x0000312c
    1ae4:	432b5441 	.word	0x432b5441
    1ae8:	3f474552 	.word	0x3f474552
    1aec:	00000000 	.word	0x00000000
    1af0:	432b5441 	.word	0x432b5441
    1af4:	3d46474d 	.word	0x3d46474d
    1af8:	00000031 	.word	0x00000031
    1afc:	432b5441 	.word	0x432b5441
    1b00:	4144474d 	.word	0x4144474d
    1b04:	4544223d 	.word	0x4544223d
    1b08:	4c41204c 	.word	0x4c41204c
    1b0c:	ff00224c 	.word	0xff00224c
    1b10:	432b5441 	.word	0x432b5441
    1b14:	3d52474d 	.word	0x3d52474d
    1b18:	00006425 	.word	0x00006425
    1b1c:	474d432b 	.word	0x474d432b
    1b20:	00000052 	.word	0x00000052
    1b24:	0a0d0a0d 	.word	0x0a0d0a0d
    1b28:	00004b4f 	.word	0x00004b4f
    1b2c:	ff00222c 	.word	0xff00222c
    1b30:	474e4952 	.word	0x474e4952
    1b34:	00000000 	.word	0x00000000
    1b38:	00485441 	.word	0x00485441
    1b3c:	544d432b 	.word	0x544d432b
    1b40:	ffff0049 	.word	0xffff0049
    1b44:	432b5441 	.word	0x432b5441
    1b48:	3d53474d 	.word	0x3d53474d
    1b4c:	22732522 	.word	0x22732522
    1b50:	00000000 	.word	0x00000000
    1b54:	474d432b 	.word	0x474d432b
    1b58:	00000053 	.word	0x00000053
    1b5c:	ffff001a 	.word	0xffff001a
    1b60:	6d6d6f43 	.word	0x6d6d6f43
    1b64:	20646e61 	.word	0x20646e61
    1b68:	656d6974 	.word	0x656d6974
    1b6c:	756f2064 	.word	0x756f2064
    1b70:	00000074 	.word	0x00000074
    1b74:	74726175 	.word	0x74726175
    1b78:	65723e2d 	.word	0x65723e2d
    1b7c:	29286461 	.word	0x29286461
    1b80:	74657220 	.word	0x74657220
    1b84:	656e7275 	.word	0x656e7275
    1b88:	756e2064 	.word	0x756e2064
    1b8c:	6c6c      	.short	0x6c6c
	...

00001b8f <_ctype_>:
    1b8f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    1b9f:	2020 2020 2020 2020 2020 2020 2020 2020                     
    1baf:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    1bbf:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    1bcf:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    1bdf:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    1bef:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    1bff:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    1c0f:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
    1c8f:	2300 302d 202b 6800 4c6c 6500 6766 4645     .#-0+ .hlL.efgEF
    1c9f:	0047 3130 3332 3534 3736 3938 4241 4443     G.0123456789ABCD
    1caf:	4645 3000 3231 3433 3635 3837 6139 6362     EF.0123456789abc
    1cbf:	6564 0066                                    def..

00001cc4 <_init>:
    1cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cc6:	46c0      	nop			; (mov r8, r8)
    1cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1cca:	bc08      	pop	{r3}
    1ccc:	469e      	mov	lr, r3
    1cce:	4770      	bx	lr

00001cd0 <__init_array_start>:
    1cd0:	000000b5 	.word	0x000000b5
    1cd4:	000006a1 	.word	0x000006a1
    1cd8:	00000da5 	.word	0x00000da5

00001cdc <_fini>:
    1cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1ce2:	bc08      	pop	{r3}
    1ce4:	469e      	mov	lr, r3
    1ce6:	4770      	bx	lr

00001ce8 <__delay_usec_veneer>:
    1ce8:	b401      	push	{r0}
    1cea:	4802      	ldr	r0, [pc, #8]	; (1cf4 <__delay_usec_veneer+0xc>)
    1cec:	4684      	mov	ip, r0
    1cee:	bc01      	pop	{r0}
    1cf0:	4760      	bx	ip
    1cf2:	bf00      	nop
    1cf4:	20000001 	.word	0x20000001

00001cf8 <__fini_array_start>:
    1cf8:	0000008d 	.word	0x0000008d

Disassembly of section .data:

20000000 <delay_usec>:
	__asm (
20000000:	210f      	movs	r1, #15

20000002 <mydelay1>:
20000002:	3901      	subs	r1, #1
20000004:	d1fd      	bne.n	20000002 <mydelay1>
20000006:	3801      	subs	r0, #1
20000008:	d1fa      	bne.n	20000000 <delay_usec>
}
2000000a:	4770      	bx	lr

2000000c <__dso_handle>:
2000000c:	0000 0000                                   ....

20000010 <_impure_ptr>:
20000010:	0014 2000                                   ... 

20000014 <impure_data>:
	...
