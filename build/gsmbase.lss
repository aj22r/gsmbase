
build/gsmbase.elf:     file format elf32-littlearm
build/gsmbase.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000246d

Program Header:
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00003ad4 memsz 0x00003ad4 flags r-x
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x00003ad4 align 2**16
         filesz 0x00000250 memsz 0x000006fc flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ad4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000250  20000000  00003ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004ac  20000250  00003d24  00020250  2**3
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
  4 .comment      00000079  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
  5 .debug_info   0003eb29  00000000  00000000  000202f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004612  00000000  00000000  0005ee1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00006e12  00000000  00000000  0006342c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000678  00000000  00000000  0006a23e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001168  00000000  00000000  0006a8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00007316  00000000  00000000  0006ba1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000e8a5  00000000  00000000  00072d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001cd0  00000000  00000000  000815dc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000250 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_samd10.c
00000000 l    df *ABS*	00000000 crtstuff.c
0000008c l     F .text	00000000 __do_global_dtors_aux
20000250 l       .bss	00000001 completed.8911
00003ad0 l     O .text	00000000 __do_global_dtors_aux_fini_array_entry
000000b4 l     F .text	00000000 frame_dummy
20000254 l       .bss	00000018 object.8916
00003a90 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 GSM.cpp
000002d4 l     F .text	0000004c _ZL9func_execP3GSMPKcS2_
0000039c l     F .text	00000048 _ZL12func_listcmdP3GSMPKcS2_
000004bc l     F .text	00000088 _ZL11func_setnumP3GSMPKcS2_
00000570 l     F .text	0000001c _ZL11func_delnumP3GSMPKcS2_
00000648 l     F .text	00000098 _ZL12func_listnumP3GSMPKcS2_
00000c40 l     F .text	00000020 _ZL11func_updateP3GSMPKcS2_
200001b0 l     O .data	0000000a _ZL11subtractors
200001ba l     O .data	00000027 _ZL6fsread
00000000 l    df *ABS*	00000000 RF24.cpp
0000375b l     O .text	00000006 _ZL10child_pipe
00003761 l     O .text	00000006 _ZL17child_pipe_enable
00003767 l     O .text	00000006 _ZL18child_payload_size
00000000 l    df *ABS*	00000000 main.cpp
000013fc l     F .text	00000014 _ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_
00001410 l     F .text	00000020 _ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_
000015e8 l     F .text	000000d4 _ZL8cmd_infoP3GSMPKcS2_
00001a04 l     F .text	00000068 _GLOBAL__sub_I__ZN3Str11EmptyBufferE
2000026c l     O .bss	00000014 _ZL3gsm
20000280 l     O .bss	00000038 _ZL3net
200001e4 l     O .data	00000004 _ZL9rtc_count
00000000 l    df *ABS*	00000000 spi.cpp
00001be8 l     F .text	00000020 _GLOBAL__sub_I_g_spi0
00000000 l    df *ABS*	00000000 systick.c
200001a0 l       .data	00000000 mydelay
200001a2 l       .data	00000000 mydelay1
200002c0 l     O .bss	00000008 _cycles
00000000 l    df *ABS*	00000000 uart.cpp
000020d4 l     F .text	0000004c _GLOBAL__sub_I_g_uart0
00000000 l    df *ABS*	00000000 sensornet.cpp
00000000 l    df *ABS*	00000000 syscalls.c
200006e0 l     O .bss	00000004 heap.4639
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _udivsi3.o
00002538 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00002b24 l     F .text	00000104 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 _thumb1_case_shi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 impure.c
200001f0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00003ab0 l     F .text	00000010 ___ZN3GSM11WriteUpdateEv_veneer
00003ac0 l     F .text	00000010 __delay_usec_veneer
00000f54 g     F .text	0000000a _ZN4RF2410get_statusEv
00003324 g     F .text	00000010 _malloc_usable_size_r
00001252 g     F .text	00000028 _ZN4RF2410setPALevelEh
000029e0 g     F .text	00000010 strcpy
00000e36 g     F .text	0000002e _ZN4RF2414write_registerEhh
000011c0 g     F .text	00000060 _ZN4RF2414startListeningEv
00002120 g     F .text	00000020 _ZN9SensornetC1ERK4RF24
000001e0 g     F .text	00000088 _ZN3GSM7PowerOnEv
00002468  w    F .text	00000002 DMAC_Handler
200006ec g     O .bss	00000001 __lock___atexit_recursive_mutex
00000938 g     F .text	00000058 _ZN3GSM12InitInternetEv
00002468  w    F .text	00000002 HardFault_Handler
00002468  w    F .text	00000002 TC2_Handler
000010e2 g     F .text	0000000a _ZN4RF249availableEv
00002cc4 g     F .text	00000010 __malloc_unlock
000010ae g     F .text	0000000a _ZN4RF245writeEPKvh
00002468  w    F .text	00000002 AC_Handler
00001d90 g     F .text	0000001c SysTick_Handler
200006ed g     O .bss	00000001 __lock___arc4random_mutex
000032fe g     F .text	00000026 memmove
00002468  w    F .text	00000002 PendSV_Handler
00002914 g     F .text	00000068 snprintf
00002468  w    F .text	00000002 NMI_Handler
00002ac4 g     F .text	0000005e __strtok_r
00000c60  w    F .text	00000038 _ZN6VectorI7SMSFuncE9push_backERKS0_
0000154a g     F .text	00000052 _ZN3Str13appendfv_fromEiPKcSt9__va_list
00000000 g       .text	00000000 _sfixed
000020c4 g     F .text	00000010 SERCOM1_Handler
00002468  w    F .text	00000002 ADC_Handler
200006f8 g     O .bss	00000004 errno
00003ad4 g       .data	00000000 _etext
00000f5e g     F .text	00000038 _ZN4RF24C2E6gpio_tS0_R5spi_t
00000dca  w    F .text	0000000a _ZN4RF2414endTransactionEv
20001000 g       .text	00000000 __top_ram
00000320 g     F .text	0000007c _ZN3GSM15cmd_SetFTPCredsEPKcS1_
0000274c g     F .text	00000012 memcpy
00000128 g     F .text	00000012 _ZN3GSMD1Ev
00002de4 g     F .text	00000200 _svfprintf_r
00000e64 g     F .text	00000060 _ZN4RF2413write_payloadEPKvhh
00002468  w    F .text	00000002 SERCOM2_Handler
00003ad4 g       .text	00000000 __fini_array_end
00002468  w    F .text	00000002 TCC0_Handler
00000f4a g     F .text	0000000a _ZN4RF248flush_txEv
00002724 g     F .text	00000014 malloc
00000fa8 g     F .text	0000000c _ZN4RF2414setPayloadSizeEh
00002538 g     F .text	0000010a .hidden __udivsi3
00001fdc g     F .text	00000048 _ZN6uart_t4peekEi
000017fc g     F .text	00000018 RTC_Handler
00002c98 g     F .text	00000018 vsnprintf
00000820 g     F .text	0000009c _ZN3GSM7ReadSMSEi
200001ac g     O .data	00000000 .hidden __dso_handle
00001f78 g     F .text	00000028 _ZN6uart_t7rxemptyEv
00000d90 g     F .text	00000030 _ZN4RF242ceEb
000015d0 g     F .text	00000016 _ZN3Str7appendfEPKcz
000028f0 g     F .text	00000024 _sbrk_r
200002c8 g     O .bss	0000020c g_uart0
00002468  w    F .text	00000002 EIC_Handler
000015b4 g     F .text	0000001c _ZN3Str8appendfvEPKcSt9__va_list
000014c0 g     F .text	00000062 _ZN3Str15reserve_discardEi
00002468  w    F .text	00000002 WDT_Handler
200002b8 g     O .bss	00000004 g_spi0
200006ee g     O .bss	00000001 __lock___env_recursive_mutex
200006ef g     O .bss	00000001 __lock___sinit_recursive_mutex
00002650 g     F .text	00000050 .hidden __aeabi_lmul
00002cd4 g     F .text	0000004c _realloc_r
000026dc g     F .text	00000048 __libc_init_array
00002508 g     F .text	00000020 _sbrk
00000100  w    F .text	00000028 _ZN3StrD1Ev
00002468  w    F .text	00000002 TC1_Handler
00003a84 g     F .text	00000000 _init
00001100 g     F .text	0000002a _ZN4RF2415openWritingPipeEy
00002c28 g     F .text	00000018 strtol
00001008 g     F .text	0000002c _ZN4RF247powerUpEv
00004000 g       .text	00000000 __top_flash
200006fc g       .bss	00000000 _ebss
0000246c g     F .text	0000009c Reset_Handler
00002c98 g     F .text	00000018 vsniprintf
000026ac g     F .text	00000014 calloc
00001522 g     F .text	00000028 _ZN3Str11append_fromEic
200006f0 g     O .bss	00000001 __lock___malloc_recursive_mutex
20001000 g       *ABS*	00000000 _stack_top
00000dc0  w    F .text	0000000a _ZN4RF2416beginTransactionEv
00002198 g     F .text	00000086 _ZN9Sensornet10UpdateNodeERK12SensorPacket
00002468 g     F .text	00000002 Dummy_Handler
00002330 g     F .text	0000002a _ZN9Sensornet4PollEv
00000100  w    F .text	00000028 _ZN3StrD2Ev
000039f0 g     O .text	00000020 __sf_fake_stderr
00002914 g     F .text	00000068 sniprintf
0000058c g     F .text	000000bc _ZN3GSM9GetAllNumEP6VectorIPcE
00000450 g     F .text	0000006c _ZN3GSM11SetNumLevelEPKcc
00002cb2 g     F .text	00000002 __retarget_lock_release_recursive
00000f22 g     F .text	0000001e _ZN4RF248spiTransEh
00002d20 g     F .text	000000c4 __ssputs_r
00001034 g     F .text	00000026 _ZN4RF2414startFastWriteEPKvhbb
0000105a g     F .text	00000054 _ZN4RF245writeEPKvhb
0000235c g     F .text	0000010c _ZN9Sensornet10CMDSetNameEP3GSMPKcS3_
000010ec g     F .text	00000014 _ZN4RF244readEPvh
000008bc g     F .text	0000007c _ZN3GSM4PollEv
000032e8 g     F .text	00000016 memchr
0000278c g     F .text	00000094 _free_r
0000221e g     F .text	00000112 _ZN9Sensornet13ProcessPacketER12SensorPacket
00003334 g     F .text	00000014 .hidden __gnu_thumb1_case_shi
00000a98 g     F .text	000000f8 _ZN3GSM8FTPWriteEPKcS1_
20000250 g       .bss	00000000 _bss
00001f44 g     F .text	00000034 _ZN6uart_t5printEPKci
00002a48 g     F .text	0000002c strstr
200004d4 g     O .bss	0000020c g_uart1
00002468  w    F .text	00000002 PM_Handler
00001d54 g     F .text	00000024 systick_cycles
00001450 g     F .text	00000070 _ZN3Str7reserveEi
200001e8 g     O .data	00000004 _ZN3Str11EmptyBufferE
000029fe g     F .text	00000022 strncmp
000013e0  w    F .text	0000001c _ZN9SensornetD2Ev
00001c08 g     F .text	0000014c systick_init
00002a20 g     F .text	00000028 strncpy
000006e0 g     F .text	000000d0 _ZN3GSM4InitEv
0000297c g     F .text	00000034 strcasecmp
00001ab4 g     F .text	00000114 _ZN5spi_t4InitE12spi_pincfg_tt
00000128 g     F .text	00000012 _ZN3GSMD2Ev
00001bc8 g     F .text	00000020 _ZN5spi_t8TransferEh
000028dc g     F .text	00000014 realloc
00001fa0 g     F .text	0000003c _ZN6uart_t4getcEv
000010b8 g     F .text	0000002a _ZN4RF249availableEPh
000026c0 g     F .text	0000001c __cxa_atexit
00002a74 g     F .text	00000050 strtok
2000002e g     F .data	0000004a _ZN3GSM17RAMFunc_print_intEt
0000264c  w    F .text	00000002 .hidden __aeabi_ldiv0
00000f40 g     F .text	0000000a _ZN4RF248flush_rxEv
00002c40 g     F .text	00000056 _vsnprintf_r
0000013c g     F .text	00000070 _ZN3GSM7CommandEPKcS1_j
20000016 g     F .data	00000018 _ZN3GSM13RAMFunc_printEPKc
00002cb4 g     F .text	00000010 __malloc_lock
00003ad0 g       .text	00000000 __fini_array_start
0000276e g     F .text	0000001c _calloc_r
00003a10 g     O .text	00000020 __sf_fake_stdin
00000d64 g     F .text	0000002c _ZN4RF243csnEb
00002cb0 g     F .text	00000002 __retarget_lock_acquire_recursive
0000275e g     F .text	00000010 memset
00001814 g     F .text	000001f0 main
00002140 g     F .text	00000058 _ZN9Sensornet5beginEv
200002bc g     O .bss	00000004 g_spi1
00002538 g     F .text	00000000 .hidden __aeabi_uidiv
00000268 g     F .text	0000006c _ZN3GSM7SendSMSEPKcS1_
00002468  w    F .text	00000002 SVC_Handler
200001a0 g     F .data	0000000c delay_usec
00002468  w    F .text	00000002 EVSYS_Handler
00003aa0 g       .text	00000000 __init_array_end
00002820 g     F .text	000000bc _malloc_r
000007b0 g     F .text	0000006e _ZN3GSM10ProcessSMSEPKcS1_
0000171c g     F .text	000000e0 _Z9UpdateRTCv
000029cc g     F .text	00000014 strcmp
00002468  w    F .text	00000002 NVMCTRL_Handler
20000078 g     F .data	00000020 _ZN3GSM15RAMFunc_wait_rxEv
00003aa0 g     F .text	00000000 _fini
00001220 g     F .text	00000020 _ZN4RF2415toggle_featuresEv
00002070 g     F .text	00000044 _ZN6uart_t4readEv
00000544 g     F .text	0000002c _ZN3GSM9RemoveNumEPKc
00001dac g     F .text	00000128 _ZN6uart_t4initERK13uart_pincfg_tt
00002024 g     F .text	0000004c _ZN6uart_t4findEPKc
20000098 g     F .data	00000108 _ZN3GSM11WriteUpdateEv
000020b4 g     F .text	00000010 SERCOM0_Handler
00002fe4 g     F .text	000000de _printf_common
200001ec g     O .data	00000004 _impure_ptr
00003a90 g       .text	00000000 __preinit_array_end
00002de4 g     F .text	00000200 _svfiprintf_r
00000f5e g     F .text	00000038 _ZN4RF24C1E6gpio_tS0_R5spi_t
20000000 g       .data	00000000 _data
00000000 g     O .text	0000008c exception_table
00001430  w    F .text	00000020 _ZNK3Str18is_using_local_bufEv
00000990 g     F .text	00000108 _ZN3GSM8SetupFTPEv
000013e0  w    F .text	0000001c _ZN9SensornetD1Ev
00002468  w    F .text	00000002 DAC_Handler
00000dd4 g     F .text	00000028 _ZN4RF2413read_registerEh
00002c40 g     F .text	00000056 _vsniprintf_r
00000ec4 g     F .text	0000005e _ZN4RF2412read_payloadEPvh
00000fb4 g     F .text	00000054 _ZN4RF2413stopListeningEv
00000b90 g     F .text	000000b0 _ZN3GSM13PerformUpdateEv
00002644 g     F .text	00000008 .hidden __aeabi_uidivmod
20000250 g       .data	00000000 _edata
0000159c g     F .text	00000018 _ZN3Str6appendEc
200006fc g       .bss	00000000 _end
200006f1 g     O .bss	00000001 __lock___at_quick_exit_mutex
00002468  w    F .text	00000002 PTC_Handler
000000d4  w    F .text	0000002c _ZN6uart_t9availableEv
00002120 g     F .text	00000020 _ZN9SensornetC2ERK4RF24
000013cc g     F .text	00000014 _ZN4RF2410setRetriesEhh
00000dfc g     F .text	0000003a _ZN4RF2414write_registerEhPKhh
000001ac g     F .text	00000034 _ZN3GSM13RepeatCommandEPKcS1_ii
0000127a g     F .text	00000048 _ZN4RF2411setDataRateE15rf24_datarate_e
00001f24 g     F .text	00000020 _ZN6uart_t5writeEc
00003a30 g     O .text	00000020 __sf_fake_stdout
000026a0 g     F .text	0000000c atoi
000038ed g     O .text	00000101 _ctype_
0000264c  w    F .text	00000002 .hidden __aeabi_idiv0
00003a90 g       .text	00000000 __init_array_start
00002650 g     F .text	00000050 .hidden __muldi3
000003e4 g     F .text	0000006c _ZN3GSM11GetNumLevelEPKc
200006f2 g     O .bss	00000001 __lock___dd_hash_mutex
200006f3 g     O .bss	00000001 __lock___tz_mutex
000016bc g     F .text	00000060 _Z8SetupRTCv
00000c98 g     F .text	000000cc _ZN3GSMC2E6gpio_tP6uart_t
00001198 g     F .text	00000028 _ZN4RF2416closeReadingPipeEh
000029f0 g     F .text	0000000e strlen
000030c4 g     F .text	00000224 _printf_i
00001a6c  w    F .text	00000048 _ZN4gpio6pmuxenERK6gpio_th
200006e8 g     O .bss	00000004 __malloc_sbrk_start
00000c98 g     F .text	000000cc _ZN3GSMC1E6gpio_tP6uart_t
000029b0 g     F .text	0000001c strchr
200006e4 g     O .bss	00000004 __malloc_free_list
000012c4 g     F .text	00000108 _ZN4RF245beginEv
00003a90 g       .text	00000000 __preinit_array_start
00002528 g     F .text	0000000e __aeabi_atexit
00000f96 g     F .text	00000012 _ZN4RF2410setChannelEh
00001d78 g     F .text	00000018 millis
00001240 g     F .text	00000012 _ZN4RF2410setAutoAckEb
00001ed4 g     F .text	00000050 _ZN6uart_t14sercom_handlerEv
0000112c g     F .text	0000006c _ZN4RF2415openReadingPipeEhy
200006f4 g     O .bss	00000001 __lock___sfp_recursive_mutex
20000000 g     F .data	00000016 _ZN3GSM13RAMFunc_writeEc
00002738 g     F .text	00000014 free
00002468  w    F .text	00000002 SYSCTRL_Handler



Disassembly of section .text:

00000000 <exception_table>:
       0:	00 10 00 20 6d 24 00 00 69 24 00 00 69 24 00 00     ... m$..i$..i$..
	...
      2c:	69 24 00 00 00 00 00 00 00 00 00 00 69 24 00 00     i$..........i$..
      3c:	91 1d 00 00 69 24 00 00 69 24 00 00 69 24 00 00     ....i$..i$..i$..
      4c:	fd 17 00 00 69 24 00 00 69 24 00 00 69 24 00 00     ....i$..i$..i$..
      5c:	00 00 00 00 69 24 00 00 b5 20 00 00 c5 20 00 00     ....i$... ... ..
      6c:	69 24 00 00 69 24 00 00 69 24 00 00 69 24 00 00     i$..i$..i$..i$..
      7c:	69 24 00 00 69 24 00 00 69 24 00 00 69 24 00 00     i$..i$..i$..i$..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000250 	.word	0x20000250
      ac:	00000000 	.word	0x00000000
      b0:	00003ad4 	.word	0x00003ad4

000000b4 <frame_dummy>:
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <frame_dummy+0x14>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4903      	ldr	r1, [pc, #12]	; (cc <frame_dummy+0x18>)
      be:	4804      	ldr	r0, [pc, #16]	; (d0 <frame_dummy+0x1c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	bd10      	pop	{r4, pc}
      c6:	46c0      	nop			; (mov r8, r8)
      c8:	00000000 	.word	0x00000000
      cc:	20000254 	.word	0x20000254
      d0:	00003ad4 	.word	0x00003ad4

000000d4 <_ZN6uart_t9availableEv>:
        m_rxhead = 0;
        m_rxtail = 0;
        m_rxfull = false;
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
      d4:	2380      	movs	r3, #128	; 0x80
    uint16_t available() {
      d6:	b510      	push	{r4, lr}
        if(m_rxhead >= m_rxtail)
      d8:	4a08      	ldr	r2, [pc, #32]	; (fc <_ZN6uart_t9availableEv+0x28>)
      da:	009b      	lsls	r3, r3, #2
      dc:	5ac4      	ldrh	r4, [r0, r3]
      de:	5a81      	ldrh	r1, [r0, r2]
            return m_rxhead - m_rxtail;
      e0:	5ac3      	ldrh	r3, [r0, r3]
        if(m_rxhead >= m_rxtail)
      e2:	428c      	cmp	r4, r1
      e4:	d303      	bcc.n	ee <_ZN6uart_t9availableEv+0x1a>
            return m_rxhead - m_rxtail;
      e6:	5a80      	ldrh	r0, [r0, r2]
      e8:	1a18      	subs	r0, r3, r0
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
      ea:	b280      	uxth	r0, r0
    }
      ec:	bd10      	pop	{r4, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
      ee:	2180      	movs	r1, #128	; 0x80
      f0:	5a82      	ldrh	r2, [r0, r2]
      f2:	0089      	lsls	r1, r1, #2
      f4:	1858      	adds	r0, r3, r1
      f6:	1a80      	subs	r0, r0, r2
      f8:	e7f7      	b.n	ea <_ZN6uart_t9availableEv+0x16>
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000202 	.word	0x00000202

00000100 <_ZN3StrD1Ev>:
#endif

    // Destructor for all variants
    inline ~Str()
    {
        if (Owned && !is_using_local_buf())
     100:	79c3      	ldrb	r3, [r0, #7]
    inline ~Str()
     102:	b510      	push	{r4, lr}
     104:	0004      	movs	r4, r0
        if (Owned && !is_using_local_buf())
     106:	2b7f      	cmp	r3, #127	; 0x7f
     108:	d90a      	bls.n	120 <_ZN3StrD1Ev+0x20>

    static char*        EmptyBuffer;

protected:
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
     10a:	0023      	movs	r3, r4
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     10c:	6800      	ldr	r0, [r0, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
     10e:	3308      	adds	r3, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     110:	4298      	cmp	r0, r3
     112:	d103      	bne.n	11c <_ZN3StrD1Ev+0x1c>
     114:	88e2      	ldrh	r2, [r4, #6]
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <_ZN3StrD1Ev+0x24>)
     118:	421a      	tst	r2, r3
     11a:	d101      	bne.n	120 <_ZN3StrD1Ev+0x20>
            STR_MEMFREE(Data);
     11c:	f002 fb0c 	bl	2738 <free>
    }
     120:	0020      	movs	r0, r4
     122:	bd10      	pop	{r4, pc}
     124:	00007fe0 	.word	0x00007fe0

00000128 <_ZN3GSMD1Ev>:
    m_smsfuncs.push_back({"update", func_update, LEVEL_ADMIN});
    m_smsfuncs.push_back({"help", func_listcmd, LEVEL_USER});
    m_smsfuncs.push_back({"setftpcreds", (SMSFuncCallback)&GSM::cmd_SetFTPCreds, LEVEL_USER});
}

GSM::~GSM() {
     128:	b510      	push	{r4, lr}
     12a:	0004      	movs	r4, r0
    T* m_data;

public:
    Vector() : m_size(0), m_data(NULL) {}
    ~Vector() {
        if(m_data) free(m_data);
     12c:	6900      	ldr	r0, [r0, #16]
     12e:	2800      	cmp	r0, #0
     130:	d001      	beq.n	136 <_ZN3GSMD1Ev+0xe>
     132:	f002 fb01 	bl	2738 <free>
    
}
     136:	0020      	movs	r0, r4
     138:	bd10      	pop	{r4, pc}
     13a:	Address 0x0000013a is out of bounds.


0000013c <_ZN3GSM7CommandEPKcS1_j>:

bool GSM::Command(const char* cmd, const char* result, unsigned int response_time) {
     13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     13e:	0016      	movs	r6, r2
        m_rxhead = 0;
     140:	2280      	movs	r2, #128	; 0x80
     142:	9301      	str	r3, [sp, #4]
     144:	2300      	movs	r3, #0
     146:	0005      	movs	r5, r0
    uint32_t start;

    m_uart->flush_rx();
     148:	6880      	ldr	r0, [r0, #8]
     14a:	0092      	lsls	r2, r2, #2
     14c:	5283      	strh	r3, [r0, r2]
        m_rxtail = 0;
     14e:	4a15      	ldr	r2, [pc, #84]	; (1a4 <_ZN3GSM7CommandEPKcS1_j+0x68>)
     150:	5283      	strh	r3, [r0, r2]
        m_rxfull = false;
     152:	3202      	adds	r2, #2
     154:	5483      	strb	r3, [r0, r2]

    m_uart->print(cmd);
     156:	2201      	movs	r2, #1
     158:	4252      	negs	r2, r2
     15a:	f001 fef3 	bl	1f44 <_ZN6uart_t5printEPKci>
    m_uart->write('\r');
     15e:	210d      	movs	r1, #13
     160:	68a8      	ldr	r0, [r5, #8]
     162:	f001 fedf 	bl	1f24 <_ZN6uart_t5writeEc>
    // Allow up to response_time milliseconds to get a response
    start = millis();
     166:	f001 fe07 	bl	1d78 <millis>
     16a:	0007      	movs	r7, r0
    while(!m_uart->available())
     16c:	68a8      	ldr	r0, [r5, #8]
     16e:	f7ff ffb1 	bl	d4 <_ZN6uart_t9availableEv>
     172:	1e04      	subs	r4, r0, #0
     174:	d107      	bne.n	186 <_ZN3GSM7CommandEPKcS1_j+0x4a>
        if(millis() - start >= response_time)
     176:	f001 fdff 	bl	1d78 <millis>
     17a:	9b01      	ldr	r3, [sp, #4]
     17c:	1bc0      	subs	r0, r0, r7
     17e:	4298      	cmp	r0, r3
     180:	d3f4      	bcc.n	16c <_ZN3GSM7CommandEPKcS1_j+0x30>
            return false;
     182:	0020      	movs	r0, r4
     184:	e00d      	b.n	1a2 <_ZN3GSM7CommandEPKcS1_j+0x66>
    
    delay_usec(100000); // wait 100 ms to get the whole response
     186:	4808      	ldr	r0, [pc, #32]	; (1a8 <_ZN3GSM7CommandEPKcS1_j+0x6c>)
     188:	f003 fc9a 	bl	3ac0 <__delay_usec_veneer>

    if(!result) return true;
     18c:	2001      	movs	r0, #1
     18e:	2e00      	cmp	r6, #0
     190:	d007      	beq.n	1a2 <_ZN3GSM7CommandEPKcS1_j+0x66>
    return m_uart->find(result) != -1;
     192:	0031      	movs	r1, r6
     194:	68a8      	ldr	r0, [r5, #8]
     196:	f001 ff45 	bl	2024 <_ZN6uart_t4findEPKc>
     19a:	3001      	adds	r0, #1
     19c:	1e44      	subs	r4, r0, #1
     19e:	41a0      	sbcs	r0, r4
     1a0:	b2c0      	uxtb	r0, r0
}
     1a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     1a4:	00000202 	.word	0x00000202
     1a8:	000186a0 	.word	0x000186a0

000001ac <_ZN3GSM13RepeatCommandEPKcS1_ii>:

bool GSM::RepeatCommand(const char* cmd, const char* result, int repeats, int response_time) {
     1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     1ae:	0005      	movs	r5, r0
     1b0:	000e      	movs	r6, r1
     1b2:	0017      	movs	r7, r2
    for(int i = 0; i < repeats; i++) {
     1b4:	2400      	movs	r4, #0
bool GSM::RepeatCommand(const char* cmd, const char* result, int repeats, int response_time) {
     1b6:	9301      	str	r3, [sp, #4]
    for(int i = 0; i < repeats; i++) {
     1b8:	9b01      	ldr	r3, [sp, #4]
     1ba:	429c      	cmp	r4, r3
     1bc:	da0c      	bge.n	1d8 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x2c>
        if(Command(cmd, result, response_time))
     1be:	003a      	movs	r2, r7
     1c0:	0031      	movs	r1, r6
     1c2:	0028      	movs	r0, r5
     1c4:	9b08      	ldr	r3, [sp, #32]
     1c6:	f7ff ffb9 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     1ca:	2800      	cmp	r0, #0
     1cc:	d105      	bne.n	1da <_ZN3GSM13RepeatCommandEPKcS1_ii+0x2e>
            return true;
        
        delay_usec(500000);
     1ce:	4803      	ldr	r0, [pc, #12]	; (1dc <_ZN3GSM13RepeatCommandEPKcS1_ii+0x30>)
     1d0:	f003 fc76 	bl	3ac0 <__delay_usec_veneer>
    for(int i = 0; i < repeats; i++) {
     1d4:	3401      	adds	r4, #1
     1d6:	e7ef      	b.n	1b8 <_ZN3GSM13RepeatCommandEPKcS1_ii+0xc>
    }
    return false;
     1d8:	2000      	movs	r0, #0
}
     1da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     1dc:	0007a120 	.word	0x0007a120

000001e0 <_ZN3GSM7PowerOnEv>:

bool GSM::PowerOn() {
     1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     1e2:	0004      	movs	r4, r0
    m_uart->write('\r');
     1e4:	210d      	movs	r1, #13
     1e6:	6880      	ldr	r0, [r0, #8]
     1e8:	f001 fe9c 	bl	1f24 <_ZN6uart_t5writeEc>

    // Check if the GSM module is already powered on
    if(Command("AT", "OK", 500))
     1ec:	23fa      	movs	r3, #250	; 0xfa
     1ee:	4e19      	ldr	r6, [pc, #100]	; (254 <_ZN3GSM7PowerOnEv+0x74>)
     1f0:	4f19      	ldr	r7, [pc, #100]	; (258 <_ZN3GSM7PowerOnEv+0x78>)
     1f2:	0032      	movs	r2, r6
     1f4:	0039      	movs	r1, r7
     1f6:	0020      	movs	r0, r4
     1f8:	005b      	lsls	r3, r3, #1
     1fa:	f7ff ff9f 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     1fe:	2800      	cmp	r0, #0
     200:	d126      	bne.n	250 <_ZN3GSM7PowerOnEv+0x70>
     202:	2503      	movs	r5, #3

    inline void set(const int port, const int pin, const bool en) {
        if(en)
            PORT->Group[port].OUTSET.reg = 1 << pin;
        else
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     204:	2201      	movs	r2, #1
     206:	6863      	ldr	r3, [r4, #4]
     208:	4914      	ldr	r1, [pc, #80]	; (25c <_ZN3GSM7PowerOnEv+0x7c>)
     20a:	409a      	lsls	r2, r3
     20c:	6823      	ldr	r3, [r4, #0]
        return true;
    
    // Fail after 3 attempts to power cycle
    for(int i = 0; i < 3; i++) {
        gpio::set(m_pwrkey, false); // Set pwrkey to low
        delay_usec(1000000); // Wait for SIM800C to register it
     20e:	4814      	ldr	r0, [pc, #80]	; (260 <_ZN3GSM7PowerOnEv+0x80>)
     210:	01db      	lsls	r3, r3, #7
     212:	185b      	adds	r3, r3, r1
     214:	601a      	str	r2, [r3, #0]
     216:	f003 fc53 	bl	3ac0 <__delay_usec_veneer>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     21a:	2201      	movs	r2, #1
     21c:	6863      	ldr	r3, [r4, #4]
     21e:	4911      	ldr	r1, [pc, #68]	; (264 <_ZN3GSM7PowerOnEv+0x84>)
     220:	409a      	lsls	r2, r3
     222:	6823      	ldr	r3, [r4, #0]
        gpio::set(m_pwrkey, true); // Set pwrkey to high
        delay_usec(1000000);
     224:	480e      	ldr	r0, [pc, #56]	; (260 <_ZN3GSM7PowerOnEv+0x80>)
     226:	01db      	lsls	r3, r3, #7
     228:	185b      	adds	r3, r3, r1
     22a:	601a      	str	r2, [r3, #0]
     22c:	f003 fc48 	bl	3ac0 <__delay_usec_veneer>

        // Wait for response to AT command
        if(RepeatCommand("AT", "OK", 6, 500))
     230:	23fa      	movs	r3, #250	; 0xfa
     232:	005b      	lsls	r3, r3, #1
     234:	9300      	str	r3, [sp, #0]
     236:	3bef      	subs	r3, #239	; 0xef
     238:	0032      	movs	r2, r6
     23a:	0039      	movs	r1, r7
     23c:	0020      	movs	r0, r4
     23e:	3bff      	subs	r3, #255	; 0xff
     240:	f7ff ffb4 	bl	1ac <_ZN3GSM13RepeatCommandEPKcS1_ii>
     244:	2800      	cmp	r0, #0
     246:	d103      	bne.n	250 <_ZN3GSM7PowerOnEv+0x70>
    for(int i = 0; i < 3; i++) {
     248:	3d01      	subs	r5, #1
     24a:	2d00      	cmp	r5, #0
     24c:	d1da      	bne.n	204 <_ZN3GSM7PowerOnEv+0x24>
            return true;
    }
    return false;
}
     24e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return true;
     250:	2001      	movs	r0, #1
     252:	e7fc      	b.n	24e <_ZN3GSM7PowerOnEv+0x6e>
     254:	000035dd 	.word	0x000035dd
     258:	00003415 	.word	0x00003415
     25c:	41004414 	.word	0x41004414
     260:	000f4240 	.word	0x000f4240
     264:	41004418 	.word	0x41004418

00000268 <_ZN3GSM7SendSMSEPKcS1_>:
            break;
        }
    }
}

bool GSM::SendSMS(const char* number, const char* text) {
     268:	b530      	push	{r4, r5, lr}
     26a:	0004      	movs	r4, r0
     26c:	b091      	sub	sp, #68	; 0x44
     26e:	000b      	movs	r3, r1
     270:	0015      	movs	r5, r2
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+CMGS=\"%s\"", number);
     272:	2140      	movs	r1, #64	; 0x40
     274:	4a11      	ldr	r2, [pc, #68]	; (2bc <_ZN3GSM7SendSMSEPKcS1_+0x54>)
     276:	4668      	mov	r0, sp
     278:	f002 fb4c 	bl	2914 <sniprintf>
    if(!Command(buf))
     27c:	2200      	movs	r2, #0
     27e:	4669      	mov	r1, sp
     280:	0020      	movs	r0, r4
     282:	4b0f      	ldr	r3, [pc, #60]	; (2c0 <_ZN3GSM7SendSMSEPKcS1_+0x58>)
     284:	f7ff ff5a 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     288:	2800      	cmp	r0, #0
     28a:	d014      	beq.n	2b6 <_ZN3GSM7SendSMSEPKcS1_+0x4e>
        return false;
    
    m_uart->print(text);
     28c:	2201      	movs	r2, #1
     28e:	0029      	movs	r1, r5
     290:	68a0      	ldr	r0, [r4, #8]
     292:	4252      	negs	r2, r2
     294:	f001 fe56 	bl	1f44 <_ZN6uart_t5printEPKci>

    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
     298:	4b0a      	ldr	r3, [pc, #40]	; (2c4 <_ZN3GSM7SendSMSEPKcS1_+0x5c>)
     29a:	4a0b      	ldr	r2, [pc, #44]	; (2c8 <_ZN3GSM7SendSMSEPKcS1_+0x60>)
     29c:	490b      	ldr	r1, [pc, #44]	; (2cc <_ZN3GSM7SendSMSEPKcS1_+0x64>)
     29e:	0020      	movs	r0, r4
     2a0:	f7ff ff4c 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
        m_rxhead = 0;
     2a4:	2180      	movs	r1, #128	; 0x80
     2a6:	2200      	movs	r2, #0
    m_uart->flush_rx();
     2a8:	68a3      	ldr	r3, [r4, #8]
     2aa:	0089      	lsls	r1, r1, #2
     2ac:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     2ae:	4908      	ldr	r1, [pc, #32]	; (2d0 <_ZN3GSM7SendSMSEPKcS1_+0x68>)
     2b0:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     2b2:	3102      	adds	r1, #2
     2b4:	545a      	strb	r2, [r3, r1]
    return success;
}
     2b6:	b011      	add	sp, #68	; 0x44
     2b8:	bd30      	pop	{r4, r5, pc}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	00003418 	.word	0x00003418
     2c0:	00000bb8 	.word	0x00000bb8
     2c4:	0000ea60 	.word	0x0000ea60
     2c8:	00003425 	.word	0x00003425
     2cc:	0000342b 	.word	0x0000342b
     2d0:	00000202 	.word	0x00000202

000002d4 <_ZL9func_execP3GSMPKcS2_>:
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     2d4:	b570      	push	{r4, r5, r6, lr}
    if(!gsm->Command(args)) {
     2d6:	4b0f      	ldr	r3, [pc, #60]	; (314 <_ZL9func_execP3GSMPKcS2_+0x40>)
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     2d8:	000e      	movs	r6, r1
     2da:	0011      	movs	r1, r2
    if(!gsm->Command(args)) {
     2dc:	2200      	movs	r2, #0
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     2de:	0004      	movs	r4, r0
    if(!gsm->Command(args)) {
     2e0:	f7ff ff2c 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
        gsm->SendSMS(sender, "Command timed out");
     2e4:	4a0c      	ldr	r2, [pc, #48]	; (318 <_ZL9func_execP3GSMPKcS2_+0x44>)
    if(!gsm->Command(args)) {
     2e6:	2800      	cmp	r0, #0
     2e8:	d005      	beq.n	2f6 <_ZL9func_execP3GSMPKcS2_+0x22>
        char* resp = gsm->m_uart->read();
     2ea:	68a0      	ldr	r0, [r4, #8]
     2ec:	f001 fec0 	bl	2070 <_ZN6uart_t4readEv>
     2f0:	1e05      	subs	r5, r0, #0
        if(!resp) {
     2f2:	d105      	bne.n	300 <_ZL9func_execP3GSMPKcS2_+0x2c>
            gsm->SendSMS(sender, "uart->read() returned null");
     2f4:	4a09      	ldr	r2, [pc, #36]	; (31c <_ZL9func_execP3GSMPKcS2_+0x48>)
     2f6:	0031      	movs	r1, r6
     2f8:	0020      	movs	r0, r4
     2fa:	f7ff ffb5 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
}
     2fe:	bd70      	pop	{r4, r5, r6, pc}
            gsm->SendSMS(sender, resp);
     300:	0002      	movs	r2, r0
     302:	0031      	movs	r1, r6
     304:	0020      	movs	r0, r4
     306:	f7ff ffaf 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
            free(resp);
     30a:	0028      	movs	r0, r5
     30c:	f002 fa14 	bl	2738 <free>
}
     310:	e7f5      	b.n	2fe <_ZL9func_execP3GSMPKcS2_+0x2a>
     312:	46c0      	nop			; (mov r8, r8)
     314:	00000bb8 	.word	0x00000bb8
     318:	0000342d 	.word	0x0000342d
     31c:	0000343f 	.word	0x0000343f

00000320 <_ZN3GSM15cmd_SetFTPCredsEPKcS1_>:
    }

    return true;
}

void GSM::cmd_SetFTPCreds(const char* sender, const char* args) {
     320:	b570      	push	{r4, r5, r6, lr}
     322:	0016      	movs	r6, r2
     324:	b090      	sub	sp, #64	; 0x40
    Command("AT+FSCREATE=C:\\ftp.dat");
     326:	2200      	movs	r2, #0
     328:	4b15      	ldr	r3, [pc, #84]	; (380 <_ZN3GSM15cmd_SetFTPCredsEPKcS1_+0x60>)
void GSM::cmd_SetFTPCreds(const char* sender, const char* args) {
     32a:	000d      	movs	r5, r1
    Command("AT+FSCREATE=C:\\ftp.dat");
     32c:	4915      	ldr	r1, [pc, #84]	; (384 <_ZN3GSM15cmd_SetFTPCredsEPKcS1_+0x64>)
void GSM::cmd_SetFTPCreds(const char* sender, const char* args) {
     32e:	0004      	movs	r4, r0
    Command("AT+FSCREATE=C:\\ftp.dat");
     330:	f7ff ff04 	bl	13c <_ZN3GSM7CommandEPKcS1_j>

    char buf[64];
    snprintf(buf, sizeof(buf), "AT+FSWRITE=C:\\ftp.dat,0,%d,1", strlen(args));
     334:	0030      	movs	r0, r6
     336:	f002 fb5b 	bl	29f0 <strlen>
     33a:	2140      	movs	r1, #64	; 0x40
     33c:	0003      	movs	r3, r0
     33e:	4a12      	ldr	r2, [pc, #72]	; (388 <_ZN3GSM15cmd_SetFTPCredsEPKcS1_+0x68>)
     340:	4668      	mov	r0, sp
     342:	f002 fae7 	bl	2914 <sniprintf>
    if(!Command(buf, ">")) {
     346:	4a11      	ldr	r2, [pc, #68]	; (38c <_ZN3GSM15cmd_SetFTPCredsEPKcS1_+0x6c>)
     348:	4669      	mov	r1, sp
     34a:	0020      	movs	r0, r4
     34c:	4b0c      	ldr	r3, [pc, #48]	; (380 <_ZN3GSM15cmd_SetFTPCredsEPKcS1_+0x60>)
     34e:	f7ff fef5 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
        SendSMS(sender, "Error");
     352:	4a0f      	ldr	r2, [pc, #60]	; (390 <_ZN3GSM15cmd_SetFTPCredsEPKcS1_+0x70>)
    if(!Command(buf, ">")) {
     354:	2800      	cmp	r0, #0
     356:	d00c      	beq.n	372 <_ZN3GSM15cmd_SetFTPCredsEPKcS1_+0x52>
        return;
    }

    m_uart->print(args);
     358:	2201      	movs	r2, #1
     35a:	0031      	movs	r1, r6
     35c:	68a0      	ldr	r0, [r4, #8]
     35e:	4252      	negs	r2, r2
     360:	f001 fdf0 	bl	1f44 <_ZN6uart_t5printEPKci>

    Command("\r\n");
     364:	2200      	movs	r2, #0
     366:	0020      	movs	r0, r4
     368:	4b05      	ldr	r3, [pc, #20]	; (380 <_ZN3GSM15cmd_SetFTPCredsEPKcS1_+0x60>)
     36a:	490a      	ldr	r1, [pc, #40]	; (394 <_ZN3GSM15cmd_SetFTPCredsEPKcS1_+0x74>)
     36c:	f7ff fee6 	bl	13c <_ZN3GSM7CommandEPKcS1_j>

    SendSMS(sender, "OK");
     370:	4a09      	ldr	r2, [pc, #36]	; (398 <_ZN3GSM15cmd_SetFTPCredsEPKcS1_+0x78>)
     372:	0029      	movs	r1, r5
     374:	0020      	movs	r0, r4
     376:	f7ff ff77 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
}
     37a:	b010      	add	sp, #64	; 0x40
     37c:	bd70      	pop	{r4, r5, r6, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	00000bb8 	.word	0x00000bb8
     384:	0000345a 	.word	0x0000345a
     388:	00003471 	.word	0x00003471
     38c:	000038dc 	.word	0x000038dc
     390:	0000348e 	.word	0x0000348e
     394:	00003494 	.word	0x00003494
     398:	000035dd 	.word	0x000035dd

0000039c <_ZL12func_listcmdP3GSMPKcS2_>:
static void func_listcmd(GSM* gsm, const char* sender, const char* args) {
     39c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    Owned = 0;
}

Str::Str()
{
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     39e:	4b0f      	ldr	r3, [pc, #60]	; (3dc <_ZL12func_listcmdP3GSMPKcS2_+0x40>)
    T* begin() {
        return m_data;
    }

    T* end() {
        return m_data + m_size;
     3a0:	260c      	movs	r6, #12
     3a2:	681b      	ldr	r3, [r3, #0]
     3a4:	0005      	movs	r5, r0
     3a6:	9300      	str	r3, [sp, #0]
    Capacity = 0;
     3a8:	2300      	movs	r3, #0
     3aa:	9301      	str	r3, [sp, #4]
     3ac:	68c3      	ldr	r3, [r0, #12]
     3ae:	000f      	movs	r7, r1
     3b0:	435e      	muls	r6, r3
     3b2:	6903      	ldr	r3, [r0, #16]
     3b4:	001c      	movs	r4, r3
     3b6:	199e      	adds	r6, r3, r6
    for(auto& cmd : gsm->m_smsfuncs) {
     3b8:	42a6      	cmp	r6, r4
     3ba:	d006      	beq.n	3ca <_ZL12func_listcmdP3GSMPKcS2_+0x2e>
        str.appendf("%s\n", cmd.key);
     3bc:	6822      	ldr	r2, [r4, #0]
     3be:	4668      	mov	r0, sp
     3c0:	4907      	ldr	r1, [pc, #28]	; (3e0 <_ZL12func_listcmdP3GSMPKcS2_+0x44>)
     3c2:	f001 f905 	bl	15d0 <_ZN3Str7appendfEPKcz>
    for(auto& cmd : gsm->m_smsfuncs) {
     3c6:	340c      	adds	r4, #12
     3c8:	e7f6      	b.n	3b8 <_ZL12func_listcmdP3GSMPKcS2_+0x1c>
    gsm->SendSMS(sender, str.c_str());
     3ca:	0039      	movs	r1, r7
     3cc:	0028      	movs	r0, r5
     3ce:	9a00      	ldr	r2, [sp, #0]
     3d0:	f7ff ff4a 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    Str str;
     3d4:	4668      	mov	r0, sp
     3d6:	f7ff fe93 	bl	100 <_ZN3StrD1Ev>
}
     3da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3dc:	200001e8 	.word	0x200001e8
     3e0:	00003497 	.word	0x00003497

000003e4 <_ZN3GSM11GetNumLevelEPKc>:
char GSM::GetNumLevel(const char* num) {
     3e4:	b510      	push	{r4, lr}
     3e6:	0004      	movs	r4, r0
     3e8:	b090      	sub	sp, #64	; 0x40
     3ea:	000b      	movs	r3, r1
    snprintf(buf, sizeof(buf), "AT+FSREAD=C:\\%s.txt,0,1,0", num);
     3ec:	4a14      	ldr	r2, [pc, #80]	; (440 <_ZN3GSM11GetNumLevelEPKc+0x5c>)
     3ee:	2140      	movs	r1, #64	; 0x40
     3f0:	4668      	mov	r0, sp
     3f2:	f002 fa8f 	bl	2914 <sniprintf>
    if(!Command(buf, "OK"))
     3f6:	4669      	mov	r1, sp
     3f8:	0020      	movs	r0, r4
     3fa:	4b12      	ldr	r3, [pc, #72]	; (444 <_ZN3GSM11GetNumLevelEPKc+0x60>)
     3fc:	4a12      	ldr	r2, [pc, #72]	; (448 <_ZN3GSM11GetNumLevelEPKc+0x64>)
     3fe:	f7ff fe9d 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     402:	2800      	cmp	r0, #0
     404:	d102      	bne.n	40c <_ZN3GSM11GetNumLevelEPKc+0x28>
        return 0;
     406:	2000      	movs	r0, #0
}
     408:	b010      	add	sp, #64	; 0x40
     40a:	bd10      	pop	{r4, pc}
    if(m_uart->available() < 3) return 0;
     40c:	68a0      	ldr	r0, [r4, #8]
     40e:	f7ff fe61 	bl	d4 <_ZN6uart_t9availableEv>
     412:	2802      	cmp	r0, #2
     414:	d9f7      	bls.n	406 <_ZN3GSM11GetNumLevelEPKc+0x22>
    m_uart->getc(); m_uart->getc(); // skip \r\n
     416:	68a0      	ldr	r0, [r4, #8]
     418:	f001 fdc2 	bl	1fa0 <_ZN6uart_t4getcEv>
     41c:	68a0      	ldr	r0, [r4, #8]
     41e:	f001 fdbf 	bl	1fa0 <_ZN6uart_t4getcEv>
    char level = m_uart->getc();
     422:	68a0      	ldr	r0, [r4, #8]
     424:	f001 fdbc 	bl	1fa0 <_ZN6uart_t4getcEv>
        m_rxhead = 0;
     428:	2180      	movs	r1, #128	; 0x80
     42a:	2200      	movs	r2, #0
    m_uart->flush_rx();
     42c:	68a3      	ldr	r3, [r4, #8]
     42e:	0089      	lsls	r1, r1, #2
     430:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     432:	4906      	ldr	r1, [pc, #24]	; (44c <_ZN3GSM11GetNumLevelEPKc+0x68>)
     434:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     436:	3102      	adds	r1, #2
     438:	545a      	strb	r2, [r3, r1]
    asm volatile("nop");
     43a:	46c0      	nop			; (mov r8, r8)
    return level;
     43c:	e7e4      	b.n	408 <_ZN3GSM11GetNumLevelEPKc+0x24>
     43e:	46c0      	nop			; (mov r8, r8)
     440:	0000349b 	.word	0x0000349b
     444:	00000bb8 	.word	0x00000bb8
     448:	000035dd 	.word	0x000035dd
     44c:	00000202 	.word	0x00000202

00000450 <_ZN3GSM11SetNumLevelEPKcc>:
void GSM::SetNumLevel(const char* num, char level) {
     450:	b570      	push	{r4, r5, r6, lr}
     452:	0004      	movs	r4, r0
     454:	000d      	movs	r5, r1
     456:	b090      	sub	sp, #64	; 0x40
    snprintf(buf, sizeof(buf), "AT+FSCREATE=C:\\%s.txt", num);
     458:	000b      	movs	r3, r1
void GSM::SetNumLevel(const char* num, char level) {
     45a:	0016      	movs	r6, r2
    snprintf(buf, sizeof(buf), "AT+FSCREATE=C:\\%s.txt", num);
     45c:	2140      	movs	r1, #64	; 0x40
     45e:	4a12      	ldr	r2, [pc, #72]	; (4a8 <_ZN3GSM11SetNumLevelEPKcc+0x58>)
     460:	4668      	mov	r0, sp
     462:	f002 fa57 	bl	2914 <sniprintf>
    Command(buf);
     466:	2200      	movs	r2, #0
     468:	4669      	mov	r1, sp
     46a:	4b10      	ldr	r3, [pc, #64]	; (4ac <_ZN3GSM11SetNumLevelEPKcc+0x5c>)
     46c:	0020      	movs	r0, r4
     46e:	f7ff fe65 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    snprintf(buf, sizeof(buf), "AT+FSWRITE=C:\\%s.txt,0,1,1", num);
     472:	002b      	movs	r3, r5
     474:	2140      	movs	r1, #64	; 0x40
     476:	4a0e      	ldr	r2, [pc, #56]	; (4b0 <_ZN3GSM11SetNumLevelEPKcc+0x60>)
     478:	4668      	mov	r0, sp
     47a:	f002 fa4b 	bl	2914 <sniprintf>
    if(!Command(buf, ">"))
     47e:	4669      	mov	r1, sp
     480:	0020      	movs	r0, r4
     482:	4b0a      	ldr	r3, [pc, #40]	; (4ac <_ZN3GSM11SetNumLevelEPKcc+0x5c>)
     484:	4a0b      	ldr	r2, [pc, #44]	; (4b4 <_ZN3GSM11SetNumLevelEPKcc+0x64>)
     486:	f7ff fe59 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     48a:	2800      	cmp	r0, #0
     48c:	d009      	beq.n	4a2 <_ZN3GSM11SetNumLevelEPKcc+0x52>
    m_uart->write(level);
     48e:	0031      	movs	r1, r6
     490:	68a0      	ldr	r0, [r4, #8]
     492:	f001 fd47 	bl	1f24 <_ZN6uart_t5writeEc>
    Command("\r\n");
     496:	2200      	movs	r2, #0
     498:	0020      	movs	r0, r4
     49a:	4b04      	ldr	r3, [pc, #16]	; (4ac <_ZN3GSM11SetNumLevelEPKcc+0x5c>)
     49c:	4906      	ldr	r1, [pc, #24]	; (4b8 <_ZN3GSM11SetNumLevelEPKcc+0x68>)
     49e:	f7ff fe4d 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
}
     4a2:	b010      	add	sp, #64	; 0x40
     4a4:	bd70      	pop	{r4, r5, r6, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	000034b5 	.word	0x000034b5
     4ac:	00000bb8 	.word	0x00000bb8
     4b0:	000034cb 	.word	0x000034cb
     4b4:	000038dc 	.word	0x000038dc
     4b8:	00003494 	.word	0x00003494

000004bc <_ZL11func_setnumP3GSMPKcS2_>:
static void func_setnum(GSM* gsm, const char* sender, const char* c_args) {
     4bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4be:	0005      	movs	r5, r0
     4c0:	000e      	movs	r6, r1
     4c2:	1e17      	subs	r7, r2, #0
    if(c_args) {
     4c4:	d02c      	beq.n	520 <_ZL11func_setnumP3GSMPKcS2_+0x64>
        args = (char*)malloc(strlen(c_args));
     4c6:	0010      	movs	r0, r2
     4c8:	f002 fa92 	bl	29f0 <strlen>
     4cc:	f002 f92a 	bl	2724 <malloc>
     4d0:	1e04      	subs	r4, r0, #0
        if(!args) {
     4d2:	d105      	bne.n	4e0 <_ZL11func_setnumP3GSMPKcS2_+0x24>
            gsm->SendSMS(sender, "malloc failed");
     4d4:	0031      	movs	r1, r6
     4d6:	0028      	movs	r0, r5
     4d8:	4a16      	ldr	r2, [pc, #88]	; (534 <_ZL11func_setnumP3GSMPKcS2_+0x78>)
     4da:	f7ff fec5 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
}
     4de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        strcpy(args, c_args);
     4e0:	0039      	movs	r1, r7
     4e2:	f002 fa7d 	bl	29e0 <strcpy>
        num = strtok(args, " ");
     4e6:	4f14      	ldr	r7, [pc, #80]	; (538 <_ZL11func_setnumP3GSMPKcS2_+0x7c>)
     4e8:	0020      	movs	r0, r4
     4ea:	0039      	movs	r1, r7
     4ec:	f002 fac2 	bl	2a74 <strtok>
        level = strtok(NULL, " ");
     4f0:	0039      	movs	r1, r7
        num = strtok(args, " ");
     4f2:	9001      	str	r0, [sp, #4]
        level = strtok(NULL, " ");
     4f4:	2000      	movs	r0, #0
     4f6:	f002 fabd 	bl	2a74 <strtok>
    if(num && level) {
     4fa:	9b01      	ldr	r3, [sp, #4]
     4fc:	2b00      	cmp	r3, #0
     4fe:	d010      	beq.n	522 <_ZL11func_setnumP3GSMPKcS2_+0x66>
     500:	2800      	cmp	r0, #0
     502:	d00e      	beq.n	522 <_ZL11func_setnumP3GSMPKcS2_+0x66>
        gsm->SetNumLevel(num, *level);
     504:	7802      	ldrb	r2, [r0, #0]
     506:	0019      	movs	r1, r3
     508:	0028      	movs	r0, r5
     50a:	f7ff ffa1 	bl	450 <_ZN3GSM11SetNumLevelEPKcc>
        gsm->SendSMS(sender, "OK");
     50e:	0031      	movs	r1, r6
     510:	0028      	movs	r0, r5
     512:	4a0a      	ldr	r2, [pc, #40]	; (53c <_ZL11func_setnumP3GSMPKcS2_+0x80>)
     514:	f7ff fea8 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
     518:	0020      	movs	r0, r4
     51a:	f002 f90d 	bl	2738 <free>
     51e:	e7de      	b.n	4de <_ZL11func_setnumP3GSMPKcS2_+0x22>
    char* args = NULL;
     520:	0014      	movs	r4, r2
        gsm->SendSMS(sender, "Usage: setnum <number> <level>");
     522:	0031      	movs	r1, r6
     524:	0028      	movs	r0, r5
     526:	4a06      	ldr	r2, [pc, #24]	; (540 <_ZL11func_setnumP3GSMPKcS2_+0x84>)
     528:	f7ff fe9e 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
     52c:	2c00      	cmp	r4, #0
     52e:	d0d6      	beq.n	4de <_ZL11func_setnumP3GSMPKcS2_+0x22>
     530:	e7f2      	b.n	518 <_ZL11func_setnumP3GSMPKcS2_+0x5c>
     532:	46c0      	nop			; (mov r8, r8)
     534:	000034e6 	.word	0x000034e6
     538:	00003a54 	.word	0x00003a54
     53c:	000035dd 	.word	0x000035dd
     540:	000034f4 	.word	0x000034f4

00000544 <_ZN3GSM9RemoveNumEPKc>:
void GSM::RemoveNum(const char* num) {
     544:	b510      	push	{r4, lr}
     546:	0004      	movs	r4, r0
     548:	b090      	sub	sp, #64	; 0x40
     54a:	000b      	movs	r3, r1
    snprintf(buf, sizeof(buf), "AT+FSDEL=C:\\%s.txt", num);
     54c:	4668      	mov	r0, sp
     54e:	2140      	movs	r1, #64	; 0x40
     550:	4a05      	ldr	r2, [pc, #20]	; (568 <_ZN3GSM9RemoveNumEPKc+0x24>)
     552:	f002 f9df 	bl	2914 <sniprintf>
    Command(buf);
     556:	2200      	movs	r2, #0
     558:	4669      	mov	r1, sp
     55a:	0020      	movs	r0, r4
     55c:	4b03      	ldr	r3, [pc, #12]	; (56c <_ZN3GSM9RemoveNumEPKc+0x28>)
     55e:	f7ff fded 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
}
     562:	b010      	add	sp, #64	; 0x40
     564:	bd10      	pop	{r4, pc}
     566:	46c0      	nop			; (mov r8, r8)
     568:	00003513 	.word	0x00003513
     56c:	00000bb8 	.word	0x00000bb8

00000570 <_ZL11func_delnumP3GSMPKcS2_>:
static void func_delnum(GSM* gsm, const char* sender, const char* args) {
     570:	b510      	push	{r4, lr}
    if(!args) {
     572:	2a00      	cmp	r2, #0
     574:	d103      	bne.n	57e <_ZL11func_delnumP3GSMPKcS2_+0xe>
        gsm->SendSMS(sender, "Usage: delnum <number>");
     576:	4a04      	ldr	r2, [pc, #16]	; (588 <_ZL11func_delnumP3GSMPKcS2_+0x18>)
     578:	f7ff fe76 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
}
     57c:	bd10      	pop	{r4, pc}
    gsm->RemoveNum(args);
     57e:	0011      	movs	r1, r2
     580:	f7ff ffe0 	bl	544 <_ZN3GSM9RemoveNumEPKc>
     584:	e7fa      	b.n	57c <_ZL11func_delnumP3GSMPKcS2_+0xc>
     586:	46c0      	nop			; (mov r8, r8)
     588:	00003526 	.word	0x00003526

0000058c <_ZN3GSM9GetAllNumEP6VectorIPcE>:
int GSM::GetAllNum(Vector<char*>* list) {
     58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(!Command("AT+FSLS=C:\\"))
     58e:	4b2a      	ldr	r3, [pc, #168]	; (638 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xac>)
int GSM::GetAllNum(Vector<char*>* list) {
     590:	000d      	movs	r5, r1
    if(!Command("AT+FSLS=C:\\"))
     592:	2200      	movs	r2, #0
     594:	4929      	ldr	r1, [pc, #164]	; (63c <_ZN3GSM9GetAllNumEP6VectorIPcE+0xb0>)
int GSM::GetAllNum(Vector<char*>* list) {
     596:	0004      	movs	r4, r0
    if(!Command("AT+FSLS=C:\\"))
     598:	f7ff fdd0 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     59c:	2800      	cmp	r0, #0
     59e:	d102      	bne.n	5a6 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x1a>
        return 0;
     5a0:	2700      	movs	r7, #0
}
     5a2:	0038      	movs	r0, r7
     5a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    char* data = m_uart->read();
     5a6:	68a0      	ldr	r0, [r4, #8]
     5a8:	f001 fd62 	bl	2070 <_ZN6uart_t4readEv>
     5ac:	1e06      	subs	r6, r0, #0
    if(!data) return 0;
     5ae:	d0f7      	beq.n	5a0 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x14>
    char* entry = strtok(data, "\r\n");
     5b0:	4923      	ldr	r1, [pc, #140]	; (640 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xb4>)
     5b2:	f002 fa5f 	bl	2a74 <strtok>
    int count = 0;
     5b6:	2700      	movs	r7, #0
    char* entry = strtok(data, "\r\n");
     5b8:	0004      	movs	r4, r0
    while(entry) {
     5ba:	2c00      	cmp	r4, #0
     5bc:	d038      	beq.n	630 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xa4>
        if(strlen(entry) > 4 && strcmp(entry + strlen(entry) - 4, ".txt") == 0) {
     5be:	0020      	movs	r0, r4
     5c0:	f002 fa16 	bl	29f0 <strlen>
     5c4:	9001      	str	r0, [sp, #4]
     5c6:	2804      	cmp	r0, #4
     5c8:	d928      	bls.n	61c <_ZN3GSM9GetAllNumEP6VectorIPcE+0x90>
     5ca:	3804      	subs	r0, #4
     5cc:	491d      	ldr	r1, [pc, #116]	; (644 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xb8>)
     5ce:	1820      	adds	r0, r4, r0
     5d0:	f002 f9fc 	bl	29cc <strcmp>
     5d4:	2800      	cmp	r0, #0
     5d6:	d121      	bne.n	61c <_ZN3GSM9GetAllNumEP6VectorIPcE+0x90>
            count++;
     5d8:	3701      	adds	r7, #1
            if(list) {
     5da:	2d00      	cmp	r5, #0
     5dc:	d01e      	beq.n	61c <_ZN3GSM9GetAllNumEP6VectorIPcE+0x90>
                char* file = (char*)calloc(strlen(entry) - 4 + 1, 1);
     5de:	9801      	ldr	r0, [sp, #4]
     5e0:	2101      	movs	r1, #1
     5e2:	3803      	subs	r0, #3
     5e4:	f002 f862 	bl	26ac <calloc>
     5e8:	9001      	str	r0, [sp, #4]
                memcpy(file, entry, strlen(entry) - 4);
     5ea:	0020      	movs	r0, r4
     5ec:	f002 fa00 	bl	29f0 <strlen>
     5f0:	0021      	movs	r1, r4
     5f2:	1f02      	subs	r2, r0, #4
     5f4:	9801      	ldr	r0, [sp, #4]
     5f6:	f002 f8a9 	bl	274c <memcpy>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     5fa:	6829      	ldr	r1, [r5, #0]
     5fc:	2900      	cmp	r1, #0
     5fe:	d013      	beq.n	628 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x9c>
     600:	3101      	adds	r1, #1
     602:	6868      	ldr	r0, [r5, #4]
     604:	0089      	lsls	r1, r1, #2
     606:	f002 f969 	bl	28dc <realloc>
        if(!new_data) return;
     60a:	2800      	cmp	r0, #0
     60c:	d006      	beq.n	61c <_ZN3GSM9GetAllNumEP6VectorIPcE+0x90>
        *(m_data + m_size) = elem;
     60e:	682b      	ldr	r3, [r5, #0]
     610:	9901      	ldr	r1, [sp, #4]
     612:	009a      	lsls	r2, r3, #2
        m_size++;
     614:	3301      	adds	r3, #1
        m_data = new_data;
     616:	6068      	str	r0, [r5, #4]
        *(m_data + m_size) = elem;
     618:	5011      	str	r1, [r2, r0]
        m_size++;
     61a:	602b      	str	r3, [r5, #0]
        entry = strtok(NULL, "\r\n");
     61c:	2000      	movs	r0, #0
     61e:	4908      	ldr	r1, [pc, #32]	; (640 <_ZN3GSM9GetAllNumEP6VectorIPcE+0xb4>)
     620:	f002 fa28 	bl	2a74 <strtok>
     624:	0004      	movs	r4, r0
    while(entry) {
     626:	e7c8      	b.n	5ba <_ZN3GSM9GetAllNumEP6VectorIPcE+0x2e>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     628:	2004      	movs	r0, #4
     62a:	f002 f87b 	bl	2724 <malloc>
     62e:	e7ec      	b.n	60a <_ZN3GSM9GetAllNumEP6VectorIPcE+0x7e>
    free(data);
     630:	0030      	movs	r0, r6
     632:	f002 f881 	bl	2738 <free>
    return count;
     636:	e7b4      	b.n	5a2 <_ZN3GSM9GetAllNumEP6VectorIPcE+0x16>
     638:	00000bb8 	.word	0x00000bb8
     63c:	0000353d 	.word	0x0000353d
     640:	00003494 	.word	0x00003494
     644:	000038ba 	.word	0x000038ba

00000648 <_ZL12func_listnumP3GSMPKcS2_>:
static void func_listnum(GSM* gsm, const char* sender, const char* args) {
     648:	b5f0      	push	{r4, r5, r6, r7, lr}
     64a:	2400      	movs	r4, #0
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     64c:	4b21      	ldr	r3, [pc, #132]	; (6d4 <_ZL12func_listnumP3GSMPKcS2_+0x8c>)
     64e:	b087      	sub	sp, #28
     650:	681b      	ldr	r3, [r3, #0]
     652:	0005      	movs	r5, r0
     654:	000e      	movs	r6, r1
        reserve_discard(buf_len);
     656:	a802      	add	r0, sp, #8
     658:	2107      	movs	r1, #7
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     65a:	9302      	str	r3, [sp, #8]
    Capacity = 0;
     65c:	9403      	str	r4, [sp, #12]
        reserve_discard(buf_len);
     65e:	f000 ff2f 	bl	14c0 <_ZN3Str15reserve_discardEi>
    memcpy(Data, src, buf_len);
     662:	2207      	movs	r2, #7
     664:	491c      	ldr	r1, [pc, #112]	; (6d8 <_ZL12func_listnumP3GSMPKcS2_+0x90>)
     666:	9802      	ldr	r0, [sp, #8]
     668:	f002 f870 	bl	274c <memcpy>
    Owned = 1;
     66c:	ab02      	add	r3, sp, #8
     66e:	79da      	ldrb	r2, [r3, #7]
     670:	2380      	movs	r3, #128	; 0x80
     672:	425b      	negs	r3, r3
     674:	4313      	orrs	r3, r2
     676:	aa02      	add	r2, sp, #8
     678:	71d3      	strb	r3, [r2, #7]
    gsm->GetAllNum(&list);
     67a:	0028      	movs	r0, r5
     67c:	a904      	add	r1, sp, #16
    Vector() : m_size(0), m_data(NULL) {}
     67e:	9404      	str	r4, [sp, #16]
     680:	9405      	str	r4, [sp, #20]
     682:	f7ff ff83 	bl	58c <_ZN3GSM9GetAllNumEP6VectorIPcE>
        return m_data + m_size;
     686:	9a05      	ldr	r2, [sp, #20]
     688:	9b04      	ldr	r3, [sp, #16]
     68a:	0014      	movs	r4, r2
     68c:	009b      	lsls	r3, r3, #2
     68e:	18d3      	adds	r3, r2, r3
     690:	9301      	str	r3, [sp, #4]
    for(auto num : list) {
     692:	9b01      	ldr	r3, [sp, #4]
     694:	42a3      	cmp	r3, r4
     696:	d00e      	beq.n	6b6 <_ZL12func_listnumP3GSMPKcS2_+0x6e>
     698:	cc80      	ldmia	r4!, {r7}
        str.appendf("%s: %c\n", num, gsm->GetNumLevel(num));
     69a:	0028      	movs	r0, r5
     69c:	0039      	movs	r1, r7
     69e:	f7ff fea1 	bl	3e4 <_ZN3GSM11GetNumLevelEPKc>
     6a2:	003a      	movs	r2, r7
     6a4:	0003      	movs	r3, r0
     6a6:	490d      	ldr	r1, [pc, #52]	; (6dc <_ZL12func_listnumP3GSMPKcS2_+0x94>)
     6a8:	a802      	add	r0, sp, #8
     6aa:	f000 ff91 	bl	15d0 <_ZN3Str7appendfEPKcz>
        free(num);
     6ae:	0038      	movs	r0, r7
     6b0:	f002 f842 	bl	2738 <free>
    for(auto num : list) {
     6b4:	e7ed      	b.n	692 <_ZL12func_listnumP3GSMPKcS2_+0x4a>
    gsm->SendSMS(sender, str.c_str());
     6b6:	0031      	movs	r1, r6
     6b8:	0028      	movs	r0, r5
     6ba:	9a02      	ldr	r2, [sp, #8]
     6bc:	f7ff fdd4 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
        if(m_data) free(m_data);
     6c0:	9805      	ldr	r0, [sp, #20]
     6c2:	2800      	cmp	r0, #0
     6c4:	d001      	beq.n	6ca <_ZL12func_listnumP3GSMPKcS2_+0x82>
     6c6:	f002 f837 	bl	2738 <free>
    Str str = "List:\n";
     6ca:	a802      	add	r0, sp, #8
     6cc:	f7ff fd18 	bl	100 <_ZN3StrD1Ev>
}
     6d0:	b007      	add	sp, #28
     6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6d4:	200001e8 	.word	0x200001e8
     6d8:	00003549 	.word	0x00003549
     6dc:	00003550 	.word	0x00003550

000006e0 <_ZN3GSM4InitEv>:
bool GSM::Init() {
     6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e2:	b087      	sub	sp, #28
     6e4:	0004      	movs	r4, r0
    if(!PowerOn())
     6e6:	f7ff fd7b 	bl	1e0 <_ZN3GSM7PowerOnEv>
     6ea:	2800      	cmp	r0, #0
     6ec:	d103      	bne.n	6f6 <_ZN3GSM4InitEv+0x16>
        return false;
     6ee:	2500      	movs	r5, #0
}
     6f0:	0028      	movs	r0, r5
     6f2:	b007      	add	sp, #28
     6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Command("ATE0");
     6f6:	4e25      	ldr	r6, [pc, #148]	; (78c <_ZN3GSM4InitEv+0xac>)
     6f8:	2200      	movs	r2, #0
     6fa:	0033      	movs	r3, r6
     6fc:	4924      	ldr	r1, [pc, #144]	; (790 <_ZN3GSM4InitEv+0xb0>)
     6fe:	0020      	movs	r0, r4
     700:	f7ff fd1c 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    if(!RepeatCommand("AT+CREG?", "+CREG: 0,1", 25))
     704:	2319      	movs	r3, #25
     706:	0020      	movs	r0, r4
     708:	4a22      	ldr	r2, [pc, #136]	; (794 <_ZN3GSM4InitEv+0xb4>)
     70a:	4923      	ldr	r1, [pc, #140]	; (798 <_ZN3GSM4InitEv+0xb8>)
     70c:	9600      	str	r6, [sp, #0]
     70e:	f7ff fd4d 	bl	1ac <_ZN3GSM13RepeatCommandEPKcS1_ii>
     712:	1e05      	subs	r5, r0, #0
     714:	d0eb      	beq.n	6ee <_ZN3GSM4InitEv+0xe>
    Command("AT+CMGF=1"); // SMS text mode
     716:	0033      	movs	r3, r6
     718:	2200      	movs	r2, #0
     71a:	4920      	ldr	r1, [pc, #128]	; (79c <_ZN3GSM4InitEv+0xbc>)
     71c:	0020      	movs	r0, r4
     71e:	f7ff fd0d 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms
     722:	0033      	movs	r3, r6
     724:	2200      	movs	r2, #0
     726:	491e      	ldr	r1, [pc, #120]	; (7a0 <_ZN3GSM4InitEv+0xc0>)
     728:	0020      	movs	r0, r4
     72a:	f7ff fd07 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
        m_rxhead = 0;
     72e:	2180      	movs	r1, #128	; 0x80
     730:	2300      	movs	r3, #0
    m_uart->flush_rx();
     732:	68a2      	ldr	r2, [r4, #8]
     734:	0089      	lsls	r1, r1, #2
     736:	5253      	strh	r3, [r2, r1]
        m_rxtail = 0;
     738:	491a      	ldr	r1, [pc, #104]	; (7a4 <_ZN3GSM4InitEv+0xc4>)
     73a:	5253      	strh	r3, [r2, r1]
        m_rxfull = false;
     73c:	3102      	adds	r1, #2
     73e:	5453      	strb	r3, [r2, r1]
    if(PM->RCAUSE.bit.SYST) {
     740:	4a19      	ldr	r2, [pc, #100]	; (7a8 <_ZN3GSM4InitEv+0xc8>)
     742:	7812      	ldrb	r2, [r2, #0]
     744:	0652      	lsls	r2, r2, #25
     746:	0fd1      	lsrs	r1, r2, #31
     748:	9103      	str	r1, [sp, #12]
     74a:	429a      	cmp	r2, r3
     74c:	dad0      	bge.n	6f0 <_ZN3GSM4InitEv+0x10>
        GetAllNum(&list);
     74e:	0020      	movs	r0, r4
     750:	a904      	add	r1, sp, #16
    Vector() : m_size(0), m_data(NULL) {}
     752:	9304      	str	r3, [sp, #16]
     754:	9305      	str	r3, [sp, #20]
     756:	f7ff ff19 	bl	58c <_ZN3GSM9GetAllNumEP6VectorIPcE>
        return m_data + m_size;
     75a:	9b04      	ldr	r3, [sp, #16]
     75c:	009e      	lsls	r6, r3, #2
     75e:	9b05      	ldr	r3, [sp, #20]
     760:	001d      	movs	r5, r3
     762:	199e      	adds	r6, r3, r6
        for(auto num : list) {
     764:	42ae      	cmp	r6, r5
     766:	d009      	beq.n	77c <_ZN3GSM4InitEv+0x9c>
     768:	cd80      	ldmia	r5!, {r7}
            SendSMS(num, "Update successful, version " VERSION);
     76a:	0020      	movs	r0, r4
     76c:	0039      	movs	r1, r7
     76e:	4a0f      	ldr	r2, [pc, #60]	; (7ac <_ZN3GSM4InitEv+0xcc>)
     770:	f7ff fd7a 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
            free(num);
     774:	0038      	movs	r0, r7
     776:	f001 ffdf 	bl	2738 <free>
        for(auto num : list) {
     77a:	e7f3      	b.n	764 <_ZN3GSM4InitEv+0x84>
        if(m_data) free(m_data);
     77c:	9805      	ldr	r0, [sp, #20]
     77e:	2800      	cmp	r0, #0
     780:	d001      	beq.n	786 <_ZN3GSM4InitEv+0xa6>
     782:	f001 ffd9 	bl	2738 <free>
    return true;
     786:	9d03      	ldr	r5, [sp, #12]
     788:	e7b2      	b.n	6f0 <_ZN3GSM4InitEv+0x10>
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	00000bb8 	.word	0x00000bb8
     790:	00003558 	.word	0x00003558
     794:	0000355d 	.word	0x0000355d
     798:	00003568 	.word	0x00003568
     79c:	00003571 	.word	0x00003571
     7a0:	0000357b 	.word	0x0000357b
     7a4:	00000202 	.word	0x00000202
     7a8:	40000438 	.word	0x40000438
     7ac:	0000358e 	.word	0x0000358e

000007b0 <_ZN3GSM10ProcessSMSEPKcS1_>:
void GSM::ProcessSMS(const char* text, const char* sender) {
     7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7b2:	b085      	sub	sp, #20
     7b4:	9102      	str	r1, [sp, #8]
     7b6:	0004      	movs	r4, r0
    char* args_start = strchr(text, ' ');
     7b8:	2120      	movs	r1, #32
     7ba:	9802      	ldr	r0, [sp, #8]
void GSM::ProcessSMS(const char* text, const char* sender) {
     7bc:	0017      	movs	r7, r2
    char* args_start = strchr(text, ' ');
     7be:	f002 f8f7 	bl	29b0 <strchr>
     7c2:	1e05      	subs	r5, r0, #0
    if(args_start) {
     7c4:	d002      	beq.n	7cc <_ZN3GSM10ProcessSMSEPKcS1_+0x1c>
        *args_start = '\0';
     7c6:	2300      	movs	r3, #0
        args_start += 1;
     7c8:	3501      	adds	r5, #1
        *args_start = '\0';
     7ca:	7003      	strb	r3, [r0, #0]
        return m_data + m_size;
     7cc:	230c      	movs	r3, #12
     7ce:	68e2      	ldr	r2, [r4, #12]
     7d0:	4353      	muls	r3, r2
     7d2:	6922      	ldr	r2, [r4, #16]
     7d4:	18d3      	adds	r3, r2, r3
     7d6:	9303      	str	r3, [sp, #12]
     7d8:	0013      	movs	r3, r2
    for(auto& func : m_smsfuncs) {
     7da:	9a03      	ldr	r2, [sp, #12]
     7dc:	001e      	movs	r6, r3
     7de:	429a      	cmp	r2, r3
     7e0:	d014      	beq.n	80c <_ZN3GSM10ProcessSMSEPKcS1_+0x5c>
        if(strcasecmp(func.key, text) == 0) {
     7e2:	6818      	ldr	r0, [r3, #0]
     7e4:	9902      	ldr	r1, [sp, #8]
     7e6:	f002 f8c9 	bl	297c <strcasecmp>
     7ea:	0033      	movs	r3, r6
     7ec:	9001      	str	r0, [sp, #4]
     7ee:	330c      	adds	r3, #12
     7f0:	2800      	cmp	r0, #0
     7f2:	d1f2      	bne.n	7da <_ZN3GSM10ProcessSMSEPKcS1_+0x2a>
            if(GetNumLevel(sender) >= func.level || GetAllNum() == 0)
     7f4:	0039      	movs	r1, r7
     7f6:	0020      	movs	r0, r4
     7f8:	f7ff fdf4 	bl	3e4 <_ZN3GSM11GetNumLevelEPKc>
     7fc:	7a33      	ldrb	r3, [r6, #8]
     7fe:	4283      	cmp	r3, r0
     800:	d806      	bhi.n	810 <_ZN3GSM10ProcessSMSEPKcS1_+0x60>
                func.callback(this, sender, args_start);
     802:	002a      	movs	r2, r5
     804:	0039      	movs	r1, r7
     806:	0020      	movs	r0, r4
     808:	6873      	ldr	r3, [r6, #4]
     80a:	4798      	blx	r3
}
     80c:	b005      	add	sp, #20
     80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(GetNumLevel(sender) >= func.level || GetAllNum() == 0)
     810:	0020      	movs	r0, r4
     812:	9901      	ldr	r1, [sp, #4]
     814:	f7ff feba 	bl	58c <_ZN3GSM9GetAllNumEP6VectorIPcE>
     818:	2800      	cmp	r0, #0
     81a:	d0f2      	beq.n	802 <_ZN3GSM10ProcessSMSEPKcS1_+0x52>
     81c:	e7f6      	b.n	80c <_ZN3GSM10ProcessSMSEPKcS1_+0x5c>
     81e:	Address 0x0000081e is out of bounds.


00000820 <_ZN3GSM7ReadSMSEi>:
void GSM::ReadSMS(int index) {
     820:	b5f0      	push	{r4, r5, r6, r7, lr}
     822:	0007      	movs	r7, r0
     824:	b091      	sub	sp, #68	; 0x44
     826:	000b      	movs	r3, r1
    snprintf(buf, sizeof(buf), "AT+CMGR=%d", index);
     828:	4a1f      	ldr	r2, [pc, #124]	; (8a8 <_ZN3GSM7ReadSMSEi+0x88>)
     82a:	2140      	movs	r1, #64	; 0x40
     82c:	4668      	mov	r0, sp
     82e:	f002 f871 	bl	2914 <sniprintf>
    if(!Command(buf, "+CMGR"))
     832:	4d1e      	ldr	r5, [pc, #120]	; (8ac <_ZN3GSM7ReadSMSEi+0x8c>)
     834:	4669      	mov	r1, sp
     836:	002a      	movs	r2, r5
     838:	0038      	movs	r0, r7
     83a:	4b1d      	ldr	r3, [pc, #116]	; (8b0 <_ZN3GSM7ReadSMSEi+0x90>)
     83c:	f7ff fc7e 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     840:	2800      	cmp	r0, #0
     842:	d010      	beq.n	866 <_ZN3GSM7ReadSMSEi+0x46>
    char* data = m_uart->read();
     844:	68b8      	ldr	r0, [r7, #8]
     846:	f001 fc13 	bl	2070 <_ZN6uart_t4readEv>
     84a:	1e04      	subs	r4, r0, #0
    if(!data) return;
     84c:	d00b      	beq.n	866 <_ZN3GSM7ReadSMSEi+0x46>
    char* cmgr_start = strstr(data, "+CMGR"); // this shouldn't return null
     84e:	0029      	movs	r1, r5
     850:	f002 f8fa 	bl	2a48 <strstr>
    char* text = strchr(cmgr_start, '\n');
     854:	210a      	movs	r1, #10
    char* cmgr_start = strstr(data, "+CMGR"); // this shouldn't return null
     856:	0006      	movs	r6, r0
    char* text = strchr(cmgr_start, '\n');
     858:	f002 f8aa 	bl	29b0 <strchr>
     85c:	1e05      	subs	r5, r0, #0
    if(!text) {
     85e:	d104      	bne.n	86a <_ZN3GSM7ReadSMSEi+0x4a>
    free(data);
     860:	0020      	movs	r0, r4
     862:	f001 ff69 	bl	2738 <free>
}
     866:	b011      	add	sp, #68	; 0x44
     868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    text += 1; // ignore \n
     86a:	3501      	adds	r5, #1
    char* text_end = strstr(text, "\r\n\r\nOK");
     86c:	0028      	movs	r0, r5
     86e:	4911      	ldr	r1, [pc, #68]	; (8b4 <_ZN3GSM7ReadSMSEi+0x94>)
     870:	f002 f8ea 	bl	2a48 <strstr>
    if(!text_end) {
     874:	2800      	cmp	r0, #0
     876:	d0f3      	beq.n	860 <_ZN3GSM7ReadSMSEi+0x40>
    *text_end = '\0';
     878:	2300      	movs	r3, #0
    char* sender = strstr(cmgr_start, ",\"");
     87a:	490f      	ldr	r1, [pc, #60]	; (8b8 <_ZN3GSM7ReadSMSEi+0x98>)
    *text_end = '\0';
     87c:	7003      	strb	r3, [r0, #0]
    char* sender = strstr(cmgr_start, ",\"");
     87e:	0030      	movs	r0, r6
     880:	f002 f8e2 	bl	2a48 <strstr>
     884:	1e06      	subs	r6, r0, #0
    if(!sender) {
     886:	d0eb      	beq.n	860 <_ZN3GSM7ReadSMSEi+0x40>
    sender += 2;
     888:	3602      	adds	r6, #2
    if(!strchr(sender, '"')) {
     88a:	2122      	movs	r1, #34	; 0x22
     88c:	0030      	movs	r0, r6
     88e:	f002 f88f 	bl	29b0 <strchr>
     892:	2800      	cmp	r0, #0
     894:	d0e4      	beq.n	860 <_ZN3GSM7ReadSMSEi+0x40>
    *strchr(sender, '"') = '\0';
     896:	2300      	movs	r3, #0
    ProcessSMS(text, sender);
     898:	0032      	movs	r2, r6
    *strchr(sender, '"') = '\0';
     89a:	7003      	strb	r3, [r0, #0]
    ProcessSMS(text, sender);
     89c:	0029      	movs	r1, r5
     89e:	0038      	movs	r0, r7
     8a0:	f7ff ff86 	bl	7b0 <_ZN3GSM10ProcessSMSEPKcS1_>
     8a4:	e7dc      	b.n	860 <_ZN3GSM7ReadSMSEi+0x40>
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	000035c8 	.word	0x000035c8
     8ac:	000035d3 	.word	0x000035d3
     8b0:	00000bb8 	.word	0x00000bb8
     8b4:	000035d9 	.word	0x000035d9
     8b8:	000035e0 	.word	0x000035e0

000008bc <_ZN3GSM4PollEv>:
void GSM::Poll() {
     8bc:	b570      	push	{r4, r5, r6, lr}
     8be:	0005      	movs	r5, r0
    if(!m_uart->available()) return;
     8c0:	6880      	ldr	r0, [r0, #8]
     8c2:	f7ff fc07 	bl	d4 <_ZN6uart_t9availableEv>
     8c6:	2800      	cmp	r0, #0
     8c8:	d015      	beq.n	8f6 <_ZN3GSM4PollEv+0x3a>
    delay_usec(100000);
     8ca:	4816      	ldr	r0, [pc, #88]	; (924 <_ZN3GSM4PollEv+0x68>)
     8cc:	f003 f8f8 	bl	3ac0 <__delay_usec_veneer>
    char* data = m_uart->read();
     8d0:	68a8      	ldr	r0, [r5, #8]
     8d2:	f001 fbcd 	bl	2070 <_ZN6uart_t4readEv>
     8d6:	1e04      	subs	r4, r0, #0
    if(!data) return;
     8d8:	d00d      	beq.n	8f6 <_ZN3GSM4PollEv+0x3a>
    if(strstr(data, "RING")) {
     8da:	4913      	ldr	r1, [pc, #76]	; (928 <_ZN3GSM4PollEv+0x6c>)
     8dc:	f002 f8b4 	bl	2a48 <strstr>
     8e0:	2800      	cmp	r0, #0
     8e2:	d009      	beq.n	8f8 <_ZN3GSM4PollEv+0x3c>
        Command("ATH"); // Disconnect call
     8e4:	2200      	movs	r2, #0
     8e6:	0028      	movs	r0, r5
     8e8:	4b10      	ldr	r3, [pc, #64]	; (92c <_ZN3GSM4PollEv+0x70>)
     8ea:	4911      	ldr	r1, [pc, #68]	; (930 <_ZN3GSM4PollEv+0x74>)
     8ec:	f7ff fc26 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    free(data);
     8f0:	0020      	movs	r0, r4
     8f2:	f001 ff21 	bl	2738 <free>
}
     8f6:	bd70      	pop	{r4, r5, r6, pc}
    } else if(strstr(data, "+CMTI")) {
     8f8:	0020      	movs	r0, r4
     8fa:	490e      	ldr	r1, [pc, #56]	; (934 <_ZN3GSM4PollEv+0x78>)
     8fc:	f002 f8a4 	bl	2a48 <strstr>
     900:	2800      	cmp	r0, #0
     902:	d0f5      	beq.n	8f0 <_ZN3GSM4PollEv+0x34>
    while(*str) {
     904:	7801      	ldrb	r1, [r0, #0]
     906:	2900      	cmp	r1, #0
     908:	d005      	beq.n	916 <_ZN3GSM4PollEv+0x5a>
        if(isdigit(*str))
     90a:	3930      	subs	r1, #48	; 0x30
     90c:	2909      	cmp	r1, #9
     90e:	d806      	bhi.n	91e <_ZN3GSM4PollEv+0x62>
            return atoi(str);
     910:	f001 fec6 	bl	26a0 <atoi>
     914:	0001      	movs	r1, r0
        ReadSMS(find_num(strstr(data, "+CMTI")));
     916:	0028      	movs	r0, r5
     918:	f7ff ff82 	bl	820 <_ZN3GSM7ReadSMSEi>
     91c:	e7e8      	b.n	8f0 <_ZN3GSM4PollEv+0x34>
        str++;
     91e:	3001      	adds	r0, #1
    while(*str) {
     920:	e7f0      	b.n	904 <_ZN3GSM4PollEv+0x48>
     922:	46c0      	nop			; (mov r8, r8)
     924:	000186a0 	.word	0x000186a0
     928:	000035e3 	.word	0x000035e3
     92c:	00000bb8 	.word	0x00000bb8
     930:	000035e8 	.word	0x000035e8
     934:	000035ec 	.word	0x000035ec

00000938 <_ZN3GSM12InitInternetEv>:
bool GSM::InitInternet() {
     938:	b573      	push	{r0, r1, r4, r5, r6, lr}
     93a:	0004      	movs	r4, r0
    Command("AT+SAPBR=3,1,\"APN\",\"internet\"");
     93c:	4e0e      	ldr	r6, [pc, #56]	; (978 <_ZN3GSM12InitInternetEv+0x40>)
     93e:	2200      	movs	r2, #0
     940:	0033      	movs	r3, r6
     942:	490e      	ldr	r1, [pc, #56]	; (97c <_ZN3GSM12InitInternetEv+0x44>)
     944:	f7ff fbfa 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    Command("AT+SAPBR=1,1"); // Open bearer
     948:	0033      	movs	r3, r6
     94a:	2200      	movs	r2, #0
     94c:	490c      	ldr	r1, [pc, #48]	; (980 <_ZN3GSM12InitInternetEv+0x48>)
     94e:	0020      	movs	r0, r4
     950:	f7ff fbf4 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    if(!RepeatCommand("AT+SAPBR=2,1", "+SAPBR: 1,1", 25)) {
     954:	2319      	movs	r3, #25
     956:	0020      	movs	r0, r4
     958:	4a0a      	ldr	r2, [pc, #40]	; (984 <_ZN3GSM12InitInternetEv+0x4c>)
     95a:	490b      	ldr	r1, [pc, #44]	; (988 <_ZN3GSM12InitInternetEv+0x50>)
     95c:	9600      	str	r6, [sp, #0]
     95e:	f7ff fc25 	bl	1ac <_ZN3GSM13RepeatCommandEPKcS1_ii>
     962:	1e05      	subs	r5, r0, #0
     964:	d105      	bne.n	972 <_ZN3GSM12InitInternetEv+0x3a>
        Command("AT+SAPBR=0,1"); // Close bearer
     966:	0002      	movs	r2, r0
     968:	0033      	movs	r3, r6
     96a:	0020      	movs	r0, r4
     96c:	4907      	ldr	r1, [pc, #28]	; (98c <_ZN3GSM12InitInternetEv+0x54>)
     96e:	f7ff fbe5 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
}
     972:	0028      	movs	r0, r5
     974:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
     976:	46c0      	nop			; (mov r8, r8)
     978:	00000bb8 	.word	0x00000bb8
     97c:	000035f2 	.word	0x000035f2
     980:	00003610 	.word	0x00003610
     984:	0000361d 	.word	0x0000361d
     988:	00003629 	.word	0x00003629
     98c:	00003636 	.word	0x00003636

00000990 <_ZN3GSM8SetupFTPEv>:

bool GSM::SetupFTP() {
     990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(!Command("AT+FSREAD=C:\\ftp.dat,0,64,0", "OK"))
     992:	4b38      	ldr	r3, [pc, #224]	; (a74 <_ZN3GSM8SetupFTPEv+0xe4>)
     994:	4a38      	ldr	r2, [pc, #224]	; (a78 <_ZN3GSM8SetupFTPEv+0xe8>)
     996:	4939      	ldr	r1, [pc, #228]	; (a7c <_ZN3GSM8SetupFTPEv+0xec>)
bool GSM::SetupFTP() {
     998:	0004      	movs	r4, r0
    if(!Command("AT+FSREAD=C:\\ftp.dat,0,64,0", "OK"))
     99a:	f7ff fbcf 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     99e:	9000      	str	r0, [sp, #0]
     9a0:	2800      	cmp	r0, #0
     9a2:	d103      	bne.n	9ac <_ZN3GSM8SetupFTPEv+0x1c>
    uname = strtok(NULL, " ");
    pass = strtok(NULL, " \r");

    if(!host || !uname || !pass) {
        free(buf);
        return false;
     9a4:	2300      	movs	r3, #0
     9a6:	9300      	str	r3, [sp, #0]
    m_uart->print(pass);
    Command("");

    free(buf);
    return true;
}
     9a8:	9800      	ldr	r0, [sp, #0]
     9aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if(m_uart->available() < 3) return 0;
     9ac:	68a0      	ldr	r0, [r4, #8]
     9ae:	f7ff fb91 	bl	d4 <_ZN6uart_t9availableEv>
     9b2:	2802      	cmp	r0, #2
     9b4:	d9f6      	bls.n	9a4 <_ZN3GSM8SetupFTPEv+0x14>
    m_uart->getc(); m_uart->getc(); // skip \r\n
     9b6:	68a0      	ldr	r0, [r4, #8]
     9b8:	f001 faf2 	bl	1fa0 <_ZN6uart_t4getcEv>
     9bc:	68a0      	ldr	r0, [r4, #8]
     9be:	f001 faef 	bl	1fa0 <_ZN6uart_t4getcEv>
    char* buf = m_uart->read();
     9c2:	68a0      	ldr	r0, [r4, #8]
     9c4:	f001 fb54 	bl	2070 <_ZN6uart_t4readEv>
     9c8:	1e05      	subs	r5, r0, #0
    if(!buf) return false;
     9ca:	d0eb      	beq.n	9a4 <_ZN3GSM8SetupFTPEv+0x14>
    host = strtok(buf, " ");
     9cc:	4f2c      	ldr	r7, [pc, #176]	; (a80 <_ZN3GSM8SetupFTPEv+0xf0>)
     9ce:	0039      	movs	r1, r7
     9d0:	f002 f850 	bl	2a74 <strtok>
    uname = strtok(NULL, " ");
     9d4:	0039      	movs	r1, r7
    host = strtok(buf, " ");
     9d6:	0006      	movs	r6, r0
    uname = strtok(NULL, " ");
     9d8:	2000      	movs	r0, #0
     9da:	f002 f84b 	bl	2a74 <strtok>
    pass = strtok(NULL, " \r");
     9de:	4929      	ldr	r1, [pc, #164]	; (a84 <_ZN3GSM8SetupFTPEv+0xf4>)
    uname = strtok(NULL, " ");
     9e0:	0007      	movs	r7, r0
    pass = strtok(NULL, " \r");
     9e2:	2000      	movs	r0, #0
     9e4:	f002 f846 	bl	2a74 <strtok>
     9e8:	9001      	str	r0, [sp, #4]
    if(!host || !uname || !pass) {
     9ea:	2e00      	cmp	r6, #0
     9ec:	d003      	beq.n	9f6 <_ZN3GSM8SetupFTPEv+0x66>
     9ee:	2f00      	cmp	r7, #0
     9f0:	d001      	beq.n	9f6 <_ZN3GSM8SetupFTPEv+0x66>
     9f2:	2800      	cmp	r0, #0
     9f4:	d103      	bne.n	9fe <_ZN3GSM8SetupFTPEv+0x6e>
        free(buf);
     9f6:	0028      	movs	r0, r5
     9f8:	f001 fe9e 	bl	2738 <free>
     9fc:	e7d2      	b.n	9a4 <_ZN3GSM8SetupFTPEv+0x14>
    m_uart->print("AT+FTPSERV=");
     9fe:	2201      	movs	r2, #1
     a00:	68a0      	ldr	r0, [r4, #8]
     a02:	4921      	ldr	r1, [pc, #132]	; (a88 <_ZN3GSM8SetupFTPEv+0xf8>)
     a04:	4252      	negs	r2, r2
     a06:	f001 fa9d 	bl	1f44 <_ZN6uart_t5printEPKci>
    m_uart->print(host);
     a0a:	2201      	movs	r2, #1
     a0c:	0031      	movs	r1, r6
     a0e:	68a0      	ldr	r0, [r4, #8]
     a10:	4252      	negs	r2, r2
     a12:	f001 fa97 	bl	1f44 <_ZN6uart_t5printEPKci>
    Command("");
     a16:	4e1d      	ldr	r6, [pc, #116]	; (a8c <_ZN3GSM8SetupFTPEv+0xfc>)
     a18:	4b16      	ldr	r3, [pc, #88]	; (a74 <_ZN3GSM8SetupFTPEv+0xe4>)
     a1a:	0031      	movs	r1, r6
     a1c:	2200      	movs	r2, #0
     a1e:	0020      	movs	r0, r4
     a20:	f7ff fb8c 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    m_uart->print("AT+FTPUN=");
     a24:	2201      	movs	r2, #1
     a26:	68a0      	ldr	r0, [r4, #8]
     a28:	4919      	ldr	r1, [pc, #100]	; (a90 <_ZN3GSM8SetupFTPEv+0x100>)
     a2a:	4252      	negs	r2, r2
     a2c:	f001 fa8a 	bl	1f44 <_ZN6uart_t5printEPKci>
    m_uart->print(uname);
     a30:	2201      	movs	r2, #1
     a32:	0039      	movs	r1, r7
     a34:	68a0      	ldr	r0, [r4, #8]
     a36:	4252      	negs	r2, r2
     a38:	f001 fa84 	bl	1f44 <_ZN6uart_t5printEPKci>
    Command("");
     a3c:	4b0d      	ldr	r3, [pc, #52]	; (a74 <_ZN3GSM8SetupFTPEv+0xe4>)
     a3e:	0031      	movs	r1, r6
     a40:	2200      	movs	r2, #0
     a42:	0020      	movs	r0, r4
     a44:	f7ff fb7a 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    m_uart->print("AT+FTPPW=");
     a48:	2201      	movs	r2, #1
     a4a:	68a0      	ldr	r0, [r4, #8]
     a4c:	4911      	ldr	r1, [pc, #68]	; (a94 <_ZN3GSM8SetupFTPEv+0x104>)
     a4e:	4252      	negs	r2, r2
     a50:	f001 fa78 	bl	1f44 <_ZN6uart_t5printEPKci>
    m_uart->print(pass);
     a54:	2201      	movs	r2, #1
     a56:	9901      	ldr	r1, [sp, #4]
     a58:	68a0      	ldr	r0, [r4, #8]
     a5a:	4252      	negs	r2, r2
     a5c:	f001 fa72 	bl	1f44 <_ZN6uart_t5printEPKci>
    Command("");
     a60:	2200      	movs	r2, #0
     a62:	0031      	movs	r1, r6
     a64:	0020      	movs	r0, r4
     a66:	4b03      	ldr	r3, [pc, #12]	; (a74 <_ZN3GSM8SetupFTPEv+0xe4>)
     a68:	f7ff fb68 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    free(buf);
     a6c:	0028      	movs	r0, r5
     a6e:	f001 fe63 	bl	2738 <free>
    return true;
     a72:	e799      	b.n	9a8 <_ZN3GSM8SetupFTPEv+0x18>
     a74:	00000bb8 	.word	0x00000bb8
     a78:	000035dd 	.word	0x000035dd
     a7c:	00003643 	.word	0x00003643
     a80:	00003a54 	.word	0x00003a54
     a84:	0000365f 	.word	0x0000365f
     a88:	00003662 	.word	0x00003662
     a8c:	00003496 	.word	0x00003496
     a90:	0000366e 	.word	0x0000366e
     a94:	00003678 	.word	0x00003678

00000a98 <_ZN3GSM8FTPWriteEPKcS1_>:

bool GSM::FTPWrite(const char* fname, const char* text) {
     a98:	b570      	push	{r4, r5, r6, lr}
     a9a:	b090      	sub	sp, #64	; 0x40
     a9c:	0004      	movs	r4, r0
     a9e:	000e      	movs	r6, r1
     aa0:	0015      	movs	r5, r2
    if(!SetupFTP()) return false;
     aa2:	f7ff ff75 	bl	990 <_ZN3GSM8SetupFTPEv>
     aa6:	2800      	cmp	r0, #0
     aa8:	d103      	bne.n	ab2 <_ZN3GSM8FTPWriteEPKcS1_+0x1a>

    // Max response time: 75 seconds (In case no response is received from server)
    Command("AT+FTPPUT=1");
    if(!Command("", "+FTPPUT: 1,1,", 75000)) {
        Command("AT+SAPBR=0,1"); // Close bearer
        return false;
     aaa:	2500      	movs	r5, #0
    }
    
    Command("AT+SAPBR=0,1"); // Close bearer

    return true;
}
     aac:	0028      	movs	r0, r5
     aae:	b010      	add	sp, #64	; 0x40
     ab0:	bd70      	pop	{r4, r5, r6, pc}
	Command("AT+FTPPUTPATH=/");
     ab2:	4b2b      	ldr	r3, [pc, #172]	; (b60 <_ZN3GSM8FTPWriteEPKcS1_+0xc8>)
     ab4:	2200      	movs	r2, #0
     ab6:	492b      	ldr	r1, [pc, #172]	; (b64 <_ZN3GSM8FTPWriteEPKcS1_+0xcc>)
     ab8:	0020      	movs	r0, r4
     aba:	f7ff fb3f 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    m_uart->print("AT+FTPPUTNAME=");
     abe:	2201      	movs	r2, #1
     ac0:	4929      	ldr	r1, [pc, #164]	; (b68 <_ZN3GSM8FTPWriteEPKcS1_+0xd0>)
     ac2:	68a0      	ldr	r0, [r4, #8]
     ac4:	4252      	negs	r2, r2
     ac6:	f001 fa3d 	bl	1f44 <_ZN6uart_t5printEPKci>
	Command(fname);
     aca:	2200      	movs	r2, #0
     acc:	0031      	movs	r1, r6
     ace:	4b24      	ldr	r3, [pc, #144]	; (b60 <_ZN3GSM8FTPWriteEPKcS1_+0xc8>)
     ad0:	0020      	movs	r0, r4
     ad2:	f7ff fb33 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
	Command("AT+FTPPUTOPT=\"APPE\"");
     ad6:	2200      	movs	r2, #0
     ad8:	0020      	movs	r0, r4
     ada:	4b21      	ldr	r3, [pc, #132]	; (b60 <_ZN3GSM8FTPWriteEPKcS1_+0xc8>)
     adc:	4923      	ldr	r1, [pc, #140]	; (b6c <_ZN3GSM8FTPWriteEPKcS1_+0xd4>)
     ade:	f7ff fb2d 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    if(!InitInternet())
     ae2:	0020      	movs	r0, r4
     ae4:	f7ff ff28 	bl	938 <_ZN3GSM12InitInternetEv>
     ae8:	2800      	cmp	r0, #0
     aea:	d0de      	beq.n	aaa <_ZN3GSM8FTPWriteEPKcS1_+0x12>
    Command("AT+FTPPUT=1");
     aec:	2200      	movs	r2, #0
     aee:	4b1c      	ldr	r3, [pc, #112]	; (b60 <_ZN3GSM8FTPWriteEPKcS1_+0xc8>)
     af0:	491f      	ldr	r1, [pc, #124]	; (b70 <_ZN3GSM8FTPWriteEPKcS1_+0xd8>)
     af2:	0020      	movs	r0, r4
     af4:	f7ff fb22 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    if(!Command("", "+FTPPUT: 1,1,", 75000)) {
     af8:	0020      	movs	r0, r4
     afa:	4b1e      	ldr	r3, [pc, #120]	; (b74 <_ZN3GSM8FTPWriteEPKcS1_+0xdc>)
     afc:	4a1e      	ldr	r2, [pc, #120]	; (b78 <_ZN3GSM8FTPWriteEPKcS1_+0xe0>)
     afe:	491f      	ldr	r1, [pc, #124]	; (b7c <_ZN3GSM8FTPWriteEPKcS1_+0xe4>)
     b00:	f7ff fb1c 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     b04:	4e1e      	ldr	r6, [pc, #120]	; (b80 <_ZN3GSM8FTPWriteEPKcS1_+0xe8>)
     b06:	2800      	cmp	r0, #0
     b08:	d106      	bne.n	b18 <_ZN3GSM8FTPWriteEPKcS1_+0x80>
        Command("AT+SAPBR=0,1"); // Close bearer
     b0a:	2200      	movs	r2, #0
     b0c:	0031      	movs	r1, r6
     b0e:	0020      	movs	r0, r4
     b10:	4b13      	ldr	r3, [pc, #76]	; (b60 <_ZN3GSM8FTPWriteEPKcS1_+0xc8>)
     b12:	f7ff fb13 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     b16:	e7c8      	b.n	aaa <_ZN3GSM8FTPWriteEPKcS1_+0x12>
    snprintf(buf, sizeof(buf), "AT+FTPPUT=2,%d", strlen(text));
     b18:	0028      	movs	r0, r5
     b1a:	f001 ff69 	bl	29f0 <strlen>
     b1e:	2140      	movs	r1, #64	; 0x40
     b20:	0003      	movs	r3, r0
     b22:	4a18      	ldr	r2, [pc, #96]	; (b84 <_ZN3GSM8FTPWriteEPKcS1_+0xec>)
     b24:	4668      	mov	r0, sp
     b26:	f001 fef5 	bl	2914 <sniprintf>
    Command(buf);
     b2a:	4b0d      	ldr	r3, [pc, #52]	; (b60 <_ZN3GSM8FTPWriteEPKcS1_+0xc8>)
     b2c:	2200      	movs	r2, #0
     b2e:	4669      	mov	r1, sp
     b30:	0020      	movs	r0, r4
     b32:	f7ff fb03 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    m_uart->print(text);
     b36:	2201      	movs	r2, #1
     b38:	0029      	movs	r1, r5
     b3a:	68a0      	ldr	r0, [r4, #8]
     b3c:	4252      	negs	r2, r2
     b3e:	f001 fa01 	bl	1f44 <_ZN6uart_t5printEPKci>
    if(!Command("AT+FTPPUT=2,0", "+FTPPUT: 1,0", 75000)) {
     b42:	0020      	movs	r0, r4
     b44:	4b0b      	ldr	r3, [pc, #44]	; (b74 <_ZN3GSM8FTPWriteEPKcS1_+0xdc>)
     b46:	4a10      	ldr	r2, [pc, #64]	; (b88 <_ZN3GSM8FTPWriteEPKcS1_+0xf0>)
     b48:	4910      	ldr	r1, [pc, #64]	; (b8c <_ZN3GSM8FTPWriteEPKcS1_+0xf4>)
     b4a:	f7ff faf7 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     b4e:	1e05      	subs	r5, r0, #0
     b50:	d0db      	beq.n	b0a <_ZN3GSM8FTPWriteEPKcS1_+0x72>
    Command("AT+SAPBR=0,1"); // Close bearer
     b52:	2200      	movs	r2, #0
     b54:	0031      	movs	r1, r6
     b56:	0020      	movs	r0, r4
     b58:	4b01      	ldr	r3, [pc, #4]	; (b60 <_ZN3GSM8FTPWriteEPKcS1_+0xc8>)
     b5a:	f7ff faef 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    return true;
     b5e:	e7a5      	b.n	aac <_ZN3GSM8FTPWriteEPKcS1_+0x14>
     b60:	00000bb8 	.word	0x00000bb8
     b64:	00003682 	.word	0x00003682
     b68:	00003692 	.word	0x00003692
     b6c:	000036a1 	.word	0x000036a1
     b70:	000036b5 	.word	0x000036b5
     b74:	000124f8 	.word	0x000124f8
     b78:	000036c1 	.word	0x000036c1
     b7c:	00003496 	.word	0x00003496
     b80:	00003636 	.word	0x00003636
     b84:	000036cf 	.word	0x000036cf
     b88:	000036de 	.word	0x000036de
     b8c:	000036eb 	.word	0x000036eb

00000b90 <_ZN3GSM13PerformUpdateEv>:

bool GSM::PerformUpdate(/*const char* server, const char* username, const char* password*/) {
     b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    Capacity = 0;
     b92:	2500      	movs	r5, #0
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     b94:	4b20      	ldr	r3, [pc, #128]	; (c18 <_ZN3GSM13PerformUpdateEv+0x88>)
     b96:	0004      	movs	r4, r0
     b98:	681b      	ldr	r3, [r3, #0]
    Capacity = 0;
     b9a:	9501      	str	r5, [sp, #4]
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     b9c:	9300      	str	r3, [sp, #0]
    Str cmd;

    if(!SetupFTP())
     b9e:	f7ff fef7 	bl	990 <_ZN3GSM8SetupFTPEv>
     ba2:	42a8      	cmp	r0, r5
     ba4:	d02a      	beq.n	bfc <_ZN3GSM13PerformUpdateEv+0x6c>
        return false;

    Command("AT+SAPBR=3,1,\"APN\",\"internet\"");
     ba6:	002a      	movs	r2, r5
     ba8:	4b1c      	ldr	r3, [pc, #112]	; (c1c <_ZN3GSM13PerformUpdateEv+0x8c>)
     baa:	491d      	ldr	r1, [pc, #116]	; (c20 <_ZN3GSM13PerformUpdateEv+0x90>)
     bac:	0020      	movs	r0, r4
     bae:	f7ff fac5 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
	Command(cmd.c_str());
    cmd.setf("AT+FTPUN=%s", username);
	Command(cmd.c_str());
    cmd.setf("AT+FTPPW=%s", password);
	Command(cmd.c_str());*/
	Command("AT+FTPGETPATH=/");
     bb2:	002a      	movs	r2, r5
     bb4:	4b19      	ldr	r3, [pc, #100]	; (c1c <_ZN3GSM13PerformUpdateEv+0x8c>)
     bb6:	491b      	ldr	r1, [pc, #108]	; (c24 <_ZN3GSM13PerformUpdateEv+0x94>)
     bb8:	0020      	movs	r0, r4
     bba:	f7ff fabf 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
	Command("AT+FTPGETNAME=update.bin");
     bbe:	002a      	movs	r2, r5
     bc0:	0020      	movs	r0, r4
     bc2:	4b16      	ldr	r3, [pc, #88]	; (c1c <_ZN3GSM13PerformUpdateEv+0x8c>)
     bc4:	4918      	ldr	r1, [pc, #96]	; (c28 <_ZN3GSM13PerformUpdateEv+0x98>)
     bc6:	f7ff fab9 	bl	13c <_ZN3GSM7CommandEPKcS1_j>

    if(!InitInternet())
     bca:	0020      	movs	r0, r4
     bcc:	f7ff feb4 	bl	938 <_ZN3GSM12InitInternetEv>
     bd0:	42a8      	cmp	r0, r5
     bd2:	d013      	beq.n	bfc <_ZN3GSM13PerformUpdateEv+0x6c>
        return false;

    // Max response time: 75 seconds (In case no response is received from server)
    Command("AT+FTPGETTOFS=0,update.bin"); // Get "OK" response first
     bd4:	002a      	movs	r2, r5
     bd6:	4b11      	ldr	r3, [pc, #68]	; (c1c <_ZN3GSM13PerformUpdateEv+0x8c>)
     bd8:	4914      	ldr	r1, [pc, #80]	; (c2c <_ZN3GSM13PerformUpdateEv+0x9c>)
     bda:	0020      	movs	r0, r4
     bdc:	f7ff faae 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    if(!Command("", "+FTPGETTOFS: 0,", 75000)) {
     be0:	4b13      	ldr	r3, [pc, #76]	; (c30 <_ZN3GSM13PerformUpdateEv+0xa0>)
     be2:	4a14      	ldr	r2, [pc, #80]	; (c34 <_ZN3GSM13PerformUpdateEv+0xa4>)
     be4:	4914      	ldr	r1, [pc, #80]	; (c38 <_ZN3GSM13PerformUpdateEv+0xa8>)
     be6:	0020      	movs	r0, r4
     be8:	f7ff faa8 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
     bec:	4913      	ldr	r1, [pc, #76]	; (c3c <_ZN3GSM13PerformUpdateEv+0xac>)
     bee:	0002      	movs	r2, r0
        Command("AT+SAPBR=0,1"); // Close bearer
     bf0:	4b0a      	ldr	r3, [pc, #40]	; (c1c <_ZN3GSM13PerformUpdateEv+0x8c>)
    if(!Command("", "+FTPGETTOFS: 0,", 75000)) {
     bf2:	42a8      	cmp	r0, r5
     bf4:	d107      	bne.n	c06 <_ZN3GSM13PerformUpdateEv+0x76>
        Command("AT+SAPBR=0,1"); // Close bearer
     bf6:	0020      	movs	r0, r4
     bf8:	f7ff faa0 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    Str cmd;
     bfc:	4668      	mov	r0, sp
     bfe:	f7ff fa7f 	bl	100 <_ZN3StrD1Ev>
    __disable_irq(); // Disable all interrupts

    WriteUpdate();

    return true;
}
     c02:	2000      	movs	r0, #0
     c04:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    Command("AT+SAPBR=0,1"); // Close bearer
     c06:	002a      	movs	r2, r5
     c08:	0020      	movs	r0, r4
     c0a:	f7ff fa97 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     c0e:	b672      	cpsid	i
    WriteUpdate();
     c10:	0020      	movs	r0, r4
     c12:	f002 ff4d 	bl	3ab0 <___ZN3GSM11WriteUpdateEv_veneer>
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	200001e8 	.word	0x200001e8
     c1c:	00000bb8 	.word	0x00000bb8
     c20:	000035f2 	.word	0x000035f2
     c24:	000036f9 	.word	0x000036f9
     c28:	00003709 	.word	0x00003709
     c2c:	00003722 	.word	0x00003722
     c30:	000124f8 	.word	0x000124f8
     c34:	0000373d 	.word	0x0000373d
     c38:	00003496 	.word	0x00003496
     c3c:	00003636 	.word	0x00003636

00000c40 <_ZL11func_updateP3GSMPKcS2_>:
static void func_update(GSM* gsm, const char* sender, const char* c_args) {
     c40:	b570      	push	{r4, r5, r6, lr}
     c42:	0004      	movs	r4, r0
     c44:	000d      	movs	r5, r1
    if(!gsm->PerformUpdate())
     c46:	f7ff ffa3 	bl	b90 <_ZN3GSM13PerformUpdateEv>
     c4a:	2800      	cmp	r0, #0
     c4c:	d104      	bne.n	c58 <_ZL11func_updateP3GSMPKcS2_+0x18>
        gsm->SendSMS(sender, "Update failed");
     c4e:	0029      	movs	r1, r5
     c50:	0020      	movs	r0, r4
     c52:	4a02      	ldr	r2, [pc, #8]	; (c5c <_ZL11func_updateP3GSMPKcS2_+0x1c>)
     c54:	f7ff fb08 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
}
     c58:	bd70      	pop	{r4, r5, r6, pc}
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	0000374d 	.word	0x0000374d

00000c60 <_ZN6VectorI7SMSFuncE9push_backERKS0_>:
    void push_back(const T& elem) {
     c60:	b570      	push	{r4, r5, r6, lr}
     c62:	000d      	movs	r5, r1
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     c64:	6801      	ldr	r1, [r0, #0]
    void push_back(const T& elem) {
     c66:	0004      	movs	r4, r0
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     c68:	2900      	cmp	r1, #0
     c6a:	d011      	beq.n	c90 <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x30>
     c6c:	230c      	movs	r3, #12
     c6e:	3101      	adds	r1, #1
     c70:	4359      	muls	r1, r3
     c72:	6840      	ldr	r0, [r0, #4]
     c74:	f001 fe32 	bl	28dc <realloc>
        if(!new_data) return;
     c78:	2800      	cmp	r0, #0
     c7a:	d008      	beq.n	c8e <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x2e>
        *(m_data + m_size) = elem;
     c7c:	220c      	movs	r2, #12
     c7e:	6823      	ldr	r3, [r4, #0]
        m_data = new_data;
     c80:	6060      	str	r0, [r4, #4]
        *(m_data + m_size) = elem;
     c82:	435a      	muls	r2, r3
        m_size++;
     c84:	3301      	adds	r3, #1
        *(m_data + m_size) = elem;
     c86:	1880      	adds	r0, r0, r2
     c88:	cd46      	ldmia	r5!, {r1, r2, r6}
     c8a:	c046      	stmia	r0!, {r1, r2, r6}
        m_size++;
     c8c:	6023      	str	r3, [r4, #0]
    }
     c8e:	bd70      	pop	{r4, r5, r6, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     c90:	200c      	movs	r0, #12
     c92:	f001 fd47 	bl	2724 <malloc>
     c96:	e7ef      	b.n	c78 <_ZN6VectorI7SMSFuncE9push_backERKS0_+0x18>

00000c98 <_ZN3GSMC1E6gpio_tP6uart_t>:
GSM::GSM(const gpio_t pwrkey, uart_t* uart) :
     c98:	b5f0      	push	{r4, r5, r6, r7, lr}
     c9a:	b087      	sub	sp, #28
     c9c:	0005      	movs	r5, r0
     c9e:	4668      	mov	r0, sp
     ca0:	9100      	str	r1, [sp, #0]
     ca2:	6042      	str	r2, [r0, #4]
    m_pwrkey(pwrkey), m_uart(uart)
     ca4:	0001      	movs	r1, r0
     ca6:	002a      	movs	r2, r5
     ca8:	c950      	ldmia	r1!, {r4, r6}
     caa:	c250      	stmia	r2!, {r4, r6}
     cac:	60ab      	str	r3, [r5, #8]
    Vector() : m_size(0), m_data(NULL) {}
     cae:	2300      	movs	r3, #0
            PORT->Group[port].DIRSET.reg = 1 << pin;
     cb0:	2101      	movs	r1, #1
     cb2:	60eb      	str	r3, [r5, #12]
     cb4:	612b      	str	r3, [r5, #16]
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     cb6:	6842      	ldr	r2, [r0, #4]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     cb8:	2402      	movs	r4, #2
            PORT->Group[port].DIRSET.reg = 1 << pin;
     cba:	4091      	lsls	r1, r2
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     cbc:	6803      	ldr	r3, [r0, #0]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     cbe:	4827      	ldr	r0, [pc, #156]	; (d5c <_ZN3GSMC1E6gpio_tP6uart_t+0xc4>)
     cc0:	01db      	lsls	r3, r3, #7
     cc2:	181b      	adds	r3, r3, r0
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     cc4:	189a      	adds	r2, r3, r2
            PORT->Group[port].DIRSET.reg = 1 << pin;
     cc6:	6099      	str	r1, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     cc8:	3240      	adds	r2, #64	; 0x40
     cca:	7810      	ldrb	r0, [r2, #0]
     ccc:	002e      	movs	r6, r5
     cce:	43a0      	bics	r0, r4
    m_smsfuncs.push_back({"exec", func_exec, LEVEL_ADMIN});
     cd0:	ac03      	add	r4, sp, #12
     cd2:	7010      	strb	r0, [r2, #0]
     cd4:	0022      	movs	r2, r4
            PORT->Group[port].OUTSET.reg = 1 << pin;
     cd6:	6199      	str	r1, [r3, #24]
     cd8:	4b21      	ldr	r3, [pc, #132]	; (d60 <_ZN3GSMC1E6gpio_tP6uart_t+0xc8>)
    m_pwrkey(pwrkey), m_uart(uart)
     cda:	360c      	adds	r6, #12
    m_smsfuncs.push_back({"exec", func_exec, LEVEL_ADMIN});
     cdc:	cb83      	ldmia	r3!, {r0, r1, r7}
     cde:	c283      	stmia	r2!, {r0, r1, r7}
     ce0:	001f      	movs	r7, r3
     ce2:	0021      	movs	r1, r4
     ce4:	0030      	movs	r0, r6
     ce6:	f7ff ffbb 	bl	c60 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    m_smsfuncs.push_back({"setnum", func_setnum, LEVEL_ADMIN});
     cea:	003a      	movs	r2, r7
     cec:	0023      	movs	r3, r4
     cee:	ca83      	ldmia	r2!, {r0, r1, r7}
     cf0:	c383      	stmia	r3!, {r0, r1, r7}
     cf2:	0021      	movs	r1, r4
     cf4:	0030      	movs	r0, r6
     cf6:	f7ff ffb3 	bl	c60 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    m_smsfuncs.push_back({"delnum", func_delnum, LEVEL_ADMIN});
     cfa:	0022      	movs	r2, r4
     cfc:	4b18      	ldr	r3, [pc, #96]	; (d60 <_ZN3GSMC1E6gpio_tP6uart_t+0xc8>)
     cfe:	3318      	adds	r3, #24
     d00:	cb83      	ldmia	r3!, {r0, r1, r7}
     d02:	c283      	stmia	r2!, {r0, r1, r7}
     d04:	0021      	movs	r1, r4
     d06:	0030      	movs	r0, r6
     d08:	f7ff ffaa 	bl	c60 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    m_smsfuncs.push_back({"listnum", func_listnum, LEVEL_USER});
     d0c:	0022      	movs	r2, r4
     d0e:	4b14      	ldr	r3, [pc, #80]	; (d60 <_ZN3GSMC1E6gpio_tP6uart_t+0xc8>)
     d10:	3324      	adds	r3, #36	; 0x24
     d12:	cb83      	ldmia	r3!, {r0, r1, r7}
     d14:	c283      	stmia	r2!, {r0, r1, r7}
     d16:	0021      	movs	r1, r4
     d18:	0030      	movs	r0, r6
     d1a:	f7ff ffa1 	bl	c60 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    m_smsfuncs.push_back({"update", func_update, LEVEL_ADMIN});
     d1e:	0022      	movs	r2, r4
     d20:	4b0f      	ldr	r3, [pc, #60]	; (d60 <_ZN3GSMC1E6gpio_tP6uart_t+0xc8>)
     d22:	3330      	adds	r3, #48	; 0x30
     d24:	cb83      	ldmia	r3!, {r0, r1, r7}
     d26:	c283      	stmia	r2!, {r0, r1, r7}
     d28:	0021      	movs	r1, r4
     d2a:	0030      	movs	r0, r6
     d2c:	f7ff ff98 	bl	c60 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    m_smsfuncs.push_back({"help", func_listcmd, LEVEL_USER});
     d30:	0022      	movs	r2, r4
     d32:	4b0b      	ldr	r3, [pc, #44]	; (d60 <_ZN3GSMC1E6gpio_tP6uart_t+0xc8>)
     d34:	333c      	adds	r3, #60	; 0x3c
     d36:	cb83      	ldmia	r3!, {r0, r1, r7}
     d38:	c283      	stmia	r2!, {r0, r1, r7}
     d3a:	0021      	movs	r1, r4
     d3c:	0030      	movs	r0, r6
     d3e:	f7ff ff8f 	bl	c60 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    m_smsfuncs.push_back({"setftpcreds", (SMSFuncCallback)&GSM::cmd_SetFTPCreds, LEVEL_USER});
     d42:	0022      	movs	r2, r4
     d44:	4b06      	ldr	r3, [pc, #24]	; (d60 <_ZN3GSMC1E6gpio_tP6uart_t+0xc8>)
     d46:	3348      	adds	r3, #72	; 0x48
     d48:	cb83      	ldmia	r3!, {r0, r1, r7}
     d4a:	c283      	stmia	r2!, {r0, r1, r7}
     d4c:	0030      	movs	r0, r6
     d4e:	0021      	movs	r1, r4
     d50:	f7ff ff86 	bl	c60 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
}
     d54:	0028      	movs	r0, r5
     d56:	b007      	add	sp, #28
     d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	41004400 	.word	0x41004400
     d60:	00003348 	.word	0x00003348

00000d64 <_ZN4RF243csnEb>:
        if(en)
     d64:	2201      	movs	r2, #1
     d66:	6903      	ldr	r3, [r0, #16]
#define pgm_read_byte(x) (*(uint8_t*)(x))

/****************************************************************************/

void RF24::csn(bool mode)
{
     d68:	b510      	push	{r4, lr}
     d6a:	409a      	lsls	r2, r3
     d6c:	68c3      	ldr	r3, [r0, #12]
     d6e:	01db      	lsls	r3, r3, #7
     d70:	2900      	cmp	r1, #0
     d72:	d006      	beq.n	d82 <_ZN4RF243csnEb+0x1e>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     d74:	4905      	ldr	r1, [pc, #20]	; (d8c <_ZN4RF243csnEb+0x28>)
     d76:	185b      	adds	r3, r3, r1
     d78:	619a      	str	r2, [r3, #24]
      _SPI.chipSelect(csn_pin);
    #endif // defined(RF24_RPi)

    #if !defined(RF24_LINUX)
    digitalWrite(csn_pin, mode);
    delay_usec(csDelay);
     d7a:	6a40      	ldr	r0, [r0, #36]	; 0x24
     d7c:	f002 fea0 	bl	3ac0 <__delay_usec_veneer>
    #endif // !defined(RF24_LINUX)
}
     d80:	bd10      	pop	{r4, pc}
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     d82:	4902      	ldr	r1, [pc, #8]	; (d8c <_ZN4RF243csnEb+0x28>)
     d84:	185b      	adds	r3, r3, r1
     d86:	615a      	str	r2, [r3, #20]
     d88:	e7f7      	b.n	d7a <_ZN4RF243csnEb+0x16>
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	41004400 	.word	0x41004400

00000d90 <_ZN4RF242ceEb>:
        return port == b.port && pin == b.pin;
     d90:	6843      	ldr	r3, [r0, #4]
     d92:	68c2      	ldr	r2, [r0, #12]

/****************************************************************************/

void RF24::ce(bool level)
{
     d94:	b510      	push	{r4, lr}
     d96:	6884      	ldr	r4, [r0, #8]
     d98:	4293      	cmp	r3, r2
     d9a:	d102      	bne.n	da2 <_ZN4RF242ceEb+0x12>
     d9c:	6902      	ldr	r2, [r0, #16]
     d9e:	42a2      	cmp	r2, r4
     da0:	d007      	beq.n	db2 <_ZN4RF242ceEb+0x22>
        if(en)
     da2:	2201      	movs	r2, #1
     da4:	01db      	lsls	r3, r3, #7
     da6:	40a2      	lsls	r2, r4
     da8:	2900      	cmp	r1, #0
     daa:	d003      	beq.n	db4 <_ZN4RF242ceEb+0x24>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     dac:	4903      	ldr	r1, [pc, #12]	; (dbc <_ZN4RF242ceEb+0x2c>)
     dae:	185b      	adds	r3, r3, r1
     db0:	619a      	str	r2, [r3, #24]
    //Allow for 3-pin use on ATTiny
    if (ce_pin != csn_pin) {
        digitalWrite(ce_pin, level);
    }
}
     db2:	bd10      	pop	{r4, pc}
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     db4:	4901      	ldr	r1, [pc, #4]	; (dbc <_ZN4RF242ceEb+0x2c>)
     db6:	185b      	adds	r3, r3, r1
     db8:	615a      	str	r2, [r3, #20]
     dba:	e7fa      	b.n	db2 <_ZN4RF242ceEb+0x22>
     dbc:	41004400 	.word	0x41004400

00000dc0 <_ZN4RF2416beginTransactionEv>:

/****************************************************************************/

inline void RF24::beginTransaction()
{
     dc0:	b510      	push	{r4, lr}
    #if defined(RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif // defined(RF24_SPI_TRANSACTIONS)
    csn(LOW);
     dc2:	2100      	movs	r1, #0
     dc4:	f7ff ffce 	bl	d64 <_ZN4RF243csnEb>
}
     dc8:	bd10      	pop	{r4, pc}

00000dca <_ZN4RF2414endTransactionEv>:

/****************************************************************************/

inline void RF24::endTransaction()
{
     dca:	b510      	push	{r4, lr}
    csn(HIGH);
     dcc:	2101      	movs	r1, #1
     dce:	f7ff ffc9 	bl	d64 <_ZN4RF243csnEb>
    #if defined(RF24_SPI_TRANSACTIONS)
    _SPI.endTransaction();
    #endif // defined(RF24_SPI_TRANSACTIONS)
}
     dd2:	bd10      	pop	{r4, pc}

00000dd4 <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     dd4:	b570      	push	{r4, r5, r6, lr}
     dd6:	0004      	movs	r4, r0
     dd8:	000d      	movs	r5, r1
    result = *++prx;   // result is 2nd byte of receive buffer

    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
     dda:	f7ff fff1 	bl	dc0 <_ZN4RF2416beginTransactionEv>
    _SPI.Transfer(R_REGISTER | (REGISTER_MASK & reg));
     dde:	211f      	movs	r1, #31
     de0:	6820      	ldr	r0, [r4, #0]
     de2:	4029      	ands	r1, r5
     de4:	f000 fef0 	bl	1bc8 <_ZN5spi_t8TransferEh>
    result = _SPI.Transfer(0xff);
     de8:	21ff      	movs	r1, #255	; 0xff
     dea:	6820      	ldr	r0, [r4, #0]
     dec:	f000 feec 	bl	1bc8 <_ZN5spi_t8TransferEh>
     df0:	0005      	movs	r5, r0
    endTransaction();
     df2:	0020      	movs	r0, r4
     df4:	f7ff ffe9 	bl	dca <_ZN4RF2414endTransactionEv>

    #endif // !defined(RF24_LINUX)

    return result;
}
     df8:	0028      	movs	r0, r5
     dfa:	bd70      	pop	{r4, r5, r6, pc}

00000dfc <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dfe:	000f      	movs	r7, r1
     e00:	0014      	movs	r4, r2
     e02:	001e      	movs	r6, r3
     e04:	0005      	movs	r5, r0
    _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, size);
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
     e06:	f7ff ffdb 	bl	dc0 <_ZN4RF2416beginTransactionEv>
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     e0a:	211f      	movs	r1, #31
     e0c:	400f      	ands	r7, r1
     e0e:	3101      	adds	r1, #1
     e10:	4339      	orrs	r1, r7
     e12:	6828      	ldr	r0, [r5, #0]
     e14:	f000 fed8 	bl	1bc8 <_ZN5spi_t8TransferEh>
     e18:	0007      	movs	r7, r0
     e1a:	19a6      	adds	r6, r4, r6
    while (len--) {
     e1c:	42b4      	cmp	r4, r6
     e1e:	d005      	beq.n	e2c <_ZN4RF2414write_registerEhPKhh+0x30>
        _SPI.Transfer(*buf++);
     e20:	7821      	ldrb	r1, [r4, #0]
     e22:	6828      	ldr	r0, [r5, #0]
     e24:	f000 fed0 	bl	1bc8 <_ZN5spi_t8TransferEh>
     e28:	3401      	adds	r4, #1
    while (len--) {
     e2a:	e7f7      	b.n	e1c <_ZN4RF2414write_registerEhPKhh+0x20>
    }
    endTransaction();
     e2c:	0028      	movs	r0, r5
     e2e:	f7ff ffcc 	bl	dca <_ZN4RF2414endTransactionEv>
    #endif // !defined(RF24_LINUX)

    return status;
}
     e32:	0038      	movs	r0, r7
     e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000e36 <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     e36:	b570      	push	{r4, r5, r6, lr}
     e38:	0016      	movs	r6, r2
     e3a:	0004      	movs	r4, r0
     e3c:	000d      	movs	r5, r1
    _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
    status = *prx++; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
     e3e:	f7ff ffbf 	bl	dc0 <_ZN4RF2416beginTransactionEv>
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     e42:	211f      	movs	r1, #31
     e44:	400d      	ands	r5, r1
     e46:	3101      	adds	r1, #1
     e48:	4329      	orrs	r1, r5
     e4a:	6820      	ldr	r0, [r4, #0]
     e4c:	f000 febc 	bl	1bc8 <_ZN5spi_t8TransferEh>
     e50:	0005      	movs	r5, r0
    _SPI.Transfer(value);
     e52:	0031      	movs	r1, r6
     e54:	6820      	ldr	r0, [r4, #0]
     e56:	f000 feb7 	bl	1bc8 <_ZN5spi_t8TransferEh>
    endTransaction();
     e5a:	0020      	movs	r0, r4
     e5c:	f7ff ffb5 	bl	dca <_ZN4RF2414endTransactionEv>

    #endif // !defined(RF24_LINUX)

    return status;
}
     e60:	0028      	movs	r0, r5
     e62:	bd70      	pop	{r4, r5, r6, pc}

00000e64 <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
     e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     e66:	9100      	str	r1, [sp, #0]
     e68:	001d      	movs	r5, r3
    uint8_t status;
    const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

    data_len = rf24_min(data_len, payload_size);
     e6a:	7dc3      	ldrb	r3, [r0, #23]
{
     e6c:	0004      	movs	r4, r0
    data_len = rf24_min(data_len, payload_size);
     e6e:	1c1f      	adds	r7, r3, #0
     e70:	4293      	cmp	r3, r2
     e72:	d900      	bls.n	e76 <_ZN4RF2413write_payloadEPKvhh+0x12>
     e74:	1c17      	adds	r7, r2, #0
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     e76:	2600      	movs	r6, #0
     e78:	7e22      	ldrb	r2, [r4, #24]
     e7a:	b2ff      	uxtb	r7, r7
     e7c:	42b2      	cmp	r2, r6
     e7e:	d101      	bne.n	e84 <_ZN4RF2413write_payloadEPKvhh+0x20>
     e80:	1bde      	subs	r6, r3, r7
     e82:	b2f6      	uxtb	r6, r6
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();

    #else // !defined(RF24_LINUX)

    beginTransaction();
     e84:	0020      	movs	r0, r4
     e86:	f7ff ff9b 	bl	dc0 <_ZN4RF2416beginTransactionEv>
    status = _SPI.Transfer(writeType);
     e8a:	0029      	movs	r1, r5
     e8c:	6820      	ldr	r0, [r4, #0]
     e8e:	f000 fe9b 	bl	1bc8 <_ZN5spi_t8TransferEh>
     e92:	9d00      	ldr	r5, [sp, #0]
     e94:	9001      	str	r0, [sp, #4]
     e96:	19ef      	adds	r7, r5, r7
    while (data_len--) {
     e98:	42bd      	cmp	r5, r7
     e9a:	d005      	beq.n	ea8 <_ZN4RF2413write_payloadEPKvhh+0x44>
        _SPI.Transfer(*current++);
     e9c:	7829      	ldrb	r1, [r5, #0]
     e9e:	6820      	ldr	r0, [r4, #0]
     ea0:	f000 fe92 	bl	1bc8 <_ZN5spi_t8TransferEh>
     ea4:	3501      	adds	r5, #1
    while (data_len--) {
     ea6:	e7f7      	b.n	e98 <_ZN4RF2413write_payloadEPKvhh+0x34>
    }
    while (blank_len--) {
     ea8:	3e01      	subs	r6, #1
     eaa:	b2f6      	uxtb	r6, r6
     eac:	2eff      	cmp	r6, #255	; 0xff
     eae:	d004      	beq.n	eba <_ZN4RF2413write_payloadEPKvhh+0x56>
        _SPI.Transfer(0);
     eb0:	2100      	movs	r1, #0
     eb2:	6820      	ldr	r0, [r4, #0]
     eb4:	f000 fe88 	bl	1bc8 <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     eb8:	e7f6      	b.n	ea8 <_ZN4RF2413write_payloadEPKvhh+0x44>
    }
    endTransaction();
     eba:	0020      	movs	r0, r4
     ebc:	f7ff ff85 	bl	dca <_ZN4RF2414endTransactionEv>

    #endif // !defined(RF24_LINUX)

    return status;
}
     ec0:	9801      	ldr	r0, [sp, #4]
     ec2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00000ec4 <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t data_len)
{
     ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t status;
    uint8_t* current = reinterpret_cast<uint8_t*>(buf);

    if (data_len > payload_size) {
     ec6:	7dc3      	ldrb	r3, [r0, #23]
{
     ec8:	0004      	movs	r4, r0
     eca:	000d      	movs	r5, r1
     ecc:	1c1f      	adds	r7, r3, #0
     ece:	4293      	cmp	r3, r2
     ed0:	d900      	bls.n	ed4 <_ZN4RF2412read_payloadEPvh+0x10>
     ed2:	1c17      	adds	r7, r2, #0
        data_len = payload_size;
    }
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     ed4:	2600      	movs	r6, #0
     ed6:	7e22      	ldrb	r2, [r4, #24]
     ed8:	b2ff      	uxtb	r7, r7
     eda:	42b2      	cmp	r2, r6
     edc:	d101      	bne.n	ee2 <_ZN4RF2412read_payloadEPvh+0x1e>
     ede:	1bde      	subs	r6, r3, r7
     ee0:	b2f6      	uxtb	r6, r6
      *current = *prx;
    }
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
     ee2:	0020      	movs	r0, r4
     ee4:	f7ff ff6c 	bl	dc0 <_ZN4RF2416beginTransactionEv>
    status = _SPI.Transfer(R_RX_PAYLOAD);
     ee8:	2161      	movs	r1, #97	; 0x61
     eea:	6820      	ldr	r0, [r4, #0]
     eec:	f000 fe6c 	bl	1bc8 <_ZN5spi_t8TransferEh>
     ef0:	19ef      	adds	r7, r5, r7
     ef2:	9001      	str	r0, [sp, #4]
    while (data_len--) {
     ef4:	42bd      	cmp	r5, r7
     ef6:	d006      	beq.n	f06 <_ZN4RF2412read_payloadEPvh+0x42>
        *current++ = _SPI.Transfer(0xFF);
     ef8:	21ff      	movs	r1, #255	; 0xff
     efa:	6820      	ldr	r0, [r4, #0]
     efc:	f000 fe64 	bl	1bc8 <_ZN5spi_t8TransferEh>
     f00:	7028      	strb	r0, [r5, #0]
     f02:	3501      	adds	r5, #1
    while (data_len--) {
     f04:	e7f6      	b.n	ef4 <_ZN4RF2412read_payloadEPvh+0x30>
    }
    while (blank_len--) {
     f06:	3e01      	subs	r6, #1
     f08:	b2f6      	uxtb	r6, r6
     f0a:	2eff      	cmp	r6, #255	; 0xff
     f0c:	d004      	beq.n	f18 <_ZN4RF2412read_payloadEPvh+0x54>
        _SPI.Transfer(0xff);
     f0e:	21ff      	movs	r1, #255	; 0xff
     f10:	6820      	ldr	r0, [r4, #0]
     f12:	f000 fe59 	bl	1bc8 <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     f16:	e7f6      	b.n	f06 <_ZN4RF2412read_payloadEPvh+0x42>
    }
    endTransaction();
     f18:	0020      	movs	r0, r4
     f1a:	f7ff ff56 	bl	dca <_ZN4RF2414endTransactionEv>

    #endif // !defined(RF24_LINUX)

    return status;
}
     f1e:	9801      	ldr	r0, [sp, #4]
     f20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00000f22 <_ZN4RF248spiTransEh>:
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd)
{
     f22:	b570      	push	{r4, r5, r6, lr}
     f24:	0004      	movs	r4, r0
     f26:	000d      	movs	r5, r1

    uint8_t status;

    beginTransaction();
     f28:	f7ff ff4a 	bl	dc0 <_ZN4RF2416beginTransactionEv>
    status = _SPI.Transfer(cmd);
     f2c:	0029      	movs	r1, r5
     f2e:	6820      	ldr	r0, [r4, #0]
     f30:	f000 fe4a 	bl	1bc8 <_ZN5spi_t8TransferEh>
     f34:	0005      	movs	r5, r0
    endTransaction();
     f36:	0020      	movs	r0, r4
     f38:	f7ff ff47 	bl	dca <_ZN4RF2414endTransactionEv>

    return status;
}
     f3c:	0028      	movs	r0, r5
     f3e:	bd70      	pop	{r4, r5, r6, pc}

00000f40 <_ZN4RF248flush_rxEv>:
{
     f40:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_RX);
     f42:	21e2      	movs	r1, #226	; 0xe2
     f44:	f7ff ffed 	bl	f22 <_ZN4RF248spiTransEh>
}
     f48:	bd10      	pop	{r4, pc}

00000f4a <_ZN4RF248flush_txEv>:
{
     f4a:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_TX);
     f4c:	21e1      	movs	r1, #225	; 0xe1
     f4e:	f7ff ffe8 	bl	f22 <_ZN4RF248spiTransEh>
}
     f52:	bd10      	pop	{r4, pc}

00000f54 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
     f54:	b510      	push	{r4, lr}
    return spiTrans(RF24_NOP);
     f56:	21ff      	movs	r1, #255	; 0xff
     f58:	f7ff ffe3 	bl	f22 <_ZN4RF248spiTransEh>
}
     f5c:	bd10      	pop	{r4, pc}

00000f5e <_ZN4RF24C1E6gpio_tS0_R5spi_t>:

#endif

/****************************************************************************/

RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     f5e:	b082      	sub	sp, #8
     f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
     f62:	9307      	str	r3, [sp, #28]
     f64:	466c      	mov	r4, sp
        :_SPI(_spi), ce_pin(_cepin), csn_pin(_cspin), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5),
         csDelay(5)//,pipe0_reading_address(0)
     f66:	0003      	movs	r3, r0
RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     f68:	9100      	str	r1, [sp, #0]
         csDelay(5)//,pipe0_reading_address(0)
     f6a:	9909      	ldr	r1, [sp, #36]	; 0x24
RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     f6c:	6062      	str	r2, [r4, #4]
         csDelay(5)//,pipe0_reading_address(0)
     f6e:	c302      	stmia	r3!, {r1}
     f70:	cc22      	ldmia	r4!, {r1, r5}
     f72:	c322      	stmia	r3!, {r1, r5}
     f74:	0003      	movs	r3, r0
RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     f76:	aa07      	add	r2, sp, #28
         csDelay(5)//,pipe0_reading_address(0)
     f78:	330c      	adds	r3, #12
     f7a:	ca12      	ldmia	r2!, {r1, r4}
     f7c:	c312      	stmia	r3!, {r1, r4}
     f7e:	2305      	movs	r3, #5
     f80:	7783      	strb	r3, [r0, #30]
     f82:	6243      	str	r3, [r0, #36]	; 0x24
     f84:	2380      	movs	r3, #128	; 0x80
     f86:	019b      	lsls	r3, r3, #6
     f88:	82c3      	strh	r3, [r0, #22]
     f8a:	2300      	movs	r3, #0
     f8c:	8303      	strh	r3, [r0, #24]
{
    pipe0_reading_address[0] = 0;
}
     f8e:	bc3e      	pop	{r1, r2, r3, r4, r5}
     f90:	bc08      	pop	{r3}
     f92:	b002      	add	sp, #8
     f94:	4718      	bx	r3

00000f96 <_ZN4RF2410setChannelEh>:

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     f96:	000a      	movs	r2, r1
     f98:	b510      	push	{r4, lr}
    const uint8_t max_channel = 125;
    write_register(RF_CH, rf24_min(channel, max_channel));
     f9a:	297c      	cmp	r1, #124	; 0x7c
     f9c:	d900      	bls.n	fa0 <_ZN4RF2410setChannelEh+0xa>
     f9e:	227d      	movs	r2, #125	; 0x7d
     fa0:	2105      	movs	r1, #5
     fa2:	f7ff ff48 	bl	e36 <_ZN4RF2414write_registerEhh>
}
     fa6:	bd10      	pop	{r4, pc}

00000fa8 <_ZN4RF2414setPayloadSizeEh>:

/****************************************************************************/

void RF24::setPayloadSize(uint8_t size)
{
    payload_size = rf24_min(size, 32);
     fa8:	1c0b      	adds	r3, r1, #0
     faa:	2920      	cmp	r1, #32
     fac:	d900      	bls.n	fb0 <_ZN4RF2414setPayloadSizeEh+0x8>
     fae:	2320      	movs	r3, #32
     fb0:	75c3      	strb	r3, [r0, #23]
}
     fb2:	4770      	bx	lr

00000fb4 <_ZN4RF2413stopListeningEv>:
/****************************************************************************/
static const uint8_t child_pipe_enable[]
PROGMEM = {ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5};

void RF24::stopListening(void)
{
     fb4:	b570      	push	{r4, r5, r6, lr}
     fb6:	0004      	movs	r4, r0
    ce(LOW);
     fb8:	2100      	movs	r1, #0
     fba:	f7ff fee9 	bl	d90 <_ZN4RF242ceEb>

    delay_usec(txDelay);
     fbe:	6a20      	ldr	r0, [r4, #32]
     fc0:	f002 fd7e 	bl	3ac0 <__delay_usec_veneer>

    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
     fc4:	211d      	movs	r1, #29
     fc6:	0020      	movs	r0, r4
     fc8:	f7ff ff04 	bl	dd4 <_ZN4RF2413read_registerEh>
     fcc:	0783      	lsls	r3, r0, #30
     fce:	d505      	bpl.n	fdc <_ZN4RF2413stopListeningEv+0x28>
        delay_usec(txDelay); //200
     fd0:	6a20      	ldr	r0, [r4, #32]
     fd2:	f002 fd75 	bl	3ac0 <__delay_usec_veneer>
        flush_tx();
     fd6:	0020      	movs	r0, r4
     fd8:	f7ff ffb7 	bl	f4a <_ZN4RF248flush_txEv>
    }
    //flush_rx();
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
     fdc:	2100      	movs	r1, #0
     fde:	0020      	movs	r0, r4
     fe0:	f7ff fef8 	bl	dd4 <_ZN4RF2413read_registerEh>
     fe4:	2501      	movs	r5, #1
     fe6:	43a8      	bics	r0, r5
     fe8:	b2c2      	uxtb	r2, r0
     fea:	2100      	movs	r1, #0
     fec:	0020      	movs	r0, r4
     fee:	f7ff ff22 	bl	e36 <_ZN4RF2414write_registerEhh>
    if (ce_pin == csn_pin) {
      powerDown();
      powerUp();
    }
    #endif
    write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0]))); // Enable RX on pipe0
     ff2:	2102      	movs	r1, #2
     ff4:	0020      	movs	r0, r4
     ff6:	f7ff feed 	bl	dd4 <_ZN4RF2413read_registerEh>
     ffa:	4305      	orrs	r5, r0
     ffc:	b2ea      	uxtb	r2, r5
     ffe:	2102      	movs	r1, #2
    1000:	0020      	movs	r0, r4
    1002:	f7ff ff18 	bl	e36 <_ZN4RF2414write_registerEhh>

    //delayMicroseconds(100);

}
    1006:	bd70      	pop	{r4, r5, r6, pc}

00001008 <_ZN4RF247powerUpEv>:
/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
    uint8_t cfg = read_register(NRF_CONFIG);
    1008:	2100      	movs	r1, #0
{
    100a:	b510      	push	{r4, lr}
    100c:	0004      	movs	r4, r0
    uint8_t cfg = read_register(NRF_CONFIG);
    100e:	f7ff fee1 	bl	dd4 <_ZN4RF2413read_registerEh>

    // if not powered up then power up and wait for the radio to initialize
    if (!(cfg & _BV(PWR_UP))) {
    1012:	2202      	movs	r2, #2
    1014:	0001      	movs	r1, r0
    1016:	4011      	ands	r1, r2
    1018:	4210      	tst	r0, r2
    101a:	d107      	bne.n	102c <_ZN4RF247powerUpEv+0x24>
        write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
    101c:	4302      	orrs	r2, r0
    101e:	b2d2      	uxtb	r2, r2
    1020:	0020      	movs	r0, r4
    1022:	f7ff ff08 	bl	e36 <_ZN4RF2414write_registerEhh>

        // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
        // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
        // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
        delay_usec(5000);
    1026:	4802      	ldr	r0, [pc, #8]	; (1030 <_ZN4RF247powerUpEv+0x28>)
    1028:	f002 fd4a 	bl	3ac0 <__delay_usec_veneer>
    }
}
    102c:	bd10      	pop	{r4, pc}
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	00001388 	.word	0x00001388

00001034 <_ZN4RF2414startFastWriteEPKvhbb>:
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24::startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{ //TMRh20
    1034:	b570      	push	{r4, r5, r6, lr}
    1036:	0004      	movs	r4, r0
    1038:	0018      	movs	r0, r3
    103a:	ab04      	add	r3, sp, #16
    103c:	781d      	ldrb	r5, [r3, #0]

    //write_payload( buf,len);
    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
    103e:	23b0      	movs	r3, #176	; 0xb0
    1040:	2800      	cmp	r0, #0
    1042:	d100      	bne.n	1046 <_ZN4RF2414startFastWriteEPKvhbb+0x12>
    1044:	3b10      	subs	r3, #16
    1046:	0020      	movs	r0, r4
    1048:	f7ff ff0c 	bl	e64 <_ZN4RF2413write_payloadEPKvhh>
    if (startTx) {
    104c:	2d00      	cmp	r5, #0
    104e:	d003      	beq.n	1058 <_ZN4RF2414startFastWriteEPKvhbb+0x24>
        ce(HIGH);
    1050:	2101      	movs	r1, #1
    1052:	0020      	movs	r0, r4
    1054:	f7ff fe9c 	bl	d90 <_ZN4RF242ceEb>
    }

}
    1058:	bd70      	pop	{r4, r5, r6, pc}

0000105a <_ZN4RF245writeEPKvhb>:
{
    105a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    105c:	0004      	movs	r4, r0
    startFastWrite(buf, len, multicast);
    105e:	2001      	movs	r0, #1
    1060:	9000      	str	r0, [sp, #0]
    1062:	0020      	movs	r0, r4
    1064:	f7ff ffe6 	bl	1034 <_ZN4RF2414startFastWriteEPKvhbb>
    uint32_t timer = millis();
    1068:	f000 fe86 	bl	1d78 <millis>
    while (!(get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
    106c:	2730      	movs	r7, #48	; 0x30
    uint32_t timer = millis();
    106e:	0006      	movs	r6, r0
    while (!(get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
    1070:	0020      	movs	r0, r4
    1072:	f7ff ff6f 	bl	f54 <_ZN4RF2410get_statusEv>
    1076:	4238      	tst	r0, r7
    1078:	d108      	bne.n	108c <_ZN4RF245writeEPKvhb+0x32>
        if (millis() - timer > 95) {
    107a:	f000 fe7d 	bl	1d78 <millis>
    107e:	1b80      	subs	r0, r0, r6
    1080:	285f      	cmp	r0, #95	; 0x5f
    1082:	d9f5      	bls.n	1070 <_ZN4RF245writeEPKvhb+0x16>
    failureDetected = 1;
    1084:	2301      	movs	r3, #1
    1086:	77e3      	strb	r3, [r4, #31]
        return 0;
    1088:	2000      	movs	r0, #0
}
    108a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ce(LOW);
    108c:	2100      	movs	r1, #0
    108e:	0020      	movs	r0, r4
    1090:	f7ff fe7e 	bl	d90 <_ZN4RF242ceEb>
    uint8_t status = write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
    1094:	2270      	movs	r2, #112	; 0x70
    1096:	2107      	movs	r1, #7
    1098:	0020      	movs	r0, r4
    109a:	f7ff fecc 	bl	e36 <_ZN4RF2414write_registerEhh>
    109e:	0003      	movs	r3, r0
    return 1;
    10a0:	2001      	movs	r0, #1
    if (status & _BV(MAX_RT)) {
    10a2:	06db      	lsls	r3, r3, #27
    10a4:	d5f1      	bpl.n	108a <_ZN4RF245writeEPKvhb+0x30>
        flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
    10a6:	0020      	movs	r0, r4
    10a8:	f7ff ff4f 	bl	f4a <_ZN4RF248flush_txEv>
    10ac:	e7ec      	b.n	1088 <_ZN4RF245writeEPKvhb+0x2e>

000010ae <_ZN4RF245writeEPKvh>:
{
    10ae:	b510      	push	{r4, lr}
    return write(buf, len, 0);
    10b0:	2300      	movs	r3, #0
    10b2:	f7ff ffd2 	bl	105a <_ZN4RF245writeEPKvhb>
}
    10b6:	bd10      	pop	{r4, pc}

000010b8 <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
    10b8:	b570      	push	{r4, r5, r6, lr}
    10ba:	000c      	movs	r4, r1
    if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY))) {
    10bc:	2117      	movs	r1, #23
{
    10be:	0006      	movs	r6, r0
    if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY))) {
    10c0:	f7ff fe88 	bl	dd4 <_ZN4RF2413read_registerEh>
    10c4:	2301      	movs	r3, #1
            *pipe_num = (status >> RX_P_NO) & 0x07;
        }
        return 1;
    }

    return 0;
    10c6:	2500      	movs	r5, #0
    if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY))) {
    10c8:	4218      	tst	r0, r3
    10ca:	d108      	bne.n	10de <_ZN4RF249availableEPh+0x26>
        if (pipe_num) {
    10cc:	001d      	movs	r5, r3
    10ce:	2c00      	cmp	r4, #0
    10d0:	d005      	beq.n	10de <_ZN4RF249availableEPh+0x26>
            uint8_t status = get_status();
    10d2:	0030      	movs	r0, r6
    10d4:	f7ff ff3e 	bl	f54 <_ZN4RF2410get_statusEv>
            *pipe_num = (status >> RX_P_NO) & 0x07;
    10d8:	0700      	lsls	r0, r0, #28
    10da:	0f40      	lsrs	r0, r0, #29
    10dc:	7020      	strb	r0, [r4, #0]


}
    10de:	0028      	movs	r0, r5
    10e0:	bd70      	pop	{r4, r5, r6, pc}

000010e2 <_ZN4RF249availableEv>:
{
    10e2:	b510      	push	{r4, lr}
    return available(0);
    10e4:	2100      	movs	r1, #0
    10e6:	f7ff ffe7 	bl	10b8 <_ZN4RF249availableEPh>
}
    10ea:	bd10      	pop	{r4, pc}

000010ec <_ZN4RF244readEPvh>:

/****************************************************************************/

void RF24::read(void* buf, uint8_t len)
{
    10ec:	b510      	push	{r4, lr}
    10ee:	0004      	movs	r4, r0

    // Fetch the payload
    read_payload(buf, len);
    10f0:	f7ff fee8 	bl	ec4 <_ZN4RF2412read_payloadEPvh>

    //Clear the two possible interrupt flags with one command
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
    10f4:	2270      	movs	r2, #112	; 0x70
    10f6:	2107      	movs	r1, #7
    10f8:	0020      	movs	r0, r4
    10fa:	f7ff fe9c 	bl	e36 <_ZN4RF2414write_registerEhh>

}
    10fe:	bd10      	pop	{r4, pc}

00001100 <_ZN4RF2415openWritingPipeEy>:
}

/****************************************************************************/

void RF24::openWritingPipe(uint64_t value)
{
    1100:	b513      	push	{r0, r1, r4, lr}
    1102:	0004      	movs	r4, r0
    1104:	9200      	str	r2, [sp, #0]
    1106:	9301      	str	r3, [sp, #4]
    // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
    // expects it LSB first too, so we're good.

    write_register(RX_ADDR_P0, reinterpret_cast<uint8_t*>(&value), addr_width);
    1108:	210a      	movs	r1, #10
    110a:	466a      	mov	r2, sp
    110c:	7f83      	ldrb	r3, [r0, #30]
    110e:	f7ff fe75 	bl	dfc <_ZN4RF2414write_registerEhPKhh>
    write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), addr_width);
    1112:	466a      	mov	r2, sp
    1114:	7fa3      	ldrb	r3, [r4, #30]
    1116:	2110      	movs	r1, #16
    1118:	0020      	movs	r0, r4
    111a:	f7ff fe6f 	bl	dfc <_ZN4RF2414write_registerEhPKhh>


    //const uint8_t max_payload_size = 32;
    //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
    write_register(RX_PW_P0, payload_size);
    111e:	2111      	movs	r1, #17
    1120:	0020      	movs	r0, r4
    1122:	7de2      	ldrb	r2, [r4, #23]
    1124:	f7ff fe87 	bl	e36 <_ZN4RF2414write_registerEhh>
}
    1128:	bd13      	pop	{r0, r1, r4, pc}
    112a:	Address 0x0000112a is out of bounds.


0000112c <_ZN4RF2415openReadingPipeEhy>:
PROGMEM = {RX_ADDR_P0, RX_ADDR_P1, RX_ADDR_P2, RX_ADDR_P3, RX_ADDR_P4, RX_ADDR_P5};
static const uint8_t child_payload_size[]
PROGMEM = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};

void RF24::openReadingPipe(uint8_t child, uint64_t address)
{
    112c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    112e:	0004      	movs	r4, r0
    1130:	000d      	movs	r5, r1
    1132:	9200      	str	r2, [sp, #0]
    1134:	9301      	str	r3, [sp, #4]
    // If this is pipe 0, cache the address.  This is needed because
    // openWritingPipe() will overwrite the pipe 0 address, so
    // startListening() will have to restore it.
    if (child == 0) {
    1136:	2900      	cmp	r1, #0
    1138:	d108      	bne.n	114c <_ZN4RF2415openReadingPipeEhy+0x20>
        memcpy(pipe0_reading_address, &address, addr_width);
    113a:	7f82      	ldrb	r2, [r0, #30]
    113c:	4669      	mov	r1, sp
    113e:	3019      	adds	r0, #25
    1140:	f001 fb04 	bl	274c <memcpy>
    }

    if (child <= 6) {
        // For pipes 2-5, only write the LSB
        if (child < 2) {
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
    1144:	4a11      	ldr	r2, [pc, #68]	; (118c <_ZN4RF2415openReadingPipeEhy+0x60>)
    1146:	7fa3      	ldrb	r3, [r4, #30]
    1148:	5d51      	ldrb	r1, [r2, r5]
    114a:	e006      	b.n	115a <_ZN4RF2415openReadingPipeEhy+0x2e>
    if (child <= 6) {
    114c:	2906      	cmp	r1, #6
    114e:	d81c      	bhi.n	118a <_ZN4RF2415openReadingPipeEhy+0x5e>
        if (child < 2) {
    1150:	4b0e      	ldr	r3, [pc, #56]	; (118c <_ZN4RF2415openReadingPipeEhy+0x60>)
    1152:	5c59      	ldrb	r1, [r3, r1]
        } else {
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
    1154:	2301      	movs	r3, #1
        if (child < 2) {
    1156:	2d01      	cmp	r5, #1
    1158:	d0f4      	beq.n	1144 <_ZN4RF2415openReadingPipeEhy+0x18>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
    115a:	466a      	mov	r2, sp
    115c:	0020      	movs	r0, r4
    115e:	f7ff fe4d 	bl	dfc <_ZN4RF2414write_registerEhPKhh>
        }

        write_register(pgm_read_byte(&child_payload_size[child]), payload_size);
    1162:	4b0b      	ldr	r3, [pc, #44]	; (1190 <_ZN4RF2415openReadingPipeEhy+0x64>)
    1164:	7de2      	ldrb	r2, [r4, #23]
    1166:	5d59      	ldrb	r1, [r3, r5]
    1168:	0020      	movs	r0, r4
    116a:	f7ff fe64 	bl	e36 <_ZN4RF2414write_registerEhh>

        // Note it would be more efficient to set all of the bits for all open
        // pipes at once.  However, I thought it would make the calling code
        // more simple to do it this way.
        write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
    116e:	2102      	movs	r1, #2
    1170:	0020      	movs	r0, r4
    1172:	f7ff fe2f 	bl	dd4 <_ZN4RF2413read_registerEh>
    1176:	2201      	movs	r2, #1
    1178:	4b06      	ldr	r3, [pc, #24]	; (1194 <_ZN4RF2415openReadingPipeEhy+0x68>)
    117a:	2102      	movs	r1, #2
    117c:	5d5b      	ldrb	r3, [r3, r5]
    117e:	409a      	lsls	r2, r3
    1180:	4302      	orrs	r2, r0
    1182:	b2d2      	uxtb	r2, r2
    1184:	0020      	movs	r0, r4
    1186:	f7ff fe56 	bl	e36 <_ZN4RF2414write_registerEhh>
    }
}
    118a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    118c:	0000375b 	.word	0x0000375b
    1190:	00003767 	.word	0x00003767
    1194:	00003761 	.word	0x00003761

00001198 <_ZN4RF2416closeReadingPipeEh>:
}

/****************************************************************************/

void RF24::closeReadingPipe(uint8_t pipe)
{
    1198:	b570      	push	{r4, r5, r6, lr}
    119a:	000d      	movs	r5, r1
    write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
    119c:	2102      	movs	r1, #2
{
    119e:	0004      	movs	r4, r0
    write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
    11a0:	f7ff fe18 	bl	dd4 <_ZN4RF2413read_registerEh>
    11a4:	4b05      	ldr	r3, [pc, #20]	; (11bc <_ZN4RF2416closeReadingPipeEh+0x24>)
    11a6:	2102      	movs	r1, #2
    11a8:	5d5a      	ldrb	r2, [r3, r5]
    11aa:	2301      	movs	r3, #1
    11ac:	4093      	lsls	r3, r2
    11ae:	4398      	bics	r0, r3
    11b0:	b2c2      	uxtb	r2, r0
    11b2:	0020      	movs	r0, r4
    11b4:	f7ff fe3f 	bl	e36 <_ZN4RF2414write_registerEhh>
}
    11b8:	bd70      	pop	{r4, r5, r6, pc}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	00003761 	.word	0x00003761

000011c0 <_ZN4RF2414startListeningEv>:
{
    11c0:	b570      	push	{r4, r5, r6, lr}
    11c2:	0004      	movs	r4, r0
    powerUp();
    11c4:	f7ff ff20 	bl	1008 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
    11c8:	2100      	movs	r1, #0
    11ca:	0020      	movs	r0, r4
    11cc:	f7ff fe02 	bl	dd4 <_ZN4RF2413read_registerEh>
    11d0:	2501      	movs	r5, #1
    11d2:	4328      	orrs	r0, r5
    11d4:	b2c2      	uxtb	r2, r0
    11d6:	2100      	movs	r1, #0
    11d8:	0020      	movs	r0, r4
    11da:	f7ff fe2c 	bl	e36 <_ZN4RF2414write_registerEhh>
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
    11de:	2270      	movs	r2, #112	; 0x70
    11e0:	2107      	movs	r1, #7
    11e2:	0020      	movs	r0, r4
    11e4:	f7ff fe27 	bl	e36 <_ZN4RF2414write_registerEhh>
    ce(HIGH);
    11e8:	0029      	movs	r1, r5
    11ea:	0020      	movs	r0, r4
    11ec:	f7ff fdd0 	bl	d90 <_ZN4RF242ceEb>
    if (pipe0_reading_address[0] > 0) {
    11f0:	7e61      	ldrb	r1, [r4, #25]
    11f2:	2900      	cmp	r1, #0
    11f4:	d010      	beq.n	1218 <_ZN4RF2414startListeningEv+0x58>
        write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);
    11f6:	0022      	movs	r2, r4
    11f8:	210a      	movs	r1, #10
    11fa:	0020      	movs	r0, r4
    11fc:	7fa3      	ldrb	r3, [r4, #30]
    11fe:	3219      	adds	r2, #25
    1200:	f7ff fdfc 	bl	dfc <_ZN4RF2414write_registerEhPKhh>
    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
    1204:	211d      	movs	r1, #29
    1206:	0020      	movs	r0, r4
    1208:	f7ff fde4 	bl	dd4 <_ZN4RF2413read_registerEh>
    120c:	0783      	lsls	r3, r0, #30
    120e:	d502      	bpl.n	1216 <_ZN4RF2414startListeningEv+0x56>
        flush_tx();
    1210:	0020      	movs	r0, r4
    1212:	f7ff fe9a 	bl	f4a <_ZN4RF248flush_txEv>
}
    1216:	bd70      	pop	{r4, r5, r6, pc}
        closeReadingPipe(0);
    1218:	0020      	movs	r0, r4
    121a:	f7ff ffbd 	bl	1198 <_ZN4RF2416closeReadingPipeEh>
    121e:	e7f1      	b.n	1204 <_ZN4RF2414startListeningEv+0x44>

00001220 <_ZN4RF2415toggle_featuresEv>:

/****************************************************************************/

void RF24::toggle_features(void)
{
    1220:	b510      	push	{r4, lr}
    1222:	0004      	movs	r4, r0
    beginTransaction();
    1224:	f7ff fdcc 	bl	dc0 <_ZN4RF2416beginTransactionEv>
    _SPI.Transfer(ACTIVATE);
    1228:	2150      	movs	r1, #80	; 0x50
    122a:	6820      	ldr	r0, [r4, #0]
    122c:	f000 fccc 	bl	1bc8 <_ZN5spi_t8TransferEh>
    _SPI.Transfer(0x73);
    1230:	2173      	movs	r1, #115	; 0x73
    1232:	6820      	ldr	r0, [r4, #0]
    1234:	f000 fcc8 	bl	1bc8 <_ZN5spi_t8TransferEh>
    endTransaction();
    1238:	0020      	movs	r0, r4
    123a:	f7ff fdc6 	bl	dca <_ZN4RF2414endTransactionEv>
}
    123e:	bd10      	pop	{r4, pc}

00001240 <_ZN4RF2410setAutoAckEb>:
}

/****************************************************************************/

void RF24::setAutoAck(bool enable)
{
    1240:	000a      	movs	r2, r1
    1242:	b510      	push	{r4, lr}
    if (enable) {
    1244:	2900      	cmp	r1, #0
    1246:	d000      	beq.n	124a <_ZN4RF2410setAutoAckEb+0xa>
        write_register(EN_AA, 0x3F);
    1248:	223f      	movs	r2, #63	; 0x3f
    } else {
        write_register(EN_AA, 0);
    124a:	2101      	movs	r1, #1
    124c:	f7ff fdf3 	bl	e36 <_ZN4RF2414write_registerEhh>
    }
}
    1250:	bd10      	pop	{r4, pc}

00001252 <_ZN4RF2410setPALevelEh>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
    1252:	b570      	push	{r4, r5, r6, lr}
    1254:	000c      	movs	r4, r1

    uint8_t setup = read_register(RF_SETUP) & 0xF8;
    1256:	2106      	movs	r1, #6
{
    1258:	0005      	movs	r5, r0
    uint8_t setup = read_register(RF_SETUP) & 0xF8;
    125a:	f7ff fdbb 	bl	dd4 <_ZN4RF2413read_registerEh>
    125e:	2107      	movs	r1, #7
    1260:	4388      	bics	r0, r1
    1262:	b2c2      	uxtb	r2, r0

    if (level > 3) {                        // If invalid level, go to max PA
    1264:	2c03      	cmp	r4, #3
    1266:	d802      	bhi.n	126e <_ZN4RF2410setPALevelEh+0x1c>
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
    } else {
        level = (level << 1) + 1;            // Else set level as requested
    1268:	0064      	lsls	r4, r4, #1
    126a:	3401      	adds	r4, #1
    126c:	b2e1      	uxtb	r1, r4
    }

    write_register(RF_SETUP, setup |= level);    // Write it to the chip
    126e:	0028      	movs	r0, r5
    1270:	430a      	orrs	r2, r1
    1272:	2106      	movs	r1, #6
    1274:	f7ff fddf 	bl	e36 <_ZN4RF2414write_registerEhh>
}
    1278:	bd70      	pop	{r4, r5, r6, pc}

0000127a <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
    127a:	b570      	push	{r4, r5, r6, lr}
    127c:	000e      	movs	r6, r1
    bool result = false;
    uint8_t setup = read_register(RF_SETUP);
    127e:	2106      	movs	r1, #6
{
    1280:	0005      	movs	r5, r0

    // HIGH and LOW '00' is 1Mbs - our default
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
    1282:	24d7      	movs	r4, #215	; 0xd7
    uint8_t setup = read_register(RF_SETUP);
    1284:	f7ff fda6 	bl	dd4 <_ZN4RF2413read_registerEh>
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
    1288:	4004      	ands	r4, r0
    #if !defined(F_CPU) || F_CPU > 20000000
    txDelay = 250;
    #else //16Mhz Arduino
    txDelay=85;
    #endif
    if (speed == RF24_250KBPS) {
    128a:	2e02      	cmp	r6, #2
    128c:	d112      	bne.n	12b4 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x3a>
        // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
        // Making it '10'.
        setup |= _BV(RF_DR_LOW);
    128e:	2320      	movs	r3, #32
    1290:	431c      	orrs	r4, r3
        #if !defined(F_CPU) || F_CPU > 20000000
        txDelay = 450;
    1292:	33a3      	adds	r3, #163	; 0xa3
    1294:	33ff      	adds	r3, #255	; 0xff
            #else // 16Mhz Arduino
            txDelay = 65;
            #endif
        }
    }
    write_register(RF_SETUP, setup);
    1296:	0022      	movs	r2, r4
            txDelay = 190;
    1298:	622b      	str	r3, [r5, #32]
    write_register(RF_SETUP, setup);
    129a:	0028      	movs	r0, r5
    129c:	2106      	movs	r1, #6
    129e:	f7ff fdca 	bl	e36 <_ZN4RF2414write_registerEhh>

    // Verify our result
    if (read_register(RF_SETUP) == setup) {
    12a2:	0028      	movs	r0, r5
    12a4:	2106      	movs	r1, #6
    12a6:	f7ff fd95 	bl	dd4 <_ZN4RF2413read_registerEh>
    12aa:	1b00      	subs	r0, r0, r4
    12ac:	4244      	negs	r4, r0
    12ae:	4160      	adcs	r0, r4
        result = true;
    }
    return result;
    12b0:	b2c0      	uxtb	r0, r0
}
    12b2:	bd70      	pop	{r4, r5, r6, pc}
    txDelay = 250;
    12b4:	23fa      	movs	r3, #250	; 0xfa
        if (speed == RF24_2MBPS) {
    12b6:	2e01      	cmp	r6, #1
    12b8:	d1ed      	bne.n	1296 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1c>
            setup |= _BV(RF_DR_HIGH);
    12ba:	2308      	movs	r3, #8
    12bc:	431c      	orrs	r4, r3
            txDelay = 190;
    12be:	33b6      	adds	r3, #182	; 0xb6
    12c0:	e7e9      	b.n	1296 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1c>
    12c2:	Address 0x000012c2 is out of bounds.


000012c4 <_ZN4RF245beginEv>:
{
    12c4:	b570      	push	{r4, r5, r6, lr}
    12c6:	0004      	movs	r4, r0
        return port == b.port && pin == b.pin;
    12c8:	6840      	ldr	r0, [r0, #4]
    12ca:	68e3      	ldr	r3, [r4, #12]
    12cc:	68a2      	ldr	r2, [r4, #8]
    12ce:	4298      	cmp	r0, r3
    12d0:	d102      	bne.n	12d8 <_ZN4RF245beginEv+0x14>
    12d2:	6923      	ldr	r3, [r4, #16]
    12d4:	4293      	cmp	r3, r2
    12d6:	d00b      	beq.n	12f0 <_ZN4RF245beginEv+0x2c>
            PORT->Group[port].DIRSET.reg = 1 << pin;
    12d8:	2101      	movs	r1, #1
    12da:	4091      	lsls	r1, r2
    12dc:	4d39      	ldr	r5, [pc, #228]	; (13c4 <_ZN4RF245beginEv+0x100>)
    12de:	01c3      	lsls	r3, r0, #7
    12e0:	195b      	adds	r3, r3, r5
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    12e2:	2502      	movs	r5, #2
            PORT->Group[port].DIRSET.reg = 1 << pin;
    12e4:	6099      	str	r1, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    12e6:	189b      	adds	r3, r3, r2
    12e8:	3340      	adds	r3, #64	; 0x40
    12ea:	7819      	ldrb	r1, [r3, #0]
    12ec:	43a9      	bics	r1, r5
    12ee:	7019      	strb	r1, [r3, #0]
    if (ce_pin != csn_pin)
    12f0:	68e3      	ldr	r3, [r4, #12]
    12f2:	6921      	ldr	r1, [r4, #16]
        return port == b.port && pin == b.pin;
    12f4:	4283      	cmp	r3, r0
    12f6:	d101      	bne.n	12fc <_ZN4RF245beginEv+0x38>
    12f8:	428a      	cmp	r2, r1
    12fa:	d00b      	beq.n	1314 <_ZN4RF245beginEv+0x50>
            PORT->Group[port].DIRSET.reg = 1 << pin;
    12fc:	2201      	movs	r2, #1
    12fe:	408a      	lsls	r2, r1
    1300:	4830      	ldr	r0, [pc, #192]	; (13c4 <_ZN4RF245beginEv+0x100>)
    1302:	01db      	lsls	r3, r3, #7
    1304:	181b      	adds	r3, r3, r0
    1306:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    1308:	185b      	adds	r3, r3, r1
    130a:	2102      	movs	r1, #2
    130c:	3340      	adds	r3, #64	; 0x40
    130e:	781a      	ldrb	r2, [r3, #0]
    1310:	438a      	bics	r2, r1
    1312:	701a      	strb	r2, [r3, #0]
    ce(LOW);
    1314:	2100      	movs	r1, #0
    1316:	0020      	movs	r0, r4
    1318:	f7ff fd3a 	bl	d90 <_ZN4RF242ceEb>
    csn(HIGH);
    131c:	2101      	movs	r1, #1
    131e:	0020      	movs	r0, r4
    1320:	f7ff fd20 	bl	d64 <_ZN4RF243csnEb>
    delay_usec(5000);
    1324:	4828      	ldr	r0, [pc, #160]	; (13c8 <_ZN4RF245beginEv+0x104>)
    1326:	f002 fbcb 	bl	3ac0 <__delay_usec_veneer>
    write_register(NRF_CONFIG, 0x0C);
    132a:	220c      	movs	r2, #12
    132c:	2100      	movs	r1, #0
    132e:	0020      	movs	r0, r4
    1330:	f7ff fd81 	bl	e36 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
    1334:	2104      	movs	r1, #4
    1336:	225f      	movs	r2, #95	; 0x5f
    1338:	0020      	movs	r0, r4
    133a:	f7ff fd7c 	bl	e36 <_ZN4RF2414write_registerEhh>
    if (setDataRate(RF24_250KBPS)) {
    133e:	2102      	movs	r1, #2
    1340:	0020      	movs	r0, r4
    1342:	f7ff ff9a 	bl	127a <_ZN4RF2411setDataRateE15rf24_datarate_e>
    1346:	2800      	cmp	r0, #0
    1348:	d001      	beq.n	134e <_ZN4RF245beginEv+0x8a>
        p_variant = true;
    134a:	2301      	movs	r3, #1
    134c:	75a3      	strb	r3, [r4, #22]
    setup = read_register(RF_SETUP);
    134e:	2106      	movs	r1, #6
    1350:	0020      	movs	r0, r4
    1352:	f7ff fd3f 	bl	dd4 <_ZN4RF2413read_registerEh>
    dynamic_payloads_enabled = false;
    1356:	2500      	movs	r5, #0
    setDataRate(RF24_1MBPS);
    1358:	2100      	movs	r1, #0
    setup = read_register(RF_SETUP);
    135a:	0006      	movs	r6, r0
    setDataRate(RF24_1MBPS);
    135c:	0020      	movs	r0, r4
    135e:	f7ff ff8c 	bl	127a <_ZN4RF2411setDataRateE15rf24_datarate_e>
    toggle_features();
    1362:	0020      	movs	r0, r4
    1364:	f7ff ff5c 	bl	1220 <_ZN4RF2415toggle_featuresEv>
    write_register(FEATURE, 0);
    1368:	2200      	movs	r2, #0
    136a:	211d      	movs	r1, #29
    136c:	0020      	movs	r0, r4
    136e:	f7ff fd62 	bl	e36 <_ZN4RF2414write_registerEhh>
    write_register(DYNPD, 0);
    1372:	2200      	movs	r2, #0
    1374:	211c      	movs	r1, #28
    1376:	0020      	movs	r0, r4
    1378:	f7ff fd5d 	bl	e36 <_ZN4RF2414write_registerEhh>
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
    137c:	2270      	movs	r2, #112	; 0x70
    dynamic_payloads_enabled = false;
    137e:	7625      	strb	r5, [r4, #24]
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
    1380:	2107      	movs	r1, #7
    1382:	0020      	movs	r0, r4
    1384:	f7ff fd57 	bl	e36 <_ZN4RF2414write_registerEhh>
    setChannel(76);
    1388:	214c      	movs	r1, #76	; 0x4c
    138a:	0020      	movs	r0, r4
    138c:	f7ff fe03 	bl	f96 <_ZN4RF2410setChannelEh>
    flush_rx();
    1390:	0020      	movs	r0, r4
    1392:	f7ff fdd5 	bl	f40 <_ZN4RF248flush_rxEv>
    flush_tx();
    1396:	0020      	movs	r0, r4
    1398:	f7ff fdd7 	bl	f4a <_ZN4RF248flush_txEv>
    powerUp(); //Power up by default when begin() is called
    139c:	0020      	movs	r0, r4
    139e:	f7ff fe33 	bl	1008 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
    13a2:	0029      	movs	r1, r5
    13a4:	0020      	movs	r0, r4
    13a6:	f7ff fd15 	bl	dd4 <_ZN4RF2413read_registerEh>
    13aa:	22fe      	movs	r2, #254	; 0xfe
    13ac:	0029      	movs	r1, r5
    13ae:	4002      	ands	r2, r0
    13b0:	0020      	movs	r0, r4
    13b2:	f7ff fd40 	bl	e36 <_ZN4RF2414write_registerEhh>
    return (setup != 0 && setup != 0xff);
    13b6:	23fd      	movs	r3, #253	; 0xfd
    13b8:	3e01      	subs	r6, #1
    13ba:	b2f6      	uxtb	r6, r6
    13bc:	42b3      	cmp	r3, r6
    13be:	416d      	adcs	r5, r5
    13c0:	b2e8      	uxtb	r0, r5
}
    13c2:	bd70      	pop	{r4, r5, r6, pc}
    13c4:	41004400 	.word	0x41004400
    13c8:	00001388 	.word	0x00001388

000013cc <_ZN4RF2410setRetriesEhh>:
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
    13cc:	230f      	movs	r3, #15
{
    13ce:	b510      	push	{r4, lr}
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
    13d0:	0109      	lsls	r1, r1, #4
    13d2:	401a      	ands	r2, r3
    13d4:	430a      	orrs	r2, r1
    13d6:	b2d2      	uxtb	r2, r2
    13d8:	2104      	movs	r1, #4
    13da:	f7ff fd2c 	bl	e36 <_ZN4RF2414write_registerEhh>
}
    13de:	bd10      	pop	{r4, pc}

000013e0 <_ZN9SensornetD1Ev>:
	char name[8]; // 8 bytes
	uint8_t type; // 1 byte
	uint8_t data[22]; // total 32 bytes (max nrf24l01 packet size)
};

class Sensornet {
    13e0:	b510      	push	{r4, lr}
    13e2:	0004      	movs	r4, r0
        if(m_data) free(m_data);
    13e4:	6b40      	ldr	r0, [r0, #52]	; 0x34
    13e6:	2800      	cmp	r0, #0
    13e8:	d001      	beq.n	13ee <_ZN9SensornetD1Ev+0xe>
    13ea:	f001 f9a5 	bl	2738 <free>
    13ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    13f0:	2800      	cmp	r0, #0
    13f2:	d001      	beq.n	13f8 <_ZN9SensornetD1Ev+0x18>
    13f4:	f001 f9a0 	bl	2738 <free>
    13f8:	0020      	movs	r0, r4
    13fa:	bd10      	pop	{r4, pc}

000013fc <_ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_>:
            delay_usec(200000);
        }
    }

    gsm.AddSMSFunc({ "info", cmd_info, GSM::LEVEL_USER });
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, GSM::LEVEL_USER });
    13fc:	b510      	push	{r4, lr}
    13fe:	0013      	movs	r3, r2
    1400:	000a      	movs	r2, r1
    1402:	0001      	movs	r1, r0
    1404:	4801      	ldr	r0, [pc, #4]	; (140c <_ZZ4mainENUlP3GSMPKcS2_E_4_FUNES0_S2_S2_+0x10>)
    1406:	f000 ffa9 	bl	235c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_>
    140a:	bd10      	pop	{r4, pc}
    140c:	20000280 	.word	0x20000280

00001410 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_>:
    gsm.AddSMSFunc({ "clear", [](GSM* gsm, const char* sender, const char* args) { net.m_nodes.clear(); }, GSM::LEVEL_USER });
    1410:	b510      	push	{r4, lr}
    size_t size() {
        return m_size;
    }

    void clear() {
        if(m_data && m_size) free(m_data);
    1412:	4c06      	ldr	r4, [pc, #24]	; (142c <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x1c>)
    1414:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1416:	2800      	cmp	r0, #0
    1418:	d004      	beq.n	1424 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x14>
    141a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    141c:	2b00      	cmp	r3, #0
    141e:	d001      	beq.n	1424 <_ZZ4mainENUlP3GSMPKcS2_E0_4_FUNES0_S2_S2_+0x14>
    1420:	f001 f98a 	bl	2738 <free>
        m_data = NULL;
    1424:	2300      	movs	r3, #0
    1426:	6363      	str	r3, [r4, #52]	; 0x34
        m_size = 0;
    1428:	6323      	str	r3, [r4, #48]	; 0x30
    142a:	bd10      	pop	{r4, pc}
    142c:	20000280 	.word	0x20000280

00001430 <_ZNK3Str18is_using_local_bufEv>:
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1430:	0003      	movs	r3, r0
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
    1432:	0002      	movs	r2, r0
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1434:	6819      	ldr	r1, [r3, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
    1436:	3208      	adds	r2, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
    1438:	2000      	movs	r0, #0
    143a:	4291      	cmp	r1, r2
    143c:	d105      	bne.n	144a <_ZNK3Str18is_using_local_bufEv+0x1a>
    143e:	88d8      	ldrh	r0, [r3, #6]
    1440:	4b02      	ldr	r3, [pc, #8]	; (144c <_ZNK3Str18is_using_local_bufEv+0x1c>)
    1442:	4018      	ands	r0, r3
    1444:	1e43      	subs	r3, r0, #1
    1446:	4198      	sbcs	r0, r3
    1448:	b2c0      	uxtb	r0, r0
    144a:	4770      	bx	lr
    144c:	00007fe0 	.word	0x00007fe0

00001450 <_ZN3Str7reserveEi>:
    }
}

// Reserve memory, preserving the current of the buffer
void    Str::reserve(int new_capacity)
{
    1450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (new_capacity <= Capacity)
    1452:	6843      	ldr	r3, [r0, #4]
{
    1454:	0005      	movs	r5, r0
    if (new_capacity <= Capacity)
    1456:	02db      	lsls	r3, r3, #11
{
    1458:	000f      	movs	r7, r1
    if (new_capacity <= Capacity)
    145a:	0adb      	lsrs	r3, r3, #11
    145c:	428b      	cmp	r3, r1
    145e:	da25      	bge.n	14ac <_ZN3Str7reserveEi+0x5c>
        return;

    char* new_data;
    if (new_capacity < LocalBufSize)
    1460:	88c4      	ldrh	r4, [r0, #6]
    1462:	0464      	lsls	r4, r4, #17
    1464:	0da4      	lsrs	r4, r4, #22
    1466:	42a1      	cmp	r1, r4
    1468:	da21      	bge.n	14ae <_ZN3Str7reserveEi+0x5e>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
    146a:	0006      	movs	r6, r0
    146c:	3608      	adds	r6, #8
        // Disowned or LocalBuf -> Heap
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    }

    // string in Data might be longer than new_capacity if it wasn't owned, don't copy too much
    strncpy(new_data, Data, new_capacity - 1);
    146e:	1e62      	subs	r2, r4, #1
    1470:	0030      	movs	r0, r6
    1472:	6829      	ldr	r1, [r5, #0]
    1474:	f001 fad4 	bl	2a20 <strncpy>
    new_data[new_capacity - 1] = 0;
    1478:	2200      	movs	r2, #0
    147a:	1933      	adds	r3, r6, r4
    147c:	3b01      	subs	r3, #1
    147e:	701a      	strb	r2, [r3, #0]

    if (Owned && !is_using_local_buf())
    1480:	79eb      	ldrb	r3, [r5, #7]
    1482:	2b7f      	cmp	r3, #127	; 0x7f
    1484:	d907      	bls.n	1496 <_ZN3Str7reserveEi+0x46>
    1486:	0028      	movs	r0, r5
    1488:	f7ff ffd2 	bl	1430 <_ZNK3Str18is_using_local_bufEv>
    148c:	2800      	cmp	r0, #0
    148e:	d102      	bne.n	1496 <_ZN3Str7reserveEi+0x46>
        STR_MEMFREE(Data);
    1490:	6828      	ldr	r0, [r5, #0]
    1492:	f001 f951 	bl	2738 <free>

    Data = new_data;
    Capacity = new_capacity;
    1496:	2380      	movs	r3, #128	; 0x80
    1498:	02e4      	lsls	r4, r4, #11
    149a:	061b      	lsls	r3, r3, #24
    149c:	0ae4      	lsrs	r4, r4, #11
    149e:	686a      	ldr	r2, [r5, #4]
    14a0:	431c      	orrs	r4, r3
    14a2:	4b06      	ldr	r3, [pc, #24]	; (14bc <_ZN3Str7reserveEi+0x6c>)
    Data = new_data;
    14a4:	602e      	str	r6, [r5, #0]
    Capacity = new_capacity;
    14a6:	4013      	ands	r3, r2
    14a8:	431c      	orrs	r4, r3
    14aa:	606c      	str	r4, [r5, #4]
    Owned = 1;
}
    14ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    14ae:	0008      	movs	r0, r1
    14b0:	f001 f938 	bl	2724 <malloc>
    14b4:	003c      	movs	r4, r7
    14b6:	0006      	movs	r6, r0
    14b8:	e7d9      	b.n	146e <_ZN3Str7reserveEi+0x1e>
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	7fe00000 	.word	0x7fe00000

000014c0 <_ZN3Str15reserve_discardEi>:

// Reserve memory, discarding the current of the buffer (if we expect to be fully rewritten)
void    Str::reserve_discard(int new_capacity)
{
    if (new_capacity <= Capacity)
    14c0:	6843      	ldr	r3, [r0, #4]
{
    14c2:	b570      	push	{r4, r5, r6, lr}
    if (new_capacity <= Capacity)
    14c4:	02db      	lsls	r3, r3, #11
{
    14c6:	0004      	movs	r4, r0
    14c8:	000d      	movs	r5, r1
    if (new_capacity <= Capacity)
    14ca:	0adb      	lsrs	r3, r3, #11
    14cc:	428b      	cmp	r3, r1
    14ce:	da1b      	bge.n	1508 <_ZN3Str15reserve_discardEi+0x48>
        return;

    if (Owned && !is_using_local_buf())
    14d0:	79c3      	ldrb	r3, [r0, #7]
    14d2:	2b7f      	cmp	r3, #127	; 0x7f
    14d4:	d906      	bls.n	14e4 <_ZN3Str15reserve_discardEi+0x24>
    14d6:	f7ff ffab 	bl	1430 <_ZNK3Str18is_using_local_bufEv>
    14da:	2800      	cmp	r0, #0
    14dc:	d102      	bne.n	14e4 <_ZN3Str15reserve_discardEi+0x24>
        STR_MEMFREE(Data);
    14de:	6820      	ldr	r0, [r4, #0]
    14e0:	f001 f92a 	bl	2738 <free>

    if (new_capacity < LocalBufSize)
    14e4:	88e3      	ldrh	r3, [r4, #6]
    14e6:	045b      	lsls	r3, r3, #17
    14e8:	0d9a      	lsrs	r2, r3, #22
    14ea:	4295      	cmp	r5, r2
    14ec:	da0d      	bge.n	150a <_ZN3Str15reserve_discardEi+0x4a>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
    14ee:	0023      	movs	r3, r4
    14f0:	3308      	adds	r3, #8
    {
        // Disowned -> LocalBuf
        Data = local_buf();
    14f2:	6023      	str	r3, [r4, #0]
        Capacity = LocalBufSize;
    14f4:	6863      	ldr	r3, [r4, #4]
    14f6:	0d5b      	lsrs	r3, r3, #21
    14f8:	055b      	lsls	r3, r3, #21
    14fa:	4313      	orrs	r3, r2
    14fc:	6063      	str	r3, [r4, #4]
    {
        // Disowned or LocalBuf -> Heap
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
        Capacity = new_capacity;
    }
    Owned = 1;
    14fe:	2380      	movs	r3, #128	; 0x80
    1500:	79e2      	ldrb	r2, [r4, #7]
    1502:	425b      	negs	r3, r3
    1504:	4313      	orrs	r3, r2
    1506:	71e3      	strb	r3, [r4, #7]
}
    1508:	bd70      	pop	{r4, r5, r6, pc}
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    150a:	0028      	movs	r0, r5
    150c:	f001 f90a 	bl	2724 <malloc>
        Capacity = new_capacity;
    1510:	6863      	ldr	r3, [r4, #4]
    1512:	02ed      	lsls	r5, r5, #11
    1514:	0d59      	lsrs	r1, r3, #21
    1516:	0aed      	lsrs	r5, r5, #11
    1518:	0549      	lsls	r1, r1, #21
    151a:	430d      	orrs	r5, r1
        Data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    151c:	6020      	str	r0, [r4, #0]
        Capacity = new_capacity;
    151e:	6065      	str	r5, [r4, #4]
    1520:	e7ed      	b.n	14fe <_ZN3Str15reserve_discardEi+0x3e>

00001522 <_ZN3Str11append_fromEic>:
    va_end(args);
    return len;
}

int     Str::append_from(int idx, char c)
{
    1522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int add_len = 1;
    if (Capacity < idx + add_len + 1)
    1524:	6843      	ldr	r3, [r0, #4]
    1526:	1c4f      	adds	r7, r1, #1
    1528:	02db      	lsls	r3, r3, #11
{
    152a:	0004      	movs	r4, r0
    152c:	000d      	movs	r5, r1
    152e:	0016      	movs	r6, r2
    if (Capacity < idx + add_len + 1)
    1530:	0adb      	lsrs	r3, r3, #11
    1532:	429f      	cmp	r7, r3
    1534:	db02      	blt.n	153c <_ZN3Str11append_fromEic+0x1a>
        reserve(idx + add_len + 1);
    1536:	3102      	adds	r1, #2
    1538:	f7ff ff8a 	bl	1450 <_ZN3Str7reserveEi>
    Data[idx] = c;
    Data[idx + add_len] = 0;
    153c:	2200      	movs	r2, #0
    Data[idx] = c;
    153e:	6823      	ldr	r3, [r4, #0]
    STR_ASSERT(Owned);
    return add_len;
}
    1540:	2001      	movs	r0, #1
    Data[idx] = c;
    1542:	555e      	strb	r6, [r3, r5]
    Data[idx + add_len] = 0;
    1544:	6823      	ldr	r3, [r4, #0]
    1546:	55da      	strb	r2, [r3, r7]
}
    1548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000154a <_ZN3Str13appendfv_fromEiPKcSt9__va_list>:
    return add_len;
}

// FIXME: merge setfv() and appendfv()?
int     Str::appendfv_from(int idx, const char* fmt, va_list args)
{
    154a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    154c:	0017      	movs	r7, r2
    if (Capacity < idx + add_len + 1)
        reserve(idx + add_len + 1);
    add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
#else
    // First try
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    154e:	79c2      	ldrb	r2, [r0, #7]
{
    1550:	0005      	movs	r5, r0
    1552:	000e      	movs	r6, r1
    va_copy(args2, args);
    1554:	9301      	str	r3, [sp, #4]
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    1556:	2a7f      	cmp	r2, #127	; 0x7f
    1558:	d91d      	bls.n	1596 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x4c>
    155a:	6802      	ldr	r2, [r0, #0]
    155c:	1850      	adds	r0, r2, r1
    155e:	686a      	ldr	r2, [r5, #4]
    1560:	02d1      	lsls	r1, r2, #11
    1562:	0ac9      	lsrs	r1, r1, #11
    1564:	1b89      	subs	r1, r1, r6
    1566:	003a      	movs	r2, r7
    1568:	f001 fb96 	bl	2c98 <vsniprintf>
    STR_ASSERT(add_len >= 0);

    if (Capacity < idx + add_len + 1)
    156c:	686b      	ldr	r3, [r5, #4]
    156e:	1831      	adds	r1, r6, r0
    1570:	02db      	lsls	r3, r3, #11
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    1572:	0004      	movs	r4, r0
    if (Capacity < idx + add_len + 1)
    1574:	0adb      	lsrs	r3, r3, #11
    1576:	4299      	cmp	r1, r3
    1578:	db0b      	blt.n	1592 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x48>
    {
        reserve(idx + add_len + 1);
    157a:	0028      	movs	r0, r5
    157c:	3101      	adds	r1, #1
    157e:	f7ff ff67 	bl	1450 <_ZN3Str7reserveEi>
        add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
    1582:	6828      	ldr	r0, [r5, #0]
    1584:	1c61      	adds	r1, r4, #1
    1586:	003a      	movs	r2, r7
    1588:	9b01      	ldr	r3, [sp, #4]
    158a:	1980      	adds	r0, r0, r6
    158c:	f001 fb84 	bl	2c98 <vsniprintf>
    1590:	0004      	movs	r4, r0
    }
#endif

    STR_ASSERT(Owned);
    return add_len;
}
    1592:	0020      	movs	r0, r4
    1594:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
    1596:	2000      	movs	r0, #0
    1598:	0001      	movs	r1, r0
    159a:	e7e4      	b.n	1566 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x1c>

0000159c <_ZN3Str6appendEc>:
    va_end(args);
    return len;
}

int     Str::append(char c)
{
    159c:	b570      	push	{r4, r5, r6, lr}
    159e:	0004      	movs	r4, r0
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
    15a0:	6800      	ldr	r0, [r0, #0]
{
    15a2:	000d      	movs	r5, r1
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
    15a4:	f001 fa24 	bl	29f0 <strlen>
    int cur_len = length();
    return append_from(cur_len, c);
    15a8:	002a      	movs	r2, r5
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
    15aa:	0001      	movs	r1, r0
    return append_from(cur_len, c);
    15ac:	0020      	movs	r0, r4
    15ae:	f7ff ffb8 	bl	1522 <_ZN3Str11append_fromEic>
}
    15b2:	bd70      	pop	{r4, r5, r6, pc}

000015b4 <_ZN3Str8appendfvEPKcSt9__va_list>:
    int cur_len = length();
    return append_from(cur_len, s, s_end);
}

int     Str::appendfv(const char* fmt, va_list args)
{
    15b4:	b570      	push	{r4, r5, r6, lr}
    15b6:	0004      	movs	r4, r0
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
    15b8:	6800      	ldr	r0, [r0, #0]
{
    15ba:	000d      	movs	r5, r1
    15bc:	0016      	movs	r6, r2
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
    15be:	f001 fa17 	bl	29f0 <strlen>
    int cur_len = length();
    return appendfv_from(cur_len, fmt, args);
    15c2:	0033      	movs	r3, r6
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
    15c4:	0001      	movs	r1, r0
    return appendfv_from(cur_len, fmt, args);
    15c6:	002a      	movs	r2, r5
    15c8:	0020      	movs	r0, r4
    15ca:	f7ff ffbe 	bl	154a <_ZN3Str13appendfv_fromEiPKcSt9__va_list>
}
    15ce:	bd70      	pop	{r4, r5, r6, pc}

000015d0 <_ZN3Str7appendfEPKcz>:

int     Str::appendf(const char* fmt, ...)
{
    15d0:	b40e      	push	{r1, r2, r3}
    15d2:	b503      	push	{r0, r1, lr}
    15d4:	aa03      	add	r2, sp, #12
    15d6:	ca02      	ldmia	r2!, {r1}
    va_list args;
    va_start(args, fmt);
    15d8:	9201      	str	r2, [sp, #4]
    int len = appendfv(fmt, args);
    15da:	f7ff ffeb 	bl	15b4 <_ZN3Str8appendfvEPKcSt9__va_list>
    va_end(args);
    return len;
}
    15de:	b002      	add	sp, #8
    15e0:	bc08      	pop	{r3}
    15e2:	b003      	add	sp, #12
    15e4:	4718      	bx	r3
    15e6:	Address 0x000015e6 is out of bounds.


000015e8 <_ZL8cmd_infoP3GSMPKcS2_>:
static void cmd_info(GSM* gsm, const char* sender, const char* args) {
    15e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
    15ea:	4b2d      	ldr	r3, [pc, #180]	; (16a0 <_ZL8cmd_infoP3GSMPKcS2_+0xb8>)
    15ec:	b089      	sub	sp, #36	; 0x24
    15ee:	681b      	ldr	r3, [r3, #0]
    15f0:	0005      	movs	r5, r0
    15f2:	9306      	str	r3, [sp, #24]
    Capacity = 0;
    15f4:	2300      	movs	r3, #0
        reserve_discard(buf_len);
    15f6:	a806      	add	r0, sp, #24
    15f8:	000e      	movs	r6, r1
    15fa:	2107      	movs	r1, #7
    Capacity = 0;
    15fc:	9307      	str	r3, [sp, #28]
        reserve_discard(buf_len);
    15fe:	f7ff ff5f 	bl	14c0 <_ZN3Str15reserve_discardEi>
    memcpy(Data, src, buf_len);
    1602:	2207      	movs	r2, #7
    1604:	4927      	ldr	r1, [pc, #156]	; (16a4 <_ZL8cmd_infoP3GSMPKcS2_+0xbc>)
    1606:	9806      	ldr	r0, [sp, #24]
    1608:	f001 f8a0 	bl	274c <memcpy>
    Owned = 1;
    160c:	ab04      	add	r3, sp, #16
    160e:	7bda      	ldrb	r2, [r3, #15]
    1610:	2380      	movs	r3, #128	; 0x80
    1612:	425b      	negs	r3, r3
    1614:	4313      	orrs	r3, r2
    1616:	aa04      	add	r2, sp, #16
    1618:	73d3      	strb	r3, [r2, #15]
        return m_data + m_size;
    161a:	2224      	movs	r2, #36	; 0x24
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    161c:	27fa      	movs	r7, #250	; 0xfa
    for(auto& node : net.m_nodes) {
    161e:	4b22      	ldr	r3, [pc, #136]	; (16a8 <_ZL8cmd_infoP3GSMPKcS2_+0xc0>)
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    1620:	00bf      	lsls	r7, r7, #2
    for(auto& node : net.m_nodes) {
    1622:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    1624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1626:	4353      	muls	r3, r2
    1628:	18e3      	adds	r3, r4, r3
    162a:	9305      	str	r3, [sp, #20]
    162c:	9b05      	ldr	r3, [sp, #20]
    162e:	42a3      	cmp	r3, r4
    1630:	d02c      	beq.n	168c <_ZL8cmd_infoP3GSMPKcS2_+0xa4>
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    1632:	2300      	movs	r3, #0
    1634:	56e3      	ldrsb	r3, [r4, r3]
    1636:	9303      	str	r3, [sp, #12]
    1638:	7a63      	ldrb	r3, [r4, #9]
    163a:	9304      	str	r3, [sp, #16]
            node.data.id, node.data.name, node.data.type, (millis() - node.last_seen) / 1000);
    163c:	f000 fb9c 	bl	1d78 <millis>
    1640:	6a23      	ldr	r3, [r4, #32]
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    1642:	0039      	movs	r1, r7
            node.data.id, node.data.name, node.data.type, (millis() - node.last_seen) / 1000);
    1644:	1ac0      	subs	r0, r0, r3
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
    1646:	f000 ff77 	bl	2538 <__udivsi3>
    164a:	9b04      	ldr	r3, [sp, #16]
    164c:	9001      	str	r0, [sp, #4]
    164e:	9300      	str	r3, [sp, #0]
    1650:	9a03      	ldr	r2, [sp, #12]
    1652:	1c63      	adds	r3, r4, #1
    1654:	4915      	ldr	r1, [pc, #84]	; (16ac <_ZL8cmd_infoP3GSMPKcS2_+0xc4>)
    1656:	a806      	add	r0, sp, #24
    1658:	f7ff ffba 	bl	15d0 <_ZN3Str7appendfEPKcz>
        switch(node.data.type) {
    165c:	7a63      	ldrb	r3, [r4, #9]
    165e:	2b02      	cmp	r3, #2
    1660:	d009      	beq.n	1676 <_ZL8cmd_infoP3GSMPKcS2_+0x8e>
    1662:	2b03      	cmp	r3, #3
    1664:	d00f      	beq.n	1686 <_ZL8cmd_infoP3GSMPKcS2_+0x9e>
    1666:	2b01      	cmp	r3, #1
    1668:	d10b      	bne.n	1682 <_ZL8cmd_infoP3GSMPKcS2_+0x9a>
                str.appendf(" Soil moisture sensor:\n  Moisture: %d\n", ((Sensors::Soil*)node.data.data)->moisture);
    166a:	8962      	ldrh	r2, [r4, #10]
    166c:	4910      	ldr	r1, [pc, #64]	; (16b0 <_ZL8cmd_infoP3GSMPKcS2_+0xc8>)
                str.appendf(" Temperature sensor:\n  Temperature: %d\n",
    166e:	a806      	add	r0, sp, #24
    1670:	f7ff ffae 	bl	15d0 <_ZN3Str7appendfEPKcz>
                break;
    1674:	e005      	b.n	1682 <_ZL8cmd_infoP3GSMPKcS2_+0x9a>
                str.appendf(" Temperature + humidity sensor:\n  Temperature: %d\n  Humidity: %d\n",
    1676:	89a3      	ldrh	r3, [r4, #12]
    1678:	8962      	ldrh	r2, [r4, #10]
    167a:	490e      	ldr	r1, [pc, #56]	; (16b4 <_ZL8cmd_infoP3GSMPKcS2_+0xcc>)
    167c:	a806      	add	r0, sp, #24
    167e:	f7ff ffa7 	bl	15d0 <_ZN3Str7appendfEPKcz>
    for(auto& node : net.m_nodes) {
    1682:	3424      	adds	r4, #36	; 0x24
    1684:	e7d2      	b.n	162c <_ZL8cmd_infoP3GSMPKcS2_+0x44>
                str.appendf(" Temperature sensor:\n  Temperature: %d\n",
    1686:	8962      	ldrh	r2, [r4, #10]
    1688:	490b      	ldr	r1, [pc, #44]	; (16b8 <_ZL8cmd_infoP3GSMPKcS2_+0xd0>)
    168a:	e7f0      	b.n	166e <_ZL8cmd_infoP3GSMPKcS2_+0x86>
    gsm->SendSMS(sender, str.c_str());
    168c:	0031      	movs	r1, r6
    168e:	9a06      	ldr	r2, [sp, #24]
    1690:	0028      	movs	r0, r5
    1692:	f7fe fde9 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    Str str = "List:\n";
    1696:	a806      	add	r0, sp, #24
    1698:	f7fe fd32 	bl	100 <_ZN3StrD1Ev>
}
    169c:	b009      	add	sp, #36	; 0x24
    169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16a0:	200001e8 	.word	0x200001e8
    16a4:	00003549 	.word	0x00003549
    16a8:	20000280 	.word	0x20000280
    16ac:	00003772 	.word	0x00003772
    16b0:	000037ac 	.word	0x000037ac
    16b4:	000037d3 	.word	0x000037d3
    16b8:	00003815 	.word	0x00003815

000016bc <_Z8SetupRTCv>:
        }
    }
}

void SetupRTC() {
    GCLK->GENDIV.reg =
    16bc:	4b0f      	ldr	r3, [pc, #60]	; (16fc <_Z8SetupRTCv+0x40>)
    16be:	4a10      	ldr	r2, [pc, #64]	; (1700 <_Z8SetupRTCv+0x44>)
    16c0:	609a      	str	r2, [r3, #8]
        GCLK_GENDIV_ID(1) | // Select generator 1
        GCLK_GENDIV_DIV(32); // Set the division factor to 32
        GCLK->GENCTRL.reg =
    16c2:	4a10      	ldr	r2, [pc, #64]	; (1704 <_Z8SetupRTCv+0x48>)
    16c4:	605a      	str	r2, [r3, #4]
        GCLK_GENCTRL_ID(1) | // Select generator 1
        (3 << 8) | // Select source OSCULP32K
        GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY); // Wait for synchronization
    16c6:	785a      	ldrb	r2, [r3, #1]
    16c8:	09d2      	lsrs	r2, r2, #7
    16ca:	d1fc      	bne.n	16c6 <_Z8SetupRTCv+0xa>

	GCLK->CLKCTRL.reg =
    16cc:	4a0e      	ldr	r2, [pc, #56]	; (1708 <_Z8SetupRTCv+0x4c>)
    16ce:	805a      	strh	r2, [r3, #2]
        GCLK_CLKCTRL_ID_RTC | // Target is RTC
        GCLK_CLKCTRL_GEN(1) | // Select generator1 as source.
        GCLK_CLKCTRL_CLKEN; // Enable the RTC
	while (GCLK->STATUS.bit.SYNCBUSY); // Wait for synchronization
    16d0:	785a      	ldrb	r2, [r3, #1]
    16d2:	09d2      	lsrs	r2, r2, #7
    16d4:	d1fc      	bne.n	16d0 <_Z8SetupRTCv+0x14>

	RTC->MODE2.CTRL.reg =
    16d6:	4b0d      	ldr	r3, [pc, #52]	; (170c <_Z8SetupRTCv+0x50>)
    16d8:	490d      	ldr	r1, [pc, #52]	; (1710 <_Z8SetupRTCv+0x54>)
    16da:	8019      	strh	r1, [r3, #0]
        RTC_MODE2_CTRL_MODE_CLOCK |
        RTC_MODE2_CTRL_PRESCALER_DIV1024;

    // Interrupt every minute at 00 seconds
    RTC->MODE2.Mode2Alarm->ALARM.reg = 0;
    16dc:	490d      	ldr	r1, [pc, #52]	; (1714 <_Z8SetupRTCv+0x58>)
    16de:	600a      	str	r2, [r1, #0]
	RTC->MODE2.Mode2Alarm->MASK.reg = RTC_MODE2_MASK_SEL_SS;
    16e0:	3201      	adds	r2, #1
    16e2:	710a      	strb	r2, [r1, #4]
	RTC->MODE2.INTENSET.bit.ALARM0 = 1;
    16e4:	79d9      	ldrb	r1, [r3, #7]
    16e6:	430a      	orrs	r2, r1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    16e8:	2108      	movs	r1, #8
    16ea:	71da      	strb	r2, [r3, #7]
    16ec:	4a0a      	ldr	r2, [pc, #40]	; (1718 <_Z8SetupRTCv+0x5c>)
    16ee:	6011      	str	r1, [r2, #0]
	NVIC_EnableIRQ(RTC_IRQn);
	
	RTC->MODE2.CTRL.bit.ENABLE = 1;
    16f0:	2202      	movs	r2, #2
    16f2:	8819      	ldrh	r1, [r3, #0]
    16f4:	430a      	orrs	r2, r1
    16f6:	801a      	strh	r2, [r3, #0]
}
    16f8:	4770      	bx	lr
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	40000c00 	.word	0x40000c00
    1700:	00002001 	.word	0x00002001
    1704:	00010301 	.word	0x00010301
    1708:	00004104 	.word	0x00004104
    170c:	40001400 	.word	0x40001400
    1710:	00000a08 	.word	0x00000a08
    1714:	40001418 	.word	0x40001418
    1718:	e000e100 	.word	0xe000e100

0000171c <_Z9UpdateRTCv>:

void UpdateRTC() {
    171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(!gsm.Command("AT+CCLK?", "+CCLK: "))
    171e:	4c2e      	ldr	r4, [pc, #184]	; (17d8 <_Z9UpdateRTCv+0xbc>)
    1720:	4d2e      	ldr	r5, [pc, #184]	; (17dc <_Z9UpdateRTCv+0xc0>)
    1722:	0022      	movs	r2, r4
    1724:	0028      	movs	r0, r5
    1726:	4b2e      	ldr	r3, [pc, #184]	; (17e0 <_Z9UpdateRTCv+0xc4>)
    1728:	492e      	ldr	r1, [pc, #184]	; (17e4 <_Z9UpdateRTCv+0xc8>)
    172a:	f7fe fd07 	bl	13c <_ZN3GSM7CommandEPKcS1_j>
    172e:	2800      	cmp	r0, #0
    1730:	d00c      	beq.n	174c <_Z9UpdateRTCv+0x30>
        return;

    char* resp = gsm.m_uart->read();
    1732:	68a8      	ldr	r0, [r5, #8]
    1734:	f000 fc9c 	bl	2070 <_ZN6uart_t4readEv>
    1738:	1e06      	subs	r6, r0, #0
    if(!resp) return;
    173a:	d007      	beq.n	174c <_Z9UpdateRTCv+0x30>
    char* data = strstr(resp, "+CCLK: ");
    173c:	0021      	movs	r1, r4
    173e:	f001 f983 	bl	2a48 <strstr>
    1742:	1e05      	subs	r5, r0, #0
    if(!data) {
    1744:	d103      	bne.n	174e <_Z9UpdateRTCv+0x32>
	RTC->MODE2.CLOCK.bit.DAY = atoi(data + 6);
	RTC->MODE2.CLOCK.bit.HOUR = atoi(data + 9);
	RTC->MODE2.CLOCK.bit.MINUTE = atoi(data + 12);
	RTC->MODE2.CLOCK.bit.SECOND = atoi(data + 15);

    free(resp);
    1746:	0030      	movs	r0, r6
    1748:	f000 fff6 	bl	2738 <free>
}
    174c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    data += 8; // Skip +CCLK: "
    174e:	3008      	adds	r0, #8
    RTC->MODE2.CLOCK.bit.YEAR = atoi(data);
    1750:	f000 ffa6 	bl	26a0 <atoi>
    1754:	4c24      	ldr	r4, [pc, #144]	; (17e8 <_Z9UpdateRTCv+0xcc>)
    1756:	0682      	lsls	r2, r0, #26
    1758:	6923      	ldr	r3, [r4, #16]
    175a:	273f      	movs	r7, #63	; 0x3f
    175c:	0198      	lsls	r0, r3, #6
    175e:	0980      	lsrs	r0, r0, #6
    1760:	4310      	orrs	r0, r2
    1762:	6120      	str	r0, [r4, #16]
	RTC->MODE2.CLOCK.bit.MONTH = atoi(data + 3);
    1764:	0028      	movs	r0, r5
    1766:	300b      	adds	r0, #11
    1768:	f000 ff9a 	bl	26a0 <atoi>
    176c:	220f      	movs	r2, #15
    176e:	6923      	ldr	r3, [r4, #16]
    1770:	4010      	ands	r0, r2
    1772:	4a1e      	ldr	r2, [pc, #120]	; (17ec <_Z9UpdateRTCv+0xd0>)
    1774:	0580      	lsls	r0, r0, #22
    1776:	4013      	ands	r3, r2
    1778:	4303      	orrs	r3, r0
	RTC->MODE2.CLOCK.bit.DAY = atoi(data + 6);
    177a:	0028      	movs	r0, r5
	RTC->MODE2.CLOCK.bit.MONTH = atoi(data + 3);
    177c:	6123      	str	r3, [r4, #16]
	RTC->MODE2.CLOCK.bit.DAY = atoi(data + 6);
    177e:	300e      	adds	r0, #14
    1780:	f000 ff8e 	bl	26a0 <atoi>
    1784:	221f      	movs	r2, #31
    1786:	6923      	ldr	r3, [r4, #16]
    1788:	4010      	ands	r0, r2
    178a:	4a19      	ldr	r2, [pc, #100]	; (17f0 <_Z9UpdateRTCv+0xd4>)
    178c:	0440      	lsls	r0, r0, #17
    178e:	4013      	ands	r3, r2
    1790:	4303      	orrs	r3, r0
	RTC->MODE2.CLOCK.bit.HOUR = atoi(data + 9);
    1792:	0028      	movs	r0, r5
	RTC->MODE2.CLOCK.bit.DAY = atoi(data + 6);
    1794:	6123      	str	r3, [r4, #16]
	RTC->MODE2.CLOCK.bit.HOUR = atoi(data + 9);
    1796:	3011      	adds	r0, #17
    1798:	f000 ff82 	bl	26a0 <atoi>
    179c:	221f      	movs	r2, #31
    179e:	6923      	ldr	r3, [r4, #16]
    17a0:	4010      	ands	r0, r2
    17a2:	4a14      	ldr	r2, [pc, #80]	; (17f4 <_Z9UpdateRTCv+0xd8>)
    17a4:	0300      	lsls	r0, r0, #12
    17a6:	4013      	ands	r3, r2
    17a8:	4303      	orrs	r3, r0
	RTC->MODE2.CLOCK.bit.MINUTE = atoi(data + 12);
    17aa:	0028      	movs	r0, r5
	RTC->MODE2.CLOCK.bit.HOUR = atoi(data + 9);
    17ac:	6123      	str	r3, [r4, #16]
	RTC->MODE2.CLOCK.bit.MINUTE = atoi(data + 12);
    17ae:	3014      	adds	r0, #20
    17b0:	f000 ff76 	bl	26a0 <atoi>
    17b4:	6923      	ldr	r3, [r4, #16]
    17b6:	4a10      	ldr	r2, [pc, #64]	; (17f8 <_Z9UpdateRTCv+0xdc>)
    17b8:	4038      	ands	r0, r7
    17ba:	0180      	lsls	r0, r0, #6
    17bc:	4013      	ands	r3, r2
    17be:	4303      	orrs	r3, r0
	RTC->MODE2.CLOCK.bit.SECOND = atoi(data + 15);
    17c0:	0028      	movs	r0, r5
	RTC->MODE2.CLOCK.bit.MINUTE = atoi(data + 12);
    17c2:	6123      	str	r3, [r4, #16]
	RTC->MODE2.CLOCK.bit.SECOND = atoi(data + 15);
    17c4:	3017      	adds	r0, #23
    17c6:	f000 ff6b 	bl	26a0 <atoi>
    17ca:	6923      	ldr	r3, [r4, #16]
    17cc:	4038      	ands	r0, r7
    17ce:	43bb      	bics	r3, r7
    17d0:	4303      	orrs	r3, r0
    17d2:	6123      	str	r3, [r4, #16]
    17d4:	e7b7      	b.n	1746 <_Z9UpdateRTCv+0x2a>
    17d6:	46c0      	nop			; (mov r8, r8)
    17d8:	0000383d 	.word	0x0000383d
    17dc:	2000026c 	.word	0x2000026c
    17e0:	00000bb8 	.word	0x00000bb8
    17e4:	00003845 	.word	0x00003845
    17e8:	40001400 	.word	0x40001400
    17ec:	fc3fffff 	.word	0xfc3fffff
    17f0:	ffc1ffff 	.word	0xffc1ffff
    17f4:	fffe0fff 	.word	0xfffe0fff
    17f8:	fffff03f 	.word	0xfffff03f

000017fc <RTC_Handler>:

void RTC_Handler() {
	// Clear interrupt flag
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM0;
    17fc:	2201      	movs	r2, #1
    17fe:	4b03      	ldr	r3, [pc, #12]	; (180c <RTC_Handler+0x10>)
    1800:	721a      	strb	r2, [r3, #8]
	rtc_count++;
    1802:	4a03      	ldr	r2, [pc, #12]	; (1810 <RTC_Handler+0x14>)
    1804:	6813      	ldr	r3, [r2, #0]
    1806:	3301      	adds	r3, #1
    1808:	6013      	str	r3, [r2, #0]
    180a:	4770      	bx	lr
    180c:	40001400 	.word	0x40001400
    1810:	200001e4 	.word	0x200001e4

00001814 <main>:
int main() {
    1814:	b5f0      	push	{r4, r5, r6, r7, lr}
    g_uart1.init({{GPIO_PORTA, 24}, {GPIO_PORTA, 25}, UART_SER1_TXPO_PA24, UART_SER1_RXPO_PA25}, CALC_BAUD(115200));
    1816:	4c66      	ldr	r4, [pc, #408]	; (19b0 <main+0x19c>)
int main() {
    1818:	b095      	sub	sp, #84	; 0x54
    g_uart1.init({{GPIO_PORTA, 24}, {GPIO_PORTA, 25}, UART_SER1_TXPO_PA24, UART_SER1_RXPO_PA25}, CALC_BAUD(115200));
    181a:	ad0c      	add	r5, sp, #48	; 0x30
    181c:	002b      	movs	r3, r5
    181e:	0022      	movs	r2, r4
    1820:	ca43      	ldmia	r2!, {r0, r1, r6}
    1822:	c343      	stmia	r3!, {r0, r1, r6}
    1824:	ca03      	ldmia	r2!, {r0, r1}
    1826:	c303      	stmia	r3!, {r0, r1}
    1828:	0029      	movs	r1, r5
    182a:	4862      	ldr	r0, [pc, #392]	; (19b4 <main+0x1a0>)
    182c:	4a62      	ldr	r2, [pc, #392]	; (19b8 <main+0x1a4>)
    182e:	f000 fabd 	bl	1dac <_ZN6uart_t4initERK13uart_pincfg_tt>
    g_spi0.Init({
    1832:	0023      	movs	r3, r4
    1834:	002a      	movs	r2, r5
    1836:	3314      	adds	r3, #20
    1838:	cb43      	ldmia	r3!, {r0, r1, r6}
    183a:	c243      	stmia	r2!, {r0, r1, r6}
    183c:	cb43      	ldmia	r3!, {r0, r1, r6}
    183e:	c243      	stmia	r2!, {r0, r1, r6}
    1840:	cb03      	ldmia	r3!, {r0, r1}
    1842:	c203      	stmia	r2!, {r0, r1}
    1844:	2314      	movs	r3, #20
    1846:	466a      	mov	r2, sp
    1848:	9305      	str	r3, [sp, #20]
    184a:	ab0f      	add	r3, sp, #60	; 0x3c
    184c:	cb43      	ldmia	r3!, {r0, r1, r6}
    184e:	c243      	stmia	r2!, {r0, r1, r6}
    1850:	cb03      	ldmia	r3!, {r0, r1}
    1852:	c203      	stmia	r2!, {r0, r1}
            PORT->Group[port].DIRSET.reg = 1 << pin;
    1854:	2610      	movs	r6, #16
    1856:	686a      	ldr	r2, [r5, #4]
    1858:	68ab      	ldr	r3, [r5, #8]
    185a:	990c      	ldr	r1, [sp, #48]	; 0x30
    185c:	4857      	ldr	r0, [pc, #348]	; (19bc <main+0x1a8>)
    185e:	f000 f929 	bl	1ab4 <_ZN5spi_t4InitE12spi_pincfg_tt>
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    1862:	2102      	movs	r1, #2
            PORT->Group[port].DIRSET.reg = 1 << pin;
    1864:	4f56      	ldr	r7, [pc, #344]	; (19c0 <main+0x1ac>)
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    1866:	4a57      	ldr	r2, [pc, #348]	; (19c4 <main+0x1b0>)
            PORT->Group[port].DIRSET.reg = 1 << pin;
    1868:	60be      	str	r6, [r7, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
    186a:	7813      	ldrb	r3, [r2, #0]
    if(!net.begin()) {
    186c:	4d56      	ldr	r5, [pc, #344]	; (19c8 <main+0x1b4>)
    186e:	438b      	bics	r3, r1
    1870:	7013      	strb	r3, [r2, #0]
    1872:	0028      	movs	r0, r5
            PORT->Group[port].OUTCLR.reg = 1 << pin;
    1874:	617e      	str	r6, [r7, #20]
    1876:	f000 fc63 	bl	2140 <_ZN9Sensornet5beginEv>
    187a:	9706      	str	r7, [sp, #24]
    187c:	2800      	cmp	r0, #0
    187e:	d105      	bne.n	188c <main+0x78>
    }
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }

    inline void toggle(const int port, const int pin) {
        PORT->Group[port].OUTTGL.reg = 1 << pin;
    1880:	9b06      	ldr	r3, [sp, #24]
            delay_usec(800000);
    1882:	4852      	ldr	r0, [pc, #328]	; (19cc <main+0x1b8>)
    1884:	61de      	str	r6, [r3, #28]
    1886:	f002 f91b 	bl	3ac0 <__delay_usec_veneer>
        while(1) {
    188a:	e7f9      	b.n	1880 <main+0x6c>
    if(!gsm.Init()) {
    188c:	4f50      	ldr	r7, [pc, #320]	; (19d0 <main+0x1bc>)
    188e:	0038      	movs	r0, r7
    1890:	f7fe ff26 	bl	6e0 <_ZN3GSM4InitEv>
    1894:	2800      	cmp	r0, #0
    1896:	d108      	bne.n	18aa <main+0x96>
            net.Poll();
    1898:	0028      	movs	r0, r5
    189a:	f000 fd49 	bl	2330 <_ZN9Sensornet4PollEv>
    189e:	9b06      	ldr	r3, [sp, #24]
            delay_usec(200000);
    18a0:	484c      	ldr	r0, [pc, #304]	; (19d4 <main+0x1c0>)
    18a2:	61de      	str	r6, [r3, #28]
    18a4:	f002 f90c 	bl	3ac0 <__delay_usec_veneer>
        while(1) {
    18a8:	e7f6      	b.n	1898 <main+0x84>
    gsm.AddSMSFunc({ "info", cmd_info, GSM::LEVEL_USER });
    18aa:	ad09      	add	r5, sp, #36	; 0x24
    18ac:	002b      	movs	r3, r5
    18ae:	3434      	adds	r4, #52	; 0x34
    18b0:	cc07      	ldmia	r4!, {r0, r1, r2}
    18b2:	c307      	stmia	r3!, {r0, r1, r2}

    void ReadSMS(int index);
    void ProcessSMS(const char* text, const char* sender);
    bool SendSMS(const char* number, const char* text);

    void AddSMSFunc(const SMSFunc& func) { m_smsfuncs.push_back(func); }
    18b4:	003c      	movs	r4, r7
    gsm.AddSMSFunc({ "setname", [](GSM* gsm, const char* sender, const char* args) { net.CMDSetName(gsm, sender, args); }, GSM::LEVEL_USER });
    18b6:	2761      	movs	r7, #97	; 0x61
    18b8:	340c      	adds	r4, #12
    18ba:	0029      	movs	r1, r5
    18bc:	0020      	movs	r0, r4
    18be:	f7ff f9cf 	bl	c60 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    18c2:	4b45      	ldr	r3, [pc, #276]	; (19d8 <main+0x1c4>)
    18c4:	0029      	movs	r1, r5
    18c6:	9309      	str	r3, [sp, #36]	; 0x24
    18c8:	4b44      	ldr	r3, [pc, #272]	; (19dc <main+0x1c8>)
    18ca:	0020      	movs	r0, r4
    18cc:	606b      	str	r3, [r5, #4]
    18ce:	722f      	strb	r7, [r5, #8]
    18d0:	f7ff f9c6 	bl	c60 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    gsm.AddSMSFunc({ "clear", [](GSM* gsm, const char* sender, const char* args) { net.m_nodes.clear(); }, GSM::LEVEL_USER });
    18d4:	4b42      	ldr	r3, [pc, #264]	; (19e0 <main+0x1cc>)
    18d6:	0029      	movs	r1, r5
    18d8:	9309      	str	r3, [sp, #36]	; 0x24
    18da:	4b42      	ldr	r3, [pc, #264]	; (19e4 <main+0x1d0>)
    18dc:	0020      	movs	r0, r4
    18de:	606b      	str	r3, [r5, #4]
    18e0:	722f      	strb	r7, [r5, #8]
    18e2:	f7ff f9bd 	bl	c60 <_ZN6VectorI7SMSFuncE9push_backERKS0_>
    SetupRTC();
    18e6:	f7ff fee9 	bl	16bc <_Z8SetupRTCv>
    UpdateRTC();
    18ea:	f7ff ff17 	bl	171c <_Z9UpdateRTCv>
    18ee:	9607      	str	r6, [sp, #28]
        gsm.Poll();
    18f0:	4837      	ldr	r0, [pc, #220]	; (19d0 <main+0x1bc>)
    18f2:	f7fe ffe3 	bl	8bc <_ZN3GSM4PollEv>
        net.Poll();
    18f6:	4c34      	ldr	r4, [pc, #208]	; (19c8 <main+0x1b4>)
    18f8:	0020      	movs	r0, r4
    18fa:	f000 fd19 	bl	2330 <_ZN9Sensornet4PollEv>
    18fe:	9b06      	ldr	r3, [sp, #24]
    1900:	9a07      	ldr	r2, [sp, #28]
    1902:	61da      	str	r2, [r3, #28]
        if(rtc_count >= 10) {
    1904:	4b38      	ldr	r3, [pc, #224]	; (19e8 <main+0x1d4>)
    1906:	681a      	ldr	r2, [r3, #0]
    1908:	2a09      	cmp	r2, #9
    190a:	ddf1      	ble.n	18f0 <main+0xdc>
            rtc_count = 0;
    190c:	2600      	movs	r6, #0
    190e:	601e      	str	r6, [r3, #0]
            UpdateRTC();
    1910:	f7ff ff04 	bl	171c <_Z9UpdateRTCv>
            if(net.m_nodes.size()) {
    1914:	6b25      	ldr	r5, [r4, #48]	; 0x30
    1916:	42b5      	cmp	r5, r6
    1918:	d0ea      	beq.n	18f0 <main+0xdc>
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
    191a:	4b34      	ldr	r3, [pc, #208]	; (19ec <main+0x1d8>)
                for(auto& node : net.m_nodes) {
    191c:	6b64      	ldr	r4, [r4, #52]	; 0x34
    191e:	681b      	ldr	r3, [r3, #0]
    Capacity = 0;
    1920:	960a      	str	r6, [sp, #40]	; 0x28
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
    1922:	9309      	str	r3, [sp, #36]	; 0x24
    1924:	2324      	movs	r3, #36	; 0x24
    1926:	435d      	muls	r5, r3
    1928:	1965      	adds	r5, r4, r5
    192a:	42a5      	cmp	r5, r4
    192c:	d037      	beq.n	199e <main+0x18a>
                    str.appendf("%02d/%02d/%02d %02d:%02d - ID %d name %.8s type %d",
    192e:	7a67      	ldrb	r7, [r4, #9]
                        RTC->MODE2.CLOCK.bit.YEAR, RTC->MODE2.CLOCK.bit.MONTH, RTC->MODE2.CLOCK.bit.DAY,
    1930:	4e2f      	ldr	r6, [pc, #188]	; (19f0 <main+0x1dc>)
    1932:	6932      	ldr	r2, [r6, #16]
    1934:	6933      	ldr	r3, [r6, #16]
    1936:	6931      	ldr	r1, [r6, #16]
                        RTC->MODE2.CLOCK.bit.HOUR, RTC->MODE2.CLOCK.bit.MINUTE,
    1938:	6930      	ldr	r0, [r6, #16]
    193a:	6936      	ldr	r6, [r6, #16]
                    str.appendf("%02d/%02d/%02d %02d:%02d - ID %d name %.8s type %d",
    193c:	9705      	str	r7, [sp, #20]
    193e:	1c67      	adds	r7, r4, #1
    1940:	9704      	str	r7, [sp, #16]
    1942:	2700      	movs	r7, #0
                        RTC->MODE2.CLOCK.bit.YEAR, RTC->MODE2.CLOCK.bit.MONTH, RTC->MODE2.CLOCK.bit.DAY,
    1944:	0289      	lsls	r1, r1, #10
                    str.appendf("%02d/%02d/%02d %02d:%02d - ID %d name %.8s type %d",
    1946:	57e7      	ldrsb	r7, [r4, r7]
                        RTC->MODE2.CLOCK.bit.HOUR, RTC->MODE2.CLOCK.bit.MINUTE,
    1948:	03c0      	lsls	r0, r0, #15
    194a:	0536      	lsls	r6, r6, #20
                        RTC->MODE2.CLOCK.bit.YEAR, RTC->MODE2.CLOCK.bit.MONTH, RTC->MODE2.CLOCK.bit.DAY,
    194c:	0ec9      	lsrs	r1, r1, #27
                        RTC->MODE2.CLOCK.bit.HOUR, RTC->MODE2.CLOCK.bit.MINUTE,
    194e:	0ec0      	lsrs	r0, r0, #27
                        RTC->MODE2.CLOCK.bit.YEAR, RTC->MODE2.CLOCK.bit.MONTH, RTC->MODE2.CLOCK.bit.DAY,
    1950:	019b      	lsls	r3, r3, #6
                        RTC->MODE2.CLOCK.bit.HOUR, RTC->MODE2.CLOCK.bit.MINUTE,
    1952:	0eb6      	lsrs	r6, r6, #26
                        RTC->MODE2.CLOCK.bit.YEAR, RTC->MODE2.CLOCK.bit.MONTH, RTC->MODE2.CLOCK.bit.DAY,
    1954:	0f1b      	lsrs	r3, r3, #28
                    str.appendf("%02d/%02d/%02d %02d:%02d - ID %d name %.8s type %d",
    1956:	9001      	str	r0, [sp, #4]
    1958:	9100      	str	r1, [sp, #0]
                        RTC->MODE2.CLOCK.bit.YEAR, RTC->MODE2.CLOCK.bit.MONTH, RTC->MODE2.CLOCK.bit.DAY,
    195a:	0e92      	lsrs	r2, r2, #26
                    str.appendf("%02d/%02d/%02d %02d:%02d - ID %d name %.8s type %d",
    195c:	4925      	ldr	r1, [pc, #148]	; (19f4 <main+0x1e0>)
    195e:	9703      	str	r7, [sp, #12]
    1960:	9602      	str	r6, [sp, #8]
    1962:	a809      	add	r0, sp, #36	; 0x24
    1964:	f7ff fe34 	bl	15d0 <_ZN3Str7appendfEPKcz>
                    switch(node.data.type) {
    1968:	7a63      	ldrb	r3, [r4, #9]
    196a:	2b03      	cmp	r3, #3
    196c:	d003      	beq.n	1976 <main+0x162>
    196e:	2b04      	cmp	r3, #4
    1970:	d00c      	beq.n	198c <main+0x178>
    1972:	2b01      	cmp	r3, #1
    1974:	d104      	bne.n	1980 <main+0x16c>
                            str.appendf(" value %d", *(uint16_t*)node.data.data);
    1976:	8962      	ldrh	r2, [r4, #10]
    1978:	491f      	ldr	r1, [pc, #124]	; (19f8 <main+0x1e4>)
    197a:	a809      	add	r0, sp, #36	; 0x24
    197c:	f7ff fe28 	bl	15d0 <_ZN3Str7appendfEPKcz>
                    str.append('\n');
    1980:	210a      	movs	r1, #10
    1982:	a809      	add	r0, sp, #36	; 0x24
    1984:	f7ff fe0a 	bl	159c <_ZN3Str6appendEc>
                for(auto& node : net.m_nodes) {
    1988:	3424      	adds	r4, #36	; 0x24
    198a:	e7ce      	b.n	192a <main+0x116>
                            str.appendf(" voltage %d light %d rain %d",
    198c:	7ba1      	ldrb	r1, [r4, #14]
    198e:	89a3      	ldrh	r3, [r4, #12]
    1990:	8962      	ldrh	r2, [r4, #10]
    1992:	a809      	add	r0, sp, #36	; 0x24
    1994:	9100      	str	r1, [sp, #0]
    1996:	4919      	ldr	r1, [pc, #100]	; (19fc <main+0x1e8>)
    1998:	f7ff fe1a 	bl	15d0 <_ZN3Str7appendfEPKcz>
                            break;
    199c:	e7f0      	b.n	1980 <main+0x16c>
                gsm.FTPWrite("data.txt", str.c_str());
    199e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    19a0:	4917      	ldr	r1, [pc, #92]	; (1a00 <main+0x1ec>)
    19a2:	480b      	ldr	r0, [pc, #44]	; (19d0 <main+0x1bc>)
    19a4:	f7ff f878 	bl	a98 <_ZN3GSM8FTPWriteEPKcS1_>
                Str str;
    19a8:	a809      	add	r0, sp, #36	; 0x24
    19aa:	f7fe fba9 	bl	100 <_ZN3StrD1Ev>
    19ae:	e79f      	b.n	18f0 <main+0xdc>
    19b0:	0000339c 	.word	0x0000339c
    19b4:	200004d4 	.word	0x200004d4
    19b8:	0000f62b 	.word	0x0000f62b
    19bc:	200002b8 	.word	0x200002b8
    19c0:	41004400 	.word	0x41004400
    19c4:	41004444 	.word	0x41004444
    19c8:	20000280 	.word	0x20000280
    19cc:	000c3500 	.word	0x000c3500
    19d0:	2000026c 	.word	0x2000026c
    19d4:	00030d40 	.word	0x00030d40
    19d8:	0000384e 	.word	0x0000384e
    19dc:	000013fd 	.word	0x000013fd
    19e0:	00003856 	.word	0x00003856
    19e4:	00001411 	.word	0x00001411
    19e8:	200001e4 	.word	0x200001e4
    19ec:	200001e8 	.word	0x200001e8
    19f0:	40001400 	.word	0x40001400
    19f4:	0000385c 	.word	0x0000385c
    19f8:	0000388f 	.word	0x0000388f
    19fc:	00003899 	.word	0x00003899
    1a00:	000038b6 	.word	0x000038b6

00001a04 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE>:
    1a04:	b570      	push	{r4, r5, r6, lr}
);
    1a06:	2400      	movs	r4, #0
    1a08:	4e11      	ldr	r6, [pc, #68]	; (1a50 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x4c>)
    1a0a:	b092      	sub	sp, #72	; 0x48
);
    1a0c:	0021      	movs	r1, r4
    1a0e:	4b11      	ldr	r3, [pc, #68]	; (1a54 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x50>)
    1a10:	2202      	movs	r2, #2
    1a12:	0030      	movs	r0, r6
    1a14:	f7ff f940 	bl	c98 <_ZN3GSMC1E6gpio_tP6uart_t>
static GSM gsm(
    1a18:	4d0f      	ldr	r5, [pc, #60]	; (1a58 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x54>)
    1a1a:	0030      	movs	r0, r6
    1a1c:	002a      	movs	r2, r5
    1a1e:	490f      	ldr	r1, [pc, #60]	; (1a5c <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x58>)
    1a20:	f000 fd82 	bl	2528 <__aeabi_atexit>
static Sensornet net(RF24({ GPIO_PORTA, 14 }, { GPIO_PORTA, 15 }, g_spi0));
    1a24:	4b0e      	ldr	r3, [pc, #56]	; (1a60 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x5c>)
    1a26:	0021      	movs	r1, r4
    1a28:	9301      	str	r3, [sp, #4]
    1a2a:	230f      	movs	r3, #15
    1a2c:	220e      	movs	r2, #14
    1a2e:	9300      	str	r3, [sp, #0]
    1a30:	a808      	add	r0, sp, #32
    1a32:	0023      	movs	r3, r4
    1a34:	f7ff fa93 	bl	f5e <_ZN4RF24C1E6gpio_tS0_R5spi_t>
    1a38:	4c0a      	ldr	r4, [pc, #40]	; (1a64 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x60>)
    1a3a:	a908      	add	r1, sp, #32
    1a3c:	0020      	movs	r0, r4
    1a3e:	f000 fb6f 	bl	2120 <_ZN9SensornetC1ERK4RF24>
    1a42:	002a      	movs	r2, r5
    1a44:	0020      	movs	r0, r4
    1a46:	4908      	ldr	r1, [pc, #32]	; (1a68 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0x64>)
    1a48:	f000 fd6e 	bl	2528 <__aeabi_atexit>
    1a4c:	b012      	add	sp, #72	; 0x48
    1a4e:	bd70      	pop	{r4, r5, r6, pc}
    1a50:	2000026c 	.word	0x2000026c
    1a54:	200004d4 	.word	0x200004d4
    1a58:	200001ac 	.word	0x200001ac
    1a5c:	00000129 	.word	0x00000129
    1a60:	200002b8 	.word	0x200002b8
    1a64:	20000280 	.word	0x20000280
    1a68:	000013e1 	.word	0x000013e1

00001a6c <_ZN4gpio6pmuxenERK6gpio_th>:
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1a6c:	0003      	movs	r3, r0
    1a6e:	b530      	push	{r4, r5, lr}
    1a70:	cb05      	ldmia	r3!, {r0, r2}
        if(pin & 1)
    1a72:	250f      	movs	r5, #15
    1a74:	0fd3      	lsrs	r3, r2, #31
    1a76:	189b      	adds	r3, r3, r2
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1a78:	4c0c      	ldr	r4, [pc, #48]	; (1aac <_ZN4gpio6pmuxenERK6gpio_th+0x40>)
    1a7a:	105b      	asrs	r3, r3, #1
    1a7c:	01c0      	lsls	r0, r0, #7
    1a7e:	181b      	adds	r3, r3, r0
    1a80:	4029      	ands	r1, r5
    1a82:	191b      	adds	r3, r3, r4
        if(pin & 1)
    1a84:	07d4      	lsls	r4, r2, #31
    1a86:	d50c      	bpl.n	1aa2 <_ZN4gpio6pmuxenERK6gpio_th+0x36>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1a88:	781c      	ldrb	r4, [r3, #0]
    1a8a:	0109      	lsls	r1, r1, #4
    1a8c:	4025      	ands	r5, r4
    1a8e:	4329      	orrs	r1, r5
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    1a90:	7019      	strb	r1, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1a92:	4b07      	ldr	r3, [pc, #28]	; (1ab0 <_ZN4gpio6pmuxenERK6gpio_th+0x44>)
    1a94:	1812      	adds	r2, r2, r0
    1a96:	18d2      	adds	r2, r2, r3
    1a98:	2301      	movs	r3, #1
    1a9a:	7811      	ldrb	r1, [r2, #0]
    1a9c:	430b      	orrs	r3, r1
    1a9e:	7013      	strb	r3, [r2, #0]
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1aa0:	bd30      	pop	{r4, r5, pc}
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    1aa2:	781c      	ldrb	r4, [r3, #0]
    1aa4:	43ac      	bics	r4, r5
    1aa6:	4321      	orrs	r1, r4
    1aa8:	e7f2      	b.n	1a90 <_ZN4gpio6pmuxenERK6gpio_th+0x24>
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	41004430 	.word	0x41004430
    1ab0:	41004440 	.word	0x41004440

00001ab4 <_ZN5spi_t4InitE12spi_pincfg_tt>:
#include "spi.h"

spi_t g_spi0(SERCOM0);
spi_t g_spi1(SERCOM1);

void spi_t::Init(spi_pincfg_t pincfg, uint16_t speed) {
    1ab4:	b084      	sub	sp, #16
    1ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ab8:	0004      	movs	r4, r0
    1aba:	9107      	str	r1, [sp, #28]
    if(m_sercom == SERCOM1) {
    1abc:	6800      	ldr	r0, [r0, #0]
    1abe:	493b      	ldr	r1, [pc, #236]	; (1bac <_ZN5spi_t4InitE12spi_pincfg_tt+0xf8>)
void spi_t::Init(spi_pincfg_t pincfg, uint16_t speed) {
    1ac0:	9309      	str	r3, [sp, #36]	; 0x24
    1ac2:	ab0f      	add	r3, sp, #60	; 0x3c
    1ac4:	ad07      	add	r5, sp, #28
    1ac6:	881e      	ldrh	r6, [r3, #0]
    1ac8:	606a      	str	r2, [r5, #4]
    1aca:	4b39      	ldr	r3, [pc, #228]	; (1bb0 <_ZN5spi_t4InitE12spi_pincfg_tt+0xfc>)
    1acc:	4a39      	ldr	r2, [pc, #228]	; (1bb4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x100>)
    if(m_sercom == SERCOM1) {
    1ace:	4288      	cmp	r0, r1
    1ad0:	d161      	bne.n	1b96 <_ZN5spi_t4InitE12spi_pincfg_tt+0xe2>
        /*PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) |
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);*/
        PM->APBCMASK.bit.SERCOM1_ = 1;
    1ad2:	2108      	movs	r1, #8
    1ad4:	6a10      	ldr	r0, [r2, #32]
    1ad6:	4301      	orrs	r1, r0
    1ad8:	6211      	str	r1, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    1ada:	4a37      	ldr	r2, [pc, #220]	; (1bb8 <_ZN5spi_t4InitE12spi_pincfg_tt+0x104>)
    1adc:	805a      	strh	r2, [r3, #2]
        while(GCLK->STATUS.bit.SYNCBUSY);
    1ade:	785a      	ldrb	r2, [r3, #1]
    1ae0:	09d2      	lsrs	r2, r2, #7
    1ae2:	d1fc      	bne.n	1ade <_ZN5spi_t4InitE12spi_pincfg_tt+0x2a>
        PM->APBCMASK.bit.SERCOM0_ = 1;
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
        while(GCLK->STATUS.bit.SYNCBUSY);
    }
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1ae4:	7e29      	ldrb	r1, [r5, #24]
    1ae6:	0028      	movs	r0, r5
    1ae8:	1e4b      	subs	r3, r1, #1
    1aea:	4199      	sbcs	r1, r3
    1aec:	3102      	adds	r1, #2
    1aee:	f7ff ffbd 	bl	1a6c <_ZN4gpio6pmuxenERK6gpio_th>
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1af2:	7e69      	ldrb	r1, [r5, #25]
    1af4:	a809      	add	r0, sp, #36	; 0x24
    1af6:	1e4b      	subs	r3, r1, #1
    1af8:	4199      	sbcs	r1, r3
    1afa:	3102      	adds	r1, #2
    1afc:	f7ff ffb6 	bl	1a6c <_ZN4gpio6pmuxenERK6gpio_th>
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1b00:	7ea9      	ldrb	r1, [r5, #26]
    1b02:	a80b      	add	r0, sp, #44	; 0x2c
    1b04:	1e4b      	subs	r3, r1, #1
    1b06:	4199      	sbcs	r1, r3
    1b08:	3102      	adds	r1, #2
    1b0a:	f7ff ffaf 	bl	1a6c <_ZN4gpio6pmuxenERK6gpio_th>

    m_sercom->SPI.CTRLA.bit.ENABLE = 0;
    1b0e:	2102      	movs	r1, #2
    1b10:	6822      	ldr	r2, [r4, #0]
    1b12:	6813      	ldr	r3, [r2, #0]
    1b14:	438b      	bics	r3, r1
    1b16:	6013      	str	r3, [r2, #0]
	m_sercom->SPI.CTRLA.bit.SWRST = 1;
    1b18:	2301      	movs	r3, #1
    1b1a:	6822      	ldr	r2, [r4, #0]
    1b1c:	6811      	ldr	r1, [r2, #0]
    1b1e:	430b      	orrs	r3, r1
    1b20:	6013      	str	r3, [r2, #0]
	while(m_sercom->SPI.CTRLA.bit.SWRST);
    1b22:	6823      	ldr	r3, [r4, #0]
    1b24:	681a      	ldr	r2, [r3, #0]
    1b26:	07d2      	lsls	r2, r2, #31
    1b28:	d4fc      	bmi.n	1b24 <_ZN5spi_t4InitE12spi_pincfg_tt+0x70>

	m_sercom->SPI.CTRLA.bit.MODE = SERCOM_SPI_CTRLA_MODE_SPI_MASTER_Val;
    1b2a:	211c      	movs	r1, #28
    1b2c:	681a      	ldr	r2, [r3, #0]
	m_sercom->SPI.CTRLA.bit.DOPO = pincfg.mosisckpad;
    1b2e:	2003      	movs	r0, #3
	m_sercom->SPI.CTRLA.bit.MODE = SERCOM_SPI_CTRLA_MODE_SPI_MASTER_Val;
    1b30:	438a      	bics	r2, r1
    1b32:	0011      	movs	r1, r2
    1b34:	220c      	movs	r2, #12
    1b36:	430a      	orrs	r2, r1
    1b38:	601a      	str	r2, [r3, #0]
	m_sercom->SPI.CTRLA.bit.DOPO = pincfg.mosisckpad;
    1b3a:	6822      	ldr	r2, [r4, #0]
    1b3c:	7f2b      	ldrb	r3, [r5, #28]
    1b3e:	6811      	ldr	r1, [r2, #0]
    1b40:	4f1e      	ldr	r7, [pc, #120]	; (1bbc <_ZN5spi_t4InitE12spi_pincfg_tt+0x108>)
    1b42:	4003      	ands	r3, r0
    1b44:	041b      	lsls	r3, r3, #16
    1b46:	4039      	ands	r1, r7
    1b48:	4319      	orrs	r1, r3
    1b4a:	6011      	str	r1, [r2, #0]
	m_sercom->SPI.CTRLA.bit.DIPO = pincfg.misopad;
    1b4c:	6821      	ldr	r1, [r4, #0]
    1b4e:	7eea      	ldrb	r2, [r5, #27]
    1b50:	680b      	ldr	r3, [r1, #0]
    1b52:	4002      	ands	r2, r0
    1b54:	481a      	ldr	r0, [pc, #104]	; (1bc0 <_ZN5spi_t4InitE12spi_pincfg_tt+0x10c>)
    1b56:	0512      	lsls	r2, r2, #20
    1b58:	4003      	ands	r3, r0
    1b5a:	4313      	orrs	r3, r2
    1b5c:	600b      	str	r3, [r1, #0]

    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    1b5e:	6823      	ldr	r3, [r4, #0]
    1b60:	69da      	ldr	r2, [r3, #28]
    1b62:	0752      	lsls	r2, r2, #29
    1b64:	d4fc      	bmi.n	1b60 <_ZN5spi_t4InitE12spi_pincfg_tt+0xac>
    /* SPI receiver is enabled */
    m_sercom->SPI.CTRLB.bit.RXEN = 1;
    1b66:	2280      	movs	r2, #128	; 0x80
    1b68:	6859      	ldr	r1, [r3, #4]
    1b6a:	0292      	lsls	r2, r2, #10
    1b6c:	430a      	orrs	r2, r1
    1b6e:	605a      	str	r2, [r3, #4]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    1b70:	6823      	ldr	r3, [r4, #0]
    1b72:	69da      	ldr	r2, [r3, #28]
    1b74:	0752      	lsls	r2, r2, #29
    1b76:	d4fc      	bmi.n	1b72 <_ZN5spi_t4InitE12spi_pincfg_tt+0xbe>

    /* baud register value corresponds to the SPI speed */
    m_sercom->SPI.BAUD.reg = speed;
    1b78:	b2f6      	uxtb	r6, r6
    1b7a:	731e      	strb	r6, [r3, #12]
    /* SERCOM peripheral enabled */
    m_sercom->SPI.CTRLA.bit.ENABLE = 1;
    1b7c:	2302      	movs	r3, #2
    1b7e:	6822      	ldr	r2, [r4, #0]
    1b80:	6811      	ldr	r1, [r2, #0]
    1b82:	430b      	orrs	r3, r1
    1b84:	6013      	str	r3, [r2, #0]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.ENABLE);
    1b86:	6822      	ldr	r2, [r4, #0]
    1b88:	69d3      	ldr	r3, [r2, #28]
    1b8a:	079b      	lsls	r3, r3, #30
    1b8c:	d4fc      	bmi.n	1b88 <_ZN5spi_t4InitE12spi_pincfg_tt+0xd4>
}
    1b8e:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1b90:	bc08      	pop	{r3}
    1b92:	b004      	add	sp, #16
    1b94:	4718      	bx	r3
        PM->APBCMASK.bit.SERCOM0_ = 1;
    1b96:	2104      	movs	r1, #4
    1b98:	6a10      	ldr	r0, [r2, #32]
    1b9a:	4301      	orrs	r1, r0
    1b9c:	6211      	str	r1, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    1b9e:	4a09      	ldr	r2, [pc, #36]	; (1bc4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x110>)
    1ba0:	805a      	strh	r2, [r3, #2]
        while(GCLK->STATUS.bit.SYNCBUSY);
    1ba2:	785a      	ldrb	r2, [r3, #1]
    1ba4:	09d2      	lsrs	r2, r2, #7
    1ba6:	d1fc      	bne.n	1ba2 <_ZN5spi_t4InitE12spi_pincfg_tt+0xee>
    1ba8:	e79c      	b.n	1ae4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x30>
    1baa:	46c0      	nop			; (mov r8, r8)
    1bac:	42000c00 	.word	0x42000c00
    1bb0:	40000c00 	.word	0x40000c00
    1bb4:	40000400 	.word	0x40000400
    1bb8:	0000400f 	.word	0x0000400f
    1bbc:	fffcffff 	.word	0xfffcffff
    1bc0:	ffcfffff 	.word	0xffcfffff
    1bc4:	0000400e 	.word	0x0000400e

00001bc8 <_ZN5spi_t8TransferEh>:
spi_t::spi_t(Sercom* sercom) {
    m_sercom = sercom;
}

uint8_t spi_t::Transfer(uint8_t b) {
    if(!m_sercom) return 0xFF;
    1bc8:	6802      	ldr	r2, [r0, #0]
uint8_t spi_t::Transfer(uint8_t b) {
    1bca:	0003      	movs	r3, r0
    if(!m_sercom) return 0xFF;
    1bcc:	20ff      	movs	r0, #255	; 0xff
    1bce:	2a00      	cmp	r2, #0
    1bd0:	d009      	beq.n	1be6 <_ZN5spi_t8TransferEh+0x1e>

    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    1bd2:	7e10      	ldrb	r0, [r2, #24]
    1bd4:	07c0      	lsls	r0, r0, #31
    1bd6:	d5fc      	bpl.n	1bd2 <_ZN5spi_t8TransferEh+0xa>
    //m_sercom->SPI.INTFLAG.bit.RXC = 1; // Clear RXC flag by setting it to 1
    m_sercom->SPI.DATA.reg = b;
    1bd8:	6291      	str	r1, [r2, #40]	; 0x28
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
    1bda:	681b      	ldr	r3, [r3, #0]
    1bdc:	7e1a      	ldrb	r2, [r3, #24]
    1bde:	0752      	lsls	r2, r2, #29
    1be0:	d5fc      	bpl.n	1bdc <_ZN5spi_t8TransferEh+0x14>
	return m_sercom->SPI.DATA.reg;
    1be2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1be4:	b2c0      	uxtb	r0, r0
    1be6:	4770      	bx	lr

00001be8 <_GLOBAL__sub_I_g_spi0>:
    m_sercom = sercom;
    1be8:	4b03      	ldr	r3, [pc, #12]	; (1bf8 <_GLOBAL__sub_I_g_spi0+0x10>)
    1bea:	4a04      	ldr	r2, [pc, #16]	; (1bfc <_GLOBAL__sub_I_g_spi0+0x14>)
    1bec:	601a      	str	r2, [r3, #0]
    1bee:	4b04      	ldr	r3, [pc, #16]	; (1c00 <_GLOBAL__sub_I_g_spi0+0x18>)
    1bf0:	4a04      	ldr	r2, [pc, #16]	; (1c04 <_GLOBAL__sub_I_g_spi0+0x1c>)
    1bf2:	601a      	str	r2, [r3, #0]
    1bf4:	4770      	bx	lr
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	200002b8 	.word	0x200002b8
    1bfc:	42000800 	.word	0x42000800
    1c00:	200002bc 	.word	0x200002bc
    1c04:	42000c00 	.word	0x42000c00

00001c08 <systick_init>:

static volatile uint64_t _cycles;

static void initializeSystemFor48MHz()
{
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    1c08:	22c0      	movs	r2, #192	; 0xc0
	GCLK_GENCTRL_IDC | // Set improved duty cycle 50/50
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
}

void systick_init() {
    1c0a:	b530      	push	{r4, r5, lr}
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    1c0c:	4b45      	ldr	r3, [pc, #276]	; (1d24 <systick_init+0x11c>)
    1c0e:	0092      	lsls	r2, r2, #2
    1c10:	6a19      	ldr	r1, [r3, #32]
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
    1c12:	4845      	ldr	r0, [pc, #276]	; (1d28 <systick_init+0x120>)
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    1c14:	430a      	orrs	r2, r1
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
    1c16:	211e      	movs	r1, #30
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    1c18:	621a      	str	r2, [r3, #32]
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
    1c1a:	6842      	ldr	r2, [r0, #4]
    1c1c:	438a      	bics	r2, r1
    1c1e:	0011      	movs	r1, r2
    1c20:	2202      	movs	r2, #2
    1c22:	430a      	orrs	r2, r1
    1c24:	6042      	str	r2, [r0, #4]
	PM->APBAMASK.bit.GCLK_ = 1;
    1c26:	2208      	movs	r2, #8
    1c28:	4940      	ldr	r1, [pc, #256]	; (1d2c <systick_init+0x124>)
    1c2a:	6988      	ldr	r0, [r1, #24]
    1c2c:	4302      	orrs	r2, r0
    1c2e:	618a      	str	r2, [r1, #24]
	GCLK->CTRL.bit.SWRST = 1;
    1c30:	2101      	movs	r1, #1
    1c32:	4a3f      	ldr	r2, [pc, #252]	; (1d30 <systick_init+0x128>)
    1c34:	7810      	ldrb	r0, [r2, #0]
    1c36:	4301      	orrs	r1, r0
    1c38:	7011      	strb	r1, [r2, #0]
	while (GCLK->CTRL.bit.SWRST && GCLK->STATUS.bit.SYNCBUSY) {};
    1c3a:	7811      	ldrb	r1, [r2, #0]
    1c3c:	07c9      	lsls	r1, r1, #31
    1c3e:	d502      	bpl.n	1c46 <systick_init+0x3e>
    1c40:	7851      	ldrb	r1, [r2, #1]
    1c42:	09c9      	lsrs	r1, r1, #7
    1c44:	d1f9      	bne.n	1c3a <systick_init+0x32>
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
    1c46:	2080      	movs	r0, #128	; 0x80
    1c48:	6a19      	ldr	r1, [r3, #32]
    1c4a:	4381      	bics	r1, r0
    1c4c:	6219      	str	r1, [r3, #32]
	GCLK->GENDIV.reg =
    1c4e:	4939      	ldr	r1, [pc, #228]	; (1d34 <systick_init+0x12c>)
    1c50:	6091      	str	r1, [r2, #8]
	GCLK->GENCTRL.reg =
    1c52:	4939      	ldr	r1, [pc, #228]	; (1d38 <systick_init+0x130>)
    1c54:	6051      	str	r1, [r2, #4]
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1c56:	7851      	ldrb	r1, [r2, #1]
    1c58:	09c9      	lsrs	r1, r1, #7
    1c5a:	d1fc      	bne.n	1c56 <systick_init+0x4e>
	GCLK->CLKCTRL.reg =
    1c5c:	2186      	movs	r1, #134	; 0x86
    1c5e:	01c9      	lsls	r1, r1, #7
    1c60:	8051      	strh	r1, [r2, #2]
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1c62:	7851      	ldrb	r1, [r2, #1]
    1c64:	09c9      	lsrs	r1, r1, #7
    1c66:	d1fc      	bne.n	1c62 <systick_init+0x5a>
	SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
    1c68:	2080      	movs	r0, #128	; 0x80
    1c6a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    1c6c:	4381      	bics	r1, r0
    1c6e:	8499      	strh	r1, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1c70:	68d9      	ldr	r1, [r3, #12]
    1c72:	06c9      	lsls	r1, r1, #27
    1c74:	d5fc      	bpl.n	1c70 <systick_init+0x68>
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
    1c76:	20c0      	movs	r0, #192	; 0xc0
    1c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1c7a:	0100      	lsls	r0, r0, #4
    1c7c:	0c09      	lsrs	r1, r1, #16
    1c7e:	0409      	lsls	r1, r1, #16
    1c80:	4301      	orrs	r1, r0
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
    1c82:	2080      	movs	r0, #128	; 0x80
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
    1c84:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
    1c86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1c88:	04c0      	lsls	r0, r0, #19
    1c8a:	0189      	lsls	r1, r1, #6
    1c8c:	0989      	lsrs	r1, r1, #6
    1c8e:	4301      	orrs	r1, r0
    1c90:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.FSTEP = 1; // Fine step = 1
    1c92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1c94:	4829      	ldr	r0, [pc, #164]	; (1d3c <systick_init+0x134>)
    1c96:	4008      	ands	r0, r1
    1c98:	2180      	movs	r1, #128	; 0x80
    1c9a:	0249      	lsls	r1, r1, #9
    1c9c:	4301      	orrs	r1, r0
    1c9e:	62d9      	str	r1, [r3, #44]	; 0x2c
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1ca0:	68d9      	ldr	r1, [r3, #12]
    1ca2:	06c9      	lsls	r1, r1, #27
    1ca4:	d5fc      	bpl.n	1ca0 <systick_init+0x98>
	SYSCTRL->DFLLCTRL.reg |=
    1ca6:	2181      	movs	r1, #129	; 0x81
    1ca8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    1caa:	0089      	lsls	r1, r1, #2
    1cac:	4301      	orrs	r1, r0
    1cae:	8499      	strh	r1, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1cb0:	68d9      	ldr	r1, [r3, #12]
    1cb2:	06c9      	lsls	r1, r1, #27
    1cb4:	d5fc      	bpl.n	1cb0 <systick_init+0xa8>
	SYSCTRL->INTFLAG.bit.DFLLLCKC = 1;
    1cb6:	2180      	movs	r1, #128	; 0x80
    1cb8:	6898      	ldr	r0, [r3, #8]
    1cba:	4301      	orrs	r1, r0
    1cbc:	6099      	str	r1, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLLCKF = 1;
    1cbe:	2140      	movs	r1, #64	; 0x40
    1cc0:	6898      	ldr	r0, [r3, #8]
    1cc2:	4301      	orrs	r1, r0
    1cc4:	6099      	str	r1, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLRDY = 1;
    1cc6:	2110      	movs	r1, #16
    1cc8:	6898      	ldr	r0, [r3, #8]
    1cca:	4301      	orrs	r1, r0
    1ccc:	6099      	str	r1, [r3, #8]
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
    1cce:	2102      	movs	r1, #2
    1cd0:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    1cd2:	4301      	orrs	r1, r0
    1cd4:	8499      	strh	r1, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1cd6:	68d9      	ldr	r1, [r3, #12]
    1cd8:	06c9      	lsls	r1, r1, #27
    1cda:	d5fc      	bpl.n	1cd6 <systick_init+0xce>
	while (!SYSCTRL->INTFLAG.bit.DFLLLCKC && !SYSCTRL->INTFLAG.bit.DFLLLCKF) {};
    1cdc:	6899      	ldr	r1, [r3, #8]
    1cde:	0609      	lsls	r1, r1, #24
    1ce0:	d402      	bmi.n	1ce8 <systick_init+0xe0>
    1ce2:	6899      	ldr	r1, [r3, #8]
    1ce4:	0649      	lsls	r1, r1, #25
    1ce6:	d5f9      	bpl.n	1cdc <systick_init+0xd4>
	while (!SYSCTRL->INTFLAG.bit.DFLLRDY) {};
    1ce8:	6899      	ldr	r1, [r3, #8]
    1cea:	06c9      	lsls	r1, r1, #27
    1cec:	d5fc      	bpl.n	1ce8 <systick_init+0xe0>
	GCLK->GENDIV.reg =
    1cee:	2300      	movs	r3, #0
    1cf0:	6093      	str	r3, [r2, #8]
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1cf2:	7853      	ldrb	r3, [r2, #1]
    1cf4:	09db      	lsrs	r3, r3, #7
    1cf6:	d1fc      	bne.n	1cf2 <systick_init+0xea>
	GCLK->GENCTRL.reg =
    1cf8:	4b11      	ldr	r3, [pc, #68]	; (1d40 <systick_init+0x138>)
    1cfa:	6053      	str	r3, [r2, #4]
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1cfc:	7851      	ldrb	r1, [r2, #1]
    1cfe:	09c9      	lsrs	r1, r1, #7
    1d00:	d1fc      	bne.n	1cfc <systick_init+0xf4>
	initializeSystemFor48MHz();
	
	_cycles = 0;
    1d02:	2500      	movs	r5, #0
    1d04:	2400      	movs	r4, #0
    1d06:	4b0f      	ldr	r3, [pc, #60]	; (1d44 <systick_init+0x13c>)

	SysTick->CTRL = 0;
	SysTick->LOAD = 0xFFFFFF;
    1d08:	4a0f      	ldr	r2, [pc, #60]	; (1d48 <systick_init+0x140>)
	_cycles = 0;
    1d0a:	601c      	str	r4, [r3, #0]
    1d0c:	605d      	str	r5, [r3, #4]
	SysTick->CTRL = 0;
    1d0e:	4b0f      	ldr	r3, [pc, #60]	; (1d4c <systick_init+0x144>)
    1d10:	6019      	str	r1, [r3, #0]
	SysTick->LOAD = 0xFFFFFF;
    1d12:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0xFFFFFF;
    1d14:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
    1d16:	2207      	movs	r2, #7
    1d18:	601a      	str	r2, [r3, #0]
    1d1a:	2280      	movs	r2, #128	; 0x80
    1d1c:	4b0c      	ldr	r3, [pc, #48]	; (1d50 <systick_init+0x148>)
    1d1e:	0612      	lsls	r2, r2, #24
    1d20:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(SysTick_IRQn);
}
    1d22:	bd30      	pop	{r4, r5, pc}
    1d24:	40000800 	.word	0x40000800
    1d28:	41004000 	.word	0x41004000
    1d2c:	40000400 	.word	0x40000400
    1d30:	40000c00 	.word	0x40000c00
    1d34:	00004003 	.word	0x00004003
    1d38:	00010603 	.word	0x00010603
    1d3c:	fc00ffff 	.word	0xfc00ffff
    1d40:	00030700 	.word	0x00030700
    1d44:	200002c0 	.word	0x200002c0
    1d48:	00ffffff 	.word	0x00ffffff
    1d4c:	e000e010 	.word	0xe000e010
    1d50:	e000e100 	.word	0xe000e100

00001d54 <systick_cycles>:

uint64_t systick_cycles() {
	return _cycles + (0xFFFFFF - SysTick->VAL);
    1d54:	2100      	movs	r1, #0
uint64_t systick_cycles() {
    1d56:	b530      	push	{r4, r5, lr}
	return _cycles + (0xFFFFFF - SysTick->VAL);
    1d58:	4b04      	ldr	r3, [pc, #16]	; (1d6c <systick_cycles+0x18>)
    1d5a:	4d05      	ldr	r5, [pc, #20]	; (1d70 <systick_cycles+0x1c>)
    1d5c:	689c      	ldr	r4, [r3, #8]
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <systick_cycles+0x20>)
    1d60:	1b28      	subs	r0, r5, r4
    1d62:	681a      	ldr	r2, [r3, #0]
    1d64:	685b      	ldr	r3, [r3, #4]
    1d66:	1880      	adds	r0, r0, r2
    1d68:	4159      	adcs	r1, r3
}
    1d6a:	bd30      	pop	{r4, r5, pc}
    1d6c:	e000e010 	.word	0xe000e010
    1d70:	00ffffff 	.word	0x00ffffff
    1d74:	200002c0 	.word	0x200002c0

00001d78 <millis>:
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000000) + 0.99999999 );
	ticks >>= 35;
	return (uint32_t)ticks;
}

uint32_t millis() {
    1d78:	b510      	push	{r4, lr}
	// https://en.wikipedia.org/wiki/Division_algorithm#Division_by_a_constant
	uint64_t ticks = systick_cycles();
    1d7a:	f7ff ffeb 	bl	1d54 <systick_cycles>
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000) + 0.99999999 );
    1d7e:	2300      	movs	r3, #0
    1d80:	4a02      	ldr	r2, [pc, #8]	; (1d8c <millis+0x14>)
    1d82:	f000 fc65 	bl	2650 <__aeabi_lmul>
	ticks >>= 35;
    1d86:	08c8      	lsrs	r0, r1, #3
	return (uint32_t)ticks;
}
    1d88:	bd10      	pop	{r4, pc}
    1d8a:	46c0      	nop			; (mov r8, r8)
    1d8c:	000aec34 	.word	0x000aec34

00001d90 <SysTick_Handler>:

void SysTick_Handler() {
    1d90:	b530      	push	{r4, r5, lr}
	_cycles += 0x1000000;
    1d92:	2480      	movs	r4, #128	; 0x80
    1d94:	2500      	movs	r5, #0
    1d96:	4904      	ldr	r1, [pc, #16]	; (1da8 <SysTick_Handler+0x18>)
    1d98:	0464      	lsls	r4, r4, #17
    1d9a:	680a      	ldr	r2, [r1, #0]
    1d9c:	684b      	ldr	r3, [r1, #4]
    1d9e:	1912      	adds	r2, r2, r4
    1da0:	416b      	adcs	r3, r5
    1da2:	600a      	str	r2, [r1, #0]
    1da4:	604b      	str	r3, [r1, #4]
    1da6:	bd30      	pop	{r4, r5, pc}
    1da8:	200002c0 	.word	0x200002c0

00001dac <_ZN6uart_t4initERK13uart_pincfg_tt>:
    return 0;
}*/

void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {

    if(m_sercom == SERCOM1) {
    1dac:	2382      	movs	r3, #130	; 0x82
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
    1dae:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(m_sercom == SERCOM1) {
    1db0:	009b      	lsls	r3, r3, #2
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
    1db2:	b085      	sub	sp, #20
    1db4:	9201      	str	r2, [sp, #4]
    1db6:	4e3d      	ldr	r6, [pc, #244]	; (1eac <_ZN6uart_t4initERK13uart_pincfg_tt+0x100>)
    if(m_sercom == SERCOM1) {
    1db8:	58c2      	ldr	r2, [r0, r3]
    1dba:	4b3d      	ldr	r3, [pc, #244]	; (1eb0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x104>)
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
    1dbc:	0004      	movs	r4, r0
    1dbe:	000d      	movs	r5, r1
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
    1dc0:	6a18      	ldr	r0, [r3, #32]
    1dc2:	493c      	ldr	r1, [pc, #240]	; (1eb4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x108>)
    if(m_sercom == SERCOM1) {
    1dc4:	42b2      	cmp	r2, r6
    1dc6:	d166      	bne.n	1e96 <_ZN6uart_t4initERK13uart_pincfg_tt+0xea>
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
    1dc8:	2208      	movs	r2, #8
    1dca:	4302      	orrs	r2, r0
    1dcc:	621a      	str	r2, [r3, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) |
    1dce:	4b3a      	ldr	r3, [pc, #232]	; (1eb8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x10c>)
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
    } else {
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    1dd0:	804b      	strh	r3, [r1, #2]
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
    }

    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1dd2:	7ca9      	ldrb	r1, [r5, #18]
    1dd4:	0028      	movs	r0, r5
    1dd6:	1e4b      	subs	r3, r1, #1
    1dd8:	4199      	sbcs	r1, r3
    1dda:	3102      	adds	r1, #2
    1ddc:	f7ff fe46 	bl	1a6c <_ZN4gpio6pmuxenERK6gpio_th>
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1de0:	7ce9      	ldrb	r1, [r5, #19]
    1de2:	0028      	movs	r0, r5
    1de4:	1e4b      	subs	r3, r1, #1
    1de6:	4199      	sbcs	r1, r3
    1de8:	3008      	adds	r0, #8
    1dea:	3102      	adds	r1, #2
    1dec:	f7ff fe3e 	bl	1a6c <_ZN4gpio6pmuxenERK6gpio_th>

    m_sercom->USART.CTRLA.bit.ENABLE = 0;
    1df0:	2382      	movs	r3, #130	; 0x82
    1df2:	2002      	movs	r0, #2
    1df4:	009b      	lsls	r3, r3, #2
    1df6:	58e1      	ldr	r1, [r4, r3]
    1df8:	680a      	ldr	r2, [r1, #0]
    1dfa:	4382      	bics	r2, r0
    1dfc:	600a      	str	r2, [r1, #0]
    m_sercom->USART.CTRLA.bit.SWRST = 1;
    1dfe:	2201      	movs	r2, #1
    1e00:	58e1      	ldr	r1, [r4, r3]
    1e02:	6808      	ldr	r0, [r1, #0]
    1e04:	4302      	orrs	r2, r0
    1e06:	600a      	str	r2, [r1, #0]
    while(m_sercom->USART.CTRLA.bit.SWRST);
    1e08:	58e2      	ldr	r2, [r4, r3]
    1e0a:	6813      	ldr	r3, [r2, #0]
    1e0c:	07db      	lsls	r3, r3, #31
    1e0e:	d4fc      	bmi.n	1e0a <_ZN6uart_t4initERK13uart_pincfg_tt+0x5e>

    m_sercom->USART.CTRLA.bit.MODE = SERCOM_USART_CTRLA_MODE_USART_INT_CLK_Val;
    1e10:	211c      	movs	r1, #28
    1e12:	2004      	movs	r0, #4
    1e14:	6813      	ldr	r3, [r2, #0]
    1e16:	438b      	bics	r3, r1
    1e18:	4303      	orrs	r3, r0
    1e1a:	6013      	str	r3, [r2, #0]
    m_sercom->USART.CTRLA.bit.DORD = 1;
    1e1c:	2382      	movs	r3, #130	; 0x82
    1e1e:	2280      	movs	r2, #128	; 0x80
    1e20:	009b      	lsls	r3, r3, #2
    1e22:	58e1      	ldr	r1, [r4, r3]
    1e24:	05d2      	lsls	r2, r2, #23
    1e26:	680f      	ldr	r7, [r1, #0]
    1e28:	433a      	orrs	r2, r7
    m_sercom->USART.CTRLA.bit.TXPO = pincfg.tx_pad;
    1e2a:	2703      	movs	r7, #3
    m_sercom->USART.CTRLA.bit.DORD = 1;
    1e2c:	600a      	str	r2, [r1, #0]
    m_sercom->USART.CTRLA.bit.TXPO = pincfg.tx_pad;
    1e2e:	58e2      	ldr	r2, [r4, r3]
    1e30:	7c29      	ldrb	r1, [r5, #16]
    1e32:	6812      	ldr	r2, [r2, #0]
    1e34:	4039      	ands	r1, r7
    1e36:	9202      	str	r2, [sp, #8]
    1e38:	040a      	lsls	r2, r1, #16
    1e3a:	9203      	str	r2, [sp, #12]
    1e3c:	9902      	ldr	r1, [sp, #8]
    1e3e:	4a1f      	ldr	r2, [pc, #124]	; (1ebc <_ZN6uart_t4initERK13uart_pincfg_tt+0x110>)
    1e40:	4011      	ands	r1, r2
    1e42:	000a      	movs	r2, r1
    1e44:	9903      	ldr	r1, [sp, #12]
    1e46:	430a      	orrs	r2, r1
    1e48:	58e1      	ldr	r1, [r4, r3]
    1e4a:	600a      	str	r2, [r1, #0]
    m_sercom->USART.CTRLA.bit.RXPO = pincfg.rx_pad;
    1e4c:	58e2      	ldr	r2, [r4, r3]
    1e4e:	7c6d      	ldrb	r5, [r5, #17]
    1e50:	6811      	ldr	r1, [r2, #0]
    1e52:	403d      	ands	r5, r7
    1e54:	4f1a      	ldr	r7, [pc, #104]	; (1ec0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x114>)
    1e56:	052d      	lsls	r5, r5, #20
    1e58:	400f      	ands	r7, r1
    1e5a:	432f      	orrs	r7, r5
    1e5c:	6017      	str	r7, [r2, #0]
    m_sercom->USART.BAUD.reg = speed;
    1e5e:	58e2      	ldr	r2, [r4, r3]
    1e60:	9901      	ldr	r1, [sp, #4]
    1e62:	8191      	strh	r1, [r2, #12]
    m_sercom->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
    1e64:	21c0      	movs	r1, #192	; 0xc0
    1e66:	58e2      	ldr	r2, [r4, r3]
    1e68:	0289      	lsls	r1, r1, #10
    1e6a:	6051      	str	r1, [r2, #4]

    m_sercom->USART.INTENSET.bit.RXC = 1;
    1e6c:	58e2      	ldr	r2, [r4, r3]
    1e6e:	7d91      	ldrb	r1, [r2, #22]
    1e70:	4308      	orrs	r0, r1
    1e72:	7590      	strb	r0, [r2, #22]
    if(m_sercom == SERCOM0)
    1e74:	58e2      	ldr	r2, [r4, r3]
    1e76:	4b13      	ldr	r3, [pc, #76]	; (1ec4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x118>)
    1e78:	429a      	cmp	r2, r3
    1e7a:	d111      	bne.n	1ea0 <_ZN6uart_t4initERK13uart_pincfg_tt+0xf4>
    1e7c:	2180      	movs	r1, #128	; 0x80
    1e7e:	4b12      	ldr	r3, [pc, #72]	; (1ec8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x11c>)
    1e80:	0089      	lsls	r1, r1, #2
    1e82:	6019      	str	r1, [r3, #0]
        NVIC_EnableIRQ(SERCOM0_IRQn);
    else if(m_sercom == SERCOM1)
        NVIC_EnableIRQ(SERCOM1_IRQn);

    m_sercom->USART.CTRLA.bit.ENABLE = 1;
    1e84:	2302      	movs	r3, #2
    1e86:	6811      	ldr	r1, [r2, #0]
    1e88:	430b      	orrs	r3, r1
    1e8a:	6013      	str	r3, [r2, #0]

    m_used = true;
    1e8c:	2201      	movs	r2, #1
    1e8e:	4b0f      	ldr	r3, [pc, #60]	; (1ecc <_ZN6uart_t4initERK13uart_pincfg_tt+0x120>)
    1e90:	54e2      	strb	r2, [r4, r3]
}
    1e92:	b005      	add	sp, #20
    1e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
    1e96:	2204      	movs	r2, #4
    1e98:	4302      	orrs	r2, r0
    1e9a:	621a      	str	r2, [r3, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    1e9c:	4b0c      	ldr	r3, [pc, #48]	; (1ed0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x124>)
    1e9e:	e797      	b.n	1dd0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x24>
    else if(m_sercom == SERCOM1)
    1ea0:	42b2      	cmp	r2, r6
    1ea2:	d1ef      	bne.n	1e84 <_ZN6uart_t4initERK13uart_pincfg_tt+0xd8>
    1ea4:	2180      	movs	r1, #128	; 0x80
    1ea6:	4b08      	ldr	r3, [pc, #32]	; (1ec8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x11c>)
    1ea8:	00c9      	lsls	r1, r1, #3
    1eaa:	e7ea      	b.n	1e82 <_ZN6uart_t4initERK13uart_pincfg_tt+0xd6>
    1eac:	42000c00 	.word	0x42000c00
    1eb0:	40000400 	.word	0x40000400
    1eb4:	40000c00 	.word	0x40000c00
    1eb8:	0000400f 	.word	0x0000400f
    1ebc:	fffcffff 	.word	0xfffcffff
    1ec0:	ffcfffff 	.word	0xffcfffff
    1ec4:	42000800 	.word	0x42000800
    1ec8:	e000e100 	.word	0xe000e100
    1ecc:	00000205 	.word	0x00000205
    1ed0:	0000400e 	.word	0x0000400e

00001ed4 <_ZN6uart_t14sercom_handlerEv>:

void uart_t::sercom_handler() {
    if(!m_used) return;
    1ed4:	4b11      	ldr	r3, [pc, #68]	; (1f1c <_ZN6uart_t14sercom_handlerEv+0x48>)
void uart_t::sercom_handler() {
    1ed6:	b510      	push	{r4, lr}
    if(!m_used) return;
    1ed8:	5cc3      	ldrb	r3, [r0, r3]
    1eda:	2b00      	cmp	r3, #0
    1edc:	d01b      	beq.n	1f16 <_ZN6uart_t14sercom_handlerEv+0x42>

    if(!m_rxfull) {
    1ede:	2281      	movs	r2, #129	; 0x81
    1ee0:	2382      	movs	r3, #130	; 0x82
    1ee2:	0092      	lsls	r2, r2, #2
    1ee4:	5c81      	ldrb	r1, [r0, r2]
    1ee6:	009b      	lsls	r3, r3, #2
    1ee8:	58c3      	ldr	r3, [r0, r3]
    1eea:	2900      	cmp	r1, #0
    1eec:	d114      	bne.n	1f18 <_ZN6uart_t14sercom_handlerEv+0x44>
		m_rxbuf[m_rxhead] = m_sercom->USART.DATA.reg;
    1eee:	2180      	movs	r1, #128	; 0x80
    1ef0:	0089      	lsls	r1, r1, #2
    1ef2:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
    1ef4:	5a43      	ldrh	r3, [r0, r1]
    1ef6:	b2e4      	uxtb	r4, r4
    1ef8:	b29b      	uxth	r3, r3
    1efa:	54c4      	strb	r4, [r0, r3]
		m_rxhead = (m_rxhead+1) % sizeof(m_rxbuf);
    1efc:	5a43      	ldrh	r3, [r0, r1]
    1efe:	3301      	adds	r3, #1
    1f00:	05db      	lsls	r3, r3, #23
    1f02:	0ddb      	lsrs	r3, r3, #23
    1f04:	5243      	strh	r3, [r0, r1]
		m_rxfull = m_rxtail == m_rxhead;
    1f06:	4b06      	ldr	r3, [pc, #24]	; (1f20 <_ZN6uart_t14sercom_handlerEv+0x4c>)
    1f08:	5ac3      	ldrh	r3, [r0, r3]
    1f0a:	5a41      	ldrh	r1, [r0, r1]
    1f0c:	1a5b      	subs	r3, r3, r1
    1f0e:	4259      	negs	r1, r3
    1f10:	414b      	adcs	r3, r1
    1f12:	b2db      	uxtb	r3, r3
    1f14:	5483      	strb	r3, [r0, r2]
	} else {
		(void)m_sercom->USART.DATA.reg; // Clear RX flag
	}
}
    1f16:	bd10      	pop	{r4, pc}
		(void)m_sercom->USART.DATA.reg; // Clear RX flag
    1f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1f1a:	e7fc      	b.n	1f16 <_ZN6uart_t14sercom_handlerEv+0x42>
    1f1c:	00000205 	.word	0x00000205
    1f20:	00000202 	.word	0x00000202

00001f24 <_ZN6uart_t5writeEc>:

void uart_t::write(char c) {
    if(!m_used) return;
    1f24:	4b06      	ldr	r3, [pc, #24]	; (1f40 <_ZN6uart_t5writeEc+0x1c>)
    1f26:	5cc3      	ldrb	r3, [r0, r3]
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d008      	beq.n	1f3e <_ZN6uart_t5writeEc+0x1a>
    
    m_sercom->USART.DATA.reg = c;
    1f2c:	2382      	movs	r3, #130	; 0x82
    1f2e:	009b      	lsls	r3, r3, #2
    1f30:	58c2      	ldr	r2, [r0, r3]
    1f32:	b289      	uxth	r1, r1
    1f34:	8511      	strh	r1, [r2, #40]	; 0x28
	while(!m_sercom->USART.INTFLAG.bit.DRE);
    1f36:	58c2      	ldr	r2, [r0, r3]
    1f38:	7e13      	ldrb	r3, [r2, #24]
    1f3a:	07db      	lsls	r3, r3, #31
    1f3c:	d5fc      	bpl.n	1f38 <_ZN6uart_t5writeEc+0x14>
}
    1f3e:	4770      	bx	lr
    1f40:	00000205 	.word	0x00000205

00001f44 <_ZN6uart_t5printEPKci>:

void uart_t::print(const char* str, int len) {
    1f44:	b570      	push	{r4, r5, r6, lr}
    if(!m_used) return;
    1f46:	4b0b      	ldr	r3, [pc, #44]	; (1f74 <_ZN6uart_t5printEPKci+0x30>)
void uart_t::print(const char* str, int len) {
    1f48:	0005      	movs	r5, r0
    if(!m_used) return;
    1f4a:	5cc3      	ldrb	r3, [r0, r3]
void uart_t::print(const char* str, int len) {
    1f4c:	000c      	movs	r4, r1
    1f4e:	0016      	movs	r6, r2
    if(!m_used) return;
    1f50:	2b00      	cmp	r3, #0
    1f52:	d00d      	beq.n	1f70 <_ZN6uart_t5printEPKci+0x2c>
    
    while((len == -1) ? *str : len--) write(*str++);
    1f54:	1c73      	adds	r3, r6, #1
    1f56:	d108      	bne.n	1f6a <_ZN6uart_t5printEPKci+0x26>
    1f58:	7823      	ldrb	r3, [r4, #0]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d008      	beq.n	1f70 <_ZN6uart_t5printEPKci+0x2c>
    1f5e:	7821      	ldrb	r1, [r4, #0]
    1f60:	0028      	movs	r0, r5
    1f62:	f7ff ffdf 	bl	1f24 <_ZN6uart_t5writeEc>
    1f66:	3401      	adds	r4, #1
    1f68:	e7f4      	b.n	1f54 <_ZN6uart_t5printEPKci+0x10>
    1f6a:	0033      	movs	r3, r6
    1f6c:	3e01      	subs	r6, #1
    1f6e:	e7f4      	b.n	1f5a <_ZN6uart_t5printEPKci+0x16>
}
    1f70:	bd70      	pop	{r4, r5, r6, pc}
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	00000205 	.word	0x00000205

00001f78 <_ZN6uart_t7rxemptyEv>:
	
	return c;
}

bool uart_t::rxempty() {
	return (!m_rxfull && (m_rxhead == m_rxtail));
    1f78:	2381      	movs	r3, #129	; 0x81
    1f7a:	009b      	lsls	r3, r3, #2
bool uart_t::rxempty() {
    1f7c:	0002      	movs	r2, r0
	return (!m_rxfull && (m_rxhead == m_rxtail));
    1f7e:	5cc3      	ldrb	r3, [r0, r3]
    1f80:	2000      	movs	r0, #0
    1f82:	4283      	cmp	r3, r0
    1f84:	d108      	bne.n	1f98 <_ZN6uart_t7rxemptyEv+0x20>
    1f86:	2380      	movs	r3, #128	; 0x80
    1f88:	4904      	ldr	r1, [pc, #16]	; (1f9c <_ZN6uart_t7rxemptyEv+0x24>)
    1f8a:	009b      	lsls	r3, r3, #2
    1f8c:	5ad3      	ldrh	r3, [r2, r3]
    1f8e:	5a50      	ldrh	r0, [r2, r1]
    1f90:	1a18      	subs	r0, r3, r0
    1f92:	4243      	negs	r3, r0
    1f94:	4158      	adcs	r0, r3
    1f96:	b2c0      	uxtb	r0, r0
}
    1f98:	4770      	bx	lr
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	00000202 	.word	0x00000202

00001fa0 <_ZN6uart_t4getcEv>:
char uart_t::getc() {
    1fa0:	b510      	push	{r4, lr}
    if(!m_used) return '\0';
    1fa2:	4b0c      	ldr	r3, [pc, #48]	; (1fd4 <_ZN6uart_t4getcEv+0x34>)
char uart_t::getc() {
    1fa4:	0004      	movs	r4, r0
    if(!m_used) return '\0';
    1fa6:	5cc3      	ldrb	r3, [r0, r3]
    1fa8:	1e18      	subs	r0, r3, #0
    1faa:	d011      	beq.n	1fd0 <_ZN6uart_t4getcEv+0x30>
	while(rxempty());
    1fac:	0020      	movs	r0, r4
    1fae:	f7ff ffe3 	bl	1f78 <_ZN6uart_t7rxemptyEv>
    1fb2:	1e03      	subs	r3, r0, #0
    1fb4:	d1fa      	bne.n	1fac <_ZN6uart_t4getcEv+0xc>
	uint8_t c = m_rxbuf[m_rxtail];
    1fb6:	4a08      	ldr	r2, [pc, #32]	; (1fd8 <_ZN6uart_t4getcEv+0x38>)
    1fb8:	5aa1      	ldrh	r1, [r4, r2]
    1fba:	b289      	uxth	r1, r1
    1fbc:	5c60      	ldrb	r0, [r4, r1]
	m_rxfull = false;
    1fbe:	2181      	movs	r1, #129	; 0x81
    1fc0:	0089      	lsls	r1, r1, #2
    1fc2:	5463      	strb	r3, [r4, r1]
	m_rxtail = (m_rxtail+1) % sizeof(m_rxbuf);
    1fc4:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t c = m_rxbuf[m_rxtail];
    1fc6:	b2c0      	uxtb	r0, r0
	m_rxtail = (m_rxtail+1) % sizeof(m_rxbuf);
    1fc8:	3301      	adds	r3, #1
    1fca:	05db      	lsls	r3, r3, #23
    1fcc:	0ddb      	lsrs	r3, r3, #23
    1fce:	52a3      	strh	r3, [r4, r2]
}
    1fd0:	bd10      	pop	{r4, pc}
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	00000205 	.word	0x00000205
    1fd8:	00000202 	.word	0x00000202

00001fdc <_ZN6uart_t4peekEi>:
		*s++ = c;
	}
	*s = 0;
}

char uart_t::peek(int pos) {
    1fdc:	b570      	push	{r4, r5, r6, lr}
    if(!m_used) return '\0';
    1fde:	4b0f      	ldr	r3, [pc, #60]	; (201c <_ZN6uart_t4peekEi+0x40>)
char uart_t::peek(int pos) {
    1fe0:	0004      	movs	r4, r0
    if(!m_used) return '\0';
    1fe2:	5cc3      	ldrb	r3, [r0, r3]
char uart_t::peek(int pos) {
    1fe4:	000d      	movs	r5, r1
    if(!m_used) return '\0';
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	d101      	bne.n	1fee <_ZN6uart_t4peekEi+0x12>
    1fea:	2000      	movs	r0, #0

    if(pos == -1)
        return m_rxbuf[m_rxtail];
    else
        return m_rxbuf[(m_rxtail + pos) % sizeof(m_rxbuf)];
}
    1fec:	bd70      	pop	{r4, r5, r6, pc}
    if(rxempty() || pos >= available()) return '\0';
    1fee:	f7ff ffc3 	bl	1f78 <_ZN6uart_t7rxemptyEv>
    1ff2:	2800      	cmp	r0, #0
    1ff4:	d1f9      	bne.n	1fea <_ZN6uart_t4peekEi+0xe>
    1ff6:	0020      	movs	r0, r4
    1ff8:	f7fe f86c 	bl	d4 <_ZN6uart_t9availableEv>
    1ffc:	42a8      	cmp	r0, r5
    1ffe:	ddf4      	ble.n	1fea <_ZN6uart_t4peekEi+0xe>
    if(pos == -1)
    2000:	4b07      	ldr	r3, [pc, #28]	; (2020 <_ZN6uart_t4peekEi+0x44>)
    2002:	1c6a      	adds	r2, r5, #1
    2004:	d104      	bne.n	2010 <_ZN6uart_t4peekEi+0x34>
        return m_rxbuf[m_rxtail];
    2006:	5ae3      	ldrh	r3, [r4, r3]
    2008:	b29b      	uxth	r3, r3
    200a:	5ce0      	ldrb	r0, [r4, r3]
        return m_rxbuf[(m_rxtail + pos) % sizeof(m_rxbuf)];
    200c:	b2c0      	uxtb	r0, r0
    200e:	e7ed      	b.n	1fec <_ZN6uart_t4peekEi+0x10>
    2010:	5ae1      	ldrh	r1, [r4, r3]
    2012:	1949      	adds	r1, r1, r5
    2014:	05c9      	lsls	r1, r1, #23
    2016:	0dc9      	lsrs	r1, r1, #23
    2018:	5c60      	ldrb	r0, [r4, r1]
    201a:	e7f7      	b.n	200c <_ZN6uart_t4peekEi+0x30>
    201c:	00000205 	.word	0x00000205
    2020:	00000202 	.word	0x00000202

00002024 <_ZN6uart_t4findEPKc>:

int uart_t::find(const char* str) {
    2024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(!m_used) return -1;
    2026:	4b11      	ldr	r3, [pc, #68]	; (206c <_ZN6uart_t4findEPKc+0x48>)
int uart_t::find(const char* str) {
    2028:	9100      	str	r1, [sp, #0]
    if(!m_used) return -1;
    202a:	5cc3      	ldrb	r3, [r0, r3]
int uart_t::find(const char* str) {
    202c:	0004      	movs	r4, r0
    if(!m_used) return -1;
    202e:	2b00      	cmp	r3, #0
    2030:	d019      	beq.n	2066 <_ZN6uart_t4findEPKc+0x42>
    2032:	424e      	negs	r6, r1
    2034:	9b00      	ldr	r3, [sp, #0]
    
    for(int i = 0; i < available(); i++) {
    2036:	0020      	movs	r0, r4
    2038:	199f      	adds	r7, r3, r6
    203a:	f7fe f84b 	bl	d4 <_ZN6uart_t9availableEv>
    203e:	42b8      	cmp	r0, r7
    2040:	dd11      	ble.n	2066 <_ZN6uart_t4findEPKc+0x42>
    2042:	9d00      	ldr	r5, [sp, #0]
        int search_idx = 0;
        while(str[search_idx] == peek(i + search_idx))
    2044:	782b      	ldrb	r3, [r5, #0]
    2046:	0020      	movs	r0, r4
    2048:	19a9      	adds	r1, r5, r6
    204a:	9301      	str	r3, [sp, #4]
    204c:	f7ff ffc6 	bl	1fdc <_ZN6uart_t4peekEi>
    2050:	9b01      	ldr	r3, [sp, #4]
    2052:	4283      	cmp	r3, r0
    2054:	d105      	bne.n	2062 <_ZN6uart_t4findEPKc+0x3e>
            if(!str[++search_idx]) return i;
    2056:	786b      	ldrb	r3, [r5, #1]
    2058:	3501      	adds	r5, #1
    205a:	2b00      	cmp	r3, #0
    205c:	d1f2      	bne.n	2044 <_ZN6uart_t4findEPKc+0x20>
    }

    return -1;
}
    205e:	0038      	movs	r0, r7
    2060:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    for(int i = 0; i < available(); i++) {
    2062:	3601      	adds	r6, #1
    2064:	e7e6      	b.n	2034 <_ZN6uart_t4findEPKc+0x10>
    if(!m_used) return -1;
    2066:	2701      	movs	r7, #1
    2068:	427f      	negs	r7, r7
    206a:	e7f8      	b.n	205e <_ZN6uart_t4findEPKc+0x3a>
    206c:	00000205 	.word	0x00000205

00002070 <_ZN6uart_t4readEv>:

char* uart_t::read() {
    2070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(!m_used) return NULL;
    2072:	4b0f      	ldr	r3, [pc, #60]	; (20b0 <_ZN6uart_t4readEv+0x40>)
char* uart_t::read() {
    2074:	0005      	movs	r5, r0
    if(!m_used) return NULL;
    2076:	5cc3      	ldrb	r3, [r0, r3]
    2078:	2b00      	cmp	r3, #0
    207a:	d102      	bne.n	2082 <_ZN6uart_t4readEv+0x12>
    207c:	2400      	movs	r4, #0
        data[i] = getc();

    data[avail] = '\0';
    
    return data;
}
    207e:	0020      	movs	r0, r4
    2080:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    size_t avail = available();
    2082:	f7fe f827 	bl	d4 <_ZN6uart_t9availableEv>
    2086:	1e07      	subs	r7, r0, #0
    if(!avail) return NULL;
    2088:	d0f8      	beq.n	207c <_ZN6uart_t4readEv+0xc>
    char* data = (char*)malloc(avail + 1);
    208a:	3001      	adds	r0, #1
    208c:	f000 fb4a 	bl	2724 <malloc>
    2090:	1e04      	subs	r4, r0, #0
    if(!data) return NULL;
    2092:	d0f3      	beq.n	207c <_ZN6uart_t4readEv+0xc>
    2094:	0006      	movs	r6, r0
    2096:	19c3      	adds	r3, r0, r7
    2098:	9301      	str	r3, [sp, #4]
        data[i] = getc();
    209a:	0028      	movs	r0, r5
    209c:	f7ff ff80 	bl	1fa0 <_ZN6uart_t4getcEv>
    for(size_t i = 0; i < avail; i++)
    20a0:	9b01      	ldr	r3, [sp, #4]
        data[i] = getc();
    20a2:	7030      	strb	r0, [r6, #0]
    for(size_t i = 0; i < avail; i++)
    20a4:	3601      	adds	r6, #1
    20a6:	429e      	cmp	r6, r3
    20a8:	d1f7      	bne.n	209a <_ZN6uart_t4readEv+0x2a>
    data[avail] = '\0';
    20aa:	2300      	movs	r3, #0
    20ac:	55e3      	strb	r3, [r4, r7]
    return data;
    20ae:	e7e6      	b.n	207e <_ZN6uart_t4readEv+0xe>
    20b0:	00000205 	.word	0x00000205

000020b4 <SERCOM0_Handler>:

void SERCOM0_Handler() {
    20b4:	b510      	push	{r4, lr}
    g_uart0.sercom_handler();
    20b6:	4802      	ldr	r0, [pc, #8]	; (20c0 <SERCOM0_Handler+0xc>)
    20b8:	f7ff ff0c 	bl	1ed4 <_ZN6uart_t14sercom_handlerEv>
}
    20bc:	bd10      	pop	{r4, pc}
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	200002c8 	.word	0x200002c8

000020c4 <SERCOM1_Handler>:

void SERCOM1_Handler() {
    20c4:	b510      	push	{r4, lr}
    g_uart1.sercom_handler();
    20c6:	4802      	ldr	r0, [pc, #8]	; (20d0 <SERCOM1_Handler+0xc>)
    20c8:	f7ff ff04 	bl	1ed4 <_ZN6uart_t14sercom_handlerEv>
    20cc:	bd10      	pop	{r4, pc}
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	200004d4 	.word	0x200004d4

000020d4 <_GLOBAL__sub_I_g_uart0>:
    20d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool m_used = false;

public:
    Sercom* m_sercom = NULL;
    
    uart_t(Sercom* sercom) { m_sercom = sercom; }
    20d6:	2182      	movs	r1, #130	; 0x82
    20d8:	2680      	movs	r6, #128	; 0x80
    20da:	2481      	movs	r4, #129	; 0x81
    20dc:	2300      	movs	r3, #0
    20de:	4a0a      	ldr	r2, [pc, #40]	; (2108 <_GLOBAL__sub_I_g_uart0+0x34>)
    20e0:	4d0a      	ldr	r5, [pc, #40]	; (210c <_GLOBAL__sub_I_g_uart0+0x38>)
    20e2:	480b      	ldr	r0, [pc, #44]	; (2110 <_GLOBAL__sub_I_g_uart0+0x3c>)
    20e4:	4f0b      	ldr	r7, [pc, #44]	; (2114 <_GLOBAL__sub_I_g_uart0+0x40>)
    20e6:	00b6      	lsls	r6, r6, #2
    20e8:	00a4      	lsls	r4, r4, #2
    20ea:	0089      	lsls	r1, r1, #2
    20ec:	5393      	strh	r3, [r2, r6]
    20ee:	5413      	strb	r3, [r2, r0]
    20f0:	5353      	strh	r3, [r2, r5]
    20f2:	5057      	str	r7, [r2, r1]
    20f4:	5513      	strb	r3, [r2, r4]
    20f6:	4a08      	ldr	r2, [pc, #32]	; (2118 <_GLOBAL__sub_I_g_uart0+0x44>)
    20f8:	5393      	strh	r3, [r2, r6]
    20fa:	5413      	strb	r3, [r2, r0]
    20fc:	5353      	strh	r3, [r2, r5]
    20fe:	5513      	strb	r3, [r2, r4]
    2100:	4b06      	ldr	r3, [pc, #24]	; (211c <_GLOBAL__sub_I_g_uart0+0x48>)
    2102:	5053      	str	r3, [r2, r1]
    2104:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2106:	46c0      	nop			; (mov r8, r8)
    2108:	200002c8 	.word	0x200002c8
    210c:	00000202 	.word	0x00000202
    2110:	00000205 	.word	0x00000205
    2114:	42000800 	.word	0x42000800
    2118:	200004d4 	.word	0x200004d4
    211c:	42000c00 	.word	0x42000c00

00002120 <_ZN9SensornetC1ERK4RF24>:
extern "C" {
#include <systick.h>
}

Sensornet::Sensornet(const RF24& radio) :
    m_radio(radio)
    2120:	0003      	movs	r3, r0
Sensornet::Sensornet(const RF24& radio) :
    2122:	b530      	push	{r4, r5, lr}
    m_radio(radio)
    2124:	c934      	ldmia	r1!, {r2, r4, r5}
    2126:	c334      	stmia	r3!, {r2, r4, r5}
    2128:	c934      	ldmia	r1!, {r2, r4, r5}
    212a:	c334      	stmia	r3!, {r2, r4, r5}
    212c:	c934      	ldmia	r1!, {r2, r4, r5}
    212e:	c334      	stmia	r3!, {r2, r4, r5}
    2130:	680a      	ldr	r2, [r1, #0]
    2132:	601a      	str	r2, [r3, #0]
    Vector() : m_size(0), m_data(NULL) {}
    2134:	2300      	movs	r3, #0
    2136:	6283      	str	r3, [r0, #40]	; 0x28
    2138:	62c3      	str	r3, [r0, #44]	; 0x2c
    213a:	6303      	str	r3, [r0, #48]	; 0x30
    213c:	6343      	str	r3, [r0, #52]	; 0x34
        },
        millis()
    };

    m_nodes.push_back(node2);*/
}
    213e:	bd30      	pop	{r4, r5, pc}

00002140 <_ZN9Sensornet5beginEv>:

bool Sensornet::begin() {
    2140:	b570      	push	{r4, r5, r6, lr}
    2142:	0004      	movs	r4, r0
    if(!m_radio.begin())
    2144:	f7ff f8be 	bl	12c4 <_ZN4RF245beginEv>
    2148:	1e05      	subs	r5, r0, #0
    214a:	d021      	beq.n	2190 <_ZN9Sensornet5beginEv+0x50>
        return false;

    m_radio.setChannel(120);
    214c:	2178      	movs	r1, #120	; 0x78
    214e:	0020      	movs	r0, r4
    2150:	f7fe ff21 	bl	f96 <_ZN4RF2410setChannelEh>
    m_radio.setAutoAck(true);
    2154:	2101      	movs	r1, #1
    2156:	0020      	movs	r0, r4
    2158:	f7ff f872 	bl	1240 <_ZN4RF2410setAutoAckEb>
    //m_radio.enableAckPayload();
    m_radio.setRetries(5, 15);
    215c:	220f      	movs	r2, #15
    215e:	2105      	movs	r1, #5
    2160:	0020      	movs	r0, r4
    2162:	f7ff f933 	bl	13cc <_ZN4RF2410setRetriesEhh>
    m_radio.setPayloadSize(32);
    2166:	2120      	movs	r1, #32
    2168:	0020      	movs	r0, r4
    216a:	f7fe ff1d 	bl	fa8 <_ZN4RF2414setPayloadSizeEh>

    m_radio.setPALevel(RF24_PA_MAX);
    216e:	2103      	movs	r1, #3
    2170:	0020      	movs	r0, r4
    2172:	f7ff f86e 	bl	1252 <_ZN4RF2410setPALevelEh>
    m_radio.setDataRate(RF24_1MBPS);
    2176:	2100      	movs	r1, #0
    2178:	0020      	movs	r0, r4
    217a:	f7ff f87e 	bl	127a <_ZN4RF2411setDataRateE15rf24_datarate_e>

    // Open pipe 1 for reading on address 255
    m_radio.openReadingPipe(1, (uint64_t)255 | (1 << 10));
    217e:	0020      	movs	r0, r4
    2180:	2300      	movs	r3, #0
    2182:	2101      	movs	r1, #1
    2184:	4a03      	ldr	r2, [pc, #12]	; (2194 <_ZN9Sensornet5beginEv+0x54>)
    2186:	f7fe ffd1 	bl	112c <_ZN4RF2415openReadingPipeEhy>

    m_radio.startListening();
    218a:	0020      	movs	r0, r4
    218c:	f7ff f818 	bl	11c0 <_ZN4RF2414startListeningEv>

    return true;
}
    2190:	0028      	movs	r0, r5
    2192:	bd70      	pop	{r4, r5, r6, pc}
    2194:	000004ff 	.word	0x000004ff

00002198 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>:
        return m_data + m_size;
    2198:	2224      	movs	r2, #36	; 0x24
            m_radio.startListening();
        }
    }
}

void Sensornet::UpdateNode(const SensorPacket& pkt) {
    219a:	b570      	push	{r4, r5, r6, lr}
    219c:	0005      	movs	r5, r0
    219e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    21a0:	b08a      	sub	sp, #40	; 0x28
    21a2:	435a      	muls	r2, r3
    21a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    21a6:	189a      	adds	r2, r3, r2
    21a8:	001c      	movs	r4, r3
    for(auto& node : m_nodes) {
    21aa:	4293      	cmp	r3, r2
    21ac:	d00f      	beq.n	21ce <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x36>
        if(node.data.id == pkt.id) {
    21ae:	2600      	movs	r6, #0
    21b0:	2000      	movs	r0, #0
    21b2:	57a6      	ldrsb	r6, [r4, r6]
    21b4:	5608      	ldrsb	r0, [r1, r0]
    21b6:	3324      	adds	r3, #36	; 0x24
    21b8:	4286      	cmp	r6, r0
    21ba:	d1f5      	bne.n	21a8 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x10>
            memcpy(&node.data, &pkt, sizeof(SensorPacket));
    21bc:	2220      	movs	r2, #32
    21be:	0020      	movs	r0, r4
    21c0:	f000 fac4 	bl	274c <memcpy>
            node.last_seen = millis();
    21c4:	f7ff fdd8 	bl	1d78 <millis>
    21c8:	6220      	str	r0, [r4, #32]
            return;
        }
    }

    m_nodes.push_back({ pkt, millis() });
}
    21ca:	b00a      	add	sp, #40	; 0x28
    21cc:	bd70      	pop	{r4, r5, r6, pc}
    m_nodes.push_back({ pkt, millis() });
    21ce:	ac01      	add	r4, sp, #4
    21d0:	2220      	movs	r2, #32
    21d2:	0020      	movs	r0, r4
    21d4:	f000 faba 	bl	274c <memcpy>
    21d8:	f7ff fdce 	bl	1d78 <millis>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    21dc:	6b29      	ldr	r1, [r5, #48]	; 0x30
    21de:	0006      	movs	r6, r0
    21e0:	2900      	cmp	r1, #0
    21e2:	d018      	beq.n	2216 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x7e>
    21e4:	2324      	movs	r3, #36	; 0x24
    21e6:	3101      	adds	r1, #1
    21e8:	4359      	muls	r1, r3
    21ea:	6b68      	ldr	r0, [r5, #52]	; 0x34
    21ec:	f000 fb76 	bl	28dc <realloc>
        if(!new_data) return;
    21f0:	2800      	cmp	r0, #0
    21f2:	d0ea      	beq.n	21ca <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x32>
        *(m_data + m_size) = elem;
    21f4:	2224      	movs	r2, #36	; 0x24
    21f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        m_data = new_data;
    21f8:	6368      	str	r0, [r5, #52]	; 0x34
        *(m_data + m_size) = elem;
    21fa:	435a      	muls	r2, r3
    21fc:	9609      	str	r6, [sp, #36]	; 0x24
    21fe:	1882      	adds	r2, r0, r2
    2200:	cc0b      	ldmia	r4!, {r0, r1, r3}
    2202:	c20b      	stmia	r2!, {r0, r1, r3}
    2204:	0011      	movs	r1, r2
    2206:	cc0d      	ldmia	r4!, {r0, r2, r3}
    2208:	c10d      	stmia	r1!, {r0, r2, r3}
    220a:	cc0d      	ldmia	r4!, {r0, r2, r3}
    220c:	c10d      	stmia	r1!, {r0, r2, r3}
        m_size++;
    220e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    2210:	3301      	adds	r3, #1
    2212:	632b      	str	r3, [r5, #48]	; 0x30
    2214:	e7d9      	b.n	21ca <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x32>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    2216:	2024      	movs	r0, #36	; 0x24
    2218:	f000 fa84 	bl	2724 <malloc>
    221c:	e7e8      	b.n	21f0 <_ZN9Sensornet10UpdateNodeERK12SensorPacket+0x58>

0000221e <_ZN9Sensornet13ProcessPacketER12SensorPacket>:
void Sensornet::ProcessPacket(SensorPacket& pkt) {
    221e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2220:	000d      	movs	r5, r1
    m_radio.openWritingPipe((uint64_t)pkt.id | (1 << 10));
    2222:	2100      	movs	r1, #0
    2224:	2280      	movs	r2, #128	; 0x80
    2226:	5669      	ldrsb	r1, [r5, r1]
    2228:	00d2      	lsls	r2, r2, #3
    222a:	17cb      	asrs	r3, r1, #31
    222c:	430a      	orrs	r2, r1
void Sensornet::ProcessPacket(SensorPacket& pkt) {
    222e:	0004      	movs	r4, r0
    m_radio.openWritingPipe((uint64_t)pkt.id | (1 << 10));
    2230:	f7fe ff66 	bl	1100 <_ZN4RF2415openWritingPipeEy>
    if(pkt.id == 0) {
    2234:	2300      	movs	r3, #0
    2236:	56eb      	ldrsb	r3, [r5, r3]
    2238:	2b00      	cmp	r3, #0
    223a:	d16b      	bne.n	2314 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xf6>
        pkt.id = 1;
    223c:	3301      	adds	r3, #1
    223e:	702b      	strb	r3, [r5, #0]
        return m_data + m_size;
    2240:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2242:	3323      	adds	r3, #35	; 0x23
    2244:	4353      	muls	r3, r2
    2246:	6b62      	ldr	r2, [r4, #52]	; 0x34
            if(strncmp(node.data.name, pkt.name, sizeof(SensorPacket::name)) == 0) {
    2248:	2708      	movs	r7, #8
    224a:	0016      	movs	r6, r2
    224c:	18d3      	adds	r3, r2, r3
    224e:	9300      	str	r3, [sp, #0]
    2250:	1c6b      	adds	r3, r5, #1
    2252:	9301      	str	r3, [sp, #4]
        for(auto& node : m_nodes) {
    2254:	9b00      	ldr	r3, [sp, #0]
    2256:	42b3      	cmp	r3, r6
    2258:	d009      	beq.n	226e <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x50>
            if(strncmp(node.data.name, pkt.name, sizeof(SensorPacket::name)) == 0) {
    225a:	003a      	movs	r2, r7
    225c:	9901      	ldr	r1, [sp, #4]
    225e:	1c70      	adds	r0, r6, #1
    2260:	f000 fbcd 	bl	29fe <strncmp>
    2264:	2300      	movs	r3, #0
    2266:	56f3      	ldrsb	r3, [r6, r3]
    2268:	2800      	cmp	r0, #0
    226a:	d14b      	bne.n	2304 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xe6>
                pkt.id = node.data.id;
    226c:	702b      	strb	r3, [r5, #0]
        UpdateNode(pkt);
    226e:	0029      	movs	r1, r5
    2270:	0020      	movs	r0, r4
    2272:	f7ff ff91 	bl	2198 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
        m_radio.stopListening();
    2276:	0020      	movs	r0, r4
    2278:	f7fe fe9c 	bl	fb4 <_ZN4RF2413stopListeningEv>
        pkt.type = Sensors::TYPE_COMMAND;
    227c:	23ff      	movs	r3, #255	; 0xff
    227e:	726b      	strb	r3, [r5, #9]
        pkt.data[0] = Sensors::COMMAND_SET_ID;
    2280:	3bfe      	subs	r3, #254	; 0xfe
        m_radio.write(&pkt, 32);
    2282:	2220      	movs	r2, #32
    2284:	0029      	movs	r1, r5
    2286:	0020      	movs	r0, r4
        pkt.data[0] = Sensors::COMMAND_SET_ID;
    2288:	72ab      	strb	r3, [r5, #10]
        m_radio.write(&pkt, 32);
    228a:	f7fe ff10 	bl	10ae <_ZN4RF245writeEPKvh>
        m_radio.startListening();
    228e:	0020      	movs	r0, r4
    2290:	f7fe ff96 	bl	11c0 <_ZN4RF2414startListeningEv>
void Sensornet::ProcessPacket(SensorPacket& pkt) {
    2294:	2600      	movs	r6, #0
    for(size_t i = 0; i < m_cmd_queue.size(); i++) {
    2296:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2298:	429e      	cmp	r6, r3
    229a:	d248      	bcs.n	232e <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x110>
        return *(m_data + idx);
    229c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    229e:	0177      	lsls	r7, r6, #5
    22a0:	19da      	adds	r2, r3, r7
    22a2:	9200      	str	r2, [sp, #0]
        if(cmd.id == pkt.id) {
    22a4:	57da      	ldrsb	r2, [r3, r7]
    22a6:	2300      	movs	r3, #0
    22a8:	56eb      	ldrsb	r3, [r5, r3]
    22aa:	429a      	cmp	r2, r3
    22ac:	d128      	bne.n	2300 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xe2>
            m_radio.stopListening();
    22ae:	0020      	movs	r0, r4
    22b0:	f7fe fe80 	bl	fb4 <_ZN4RF2413stopListeningEv>
            if(m_radio.write(&cmd, 32)) {
    22b4:	2220      	movs	r2, #32
    22b6:	0020      	movs	r0, r4
    22b8:	9900      	ldr	r1, [sp, #0]
    22ba:	f7fe fef8 	bl	10ae <_ZN4RF245writeEPKvh>
    22be:	2800      	cmp	r0, #0
    22c0:	d01b      	beq.n	22fa <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xdc>
    }

    void erase(T* it) {
        if(!m_size || it < begin() || it >= end()) return;
    22c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    22c4:	2a00      	cmp	r2, #0
    22c6:	d017      	beq.n	22f8 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xda>
                m_cmd_queue.erase(m_cmd_queue.begin() + i);
    22c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    22ca:	19d8      	adds	r0, r3, r7
    22cc:	4298      	cmp	r0, r3
    22ce:	d313      	bcc.n	22f8 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xda>
        return m_data + m_size;
    22d0:	0152      	lsls	r2, r2, #5
    22d2:	189b      	adds	r3, r3, r2
        if(!m_size || it < begin() || it >= end()) return;
    22d4:	4298      	cmp	r0, r3
    22d6:	d20f      	bcs.n	22f8 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xda>

        memcpy(it, it + 1, m_size * sizeof(T) - (it - begin()) - 1 * sizeof(T));
    22d8:	0001      	movs	r1, r0
    22da:	117f      	asrs	r7, r7, #5
    22dc:	3a20      	subs	r2, #32
    22de:	1bd2      	subs	r2, r2, r7
    22e0:	3120      	adds	r1, #32
    22e2:	f000 fa33 	bl	274c <memcpy>

        m_size -= 1;
    22e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    22e8:	1e5f      	subs	r7, r3, #1
    22ea:	62a7      	str	r7, [r4, #40]	; 0x28
        if(!m_size) {
    22ec:	2f00      	cmp	r7, #0
    22ee:	d116      	bne.n	231e <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x100>
            free(m_data);
    22f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    22f2:	f000 fa21 	bl	2738 <free>
            m_data = NULL;
    22f6:	62e7      	str	r7, [r4, #44]	; 0x2c
                i--;
    22f8:	3e01      	subs	r6, #1
            m_radio.startListening();
    22fa:	0020      	movs	r0, r4
    22fc:	f7fe ff60 	bl	11c0 <_ZN4RF2414startListeningEv>
    for(size_t i = 0; i < m_cmd_queue.size(); i++) {
    2300:	3601      	adds	r6, #1
    2302:	e7c8      	b.n	2296 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x78>
            if(node.data.id >= pkt.id) pkt.id = node.data.id + 1;
    2304:	2200      	movs	r2, #0
    2306:	56aa      	ldrsb	r2, [r5, r2]
    2308:	429a      	cmp	r2, r3
    230a:	dc01      	bgt.n	2310 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xf2>
    230c:	3301      	adds	r3, #1
    230e:	702b      	strb	r3, [r5, #0]
        for(auto& node : m_nodes) {
    2310:	3624      	adds	r6, #36	; 0x24
    2312:	e79f      	b.n	2254 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x36>
        UpdateNode(pkt);
    2314:	0029      	movs	r1, r5
    2316:	0020      	movs	r0, r4
    2318:	f7ff ff3e 	bl	2198 <_ZN9Sensornet10UpdateNodeERK12SensorPacket>
    231c:	e7ba      	b.n	2294 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0x76>
            return;
        }

        auto new_data = (T*)realloc(m_data, m_size * sizeof(T));
    231e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2320:	0179      	lsls	r1, r7, #5
    2322:	f000 fadb 	bl	28dc <realloc>
        if(!new_data) return;
    2326:	2800      	cmp	r0, #0
    2328:	d0e6      	beq.n	22f8 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xda>
        m_data = new_data;
    232a:	62e0      	str	r0, [r4, #44]	; 0x2c
    232c:	e7e4      	b.n	22f8 <_ZN9Sensornet13ProcessPacketER12SensorPacket+0xda>
}
    232e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00002330 <_ZN9Sensornet4PollEv>:
void Sensornet::Poll() {
    2330:	b510      	push	{r4, lr}
    2332:	b088      	sub	sp, #32
    2334:	0004      	movs	r4, r0
    if(m_radio.available()) {
    2336:	f7fe fed4 	bl	10e2 <_ZN4RF249availableEv>
    233a:	2800      	cmp	r0, #0
    233c:	d00b      	beq.n	2356 <_ZN9Sensornet4PollEv+0x26>
        m_radio.read(&pkt, 32);
    233e:	2220      	movs	r2, #32
    2340:	4669      	mov	r1, sp
    2342:	0020      	movs	r0, r4
    2344:	f7fe fed2 	bl	10ec <_ZN4RF244readEPvh>
        ProcessPacket(pkt);
    2348:	0020      	movs	r0, r4
    234a:	4669      	mov	r1, sp
    234c:	f7ff ff67 	bl	221e <_ZN9Sensornet13ProcessPacketER12SensorPacket>
        m_radio.flush_rx();
    2350:	0020      	movs	r0, r4
    2352:	f7fe fdf5 	bl	f40 <_ZN4RF248flush_rxEv>
}
    2356:	b008      	add	sp, #32
    2358:	bd10      	pop	{r4, pc}
    235a:	Address 0x0000235a is out of bounds.


0000235c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_>:

void Sensornet::CMDSetName(GSM* gsm, const char* sender, const char* c_args) {
    235c:	b5f0      	push	{r4, r5, r6, r7, lr}
    235e:	b08b      	sub	sp, #44	; 0x2c
    2360:	0004      	movs	r4, r0
    2362:	0017      	movs	r7, r2
    2364:	1e1e      	subs	r6, r3, #0
    2366:	9100      	str	r1, [sp, #0]
    char* id_str = NULL;
    char* name = NULL;
    char* args = NULL;

    if(c_args) {
    2368:	d063      	beq.n	2432 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xd6>
        args = (char*)malloc(strlen(c_args));
    236a:	0018      	movs	r0, r3
    236c:	f000 fb40 	bl	29f0 <strlen>
    2370:	f000 f9d8 	bl	2724 <malloc>
    2374:	1e05      	subs	r5, r0, #0
        if(!args) {
    2376:	d106      	bne.n	2386 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x2a>
            gsm->SendSMS(sender, "malloc failed");
    2378:	0039      	movs	r1, r7
    237a:	4a37      	ldr	r2, [pc, #220]	; (2458 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xfc>)
    237c:	9800      	ldr	r0, [sp, #0]
    237e:	f7fd ff73 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    } else {
        gsm->SendSMS(sender, "Usage: setname <id> <new name>");
    }

    if(args) free(args);
    2382:	b00b      	add	sp, #44	; 0x2c
    2384:	bdf0      	pop	{r4, r5, r6, r7, pc}
        strcpy(args, c_args);
    2386:	0031      	movs	r1, r6
    2388:	f000 fb2a 	bl	29e0 <strcpy>
        id_str = strtok(args, " ");
    238c:	4933      	ldr	r1, [pc, #204]	; (245c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x100>)
    238e:	0028      	movs	r0, r5
    2390:	f000 fb70 	bl	2a74 <strtok>
        name = strtok(NULL, " ");
    2394:	4931      	ldr	r1, [pc, #196]	; (245c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x100>)
        id_str = strtok(args, " ");
    2396:	0006      	movs	r6, r0
        name = strtok(NULL, " ");
    2398:	2000      	movs	r0, #0
    239a:	f000 fb6b 	bl	2a74 <strtok>
    239e:	9001      	str	r0, [sp, #4]
    if(id_str && name && atoi(id_str)) {
    23a0:	2e00      	cmp	r6, #0
    23a2:	d047      	beq.n	2434 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xd8>
    23a4:	2800      	cmp	r0, #0
    23a6:	d045      	beq.n	2434 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xd8>
    23a8:	0030      	movs	r0, r6
    23aa:	f000 f979 	bl	26a0 <atoi>
    23ae:	2800      	cmp	r0, #0
    23b0:	d040      	beq.n	2434 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xd8>
        cmd.id = atoi(id_str);
    23b2:	0030      	movs	r0, r6
    23b4:	f000 f974 	bl	26a0 <atoi>
    23b8:	ab02      	add	r3, sp, #8
    23ba:	b246      	sxtb	r6, r0
    23bc:	701e      	strb	r6, [r3, #0]
        cmd.type = Sensors::TYPE_COMMAND;
    23be:	23ff      	movs	r3, #255	; 0xff
    23c0:	aa02      	add	r2, sp, #8
    23c2:	7253      	strb	r3, [r2, #9]
        cmd.data[0] = Sensors::COMMAND_SET_NAME;
    23c4:	3bfd      	subs	r3, #253	; 0xfd
    23c6:	7293      	strb	r3, [r2, #10]
        strncpy(cmd.name, name, sizeof(cmd.name));
    23c8:	ab02      	add	r3, sp, #8
    23ca:	9901      	ldr	r1, [sp, #4]
    23cc:	2208      	movs	r2, #8
    23ce:	1c58      	adds	r0, r3, #1
    23d0:	f000 fb26 	bl	2a20 <strncpy>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    23d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    23d6:	2900      	cmp	r1, #0
    23d8:	d027      	beq.n	242a <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xce>
    23da:	3101      	adds	r1, #1
    23dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    23de:	0149      	lsls	r1, r1, #5
    23e0:	f000 fa7c 	bl	28dc <realloc>
        if(!new_data) return;
    23e4:	2800      	cmp	r0, #0
    23e6:	d00a      	beq.n	23fe <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xa2>
        *(m_data + m_size) = elem;
    23e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        m_data = new_data;
    23ea:	62e0      	str	r0, [r4, #44]	; 0x2c
        *(m_data + m_size) = elem;
    23ec:	015b      	lsls	r3, r3, #5
    23ee:	18c0      	adds	r0, r0, r3
    23f0:	2220      	movs	r2, #32
    23f2:	a902      	add	r1, sp, #8
    23f4:	f000 f9aa 	bl	274c <memcpy>
        m_size++;
    23f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23fa:	3301      	adds	r3, #1
    23fc:	62a3      	str	r3, [r4, #40]	; 0x28
        return m_data + m_size;
    23fe:	2124      	movs	r1, #36	; 0x24
        for(auto& node : m_nodes) {
    2400:	6b62      	ldr	r2, [r4, #52]	; 0x34
    2402:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2404:	0014      	movs	r4, r2
    2406:	434b      	muls	r3, r1
    2408:	18d3      	adds	r3, r2, r3
    240a:	9301      	str	r3, [sp, #4]
    240c:	9b01      	ldr	r3, [sp, #4]
    240e:	429c      	cmp	r4, r3
    2410:	d01b      	beq.n	244a <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xee>
            if(node.data.id == cmd.id) {
    2412:	2300      	movs	r3, #0
    2414:	56e3      	ldrsb	r3, [r4, r3]
    2416:	42b3      	cmp	r3, r6
    2418:	d105      	bne.n	2426 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xca>
                strncpy(node.data.name, cmd.name, sizeof(cmd.name));
    241a:	ab02      	add	r3, sp, #8
    241c:	2208      	movs	r2, #8
    241e:	1c60      	adds	r0, r4, #1
    2420:	1c59      	adds	r1, r3, #1
    2422:	f000 fafd 	bl	2a20 <strncpy>
        for(auto& node : m_nodes) {
    2426:	3424      	adds	r4, #36	; 0x24
    2428:	e7f0      	b.n	240c <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xb0>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    242a:	2020      	movs	r0, #32
    242c:	f000 f97a 	bl	2724 <malloc>
    2430:	e7d8      	b.n	23e4 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x88>
    char* args = NULL;
    2432:	001d      	movs	r5, r3
        gsm->SendSMS(sender, "Usage: setname <id> <new name>");
    2434:	0039      	movs	r1, r7
    2436:	4a0a      	ldr	r2, [pc, #40]	; (2460 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x104>)
    2438:	9800      	ldr	r0, [sp, #0]
    243a:	f7fd ff15 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
    243e:	2d00      	cmp	r5, #0
    2440:	d09f      	beq.n	2382 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x26>
    2442:	0028      	movs	r0, r5
    2444:	f000 f978 	bl	2738 <free>
    2448:	e79b      	b.n	2382 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x26>
        gsm->SendSMS(sender, "Command queued");
    244a:	0039      	movs	r1, r7
    244c:	4a05      	ldr	r2, [pc, #20]	; (2464 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0x108>)
    244e:	9800      	ldr	r0, [sp, #0]
    2450:	f7fd ff0a 	bl	268 <_ZN3GSM7SendSMSEPKcS1_>
    if(args) free(args);
    2454:	e7f5      	b.n	2442 <_ZN9Sensornet10CMDSetNameEP3GSMPKcS3_+0xe6>
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	000034e6 	.word	0x000034e6
    245c:	00003a54 	.word	0x00003a54
    2460:	000038bf 	.word	0x000038bf
    2464:	000038de 	.word	0x000038de

00002468 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
    2468:	e7fe      	b.n	2468 <Dummy_Handler>
    246a:	Address 0x0000246a is out of bounds.


0000246c <Reset_Handler>:
        if (pSrc != pDest) {
    246c:	4a1c      	ldr	r2, [pc, #112]	; (24e0 <Reset_Handler+0x74>)
    246e:	4b1d      	ldr	r3, [pc, #116]	; (24e4 <Reset_Handler+0x78>)
{
    2470:	b510      	push	{r4, lr}
                for (; pDest < &_edata;) {
    2472:	491d      	ldr	r1, [pc, #116]	; (24e8 <Reset_Handler+0x7c>)
        if (pSrc != pDest) {
    2474:	429a      	cmp	r2, r3
    2476:	d12e      	bne.n	24d6 <Reset_Handler+0x6a>
                *pDest++ = 0;
    2478:	2100      	movs	r1, #0
    247a:	4b1c      	ldr	r3, [pc, #112]	; (24ec <Reset_Handler+0x80>)
        for (pDest = &_bss; pDest < &_ebss;) {
    247c:	4a1c      	ldr	r2, [pc, #112]	; (24f0 <Reset_Handler+0x84>)
    247e:	4293      	cmp	r3, r2
    2480:	d32c      	bcc.n	24dc <Reset_Handler+0x70>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2482:	227f      	movs	r2, #127	; 0x7f
    2484:	4b1b      	ldr	r3, [pc, #108]	; (24f4 <Reset_Handler+0x88>)
        DMAC->QOSCTRL.bit.DQOS = 2;
    2486:	2030      	movs	r0, #48	; 0x30
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2488:	4393      	bics	r3, r2
    248a:	4a1b      	ldr	r2, [pc, #108]	; (24f8 <Reset_Handler+0x8c>)
    248c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    248e:	2202      	movs	r2, #2
    2490:	4b1a      	ldr	r3, [pc, #104]	; (24fc <Reset_Handler+0x90>)
    2492:	625a      	str	r2, [r3, #36]	; 0x24
        DMAC->QOSCTRL.bit.DQOS = 2;
    2494:	4b1a      	ldr	r3, [pc, #104]	; (2500 <Reset_Handler+0x94>)
    2496:	7b99      	ldrb	r1, [r3, #14]
    2498:	4381      	bics	r1, r0
    249a:	0008      	movs	r0, r1
    249c:	2120      	movs	r1, #32
    249e:	4301      	orrs	r1, r0
        DMAC->QOSCTRL.bit.FQOS = 2;
    24a0:	200c      	movs	r0, #12
        DMAC->QOSCTRL.bit.DQOS = 2;
    24a2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    24a4:	7b99      	ldrb	r1, [r3, #14]
    24a6:	4381      	bics	r1, r0
    24a8:	0008      	movs	r0, r1
    24aa:	2108      	movs	r1, #8
    24ac:	4301      	orrs	r1, r0
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    24ae:	2003      	movs	r0, #3
        DMAC->QOSCTRL.bit.FQOS = 2;
    24b0:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    24b2:	7b99      	ldrb	r1, [r3, #14]
    24b4:	4381      	bics	r1, r0
    24b6:	430a      	orrs	r2, r1
    24b8:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    24ba:	2380      	movs	r3, #128	; 0x80
    24bc:	4a11      	ldr	r2, [pc, #68]	; (2504 <Reset_Handler+0x98>)
    24be:	6851      	ldr	r1, [r2, #4]
    24c0:	430b      	orrs	r3, r1
    24c2:	6053      	str	r3, [r2, #4]
        systick_init();
    24c4:	f7ff fba0 	bl	1c08 <systick_init>
        __libc_init_array();
    24c8:	f000 f908 	bl	26dc <__libc_init_array>
        main();
    24cc:	f7ff f9a2 	bl	1814 <main>
        while (1);
    24d0:	e7fe      	b.n	24d0 <Reset_Handler+0x64>
                        *pDest++ = *pSrc++;
    24d2:	ca01      	ldmia	r2!, {r0}
    24d4:	c301      	stmia	r3!, {r0}
                for (; pDest < &_edata;) {
    24d6:	428b      	cmp	r3, r1
    24d8:	d3fb      	bcc.n	24d2 <Reset_Handler+0x66>
    24da:	e7cd      	b.n	2478 <Reset_Handler+0xc>
                *pDest++ = 0;
    24dc:	c302      	stmia	r3!, {r1}
    24de:	e7ce      	b.n	247e <Reset_Handler+0x12>
    24e0:	00003ad4 	.word	0x00003ad4
    24e4:	20000000 	.word	0x20000000
    24e8:	20000250 	.word	0x20000250
    24ec:	20000250 	.word	0x20000250
    24f0:	200006fc 	.word	0x200006fc
    24f4:	00000000 	.word	0x00000000
    24f8:	e000ed00 	.word	0xe000ed00
    24fc:	410070fc 	.word	0x410070fc
    2500:	41004800 	.word	0x41004800
    2504:	41004000 	.word	0x41004000

00002508 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2508:	4a05      	ldr	r2, [pc, #20]	; (2520 <_sbrk+0x18>)
{
    250a:	0003      	movs	r3, r0
	if (heap == NULL) {
    250c:	6811      	ldr	r1, [r2, #0]
    250e:	2900      	cmp	r1, #0
    2510:	d101      	bne.n	2516 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    2512:	4904      	ldr	r1, [pc, #16]	; (2524 <_sbrk+0x1c>)
    2514:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    2516:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2518:	18c3      	adds	r3, r0, r3
    251a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    251c:	4770      	bx	lr
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	200006e0 	.word	0x200006e0
    2524:	200006fc 	.word	0x200006fc

00002528 <__aeabi_atexit>:
    2528:	0003      	movs	r3, r0
    252a:	b510      	push	{r4, lr}
    252c:	0008      	movs	r0, r1
    252e:	0019      	movs	r1, r3
    2530:	f000 f8c6 	bl	26c0 <__cxa_atexit>
    2534:	bd10      	pop	{r4, pc}
    2536:	Address 0x00002536 is out of bounds.


00002538 <__udivsi3>:
    2538:	2200      	movs	r2, #0
    253a:	0843      	lsrs	r3, r0, #1
    253c:	428b      	cmp	r3, r1
    253e:	d374      	bcc.n	262a <__udivsi3+0xf2>
    2540:	0903      	lsrs	r3, r0, #4
    2542:	428b      	cmp	r3, r1
    2544:	d35f      	bcc.n	2606 <__udivsi3+0xce>
    2546:	0a03      	lsrs	r3, r0, #8
    2548:	428b      	cmp	r3, r1
    254a:	d344      	bcc.n	25d6 <__udivsi3+0x9e>
    254c:	0b03      	lsrs	r3, r0, #12
    254e:	428b      	cmp	r3, r1
    2550:	d328      	bcc.n	25a4 <__udivsi3+0x6c>
    2552:	0c03      	lsrs	r3, r0, #16
    2554:	428b      	cmp	r3, r1
    2556:	d30d      	bcc.n	2574 <__udivsi3+0x3c>
    2558:	22ff      	movs	r2, #255	; 0xff
    255a:	0209      	lsls	r1, r1, #8
    255c:	ba12      	rev	r2, r2
    255e:	0c03      	lsrs	r3, r0, #16
    2560:	428b      	cmp	r3, r1
    2562:	d302      	bcc.n	256a <__udivsi3+0x32>
    2564:	1212      	asrs	r2, r2, #8
    2566:	0209      	lsls	r1, r1, #8
    2568:	d065      	beq.n	2636 <__udivsi3+0xfe>
    256a:	0b03      	lsrs	r3, r0, #12
    256c:	428b      	cmp	r3, r1
    256e:	d319      	bcc.n	25a4 <__udivsi3+0x6c>
    2570:	e000      	b.n	2574 <__udivsi3+0x3c>
    2572:	0a09      	lsrs	r1, r1, #8
    2574:	0bc3      	lsrs	r3, r0, #15
    2576:	428b      	cmp	r3, r1
    2578:	d301      	bcc.n	257e <__udivsi3+0x46>
    257a:	03cb      	lsls	r3, r1, #15
    257c:	1ac0      	subs	r0, r0, r3
    257e:	4152      	adcs	r2, r2
    2580:	0b83      	lsrs	r3, r0, #14
    2582:	428b      	cmp	r3, r1
    2584:	d301      	bcc.n	258a <__udivsi3+0x52>
    2586:	038b      	lsls	r3, r1, #14
    2588:	1ac0      	subs	r0, r0, r3
    258a:	4152      	adcs	r2, r2
    258c:	0b43      	lsrs	r3, r0, #13
    258e:	428b      	cmp	r3, r1
    2590:	d301      	bcc.n	2596 <__udivsi3+0x5e>
    2592:	034b      	lsls	r3, r1, #13
    2594:	1ac0      	subs	r0, r0, r3
    2596:	4152      	adcs	r2, r2
    2598:	0b03      	lsrs	r3, r0, #12
    259a:	428b      	cmp	r3, r1
    259c:	d301      	bcc.n	25a2 <__udivsi3+0x6a>
    259e:	030b      	lsls	r3, r1, #12
    25a0:	1ac0      	subs	r0, r0, r3
    25a2:	4152      	adcs	r2, r2
    25a4:	0ac3      	lsrs	r3, r0, #11
    25a6:	428b      	cmp	r3, r1
    25a8:	d301      	bcc.n	25ae <__udivsi3+0x76>
    25aa:	02cb      	lsls	r3, r1, #11
    25ac:	1ac0      	subs	r0, r0, r3
    25ae:	4152      	adcs	r2, r2
    25b0:	0a83      	lsrs	r3, r0, #10
    25b2:	428b      	cmp	r3, r1
    25b4:	d301      	bcc.n	25ba <__udivsi3+0x82>
    25b6:	028b      	lsls	r3, r1, #10
    25b8:	1ac0      	subs	r0, r0, r3
    25ba:	4152      	adcs	r2, r2
    25bc:	0a43      	lsrs	r3, r0, #9
    25be:	428b      	cmp	r3, r1
    25c0:	d301      	bcc.n	25c6 <__udivsi3+0x8e>
    25c2:	024b      	lsls	r3, r1, #9
    25c4:	1ac0      	subs	r0, r0, r3
    25c6:	4152      	adcs	r2, r2
    25c8:	0a03      	lsrs	r3, r0, #8
    25ca:	428b      	cmp	r3, r1
    25cc:	d301      	bcc.n	25d2 <__udivsi3+0x9a>
    25ce:	020b      	lsls	r3, r1, #8
    25d0:	1ac0      	subs	r0, r0, r3
    25d2:	4152      	adcs	r2, r2
    25d4:	d2cd      	bcs.n	2572 <__udivsi3+0x3a>
    25d6:	09c3      	lsrs	r3, r0, #7
    25d8:	428b      	cmp	r3, r1
    25da:	d301      	bcc.n	25e0 <__udivsi3+0xa8>
    25dc:	01cb      	lsls	r3, r1, #7
    25de:	1ac0      	subs	r0, r0, r3
    25e0:	4152      	adcs	r2, r2
    25e2:	0983      	lsrs	r3, r0, #6
    25e4:	428b      	cmp	r3, r1
    25e6:	d301      	bcc.n	25ec <__udivsi3+0xb4>
    25e8:	018b      	lsls	r3, r1, #6
    25ea:	1ac0      	subs	r0, r0, r3
    25ec:	4152      	adcs	r2, r2
    25ee:	0943      	lsrs	r3, r0, #5
    25f0:	428b      	cmp	r3, r1
    25f2:	d301      	bcc.n	25f8 <__udivsi3+0xc0>
    25f4:	014b      	lsls	r3, r1, #5
    25f6:	1ac0      	subs	r0, r0, r3
    25f8:	4152      	adcs	r2, r2
    25fa:	0903      	lsrs	r3, r0, #4
    25fc:	428b      	cmp	r3, r1
    25fe:	d301      	bcc.n	2604 <__udivsi3+0xcc>
    2600:	010b      	lsls	r3, r1, #4
    2602:	1ac0      	subs	r0, r0, r3
    2604:	4152      	adcs	r2, r2
    2606:	08c3      	lsrs	r3, r0, #3
    2608:	428b      	cmp	r3, r1
    260a:	d301      	bcc.n	2610 <__udivsi3+0xd8>
    260c:	00cb      	lsls	r3, r1, #3
    260e:	1ac0      	subs	r0, r0, r3
    2610:	4152      	adcs	r2, r2
    2612:	0883      	lsrs	r3, r0, #2
    2614:	428b      	cmp	r3, r1
    2616:	d301      	bcc.n	261c <__udivsi3+0xe4>
    2618:	008b      	lsls	r3, r1, #2
    261a:	1ac0      	subs	r0, r0, r3
    261c:	4152      	adcs	r2, r2
    261e:	0843      	lsrs	r3, r0, #1
    2620:	428b      	cmp	r3, r1
    2622:	d301      	bcc.n	2628 <__udivsi3+0xf0>
    2624:	004b      	lsls	r3, r1, #1
    2626:	1ac0      	subs	r0, r0, r3
    2628:	4152      	adcs	r2, r2
    262a:	1a41      	subs	r1, r0, r1
    262c:	d200      	bcs.n	2630 <__udivsi3+0xf8>
    262e:	4601      	mov	r1, r0
    2630:	4152      	adcs	r2, r2
    2632:	4610      	mov	r0, r2
    2634:	4770      	bx	lr
    2636:	e7ff      	b.n	2638 <__udivsi3+0x100>
    2638:	b501      	push	{r0, lr}
    263a:	2000      	movs	r0, #0
    263c:	f000 f806 	bl	264c <__aeabi_idiv0>
    2640:	bd02      	pop	{r1, pc}
    2642:	46c0      	nop			; (mov r8, r8)

00002644 <__aeabi_uidivmod>:
    2644:	2900      	cmp	r1, #0
    2646:	d0f7      	beq.n	2638 <__udivsi3+0x100>
    2648:	e776      	b.n	2538 <__udivsi3>
    264a:	4770      	bx	lr

0000264c <__aeabi_idiv0>:
    264c:	4770      	bx	lr
    264e:	46c0      	nop			; (mov r8, r8)

00002650 <__aeabi_lmul>:
    2650:	b5f0      	push	{r4, r5, r6, r7, lr}
    2652:	0415      	lsls	r5, r2, #16
    2654:	0c2d      	lsrs	r5, r5, #16
    2656:	000f      	movs	r7, r1
    2658:	0001      	movs	r1, r0
    265a:	002e      	movs	r6, r5
    265c:	46c6      	mov	lr, r8
    265e:	4684      	mov	ip, r0
    2660:	0400      	lsls	r0, r0, #16
    2662:	0c14      	lsrs	r4, r2, #16
    2664:	0c00      	lsrs	r0, r0, #16
    2666:	0c09      	lsrs	r1, r1, #16
    2668:	4346      	muls	r6, r0
    266a:	434d      	muls	r5, r1
    266c:	4360      	muls	r0, r4
    266e:	4361      	muls	r1, r4
    2670:	1940      	adds	r0, r0, r5
    2672:	0c34      	lsrs	r4, r6, #16
    2674:	1824      	adds	r4, r4, r0
    2676:	b500      	push	{lr}
    2678:	42a5      	cmp	r5, r4
    267a:	d903      	bls.n	2684 <__aeabi_lmul+0x34>
    267c:	2080      	movs	r0, #128	; 0x80
    267e:	0240      	lsls	r0, r0, #9
    2680:	4680      	mov	r8, r0
    2682:	4441      	add	r1, r8
    2684:	0c25      	lsrs	r5, r4, #16
    2686:	186d      	adds	r5, r5, r1
    2688:	4661      	mov	r1, ip
    268a:	4359      	muls	r1, r3
    268c:	437a      	muls	r2, r7
    268e:	0430      	lsls	r0, r6, #16
    2690:	1949      	adds	r1, r1, r5
    2692:	0424      	lsls	r4, r4, #16
    2694:	0c00      	lsrs	r0, r0, #16
    2696:	1820      	adds	r0, r4, r0
    2698:	1889      	adds	r1, r1, r2
    269a:	bc04      	pop	{r2}
    269c:	4690      	mov	r8, r2
    269e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000026a0 <atoi>:
    26a0:	b510      	push	{r4, lr}
    26a2:	220a      	movs	r2, #10
    26a4:	2100      	movs	r1, #0
    26a6:	f000 fabf 	bl	2c28 <strtol>
    26aa:	bd10      	pop	{r4, pc}

000026ac <calloc>:
    26ac:	b510      	push	{r4, lr}
    26ae:	4b03      	ldr	r3, [pc, #12]	; (26bc <calloc+0x10>)
    26b0:	000a      	movs	r2, r1
    26b2:	0001      	movs	r1, r0
    26b4:	6818      	ldr	r0, [r3, #0]
    26b6:	f000 f85a 	bl	276e <_calloc_r>
    26ba:	bd10      	pop	{r4, pc}
    26bc:	200001ec 	.word	0x200001ec

000026c0 <__cxa_atexit>:
    26c0:	b510      	push	{r4, lr}
    26c2:	0004      	movs	r4, r0
    26c4:	4804      	ldr	r0, [pc, #16]	; (26d8 <__cxa_atexit+0x18>)
    26c6:	0013      	movs	r3, r2
    26c8:	2800      	cmp	r0, #0
    26ca:	d004      	beq.n	26d6 <__cxa_atexit+0x16>
    26cc:	000a      	movs	r2, r1
    26ce:	2002      	movs	r0, #2
    26d0:	0021      	movs	r1, r4
    26d2:	e000      	b.n	26d6 <__cxa_atexit+0x16>
    26d4:	bf00      	nop
    26d6:	bd10      	pop	{r4, pc}
    26d8:	00000000 	.word	0x00000000

000026dc <__libc_init_array>:
    26dc:	b570      	push	{r4, r5, r6, lr}
    26de:	2600      	movs	r6, #0
    26e0:	4d0c      	ldr	r5, [pc, #48]	; (2714 <__libc_init_array+0x38>)
    26e2:	4c0d      	ldr	r4, [pc, #52]	; (2718 <__libc_init_array+0x3c>)
    26e4:	1b64      	subs	r4, r4, r5
    26e6:	10a4      	asrs	r4, r4, #2
    26e8:	42a6      	cmp	r6, r4
    26ea:	d109      	bne.n	2700 <__libc_init_array+0x24>
    26ec:	2600      	movs	r6, #0
    26ee:	f001 f9c9 	bl	3a84 <_init>
    26f2:	4d0a      	ldr	r5, [pc, #40]	; (271c <__libc_init_array+0x40>)
    26f4:	4c0a      	ldr	r4, [pc, #40]	; (2720 <__libc_init_array+0x44>)
    26f6:	1b64      	subs	r4, r4, r5
    26f8:	10a4      	asrs	r4, r4, #2
    26fa:	42a6      	cmp	r6, r4
    26fc:	d105      	bne.n	270a <__libc_init_array+0x2e>
    26fe:	bd70      	pop	{r4, r5, r6, pc}
    2700:	00b3      	lsls	r3, r6, #2
    2702:	58eb      	ldr	r3, [r5, r3]
    2704:	4798      	blx	r3
    2706:	3601      	adds	r6, #1
    2708:	e7ee      	b.n	26e8 <__libc_init_array+0xc>
    270a:	00b3      	lsls	r3, r6, #2
    270c:	58eb      	ldr	r3, [r5, r3]
    270e:	4798      	blx	r3
    2710:	3601      	adds	r6, #1
    2712:	e7f2      	b.n	26fa <__libc_init_array+0x1e>
    2714:	00003a90 	.word	0x00003a90
    2718:	00003a90 	.word	0x00003a90
    271c:	00003a90 	.word	0x00003a90
    2720:	00003aa0 	.word	0x00003aa0

00002724 <malloc>:
    2724:	b510      	push	{r4, lr}
    2726:	4b03      	ldr	r3, [pc, #12]	; (2734 <malloc+0x10>)
    2728:	0001      	movs	r1, r0
    272a:	6818      	ldr	r0, [r3, #0]
    272c:	f000 f878 	bl	2820 <_malloc_r>
    2730:	bd10      	pop	{r4, pc}
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	200001ec 	.word	0x200001ec

00002738 <free>:
    2738:	b510      	push	{r4, lr}
    273a:	4b03      	ldr	r3, [pc, #12]	; (2748 <free+0x10>)
    273c:	0001      	movs	r1, r0
    273e:	6818      	ldr	r0, [r3, #0]
    2740:	f000 f824 	bl	278c <_free_r>
    2744:	bd10      	pop	{r4, pc}
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	200001ec 	.word	0x200001ec

0000274c <memcpy>:
    274c:	2300      	movs	r3, #0
    274e:	b510      	push	{r4, lr}
    2750:	429a      	cmp	r2, r3
    2752:	d100      	bne.n	2756 <memcpy+0xa>
    2754:	bd10      	pop	{r4, pc}
    2756:	5ccc      	ldrb	r4, [r1, r3]
    2758:	54c4      	strb	r4, [r0, r3]
    275a:	3301      	adds	r3, #1
    275c:	e7f8      	b.n	2750 <memcpy+0x4>

0000275e <memset>:
    275e:	0003      	movs	r3, r0
    2760:	1882      	adds	r2, r0, r2
    2762:	4293      	cmp	r3, r2
    2764:	d100      	bne.n	2768 <memset+0xa>
    2766:	4770      	bx	lr
    2768:	7019      	strb	r1, [r3, #0]
    276a:	3301      	adds	r3, #1
    276c:	e7f9      	b.n	2762 <memset+0x4>

0000276e <_calloc_r>:
    276e:	434a      	muls	r2, r1
    2770:	b570      	push	{r4, r5, r6, lr}
    2772:	0011      	movs	r1, r2
    2774:	0015      	movs	r5, r2
    2776:	f000 f853 	bl	2820 <_malloc_r>
    277a:	1e04      	subs	r4, r0, #0
    277c:	d003      	beq.n	2786 <_calloc_r+0x18>
    277e:	002a      	movs	r2, r5
    2780:	2100      	movs	r1, #0
    2782:	f7ff ffec 	bl	275e <memset>
    2786:	0020      	movs	r0, r4
    2788:	bd70      	pop	{r4, r5, r6, pc}
    278a:	Address 0x0000278a is out of bounds.


0000278c <_free_r>:
    278c:	b570      	push	{r4, r5, r6, lr}
    278e:	0005      	movs	r5, r0
    2790:	2900      	cmp	r1, #0
    2792:	d010      	beq.n	27b6 <_free_r+0x2a>
    2794:	1f0c      	subs	r4, r1, #4
    2796:	6823      	ldr	r3, [r4, #0]
    2798:	2b00      	cmp	r3, #0
    279a:	da00      	bge.n	279e <_free_r+0x12>
    279c:	18e4      	adds	r4, r4, r3
    279e:	0028      	movs	r0, r5
    27a0:	f000 fa88 	bl	2cb4 <__malloc_lock>
    27a4:	4a1d      	ldr	r2, [pc, #116]	; (281c <_free_r+0x90>)
    27a6:	6813      	ldr	r3, [r2, #0]
    27a8:	2b00      	cmp	r3, #0
    27aa:	d105      	bne.n	27b8 <_free_r+0x2c>
    27ac:	6063      	str	r3, [r4, #4]
    27ae:	6014      	str	r4, [r2, #0]
    27b0:	0028      	movs	r0, r5
    27b2:	f000 fa87 	bl	2cc4 <__malloc_unlock>
    27b6:	bd70      	pop	{r4, r5, r6, pc}
    27b8:	42a3      	cmp	r3, r4
    27ba:	d908      	bls.n	27ce <_free_r+0x42>
    27bc:	6821      	ldr	r1, [r4, #0]
    27be:	1860      	adds	r0, r4, r1
    27c0:	4283      	cmp	r3, r0
    27c2:	d1f3      	bne.n	27ac <_free_r+0x20>
    27c4:	6818      	ldr	r0, [r3, #0]
    27c6:	685b      	ldr	r3, [r3, #4]
    27c8:	1841      	adds	r1, r0, r1
    27ca:	6021      	str	r1, [r4, #0]
    27cc:	e7ee      	b.n	27ac <_free_r+0x20>
    27ce:	001a      	movs	r2, r3
    27d0:	685b      	ldr	r3, [r3, #4]
    27d2:	2b00      	cmp	r3, #0
    27d4:	d001      	beq.n	27da <_free_r+0x4e>
    27d6:	42a3      	cmp	r3, r4
    27d8:	d9f9      	bls.n	27ce <_free_r+0x42>
    27da:	6811      	ldr	r1, [r2, #0]
    27dc:	1850      	adds	r0, r2, r1
    27de:	42a0      	cmp	r0, r4
    27e0:	d10b      	bne.n	27fa <_free_r+0x6e>
    27e2:	6820      	ldr	r0, [r4, #0]
    27e4:	1809      	adds	r1, r1, r0
    27e6:	1850      	adds	r0, r2, r1
    27e8:	6011      	str	r1, [r2, #0]
    27ea:	4283      	cmp	r3, r0
    27ec:	d1e0      	bne.n	27b0 <_free_r+0x24>
    27ee:	6818      	ldr	r0, [r3, #0]
    27f0:	685b      	ldr	r3, [r3, #4]
    27f2:	1841      	adds	r1, r0, r1
    27f4:	6011      	str	r1, [r2, #0]
    27f6:	6053      	str	r3, [r2, #4]
    27f8:	e7da      	b.n	27b0 <_free_r+0x24>
    27fa:	42a0      	cmp	r0, r4
    27fc:	d902      	bls.n	2804 <_free_r+0x78>
    27fe:	230c      	movs	r3, #12
    2800:	602b      	str	r3, [r5, #0]
    2802:	e7d5      	b.n	27b0 <_free_r+0x24>
    2804:	6821      	ldr	r1, [r4, #0]
    2806:	1860      	adds	r0, r4, r1
    2808:	4283      	cmp	r3, r0
    280a:	d103      	bne.n	2814 <_free_r+0x88>
    280c:	6818      	ldr	r0, [r3, #0]
    280e:	685b      	ldr	r3, [r3, #4]
    2810:	1841      	adds	r1, r0, r1
    2812:	6021      	str	r1, [r4, #0]
    2814:	6063      	str	r3, [r4, #4]
    2816:	6054      	str	r4, [r2, #4]
    2818:	e7ca      	b.n	27b0 <_free_r+0x24>
    281a:	46c0      	nop			; (mov r8, r8)
    281c:	200006e4 	.word	0x200006e4

00002820 <_malloc_r>:
    2820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2822:	2303      	movs	r3, #3
    2824:	1ccd      	adds	r5, r1, #3
    2826:	439d      	bics	r5, r3
    2828:	3508      	adds	r5, #8
    282a:	0006      	movs	r6, r0
    282c:	2d0c      	cmp	r5, #12
    282e:	d21f      	bcs.n	2870 <_malloc_r+0x50>
    2830:	250c      	movs	r5, #12
    2832:	42a9      	cmp	r1, r5
    2834:	d81e      	bhi.n	2874 <_malloc_r+0x54>
    2836:	0030      	movs	r0, r6
    2838:	f000 fa3c 	bl	2cb4 <__malloc_lock>
    283c:	4925      	ldr	r1, [pc, #148]	; (28d4 <_malloc_r+0xb4>)
    283e:	680a      	ldr	r2, [r1, #0]
    2840:	0014      	movs	r4, r2
    2842:	2c00      	cmp	r4, #0
    2844:	d11a      	bne.n	287c <_malloc_r+0x5c>
    2846:	4f24      	ldr	r7, [pc, #144]	; (28d8 <_malloc_r+0xb8>)
    2848:	683b      	ldr	r3, [r7, #0]
    284a:	2b00      	cmp	r3, #0
    284c:	d104      	bne.n	2858 <_malloc_r+0x38>
    284e:	0021      	movs	r1, r4
    2850:	0030      	movs	r0, r6
    2852:	f000 f84d 	bl	28f0 <_sbrk_r>
    2856:	6038      	str	r0, [r7, #0]
    2858:	0029      	movs	r1, r5
    285a:	0030      	movs	r0, r6
    285c:	f000 f848 	bl	28f0 <_sbrk_r>
    2860:	1c43      	adds	r3, r0, #1
    2862:	d12b      	bne.n	28bc <_malloc_r+0x9c>
    2864:	230c      	movs	r3, #12
    2866:	0030      	movs	r0, r6
    2868:	6033      	str	r3, [r6, #0]
    286a:	f000 fa2b 	bl	2cc4 <__malloc_unlock>
    286e:	e003      	b.n	2878 <_malloc_r+0x58>
    2870:	2d00      	cmp	r5, #0
    2872:	dade      	bge.n	2832 <_malloc_r+0x12>
    2874:	230c      	movs	r3, #12
    2876:	6033      	str	r3, [r6, #0]
    2878:	2000      	movs	r0, #0
    287a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    287c:	6823      	ldr	r3, [r4, #0]
    287e:	1b5b      	subs	r3, r3, r5
    2880:	d419      	bmi.n	28b6 <_malloc_r+0x96>
    2882:	2b0b      	cmp	r3, #11
    2884:	d903      	bls.n	288e <_malloc_r+0x6e>
    2886:	6023      	str	r3, [r4, #0]
    2888:	18e4      	adds	r4, r4, r3
    288a:	6025      	str	r5, [r4, #0]
    288c:	e003      	b.n	2896 <_malloc_r+0x76>
    288e:	6863      	ldr	r3, [r4, #4]
    2890:	42a2      	cmp	r2, r4
    2892:	d10e      	bne.n	28b2 <_malloc_r+0x92>
    2894:	600b      	str	r3, [r1, #0]
    2896:	0030      	movs	r0, r6
    2898:	f000 fa14 	bl	2cc4 <__malloc_unlock>
    289c:	0020      	movs	r0, r4
    289e:	2207      	movs	r2, #7
    28a0:	300b      	adds	r0, #11
    28a2:	1d23      	adds	r3, r4, #4
    28a4:	4390      	bics	r0, r2
    28a6:	1ac2      	subs	r2, r0, r3
    28a8:	4298      	cmp	r0, r3
    28aa:	d0e6      	beq.n	287a <_malloc_r+0x5a>
    28ac:	1a1b      	subs	r3, r3, r0
    28ae:	50a3      	str	r3, [r4, r2]
    28b0:	e7e3      	b.n	287a <_malloc_r+0x5a>
    28b2:	6053      	str	r3, [r2, #4]
    28b4:	e7ef      	b.n	2896 <_malloc_r+0x76>
    28b6:	0022      	movs	r2, r4
    28b8:	6864      	ldr	r4, [r4, #4]
    28ba:	e7c2      	b.n	2842 <_malloc_r+0x22>
    28bc:	2303      	movs	r3, #3
    28be:	1cc4      	adds	r4, r0, #3
    28c0:	439c      	bics	r4, r3
    28c2:	42a0      	cmp	r0, r4
    28c4:	d0e1      	beq.n	288a <_malloc_r+0x6a>
    28c6:	1a21      	subs	r1, r4, r0
    28c8:	0030      	movs	r0, r6
    28ca:	f000 f811 	bl	28f0 <_sbrk_r>
    28ce:	1c43      	adds	r3, r0, #1
    28d0:	d1db      	bne.n	288a <_malloc_r+0x6a>
    28d2:	e7c7      	b.n	2864 <_malloc_r+0x44>
    28d4:	200006e4 	.word	0x200006e4
    28d8:	200006e8 	.word	0x200006e8

000028dc <realloc>:
    28dc:	b510      	push	{r4, lr}
    28de:	4b03      	ldr	r3, [pc, #12]	; (28ec <realloc+0x10>)
    28e0:	000a      	movs	r2, r1
    28e2:	0001      	movs	r1, r0
    28e4:	6818      	ldr	r0, [r3, #0]
    28e6:	f000 f9f5 	bl	2cd4 <_realloc_r>
    28ea:	bd10      	pop	{r4, pc}
    28ec:	200001ec 	.word	0x200001ec

000028f0 <_sbrk_r>:
    28f0:	2300      	movs	r3, #0
    28f2:	b570      	push	{r4, r5, r6, lr}
    28f4:	4d06      	ldr	r5, [pc, #24]	; (2910 <_sbrk_r+0x20>)
    28f6:	0004      	movs	r4, r0
    28f8:	0008      	movs	r0, r1
    28fa:	602b      	str	r3, [r5, #0]
    28fc:	f7ff fe04 	bl	2508 <_sbrk>
    2900:	1c43      	adds	r3, r0, #1
    2902:	d103      	bne.n	290c <_sbrk_r+0x1c>
    2904:	682b      	ldr	r3, [r5, #0]
    2906:	2b00      	cmp	r3, #0
    2908:	d000      	beq.n	290c <_sbrk_r+0x1c>
    290a:	6023      	str	r3, [r4, #0]
    290c:	bd70      	pop	{r4, r5, r6, pc}
    290e:	46c0      	nop			; (mov r8, r8)
    2910:	200006f8 	.word	0x200006f8

00002914 <sniprintf>:
    2914:	b40c      	push	{r2, r3}
    2916:	b530      	push	{r4, r5, lr}
    2918:	4b17      	ldr	r3, [pc, #92]	; (2978 <sniprintf+0x64>)
    291a:	000c      	movs	r4, r1
    291c:	681d      	ldr	r5, [r3, #0]
    291e:	b09d      	sub	sp, #116	; 0x74
    2920:	2900      	cmp	r1, #0
    2922:	da08      	bge.n	2936 <sniprintf+0x22>
    2924:	238b      	movs	r3, #139	; 0x8b
    2926:	2001      	movs	r0, #1
    2928:	602b      	str	r3, [r5, #0]
    292a:	4240      	negs	r0, r0
    292c:	b01d      	add	sp, #116	; 0x74
    292e:	bc30      	pop	{r4, r5}
    2930:	bc08      	pop	{r3}
    2932:	b002      	add	sp, #8
    2934:	4718      	bx	r3
    2936:	2382      	movs	r3, #130	; 0x82
    2938:	466a      	mov	r2, sp
    293a:	009b      	lsls	r3, r3, #2
    293c:	8293      	strh	r3, [r2, #20]
    293e:	2300      	movs	r3, #0
    2940:	9002      	str	r0, [sp, #8]
    2942:	9006      	str	r0, [sp, #24]
    2944:	4299      	cmp	r1, r3
    2946:	d000      	beq.n	294a <sniprintf+0x36>
    2948:	1e4b      	subs	r3, r1, #1
    294a:	9304      	str	r3, [sp, #16]
    294c:	9307      	str	r3, [sp, #28]
    294e:	2301      	movs	r3, #1
    2950:	466a      	mov	r2, sp
    2952:	425b      	negs	r3, r3
    2954:	82d3      	strh	r3, [r2, #22]
    2956:	0028      	movs	r0, r5
    2958:	ab21      	add	r3, sp, #132	; 0x84
    295a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    295c:	a902      	add	r1, sp, #8
    295e:	9301      	str	r3, [sp, #4]
    2960:	f000 fa40 	bl	2de4 <_svfiprintf_r>
    2964:	1c43      	adds	r3, r0, #1
    2966:	da01      	bge.n	296c <sniprintf+0x58>
    2968:	238b      	movs	r3, #139	; 0x8b
    296a:	602b      	str	r3, [r5, #0]
    296c:	2c00      	cmp	r4, #0
    296e:	d0dd      	beq.n	292c <sniprintf+0x18>
    2970:	2300      	movs	r3, #0
    2972:	9a02      	ldr	r2, [sp, #8]
    2974:	7013      	strb	r3, [r2, #0]
    2976:	e7d9      	b.n	292c <sniprintf+0x18>
    2978:	200001ec 	.word	0x200001ec

0000297c <strcasecmp>:
    297c:	b5f0      	push	{r4, r5, r6, r7, lr}
    297e:	0005      	movs	r5, r0
    2980:	2400      	movs	r4, #0
    2982:	2703      	movs	r7, #3
    2984:	4e09      	ldr	r6, [pc, #36]	; (29ac <strcasecmp+0x30>)
    2986:	5d2a      	ldrb	r2, [r5, r4]
    2988:	5cb3      	ldrb	r3, [r6, r2]
    298a:	403b      	ands	r3, r7
    298c:	2b01      	cmp	r3, #1
    298e:	d100      	bne.n	2992 <strcasecmp+0x16>
    2990:	3220      	adds	r2, #32
    2992:	5d0b      	ldrb	r3, [r1, r4]
    2994:	5cf0      	ldrb	r0, [r6, r3]
    2996:	4038      	ands	r0, r7
    2998:	2801      	cmp	r0, #1
    299a:	d100      	bne.n	299e <strcasecmp+0x22>
    299c:	3320      	adds	r3, #32
    299e:	1ad0      	subs	r0, r2, r3
    29a0:	429a      	cmp	r2, r3
    29a2:	d102      	bne.n	29aa <strcasecmp+0x2e>
    29a4:	3401      	adds	r4, #1
    29a6:	2b00      	cmp	r3, #0
    29a8:	d1ed      	bne.n	2986 <strcasecmp+0xa>
    29aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ac:	000038ee 	.word	0x000038ee

000029b0 <strchr>:
    29b0:	b2c9      	uxtb	r1, r1
    29b2:	7803      	ldrb	r3, [r0, #0]
    29b4:	2b00      	cmp	r3, #0
    29b6:	d004      	beq.n	29c2 <strchr+0x12>
    29b8:	428b      	cmp	r3, r1
    29ba:	d100      	bne.n	29be <strchr+0xe>
    29bc:	4770      	bx	lr
    29be:	3001      	adds	r0, #1
    29c0:	e7f7      	b.n	29b2 <strchr+0x2>
    29c2:	424b      	negs	r3, r1
    29c4:	4159      	adcs	r1, r3
    29c6:	4249      	negs	r1, r1
    29c8:	4008      	ands	r0, r1
    29ca:	e7f7      	b.n	29bc <strchr+0xc>

000029cc <strcmp>:
    29cc:	7802      	ldrb	r2, [r0, #0]
    29ce:	780b      	ldrb	r3, [r1, #0]
    29d0:	2a00      	cmp	r2, #0
    29d2:	d003      	beq.n	29dc <strcmp+0x10>
    29d4:	3001      	adds	r0, #1
    29d6:	3101      	adds	r1, #1
    29d8:	429a      	cmp	r2, r3
    29da:	d0f7      	beq.n	29cc <strcmp>
    29dc:	1ad0      	subs	r0, r2, r3
    29de:	4770      	bx	lr

000029e0 <strcpy>:
    29e0:	0003      	movs	r3, r0
    29e2:	780a      	ldrb	r2, [r1, #0]
    29e4:	3101      	adds	r1, #1
    29e6:	701a      	strb	r2, [r3, #0]
    29e8:	3301      	adds	r3, #1
    29ea:	2a00      	cmp	r2, #0
    29ec:	d1f9      	bne.n	29e2 <strcpy+0x2>
    29ee:	4770      	bx	lr

000029f0 <strlen>:
    29f0:	2300      	movs	r3, #0
    29f2:	5cc2      	ldrb	r2, [r0, r3]
    29f4:	3301      	adds	r3, #1
    29f6:	2a00      	cmp	r2, #0
    29f8:	d1fb      	bne.n	29f2 <strlen+0x2>
    29fa:	1e58      	subs	r0, r3, #1
    29fc:	4770      	bx	lr

000029fe <strncmp>:
    29fe:	b530      	push	{r4, r5, lr}
    2a00:	0005      	movs	r5, r0
    2a02:	1e10      	subs	r0, r2, #0
    2a04:	d00b      	beq.n	2a1e <strncmp+0x20>
    2a06:	2400      	movs	r4, #0
    2a08:	3a01      	subs	r2, #1
    2a0a:	5d2b      	ldrb	r3, [r5, r4]
    2a0c:	5d08      	ldrb	r0, [r1, r4]
    2a0e:	4283      	cmp	r3, r0
    2a10:	d104      	bne.n	2a1c <strncmp+0x1e>
    2a12:	4294      	cmp	r4, r2
    2a14:	d002      	beq.n	2a1c <strncmp+0x1e>
    2a16:	3401      	adds	r4, #1
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d1f6      	bne.n	2a0a <strncmp+0xc>
    2a1c:	1a18      	subs	r0, r3, r0
    2a1e:	bd30      	pop	{r4, r5, pc}

00002a20 <strncpy>:
    2a20:	0003      	movs	r3, r0
    2a22:	b530      	push	{r4, r5, lr}
    2a24:	001d      	movs	r5, r3
    2a26:	2a00      	cmp	r2, #0
    2a28:	d006      	beq.n	2a38 <strncpy+0x18>
    2a2a:	780c      	ldrb	r4, [r1, #0]
    2a2c:	3a01      	subs	r2, #1
    2a2e:	3301      	adds	r3, #1
    2a30:	702c      	strb	r4, [r5, #0]
    2a32:	3101      	adds	r1, #1
    2a34:	2c00      	cmp	r4, #0
    2a36:	d1f5      	bne.n	2a24 <strncpy+0x4>
    2a38:	2100      	movs	r1, #0
    2a3a:	189a      	adds	r2, r3, r2
    2a3c:	4293      	cmp	r3, r2
    2a3e:	d100      	bne.n	2a42 <strncpy+0x22>
    2a40:	bd30      	pop	{r4, r5, pc}
    2a42:	7019      	strb	r1, [r3, #0]
    2a44:	3301      	adds	r3, #1
    2a46:	e7f9      	b.n	2a3c <strncpy+0x1c>

00002a48 <strstr>:
    2a48:	780a      	ldrb	r2, [r1, #0]
    2a4a:	b530      	push	{r4, r5, lr}
    2a4c:	2a00      	cmp	r2, #0
    2a4e:	d10c      	bne.n	2a6a <strstr+0x22>
    2a50:	bd30      	pop	{r4, r5, pc}
    2a52:	429a      	cmp	r2, r3
    2a54:	d108      	bne.n	2a68 <strstr+0x20>
    2a56:	2301      	movs	r3, #1
    2a58:	5ccc      	ldrb	r4, [r1, r3]
    2a5a:	2c00      	cmp	r4, #0
    2a5c:	d0f8      	beq.n	2a50 <strstr+0x8>
    2a5e:	5cc5      	ldrb	r5, [r0, r3]
    2a60:	42a5      	cmp	r5, r4
    2a62:	d101      	bne.n	2a68 <strstr+0x20>
    2a64:	3301      	adds	r3, #1
    2a66:	e7f7      	b.n	2a58 <strstr+0x10>
    2a68:	3001      	adds	r0, #1
    2a6a:	7803      	ldrb	r3, [r0, #0]
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d1f0      	bne.n	2a52 <strstr+0xa>
    2a70:	0018      	movs	r0, r3
    2a72:	e7ed      	b.n	2a50 <strstr+0x8>

00002a74 <strtok>:
    2a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a76:	4b12      	ldr	r3, [pc, #72]	; (2ac0 <strtok+0x4c>)
    2a78:	0005      	movs	r5, r0
    2a7a:	681f      	ldr	r7, [r3, #0]
    2a7c:	000e      	movs	r6, r1
    2a7e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
    2a80:	2c00      	cmp	r4, #0
    2a82:	d116      	bne.n	2ab2 <strtok+0x3e>
    2a84:	2050      	movs	r0, #80	; 0x50
    2a86:	f7ff fe4d 	bl	2724 <malloc>
    2a8a:	65b8      	str	r0, [r7, #88]	; 0x58
    2a8c:	6004      	str	r4, [r0, #0]
    2a8e:	6044      	str	r4, [r0, #4]
    2a90:	6084      	str	r4, [r0, #8]
    2a92:	60c4      	str	r4, [r0, #12]
    2a94:	6104      	str	r4, [r0, #16]
    2a96:	6144      	str	r4, [r0, #20]
    2a98:	6184      	str	r4, [r0, #24]
    2a9a:	6284      	str	r4, [r0, #40]	; 0x28
    2a9c:	62c4      	str	r4, [r0, #44]	; 0x2c
    2a9e:	6304      	str	r4, [r0, #48]	; 0x30
    2aa0:	6344      	str	r4, [r0, #52]	; 0x34
    2aa2:	6384      	str	r4, [r0, #56]	; 0x38
    2aa4:	63c4      	str	r4, [r0, #60]	; 0x3c
    2aa6:	6404      	str	r4, [r0, #64]	; 0x40
    2aa8:	6444      	str	r4, [r0, #68]	; 0x44
    2aaa:	6484      	str	r4, [r0, #72]	; 0x48
    2aac:	64c4      	str	r4, [r0, #76]	; 0x4c
    2aae:	7704      	strb	r4, [r0, #28]
    2ab0:	6244      	str	r4, [r0, #36]	; 0x24
    2ab2:	0031      	movs	r1, r6
    2ab4:	0028      	movs	r0, r5
    2ab6:	6dba      	ldr	r2, [r7, #88]	; 0x58
    2ab8:	2301      	movs	r3, #1
    2aba:	f000 f803 	bl	2ac4 <__strtok_r>
    2abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ac0:	200001ec 	.word	0x200001ec

00002ac4 <__strtok_r>:
    2ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ac6:	2800      	cmp	r0, #0
    2ac8:	d102      	bne.n	2ad0 <__strtok_r+0xc>
    2aca:	6810      	ldr	r0, [r2, #0]
    2acc:	2800      	cmp	r0, #0
    2ace:	d013      	beq.n	2af8 <__strtok_r+0x34>
    2ad0:	0004      	movs	r4, r0
    2ad2:	0020      	movs	r0, r4
    2ad4:	000e      	movs	r6, r1
    2ad6:	7805      	ldrb	r5, [r0, #0]
    2ad8:	3401      	adds	r4, #1
    2ada:	7837      	ldrb	r7, [r6, #0]
    2adc:	2f00      	cmp	r7, #0
    2ade:	d104      	bne.n	2aea <__strtok_r+0x26>
    2ae0:	2d00      	cmp	r5, #0
    2ae2:	d10f      	bne.n	2b04 <__strtok_r+0x40>
    2ae4:	0028      	movs	r0, r5
    2ae6:	6015      	str	r5, [r2, #0]
    2ae8:	e006      	b.n	2af8 <__strtok_r+0x34>
    2aea:	3601      	adds	r6, #1
    2aec:	42bd      	cmp	r5, r7
    2aee:	d1f4      	bne.n	2ada <__strtok_r+0x16>
    2af0:	2b00      	cmp	r3, #0
    2af2:	d1ee      	bne.n	2ad2 <__strtok_r+0xe>
    2af4:	6014      	str	r4, [r2, #0]
    2af6:	7003      	strb	r3, [r0, #0]
    2af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2afa:	002f      	movs	r7, r5
    2afc:	e00f      	b.n	2b1e <__strtok_r+0x5a>
    2afe:	3301      	adds	r3, #1
    2b00:	2e00      	cmp	r6, #0
    2b02:	d104      	bne.n	2b0e <__strtok_r+0x4a>
    2b04:	0023      	movs	r3, r4
    2b06:	3401      	adds	r4, #1
    2b08:	781d      	ldrb	r5, [r3, #0]
    2b0a:	0027      	movs	r7, r4
    2b0c:	000b      	movs	r3, r1
    2b0e:	781e      	ldrb	r6, [r3, #0]
    2b10:	42b5      	cmp	r5, r6
    2b12:	d1f4      	bne.n	2afe <__strtok_r+0x3a>
    2b14:	2d00      	cmp	r5, #0
    2b16:	d0f0      	beq.n	2afa <__strtok_r+0x36>
    2b18:	2300      	movs	r3, #0
    2b1a:	3c01      	subs	r4, #1
    2b1c:	7023      	strb	r3, [r4, #0]
    2b1e:	6017      	str	r7, [r2, #0]
    2b20:	e7ea      	b.n	2af8 <__strtok_r+0x34>
    2b22:	Address 0x00002b22 is out of bounds.


00002b24 <_strtol_l.isra.0>:
    2b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b26:	001e      	movs	r6, r3
    2b28:	4b3d      	ldr	r3, [pc, #244]	; (2c20 <_strtol_l.isra.0+0xfc>)
    2b2a:	b087      	sub	sp, #28
    2b2c:	9005      	str	r0, [sp, #20]
    2b2e:	9202      	str	r2, [sp, #8]
    2b30:	0008      	movs	r0, r1
    2b32:	469c      	mov	ip, r3
    2b34:	2208      	movs	r2, #8
    2b36:	9101      	str	r1, [sp, #4]
    2b38:	0003      	movs	r3, r0
    2b3a:	4661      	mov	r1, ip
    2b3c:	781c      	ldrb	r4, [r3, #0]
    2b3e:	1c45      	adds	r5, r0, #1
    2b40:	5d09      	ldrb	r1, [r1, r4]
    2b42:	0028      	movs	r0, r5
    2b44:	000f      	movs	r7, r1
    2b46:	4017      	ands	r7, r2
    2b48:	4211      	tst	r1, r2
    2b4a:	d1f5      	bne.n	2b38 <_strtol_l.isra.0+0x14>
    2b4c:	2c2d      	cmp	r4, #45	; 0x2d
    2b4e:	d133      	bne.n	2bb8 <_strtol_l.isra.0+0x94>
    2b50:	2701      	movs	r7, #1
    2b52:	782c      	ldrb	r4, [r5, #0]
    2b54:	1c9d      	adds	r5, r3, #2
    2b56:	2e00      	cmp	r6, #0
    2b58:	d05d      	beq.n	2c16 <_strtol_l.isra.0+0xf2>
    2b5a:	2e10      	cmp	r6, #16
    2b5c:	d109      	bne.n	2b72 <_strtol_l.isra.0+0x4e>
    2b5e:	2c30      	cmp	r4, #48	; 0x30
    2b60:	d107      	bne.n	2b72 <_strtol_l.isra.0+0x4e>
    2b62:	2220      	movs	r2, #32
    2b64:	782b      	ldrb	r3, [r5, #0]
    2b66:	4393      	bics	r3, r2
    2b68:	2b58      	cmp	r3, #88	; 0x58
    2b6a:	d14f      	bne.n	2c0c <_strtol_l.isra.0+0xe8>
    2b6c:	2610      	movs	r6, #16
    2b6e:	786c      	ldrb	r4, [r5, #1]
    2b70:	3502      	adds	r5, #2
    2b72:	4b2c      	ldr	r3, [pc, #176]	; (2c24 <_strtol_l.isra.0+0x100>)
    2b74:	0031      	movs	r1, r6
    2b76:	18fb      	adds	r3, r7, r3
    2b78:	0018      	movs	r0, r3
    2b7a:	9303      	str	r3, [sp, #12]
    2b7c:	f7ff fd62 	bl	2644 <__aeabi_uidivmod>
    2b80:	2300      	movs	r3, #0
    2b82:	2201      	movs	r2, #1
    2b84:	4684      	mov	ip, r0
    2b86:	0018      	movs	r0, r3
    2b88:	9104      	str	r1, [sp, #16]
    2b8a:	4252      	negs	r2, r2
    2b8c:	0021      	movs	r1, r4
    2b8e:	3930      	subs	r1, #48	; 0x30
    2b90:	2909      	cmp	r1, #9
    2b92:	d816      	bhi.n	2bc2 <_strtol_l.isra.0+0x9e>
    2b94:	000c      	movs	r4, r1
    2b96:	42a6      	cmp	r6, r4
    2b98:	dd1f      	ble.n	2bda <_strtol_l.isra.0+0xb6>
    2b9a:	1c59      	adds	r1, r3, #1
    2b9c:	d009      	beq.n	2bb2 <_strtol_l.isra.0+0x8e>
    2b9e:	0013      	movs	r3, r2
    2ba0:	4584      	cmp	ip, r0
    2ba2:	d306      	bcc.n	2bb2 <_strtol_l.isra.0+0x8e>
    2ba4:	d102      	bne.n	2bac <_strtol_l.isra.0+0x88>
    2ba6:	9904      	ldr	r1, [sp, #16]
    2ba8:	42a1      	cmp	r1, r4
    2baa:	db02      	blt.n	2bb2 <_strtol_l.isra.0+0x8e>
    2bac:	2301      	movs	r3, #1
    2bae:	4370      	muls	r0, r6
    2bb0:	1820      	adds	r0, r4, r0
    2bb2:	782c      	ldrb	r4, [r5, #0]
    2bb4:	3501      	adds	r5, #1
    2bb6:	e7e9      	b.n	2b8c <_strtol_l.isra.0+0x68>
    2bb8:	2c2b      	cmp	r4, #43	; 0x2b
    2bba:	d1cc      	bne.n	2b56 <_strtol_l.isra.0+0x32>
    2bbc:	782c      	ldrb	r4, [r5, #0]
    2bbe:	1c9d      	adds	r5, r3, #2
    2bc0:	e7c9      	b.n	2b56 <_strtol_l.isra.0+0x32>
    2bc2:	0021      	movs	r1, r4
    2bc4:	3941      	subs	r1, #65	; 0x41
    2bc6:	2919      	cmp	r1, #25
    2bc8:	d801      	bhi.n	2bce <_strtol_l.isra.0+0xaa>
    2bca:	3c37      	subs	r4, #55	; 0x37
    2bcc:	e7e3      	b.n	2b96 <_strtol_l.isra.0+0x72>
    2bce:	0021      	movs	r1, r4
    2bd0:	3961      	subs	r1, #97	; 0x61
    2bd2:	2919      	cmp	r1, #25
    2bd4:	d801      	bhi.n	2bda <_strtol_l.isra.0+0xb6>
    2bd6:	3c57      	subs	r4, #87	; 0x57
    2bd8:	e7dd      	b.n	2b96 <_strtol_l.isra.0+0x72>
    2bda:	1c5a      	adds	r2, r3, #1
    2bdc:	d108      	bne.n	2bf0 <_strtol_l.isra.0+0xcc>
    2bde:	9a05      	ldr	r2, [sp, #20]
    2be0:	3323      	adds	r3, #35	; 0x23
    2be2:	6013      	str	r3, [r2, #0]
    2be4:	9b02      	ldr	r3, [sp, #8]
    2be6:	9803      	ldr	r0, [sp, #12]
    2be8:	2b00      	cmp	r3, #0
    2bea:	d109      	bne.n	2c00 <_strtol_l.isra.0+0xdc>
    2bec:	b007      	add	sp, #28
    2bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bf0:	2f00      	cmp	r7, #0
    2bf2:	d000      	beq.n	2bf6 <_strtol_l.isra.0+0xd2>
    2bf4:	4240      	negs	r0, r0
    2bf6:	9a02      	ldr	r2, [sp, #8]
    2bf8:	2a00      	cmp	r2, #0
    2bfa:	d0f7      	beq.n	2bec <_strtol_l.isra.0+0xc8>
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	d001      	beq.n	2c04 <_strtol_l.isra.0+0xe0>
    2c00:	1e6b      	subs	r3, r5, #1
    2c02:	9301      	str	r3, [sp, #4]
    2c04:	9b02      	ldr	r3, [sp, #8]
    2c06:	9a01      	ldr	r2, [sp, #4]
    2c08:	601a      	str	r2, [r3, #0]
    2c0a:	e7ef      	b.n	2bec <_strtol_l.isra.0+0xc8>
    2c0c:	2430      	movs	r4, #48	; 0x30
    2c0e:	2e00      	cmp	r6, #0
    2c10:	d1af      	bne.n	2b72 <_strtol_l.isra.0+0x4e>
    2c12:	3608      	adds	r6, #8
    2c14:	e7ad      	b.n	2b72 <_strtol_l.isra.0+0x4e>
    2c16:	2c30      	cmp	r4, #48	; 0x30
    2c18:	d0a3      	beq.n	2b62 <_strtol_l.isra.0+0x3e>
    2c1a:	260a      	movs	r6, #10
    2c1c:	e7a9      	b.n	2b72 <_strtol_l.isra.0+0x4e>
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	000038ee 	.word	0x000038ee
    2c24:	7fffffff 	.word	0x7fffffff

00002c28 <strtol>:
    2c28:	b510      	push	{r4, lr}
    2c2a:	0013      	movs	r3, r2
    2c2c:	000a      	movs	r2, r1
    2c2e:	0001      	movs	r1, r0
    2c30:	4802      	ldr	r0, [pc, #8]	; (2c3c <strtol+0x14>)
    2c32:	6800      	ldr	r0, [r0, #0]
    2c34:	f7ff ff76 	bl	2b24 <_strtol_l.isra.0>
    2c38:	bd10      	pop	{r4, pc}
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	200001ec 	.word	0x200001ec

00002c40 <_vsniprintf_r>:
    2c40:	b530      	push	{r4, r5, lr}
    2c42:	0014      	movs	r4, r2
    2c44:	0005      	movs	r5, r0
    2c46:	001a      	movs	r2, r3
    2c48:	b09b      	sub	sp, #108	; 0x6c
    2c4a:	2c00      	cmp	r4, #0
    2c4c:	da05      	bge.n	2c5a <_vsniprintf_r+0x1a>
    2c4e:	238b      	movs	r3, #139	; 0x8b
    2c50:	6003      	str	r3, [r0, #0]
    2c52:	2001      	movs	r0, #1
    2c54:	4240      	negs	r0, r0
    2c56:	b01b      	add	sp, #108	; 0x6c
    2c58:	bd30      	pop	{r4, r5, pc}
    2c5a:	2382      	movs	r3, #130	; 0x82
    2c5c:	4668      	mov	r0, sp
    2c5e:	009b      	lsls	r3, r3, #2
    2c60:	8183      	strh	r3, [r0, #12]
    2c62:	2300      	movs	r3, #0
    2c64:	9100      	str	r1, [sp, #0]
    2c66:	9104      	str	r1, [sp, #16]
    2c68:	429c      	cmp	r4, r3
    2c6a:	d000      	beq.n	2c6e <_vsniprintf_r+0x2e>
    2c6c:	1e63      	subs	r3, r4, #1
    2c6e:	9302      	str	r3, [sp, #8]
    2c70:	9305      	str	r3, [sp, #20]
    2c72:	2301      	movs	r3, #1
    2c74:	4669      	mov	r1, sp
    2c76:	425b      	negs	r3, r3
    2c78:	81cb      	strh	r3, [r1, #14]
    2c7a:	0028      	movs	r0, r5
    2c7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2c7e:	f000 f8b1 	bl	2de4 <_svfiprintf_r>
    2c82:	1c43      	adds	r3, r0, #1
    2c84:	da01      	bge.n	2c8a <_vsniprintf_r+0x4a>
    2c86:	238b      	movs	r3, #139	; 0x8b
    2c88:	602b      	str	r3, [r5, #0]
    2c8a:	2c00      	cmp	r4, #0
    2c8c:	d0e3      	beq.n	2c56 <_vsniprintf_r+0x16>
    2c8e:	2300      	movs	r3, #0
    2c90:	9a00      	ldr	r2, [sp, #0]
    2c92:	7013      	strb	r3, [r2, #0]
    2c94:	e7df      	b.n	2c56 <_vsniprintf_r+0x16>
    2c96:	Address 0x00002c96 is out of bounds.


00002c98 <vsniprintf>:
    2c98:	b507      	push	{r0, r1, r2, lr}
    2c9a:	9300      	str	r3, [sp, #0]
    2c9c:	0013      	movs	r3, r2
    2c9e:	000a      	movs	r2, r1
    2ca0:	0001      	movs	r1, r0
    2ca2:	4802      	ldr	r0, [pc, #8]	; (2cac <vsniprintf+0x14>)
    2ca4:	6800      	ldr	r0, [r0, #0]
    2ca6:	f7ff ffcb 	bl	2c40 <_vsniprintf_r>
    2caa:	bd0e      	pop	{r1, r2, r3, pc}
    2cac:	200001ec 	.word	0x200001ec

00002cb0 <__retarget_lock_acquire_recursive>:
    2cb0:	4770      	bx	lr

00002cb2 <__retarget_lock_release_recursive>:
    2cb2:	4770      	bx	lr

00002cb4 <__malloc_lock>:
    2cb4:	b510      	push	{r4, lr}
    2cb6:	4802      	ldr	r0, [pc, #8]	; (2cc0 <__malloc_lock+0xc>)
    2cb8:	f7ff fffa 	bl	2cb0 <__retarget_lock_acquire_recursive>
    2cbc:	bd10      	pop	{r4, pc}
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	200006f0 	.word	0x200006f0

00002cc4 <__malloc_unlock>:
    2cc4:	b510      	push	{r4, lr}
    2cc6:	4802      	ldr	r0, [pc, #8]	; (2cd0 <__malloc_unlock+0xc>)
    2cc8:	f7ff fff3 	bl	2cb2 <__retarget_lock_release_recursive>
    2ccc:	bd10      	pop	{r4, pc}
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	200006f0 	.word	0x200006f0

00002cd4 <_realloc_r>:
    2cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cd6:	0007      	movs	r7, r0
    2cd8:	000d      	movs	r5, r1
    2cda:	0016      	movs	r6, r2
    2cdc:	2900      	cmp	r1, #0
    2cde:	d105      	bne.n	2cec <_realloc_r+0x18>
    2ce0:	0011      	movs	r1, r2
    2ce2:	f7ff fd9d 	bl	2820 <_malloc_r>
    2ce6:	0004      	movs	r4, r0
    2ce8:	0020      	movs	r0, r4
    2cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cec:	2a00      	cmp	r2, #0
    2cee:	d103      	bne.n	2cf8 <_realloc_r+0x24>
    2cf0:	f7ff fd4c 	bl	278c <_free_r>
    2cf4:	0034      	movs	r4, r6
    2cf6:	e7f7      	b.n	2ce8 <_realloc_r+0x14>
    2cf8:	f000 fb14 	bl	3324 <_malloc_usable_size_r>
    2cfc:	002c      	movs	r4, r5
    2cfe:	42b0      	cmp	r0, r6
    2d00:	d2f2      	bcs.n	2ce8 <_realloc_r+0x14>
    2d02:	0031      	movs	r1, r6
    2d04:	0038      	movs	r0, r7
    2d06:	f7ff fd8b 	bl	2820 <_malloc_r>
    2d0a:	1e04      	subs	r4, r0, #0
    2d0c:	d0ec      	beq.n	2ce8 <_realloc_r+0x14>
    2d0e:	0029      	movs	r1, r5
    2d10:	0032      	movs	r2, r6
    2d12:	f7ff fd1b 	bl	274c <memcpy>
    2d16:	0029      	movs	r1, r5
    2d18:	0038      	movs	r0, r7
    2d1a:	f7ff fd37 	bl	278c <_free_r>
    2d1e:	e7e3      	b.n	2ce8 <_realloc_r+0x14>

00002d20 <__ssputs_r>:
    2d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d22:	688e      	ldr	r6, [r1, #8]
    2d24:	b085      	sub	sp, #20
    2d26:	0007      	movs	r7, r0
    2d28:	000c      	movs	r4, r1
    2d2a:	9203      	str	r2, [sp, #12]
    2d2c:	9301      	str	r3, [sp, #4]
    2d2e:	429e      	cmp	r6, r3
    2d30:	d83c      	bhi.n	2dac <__ssputs_r+0x8c>
    2d32:	2390      	movs	r3, #144	; 0x90
    2d34:	898a      	ldrh	r2, [r1, #12]
    2d36:	00db      	lsls	r3, r3, #3
    2d38:	421a      	tst	r2, r3
    2d3a:	d034      	beq.n	2da6 <__ssputs_r+0x86>
    2d3c:	2503      	movs	r5, #3
    2d3e:	6909      	ldr	r1, [r1, #16]
    2d40:	6823      	ldr	r3, [r4, #0]
    2d42:	1a5b      	subs	r3, r3, r1
    2d44:	9302      	str	r3, [sp, #8]
    2d46:	6963      	ldr	r3, [r4, #20]
    2d48:	9802      	ldr	r0, [sp, #8]
    2d4a:	435d      	muls	r5, r3
    2d4c:	0feb      	lsrs	r3, r5, #31
    2d4e:	195d      	adds	r5, r3, r5
    2d50:	9b01      	ldr	r3, [sp, #4]
    2d52:	106d      	asrs	r5, r5, #1
    2d54:	3301      	adds	r3, #1
    2d56:	181b      	adds	r3, r3, r0
    2d58:	42ab      	cmp	r3, r5
    2d5a:	d900      	bls.n	2d5e <__ssputs_r+0x3e>
    2d5c:	001d      	movs	r5, r3
    2d5e:	0553      	lsls	r3, r2, #21
    2d60:	d532      	bpl.n	2dc8 <__ssputs_r+0xa8>
    2d62:	0029      	movs	r1, r5
    2d64:	0038      	movs	r0, r7
    2d66:	f7ff fd5b 	bl	2820 <_malloc_r>
    2d6a:	1e06      	subs	r6, r0, #0
    2d6c:	d109      	bne.n	2d82 <__ssputs_r+0x62>
    2d6e:	230c      	movs	r3, #12
    2d70:	603b      	str	r3, [r7, #0]
    2d72:	2340      	movs	r3, #64	; 0x40
    2d74:	2001      	movs	r0, #1
    2d76:	89a2      	ldrh	r2, [r4, #12]
    2d78:	4240      	negs	r0, r0
    2d7a:	4313      	orrs	r3, r2
    2d7c:	81a3      	strh	r3, [r4, #12]
    2d7e:	b005      	add	sp, #20
    2d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d82:	9a02      	ldr	r2, [sp, #8]
    2d84:	6921      	ldr	r1, [r4, #16]
    2d86:	f7ff fce1 	bl	274c <memcpy>
    2d8a:	89a3      	ldrh	r3, [r4, #12]
    2d8c:	4a14      	ldr	r2, [pc, #80]	; (2de0 <__ssputs_r+0xc0>)
    2d8e:	401a      	ands	r2, r3
    2d90:	2380      	movs	r3, #128	; 0x80
    2d92:	4313      	orrs	r3, r2
    2d94:	81a3      	strh	r3, [r4, #12]
    2d96:	9b02      	ldr	r3, [sp, #8]
    2d98:	6126      	str	r6, [r4, #16]
    2d9a:	18f6      	adds	r6, r6, r3
    2d9c:	6026      	str	r6, [r4, #0]
    2d9e:	6165      	str	r5, [r4, #20]
    2da0:	9e01      	ldr	r6, [sp, #4]
    2da2:	1aed      	subs	r5, r5, r3
    2da4:	60a5      	str	r5, [r4, #8]
    2da6:	9b01      	ldr	r3, [sp, #4]
    2da8:	429e      	cmp	r6, r3
    2daa:	d900      	bls.n	2dae <__ssputs_r+0x8e>
    2dac:	9e01      	ldr	r6, [sp, #4]
    2dae:	0032      	movs	r2, r6
    2db0:	9903      	ldr	r1, [sp, #12]
    2db2:	6820      	ldr	r0, [r4, #0]
    2db4:	f000 faa3 	bl	32fe <memmove>
    2db8:	68a3      	ldr	r3, [r4, #8]
    2dba:	2000      	movs	r0, #0
    2dbc:	1b9b      	subs	r3, r3, r6
    2dbe:	60a3      	str	r3, [r4, #8]
    2dc0:	6823      	ldr	r3, [r4, #0]
    2dc2:	199e      	adds	r6, r3, r6
    2dc4:	6026      	str	r6, [r4, #0]
    2dc6:	e7da      	b.n	2d7e <__ssputs_r+0x5e>
    2dc8:	002a      	movs	r2, r5
    2dca:	0038      	movs	r0, r7
    2dcc:	f7ff ff82 	bl	2cd4 <_realloc_r>
    2dd0:	1e06      	subs	r6, r0, #0
    2dd2:	d1e0      	bne.n	2d96 <__ssputs_r+0x76>
    2dd4:	0038      	movs	r0, r7
    2dd6:	6921      	ldr	r1, [r4, #16]
    2dd8:	f7ff fcd8 	bl	278c <_free_r>
    2ddc:	e7c7      	b.n	2d6e <__ssputs_r+0x4e>
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	fffffb7f 	.word	0xfffffb7f

00002de4 <_svfiprintf_r>:
    2de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2de6:	b0a1      	sub	sp, #132	; 0x84
    2de8:	9003      	str	r0, [sp, #12]
    2dea:	001d      	movs	r5, r3
    2dec:	898b      	ldrh	r3, [r1, #12]
    2dee:	000f      	movs	r7, r1
    2df0:	0016      	movs	r6, r2
    2df2:	061b      	lsls	r3, r3, #24
    2df4:	d511      	bpl.n	2e1a <_svfiprintf_r+0x36>
    2df6:	690b      	ldr	r3, [r1, #16]
    2df8:	2b00      	cmp	r3, #0
    2dfa:	d10e      	bne.n	2e1a <_svfiprintf_r+0x36>
    2dfc:	2140      	movs	r1, #64	; 0x40
    2dfe:	f7ff fd0f 	bl	2820 <_malloc_r>
    2e02:	6038      	str	r0, [r7, #0]
    2e04:	6138      	str	r0, [r7, #16]
    2e06:	2800      	cmp	r0, #0
    2e08:	d105      	bne.n	2e16 <_svfiprintf_r+0x32>
    2e0a:	230c      	movs	r3, #12
    2e0c:	9a03      	ldr	r2, [sp, #12]
    2e0e:	3801      	subs	r0, #1
    2e10:	6013      	str	r3, [r2, #0]
    2e12:	b021      	add	sp, #132	; 0x84
    2e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e16:	2340      	movs	r3, #64	; 0x40
    2e18:	617b      	str	r3, [r7, #20]
    2e1a:	2300      	movs	r3, #0
    2e1c:	ac08      	add	r4, sp, #32
    2e1e:	6163      	str	r3, [r4, #20]
    2e20:	3320      	adds	r3, #32
    2e22:	7663      	strb	r3, [r4, #25]
    2e24:	3310      	adds	r3, #16
    2e26:	76a3      	strb	r3, [r4, #26]
    2e28:	9507      	str	r5, [sp, #28]
    2e2a:	0035      	movs	r5, r6
    2e2c:	782b      	ldrb	r3, [r5, #0]
    2e2e:	2b00      	cmp	r3, #0
    2e30:	d001      	beq.n	2e36 <_svfiprintf_r+0x52>
    2e32:	2b25      	cmp	r3, #37	; 0x25
    2e34:	d147      	bne.n	2ec6 <_svfiprintf_r+0xe2>
    2e36:	1bab      	subs	r3, r5, r6
    2e38:	9305      	str	r3, [sp, #20]
    2e3a:	42b5      	cmp	r5, r6
    2e3c:	d00c      	beq.n	2e58 <_svfiprintf_r+0x74>
    2e3e:	0032      	movs	r2, r6
    2e40:	0039      	movs	r1, r7
    2e42:	9803      	ldr	r0, [sp, #12]
    2e44:	f7ff ff6c 	bl	2d20 <__ssputs_r>
    2e48:	1c43      	adds	r3, r0, #1
    2e4a:	d100      	bne.n	2e4e <_svfiprintf_r+0x6a>
    2e4c:	e0ae      	b.n	2fac <_svfiprintf_r+0x1c8>
    2e4e:	6962      	ldr	r2, [r4, #20]
    2e50:	9b05      	ldr	r3, [sp, #20]
    2e52:	4694      	mov	ip, r2
    2e54:	4463      	add	r3, ip
    2e56:	6163      	str	r3, [r4, #20]
    2e58:	782b      	ldrb	r3, [r5, #0]
    2e5a:	2b00      	cmp	r3, #0
    2e5c:	d100      	bne.n	2e60 <_svfiprintf_r+0x7c>
    2e5e:	e0a5      	b.n	2fac <_svfiprintf_r+0x1c8>
    2e60:	2201      	movs	r2, #1
    2e62:	2300      	movs	r3, #0
    2e64:	4252      	negs	r2, r2
    2e66:	6062      	str	r2, [r4, #4]
    2e68:	a904      	add	r1, sp, #16
    2e6a:	3254      	adds	r2, #84	; 0x54
    2e6c:	1852      	adds	r2, r2, r1
    2e6e:	1c6e      	adds	r6, r5, #1
    2e70:	6023      	str	r3, [r4, #0]
    2e72:	60e3      	str	r3, [r4, #12]
    2e74:	60a3      	str	r3, [r4, #8]
    2e76:	7013      	strb	r3, [r2, #0]
    2e78:	65a3      	str	r3, [r4, #88]	; 0x58
    2e7a:	2205      	movs	r2, #5
    2e7c:	7831      	ldrb	r1, [r6, #0]
    2e7e:	4854      	ldr	r0, [pc, #336]	; (2fd0 <_svfiprintf_r+0x1ec>)
    2e80:	f000 fa32 	bl	32e8 <memchr>
    2e84:	1c75      	adds	r5, r6, #1
    2e86:	2800      	cmp	r0, #0
    2e88:	d11f      	bne.n	2eca <_svfiprintf_r+0xe6>
    2e8a:	6822      	ldr	r2, [r4, #0]
    2e8c:	06d3      	lsls	r3, r2, #27
    2e8e:	d504      	bpl.n	2e9a <_svfiprintf_r+0xb6>
    2e90:	2353      	movs	r3, #83	; 0x53
    2e92:	a904      	add	r1, sp, #16
    2e94:	185b      	adds	r3, r3, r1
    2e96:	2120      	movs	r1, #32
    2e98:	7019      	strb	r1, [r3, #0]
    2e9a:	0713      	lsls	r3, r2, #28
    2e9c:	d504      	bpl.n	2ea8 <_svfiprintf_r+0xc4>
    2e9e:	2353      	movs	r3, #83	; 0x53
    2ea0:	a904      	add	r1, sp, #16
    2ea2:	185b      	adds	r3, r3, r1
    2ea4:	212b      	movs	r1, #43	; 0x2b
    2ea6:	7019      	strb	r1, [r3, #0]
    2ea8:	7833      	ldrb	r3, [r6, #0]
    2eaa:	2b2a      	cmp	r3, #42	; 0x2a
    2eac:	d016      	beq.n	2edc <_svfiprintf_r+0xf8>
    2eae:	0035      	movs	r5, r6
    2eb0:	2100      	movs	r1, #0
    2eb2:	200a      	movs	r0, #10
    2eb4:	68e3      	ldr	r3, [r4, #12]
    2eb6:	782a      	ldrb	r2, [r5, #0]
    2eb8:	1c6e      	adds	r6, r5, #1
    2eba:	3a30      	subs	r2, #48	; 0x30
    2ebc:	2a09      	cmp	r2, #9
    2ebe:	d94e      	bls.n	2f5e <_svfiprintf_r+0x17a>
    2ec0:	2900      	cmp	r1, #0
    2ec2:	d111      	bne.n	2ee8 <_svfiprintf_r+0x104>
    2ec4:	e017      	b.n	2ef6 <_svfiprintf_r+0x112>
    2ec6:	3501      	adds	r5, #1
    2ec8:	e7b0      	b.n	2e2c <_svfiprintf_r+0x48>
    2eca:	4b41      	ldr	r3, [pc, #260]	; (2fd0 <_svfiprintf_r+0x1ec>)
    2ecc:	6822      	ldr	r2, [r4, #0]
    2ece:	1ac0      	subs	r0, r0, r3
    2ed0:	2301      	movs	r3, #1
    2ed2:	4083      	lsls	r3, r0
    2ed4:	4313      	orrs	r3, r2
    2ed6:	002e      	movs	r6, r5
    2ed8:	6023      	str	r3, [r4, #0]
    2eda:	e7ce      	b.n	2e7a <_svfiprintf_r+0x96>
    2edc:	9b07      	ldr	r3, [sp, #28]
    2ede:	1d19      	adds	r1, r3, #4
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	9107      	str	r1, [sp, #28]
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	db01      	blt.n	2eec <_svfiprintf_r+0x108>
    2ee8:	930b      	str	r3, [sp, #44]	; 0x2c
    2eea:	e004      	b.n	2ef6 <_svfiprintf_r+0x112>
    2eec:	425b      	negs	r3, r3
    2eee:	60e3      	str	r3, [r4, #12]
    2ef0:	2302      	movs	r3, #2
    2ef2:	4313      	orrs	r3, r2
    2ef4:	6023      	str	r3, [r4, #0]
    2ef6:	782b      	ldrb	r3, [r5, #0]
    2ef8:	2b2e      	cmp	r3, #46	; 0x2e
    2efa:	d10a      	bne.n	2f12 <_svfiprintf_r+0x12e>
    2efc:	786b      	ldrb	r3, [r5, #1]
    2efe:	2b2a      	cmp	r3, #42	; 0x2a
    2f00:	d135      	bne.n	2f6e <_svfiprintf_r+0x18a>
    2f02:	9b07      	ldr	r3, [sp, #28]
    2f04:	3502      	adds	r5, #2
    2f06:	1d1a      	adds	r2, r3, #4
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	9207      	str	r2, [sp, #28]
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	db2b      	blt.n	2f68 <_svfiprintf_r+0x184>
    2f10:	9309      	str	r3, [sp, #36]	; 0x24
    2f12:	4e30      	ldr	r6, [pc, #192]	; (2fd4 <_svfiprintf_r+0x1f0>)
    2f14:	2203      	movs	r2, #3
    2f16:	0030      	movs	r0, r6
    2f18:	7829      	ldrb	r1, [r5, #0]
    2f1a:	f000 f9e5 	bl	32e8 <memchr>
    2f1e:	2800      	cmp	r0, #0
    2f20:	d006      	beq.n	2f30 <_svfiprintf_r+0x14c>
    2f22:	2340      	movs	r3, #64	; 0x40
    2f24:	1b80      	subs	r0, r0, r6
    2f26:	4083      	lsls	r3, r0
    2f28:	6822      	ldr	r2, [r4, #0]
    2f2a:	3501      	adds	r5, #1
    2f2c:	4313      	orrs	r3, r2
    2f2e:	6023      	str	r3, [r4, #0]
    2f30:	7829      	ldrb	r1, [r5, #0]
    2f32:	2206      	movs	r2, #6
    2f34:	4828      	ldr	r0, [pc, #160]	; (2fd8 <_svfiprintf_r+0x1f4>)
    2f36:	1c6e      	adds	r6, r5, #1
    2f38:	7621      	strb	r1, [r4, #24]
    2f3a:	f000 f9d5 	bl	32e8 <memchr>
    2f3e:	2800      	cmp	r0, #0
    2f40:	d03c      	beq.n	2fbc <_svfiprintf_r+0x1d8>
    2f42:	4b26      	ldr	r3, [pc, #152]	; (2fdc <_svfiprintf_r+0x1f8>)
    2f44:	2b00      	cmp	r3, #0
    2f46:	d125      	bne.n	2f94 <_svfiprintf_r+0x1b0>
    2f48:	2207      	movs	r2, #7
    2f4a:	9b07      	ldr	r3, [sp, #28]
    2f4c:	3307      	adds	r3, #7
    2f4e:	4393      	bics	r3, r2
    2f50:	3308      	adds	r3, #8
    2f52:	9307      	str	r3, [sp, #28]
    2f54:	6963      	ldr	r3, [r4, #20]
    2f56:	9a04      	ldr	r2, [sp, #16]
    2f58:	189b      	adds	r3, r3, r2
    2f5a:	6163      	str	r3, [r4, #20]
    2f5c:	e765      	b.n	2e2a <_svfiprintf_r+0x46>
    2f5e:	4343      	muls	r3, r0
    2f60:	0035      	movs	r5, r6
    2f62:	2101      	movs	r1, #1
    2f64:	189b      	adds	r3, r3, r2
    2f66:	e7a6      	b.n	2eb6 <_svfiprintf_r+0xd2>
    2f68:	2301      	movs	r3, #1
    2f6a:	425b      	negs	r3, r3
    2f6c:	e7d0      	b.n	2f10 <_svfiprintf_r+0x12c>
    2f6e:	2300      	movs	r3, #0
    2f70:	200a      	movs	r0, #10
    2f72:	001a      	movs	r2, r3
    2f74:	3501      	adds	r5, #1
    2f76:	6063      	str	r3, [r4, #4]
    2f78:	7829      	ldrb	r1, [r5, #0]
    2f7a:	1c6e      	adds	r6, r5, #1
    2f7c:	3930      	subs	r1, #48	; 0x30
    2f7e:	2909      	cmp	r1, #9
    2f80:	d903      	bls.n	2f8a <_svfiprintf_r+0x1a6>
    2f82:	2b00      	cmp	r3, #0
    2f84:	d0c5      	beq.n	2f12 <_svfiprintf_r+0x12e>
    2f86:	9209      	str	r2, [sp, #36]	; 0x24
    2f88:	e7c3      	b.n	2f12 <_svfiprintf_r+0x12e>
    2f8a:	4342      	muls	r2, r0
    2f8c:	0035      	movs	r5, r6
    2f8e:	2301      	movs	r3, #1
    2f90:	1852      	adds	r2, r2, r1
    2f92:	e7f1      	b.n	2f78 <_svfiprintf_r+0x194>
    2f94:	ab07      	add	r3, sp, #28
    2f96:	9300      	str	r3, [sp, #0]
    2f98:	003a      	movs	r2, r7
    2f9a:	0021      	movs	r1, r4
    2f9c:	4b10      	ldr	r3, [pc, #64]	; (2fe0 <_svfiprintf_r+0x1fc>)
    2f9e:	9803      	ldr	r0, [sp, #12]
    2fa0:	e000      	b.n	2fa4 <_svfiprintf_r+0x1c0>
    2fa2:	bf00      	nop
    2fa4:	9004      	str	r0, [sp, #16]
    2fa6:	9b04      	ldr	r3, [sp, #16]
    2fa8:	3301      	adds	r3, #1
    2faa:	d1d3      	bne.n	2f54 <_svfiprintf_r+0x170>
    2fac:	89bb      	ldrh	r3, [r7, #12]
    2fae:	980d      	ldr	r0, [sp, #52]	; 0x34
    2fb0:	065b      	lsls	r3, r3, #25
    2fb2:	d400      	bmi.n	2fb6 <_svfiprintf_r+0x1d2>
    2fb4:	e72d      	b.n	2e12 <_svfiprintf_r+0x2e>
    2fb6:	2001      	movs	r0, #1
    2fb8:	4240      	negs	r0, r0
    2fba:	e72a      	b.n	2e12 <_svfiprintf_r+0x2e>
    2fbc:	ab07      	add	r3, sp, #28
    2fbe:	9300      	str	r3, [sp, #0]
    2fc0:	003a      	movs	r2, r7
    2fc2:	0021      	movs	r1, r4
    2fc4:	4b06      	ldr	r3, [pc, #24]	; (2fe0 <_svfiprintf_r+0x1fc>)
    2fc6:	9803      	ldr	r0, [sp, #12]
    2fc8:	f000 f87c 	bl	30c4 <_printf_i>
    2fcc:	e7ea      	b.n	2fa4 <_svfiprintf_r+0x1c0>
    2fce:	46c0      	nop			; (mov r8, r8)
    2fd0:	00003a50 	.word	0x00003a50
    2fd4:	00003a56 	.word	0x00003a56
    2fd8:	00003a5a 	.word	0x00003a5a
    2fdc:	00000000 	.word	0x00000000
    2fe0:	00002d21 	.word	0x00002d21

00002fe4 <_printf_common>:
    2fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2fe6:	0015      	movs	r5, r2
    2fe8:	9301      	str	r3, [sp, #4]
    2fea:	688a      	ldr	r2, [r1, #8]
    2fec:	690b      	ldr	r3, [r1, #16]
    2fee:	000c      	movs	r4, r1
    2ff0:	9000      	str	r0, [sp, #0]
    2ff2:	4293      	cmp	r3, r2
    2ff4:	da00      	bge.n	2ff8 <_printf_common+0x14>
    2ff6:	0013      	movs	r3, r2
    2ff8:	0022      	movs	r2, r4
    2ffa:	602b      	str	r3, [r5, #0]
    2ffc:	3243      	adds	r2, #67	; 0x43
    2ffe:	7812      	ldrb	r2, [r2, #0]
    3000:	2a00      	cmp	r2, #0
    3002:	d001      	beq.n	3008 <_printf_common+0x24>
    3004:	3301      	adds	r3, #1
    3006:	602b      	str	r3, [r5, #0]
    3008:	6823      	ldr	r3, [r4, #0]
    300a:	069b      	lsls	r3, r3, #26
    300c:	d502      	bpl.n	3014 <_printf_common+0x30>
    300e:	682b      	ldr	r3, [r5, #0]
    3010:	3302      	adds	r3, #2
    3012:	602b      	str	r3, [r5, #0]
    3014:	6822      	ldr	r2, [r4, #0]
    3016:	2306      	movs	r3, #6
    3018:	0017      	movs	r7, r2
    301a:	401f      	ands	r7, r3
    301c:	421a      	tst	r2, r3
    301e:	d027      	beq.n	3070 <_printf_common+0x8c>
    3020:	0023      	movs	r3, r4
    3022:	3343      	adds	r3, #67	; 0x43
    3024:	781b      	ldrb	r3, [r3, #0]
    3026:	1e5a      	subs	r2, r3, #1
    3028:	4193      	sbcs	r3, r2
    302a:	6822      	ldr	r2, [r4, #0]
    302c:	0692      	lsls	r2, r2, #26
    302e:	d430      	bmi.n	3092 <_printf_common+0xae>
    3030:	0022      	movs	r2, r4
    3032:	9901      	ldr	r1, [sp, #4]
    3034:	9800      	ldr	r0, [sp, #0]
    3036:	9e08      	ldr	r6, [sp, #32]
    3038:	3243      	adds	r2, #67	; 0x43
    303a:	47b0      	blx	r6
    303c:	1c43      	adds	r3, r0, #1
    303e:	d025      	beq.n	308c <_printf_common+0xa8>
    3040:	2306      	movs	r3, #6
    3042:	6820      	ldr	r0, [r4, #0]
    3044:	682a      	ldr	r2, [r5, #0]
    3046:	68e1      	ldr	r1, [r4, #12]
    3048:	2500      	movs	r5, #0
    304a:	4003      	ands	r3, r0
    304c:	2b04      	cmp	r3, #4
    304e:	d103      	bne.n	3058 <_printf_common+0x74>
    3050:	1a8d      	subs	r5, r1, r2
    3052:	43eb      	mvns	r3, r5
    3054:	17db      	asrs	r3, r3, #31
    3056:	401d      	ands	r5, r3
    3058:	68a3      	ldr	r3, [r4, #8]
    305a:	6922      	ldr	r2, [r4, #16]
    305c:	4293      	cmp	r3, r2
    305e:	dd01      	ble.n	3064 <_printf_common+0x80>
    3060:	1a9b      	subs	r3, r3, r2
    3062:	18ed      	adds	r5, r5, r3
    3064:	2700      	movs	r7, #0
    3066:	42bd      	cmp	r5, r7
    3068:	d120      	bne.n	30ac <_printf_common+0xc8>
    306a:	2000      	movs	r0, #0
    306c:	e010      	b.n	3090 <_printf_common+0xac>
    306e:	3701      	adds	r7, #1
    3070:	68e3      	ldr	r3, [r4, #12]
    3072:	682a      	ldr	r2, [r5, #0]
    3074:	1a9b      	subs	r3, r3, r2
    3076:	42bb      	cmp	r3, r7
    3078:	ddd2      	ble.n	3020 <_printf_common+0x3c>
    307a:	0022      	movs	r2, r4
    307c:	2301      	movs	r3, #1
    307e:	9901      	ldr	r1, [sp, #4]
    3080:	9800      	ldr	r0, [sp, #0]
    3082:	9e08      	ldr	r6, [sp, #32]
    3084:	3219      	adds	r2, #25
    3086:	47b0      	blx	r6
    3088:	1c43      	adds	r3, r0, #1
    308a:	d1f0      	bne.n	306e <_printf_common+0x8a>
    308c:	2001      	movs	r0, #1
    308e:	4240      	negs	r0, r0
    3090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3092:	2030      	movs	r0, #48	; 0x30
    3094:	18e1      	adds	r1, r4, r3
    3096:	3143      	adds	r1, #67	; 0x43
    3098:	7008      	strb	r0, [r1, #0]
    309a:	0021      	movs	r1, r4
    309c:	1c5a      	adds	r2, r3, #1
    309e:	3145      	adds	r1, #69	; 0x45
    30a0:	7809      	ldrb	r1, [r1, #0]
    30a2:	18a2      	adds	r2, r4, r2
    30a4:	3243      	adds	r2, #67	; 0x43
    30a6:	3302      	adds	r3, #2
    30a8:	7011      	strb	r1, [r2, #0]
    30aa:	e7c1      	b.n	3030 <_printf_common+0x4c>
    30ac:	0022      	movs	r2, r4
    30ae:	2301      	movs	r3, #1
    30b0:	9901      	ldr	r1, [sp, #4]
    30b2:	9800      	ldr	r0, [sp, #0]
    30b4:	9e08      	ldr	r6, [sp, #32]
    30b6:	321a      	adds	r2, #26
    30b8:	47b0      	blx	r6
    30ba:	1c43      	adds	r3, r0, #1
    30bc:	d0e6      	beq.n	308c <_printf_common+0xa8>
    30be:	3701      	adds	r7, #1
    30c0:	e7d1      	b.n	3066 <_printf_common+0x82>
    30c2:	Address 0x000030c2 is out of bounds.


000030c4 <_printf_i>:
    30c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30c6:	b08b      	sub	sp, #44	; 0x2c
    30c8:	9206      	str	r2, [sp, #24]
    30ca:	000a      	movs	r2, r1
    30cc:	3243      	adds	r2, #67	; 0x43
    30ce:	9307      	str	r3, [sp, #28]
    30d0:	9005      	str	r0, [sp, #20]
    30d2:	9204      	str	r2, [sp, #16]
    30d4:	7e0a      	ldrb	r2, [r1, #24]
    30d6:	000c      	movs	r4, r1
    30d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    30da:	2a78      	cmp	r2, #120	; 0x78
    30dc:	d806      	bhi.n	30ec <_printf_i+0x28>
    30de:	2a62      	cmp	r2, #98	; 0x62
    30e0:	d808      	bhi.n	30f4 <_printf_i+0x30>
    30e2:	2a00      	cmp	r2, #0
    30e4:	d100      	bne.n	30e8 <_printf_i+0x24>
    30e6:	e0c0      	b.n	326a <_printf_i+0x1a6>
    30e8:	2a58      	cmp	r2, #88	; 0x58
    30ea:	d052      	beq.n	3192 <_printf_i+0xce>
    30ec:	0026      	movs	r6, r4
    30ee:	3642      	adds	r6, #66	; 0x42
    30f0:	7032      	strb	r2, [r6, #0]
    30f2:	e022      	b.n	313a <_printf_i+0x76>
    30f4:	0010      	movs	r0, r2
    30f6:	3863      	subs	r0, #99	; 0x63
    30f8:	2815      	cmp	r0, #21
    30fa:	d8f7      	bhi.n	30ec <_printf_i+0x28>
    30fc:	f000 f91a 	bl	3334 <__gnu_thumb1_case_shi>
    3100:	001f0016 	.word	0x001f0016
    3104:	fff6fff6 	.word	0xfff6fff6
    3108:	fff6fff6 	.word	0xfff6fff6
    310c:	fff6001f 	.word	0xfff6001f
    3110:	fff6fff6 	.word	0xfff6fff6
    3114:	00a8fff6 	.word	0x00a8fff6
    3118:	009a0036 	.word	0x009a0036
    311c:	fff6fff6 	.word	0xfff6fff6
    3120:	fff600b9 	.word	0xfff600b9
    3124:	fff60036 	.word	0xfff60036
    3128:	009efff6 	.word	0x009efff6
    312c:	0026      	movs	r6, r4
    312e:	681a      	ldr	r2, [r3, #0]
    3130:	3642      	adds	r6, #66	; 0x42
    3132:	1d11      	adds	r1, r2, #4
    3134:	6019      	str	r1, [r3, #0]
    3136:	6813      	ldr	r3, [r2, #0]
    3138:	7033      	strb	r3, [r6, #0]
    313a:	2301      	movs	r3, #1
    313c:	e0a7      	b.n	328e <_printf_i+0x1ca>
    313e:	6808      	ldr	r0, [r1, #0]
    3140:	6819      	ldr	r1, [r3, #0]
    3142:	1d0a      	adds	r2, r1, #4
    3144:	0605      	lsls	r5, r0, #24
    3146:	d50b      	bpl.n	3160 <_printf_i+0x9c>
    3148:	680d      	ldr	r5, [r1, #0]
    314a:	601a      	str	r2, [r3, #0]
    314c:	2d00      	cmp	r5, #0
    314e:	da03      	bge.n	3158 <_printf_i+0x94>
    3150:	232d      	movs	r3, #45	; 0x2d
    3152:	9a04      	ldr	r2, [sp, #16]
    3154:	426d      	negs	r5, r5
    3156:	7013      	strb	r3, [r2, #0]
    3158:	4b61      	ldr	r3, [pc, #388]	; (32e0 <_printf_i+0x21c>)
    315a:	270a      	movs	r7, #10
    315c:	9303      	str	r3, [sp, #12]
    315e:	e032      	b.n	31c6 <_printf_i+0x102>
    3160:	680d      	ldr	r5, [r1, #0]
    3162:	601a      	str	r2, [r3, #0]
    3164:	0641      	lsls	r1, r0, #25
    3166:	d5f1      	bpl.n	314c <_printf_i+0x88>
    3168:	b22d      	sxth	r5, r5
    316a:	e7ef      	b.n	314c <_printf_i+0x88>
    316c:	680d      	ldr	r5, [r1, #0]
    316e:	6819      	ldr	r1, [r3, #0]
    3170:	1d08      	adds	r0, r1, #4
    3172:	6018      	str	r0, [r3, #0]
    3174:	062e      	lsls	r6, r5, #24
    3176:	d501      	bpl.n	317c <_printf_i+0xb8>
    3178:	680d      	ldr	r5, [r1, #0]
    317a:	e003      	b.n	3184 <_printf_i+0xc0>
    317c:	066d      	lsls	r5, r5, #25
    317e:	d5fb      	bpl.n	3178 <_printf_i+0xb4>
    3180:	680d      	ldr	r5, [r1, #0]
    3182:	b2ad      	uxth	r5, r5
    3184:	4b56      	ldr	r3, [pc, #344]	; (32e0 <_printf_i+0x21c>)
    3186:	270a      	movs	r7, #10
    3188:	9303      	str	r3, [sp, #12]
    318a:	2a6f      	cmp	r2, #111	; 0x6f
    318c:	d117      	bne.n	31be <_printf_i+0xfa>
    318e:	2708      	movs	r7, #8
    3190:	e015      	b.n	31be <_printf_i+0xfa>
    3192:	3145      	adds	r1, #69	; 0x45
    3194:	700a      	strb	r2, [r1, #0]
    3196:	4a52      	ldr	r2, [pc, #328]	; (32e0 <_printf_i+0x21c>)
    3198:	9203      	str	r2, [sp, #12]
    319a:	681a      	ldr	r2, [r3, #0]
    319c:	6821      	ldr	r1, [r4, #0]
    319e:	ca20      	ldmia	r2!, {r5}
    31a0:	601a      	str	r2, [r3, #0]
    31a2:	0608      	lsls	r0, r1, #24
    31a4:	d550      	bpl.n	3248 <_printf_i+0x184>
    31a6:	07cb      	lsls	r3, r1, #31
    31a8:	d502      	bpl.n	31b0 <_printf_i+0xec>
    31aa:	2320      	movs	r3, #32
    31ac:	4319      	orrs	r1, r3
    31ae:	6021      	str	r1, [r4, #0]
    31b0:	2710      	movs	r7, #16
    31b2:	2d00      	cmp	r5, #0
    31b4:	d103      	bne.n	31be <_printf_i+0xfa>
    31b6:	2320      	movs	r3, #32
    31b8:	6822      	ldr	r2, [r4, #0]
    31ba:	439a      	bics	r2, r3
    31bc:	6022      	str	r2, [r4, #0]
    31be:	0023      	movs	r3, r4
    31c0:	2200      	movs	r2, #0
    31c2:	3343      	adds	r3, #67	; 0x43
    31c4:	701a      	strb	r2, [r3, #0]
    31c6:	6863      	ldr	r3, [r4, #4]
    31c8:	60a3      	str	r3, [r4, #8]
    31ca:	2b00      	cmp	r3, #0
    31cc:	db03      	blt.n	31d6 <_printf_i+0x112>
    31ce:	2204      	movs	r2, #4
    31d0:	6821      	ldr	r1, [r4, #0]
    31d2:	4391      	bics	r1, r2
    31d4:	6021      	str	r1, [r4, #0]
    31d6:	2d00      	cmp	r5, #0
    31d8:	d102      	bne.n	31e0 <_printf_i+0x11c>
    31da:	9e04      	ldr	r6, [sp, #16]
    31dc:	2b00      	cmp	r3, #0
    31de:	d00c      	beq.n	31fa <_printf_i+0x136>
    31e0:	9e04      	ldr	r6, [sp, #16]
    31e2:	0028      	movs	r0, r5
    31e4:	0039      	movs	r1, r7
    31e6:	f7ff fa2d 	bl	2644 <__aeabi_uidivmod>
    31ea:	9b03      	ldr	r3, [sp, #12]
    31ec:	3e01      	subs	r6, #1
    31ee:	5c5b      	ldrb	r3, [r3, r1]
    31f0:	7033      	strb	r3, [r6, #0]
    31f2:	002b      	movs	r3, r5
    31f4:	0005      	movs	r5, r0
    31f6:	429f      	cmp	r7, r3
    31f8:	d9f3      	bls.n	31e2 <_printf_i+0x11e>
    31fa:	2f08      	cmp	r7, #8
    31fc:	d109      	bne.n	3212 <_printf_i+0x14e>
    31fe:	6823      	ldr	r3, [r4, #0]
    3200:	07db      	lsls	r3, r3, #31
    3202:	d506      	bpl.n	3212 <_printf_i+0x14e>
    3204:	6863      	ldr	r3, [r4, #4]
    3206:	6922      	ldr	r2, [r4, #16]
    3208:	4293      	cmp	r3, r2
    320a:	dc02      	bgt.n	3212 <_printf_i+0x14e>
    320c:	2330      	movs	r3, #48	; 0x30
    320e:	3e01      	subs	r6, #1
    3210:	7033      	strb	r3, [r6, #0]
    3212:	9b04      	ldr	r3, [sp, #16]
    3214:	1b9b      	subs	r3, r3, r6
    3216:	6123      	str	r3, [r4, #16]
    3218:	9b07      	ldr	r3, [sp, #28]
    321a:	0021      	movs	r1, r4
    321c:	9300      	str	r3, [sp, #0]
    321e:	9805      	ldr	r0, [sp, #20]
    3220:	9b06      	ldr	r3, [sp, #24]
    3222:	aa09      	add	r2, sp, #36	; 0x24
    3224:	f7ff fede 	bl	2fe4 <_printf_common>
    3228:	1c43      	adds	r3, r0, #1
    322a:	d135      	bne.n	3298 <_printf_i+0x1d4>
    322c:	2001      	movs	r0, #1
    322e:	4240      	negs	r0, r0
    3230:	b00b      	add	sp, #44	; 0x2c
    3232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3234:	2220      	movs	r2, #32
    3236:	6809      	ldr	r1, [r1, #0]
    3238:	430a      	orrs	r2, r1
    323a:	6022      	str	r2, [r4, #0]
    323c:	0022      	movs	r2, r4
    323e:	2178      	movs	r1, #120	; 0x78
    3240:	3245      	adds	r2, #69	; 0x45
    3242:	7011      	strb	r1, [r2, #0]
    3244:	4a27      	ldr	r2, [pc, #156]	; (32e4 <_printf_i+0x220>)
    3246:	e7a7      	b.n	3198 <_printf_i+0xd4>
    3248:	0648      	lsls	r0, r1, #25
    324a:	d5ac      	bpl.n	31a6 <_printf_i+0xe2>
    324c:	b2ad      	uxth	r5, r5
    324e:	e7aa      	b.n	31a6 <_printf_i+0xe2>
    3250:	681a      	ldr	r2, [r3, #0]
    3252:	680d      	ldr	r5, [r1, #0]
    3254:	1d10      	adds	r0, r2, #4
    3256:	6949      	ldr	r1, [r1, #20]
    3258:	6018      	str	r0, [r3, #0]
    325a:	6813      	ldr	r3, [r2, #0]
    325c:	062e      	lsls	r6, r5, #24
    325e:	d501      	bpl.n	3264 <_printf_i+0x1a0>
    3260:	6019      	str	r1, [r3, #0]
    3262:	e002      	b.n	326a <_printf_i+0x1a6>
    3264:	066d      	lsls	r5, r5, #25
    3266:	d5fb      	bpl.n	3260 <_printf_i+0x19c>
    3268:	8019      	strh	r1, [r3, #0]
    326a:	2300      	movs	r3, #0
    326c:	9e04      	ldr	r6, [sp, #16]
    326e:	6123      	str	r3, [r4, #16]
    3270:	e7d2      	b.n	3218 <_printf_i+0x154>
    3272:	681a      	ldr	r2, [r3, #0]
    3274:	1d11      	adds	r1, r2, #4
    3276:	6019      	str	r1, [r3, #0]
    3278:	6816      	ldr	r6, [r2, #0]
    327a:	2100      	movs	r1, #0
    327c:	0030      	movs	r0, r6
    327e:	6862      	ldr	r2, [r4, #4]
    3280:	f000 f832 	bl	32e8 <memchr>
    3284:	2800      	cmp	r0, #0
    3286:	d001      	beq.n	328c <_printf_i+0x1c8>
    3288:	1b80      	subs	r0, r0, r6
    328a:	6060      	str	r0, [r4, #4]
    328c:	6863      	ldr	r3, [r4, #4]
    328e:	6123      	str	r3, [r4, #16]
    3290:	2300      	movs	r3, #0
    3292:	9a04      	ldr	r2, [sp, #16]
    3294:	7013      	strb	r3, [r2, #0]
    3296:	e7bf      	b.n	3218 <_printf_i+0x154>
    3298:	6923      	ldr	r3, [r4, #16]
    329a:	0032      	movs	r2, r6
    329c:	9906      	ldr	r1, [sp, #24]
    329e:	9805      	ldr	r0, [sp, #20]
    32a0:	9d07      	ldr	r5, [sp, #28]
    32a2:	47a8      	blx	r5
    32a4:	1c43      	adds	r3, r0, #1
    32a6:	d0c1      	beq.n	322c <_printf_i+0x168>
    32a8:	6823      	ldr	r3, [r4, #0]
    32aa:	079b      	lsls	r3, r3, #30
    32ac:	d415      	bmi.n	32da <_printf_i+0x216>
    32ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    32b0:	68e0      	ldr	r0, [r4, #12]
    32b2:	4298      	cmp	r0, r3
    32b4:	dabc      	bge.n	3230 <_printf_i+0x16c>
    32b6:	0018      	movs	r0, r3
    32b8:	e7ba      	b.n	3230 <_printf_i+0x16c>
    32ba:	0022      	movs	r2, r4
    32bc:	2301      	movs	r3, #1
    32be:	9906      	ldr	r1, [sp, #24]
    32c0:	9805      	ldr	r0, [sp, #20]
    32c2:	9e07      	ldr	r6, [sp, #28]
    32c4:	3219      	adds	r2, #25
    32c6:	47b0      	blx	r6
    32c8:	1c43      	adds	r3, r0, #1
    32ca:	d0af      	beq.n	322c <_printf_i+0x168>
    32cc:	3501      	adds	r5, #1
    32ce:	68e3      	ldr	r3, [r4, #12]
    32d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    32d2:	1a9b      	subs	r3, r3, r2
    32d4:	42ab      	cmp	r3, r5
    32d6:	dcf0      	bgt.n	32ba <_printf_i+0x1f6>
    32d8:	e7e9      	b.n	32ae <_printf_i+0x1ea>
    32da:	2500      	movs	r5, #0
    32dc:	e7f7      	b.n	32ce <_printf_i+0x20a>
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	00003a61 	.word	0x00003a61
    32e4:	00003a72 	.word	0x00003a72

000032e8 <memchr>:
    32e8:	b2c9      	uxtb	r1, r1
    32ea:	1882      	adds	r2, r0, r2
    32ec:	4290      	cmp	r0, r2
    32ee:	d101      	bne.n	32f4 <memchr+0xc>
    32f0:	2000      	movs	r0, #0
    32f2:	4770      	bx	lr
    32f4:	7803      	ldrb	r3, [r0, #0]
    32f6:	428b      	cmp	r3, r1
    32f8:	d0fb      	beq.n	32f2 <memchr+0xa>
    32fa:	3001      	adds	r0, #1
    32fc:	e7f6      	b.n	32ec <memchr+0x4>

000032fe <memmove>:
    32fe:	b510      	push	{r4, lr}
    3300:	4288      	cmp	r0, r1
    3302:	d902      	bls.n	330a <memmove+0xc>
    3304:	188b      	adds	r3, r1, r2
    3306:	4298      	cmp	r0, r3
    3308:	d303      	bcc.n	3312 <memmove+0x14>
    330a:	2300      	movs	r3, #0
    330c:	e007      	b.n	331e <memmove+0x20>
    330e:	5c8b      	ldrb	r3, [r1, r2]
    3310:	5483      	strb	r3, [r0, r2]
    3312:	3a01      	subs	r2, #1
    3314:	d2fb      	bcs.n	330e <memmove+0x10>
    3316:	bd10      	pop	{r4, pc}
    3318:	5ccc      	ldrb	r4, [r1, r3]
    331a:	54c4      	strb	r4, [r0, r3]
    331c:	3301      	adds	r3, #1
    331e:	429a      	cmp	r2, r3
    3320:	d1fa      	bne.n	3318 <memmove+0x1a>
    3322:	e7f8      	b.n	3316 <memmove+0x18>

00003324 <_malloc_usable_size_r>:
    3324:	1f0b      	subs	r3, r1, #4
    3326:	681b      	ldr	r3, [r3, #0]
    3328:	1f18      	subs	r0, r3, #4
    332a:	2b00      	cmp	r3, #0
    332c:	da01      	bge.n	3332 <_malloc_usable_size_r+0xe>
    332e:	580b      	ldr	r3, [r1, r0]
    3330:	18c0      	adds	r0, r0, r3
    3332:	4770      	bx	lr

00003334 <__gnu_thumb1_case_shi>:
    3334:	b403      	push	{r0, r1}
    3336:	4671      	mov	r1, lr
    3338:	0849      	lsrs	r1, r1, #1
    333a:	0040      	lsls	r0, r0, #1
    333c:	0049      	lsls	r1, r1, #1
    333e:	5e09      	ldrsh	r1, [r1, r0]
    3340:	0049      	lsls	r1, r1, #1
    3342:	448e      	add	lr, r1
    3344:	bc03      	pop	{r0, r1}
    3346:	4770      	bx	lr
    3348:	000033e2 	.word	0x000033e2
    334c:	000002d5 	.word	0x000002d5
    3350:	00000067 	.word	0x00000067
    3354:	000033e7 	.word	0x000033e7
    3358:	000004bd 	.word	0x000004bd
    335c:	00000067 	.word	0x00000067
    3360:	000033ee 	.word	0x000033ee
    3364:	00000571 	.word	0x00000571
    3368:	00000067 	.word	0x00000067
    336c:	000033f5 	.word	0x000033f5
    3370:	00000649 	.word	0x00000649
    3374:	00000061 	.word	0x00000061
    3378:	000033fd 	.word	0x000033fd
    337c:	00000c41 	.word	0x00000c41
    3380:	00000067 	.word	0x00000067
    3384:	00003404 	.word	0x00003404
    3388:	0000039d 	.word	0x0000039d
    338c:	00000061 	.word	0x00000061
    3390:	00003409 	.word	0x00003409
    3394:	00000321 	.word	0x00000321
    3398:	00000061 	.word	0x00000061
    339c:	00000000 	.word	0x00000000
    33a0:	00000018 	.word	0x00000018
    33a4:	00000000 	.word	0x00000000
    33a8:	00000019 	.word	0x00000019
    33ac:	00000301 	.word	0x00000301
    33b0:	00000000 	.word	0x00000000
    33b4:	00000005 	.word	0x00000005
    33b8:	00000000 	.word	0x00000000
    33bc:	00000008 	.word	0x00000008
    33c0:	00000000 	.word	0x00000000
    33c4:	00000009 	.word	0x00000009
    33c8:	01010101 	.word	0x01010101
    33cc:	00000001 	.word	0x00000001
    33d0:	0000376d 	.word	0x0000376d
    33d4:	000015e9 	.word	0x000015e9
    33d8:	00000061 	.word	0x00000061
    33dc:	4c554e00 	.word	0x4c554e00
    33e0:	004c      	.short	0x004c
    33e2:	7865      	.short	0x7865
    33e4:	73006365 	.word	0x73006365
    33e8:	756e7465 	.word	0x756e7465
    33ec:	6564006d 	.word	0x6564006d
    33f0:	6d756e6c 	.word	0x6d756e6c
    33f4:	73696c00 	.word	0x73696c00
    33f8:	6d756e74 	.word	0x6d756e74
    33fc:	64707500 	.word	0x64707500
    3400:	00657461 	.word	0x00657461
    3404:	706c6568 	.word	0x706c6568
    3408:	74657300 	.word	0x74657300
    340c:	63707466 	.word	0x63707466
    3410:	73646572 	.word	0x73646572
    3414:	00          	.byte	0x00
    3415:	41          	.byte	0x41
    3416:	0054      	.short	0x0054
    3418:	432b5441 	.word	0x432b5441
    341c:	3d53474d 	.word	0x3d53474d
    3420:	22732522 	.word	0x22732522
    3424:	4d432b00 	.word	0x4d432b00
    3428:	1a005347 	.word	0x1a005347
    342c:	00          	.byte	0x00
    342d:	43          	.byte	0x43
    342e:	6d6f      	.short	0x6d6f
    3430:	646e616d 	.word	0x646e616d
    3434:	6d697420 	.word	0x6d697420
    3438:	6f206465 	.word	0x6f206465
    343c:	75007475 	.word	0x75007475
    3440:	2d747261 	.word	0x2d747261
    3444:	6165723e 	.word	0x6165723e
    3448:	20292864 	.word	0x20292864
    344c:	75746572 	.word	0x75746572
    3450:	64656e72 	.word	0x64656e72
    3454:	6c756e20 	.word	0x6c756e20
    3458:	006c      	.short	0x006c
    345a:	5441      	.short	0x5441
    345c:	4353462b 	.word	0x4353462b
    3460:	54414552 	.word	0x54414552
    3464:	3a433d45 	.word	0x3a433d45
    3468:	7074665c 	.word	0x7074665c
    346c:	7461642e 	.word	0x7461642e
    3470:	2b544100 	.word	0x2b544100
    3474:	52575346 	.word	0x52575346
    3478:	3d455449 	.word	0x3d455449
    347c:	665c3a43 	.word	0x665c3a43
    3480:	642e7074 	.word	0x642e7074
    3484:	302c7461 	.word	0x302c7461
    3488:	2c64252c 	.word	0x2c64252c
    348c:	72450031 	.word	0x72450031
    3490:	00726f72 	.word	0x00726f72
    3494:	0a0d      	.short	0x0a0d
    3496:	00          	.byte	0x00
    3497:	25          	.byte	0x25
    3498:	0a73      	.short	0x0a73
    349a:	00          	.byte	0x00
    349b:	41          	.byte	0x41
    349c:	53462b54 	.word	0x53462b54
    34a0:	44414552 	.word	0x44414552
    34a4:	5c3a433d 	.word	0x5c3a433d
    34a8:	742e7325 	.word	0x742e7325
    34ac:	302c7478 	.word	0x302c7478
    34b0:	302c312c 	.word	0x302c312c
    34b4:	00          	.byte	0x00
    34b5:	41          	.byte	0x41
    34b6:	2b54      	.short	0x2b54
    34b8:	52435346 	.word	0x52435346
    34bc:	45544145 	.word	0x45544145
    34c0:	5c3a433d 	.word	0x5c3a433d
    34c4:	742e7325 	.word	0x742e7325
    34c8:	41007478 	.word	0x41007478
    34cc:	53462b54 	.word	0x53462b54
    34d0:	54495257 	.word	0x54495257
    34d4:	3a433d45 	.word	0x3a433d45
    34d8:	2e73255c 	.word	0x2e73255c
    34dc:	2c747874 	.word	0x2c747874
    34e0:	2c312c30 	.word	0x2c312c30
    34e4:	0031      	.short	0x0031
    34e6:	616d      	.short	0x616d
    34e8:	636f6c6c 	.word	0x636f6c6c
    34ec:	69616620 	.word	0x69616620
    34f0:	0064656c 	.word	0x0064656c
    34f4:	67617355 	.word	0x67617355
    34f8:	73203a65 	.word	0x73203a65
    34fc:	756e7465 	.word	0x756e7465
    3500:	6e3c206d 	.word	0x6e3c206d
    3504:	65626d75 	.word	0x65626d75
    3508:	3c203e72 	.word	0x3c203e72
    350c:	6576656c 	.word	0x6576656c
    3510:	3e6c      	.short	0x3e6c
    3512:	00          	.byte	0x00
    3513:	41          	.byte	0x41
    3514:	53462b54 	.word	0x53462b54
    3518:	3d4c4544 	.word	0x3d4c4544
    351c:	255c3a43 	.word	0x255c3a43
    3520:	78742e73 	.word	0x78742e73
    3524:	0074      	.short	0x0074
    3526:	7355      	.short	0x7355
    3528:	3a656761 	.word	0x3a656761
    352c:	6c656420 	.word	0x6c656420
    3530:	206d756e 	.word	0x206d756e
    3534:	6d756e3c 	.word	0x6d756e3c
    3538:	3e726562 	.word	0x3e726562
    353c:	00          	.byte	0x00
    353d:	41          	.byte	0x41
    353e:	2b54      	.short	0x2b54
    3540:	534c5346 	.word	0x534c5346
    3544:	5c3a433d 	.word	0x5c3a433d
    3548:	00          	.byte	0x00
    3549:	4c          	.byte	0x4c
    354a:	7369      	.short	0x7369
    354c:	000a3a74 	.word	0x000a3a74
    3550:	203a7325 	.word	0x203a7325
    3554:	000a6325 	.word	0x000a6325
    3558:	30455441 	.word	0x30455441
    355c:	52432b00 	.word	0x52432b00
    3560:	203a4745 	.word	0x203a4745
    3564:	00312c30 	.word	0x00312c30
    3568:	432b5441 	.word	0x432b5441
    356c:	3f474552 	.word	0x3f474552
    3570:	2b544100 	.word	0x2b544100
    3574:	46474d43 	.word	0x46474d43
    3578:	4100313d 	.word	0x4100313d
    357c:	4d432b54 	.word	0x4d432b54
    3580:	3d414447 	.word	0x3d414447
    3584:	4c454422 	.word	0x4c454422
    3588:	4c4c4120 	.word	0x4c4c4120
    358c:	70550022 	.word	0x70550022
    3590:	65746164 	.word	0x65746164
    3594:	63757320 	.word	0x63757320
    3598:	73736563 	.word	0x73736563
    359c:	2c6c7566 	.word	0x2c6c7566
    35a0:	72657620 	.word	0x72657620
    35a4:	6e6f6973 	.word	0x6e6f6973
    35a8:	302e3120 	.word	0x302e3120
    35ac:	69756220 	.word	0x69756220
    35b0:	4d20746c 	.word	0x4d20746c
    35b4:	31207961 	.word	0x31207961
    35b8:	30322031 	.word	0x30322031
    35bc:	31203032 	.word	0x31203032
    35c0:	37323a39 	.word	0x37323a39
    35c4:	0031343a 	.word	0x0031343a
    35c8:	432b5441 	.word	0x432b5441
    35cc:	3d52474d 	.word	0x3d52474d
    35d0:	2b006425 	.word	0x2b006425
    35d4:	52474d43 	.word	0x52474d43
    35d8:	0d0a0d00 	.word	0x0d0a0d00
    35dc:	004b4f0a 	.word	0x004b4f0a
    35e0:	222c      	.short	0x222c
    35e2:	00          	.byte	0x00
    35e3:	52          	.byte	0x52
    35e4:	00474e49 	.word	0x00474e49
    35e8:	00485441 	.word	0x00485441
    35ec:	544d432b 	.word	0x544d432b
    35f0:	0049      	.short	0x0049
    35f2:	5441      	.short	0x5441
    35f4:	5041532b 	.word	0x5041532b
    35f8:	333d5242 	.word	0x333d5242
    35fc:	222c312c 	.word	0x222c312c
    3600:	224e5041 	.word	0x224e5041
    3604:	6e69222c 	.word	0x6e69222c
    3608:	6e726574 	.word	0x6e726574
    360c:	00227465 	.word	0x00227465
    3610:	532b5441 	.word	0x532b5441
    3614:	52425041 	.word	0x52425041
    3618:	312c313d 	.word	0x312c313d
    361c:	41532b00 	.word	0x41532b00
    3620:	3a524250 	.word	0x3a524250
    3624:	312c3120 	.word	0x312c3120
    3628:	2b544100 	.word	0x2b544100
    362c:	42504153 	.word	0x42504153
    3630:	2c323d52 	.word	0x2c323d52
    3634:	54410031 	.word	0x54410031
    3638:	5041532b 	.word	0x5041532b
    363c:	303d5242 	.word	0x303d5242
    3640:	312c      	.short	0x312c
    3642:	00          	.byte	0x00
    3643:	41          	.byte	0x41
    3644:	53462b54 	.word	0x53462b54
    3648:	44414552 	.word	0x44414552
    364c:	5c3a433d 	.word	0x5c3a433d
    3650:	2e707466 	.word	0x2e707466
    3654:	2c746164 	.word	0x2c746164
    3658:	34362c30 	.word	0x34362c30
    365c:	2000302c 	.word	0x2000302c
    3660:	5441000d 	.word	0x5441000d
    3664:	5054462b 	.word	0x5054462b
    3668:	56524553 	.word	0x56524553
    366c:	5441003d 	.word	0x5441003d
    3670:	5054462b 	.word	0x5054462b
    3674:	003d4e55 	.word	0x003d4e55
    3678:	462b5441 	.word	0x462b5441
    367c:	57505054 	.word	0x57505054
    3680:	003d      	.short	0x003d
    3682:	5441      	.short	0x5441
    3684:	5054462b 	.word	0x5054462b
    3688:	50545550 	.word	0x50545550
    368c:	3d485441 	.word	0x3d485441
    3690:	5441002f 	.word	0x5441002f
    3694:	5054462b 	.word	0x5054462b
    3698:	4e545550 	.word	0x4e545550
    369c:	3d454d41 	.word	0x3d454d41
    36a0:	2b544100 	.word	0x2b544100
    36a4:	50505446 	.word	0x50505446
    36a8:	504f5455 	.word	0x504f5455
    36ac:	41223d54 	.word	0x41223d54
    36b0:	22455050 	.word	0x22455050
    36b4:	2b544100 	.word	0x2b544100
    36b8:	50505446 	.word	0x50505446
    36bc:	313d5455 	.word	0x313d5455
    36c0:	54462b00 	.word	0x54462b00
    36c4:	54555050 	.word	0x54555050
    36c8:	2c31203a 	.word	0x2c31203a
    36cc:	41002c31 	.word	0x41002c31
    36d0:	54462b54 	.word	0x54462b54
    36d4:	54555050 	.word	0x54555050
    36d8:	252c323d 	.word	0x252c323d
    36dc:	462b0064 	.word	0x462b0064
    36e0:	55505054 	.word	0x55505054
    36e4:	31203a54 	.word	0x31203a54
    36e8:	4100302c 	.word	0x4100302c
    36ec:	54462b54 	.word	0x54462b54
    36f0:	54555050 	.word	0x54555050
    36f4:	302c323d 	.word	0x302c323d
    36f8:	00          	.byte	0x00
    36f9:	41          	.byte	0x41
    36fa:	2b54      	.short	0x2b54
    36fc:	47505446 	.word	0x47505446
    3700:	41505445 	.word	0x41505445
    3704:	2f3d4854 	.word	0x2f3d4854
    3708:	2b544100 	.word	0x2b544100
    370c:	47505446 	.word	0x47505446
    3710:	414e5445 	.word	0x414e5445
    3714:	753d454d 	.word	0x753d454d
    3718:	74616470 	.word	0x74616470
    371c:	69622e65 	.word	0x69622e65
    3720:	5441006e 	.word	0x5441006e
    3724:	5054462b 	.word	0x5054462b
    3728:	54544547 	.word	0x54544547
    372c:	3d53464f 	.word	0x3d53464f
    3730:	70752c30 	.word	0x70752c30
    3734:	65746164 	.word	0x65746164
    3738:	6e69622e 	.word	0x6e69622e
    373c:	54462b00 	.word	0x54462b00
    3740:	54454750 	.word	0x54454750
    3744:	53464f54 	.word	0x53464f54
    3748:	2c30203a 	.word	0x2c30203a
    374c:	00          	.byte	0x00
    374d:	55          	.byte	0x55
    374e:	6470      	.short	0x6470
    3750:	20657461 	.word	0x20657461
    3754:	6c696166 	.word	0x6c696166
    3758:	6465      	.short	0x6465
	...

0000375b <_ZL10child_pipe>:
    375b:	0b0a 0d0c 0f0e                              ......

00003761 <_ZL17child_pipe_enable>:
    3761:	0100 0302 0504                              ......

00003767 <_ZL18child_payload_size>:
    3767:	1211 1413 1615 6e69 6f66 4e00 646f 3a65     ......info.Node:
    3777:	200a 4449 203a 6425 200a 614e 656d 203a     . ID: %d. Name: 
    3787:	7325 200a 7954 6570 203a 6425 200a 614c     %s. Type: %d. La
    3797:	7473 7320 6565 3a6e 2520 2064 6573 2063     st seen: %d sec 
    37a7:	6761 0a6f 2000 6f53 6c69 6d20 696f 7473     ago.. Soil moist
    37b7:	7275 2065 6573 736e 726f 0a3a 2020 6f4d     ure sensor:.  Mo
    37c7:	7369 7574 6572 203a 6425 000a 5420 6d65     isture: %d.. Tem
    37d7:	6570 6172 7574 6572 2b20 6820 6d75 6469     perature + humid
    37e7:	7469 2079 6573 736e 726f 0a3a 2020 6554     ity sensor:.  Te
    37f7:	706d 7265 7461 7275 3a65 2520 0a64 2020     mperature: %d.  
    3807:	7548 696d 6964 7974 203a 6425 000a 5420     Humidity: %d.. T
    3817:	6d65 6570 6172 7574 6572 7320 6e65 6f73     emperature senso
    3827:	3a72 200a 5420 6d65 6570 6172 7574 6572     r:.  Temperature
    3837:	203a 6425 000a 432b 4c43 3a4b 0020 5441     : %d..+CCLK: .AT
    3847:	432b 4c43 3f4b 7300 7465 616e 656d 6300     +CCLK?.setname.c
    3857:	656c 7261 2500 3230 2f64 3025 6432 252f     lear.%02d/%02d/%
    3867:	3230 2064 3025 6432 253a 3230 2064 202d     02d %02d:%02d - 
    3877:	4449 2520 2064 616e 656d 2520 382e 2073     ID %d name %.8s 
    3887:	7974 6570 2520 0064 7620 6c61 6575 2520     type %d. value %
    3897:	0064 7620 6c6f 6174 6567 2520 2064 696c     d. voltage %d li
    38a7:	6867 2074 6425 7220 6961 206e 6425 6400     ght %d rain %d.d
    38b7:	7461 2e61 7874 0074 7355 6761 3a65 7320     ata.txt.Usage: s
    38c7:	7465 616e 656d 3c20 6469 203e 6e3c 7765     etname <id> <new
    38d7:	6e20 6d61 3e65 4300 6d6f 616d 646e 7120      name>.Command q
    38e7:	6575 6575 0064                              ueued.

000038ed <_ctype_>:
    38ed:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    38fd:	2020 2020 2020 2020 2020 2020 2020 2020                     
    390d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    391d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    392d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    393d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    394d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    395d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    396d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
    39ed:	ff00                                         ...

000039f0 <__sf_fake_stderr>:
	...

00003a10 <__sf_fake_stdin>:
	...

00003a30 <__sf_fake_stdout>:
	...
    3a50:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    3a60:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    3a70:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    3a80:	6665 ff00                                   ef..

00003a84 <_init>:
    3a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a86:	46c0      	nop			; (mov r8, r8)
    3a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3a8a:	bc08      	pop	{r3}
    3a8c:	469e      	mov	lr, r3
    3a8e:	4770      	bx	lr

00003a90 <__init_array_start>:
    3a90:	000000b5 	.word	0x000000b5
    3a94:	00001a05 	.word	0x00001a05
    3a98:	00001be9 	.word	0x00001be9
    3a9c:	000020d5 	.word	0x000020d5

00003aa0 <_fini>:
    3aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aa2:	46c0      	nop			; (mov r8, r8)
    3aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3aa6:	bc08      	pop	{r3}
    3aa8:	469e      	mov	lr, r3
    3aaa:	4770      	bx	lr
    3aac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00003ab0 <___ZN3GSM11WriteUpdateEv_veneer>:
    3ab0:	b401      	push	{r0}
    3ab2:	4802      	ldr	r0, [pc, #8]	; (3abc <___ZN3GSM11WriteUpdateEv_veneer+0xc>)
    3ab4:	4684      	mov	ip, r0
    3ab6:	bc01      	pop	{r0}
    3ab8:	4760      	bx	ip
    3aba:	bf00      	nop
    3abc:	20000099 	.word	0x20000099

00003ac0 <__delay_usec_veneer>:
    3ac0:	b401      	push	{r0}
    3ac2:	4802      	ldr	r0, [pc, #8]	; (3acc <__delay_usec_veneer+0xc>)
    3ac4:	4684      	mov	ip, r0
    3ac6:	bc01      	pop	{r0}
    3ac8:	4760      	bx	ip
    3aca:	bf00      	nop
    3acc:	200001a1 	.word	0x200001a1

00003ad0 <__fini_array_start>:
    3ad0:	0000008d 	.word	0x0000008d

Disassembly of section .data:

20000000 <_ZN3GSM13RAMFunc_writeEc>:
    NVIC_SystemReset();
    while(1);
}

void GSM::RAMFunc_write(const char c) {
    m_uart->m_sercom->USART.DATA.reg = c;
20000000:	2382      	movs	r3, #130	; 0x82
20000002:	6882      	ldr	r2, [r0, #8]
20000004:	009b      	lsls	r3, r3, #2
20000006:	58d2      	ldr	r2, [r2, r3]
20000008:	8511      	strh	r1, [r2, #40]	; 0x28
	while(!m_uart->m_sercom->USART.INTFLAG.bit.DRE);
2000000a:	6882      	ldr	r2, [r0, #8]
2000000c:	58d2      	ldr	r2, [r2, r3]
2000000e:	7e13      	ldrb	r3, [r2, #24]
20000010:	07db      	lsls	r3, r3, #31
20000012:	d5fc      	bpl.n	2000000e <_ZN3GSM13RAMFunc_writeEc+0xe>
}
20000014:	4770      	bx	lr

20000016 <_ZN3GSM13RAMFunc_printEPKc>:

void GSM::RAMFunc_print(const char* c) {
20000016:	b570      	push	{r4, r5, r6, lr}
20000018:	0005      	movs	r5, r0
2000001a:	000c      	movs	r4, r1
    while(*c) RAMFunc_write(*c++);
2000001c:	7821      	ldrb	r1, [r4, #0]
2000001e:	2900      	cmp	r1, #0
20000020:	d004      	beq.n	2000002c <_ZN3GSM13RAMFunc_printEPKc+0x16>
20000022:	0028      	movs	r0, r5
20000024:	3401      	adds	r4, #1
20000026:	f7ff ffeb 	bl	20000000 <_ZN3GSM13RAMFunc_writeEc>
2000002a:	e7f7      	b.n	2000001c <_ZN3GSM13RAMFunc_printEPKc+0x6>
}
2000002c:	bd70      	pop	{r4, r5, r6, pc}

2000002e <_ZN3GSM17RAMFunc_print_intEt>:

static uint16_t subtractors[] = {10000, 1000, 100, 10, 1};
void GSM::RAMFunc_print_int(uint16_t u) {
2000002e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20000030:	0007      	movs	r7, r0
20000032:	000c      	movs	r4, r1
	char n;
	uint16_t *sub = subtractors;
	uint8_t  i = 5;
20000034:	2305      	movs	r3, #5
	uint16_t *sub = subtractors;
20000036:	4e0f      	ldr	r6, [pc, #60]	; (20000074 <_ZN3GSM17RAMFunc_print_intEt+0x46>)
	while (i > 1 && u < *sub) {
20000038:	8832      	ldrh	r2, [r6, #0]
2000003a:	001d      	movs	r5, r3
2000003c:	3b01      	subs	r3, #1
2000003e:	b2db      	uxtb	r3, r3
20000040:	42a2      	cmp	r2, r4
20000042:	d80c      	bhi.n	2000005e <_ZN3GSM17RAMFunc_print_intEt+0x30>
		i--;
		sub++;
	}
	while (i--) {
20000044:	3d01      	subs	r5, #1
20000046:	b2ed      	uxtb	r5, r5
20000048:	2dff      	cmp	r5, #255	; 0xff
2000004a:	d012      	beq.n	20000072 <_ZN3GSM17RAMFunc_print_intEt+0x44>
		n = '0';
2000004c:	2130      	movs	r1, #48	; 0x30
		while (u >= *sub) {
2000004e:	8833      	ldrh	r3, [r6, #0]
20000050:	42a3      	cmp	r3, r4
20000052:	d809      	bhi.n	20000068 <_ZN3GSM17RAMFunc_print_intEt+0x3a>
			u -= *sub;
20000054:	1ae4      	subs	r4, r4, r3
			n++;
20000056:	3101      	adds	r1, #1
			u -= *sub;
20000058:	b2a4      	uxth	r4, r4
			n++;
2000005a:	b2c9      	uxtb	r1, r1
		while (u >= *sub) {
2000005c:	e7f8      	b.n	20000050 <_ZN3GSM17RAMFunc_print_intEt+0x22>
		sub++;
2000005e:	3602      	adds	r6, #2
	while (i > 1 && u < *sub) {
20000060:	2b01      	cmp	r3, #1
20000062:	d1e9      	bne.n	20000038 <_ZN3GSM17RAMFunc_print_intEt+0xa>
20000064:	001d      	movs	r5, r3
20000066:	e7ed      	b.n	20000044 <_ZN3GSM17RAMFunc_print_intEt+0x16>
		}
		RAMFunc_write(n);
20000068:	0038      	movs	r0, r7
2000006a:	f7ff ffc9 	bl	20000000 <_ZN3GSM13RAMFunc_writeEc>
		sub++;
2000006e:	3602      	adds	r6, #2
	while (i--) {
20000070:	e7e8      	b.n	20000044 <_ZN3GSM17RAMFunc_print_intEt+0x16>
	}
}
20000072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000074:	200001b0 	.word	0x200001b0

20000078 <_ZN3GSM15RAMFunc_wait_rxEv>:

bool GSM::RAMFunc_wait_rx() {
    int timeout = 0;
    while(!m_uart->m_sercom->USART.INTFLAG.bit.RXC) {
20000078:	2382      	movs	r3, #130	; 0x82
2000007a:	6882      	ldr	r2, [r0, #8]
2000007c:	009b      	lsls	r3, r3, #2
2000007e:	58d1      	ldr	r1, [r2, r3]
20000080:	4a04      	ldr	r2, [pc, #16]	; (20000094 <_ZN3GSM15RAMFunc_wait_rxEv+0x1c>)
20000082:	7e0b      	ldrb	r3, [r1, #24]
20000084:	075b      	lsls	r3, r3, #29
20000086:	0fd8      	lsrs	r0, r3, #31
20000088:	2b00      	cmp	r3, #0
2000008a:	db02      	blt.n	20000092 <_ZN3GSM15RAMFunc_wait_rxEv+0x1a>
        if(timeout++ >= 1000000) return false;
2000008c:	3a01      	subs	r2, #1
2000008e:	2a00      	cmp	r2, #0
20000090:	d1f7      	bne.n	20000082 <_ZN3GSM15RAMFunc_wait_rxEv+0xa>
    }
    return true;
20000092:	4770      	bx	lr
20000094:	000f4241 	.word	0x000f4241

20000098 <_ZN3GSM11WriteUpdateEv>:
__always_inline void flash_write_dword(uint32_t data, uint32_t addr) {
    *(uint32_t*)(addr) = data;
}

__always_inline void flash_setup_write() {
    NVMCTRL->CTRLB.bit.MANW = 0;
20000098:	2180      	movs	r1, #128	; 0x80
void GSM::WriteUpdate() {
2000009a:	b5f0      	push	{r4, r5, r6, r7, lr}
2000009c:	4b3b      	ldr	r3, [pc, #236]	; (2000018c <_ZN3GSM11WriteUpdateEv+0xf4>)
                (void)m_uart->m_sercom->USART.DATA.reg; // Clear RXC flag
2000009e:	2782      	movs	r7, #130	; 0x82
200000a0:	685a      	ldr	r2, [r3, #4]
void GSM::WriteUpdate() {
200000a2:	0004      	movs	r4, r0
200000a4:	438a      	bics	r2, r1
200000a6:	605a      	str	r2, [r3, #4]
200000a8:	2200      	movs	r2, #0
200000aa:	b087      	sub	sp, #28
200000ac:	9201      	str	r2, [sp, #4]
200000ae:	3201      	adds	r2, #1
200000b0:	32ff      	adds	r2, #255	; 0xff
200000b2:	9203      	str	r2, [sp, #12]
200000b4:	9304      	str	r3, [sp, #16]
                (void)m_uart->m_sercom->USART.DATA.reg; // Clear RXC flag
200000b6:	00bf      	lsls	r7, r7, #2
        flash_erase_page((row * FLASH_PAGE_SIZE * 4) >> 1); // shift right for some reason
200000b8:	9b01      	ldr	r3, [sp, #4]
    NVMCTRL->ADDR.reg = addr;
200000ba:	9a04      	ldr	r2, [sp, #16]
200000bc:	019d      	lsls	r5, r3, #6
200000be:	086b      	lsrs	r3, r5, #1
200000c0:	61d3      	str	r3, [r2, #28]
    NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
200000c2:	4b33      	ldr	r3, [pc, #204]	; (20000190 <_ZN3GSM11WriteUpdateEv+0xf8>)
200000c4:	9a04      	ldr	r2, [sp, #16]
200000c6:	8013      	strh	r3, [r2, #0]
            for(unsigned int i = 0; i < FLASH_PAGE_SIZE; i++) {
200000c8:	2600      	movs	r6, #0
            RAMFunc_print(fsread);
200000ca:	0020      	movs	r0, r4
200000cc:	4931      	ldr	r1, [pc, #196]	; (20000194 <_ZN3GSM11WriteUpdateEv+0xfc>)
200000ce:	f7ff ffa2 	bl	20000016 <_ZN3GSM13RAMFunc_printEPKc>
            RAMFunc_print_int(row * FLASH_PAGE_SIZE * 4 + page * FLASH_PAGE_SIZE);
200000d2:	0020      	movs	r0, r4
200000d4:	b2a9      	uxth	r1, r5
200000d6:	f7ff ffaa 	bl	2000002e <_ZN3GSM17RAMFunc_print_intEt>
            RAMFunc_write('\r');
200000da:	210d      	movs	r1, #13
200000dc:	0020      	movs	r0, r4
200000de:	f7ff ff8f 	bl	20000000 <_ZN3GSM13RAMFunc_writeEc>
                RAMFunc_wait_rx();
200000e2:	0020      	movs	r0, r4
200000e4:	f7ff ffc8 	bl	20000078 <_ZN3GSM15RAMFunc_wait_rxEv>
                (void)m_uart->m_sercom->USART.DATA.reg; // Clear RXC flag
200000e8:	68a3      	ldr	r3, [r4, #8]
                RAMFunc_wait_rx();
200000ea:	0020      	movs	r0, r4
                (void)m_uart->m_sercom->USART.DATA.reg; // Clear RXC flag
200000ec:	59db      	ldr	r3, [r3, r7]
200000ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
                RAMFunc_wait_rx();
200000f0:	f7ff ffc2 	bl	20000078 <_ZN3GSM15RAMFunc_wait_rxEv>
                (void)m_uart->m_sercom->USART.DATA.reg; // Clear RXC flag
200000f4:	0030      	movs	r0, r6
200000f6:	68a3      	ldr	r3, [r4, #8]
200000f8:	59db      	ldr	r3, [r3, r7]
200000fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
            for(unsigned int i = 0; i < FLASH_PAGE_SIZE; i++) {
200000fc:	1eeb      	subs	r3, r5, #3
200000fe:	9305      	str	r3, [sp, #20]
                if(!done) done = !RAMFunc_wait_rx();
20000100:	2800      	cmp	r0, #0
20000102:	d105      	bne.n	20000110 <_ZN3GSM11WriteUpdateEv+0x78>
20000104:	0020      	movs	r0, r4
20000106:	f7ff ffb7 	bl	20000078 <_ZN3GSM15RAMFunc_wait_rxEv>
2000010a:	2301      	movs	r3, #1
2000010c:	4058      	eors	r0, r3
2000010e:	b2c0      	uxtb	r0, r0
                acc &= ~(0xFF << ((i & 3) * 8));
20000110:	2203      	movs	r2, #3
20000112:	23ff      	movs	r3, #255	; 0xff
20000114:	4032      	ands	r2, r6
20000116:	00d1      	lsls	r1, r2, #3
20000118:	408b      	lsls	r3, r1
2000011a:	4694      	mov	ip, r2
2000011c:	9a02      	ldr	r2, [sp, #8]
2000011e:	439a      	bics	r2, r3
20000120:	9202      	str	r2, [sp, #8]
                if(!done) acc |= uint8_t(m_uart->m_sercom->USART.DATA.reg) << ((i & 3) * 8);
20000122:	2800      	cmp	r0, #0
20000124:	d106      	bne.n	20000134 <_ZN3GSM11WriteUpdateEv+0x9c>
20000126:	68a3      	ldr	r3, [r4, #8]
20000128:	59db      	ldr	r3, [r3, r7]
2000012a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000012c:	b2db      	uxtb	r3, r3
2000012e:	408b      	lsls	r3, r1
20000130:	431a      	orrs	r2, r3
20000132:	9202      	str	r2, [sp, #8]
                if((i & 3) == 3) *(uint32_t*)(row * FLASH_PAGE_SIZE * 4 + page * FLASH_PAGE_SIZE + i - 3) = acc;
20000134:	4663      	mov	r3, ip
20000136:	2b03      	cmp	r3, #3
20000138:	d102      	bne.n	20000140 <_ZN3GSM11WriteUpdateEv+0xa8>
2000013a:	9b05      	ldr	r3, [sp, #20]
2000013c:	9a02      	ldr	r2, [sp, #8]
2000013e:	519a      	str	r2, [r3, r6]
            for(unsigned int i = 0; i < FLASH_PAGE_SIZE; i++) {
20000140:	3601      	adds	r6, #1
20000142:	2e40      	cmp	r6, #64	; 0x40
20000144:	d1dc      	bne.n	20000100 <_ZN3GSM11WriteUpdateEv+0x68>
            if(done) break;
20000146:	2800      	cmp	r0, #0
20000148:	d118      	bne.n	2000017c <_ZN3GSM11WriteUpdateEv+0xe4>
            while(RAMFunc_wait_rx()) (void)m_uart->m_sercom->USART.DATA.reg;
2000014a:	0020      	movs	r0, r4
2000014c:	f7ff ff94 	bl	20000078 <_ZN3GSM15RAMFunc_wait_rxEv>
20000150:	2800      	cmp	r0, #0
20000152:	d003      	beq.n	2000015c <_ZN3GSM11WriteUpdateEv+0xc4>
20000154:	68a3      	ldr	r3, [r4, #8]
20000156:	59db      	ldr	r3, [r3, r7]
20000158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000015a:	e7f6      	b.n	2000014a <_ZN3GSM11WriteUpdateEv+0xb2>
        for(unsigned int page = 0; page < 4; page++) {
2000015c:	9b03      	ldr	r3, [sp, #12]
2000015e:	3540      	adds	r5, #64	; 0x40
20000160:	42ab      	cmp	r3, r5
20000162:	d1b1      	bne.n	200000c8 <_ZN3GSM11WriteUpdateEv+0x30>
    for(unsigned int row = 0; row < FLASH_SIZE / (FLASH_PAGE_SIZE * 4); row++) {
20000164:	9b03      	ldr	r3, [sp, #12]
20000166:	3301      	adds	r3, #1
20000168:	33ff      	adds	r3, #255	; 0xff
2000016a:	9303      	str	r3, [sp, #12]
2000016c:	9b01      	ldr	r3, [sp, #4]
2000016e:	3304      	adds	r3, #4
20000170:	9301      	str	r3, [sp, #4]
20000172:	2380      	movs	r3, #128	; 0x80
20000174:	9a01      	ldr	r2, [sp, #4]
20000176:	005b      	lsls	r3, r3, #1
20000178:	429a      	cmp	r2, r3
2000017a:	d19d      	bne.n	200000b8 <_ZN3GSM11WriteUpdateEv+0x20>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
2000017c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
20000180:	4b05      	ldr	r3, [pc, #20]	; (20000198 <_ZN3GSM11WriteUpdateEv+0x100>)
20000182:	4a06      	ldr	r2, [pc, #24]	; (2000019c <_ZN3GSM11WriteUpdateEv+0x104>)
20000184:	60da      	str	r2, [r3, #12]
20000186:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
2000018a:	e7fe      	b.n	2000018a <_ZN3GSM11WriteUpdateEv+0xf2>
2000018c:	41004000 	.word	0x41004000
20000190:	ffffa502 	.word	0xffffa502
20000194:	200001ba 	.word	0x200001ba
20000198:	e000ed00 	.word	0xe000ed00
2000019c:	05fa0004 	.word	0x05fa0004

200001a0 <delay_usec>:
	__asm (
200001a0:	210f      	movs	r1, #15

200001a2 <mydelay1>:
200001a2:	3901      	subs	r1, #1
200001a4:	d1fd      	bne.n	200001a2 <mydelay1>
200001a6:	3801      	subs	r0, #1
200001a8:	d1fa      	bne.n	200001a0 <delay_usec>
}
200001aa:	4770      	bx	lr

200001ac <__dso_handle>:
200001ac:	0000 0000                                   ....

200001b0 <_ZL11subtractors>:
200001b0:	2710 03e8 0064 000a 0001                    .'..d.....

200001ba <_ZL6fsread>:
200001ba:	5441 462b 5253 4145 3d44 3a43 555c 6573     AT+FSREAD=C:\Use
200001ca:	5c72 5446 5c50 7075 6164 6574 622e 6e69     r\FTP\update.bin
200001da:	312c 362c 2c34 ff00 ffff                    ,1,64,....

200001e4 <_ZL9rtc_count>:
200001e4:	000a 0000                                   ....

200001e8 <_ZN3Str11EmptyBufferE>:
200001e8:	33dc 0000                                   .3..

200001ec <_impure_ptr>:
200001ec:	01f0 2000                                   ... 

200001f0 <impure_data>:
200001f0:	0000 0000 3a10 0000 3a30 0000 39f0 0000     .....:..0:...9..
	...
