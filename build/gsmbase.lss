
build/gsmbase.elf:     file format elf32-littlearm
build/gsmbase.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001c1d

Program Header:
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00002e04 memsz 0x00002e04 flags r-x
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x00002e04 align 2**16
         filesz 0x00000078 memsz 0x0000051c flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e04  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  20000000  00002e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004a4  20000078  00002e7c  00020078  2**3
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  4 .comment      00000079  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  5 .debug_info   000341dd  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003ba5  00000000  00000000  000542f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00005999  00000000  00000000  00057e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000588  00000000  00000000  0005d834  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000960  00000000  00000000  0005ddbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005c2f  00000000  00000000  0005e71c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000dd56  00000000  00000000  0006434b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001820  00000000  00000000  000720a4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000078 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_samd10.c
00000000 l    df *ABS*	00000000 crtstuff.c
0000008c l     F .text	00000000 __do_global_dtors_aux
20000078 l       .bss	00000001 completed.8911
00002e00 l     O .text	00000000 __do_global_dtors_aux_fini_array_entry
000000b4 l     F .text	00000000 frame_dummy
2000007c l       .bss	00000018 object.8916
00002dd4 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 GSM.cpp
000000d4 l     F .text	0000001c _ZL8find_numPKc
000005d8 l     F .text	00000054 _ZL9func_execP3GSMPKcS2_
00000000 l    df *ABS*	00000000 RF24.cpp
00002b40 l     O .text	00000006 _ZL10child_pipe
00002b48 l     O .text	00000006 _ZL17child_pipe_enable
00002b50 l     O .text	00000006 _ZL18child_payload_size
00000000 l    df *ABS*	00000000 main.cpp
00000c9c l     F .text	00000078 _Z41__static_initialization_and_destruction_0ii
00000e28 l     F .text	000000fc _ZL8cmd_infoP3GSMPKcS2_
00001030 l     F .text	00000010 _GLOBAL__sub_I__ZN3Str11EmptyBufferE
20000094 l     O .bss	00000014 _ZL3gsm
200000a8 l     O .bss	00000030 _ZL3net
00000000 l    df *ABS*	00000000 spi.cpp
00001288 l     F .text	00000034 _Z41__static_initialization_and_destruction_0ii
000012dc l     F .text	00000010 _GLOBAL__sub_I_g_spi0
00000000 l    df *ABS*	00000000 systick.c
000012ec l     F .text	00000144 initializeSystemFor48MHz
20000000 l       .data	00000000 mydelay
20000002 l       .data	00000000 mydelay1
200000e0 l     O .bss	00000008 _cycles
00000000 l    df *ABS*	00000000 uart.cpp
000014c4 l     F .text	00000058 _Z41__static_initialization_and_destruction_0ii
000019e0 l     F .text	00000010 _GLOBAL__sub_I_g_uart0
00000000 l    df *ABS*	00000000 sensornet.cpp
00000000 l    df *ABS*	00000000 syscalls.c
20000500 l     O .bss	00000004 heap.4639
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _udivsi3.o
00001cf4 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strtol.c
000021bc l     F .text	00000104 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 _thumb1_case_shi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/desktop/desktop/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00002df0 l     F .text	00000010 __delay_usec_veneer
0000081e g     F .text	0000000a _ZN4RF2410get_statusEv
000029bc g     F .text	00000010 _malloc_usable_size_r
00000aa2 g     F .text	0000002e _ZN4RF2410setPALevelEh
0000073c g     F .text	00000034 _ZN4RF2414write_registerEhh
000009cc g     F .text	00000064 _ZN4RF2414startListeningEv
000019f0 g     F .text	00000118 _ZN9SensornetC1ERK4RF24
00000294 g     F .text	00000098 _ZN3GSM7PowerOnEv
00001c1a  w    F .text	00000002 DMAC_Handler
2000050c g     O .bss	00000001 __lock___atexit_recursive_mutex
00001c1a  w    F .text	00000002 HardFault_Handler
00001c1a  w    F .text	00000002 TC2_Handler
000008da g     F .text	0000000a _ZN4RF249availableEv
0000235c g     F .text	00000010 __malloc_unlock
00001c1a  w    F .text	00000002 AC_Handler
000014a8 g     F .text	0000001c SysTick_Handler
2000050d g     O .bss	00000001 __lock___arc4random_mutex
00002996 g     F .text	00000026 memmove
00001c1a  w    F .text	00000002 PendSV_Handler
000020a0 g     F .text	00000068 snprintf
00001c1a  w    F .text	00000002 NMI_Handler
00000d94 g     F .text	00000060 _ZN3Str13appendfv_fromEiPKcSt9__va_list
00000000 g       .text	00000000 _sfixed
000019d0 g     F .text	00000010 SERCOM1_Handler
00001c1a  w    F .text	00000002 ADC_Handler
20000518 g     O .bss	00000004 errno
00002e04 g       .data	00000000 _etext
00000828 g     F .text	0000003e _ZN4RF24C2E6gpio_tS0_R5spi_t
20001000 g       .text	00000000 __top_ram
00001ef4 g     F .text	00000012 memcpy
0000018c g     F .text	00000012 _ZN3GSMD1Ev
0000247c g     F .text	00000200 _svfprintf_r
00001c1a  w    F .text	00000002 SERCOM2_Handler
00002e04 g       .text	00000000 __fini_array_end
00001c1a  w    F .text	00000002 TCC0_Handler
00000814 g     F .text	0000000a _ZN4RF248flush_txEv
00001ecc g     F .text	00000014 malloc
00000878 g     F .text	0000000c _ZN4RF2414setPayloadSizeEh
00001cf4 g     F .text	0000010a .hidden __udivsi3
0000180c g     F .text	0000008c _ZN6uart_t4peekEi
00001c1a  w    F .text	00000002 RTC_Handler
00002330 g     F .text	00000018 vsnprintf
00000408 g     F .text	000000b8 _ZN3GSM7ReadSMSEi
2000000c g     O .data	00000000 .hidden __dso_handle
000017a0 g     F .text	0000002c _ZN6uart_t7rxemptyEv
00000660 g     F .text	0000005c _ZN4RF242ceEb
00000e10 g     F .text	00000018 _ZN3Str7appendfEPKcz
0000207c g     F .text	00000024 _sbrk_r
200000e8 g     O .bss	0000020c g_uart0
00001c1a  w    F .text	00000002 EIC_Handler
00000df4 g     F .text	0000001c _ZN3Str8appendfvEPKcSt9__va_list
00001c1a  w    F .text	00000002 WDT_Handler
200000d8 g     O .bss	00000004 g_spi0
2000050e g     O .bss	00000001 __lock___env_recursive_mutex
2000050f g     O .bss	00000001 __lock___sinit_recursive_mutex
00001e0c g     F .text	00000050 .hidden __aeabi_lmul
0000236c g     F .text	0000004c _realloc_r
00001e84 g     F .text	00000048 __libc_init_array
00001cc0 g     F .text	00000024 _sbrk
00001c1a  w    F .text	00000002 TC1_Handler
00002dc8 g     F .text	00000000 _init
000008f8 g     F .text	0000002e _ZN4RF2415openWritingPipeEy
000022c0 g     F .text	00000018 strtol
00000884 g     F .text	0000002c _ZN4RF247powerUpEv
00004000 g       .text	00000000 __top_flash
2000051c g       .bss	00000000 _ebss
00001c1c g     F .text	000000a4 Reset_Handler
00002330 g     F .text	00000018 vsniprintf
20000510 g     O .bss	00000001 __lock___malloc_recursive_mutex
20001000 g       *ABS*	00000000 _stack_top
00001c1a g     F .text	00000002 Dummy_Handler
00001bf4 g     F .text	00000026 _ZN9Sensornet4PollEv
00002d34 g     O .text	00000020 __sf_fake_stderr
000020a0 g     F .text	00000068 sniprintf
0000234a g     F .text	00000002 __retarget_lock_release_recursive
000007e8 g     F .text	00000022 _ZN4RF248spiTransEh
000023b8 g     F .text	000000c4 __ssputs_r
000008e4 g     F .text	00000014 _ZN4RF244readEPvh
000004c0 g     F .text	000000a8 _ZN3GSM4PollEv
00002980 g     F .text	00000016 memchr
00001f18 g     F .text	00000094 _free_r
000029cc g     F .text	00000014 .hidden __gnu_thumb1_case_shi
00001284 g     F .text	00000004 _ZN5spi_tC2EP6Sercom
20000078 g       .bss	00000000 _bss
00001770 g     F .text	00000030 _ZN6uart_t5printEPKci
0000218e g     F .text	0000002c strstr
200002f4 g     O .bss	0000020c g_uart1
00001c1a  w    F .text	00000002 PM_Handler
0000146c g     F .text	00000024 systick_cycles
00000a54 g     F .text	00000034 _ZN4RF2416enableAckPayloadEv
00000d14 g     F .text	00000080 _ZN3Str7reserveEi
20000010 g     O .data	00000004 _ZN3Str11EmptyBufferE
00000c88  w    F .text	00000012 _ZN9SensornetD2Ev
00001430 g     F .text	0000003c systick_init
00002166 g     F .text	00000028 strncpy
0000032c g     F .text	00000084 _ZN3GSM4InitEv
00002108 g     F .text	00000034 strcasecmp
00001040 g     F .text	00000244 _ZN5spi_t4InitE12spi_pincfg_tt
0000018c g     F .text	00000012 _ZN3GSMD2Ev
000012bc g     F .text	00000020 _ZN5spi_t8TransferEh
00002068 g     F .text	00000014 realloc
000017cc g     F .text	00000040 _ZN6uart_t4getcEv
000008b0 g     F .text	0000002a _ZN4RF249availableEPh
00001e68 g     F .text	0000001c __cxa_atexit
00001e08  w    F .text	00000002 .hidden __aeabi_ldiv0
00001b6e g     F .text	00000086 _ZN9Sensornet13ProcessPacketERK12SensorPacket
0000080a g     F .text	0000000a _ZN4RF248flush_rxEv
000022d8 g     F .text	00000056 _vsnprintf_r
000001a0 g     F .text	000000b0 _ZN3GSM7CommandEPKcS1_j
0000234c g     F .text	00000010 __malloc_lock
00002e00 g       .text	00000000 __fini_array_start
00002d54 g     O .text	00000020 __sf_fake_stdin
0000062c g     F .text	00000034 _ZN4RF243csnEb
00002348 g     F .text	00000002 __retarget_lock_acquire_recursive
00001f06 g     F .text	00000010 memset
00000f24 g     F .text	0000010c main
00001b08 g     F .text	00000066 _ZN9Sensornet5beginEv
200000dc g     O .bss	00000004 g_spi1
00001cf4 g     F .text	00000000 .hidden __aeabi_uidiv
00000568 g     F .text	00000070 _ZN3GSM7SendSMSEPKcS1_
00001c1a  w    F .text	00000002 SVC_Handler
20000000 g     F .data	0000000c delay_usec
00001c1a  w    F .text	00000002 EVSYS_Handler
00002de4 g       .text	00000000 __init_array_end
00001fac g     F .text	000000bc _malloc_r
000003b0 g     F .text	00000058 _ZN3GSM10ProcessSMSEPKcS1_
00001c1a  w    F .text	00000002 NVMCTRL_Handler
00002de4 g     F .text	00000000 _fini
00000a30 g     F .text	00000024 _ZN4RF2415toggle_featuresEv
00001930 g     F .text	00000090 _ZN6uart_t4readEv
0000151c g     F .text	000001e8 _ZN6uart_t4initERK13uart_pincfg_tt
00001898 g     F .text	00000098 _ZN6uart_t4findEPKc
000019c0 g     F .text	00000010 SERCOM0_Handler
0000267c g     F .text	000000de _printf_common
20000014 g     O .data	00000004 _impure_ptr
00002dd4 g       .text	00000000 __preinit_array_end
0000247c g     F .text	00000200 _svfiprintf_r
00000828 g     F .text	0000003e _ZN4RF24C1E6gpio_tS0_R5spi_t
20000000 g       .data	00000000 _data
00000000 g     O .text	0000008c exception_table
00000c88  w    F .text	00000012 _ZN9SensornetD1Ev
00001c1a  w    F .text	00000002 DAC_Handler
000006bc g     F .text	0000002c _ZN4RF2413read_registerEh
000022d8 g     F .text	00000056 _vsniprintf_r
00000770 g     F .text	00000078 _ZN4RF2412read_payloadEPvh
00001e00 g     F .text	00000008 .hidden __aeabi_uidivmod
20000078 g       .data	00000000 _edata
2000051c g       .bss	00000000 _end
20000511 g     O .bss	00000001 __lock___at_quick_exit_mutex
00001c1a  w    F .text	00000002 PTC_Handler
000019f0 g     F .text	00000118 _ZN9SensornetC2ERK4RF24
00000b24 g     F .text	00000014 _ZN4RF2410setRetriesEhh
000006e8 g     F .text	00000054 _ZN4RF2414write_registerEhPKhh
00000250 g     F .text	00000044 _ZN3GSM13RepeatCommandEPKcS1_ii
00000ad0 g     F .text	00000054 _ZN4RF2411setDataRateE15rf24_datarate_e
00001754 g     F .text	0000001c _ZN6uart_t5writeEc
00002d74 g     O .text	00000020 __sf_fake_stdout
00001e5c g     F .text	0000000c atoi
00002c30 g     O .text	00000101 _ctype_
00001e08  w    F .text	00000002 .hidden __aeabi_idiv0
00002dd4 g       .text	00000000 __init_array_start
00001e0c g     F .text	00000050 .hidden __muldi3
20000512 g     O .bss	00000001 __lock___dd_hash_mutex
20000513 g     O .bss	00000001 __lock___tz_mutex
000000f0 g     F .text	0000009c _ZN3GSMC2E6gpio_tP6uart_t
000009a4 g     F .text	00000028 _ZN4RF2416closeReadingPipeEh
00002158 g     F .text	0000000e strlen
0000275c g     F .text	00000224 _printf_i
20000508 g     O .bss	00000004 __malloc_sbrk_start
000000f0 g     F .text	0000009c _ZN3GSMC1E6gpio_tP6uart_t
00001284 g     F .text	00000004 _ZN5spi_tC1EP6Sercom
0000213c g     F .text	0000001c strchr
20000504 g     O .bss	00000004 __malloc_free_list
00000b38 g     F .text	00000150 _ZN4RF245beginEv
00002dd4 g       .text	00000000 __preinit_array_start
00001ce4 g     F .text	0000000e __aeabi_atexit
00000866 g     F .text	00000012 _ZN4RF2410setChannelEh
00001490 g     F .text	00000018 millis
00000a88 g     F .text	0000001a _ZN4RF2410setAutoAckEb
00001704 g     F .text	00000050 _ZN6uart_t14sercom_handlerEv
00000928 g     F .text	0000007c _ZN4RF2415openReadingPipeEhy
20000514 g     O .bss	00000001 __lock___sfp_recursive_mutex
00001ee0 g     F .text	00000014 free
00001c1a  w    F .text	00000002 SYSCTRL_Handler



Disassembly of section .text:

00000000 <exception_table>:
       0:	00 10 00 20 1d 1c 00 00 1b 1c 00 00 1b 1c 00 00     ... ............
	...
      2c:	1b 1c 00 00 00 00 00 00 00 00 00 00 1b 1c 00 00     ................
      3c:	a9 14 00 00 1b 1c 00 00 1b 1c 00 00 1b 1c 00 00     ................
      4c:	1b 1c 00 00 1b 1c 00 00 1b 1c 00 00 1b 1c 00 00     ................
      5c:	00 00 00 00 1b 1c 00 00 c1 19 00 00 d1 19 00 00     ................
      6c:	1b 1c 00 00 1b 1c 00 00 1b 1c 00 00 1b 1c 00 00     ................
      7c:	1b 1c 00 00 1b 1c 00 00 1b 1c 00 00 1b 1c 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000078 	.word	0x20000078
      ac:	00000000 	.word	0x00000000
      b0:	00002e04 	.word	0x00002e04

000000b4 <frame_dummy>:
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <frame_dummy+0x14>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4903      	ldr	r1, [pc, #12]	; (cc <frame_dummy+0x18>)
      be:	4804      	ldr	r0, [pc, #16]	; (d0 <frame_dummy+0x1c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	bd10      	pop	{r4, pc}
      c6:	46c0      	nop			; (mov r8, r8)
      c8:	00000000 	.word	0x00000000
      cc:	2000007c 	.word	0x2000007c
      d0:	00002e04 	.word	0x00002e04

000000d4 <_ZL8find_numPKc>:
#include <strings.h>
extern "C" {
#include <systick.h>
}

static int find_num(const char* str) {
      d4:	b510      	push	{r4, lr}
    while(*str) {
      d6:	7803      	ldrb	r3, [r0, #0]
      d8:	2b00      	cmp	r3, #0
      da:	d007      	beq.n	ec <_ZL8find_numPKc+0x18>
        if(isdigit(*str))
      dc:	3b30      	subs	r3, #48	; 0x30
      de:	2b09      	cmp	r3, #9
      e0:	d901      	bls.n	e6 <_ZL8find_numPKc+0x12>
            return atoi(str);
        str++;
      e2:	3001      	adds	r0, #1
    while(*str) {
      e4:	e7f7      	b.n	d6 <_ZL8find_numPKc+0x2>
            return atoi(str);
      e6:	f001 feb9 	bl	1e5c <atoi>
      ea:	e000      	b.n	ee <_ZL8find_numPKc+0x1a>
    }
    return 0;
      ec:	2000      	movs	r0, #0
}
      ee:	bd10      	pop	{r4, pc}

000000f0 <_ZN3GSMC1E6gpio_tP6uart_t>:
            free(resp);
        }
    }
}

GSM::GSM(const gpio_t pwrkey, uart_t* uart) :
      f0:	b5f0      	push	{r4, r5, r6, r7, lr}
      f2:	b087      	sub	sp, #28
      f4:	0004      	movs	r4, r0
      f6:	4668      	mov	r0, sp
      f8:	9100      	str	r1, [sp, #0]
      fa:	6042      	str	r2, [r0, #4]
    m_pwrkey(pwrkey), m_uart(uart)
      fc:	0026      	movs	r6, r4
      fe:	0002      	movs	r2, r0
     100:	ca22      	ldmia	r2!, {r1, r5}
     102:	c622      	stmia	r6!, {r1, r5}
     104:	0035      	movs	r5, r6
private:
    size_t m_size;
    T* m_data;

public:
    Vector() : m_size(0), m_data(NULL) {}
     106:	2200      	movs	r2, #0
     108:	60a2      	str	r2, [r4, #8]
     10a:	60e2      	str	r2, [r4, #12]
     10c:	6123      	str	r3, [r4, #16]
        } else {
            PORT->Group[port].DIRSET.reg = 1 << pin;
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
        }
    }
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     10e:	6841      	ldr	r1, [r0, #4]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     110:	3201      	adds	r2, #1
     112:	0010      	movs	r0, r2
     114:	4088      	lsls	r0, r1
     116:	6823      	ldr	r3, [r4, #0]
     118:	01db      	lsls	r3, r3, #7
     11a:	4f1a      	ldr	r7, [pc, #104]	; (184 <_ZN3GSMC1E6gpio_tP6uart_t+0x94>)
     11c:	46bc      	mov	ip, r7
     11e:	4463      	add	r3, ip
     120:	6098      	str	r0, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     122:	185b      	adds	r3, r3, r1
     124:	3340      	adds	r3, #64	; 0x40
     126:	7819      	ldrb	r1, [r3, #0]
     128:	2002      	movs	r0, #2
     12a:	4381      	bics	r1, r0
     12c:	7019      	strb	r1, [r3, #0]
    }
    inline void drvstr(const gpio_t& gp, const bool en) { drvstr(gp.port, gp.pin, en); }

    inline void set(const int port, const int pin, const bool en) {
        if(en)
            PORT->Group[port].OUTSET.reg = 1 << pin;
     12e:	6863      	ldr	r3, [r4, #4]
     130:	409a      	lsls	r2, r3
     132:	6823      	ldr	r3, [r4, #0]
     134:	01db      	lsls	r3, r3, #7
     136:	4463      	add	r3, ip
     138:	619a      	str	r2, [r3, #24]
{
    gpio::mode(m_pwrkey, GPIO_DIR_OUT); // Set pwrkey pin to output
    gpio::set(m_pwrkey, true); // Set pwrkey to high

    m_smsfuncs.push_back({"exec", func_exec, 0});
     13a:	aa03      	add	r2, sp, #12
     13c:	4b12      	ldr	r3, [pc, #72]	; (188 <_ZN3GSMC1E6gpio_tP6uart_t+0x98>)
     13e:	cb83      	ldmia	r3!, {r0, r1, r7}
     140:	c283      	stmia	r2!, {r0, r1, r7}
    ~Vector() {
        if(m_data) free(m_data);
    }

    void push_back(const T& elem) {
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     142:	6831      	ldr	r1, [r6, #0]
     144:	2900      	cmp	r1, #0
     146:	d018      	beq.n	17a <_ZN3GSMC1E6gpio_tP6uart_t+0x8a>
     148:	6870      	ldr	r0, [r6, #4]
     14a:	3101      	adds	r1, #1
     14c:	004b      	lsls	r3, r1, #1
     14e:	1859      	adds	r1, r3, r1
     150:	0089      	lsls	r1, r1, #2
     152:	f001 ff89 	bl	2068 <realloc>
        if(!new_data) return;
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <_ZN3GSMC1E6gpio_tP6uart_t+0x84>
        m_data = new_data;
     15a:	6068      	str	r0, [r5, #4]

        memcpy(m_data + m_size, &elem, sizeof(T));
     15c:	682a      	ldr	r2, [r5, #0]
     15e:	0053      	lsls	r3, r2, #1
     160:	189b      	adds	r3, r3, r2
     162:	009b      	lsls	r3, r3, #2
     164:	18c0      	adds	r0, r0, r3
     166:	220c      	movs	r2, #12
     168:	a903      	add	r1, sp, #12
     16a:	f001 fec3 	bl	1ef4 <memcpy>
        m_size++;
     16e:	682b      	ldr	r3, [r5, #0]
     170:	3301      	adds	r3, #1
     172:	602b      	str	r3, [r5, #0]
}
     174:	0020      	movs	r0, r4
     176:	b007      	add	sp, #28
     178:	bdf0      	pop	{r4, r5, r6, r7, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     17a:	200c      	movs	r0, #12
     17c:	f001 fea6 	bl	1ecc <malloc>
     180:	e7e9      	b.n	156 <_ZN3GSMC1E6gpio_tP6uart_t+0x66>
     182:	46c0      	nop			; (mov r8, r8)
     184:	41004400 	.word	0x41004400
     188:	000029e0 	.word	0x000029e0

0000018c <_ZN3GSMD1Ev>:

GSM::~GSM() {
     18c:	b510      	push	{r4, lr}
     18e:	0004      	movs	r4, r0
        if(m_data) free(m_data);
     190:	68c0      	ldr	r0, [r0, #12]
     192:	2800      	cmp	r0, #0
     194:	d001      	beq.n	19a <_ZN3GSMD1Ev+0xe>
     196:	f001 fea3 	bl	1ee0 <free>
    
}
     19a:	0020      	movs	r0, r4
     19c:	bd10      	pop	{r4, pc}
     19e:	Address 0x0000019e is out of bounds.


000001a0 <_ZN3GSM7CommandEPKcS1_j>:

bool GSM::Command(const char* cmd, const char* result, unsigned int response_time) {
     1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1a2:	0004      	movs	r4, r0
     1a4:	0017      	movs	r7, r2
     1a6:	001e      	movs	r6, r3
    uint32_t start;

    m_uart->flush_rx();
     1a8:	6903      	ldr	r3, [r0, #16]
    // Allocates a buffer and reads all available data into it
    char* read();

    bool rxempty();
    void flush_rx() {
        m_rxhead = 0;
     1aa:	2200      	movs	r2, #0
     1ac:	2081      	movs	r0, #129	; 0x81
     1ae:	0080      	lsls	r0, r0, #2
     1b0:	521a      	strh	r2, [r3, r0]
        m_rxtail = 0;
     1b2:	4825      	ldr	r0, [pc, #148]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     1b4:	521a      	strh	r2, [r3, r0]
        m_rxfull = false;
     1b6:	2000      	movs	r0, #0
     1b8:	2282      	movs	r2, #130	; 0x82
     1ba:	0092      	lsls	r2, r2, #2
     1bc:	5498      	strb	r0, [r3, r2]

    m_uart->print(cmd);
     1be:	2201      	movs	r2, #1
     1c0:	4252      	negs	r2, r2
     1c2:	6920      	ldr	r0, [r4, #16]
     1c4:	f001 fad4 	bl	1770 <_ZN6uart_t5printEPKci>
    m_uart->write('\r');
     1c8:	210d      	movs	r1, #13
     1ca:	6920      	ldr	r0, [r4, #16]
     1cc:	f001 fac2 	bl	1754 <_ZN6uart_t5writeEc>
    // Allow up to response_time milliseconds to get a response
    start = millis();
     1d0:	f001 f95e 	bl	1490 <millis>
     1d4:	0005      	movs	r5, r0
     1d6:	e012      	b.n	1fe <_ZN3GSM7CommandEPKcS1_j+0x5e>
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
            return m_rxhead - m_rxtail;
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     1d8:	2281      	movs	r2, #129	; 0x81
     1da:	0092      	lsls	r2, r2, #2
     1dc:	5a99      	ldrh	r1, [r3, r2]
     1de:	4a1a      	ldr	r2, [pc, #104]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     1e0:	5a9b      	ldrh	r3, [r3, r2]
     1e2:	1ac9      	subs	r1, r1, r3
     1e4:	b289      	uxth	r1, r1
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	009b      	lsls	r3, r3, #2
     1ea:	469c      	mov	ip, r3
     1ec:	4461      	add	r1, ip
     1ee:	b289      	uxth	r1, r1
    while(!m_uart->available())
     1f0:	2900      	cmp	r1, #0
     1f2:	d116      	bne.n	222 <_ZN3GSM7CommandEPKcS1_j+0x82>
        if(millis() - start >= response_time)
     1f4:	f001 f94c 	bl	1490 <millis>
     1f8:	1b40      	subs	r0, r0, r5
     1fa:	42b0      	cmp	r0, r6
     1fc:	d21f      	bcs.n	23e <_ZN3GSM7CommandEPKcS1_j+0x9e>
    while(!m_uart->available())
     1fe:	6923      	ldr	r3, [r4, #16]
        if(m_rxhead >= m_rxtail)
     200:	2281      	movs	r2, #129	; 0x81
     202:	0092      	lsls	r2, r2, #2
     204:	5a99      	ldrh	r1, [r3, r2]
     206:	b289      	uxth	r1, r1
     208:	4a0f      	ldr	r2, [pc, #60]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     20a:	5a9a      	ldrh	r2, [r3, r2]
     20c:	b292      	uxth	r2, r2
     20e:	4291      	cmp	r1, r2
     210:	d3e2      	bcc.n	1d8 <_ZN3GSM7CommandEPKcS1_j+0x38>
            return m_rxhead - m_rxtail;
     212:	2281      	movs	r2, #129	; 0x81
     214:	0092      	lsls	r2, r2, #2
     216:	5a99      	ldrh	r1, [r3, r2]
     218:	4a0b      	ldr	r2, [pc, #44]	; (248 <_ZN3GSM7CommandEPKcS1_j+0xa8>)
     21a:	5a9b      	ldrh	r3, [r3, r2]
     21c:	1ac9      	subs	r1, r1, r3
     21e:	b289      	uxth	r1, r1
     220:	e7e6      	b.n	1f0 <_ZN3GSM7CommandEPKcS1_j+0x50>
            return false;
    
    delay_usec(100000); // wait 100 ms to get the whole response
     222:	480a      	ldr	r0, [pc, #40]	; (24c <_ZN3GSM7CommandEPKcS1_j+0xac>)
     224:	f002 fde4 	bl	2df0 <__delay_usec_veneer>

    if(!result) return true;
     228:	2f00      	cmp	r7, #0
     22a:	d00a      	beq.n	242 <_ZN3GSM7CommandEPKcS1_j+0xa2>
    return m_uart->find(result) != -1;
     22c:	6920      	ldr	r0, [r4, #16]
     22e:	0039      	movs	r1, r7
     230:	f001 fb32 	bl	1898 <_ZN6uart_t4findEPKc>
     234:	3001      	adds	r0, #1
     236:	1e43      	subs	r3, r0, #1
     238:	4198      	sbcs	r0, r3
     23a:	b2c0      	uxtb	r0, r0
     23c:	e000      	b.n	240 <_ZN3GSM7CommandEPKcS1_j+0xa0>
            return false;
     23e:	2000      	movs	r0, #0
}
     240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!result) return true;
     242:	2001      	movs	r0, #1
     244:	e7fc      	b.n	240 <_ZN3GSM7CommandEPKcS1_j+0xa0>
     246:	46c0      	nop			; (mov r8, r8)
     248:	00000206 	.word	0x00000206
     24c:	000186a0 	.word	0x000186a0

00000250 <_ZN3GSM13RepeatCommandEPKcS1_ii>:

bool GSM::RepeatCommand(const char* cmd, const char* result, int repeats, int response_time) {
     250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     252:	46ce      	mov	lr, r9
     254:	4647      	mov	r7, r8
     256:	b580      	push	{r7, lr}
     258:	4680      	mov	r8, r0
     25a:	000f      	movs	r7, r1
     25c:	0016      	movs	r6, r2
     25e:	001d      	movs	r5, r3
     260:	9b08      	ldr	r3, [sp, #32]
     262:	4699      	mov	r9, r3
    for(int i = 0; i < repeats; i++) {
     264:	2400      	movs	r4, #0
     266:	42ac      	cmp	r4, r5
     268:	da0c      	bge.n	284 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x34>
        if(Command(cmd, result, response_time))
     26a:	464b      	mov	r3, r9
     26c:	0032      	movs	r2, r6
     26e:	0039      	movs	r1, r7
     270:	4640      	mov	r0, r8
     272:	f7ff ff95 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     276:	2800      	cmp	r0, #0
     278:	d105      	bne.n	286 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x36>
            return true;
        
        delay_usec(500000);
     27a:	4805      	ldr	r0, [pc, #20]	; (290 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x40>)
     27c:	f002 fdb8 	bl	2df0 <__delay_usec_veneer>
    for(int i = 0; i < repeats; i++) {
     280:	3401      	adds	r4, #1
     282:	e7f0      	b.n	266 <_ZN3GSM13RepeatCommandEPKcS1_ii+0x16>
    }
    return false;
     284:	2000      	movs	r0, #0
}
     286:	bc0c      	pop	{r2, r3}
     288:	4690      	mov	r8, r2
     28a:	4699      	mov	r9, r3
     28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	0007a120 	.word	0x0007a120

00000294 <_ZN3GSM7PowerOnEv>:

bool GSM::PowerOn() {
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46c6      	mov	lr, r8
     298:	b500      	push	{lr}
     29a:	b082      	sub	sp, #8
     29c:	0004      	movs	r4, r0
    m_uart->write('\r');
     29e:	210d      	movs	r1, #13
     2a0:	6900      	ldr	r0, [r0, #16]
     2a2:	f001 fa57 	bl	1754 <_ZN6uart_t5writeEc>

    // Check if the GSM module is already powered on
    if(Command("AT", "OK", 500))
     2a6:	23fa      	movs	r3, #250	; 0xfa
     2a8:	005b      	lsls	r3, r3, #1
     2aa:	4a1c      	ldr	r2, [pc, #112]	; (31c <_ZN3GSM7PowerOnEv+0x88>)
     2ac:	491c      	ldr	r1, [pc, #112]	; (320 <_ZN3GSM7PowerOnEv+0x8c>)
     2ae:	0020      	movs	r0, r4
     2b0:	f7ff ff76 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     2b4:	1e07      	subs	r7, r0, #0
     2b6:	d12b      	bne.n	310 <_ZN3GSM7PowerOnEv+0x7c>
        return true;
    
    // Fail after 3 attempts to power cycle
    for(int i = 0; i < 3; i++) {
     2b8:	2600      	movs	r6, #0
     2ba:	2e02      	cmp	r6, #2
     2bc:	dc28      	bgt.n	310 <_ZN3GSM7PowerOnEv+0x7c>
        else
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     2be:	2501      	movs	r5, #1
     2c0:	002a      	movs	r2, r5
     2c2:	6863      	ldr	r3, [r4, #4]
     2c4:	409a      	lsls	r2, r3
     2c6:	6823      	ldr	r3, [r4, #0]
     2c8:	01db      	lsls	r3, r3, #7
     2ca:	4916      	ldr	r1, [pc, #88]	; (324 <_ZN3GSM7PowerOnEv+0x90>)
     2cc:	468c      	mov	ip, r1
     2ce:	4463      	add	r3, ip
     2d0:	615a      	str	r2, [r3, #20]
        gpio::set(m_pwrkey, false); // Set pwrkey to low
        delay_usec(1000000); // Wait for SIM800C to register it
     2d2:	4b15      	ldr	r3, [pc, #84]	; (328 <_ZN3GSM7PowerOnEv+0x94>)
     2d4:	4698      	mov	r8, r3
     2d6:	0018      	movs	r0, r3
     2d8:	f002 fd8a 	bl	2df0 <__delay_usec_veneer>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     2dc:	6863      	ldr	r3, [r4, #4]
     2de:	409d      	lsls	r5, r3
     2e0:	6823      	ldr	r3, [r4, #0]
     2e2:	01db      	lsls	r3, r3, #7
     2e4:	4a0f      	ldr	r2, [pc, #60]	; (324 <_ZN3GSM7PowerOnEv+0x90>)
     2e6:	4694      	mov	ip, r2
     2e8:	4463      	add	r3, ip
     2ea:	619d      	str	r5, [r3, #24]
        gpio::set(m_pwrkey, true); // Set pwrkey to high
        delay_usec(1000000);
     2ec:	4640      	mov	r0, r8
     2ee:	f002 fd7f 	bl	2df0 <__delay_usec_veneer>

        // Wait for response to AT command
        if(RepeatCommand("AT", "OK", 6, 500))
     2f2:	23fa      	movs	r3, #250	; 0xfa
     2f4:	005b      	lsls	r3, r3, #1
     2f6:	9300      	str	r3, [sp, #0]
     2f8:	3bef      	subs	r3, #239	; 0xef
     2fa:	3bff      	subs	r3, #255	; 0xff
     2fc:	4a07      	ldr	r2, [pc, #28]	; (31c <_ZN3GSM7PowerOnEv+0x88>)
     2fe:	4908      	ldr	r1, [pc, #32]	; (320 <_ZN3GSM7PowerOnEv+0x8c>)
     300:	0020      	movs	r0, r4
     302:	f7ff ffa5 	bl	250 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     306:	2800      	cmp	r0, #0
     308:	d101      	bne.n	30e <_ZN3GSM7PowerOnEv+0x7a>
    for(int i = 0; i < 3; i++) {
     30a:	3601      	adds	r6, #1
     30c:	e7d5      	b.n	2ba <_ZN3GSM7PowerOnEv+0x26>
            return true;
     30e:	0007      	movs	r7, r0
    }
    return false;
}
     310:	0038      	movs	r0, r7
     312:	b002      	add	sp, #8
     314:	bc04      	pop	{r2}
     316:	4690      	mov	r8, r2
     318:	bdf0      	pop	{r4, r5, r6, r7, pc}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	00002ad8 	.word	0x00002ad8
     320:	00002a7c 	.word	0x00002a7c
     324:	41004400 	.word	0x41004400
     328:	000f4240 	.word	0x000f4240

0000032c <_ZN3GSM4InitEv>:

bool GSM::Init() {
     32c:	b570      	push	{r4, r5, r6, lr}
     32e:	b082      	sub	sp, #8
     330:	0005      	movs	r5, r0
    if(!PowerOn())
     332:	f7ff ffaf 	bl	294 <_ZN3GSM7PowerOnEv>
     336:	1e04      	subs	r4, r0, #0
     338:	d102      	bne.n	340 <_ZN3GSM4InitEv+0x14>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms

    m_uart->flush_rx();

    return true;
}
     33a:	0020      	movs	r0, r4
     33c:	b002      	add	sp, #8
     33e:	bd70      	pop	{r4, r5, r6, pc}
    Command("ATE0");
     340:	4c14      	ldr	r4, [pc, #80]	; (394 <_ZN3GSM4InitEv+0x68>)
     342:	0023      	movs	r3, r4
     344:	2200      	movs	r2, #0
     346:	4914      	ldr	r1, [pc, #80]	; (398 <_ZN3GSM4InitEv+0x6c>)
     348:	0028      	movs	r0, r5
     34a:	f7ff ff29 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    if(!RepeatCommand("AT+CREG?", "+CREG: 0,1", 25))
     34e:	9400      	str	r4, [sp, #0]
     350:	2319      	movs	r3, #25
     352:	4a12      	ldr	r2, [pc, #72]	; (39c <_ZN3GSM4InitEv+0x70>)
     354:	4912      	ldr	r1, [pc, #72]	; (3a0 <_ZN3GSM4InitEv+0x74>)
     356:	0028      	movs	r0, r5
     358:	f7ff ff7a 	bl	250 <_ZN3GSM13RepeatCommandEPKcS1_ii>
     35c:	1e04      	subs	r4, r0, #0
     35e:	d0ec      	beq.n	33a <_ZN3GSM4InitEv+0xe>
    Command("AT+CMGF=1"); // SMS text mode
     360:	4e0c      	ldr	r6, [pc, #48]	; (394 <_ZN3GSM4InitEv+0x68>)
     362:	0033      	movs	r3, r6
     364:	2200      	movs	r2, #0
     366:	490f      	ldr	r1, [pc, #60]	; (3a4 <_ZN3GSM4InitEv+0x78>)
     368:	0028      	movs	r0, r5
     36a:	f7ff ff19 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    Command("AT+CMGDA=\"DEL ALL\""); // Delete all sms
     36e:	0033      	movs	r3, r6
     370:	2200      	movs	r2, #0
     372:	490d      	ldr	r1, [pc, #52]	; (3a8 <_ZN3GSM4InitEv+0x7c>)
     374:	0028      	movs	r0, r5
     376:	f7ff ff13 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    m_uart->flush_rx();
     37a:	692b      	ldr	r3, [r5, #16]
        m_rxhead = 0;
     37c:	2200      	movs	r2, #0
     37e:	2181      	movs	r1, #129	; 0x81
     380:	0089      	lsls	r1, r1, #2
     382:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     384:	4909      	ldr	r1, [pc, #36]	; (3ac <_ZN3GSM4InitEv+0x80>)
     386:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     388:	2100      	movs	r1, #0
     38a:	2282      	movs	r2, #130	; 0x82
     38c:	0092      	lsls	r2, r2, #2
     38e:	5499      	strb	r1, [r3, r2]
    return true;
     390:	e7d3      	b.n	33a <_ZN3GSM4InitEv+0xe>
     392:	46c0      	nop			; (mov r8, r8)
     394:	00000bb8 	.word	0x00000bb8
     398:	00002a80 	.word	0x00002a80
     39c:	00002a88 	.word	0x00002a88
     3a0:	00002a94 	.word	0x00002a94
     3a4:	00002aa0 	.word	0x00002aa0
     3a8:	00002aac 	.word	0x00002aac
     3ac:	00000206 	.word	0x00000206

000003b0 <_ZN3GSM10ProcessSMSEPKcS1_>:
    ProcessSMS(text, sender);

    free(data);
}

void GSM::ProcessSMS(const char* text, const char* sender) {
     3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b2:	46c6      	mov	lr, r8
     3b4:	b500      	push	{lr}
     3b6:	b082      	sub	sp, #8
     3b8:	0006      	movs	r6, r0
     3ba:	000f      	movs	r7, r1
     3bc:	9201      	str	r2, [sp, #4]
    char* args_start = strchr(text, ' ');
     3be:	2120      	movs	r1, #32
     3c0:	0038      	movs	r0, r7
     3c2:	f001 febb 	bl	213c <strchr>
     3c6:	4680      	mov	r8, r0
    if(args_start) {
     3c8:	2800      	cmp	r0, #0
     3ca:	d004      	beq.n	3d6 <_ZN3GSM10ProcessSMSEPKcS1_+0x26>
        *args_start = '\0';
     3cc:	2300      	movs	r3, #0
     3ce:	7003      	strb	r3, [r0, #0]
        args_start += 1;
     3d0:	3301      	adds	r3, #1
     3d2:	469c      	mov	ip, r3
     3d4:	44e0      	add	r8, ip
        if(idx >= m_size) return {};
        return *(m_data + idx);
    }

    T* begin() {
        return m_data;
     3d6:	68f4      	ldr	r4, [r6, #12]
    }

    T* end() {
        return m_data + m_size;
     3d8:	68b3      	ldr	r3, [r6, #8]
     3da:	005d      	lsls	r5, r3, #1
     3dc:	18ed      	adds	r5, r5, r3
     3de:	00ad      	lsls	r5, r5, #2
     3e0:	1965      	adds	r5, r4, r5
    }

    for(auto& func : m_smsfuncs) {
     3e2:	42ac      	cmp	r4, r5
     3e4:	d00c      	beq.n	400 <_ZN3GSM10ProcessSMSEPKcS1_+0x50>
        if(strcasecmp(func.key, text) == 0) {
     3e6:	0039      	movs	r1, r7
     3e8:	6820      	ldr	r0, [r4, #0]
     3ea:	f001 fe8d 	bl	2108 <strcasecmp>
     3ee:	2800      	cmp	r0, #0
     3f0:	d001      	beq.n	3f6 <_ZN3GSM10ProcessSMSEPKcS1_+0x46>
    for(auto& func : m_smsfuncs) {
     3f2:	340c      	adds	r4, #12
     3f4:	e7f5      	b.n	3e2 <_ZN3GSM10ProcessSMSEPKcS1_+0x32>
            func.callback(this, sender, args_start);
     3f6:	6863      	ldr	r3, [r4, #4]
     3f8:	4642      	mov	r2, r8
     3fa:	9901      	ldr	r1, [sp, #4]
     3fc:	0030      	movs	r0, r6
     3fe:	4798      	blx	r3
            break;
        }
    }
}
     400:	b002      	add	sp, #8
     402:	bc04      	pop	{r2}
     404:	4690      	mov	r8, r2
     406:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000408 <_ZN3GSM7ReadSMSEi>:
void GSM::ReadSMS(int index) {
     408:	b5f0      	push	{r4, r5, r6, r7, lr}
     40a:	b091      	sub	sp, #68	; 0x44
     40c:	0004      	movs	r4, r0
     40e:	000b      	movs	r3, r1
    snprintf(buf, sizeof(buf), "AT+CMGR=%d", index);
     410:	4a26      	ldr	r2, [pc, #152]	; (4ac <_ZN3GSM7ReadSMSEi+0xa4>)
     412:	2140      	movs	r1, #64	; 0x40
     414:	4668      	mov	r0, sp
     416:	f001 fe43 	bl	20a0 <sniprintf>
    if(!Command(buf, "+CMGR"))
     41a:	4b25      	ldr	r3, [pc, #148]	; (4b0 <_ZN3GSM7ReadSMSEi+0xa8>)
     41c:	4a25      	ldr	r2, [pc, #148]	; (4b4 <_ZN3GSM7ReadSMSEi+0xac>)
     41e:	4669      	mov	r1, sp
     420:	0020      	movs	r0, r4
     422:	f7ff febd 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     426:	2800      	cmp	r0, #0
     428:	d101      	bne.n	42e <_ZN3GSM7ReadSMSEi+0x26>
}
     42a:	b011      	add	sp, #68	; 0x44
     42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    char* data = m_uart->read();
     42e:	6920      	ldr	r0, [r4, #16]
     430:	f001 fa7e 	bl	1930 <_ZN6uart_t4readEv>
     434:	1e07      	subs	r7, r0, #0
    if(!data) return;
     436:	d0f8      	beq.n	42a <_ZN3GSM7ReadSMSEi+0x22>
    char* cmgr_start = strstr(data, "+CMGR"); // this shouldn't return null
     438:	491e      	ldr	r1, [pc, #120]	; (4b4 <_ZN3GSM7ReadSMSEi+0xac>)
     43a:	f001 fea8 	bl	218e <strstr>
     43e:	0005      	movs	r5, r0
    char* text = strchr(cmgr_start, '\n');
     440:	210a      	movs	r1, #10
     442:	f001 fe7b 	bl	213c <strchr>
    if(!text) {
     446:	2800      	cmp	r0, #0
     448:	d020      	beq.n	48c <_ZN3GSM7ReadSMSEi+0x84>
    text += 1; // ignore \n
     44a:	1c46      	adds	r6, r0, #1
    char* text_end = strstr(text, "\r\n\r\nOK");
     44c:	491a      	ldr	r1, [pc, #104]	; (4b8 <_ZN3GSM7ReadSMSEi+0xb0>)
     44e:	0030      	movs	r0, r6
     450:	f001 fe9d 	bl	218e <strstr>
    if(!text_end) {
     454:	2800      	cmp	r0, #0
     456:	d01d      	beq.n	494 <_ZN3GSM7ReadSMSEi+0x8c>
    *text_end = '\0';
     458:	2300      	movs	r3, #0
     45a:	7003      	strb	r3, [r0, #0]
    char* sender = strstr(cmgr_start, ",\"");
     45c:	4917      	ldr	r1, [pc, #92]	; (4bc <_ZN3GSM7ReadSMSEi+0xb4>)
     45e:	0028      	movs	r0, r5
     460:	f001 fe95 	bl	218e <strstr>
    if(!sender) {
     464:	2800      	cmp	r0, #0
     466:	d019      	beq.n	49c <_ZN3GSM7ReadSMSEi+0x94>
    sender += 2;
     468:	1c85      	adds	r5, r0, #2
    if(!strchr(sender, '"')) {
     46a:	2122      	movs	r1, #34	; 0x22
     46c:	0028      	movs	r0, r5
     46e:	f001 fe65 	bl	213c <strchr>
     472:	2800      	cmp	r0, #0
     474:	d016      	beq.n	4a4 <_ZN3GSM7ReadSMSEi+0x9c>
    *strchr(sender, '"') = '\0';
     476:	2300      	movs	r3, #0
     478:	7003      	strb	r3, [r0, #0]
    ProcessSMS(text, sender);
     47a:	002a      	movs	r2, r5
     47c:	0031      	movs	r1, r6
     47e:	0020      	movs	r0, r4
     480:	f7ff ff96 	bl	3b0 <_ZN3GSM10ProcessSMSEPKcS1_>
    free(data);
     484:	0038      	movs	r0, r7
     486:	f001 fd2b 	bl	1ee0 <free>
     48a:	e7ce      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     48c:	0038      	movs	r0, r7
     48e:	f001 fd27 	bl	1ee0 <free>
        return;
     492:	e7ca      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     494:	0038      	movs	r0, r7
     496:	f001 fd23 	bl	1ee0 <free>
        return;
     49a:	e7c6      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     49c:	0038      	movs	r0, r7
     49e:	f001 fd1f 	bl	1ee0 <free>
        return;
     4a2:	e7c2      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
        free(data);
     4a4:	0038      	movs	r0, r7
     4a6:	f001 fd1b 	bl	1ee0 <free>
        return;
     4aa:	e7be      	b.n	42a <_ZN3GSM7ReadSMSEi+0x22>
     4ac:	00002ac0 	.word	0x00002ac0
     4b0:	00000bb8 	.word	0x00000bb8
     4b4:	00002acc 	.word	0x00002acc
     4b8:	00002ad4 	.word	0x00002ad4
     4bc:	00002adc 	.word	0x00002adc

000004c0 <_ZN3GSM4PollEv>:
void GSM::Poll() {
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	0004      	movs	r4, r0
    if(!m_uart->available()) return;
     4c4:	6902      	ldr	r2, [r0, #16]
        if(m_rxhead >= m_rxtail)
     4c6:	2381      	movs	r3, #129	; 0x81
     4c8:	009b      	lsls	r3, r3, #2
     4ca:	5ad1      	ldrh	r1, [r2, r3]
     4cc:	b289      	uxth	r1, r1
     4ce:	4b20      	ldr	r3, [pc, #128]	; (550 <_ZN3GSM4PollEv+0x90>)
     4d0:	5ad3      	ldrh	r3, [r2, r3]
     4d2:	b29b      	uxth	r3, r3
     4d4:	4299      	cmp	r1, r3
     4d6:	d309      	bcc.n	4ec <_ZN3GSM4PollEv+0x2c>
            return m_rxhead - m_rxtail;
     4d8:	2381      	movs	r3, #129	; 0x81
     4da:	009b      	lsls	r3, r3, #2
     4dc:	5ad3      	ldrh	r3, [r2, r3]
     4de:	491c      	ldr	r1, [pc, #112]	; (550 <_ZN3GSM4PollEv+0x90>)
     4e0:	5a52      	ldrh	r2, [r2, r1]
     4e2:	1a9b      	subs	r3, r3, r2
     4e4:	b29b      	uxth	r3, r3
     4e6:	2b00      	cmp	r3, #0
     4e8:	d10d      	bne.n	506 <_ZN3GSM4PollEv+0x46>
}
     4ea:	bd70      	pop	{r4, r5, r6, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
     4ec:	2381      	movs	r3, #129	; 0x81
     4ee:	009b      	lsls	r3, r3, #2
     4f0:	5ad3      	ldrh	r3, [r2, r3]
     4f2:	4917      	ldr	r1, [pc, #92]	; (550 <_ZN3GSM4PollEv+0x90>)
     4f4:	5a52      	ldrh	r2, [r2, r1]
     4f6:	1a9b      	subs	r3, r3, r2
     4f8:	b29b      	uxth	r3, r3
     4fa:	2280      	movs	r2, #128	; 0x80
     4fc:	0092      	lsls	r2, r2, #2
     4fe:	4694      	mov	ip, r2
     500:	4463      	add	r3, ip
     502:	b29b      	uxth	r3, r3
     504:	e7ef      	b.n	4e6 <_ZN3GSM4PollEv+0x26>
    delay_usec(100000);
     506:	4813      	ldr	r0, [pc, #76]	; (554 <_ZN3GSM4PollEv+0x94>)
     508:	f002 fc72 	bl	2df0 <__delay_usec_veneer>
    char* data = m_uart->read();
     50c:	6920      	ldr	r0, [r4, #16]
     50e:	f001 fa0f 	bl	1930 <_ZN6uart_t4readEv>
     512:	1e05      	subs	r5, r0, #0
    if(!data) return;
     514:	d0e9      	beq.n	4ea <_ZN3GSM4PollEv+0x2a>
    if(strstr(data, "RING")) {
     516:	4910      	ldr	r1, [pc, #64]	; (558 <_ZN3GSM4PollEv+0x98>)
     518:	f001 fe39 	bl	218e <strstr>
     51c:	2800      	cmp	r0, #0
     51e:	d009      	beq.n	534 <_ZN3GSM4PollEv+0x74>
        Command("ATH"); // Disconnect call
     520:	4b0e      	ldr	r3, [pc, #56]	; (55c <_ZN3GSM4PollEv+0x9c>)
     522:	2200      	movs	r2, #0
     524:	490e      	ldr	r1, [pc, #56]	; (560 <_ZN3GSM4PollEv+0xa0>)
     526:	0020      	movs	r0, r4
     528:	f7ff fe3a 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    free(data);
     52c:	0028      	movs	r0, r5
     52e:	f001 fcd7 	bl	1ee0 <free>
     532:	e7da      	b.n	4ea <_ZN3GSM4PollEv+0x2a>
    } else if(strstr(data, "+CMTI")) {
     534:	490b      	ldr	r1, [pc, #44]	; (564 <_ZN3GSM4PollEv+0xa4>)
     536:	0028      	movs	r0, r5
     538:	f001 fe29 	bl	218e <strstr>
     53c:	2800      	cmp	r0, #0
     53e:	d0f5      	beq.n	52c <_ZN3GSM4PollEv+0x6c>
        ReadSMS(find_num(strstr(data, "+CMTI")));
     540:	f7ff fdc8 	bl	d4 <_ZL8find_numPKc>
     544:	0001      	movs	r1, r0
     546:	0020      	movs	r0, r4
     548:	f7ff ff5e 	bl	408 <_ZN3GSM7ReadSMSEi>
     54c:	e7ee      	b.n	52c <_ZN3GSM4PollEv+0x6c>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	00000206 	.word	0x00000206
     554:	000186a0 	.word	0x000186a0
     558:	00002ae0 	.word	0x00002ae0
     55c:	00000bb8 	.word	0x00000bb8
     560:	00002ae8 	.word	0x00002ae8
     564:	00002aec 	.word	0x00002aec

00000568 <_ZN3GSM7SendSMSEPKcS1_>:

bool GSM::SendSMS(const char* number, const char* text) {
     568:	b530      	push	{r4, r5, lr}
     56a:	b091      	sub	sp, #68	; 0x44
     56c:	0004      	movs	r4, r0
     56e:	000b      	movs	r3, r1
     570:	0015      	movs	r5, r2
    // TODO
    char buf[64];
    snprintf(buf, sizeof(buf), "AT+CMGS=\"%s\"", number);
     572:	4a13      	ldr	r2, [pc, #76]	; (5c0 <_ZN3GSM7SendSMSEPKcS1_+0x58>)
     574:	2140      	movs	r1, #64	; 0x40
     576:	4668      	mov	r0, sp
     578:	f001 fd92 	bl	20a0 <sniprintf>
    if(!Command(buf))
     57c:	4b11      	ldr	r3, [pc, #68]	; (5c4 <_ZN3GSM7SendSMSEPKcS1_+0x5c>)
     57e:	2200      	movs	r2, #0
     580:	4669      	mov	r1, sp
     582:	0020      	movs	r0, r4
     584:	f7ff fe0c 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     588:	2800      	cmp	r0, #0
     58a:	d101      	bne.n	590 <_ZN3GSM7SendSMSEPKcS1_+0x28>
    m_uart->print(text);

    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
    m_uart->flush_rx();
    return success;
     58c:	b011      	add	sp, #68	; 0x44
     58e:	bd30      	pop	{r4, r5, pc}
    m_uart->print(text);
     590:	2201      	movs	r2, #1
     592:	4252      	negs	r2, r2
     594:	0029      	movs	r1, r5
     596:	6920      	ldr	r0, [r4, #16]
     598:	f001 f8ea 	bl	1770 <_ZN6uart_t5printEPKci>
    bool success = Command("\x1A", "+CMGS", 60000); // AT+CMGS max response time is 60 sec
     59c:	4b0a      	ldr	r3, [pc, #40]	; (5c8 <_ZN3GSM7SendSMSEPKcS1_+0x60>)
     59e:	4a0b      	ldr	r2, [pc, #44]	; (5cc <_ZN3GSM7SendSMSEPKcS1_+0x64>)
     5a0:	490b      	ldr	r1, [pc, #44]	; (5d0 <_ZN3GSM7SendSMSEPKcS1_+0x68>)
     5a2:	0020      	movs	r0, r4
     5a4:	f7ff fdfc 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
    m_uart->flush_rx();
     5a8:	6923      	ldr	r3, [r4, #16]
        m_rxhead = 0;
     5aa:	2200      	movs	r2, #0
     5ac:	2181      	movs	r1, #129	; 0x81
     5ae:	0089      	lsls	r1, r1, #2
     5b0:	525a      	strh	r2, [r3, r1]
        m_rxtail = 0;
     5b2:	4908      	ldr	r1, [pc, #32]	; (5d4 <_ZN3GSM7SendSMSEPKcS1_+0x6c>)
     5b4:	525a      	strh	r2, [r3, r1]
        m_rxfull = false;
     5b6:	2100      	movs	r1, #0
     5b8:	2282      	movs	r2, #130	; 0x82
     5ba:	0092      	lsls	r2, r2, #2
     5bc:	5499      	strb	r1, [r3, r2]
    return success;
     5be:	e7e5      	b.n	58c <_ZN3GSM7SendSMSEPKcS1_+0x24>
     5c0:	00002af4 	.word	0x00002af4
     5c4:	00000bb8 	.word	0x00000bb8
     5c8:	0000ea60 	.word	0x0000ea60
     5cc:	00002b04 	.word	0x00002b04
     5d0:	00002b0c 	.word	0x00002b0c
     5d4:	00000206 	.word	0x00000206

000005d8 <_ZL9func_execP3GSMPKcS2_>:
static void func_exec(GSM* gsm, const char* sender, const char* args) {
     5d8:	b570      	push	{r4, r5, r6, lr}
     5da:	0004      	movs	r4, r0
     5dc:	000d      	movs	r5, r1
     5de:	0011      	movs	r1, r2
    if(!gsm->Command(args)) {
     5e0:	4b0f      	ldr	r3, [pc, #60]	; (620 <_ZL9func_execP3GSMPKcS2_+0x48>)
     5e2:	2200      	movs	r2, #0
     5e4:	f7ff fddc 	bl	1a0 <_ZN3GSM7CommandEPKcS1_j>
     5e8:	2800      	cmp	r0, #0
     5ea:	d105      	bne.n	5f8 <_ZL9func_execP3GSMPKcS2_+0x20>
        gsm->SendSMS(sender, "Command timed out");
     5ec:	4a0d      	ldr	r2, [pc, #52]	; (624 <_ZL9func_execP3GSMPKcS2_+0x4c>)
     5ee:	0029      	movs	r1, r5
     5f0:	0020      	movs	r0, r4
     5f2:	f7ff ffb9 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
}
     5f6:	bd70      	pop	{r4, r5, r6, pc}
        char* resp = gsm->m_uart->read();
     5f8:	6920      	ldr	r0, [r4, #16]
     5fa:	f001 f999 	bl	1930 <_ZN6uart_t4readEv>
     5fe:	1e06      	subs	r6, r0, #0
        if(!resp) {
     600:	d008      	beq.n	614 <_ZL9func_execP3GSMPKcS2_+0x3c>
            gsm->SendSMS(sender, resp);
     602:	0002      	movs	r2, r0
     604:	0029      	movs	r1, r5
     606:	0020      	movs	r0, r4
     608:	f7ff ffae 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
            free(resp);
     60c:	0030      	movs	r0, r6
     60e:	f001 fc67 	bl	1ee0 <free>
}
     612:	e7f0      	b.n	5f6 <_ZL9func_execP3GSMPKcS2_+0x1e>
            gsm->SendSMS(sender, "uart->read() returned null");
     614:	4a04      	ldr	r2, [pc, #16]	; (628 <_ZL9func_execP3GSMPKcS2_+0x50>)
     616:	0029      	movs	r1, r5
     618:	0020      	movs	r0, r4
     61a:	f7ff ffa5 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
     61e:	e7ea      	b.n	5f6 <_ZL9func_execP3GSMPKcS2_+0x1e>
     620:	00000bb8 	.word	0x00000bb8
     624:	00002b10 	.word	0x00002b10
     628:	00002b24 	.word	0x00002b24

0000062c <_ZN4RF243csnEb>:
#define pgm_read_byte(x) (*(uint8_t*)(x))

/****************************************************************************/

void RF24::csn(bool mode)
{
     62c:	b510      	push	{r4, lr}
    }
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }
     62e:	68c3      	ldr	r3, [r0, #12]
     630:	6904      	ldr	r4, [r0, #16]
        if(en)
     632:	2900      	cmp	r1, #0
     634:	d00a      	beq.n	64c <_ZN4RF243csnEb+0x20>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     636:	2201      	movs	r2, #1
     638:	40a2      	lsls	r2, r4
     63a:	01db      	lsls	r3, r3, #7
     63c:	4907      	ldr	r1, [pc, #28]	; (65c <_ZN4RF243csnEb+0x30>)
     63e:	468c      	mov	ip, r1
     640:	4463      	add	r3, ip
     642:	619a      	str	r2, [r3, #24]
      _SPI.chipSelect(csn_pin);
    #endif // defined(RF24_RPi)

    #if !defined(RF24_LINUX)
    digitalWrite(csn_pin, mode);
    delay_usec(csDelay);
     644:	6a40      	ldr	r0, [r0, #36]	; 0x24
     646:	f002 fbd3 	bl	2df0 <__delay_usec_veneer>
    #endif // !defined(RF24_LINUX)
}
     64a:	bd10      	pop	{r4, pc}
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     64c:	2201      	movs	r2, #1
     64e:	40a2      	lsls	r2, r4
     650:	01db      	lsls	r3, r3, #7
     652:	4902      	ldr	r1, [pc, #8]	; (65c <_ZN4RF243csnEb+0x30>)
     654:	468c      	mov	ip, r1
     656:	4463      	add	r3, ip
     658:	615a      	str	r2, [r3, #20]
     65a:	e7f3      	b.n	644 <_ZN4RF243csnEb+0x18>
     65c:	41004400 	.word	0x41004400

00000660 <_ZN4RF242ceEb>:

/****************************************************************************/

void RF24::ce(bool level)
{
     660:	b570      	push	{r4, r5, r6, lr}
     662:	b084      	sub	sp, #16
     664:	0004      	movs	r4, r0
     666:	000d      	movs	r5, r1
    //Allow for 3-pin use on ATTiny
    if (ce_pin != csn_pin) {
     668:	4669      	mov	r1, sp
     66a:	0003      	movs	r3, r0
     66c:	330c      	adds	r3, #12
     66e:	000a      	movs	r2, r1
     670:	cb41      	ldmia	r3!, {r0, r6}
     672:	c241      	stmia	r2!, {r0, r6}
        return !operator==(b);
     674:	2208      	movs	r2, #8
     676:	a802      	add	r0, sp, #8
     678:	f001 fc3c 	bl	1ef4 <memcpy>
        return port == b.port && pin == b.pin;
     67c:	6863      	ldr	r3, [r4, #4]
     67e:	9a02      	ldr	r2, [sp, #8]
     680:	4293      	cmp	r3, r2
     682:	d00b      	beq.n	69c <_ZN4RF242ceEb+0x3c>
    inline void set(const gpio_t& gp, const bool en) { set(gp.port, gp.pin, en); }
     684:	68a1      	ldr	r1, [r4, #8]
        if(en)
     686:	2d00      	cmp	r5, #0
     688:	d00d      	beq.n	6a6 <_ZN4RF242ceEb+0x46>
            PORT->Group[port].OUTSET.reg = 1 << pin;
     68a:	2201      	movs	r2, #1
     68c:	408a      	lsls	r2, r1
     68e:	01db      	lsls	r3, r3, #7
     690:	4909      	ldr	r1, [pc, #36]	; (6b8 <_ZN4RF242ceEb+0x58>)
     692:	468c      	mov	ip, r1
     694:	4463      	add	r3, ip
     696:	619a      	str	r2, [r3, #24]
        digitalWrite(ce_pin, level);
    }
}
     698:	b004      	add	sp, #16
     69a:	bd70      	pop	{r4, r5, r6, pc}
        return port == b.port && pin == b.pin;
     69c:	68a2      	ldr	r2, [r4, #8]
     69e:	9903      	ldr	r1, [sp, #12]
     6a0:	428a      	cmp	r2, r1
     6a2:	d1ef      	bne.n	684 <_ZN4RF242ceEb+0x24>
     6a4:	e7f8      	b.n	698 <_ZN4RF242ceEb+0x38>
            PORT->Group[port].OUTCLR.reg = 1 << pin;
     6a6:	2201      	movs	r2, #1
     6a8:	408a      	lsls	r2, r1
     6aa:	01db      	lsls	r3, r3, #7
     6ac:	4902      	ldr	r1, [pc, #8]	; (6b8 <_ZN4RF242ceEb+0x58>)
     6ae:	468c      	mov	ip, r1
     6b0:	4463      	add	r3, ip
     6b2:	615a      	str	r2, [r3, #20]
     6b4:	e7f0      	b.n	698 <_ZN4RF242ceEb+0x38>
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	41004400 	.word	0x41004400

000006bc <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     6bc:	b570      	push	{r4, r5, r6, lr}
     6be:	0004      	movs	r4, r0
     6c0:	000d      	movs	r5, r1
    csn(LOW);
     6c2:	2100      	movs	r1, #0
     6c4:	f7ff ffb2 	bl	62c <_ZN4RF243csnEb>

    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    _SPI.Transfer(R_REGISTER | (REGISTER_MASK & reg));
     6c8:	211f      	movs	r1, #31
     6ca:	4029      	ands	r1, r5
     6cc:	6820      	ldr	r0, [r4, #0]
     6ce:	f000 fdf5 	bl	12bc <_ZN5spi_t8TransferEh>
    result = _SPI.Transfer(0xff);
     6d2:	21ff      	movs	r1, #255	; 0xff
     6d4:	6820      	ldr	r0, [r4, #0]
     6d6:	f000 fdf1 	bl	12bc <_ZN5spi_t8TransferEh>
     6da:	0005      	movs	r5, r0
    csn(HIGH);
     6dc:	2101      	movs	r1, #1
     6de:	0020      	movs	r0, r4
     6e0:	f7ff ffa4 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return result;
}
     6e4:	0028      	movs	r0, r5
     6e6:	bd70      	pop	{r4, r5, r6, pc}

000006e8 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6ea:	46ce      	mov	lr, r9
     6ec:	4647      	mov	r7, r8
     6ee:	b580      	push	{r7, lr}
     6f0:	0007      	movs	r7, r0
     6f2:	000c      	movs	r4, r1
     6f4:	0016      	movs	r6, r2
     6f6:	001d      	movs	r5, r3
    csn(LOW);
     6f8:	2100      	movs	r1, #0
     6fa:	f7ff ff97 	bl	62c <_ZN4RF243csnEb>
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     6fe:	211f      	movs	r1, #31
     700:	4021      	ands	r1, r4
     702:	2320      	movs	r3, #32
     704:	4319      	orrs	r1, r3
     706:	b2c9      	uxtb	r1, r1
     708:	6838      	ldr	r0, [r7, #0]
     70a:	f000 fdd7 	bl	12bc <_ZN5spi_t8TransferEh>
     70e:	4681      	mov	r9, r0
    while (len--) {
     710:	1e6c      	subs	r4, r5, #1
     712:	b2e4      	uxtb	r4, r4
     714:	2d00      	cmp	r5, #0
     716:	d008      	beq.n	72a <_ZN4RF2414write_registerEhPKhh+0x42>
        _SPI.Transfer(*buf++);
     718:	1c73      	adds	r3, r6, #1
     71a:	4698      	mov	r8, r3
     71c:	7831      	ldrb	r1, [r6, #0]
     71e:	6838      	ldr	r0, [r7, #0]
     720:	f000 fdcc 	bl	12bc <_ZN5spi_t8TransferEh>
    while (len--) {
     724:	0025      	movs	r5, r4
        _SPI.Transfer(*buf++);
     726:	4646      	mov	r6, r8
    while (len--) {
     728:	e7f2      	b.n	710 <_ZN4RF2414write_registerEhPKhh+0x28>
    csn(HIGH);
     72a:	2101      	movs	r1, #1
     72c:	0038      	movs	r0, r7
     72e:	f7ff ff7d 	bl	62c <_ZN4RF243csnEb>
    }
    endTransaction();
    #endif // !defined(RF24_LINUX)

    return status;
}
     732:	4648      	mov	r0, r9
     734:	bc0c      	pop	{r2, r3}
     736:	4690      	mov	r8, r2
     738:	4699      	mov	r9, r3
     73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000073c <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     73c:	b570      	push	{r4, r5, r6, lr}
     73e:	0004      	movs	r4, r0
     740:	000d      	movs	r5, r1
     742:	0016      	movs	r6, r2
    csn(LOW);
     744:	2100      	movs	r1, #0
     746:	f7ff ff71 	bl	62c <_ZN4RF243csnEb>
    status = *prx++; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(W_REGISTER | (REGISTER_MASK & reg));
     74a:	211f      	movs	r1, #31
     74c:	4029      	ands	r1, r5
     74e:	2320      	movs	r3, #32
     750:	4319      	orrs	r1, r3
     752:	b2c9      	uxtb	r1, r1
     754:	6820      	ldr	r0, [r4, #0]
     756:	f000 fdb1 	bl	12bc <_ZN5spi_t8TransferEh>
     75a:	0005      	movs	r5, r0
    _SPI.Transfer(value);
     75c:	0031      	movs	r1, r6
     75e:	6820      	ldr	r0, [r4, #0]
     760:	f000 fdac 	bl	12bc <_ZN5spi_t8TransferEh>
    csn(HIGH);
     764:	2101      	movs	r1, #1
     766:	0020      	movs	r0, r4
     768:	f7ff ff60 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     76c:	0028      	movs	r0, r5
     76e:	bd70      	pop	{r4, r5, r6, pc}

00000770 <_ZN4RF2412read_payloadEPvh>:
}

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t data_len)
{
     770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     772:	46ce      	mov	lr, r9
     774:	4647      	mov	r7, r8
     776:	b580      	push	{r7, lr}
     778:	0007      	movs	r7, r0
     77a:	000c      	movs	r4, r1
     77c:	0016      	movs	r6, r2
    uint8_t status;
    uint8_t* current = reinterpret_cast<uint8_t*>(buf);

    if (data_len > payload_size) {
     77e:	7dc5      	ldrb	r5, [r0, #23]
     780:	4295      	cmp	r5, r2
     782:	d200      	bcs.n	786 <_ZN4RF2412read_payloadEPvh+0x16>
        data_len = payload_size;
     784:	002e      	movs	r6, r5
    }
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     786:	7e3b      	ldrb	r3, [r7, #24]
     788:	2b00      	cmp	r3, #0
     78a:	d118      	bne.n	7be <_ZN4RF2412read_payloadEPvh+0x4e>
     78c:	1bad      	subs	r5, r5, r6
     78e:	b2ed      	uxtb	r5, r5
    csn(LOW);
     790:	2100      	movs	r1, #0
     792:	0038      	movs	r0, r7
     794:	f7ff ff4a 	bl	62c <_ZN4RF243csnEb>
    }
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
    status = _SPI.Transfer(R_RX_PAYLOAD);
     798:	2161      	movs	r1, #97	; 0x61
     79a:	6838      	ldr	r0, [r7, #0]
     79c:	f000 fd8e 	bl	12bc <_ZN5spi_t8TransferEh>
     7a0:	4680      	mov	r8, r0
    while (data_len--) {
     7a2:	1e73      	subs	r3, r6, #1
     7a4:	b2db      	uxtb	r3, r3
     7a6:	4699      	mov	r9, r3
     7a8:	2e00      	cmp	r6, #0
     7aa:	d00a      	beq.n	7c2 <_ZN4RF2412read_payloadEPvh+0x52>
        *current++ = _SPI.Transfer(0xFF);
     7ac:	1c66      	adds	r6, r4, #1
     7ae:	21ff      	movs	r1, #255	; 0xff
     7b0:	6838      	ldr	r0, [r7, #0]
     7b2:	f000 fd83 	bl	12bc <_ZN5spi_t8TransferEh>
     7b6:	7020      	strb	r0, [r4, #0]
     7b8:	0034      	movs	r4, r6
    while (data_len--) {
     7ba:	464e      	mov	r6, r9
     7bc:	e7f1      	b.n	7a2 <_ZN4RF2412read_payloadEPvh+0x32>
    uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     7be:	2500      	movs	r5, #0
     7c0:	e7e6      	b.n	790 <_ZN4RF2412read_payloadEPvh+0x20>
    }
    while (blank_len--) {
     7c2:	1e6c      	subs	r4, r5, #1
     7c4:	b2e4      	uxtb	r4, r4
     7c6:	2d00      	cmp	r5, #0
     7c8:	d005      	beq.n	7d6 <_ZN4RF2412read_payloadEPvh+0x66>
        _SPI.Transfer(0xff);
     7ca:	21ff      	movs	r1, #255	; 0xff
     7cc:	6838      	ldr	r0, [r7, #0]
     7ce:	f000 fd75 	bl	12bc <_ZN5spi_t8TransferEh>
    while (blank_len--) {
     7d2:	0025      	movs	r5, r4
     7d4:	e7f5      	b.n	7c2 <_ZN4RF2412read_payloadEPvh+0x52>
    csn(HIGH);
     7d6:	2101      	movs	r1, #1
     7d8:	0038      	movs	r0, r7
     7da:	f7ff ff27 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    #endif // !defined(RF24_LINUX)

    return status;
}
     7de:	4640      	mov	r0, r8
     7e0:	bc0c      	pop	{r2, r3}
     7e2:	4690      	mov	r8, r2
     7e4:	4699      	mov	r9, r3
     7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000007e8 <_ZN4RF248spiTransEh>:
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd)
{
     7e8:	b570      	push	{r4, r5, r6, lr}
     7ea:	0004      	movs	r4, r0
     7ec:	000d      	movs	r5, r1
    csn(LOW);
     7ee:	2100      	movs	r1, #0
     7f0:	f7ff ff1c 	bl	62c <_ZN4RF243csnEb>

    uint8_t status;

    beginTransaction();
    status = _SPI.Transfer(cmd);
     7f4:	0029      	movs	r1, r5
     7f6:	6820      	ldr	r0, [r4, #0]
     7f8:	f000 fd60 	bl	12bc <_ZN5spi_t8TransferEh>
     7fc:	0005      	movs	r5, r0
    csn(HIGH);
     7fe:	2101      	movs	r1, #1
     800:	0020      	movs	r0, r4
     802:	f7ff ff13 	bl	62c <_ZN4RF243csnEb>
    endTransaction();

    return status;
}
     806:	0028      	movs	r0, r5
     808:	bd70      	pop	{r4, r5, r6, pc}

0000080a <_ZN4RF248flush_rxEv>:
{
     80a:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_RX);
     80c:	21e2      	movs	r1, #226	; 0xe2
     80e:	f7ff ffeb 	bl	7e8 <_ZN4RF248spiTransEh>
}
     812:	bd10      	pop	{r4, pc}

00000814 <_ZN4RF248flush_txEv>:
{
     814:	b510      	push	{r4, lr}
    return spiTrans(FLUSH_TX);
     816:	21e1      	movs	r1, #225	; 0xe1
     818:	f7ff ffe6 	bl	7e8 <_ZN4RF248spiTransEh>
}
     81c:	bd10      	pop	{r4, pc}

0000081e <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
     81e:	b510      	push	{r4, lr}
    return spiTrans(RF24_NOP);
     820:	21ff      	movs	r1, #255	; 0xff
     822:	f7ff ffe1 	bl	7e8 <_ZN4RF248spiTransEh>
}
     826:	bd10      	pop	{r4, pc}

00000828 <_ZN4RF24C1E6gpio_tS0_R5spi_t>:

#endif

/****************************************************************************/

RF24::RF24(gpio_t _cepin, gpio_t _cspin, spi_t& _spi)
     828:	b082      	sub	sp, #8
     82a:	b530      	push	{r4, r5, lr}
     82c:	b083      	sub	sp, #12
     82e:	466c      	mov	r4, sp
     830:	9100      	str	r1, [sp, #0]
     832:	6062      	str	r2, [r4, #4]
     834:	aa07      	add	r2, sp, #28
     836:	9307      	str	r3, [sp, #28]
        :_SPI(_spi), ce_pin(_cepin), csn_pin(_cspin), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5),
         csDelay(5)//,pipe0_reading_address(0)
     838:	0003      	movs	r3, r0
     83a:	9909      	ldr	r1, [sp, #36]	; 0x24
     83c:	c302      	stmia	r3!, {r1}
     83e:	cc22      	ldmia	r4!, {r1, r5}
     840:	c322      	stmia	r3!, {r1, r5}
     842:	0003      	movs	r3, r0
     844:	330c      	adds	r3, #12
     846:	ca12      	ldmia	r2!, {r1, r4}
     848:	c312      	stmia	r3!, {r1, r4}
     84a:	2300      	movs	r3, #0
     84c:	7583      	strb	r3, [r0, #22]
     84e:	2220      	movs	r2, #32
     850:	75c2      	strb	r2, [r0, #23]
     852:	7603      	strb	r3, [r0, #24]
     854:	3a1b      	subs	r2, #27
     856:	7782      	strb	r2, [r0, #30]
     858:	6242      	str	r2, [r0, #36]	; 0x24
{
    pipe0_reading_address[0] = 0;
     85a:	7643      	strb	r3, [r0, #25]
}
     85c:	b003      	add	sp, #12
     85e:	bc30      	pop	{r4, r5}
     860:	bc08      	pop	{r3}
     862:	b002      	add	sp, #8
     864:	4718      	bx	r3

00000866 <_ZN4RF2410setChannelEh>:

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     866:	b510      	push	{r4, lr}
     868:	000a      	movs	r2, r1
    const uint8_t max_channel = 125;
    write_register(RF_CH, rf24_min(channel, max_channel));
     86a:	297c      	cmp	r1, #124	; 0x7c
     86c:	d900      	bls.n	870 <_ZN4RF2410setChannelEh+0xa>
     86e:	227d      	movs	r2, #125	; 0x7d
     870:	2105      	movs	r1, #5
     872:	f7ff ff63 	bl	73c <_ZN4RF2414write_registerEhh>
}
     876:	bd10      	pop	{r4, pc}

00000878 <_ZN4RF2414setPayloadSizeEh>:

/****************************************************************************/

void RF24::setPayloadSize(uint8_t size)
{
    payload_size = rf24_min(size, 32);
     878:	1c0b      	adds	r3, r1, #0
     87a:	2920      	cmp	r1, #32
     87c:	d900      	bls.n	880 <_ZN4RF2414setPayloadSizeEh+0x8>
     87e:	2320      	movs	r3, #32
     880:	75c3      	strb	r3, [r0, #23]
}
     882:	4770      	bx	lr

00000884 <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
     884:	b510      	push	{r4, lr}
     886:	0004      	movs	r4, r0
    uint8_t cfg = read_register(NRF_CONFIG);
     888:	2100      	movs	r1, #0
     88a:	f7ff ff17 	bl	6bc <_ZN4RF2413read_registerEh>

    // if not powered up then power up and wait for the radio to initialize
    if (!(cfg & _BV(PWR_UP))) {
     88e:	0783      	lsls	r3, r0, #30
     890:	d500      	bpl.n	894 <_ZN4RF247powerUpEv+0x10>
        // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
        // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
        // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
        delay_usec(5000);
    }
}
     892:	bd10      	pop	{r4, pc}
        write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
     894:	2202      	movs	r2, #2
     896:	4302      	orrs	r2, r0
     898:	b2d2      	uxtb	r2, r2
     89a:	2100      	movs	r1, #0
     89c:	0020      	movs	r0, r4
     89e:	f7ff ff4d 	bl	73c <_ZN4RF2414write_registerEhh>
        delay_usec(5000);
     8a2:	4802      	ldr	r0, [pc, #8]	; (8ac <_ZN4RF247powerUpEv+0x28>)
     8a4:	f002 faa4 	bl	2df0 <__delay_usec_veneer>
}
     8a8:	e7f3      	b.n	892 <_ZN4RF247powerUpEv+0xe>
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	00001388 	.word	0x00001388

000008b0 <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     8b0:	b570      	push	{r4, r5, r6, lr}
     8b2:	0004      	movs	r4, r0
     8b4:	000d      	movs	r5, r1
    if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY))) {
     8b6:	2117      	movs	r1, #23
     8b8:	f7ff ff00 	bl	6bc <_ZN4RF2413read_registerEh>
     8bc:	07c3      	lsls	r3, r0, #31
     8be:	d501      	bpl.n	8c4 <_ZN4RF249availableEPh+0x14>
            *pipe_num = (status >> RX_P_NO) & 0x07;
        }
        return 1;
    }

    return 0;
     8c0:	2000      	movs	r0, #0


}
     8c2:	bd70      	pop	{r4, r5, r6, pc}
        if (pipe_num) {
     8c4:	2d00      	cmp	r5, #0
     8c6:	d006      	beq.n	8d6 <_ZN4RF249availableEPh+0x26>
            uint8_t status = get_status();
     8c8:	0020      	movs	r0, r4
     8ca:	f7ff ffa8 	bl	81e <_ZN4RF2410get_statusEv>
            *pipe_num = (status >> RX_P_NO) & 0x07;
     8ce:	1043      	asrs	r3, r0, #1
     8d0:	2007      	movs	r0, #7
     8d2:	4018      	ands	r0, r3
     8d4:	7028      	strb	r0, [r5, #0]
        return 1;
     8d6:	2001      	movs	r0, #1
     8d8:	e7f3      	b.n	8c2 <_ZN4RF249availableEPh+0x12>

000008da <_ZN4RF249availableEv>:
{
     8da:	b510      	push	{r4, lr}
    return available(0);
     8dc:	2100      	movs	r1, #0
     8de:	f7ff ffe7 	bl	8b0 <_ZN4RF249availableEPh>
}
     8e2:	bd10      	pop	{r4, pc}

000008e4 <_ZN4RF244readEPvh>:

/****************************************************************************/

void RF24::read(void* buf, uint8_t len)
{
     8e4:	b510      	push	{r4, lr}
     8e6:	0004      	movs	r4, r0

    // Fetch the payload
    read_payload(buf, len);
     8e8:	f7ff ff42 	bl	770 <_ZN4RF2412read_payloadEPvh>

    //Clear the two possible interrupt flags with one command
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(MAX_RT) | _BV(TX_DS));
     8ec:	2270      	movs	r2, #112	; 0x70
     8ee:	2107      	movs	r1, #7
     8f0:	0020      	movs	r0, r4
     8f2:	f7ff ff23 	bl	73c <_ZN4RF2414write_registerEhh>

}
     8f6:	bd10      	pop	{r4, pc}

000008f8 <_ZN4RF2415openWritingPipeEy>:
}

/****************************************************************************/

void RF24::openWritingPipe(uint64_t value)
{
     8f8:	b510      	push	{r4, lr}
     8fa:	b082      	sub	sp, #8
     8fc:	0004      	movs	r4, r0
     8fe:	9200      	str	r2, [sp, #0]
     900:	9301      	str	r3, [sp, #4]
    // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
    // expects it LSB first too, so we're good.

    write_register(RX_ADDR_P0, reinterpret_cast<uint8_t*>(&value), addr_width);
     902:	7f83      	ldrb	r3, [r0, #30]
     904:	466a      	mov	r2, sp
     906:	210a      	movs	r1, #10
     908:	f7ff feee 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
    write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), addr_width);
     90c:	7fa3      	ldrb	r3, [r4, #30]
     90e:	466a      	mov	r2, sp
     910:	2110      	movs	r1, #16
     912:	0020      	movs	r0, r4
     914:	f7ff fee8 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>


    //const uint8_t max_payload_size = 32;
    //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
    write_register(RX_PW_P0, payload_size);
     918:	7de2      	ldrb	r2, [r4, #23]
     91a:	2111      	movs	r1, #17
     91c:	0020      	movs	r0, r4
     91e:	f7ff ff0d 	bl	73c <_ZN4RF2414write_registerEhh>
}
     922:	b002      	add	sp, #8
     924:	bd10      	pop	{r4, pc}
     926:	Address 0x00000926 is out of bounds.


00000928 <_ZN4RF2415openReadingPipeEhy>:
PROGMEM = {RX_ADDR_P0, RX_ADDR_P1, RX_ADDR_P2, RX_ADDR_P3, RX_ADDR_P4, RX_ADDR_P5};
static const uint8_t child_payload_size[]
PROGMEM = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};

void RF24::openReadingPipe(uint8_t child, uint64_t address)
{
     928:	b530      	push	{r4, r5, lr}
     92a:	b083      	sub	sp, #12
     92c:	0005      	movs	r5, r0
     92e:	000c      	movs	r4, r1
     930:	9200      	str	r2, [sp, #0]
     932:	9301      	str	r3, [sp, #4]
    // If this is pipe 0, cache the address.  This is needed because
    // openWritingPipe() will overwrite the pipe 0 address, so
    // startListening() will have to restore it.
    if (child == 0) {
     934:	2900      	cmp	r1, #0
     936:	d021      	beq.n	97c <_ZN4RF2415openReadingPipeEhy+0x54>
        memcpy(pipe0_reading_address, &address, addr_width);
    }

    if (child <= 6) {
     938:	2c06      	cmp	r4, #6
     93a:	d81d      	bhi.n	978 <_ZN4RF2415openReadingPipeEhy+0x50>
        // For pipes 2-5, only write the LSB
        if (child < 2) {
     93c:	2c01      	cmp	r4, #1
     93e:	d923      	bls.n	988 <_ZN4RF2415openReadingPipeEhy+0x60>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
        } else {
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
     940:	4b15      	ldr	r3, [pc, #84]	; (998 <_ZN4RF2415openReadingPipeEhy+0x70>)
     942:	5d19      	ldrb	r1, [r3, r4]
     944:	2301      	movs	r3, #1
     946:	466a      	mov	r2, sp
     948:	0028      	movs	r0, r5
     94a:	f7ff fecd 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
        }

        write_register(pgm_read_byte(&child_payload_size[child]), payload_size);
     94e:	7dea      	ldrb	r2, [r5, #23]
     950:	4b12      	ldr	r3, [pc, #72]	; (99c <_ZN4RF2415openReadingPipeEhy+0x74>)
     952:	5d19      	ldrb	r1, [r3, r4]
     954:	0028      	movs	r0, r5
     956:	f7ff fef1 	bl	73c <_ZN4RF2414write_registerEhh>

        // Note it would be more efficient to set all of the bits for all open
        // pipes at once.  However, I thought it would make the calling code
        // more simple to do it this way.
        write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
     95a:	2102      	movs	r1, #2
     95c:	0028      	movs	r0, r5
     95e:	f7ff fead 	bl	6bc <_ZN4RF2413read_registerEh>
     962:	b242      	sxtb	r2, r0
     964:	4b0e      	ldr	r3, [pc, #56]	; (9a0 <_ZN4RF2415openReadingPipeEhy+0x78>)
     966:	5d1b      	ldrb	r3, [r3, r4]
     968:	2001      	movs	r0, #1
     96a:	4098      	lsls	r0, r3
     96c:	4302      	orrs	r2, r0
     96e:	b2d2      	uxtb	r2, r2
     970:	2102      	movs	r1, #2
     972:	0028      	movs	r0, r5
     974:	f7ff fee2 	bl	73c <_ZN4RF2414write_registerEhh>
    }
}
     978:	b003      	add	sp, #12
     97a:	bd30      	pop	{r4, r5, pc}
        memcpy(pipe0_reading_address, &address, addr_width);
     97c:	7f82      	ldrb	r2, [r0, #30]
     97e:	4669      	mov	r1, sp
     980:	3019      	adds	r0, #25
     982:	f001 fab7 	bl	1ef4 <memcpy>
     986:	e7d7      	b.n	938 <_ZN4RF2415openReadingPipeEhy+0x10>
            write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), addr_width);
     988:	7fab      	ldrb	r3, [r5, #30]
     98a:	4a03      	ldr	r2, [pc, #12]	; (998 <_ZN4RF2415openReadingPipeEhy+0x70>)
     98c:	5d11      	ldrb	r1, [r2, r4]
     98e:	466a      	mov	r2, sp
     990:	0028      	movs	r0, r5
     992:	f7ff fea9 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
     996:	e7da      	b.n	94e <_ZN4RF2415openReadingPipeEhy+0x26>
     998:	00002b40 	.word	0x00002b40
     99c:	00002b50 	.word	0x00002b50
     9a0:	00002b48 	.word	0x00002b48

000009a4 <_ZN4RF2416closeReadingPipeEh>:
}

/****************************************************************************/

void RF24::closeReadingPipe(uint8_t pipe)
{
     9a4:	b570      	push	{r4, r5, r6, lr}
     9a6:	0004      	movs	r4, r0
     9a8:	000d      	movs	r5, r1
    write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
     9aa:	2102      	movs	r1, #2
     9ac:	f7ff fe86 	bl	6bc <_ZN4RF2413read_registerEh>
     9b0:	b242      	sxtb	r2, r0
     9b2:	4b05      	ldr	r3, [pc, #20]	; (9c8 <_ZN4RF2416closeReadingPipeEh+0x24>)
     9b4:	5d59      	ldrb	r1, [r3, r5]
     9b6:	2301      	movs	r3, #1
     9b8:	408b      	lsls	r3, r1
     9ba:	439a      	bics	r2, r3
     9bc:	b2d2      	uxtb	r2, r2
     9be:	2102      	movs	r1, #2
     9c0:	0020      	movs	r0, r4
     9c2:	f7ff febb 	bl	73c <_ZN4RF2414write_registerEhh>
}
     9c6:	bd70      	pop	{r4, r5, r6, pc}
     9c8:	00002b48 	.word	0x00002b48

000009cc <_ZN4RF2414startListeningEv>:
{
     9cc:	b510      	push	{r4, lr}
     9ce:	0004      	movs	r4, r0
    powerUp();
     9d0:	f7ff ff58 	bl	884 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
     9d4:	2100      	movs	r1, #0
     9d6:	0020      	movs	r0, r4
     9d8:	f7ff fe70 	bl	6bc <_ZN4RF2413read_registerEh>
     9dc:	2201      	movs	r2, #1
     9de:	4302      	orrs	r2, r0
     9e0:	b2d2      	uxtb	r2, r2
     9e2:	2100      	movs	r1, #0
     9e4:	0020      	movs	r0, r4
     9e6:	f7ff fea9 	bl	73c <_ZN4RF2414write_registerEhh>
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     9ea:	2270      	movs	r2, #112	; 0x70
     9ec:	2107      	movs	r1, #7
     9ee:	0020      	movs	r0, r4
     9f0:	f7ff fea4 	bl	73c <_ZN4RF2414write_registerEhh>
    ce(HIGH);
     9f4:	2101      	movs	r1, #1
     9f6:	0020      	movs	r0, r4
     9f8:	f7ff fe32 	bl	660 <_ZN4RF242ceEb>
    if (pipe0_reading_address[0] > 0) {
     9fc:	7e63      	ldrb	r3, [r4, #25]
     9fe:	2b00      	cmp	r3, #0
     a00:	d00d      	beq.n	a1e <_ZN4RF2414startListeningEv+0x52>
        write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);
     a02:	7fa3      	ldrb	r3, [r4, #30]
     a04:	0022      	movs	r2, r4
     a06:	3219      	adds	r2, #25
     a08:	210a      	movs	r1, #10
     a0a:	0020      	movs	r0, r4
     a0c:	f7ff fe6c 	bl	6e8 <_ZN4RF2414write_registerEhPKhh>
    if (read_register(FEATURE) & _BV(EN_ACK_PAY)) {
     a10:	211d      	movs	r1, #29
     a12:	0020      	movs	r0, r4
     a14:	f7ff fe52 	bl	6bc <_ZN4RF2413read_registerEh>
     a18:	0783      	lsls	r3, r0, #30
     a1a:	d405      	bmi.n	a28 <_ZN4RF2414startListeningEv+0x5c>
}
     a1c:	bd10      	pop	{r4, pc}
        closeReadingPipe(0);
     a1e:	2100      	movs	r1, #0
     a20:	0020      	movs	r0, r4
     a22:	f7ff ffbf 	bl	9a4 <_ZN4RF2416closeReadingPipeEh>
     a26:	e7f3      	b.n	a10 <_ZN4RF2414startListeningEv+0x44>
        flush_tx();
     a28:	0020      	movs	r0, r4
     a2a:	f7ff fef3 	bl	814 <_ZN4RF248flush_txEv>
}
     a2e:	e7f5      	b.n	a1c <_ZN4RF2414startListeningEv+0x50>

00000a30 <_ZN4RF2415toggle_featuresEv>:

/****************************************************************************/

void RF24::toggle_features(void)
{
     a30:	b510      	push	{r4, lr}
     a32:	0004      	movs	r4, r0
    csn(LOW);
     a34:	2100      	movs	r1, #0
     a36:	f7ff fdf9 	bl	62c <_ZN4RF243csnEb>
    beginTransaction();
    _SPI.Transfer(ACTIVATE);
     a3a:	2150      	movs	r1, #80	; 0x50
     a3c:	6820      	ldr	r0, [r4, #0]
     a3e:	f000 fc3d 	bl	12bc <_ZN5spi_t8TransferEh>
    _SPI.Transfer(0x73);
     a42:	2173      	movs	r1, #115	; 0x73
     a44:	6820      	ldr	r0, [r4, #0]
     a46:	f000 fc39 	bl	12bc <_ZN5spi_t8TransferEh>
    csn(HIGH);
     a4a:	2101      	movs	r1, #1
     a4c:	0020      	movs	r0, r4
     a4e:	f7ff fded 	bl	62c <_ZN4RF243csnEb>
    endTransaction();
}
     a52:	bd10      	pop	{r4, pc}

00000a54 <_ZN4RF2416enableAckPayloadEv>:
}

/****************************************************************************/

void RF24::enableAckPayload(void)
{
     a54:	b510      	push	{r4, lr}
     a56:	0004      	movs	r4, r0
    //
    // enable ack payload and dynamic payload features
    //

    //toggle_features();
    write_register(FEATURE, read_register(FEATURE) | _BV(EN_ACK_PAY) | _BV(EN_DPL));
     a58:	211d      	movs	r1, #29
     a5a:	f7ff fe2f 	bl	6bc <_ZN4RF2413read_registerEh>
     a5e:	2206      	movs	r2, #6
     a60:	4302      	orrs	r2, r0
     a62:	b2d2      	uxtb	r2, r2
     a64:	211d      	movs	r1, #29
     a66:	0020      	movs	r0, r4
     a68:	f7ff fe68 	bl	73c <_ZN4RF2414write_registerEhh>
    IF_SERIAL_DEBUG(printf("FEATURE=%i\r\n", read_register(FEATURE)));

    //
    // Enable dynamic payload on pipes 0 & 1
    //
    write_register(DYNPD, read_register(DYNPD) | _BV(DPL_P1) | _BV(DPL_P0));
     a6c:	211c      	movs	r1, #28
     a6e:	0020      	movs	r0, r4
     a70:	f7ff fe24 	bl	6bc <_ZN4RF2413read_registerEh>
     a74:	2203      	movs	r2, #3
     a76:	4302      	orrs	r2, r0
     a78:	b2d2      	uxtb	r2, r2
     a7a:	211c      	movs	r1, #28
     a7c:	0020      	movs	r0, r4
     a7e:	f7ff fe5d 	bl	73c <_ZN4RF2414write_registerEhh>
    dynamic_payloads_enabled = true;
     a82:	2301      	movs	r3, #1
     a84:	7623      	strb	r3, [r4, #24]
}
     a86:	bd10      	pop	{r4, pc}

00000a88 <_ZN4RF2410setAutoAckEb>:
}

/****************************************************************************/

void RF24::setAutoAck(bool enable)
{
     a88:	b510      	push	{r4, lr}
    if (enable) {
     a8a:	2900      	cmp	r1, #0
     a8c:	d004      	beq.n	a98 <_ZN4RF2410setAutoAckEb+0x10>
        write_register(EN_AA, 0x3F);
     a8e:	223f      	movs	r2, #63	; 0x3f
     a90:	2101      	movs	r1, #1
     a92:	f7ff fe53 	bl	73c <_ZN4RF2414write_registerEhh>
    } else {
        write_register(EN_AA, 0);
    }
}
     a96:	bd10      	pop	{r4, pc}
        write_register(EN_AA, 0);
     a98:	2200      	movs	r2, #0
     a9a:	2101      	movs	r1, #1
     a9c:	f7ff fe4e 	bl	73c <_ZN4RF2414write_registerEhh>
}
     aa0:	e7f9      	b.n	a96 <_ZN4RF2410setAutoAckEb+0xe>

00000aa2 <_ZN4RF2410setPALevelEh>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
     aa2:	b570      	push	{r4, r5, r6, lr}
     aa4:	0005      	movs	r5, r0
     aa6:	000c      	movs	r4, r1

    uint8_t setup = read_register(RF_SETUP) & 0xF8;
     aa8:	2106      	movs	r1, #6
     aaa:	f7ff fe07 	bl	6bc <_ZN4RF2413read_registerEh>
     aae:	2307      	movs	r3, #7
     ab0:	4398      	bics	r0, r3
     ab2:	b2c0      	uxtb	r0, r0

    if (level > 3) {                        // If invalid level, go to max PA
     ab4:	2c03      	cmp	r4, #3
     ab6:	d809      	bhi.n	acc <_ZN4RF2410setPALevelEh+0x2a>
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
    } else {
        level = (level << 1) + 1;            // Else set level as requested
     ab8:	0064      	lsls	r4, r4, #1
     aba:	b2e2      	uxtb	r2, r4
     abc:	3201      	adds	r2, #1
     abe:	b2d2      	uxtb	r2, r2
    }

    write_register(RF_SETUP, setup |= level);    // Write it to the chip
     ac0:	4302      	orrs	r2, r0
     ac2:	2106      	movs	r1, #6
     ac4:	0028      	movs	r0, r5
     ac6:	f7ff fe39 	bl	73c <_ZN4RF2414write_registerEhh>
}
     aca:	bd70      	pop	{r4, r5, r6, pc}
        level = (RF24_PA_MAX << 1) + 1;        // +1 to support the SI24R1 chip extra bit
     acc:	2207      	movs	r2, #7
     ace:	e7f7      	b.n	ac0 <_ZN4RF2410setPALevelEh+0x1e>

00000ad0 <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     ad0:	b570      	push	{r4, r5, r6, lr}
     ad2:	0006      	movs	r6, r0
     ad4:	000d      	movs	r5, r1
    bool result = false;
    uint8_t setup = read_register(RF_SETUP);
     ad6:	2106      	movs	r1, #6
     ad8:	f7ff fdf0 	bl	6bc <_ZN4RF2413read_registerEh>

    // HIGH and LOW '00' is 1Mbs - our default
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
     adc:	2328      	movs	r3, #40	; 0x28
     ade:	4398      	bics	r0, r3
     ae0:	b2c4      	uxtb	r4, r0

    #if !defined(F_CPU) || F_CPU > 20000000
    txDelay = 250;
     ae2:	33d2      	adds	r3, #210	; 0xd2
     ae4:	6233      	str	r3, [r6, #32]
    #else //16Mhz Arduino
    txDelay=85;
    #endif
    if (speed == RF24_250KBPS) {
     ae6:	2d02      	cmp	r5, #2
     ae8:	d00e      	beq.n	b08 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x38>
        txDelay = 155;
        #endif
    } else {
        // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
        // Making it '01'
        if (speed == RF24_2MBPS) {
     aea:	2d01      	cmp	r5, #1
     aec:	d012      	beq.n	b14 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
            #else // 16Mhz Arduino
            txDelay = 65;
            #endif
        }
    }
    write_register(RF_SETUP, setup);
     aee:	0022      	movs	r2, r4
     af0:	2106      	movs	r1, #6
     af2:	0030      	movs	r0, r6
     af4:	f7ff fe22 	bl	73c <_ZN4RF2414write_registerEhh>

    // Verify our result
    if (read_register(RF_SETUP) == setup) {
     af8:	2106      	movs	r1, #6
     afa:	0030      	movs	r0, r6
     afc:	f7ff fdde 	bl	6bc <_ZN4RF2413read_registerEh>
     b00:	42a0      	cmp	r0, r4
     b02:	d00d      	beq.n	b20 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x50>
    bool result = false;
     b04:	2000      	movs	r0, #0
        result = true;
    }
    return result;
}
     b06:	bd70      	pop	{r4, r5, r6, pc}
        setup |= _BV(RF_DR_LOW);
     b08:	2020      	movs	r0, #32
     b0a:	4304      	orrs	r4, r0
     b0c:	b2e4      	uxtb	r4, r4
        txDelay = 450;
     b0e:	33c8      	adds	r3, #200	; 0xc8
     b10:	6233      	str	r3, [r6, #32]
     b12:	e7ec      	b.n	aee <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1e>
            setup |= _BV(RF_DR_HIGH);
     b14:	2008      	movs	r0, #8
     b16:	4304      	orrs	r4, r0
     b18:	b2e4      	uxtb	r4, r4
            txDelay = 190;
     b1a:	23be      	movs	r3, #190	; 0xbe
     b1c:	6233      	str	r3, [r6, #32]
     b1e:	e7e6      	b.n	aee <_ZN4RF2411setDataRateE15rf24_datarate_e+0x1e>
        result = true;
     b20:	2001      	movs	r0, #1
     b22:	e7f0      	b.n	b06 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x36>

00000b24 <_ZN4RF2410setRetriesEhh>:
    write_register(NRF_CONFIG, disable);
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
     b24:	b510      	push	{r4, lr}
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
     b26:	0109      	lsls	r1, r1, #4
     b28:	230f      	movs	r3, #15
     b2a:	4013      	ands	r3, r2
     b2c:	430b      	orrs	r3, r1
     b2e:	b2da      	uxtb	r2, r3
     b30:	2104      	movs	r1, #4
     b32:	f7ff fe03 	bl	73c <_ZN4RF2414write_registerEhh>
}
     b36:	bd10      	pop	{r4, pc}

00000b38 <_ZN4RF245beginEv>:
{
     b38:	b570      	push	{r4, r5, r6, lr}
     b3a:	b084      	sub	sp, #16
     b3c:	0004      	movs	r4, r0
    if (ce_pin != csn_pin) {
     b3e:	4669      	mov	r1, sp
     b40:	0003      	movs	r3, r0
     b42:	330c      	adds	r3, #12
     b44:	000a      	movs	r2, r1
     b46:	cb21      	ldmia	r3!, {r0, r5}
     b48:	c221      	stmia	r2!, {r0, r5}
        return !operator==(b);
     b4a:	2208      	movs	r2, #8
     b4c:	a802      	add	r0, sp, #8
     b4e:	f001 f9d1 	bl	1ef4 <memcpy>
        return port == b.port && pin == b.pin;
     b52:	6863      	ldr	r3, [r4, #4]
     b54:	9a02      	ldr	r2, [sp, #8]
     b56:	429a      	cmp	r2, r3
     b58:	d100      	bne.n	b5c <_ZN4RF245beginEv+0x24>
     b5a:	e085      	b.n	c68 <_ZN4RF245beginEv+0x130>
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     b5c:	68a1      	ldr	r1, [r4, #8]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     b5e:	2201      	movs	r2, #1
     b60:	408a      	lsls	r2, r1
     b62:	01db      	lsls	r3, r3, #7
     b64:	4846      	ldr	r0, [pc, #280]	; (c80 <_ZN4RF245beginEv+0x148>)
     b66:	4684      	mov	ip, r0
     b68:	4463      	add	r3, ip
     b6a:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     b6c:	185b      	adds	r3, r3, r1
     b6e:	3340      	adds	r3, #64	; 0x40
     b70:	781a      	ldrb	r2, [r3, #0]
     b72:	2102      	movs	r1, #2
     b74:	438a      	bics	r2, r1
     b76:	701a      	strb	r2, [r3, #0]
    if (ce_pin != csn_pin)
     b78:	4669      	mov	r1, sp
     b7a:	0023      	movs	r3, r4
     b7c:	330c      	adds	r3, #12
     b7e:	000a      	movs	r2, r1
     b80:	cb21      	ldmia	r3!, {r0, r5}
     b82:	c221      	stmia	r2!, {r0, r5}
        return !operator==(b);
     b84:	2208      	movs	r2, #8
     b86:	a802      	add	r0, sp, #8
     b88:	f001 f9b4 	bl	1ef4 <memcpy>
        return port == b.port && pin == b.pin;
     b8c:	6863      	ldr	r3, [r4, #4]
     b8e:	9a02      	ldr	r2, [sp, #8]
     b90:	4293      	cmp	r3, r2
     b92:	d100      	bne.n	b96 <_ZN4RF245beginEv+0x5e>
     b94:	e06e      	b.n	c74 <_ZN4RF245beginEv+0x13c>
    inline void mode(const gpio_t& gp, const gpio_dir dir) { mode(gp.port, gp.pin, dir); }
     b96:	6921      	ldr	r1, [r4, #16]
            PORT->Group[port].DIRSET.reg = 1 << pin;
     b98:	2201      	movs	r2, #1
     b9a:	408a      	lsls	r2, r1
     b9c:	68e3      	ldr	r3, [r4, #12]
     b9e:	01db      	lsls	r3, r3, #7
     ba0:	4837      	ldr	r0, [pc, #220]	; (c80 <_ZN4RF245beginEv+0x148>)
     ba2:	4684      	mov	ip, r0
     ba4:	4463      	add	r3, ip
     ba6:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     ba8:	185b      	adds	r3, r3, r1
     baa:	3340      	adds	r3, #64	; 0x40
     bac:	781a      	ldrb	r2, [r3, #0]
     bae:	2102      	movs	r1, #2
     bb0:	438a      	bics	r2, r1
     bb2:	701a      	strb	r2, [r3, #0]
    ce(LOW);
     bb4:	2100      	movs	r1, #0
     bb6:	0020      	movs	r0, r4
     bb8:	f7ff fd52 	bl	660 <_ZN4RF242ceEb>
    csn(HIGH);
     bbc:	2101      	movs	r1, #1
     bbe:	0020      	movs	r0, r4
     bc0:	f7ff fd34 	bl	62c <_ZN4RF243csnEb>
    delay_usec(5000);
     bc4:	482f      	ldr	r0, [pc, #188]	; (c84 <_ZN4RF245beginEv+0x14c>)
     bc6:	f002 f913 	bl	2df0 <__delay_usec_veneer>
    write_register(NRF_CONFIG, 0x0C);
     bca:	220c      	movs	r2, #12
     bcc:	2100      	movs	r1, #0
     bce:	0020      	movs	r0, r4
     bd0:	f7ff fdb4 	bl	73c <_ZN4RF2414write_registerEhh>
    setRetries(5, 15);
     bd4:	220f      	movs	r2, #15
     bd6:	2105      	movs	r1, #5
     bd8:	0020      	movs	r0, r4
     bda:	f7ff ffa3 	bl	b24 <_ZN4RF2410setRetriesEhh>
    if (setDataRate(RF24_250KBPS)) {
     bde:	2102      	movs	r1, #2
     be0:	0020      	movs	r0, r4
     be2:	f7ff ff75 	bl	ad0 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     be6:	2800      	cmp	r0, #0
     be8:	d001      	beq.n	bee <_ZN4RF245beginEv+0xb6>
        p_variant = true;
     bea:	2301      	movs	r3, #1
     bec:	75a3      	strb	r3, [r4, #22]
    setup = read_register(RF_SETUP);
     bee:	2106      	movs	r1, #6
     bf0:	0020      	movs	r0, r4
     bf2:	f7ff fd63 	bl	6bc <_ZN4RF2413read_registerEh>
     bf6:	0006      	movs	r6, r0
    setDataRate(RF24_1MBPS);
     bf8:	2100      	movs	r1, #0
     bfa:	0020      	movs	r0, r4
     bfc:	f7ff ff68 	bl	ad0 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    toggle_features();
     c00:	0020      	movs	r0, r4
     c02:	f7ff ff15 	bl	a30 <_ZN4RF2415toggle_featuresEv>
    write_register(FEATURE, 0);
     c06:	2200      	movs	r2, #0
     c08:	211d      	movs	r1, #29
     c0a:	0020      	movs	r0, r4
     c0c:	f7ff fd96 	bl	73c <_ZN4RF2414write_registerEhh>
    write_register(DYNPD, 0);
     c10:	2200      	movs	r2, #0
     c12:	211c      	movs	r1, #28
     c14:	0020      	movs	r0, r4
     c16:	f7ff fd91 	bl	73c <_ZN4RF2414write_registerEhh>
    dynamic_payloads_enabled = false;
     c1a:	2500      	movs	r5, #0
     c1c:	7625      	strb	r5, [r4, #24]
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
     c1e:	2270      	movs	r2, #112	; 0x70
     c20:	2107      	movs	r1, #7
     c22:	0020      	movs	r0, r4
     c24:	f7ff fd8a 	bl	73c <_ZN4RF2414write_registerEhh>
    setChannel(76);
     c28:	214c      	movs	r1, #76	; 0x4c
     c2a:	0020      	movs	r0, r4
     c2c:	f7ff fe1b 	bl	866 <_ZN4RF2410setChannelEh>
    flush_rx();
     c30:	0020      	movs	r0, r4
     c32:	f7ff fdea 	bl	80a <_ZN4RF248flush_rxEv>
    flush_tx();
     c36:	0020      	movs	r0, r4
     c38:	f7ff fdec 	bl	814 <_ZN4RF248flush_txEv>
    powerUp(); //Power up by default when begin() is called
     c3c:	0020      	movs	r0, r4
     c3e:	f7ff fe21 	bl	884 <_ZN4RF247powerUpEv>
    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
     c42:	2100      	movs	r1, #0
     c44:	0020      	movs	r0, r4
     c46:	f7ff fd39 	bl	6bc <_ZN4RF2413read_registerEh>
     c4a:	2301      	movs	r3, #1
     c4c:	4398      	bics	r0, r3
     c4e:	b2c2      	uxtb	r2, r0
     c50:	2100      	movs	r1, #0
     c52:	0020      	movs	r0, r4
     c54:	f7ff fd72 	bl	73c <_ZN4RF2414write_registerEhh>
    return (setup != 0 && setup != 0xff);
     c58:	3e01      	subs	r6, #1
     c5a:	b2f6      	uxtb	r6, r6
     c5c:	23fd      	movs	r3, #253	; 0xfd
     c5e:	42b3      	cmp	r3, r6
     c60:	416d      	adcs	r5, r5
     c62:	b2e8      	uxtb	r0, r5
}
     c64:	b004      	add	sp, #16
     c66:	bd70      	pop	{r4, r5, r6, pc}
        return port == b.port && pin == b.pin;
     c68:	68a2      	ldr	r2, [r4, #8]
     c6a:	9903      	ldr	r1, [sp, #12]
     c6c:	428a      	cmp	r2, r1
     c6e:	d000      	beq.n	c72 <_ZN4RF245beginEv+0x13a>
     c70:	e774      	b.n	b5c <_ZN4RF245beginEv+0x24>
     c72:	e781      	b.n	b78 <_ZN4RF245beginEv+0x40>
     c74:	68a3      	ldr	r3, [r4, #8]
     c76:	9a03      	ldr	r2, [sp, #12]
     c78:	4293      	cmp	r3, r2
     c7a:	d000      	beq.n	c7e <_ZN4RF245beginEv+0x146>
     c7c:	e78b      	b.n	b96 <_ZN4RF245beginEv+0x5e>
     c7e:	e799      	b.n	bb4 <_ZN4RF245beginEv+0x7c>
     c80:	41004400 	.word	0x41004400
     c84:	00001388 	.word	0x00001388

00000c88 <_ZN9SensornetD1Ev>:
	char name[8]; // 8 bytes
	uint8_t type; // 1 byte
	uint8_t data[22]; // total 32 bytes (max nrf24l01 packet size)
};

class Sensornet {
     c88:	b510      	push	{r4, lr}
     c8a:	0004      	movs	r4, r0
        if(m_data) free(m_data);
     c8c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     c8e:	2800      	cmp	r0, #0
     c90:	d001      	beq.n	c96 <_ZN9SensornetD1Ev+0xe>
     c92:	f001 f925 	bl	1ee0 <free>
     c96:	0020      	movs	r0, r4
     c98:	bd10      	pop	{r4, pc}
     c9a:	Address 0x00000c9a is out of bounds.


00000c9c <_Z41__static_initialization_and_destruction_0ii>:
        
        gpio::toggle(led);
        //auto start = millis();
        //while(millis() - start < 500);
    }
     c9c:	b570      	push	{r4, r5, r6, lr}
     c9e:	b092      	sub	sp, #72	; 0x48
     ca0:	2801      	cmp	r0, #1
     ca2:	d001      	beq.n	ca8 <_Z41__static_initialization_and_destruction_0ii+0xc>
     ca4:	b012      	add	sp, #72	; 0x48
     ca6:	bd70      	pop	{r4, r5, r6, pc}
     ca8:	4b12      	ldr	r3, [pc, #72]	; (cf4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     caa:	4299      	cmp	r1, r3
     cac:	d1fa      	bne.n	ca4 <_Z41__static_initialization_and_destruction_0ii+0x8>
);
     cae:	2400      	movs	r4, #0
     cb0:	4e11      	ldr	r6, [pc, #68]	; (cf8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     cb2:	4b12      	ldr	r3, [pc, #72]	; (cfc <_Z41__static_initialization_and_destruction_0ii+0x60>)
     cb4:	0021      	movs	r1, r4
     cb6:	2202      	movs	r2, #2
     cb8:	0030      	movs	r0, r6
     cba:	f7ff fa19 	bl	f0 <_ZN3GSMC1E6gpio_tP6uart_t>
static GSM gsm(
     cbe:	4d10      	ldr	r5, [pc, #64]	; (d00 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     cc0:	002a      	movs	r2, r5
     cc2:	4910      	ldr	r1, [pc, #64]	; (d04 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     cc4:	0030      	movs	r0, r6
     cc6:	f001 f80d 	bl	1ce4 <__aeabi_atexit>
static Sensornet net(RF24({ GPIO_PORTA, 14 }, { GPIO_PORTA, 15 }, g_spi0));
     cca:	4b0f      	ldr	r3, [pc, #60]	; (d08 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     ccc:	9301      	str	r3, [sp, #4]
     cce:	230f      	movs	r3, #15
     cd0:	9300      	str	r3, [sp, #0]
     cd2:	0023      	movs	r3, r4
     cd4:	0021      	movs	r1, r4
     cd6:	220e      	movs	r2, #14
     cd8:	a802      	add	r0, sp, #8
     cda:	f7ff fda5 	bl	828 <_ZN4RF24C1E6gpio_tS0_R5spi_t>
     cde:	4c0b      	ldr	r4, [pc, #44]	; (d0c <_Z41__static_initialization_and_destruction_0ii+0x70>)
     ce0:	a902      	add	r1, sp, #8
     ce2:	0020      	movs	r0, r4
     ce4:	f000 fe84 	bl	19f0 <_ZN9SensornetC1ERK4RF24>
     ce8:	002a      	movs	r2, r5
     cea:	4909      	ldr	r1, [pc, #36]	; (d10 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     cec:	0020      	movs	r0, r4
     cee:	f000 fff9 	bl	1ce4 <__aeabi_atexit>
     cf2:	e7d7      	b.n	ca4 <_Z41__static_initialization_and_destruction_0ii+0x8>
     cf4:	0000ffff 	.word	0x0000ffff
     cf8:	20000094 	.word	0x20000094
     cfc:	200002f4 	.word	0x200002f4
     d00:	2000000c 	.word	0x2000000c
     d04:	0000018d 	.word	0x0000018d
     d08:	200000d8 	.word	0x200000d8
     d0c:	200000a8 	.word	0x200000a8
     d10:	00000c89 	.word	0x00000c89

00000d14 <_ZN3Str7reserveEi>:
    }
}

// Reserve memory, preserving the current of the buffer
void    Str::reserve(int new_capacity)
{
     d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d16:	0004      	movs	r4, r0
     d18:	000e      	movs	r6, r1
    if (new_capacity <= Capacity)
     d1a:	6843      	ldr	r3, [r0, #4]
     d1c:	02db      	lsls	r3, r3, #11
     d1e:	0adb      	lsrs	r3, r3, #11
     d20:	428b      	cmp	r3, r1
     d22:	da20      	bge.n	d66 <_ZN3Str7reserveEi+0x52>
        return;

    char* new_data;
    if (new_capacity < LocalBufSize)
     d24:	88c5      	ldrh	r5, [r0, #6]
     d26:	046d      	lsls	r5, r5, #17
     d28:	0dad      	lsrs	r5, r5, #22
     d2a:	428d      	cmp	r5, r1
     d2c:	dd1c      	ble.n	d68 <_ZN3Str7reserveEi+0x54>
    inline char*        local_buf()                             { return (char*)this + sizeof(Str); }
     d2e:	0007      	movs	r7, r0
     d30:	3708      	adds	r7, #8
        // Disowned or LocalBuf -> Heap
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
    }

    // string in Data might be longer than new_capacity if it wasn't owned, don't copy too much
    strncpy(new_data, Data, new_capacity - 1);
     d32:	1e6e      	subs	r6, r5, #1
     d34:	0032      	movs	r2, r6
     d36:	6821      	ldr	r1, [r4, #0]
     d38:	0038      	movs	r0, r7
     d3a:	f001 fa14 	bl	2166 <strncpy>
    new_data[new_capacity - 1] = 0;
     d3e:	19be      	adds	r6, r7, r6
     d40:	2300      	movs	r3, #0
     d42:	7033      	strb	r3, [r6, #0]

    if (Owned && !is_using_local_buf())
     d44:	2307      	movs	r3, #7
     d46:	56e3      	ldrsb	r3, [r4, r3]
     d48:	2b00      	cmp	r3, #0
     d4a:	db13      	blt.n	d74 <_ZN3Str7reserveEi+0x60>
        STR_MEMFREE(Data);

    Data = new_data;
     d4c:	6027      	str	r7, [r4, #0]
    Capacity = new_capacity;
     d4e:	02ed      	lsls	r5, r5, #11
     d50:	0aed      	lsrs	r5, r5, #11
     d52:	6863      	ldr	r3, [r4, #4]
     d54:	0d5b      	lsrs	r3, r3, #21
     d56:	055b      	lsls	r3, r3, #21
     d58:	431d      	orrs	r5, r3
     d5a:	6065      	str	r5, [r4, #4]
    Owned = 1;
     d5c:	0e1b      	lsrs	r3, r3, #24
     d5e:	2280      	movs	r2, #128	; 0x80
     d60:	4252      	negs	r2, r2
     d62:	4313      	orrs	r3, r2
     d64:	71e3      	strb	r3, [r4, #7]
}
     d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_data = (char*)STR_MEMALLOC(new_capacity * sizeof(char));
     d68:	0008      	movs	r0, r1
     d6a:	f001 f8af 	bl	1ecc <malloc>
     d6e:	0007      	movs	r7, r0
     d70:	0035      	movs	r5, r6
     d72:	e7de      	b.n	d32 <_ZN3Str7reserveEi+0x1e>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     d74:	6820      	ldr	r0, [r4, #0]
    inline const char*  local_buf() const                       { return (char*)this + sizeof(Str); }
     d76:	0023      	movs	r3, r4
     d78:	3308      	adds	r3, #8
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     d7a:	4298      	cmp	r0, r3
     d7c:	d002      	beq.n	d84 <_ZN3Str7reserveEi+0x70>
        STR_MEMFREE(Data);
     d7e:	f001 f8af 	bl	1ee0 <free>
     d82:	e7e3      	b.n	d4c <_ZN3Str7reserveEi+0x38>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     d84:	88e2      	ldrh	r2, [r4, #6]
     d86:	4b02      	ldr	r3, [pc, #8]	; (d90 <_ZN3Str7reserveEi+0x7c>)
     d88:	421a      	tst	r2, r3
     d8a:	d1df      	bne.n	d4c <_ZN3Str7reserveEi+0x38>
     d8c:	e7f7      	b.n	d7e <_ZN3Str7reserveEi+0x6a>
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	00007fe0 	.word	0x00007fe0

00000d94 <_ZN3Str13appendfv_fromEiPKcSt9__va_list>:
    return add_len;
}

// FIXME: merge setfv() and appendfv()?
int     Str::appendfv_from(int idx, const char* fmt, va_list args)
{
     d94:	b5f0      	push	{r4, r5, r6, r7, lr}
     d96:	b083      	sub	sp, #12
     d98:	0005      	movs	r5, r0
     d9a:	000e      	movs	r6, r1
     d9c:	0017      	movs	r7, r2
    // Needed for portability on platforms where va_list are passed by reference and modified by functions
    va_list args2;
    va_copy(args2, args);
     d9e:	9301      	str	r3, [sp, #4]
    if (Capacity < idx + add_len + 1)
        reserve(idx + add_len + 1);
    add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
#else
    // First try
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
     da0:	2207      	movs	r2, #7
     da2:	5682      	ldrsb	r2, [r0, r2]
     da4:	2a00      	cmp	r2, #0
     da6:	db10      	blt.n	dca <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x36>
     da8:	2000      	movs	r0, #0
     daa:	2a00      	cmp	r2, #0
     dac:	db10      	blt.n	dd0 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x3c>
     dae:	2100      	movs	r1, #0
     db0:	003a      	movs	r2, r7
     db2:	f001 fabd 	bl	2330 <vsniprintf>
     db6:	0004      	movs	r4, r0
    STR_ASSERT(add_len >= 0);

    if (Capacity < idx + add_len + 1)
     db8:	1831      	adds	r1, r6, r0
     dba:	686b      	ldr	r3, [r5, #4]
     dbc:	02db      	lsls	r3, r3, #11
     dbe:	0adb      	lsrs	r3, r3, #11
     dc0:	4299      	cmp	r1, r3
     dc2:	da0a      	bge.n	dda <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x46>
    }
#endif

    STR_ASSERT(Owned);
    return add_len;
}
     dc4:	0020      	movs	r0, r4
     dc6:	b003      	add	sp, #12
     dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int add_len = vsnprintf(Owned ? Data + idx : NULL, Owned ? Capacity - idx : 0, fmt, args);
     dca:	6801      	ldr	r1, [r0, #0]
     dcc:	1988      	adds	r0, r1, r6
     dce:	e7ec      	b.n	daa <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x16>
     dd0:	686a      	ldr	r2, [r5, #4]
     dd2:	02d1      	lsls	r1, r2, #11
     dd4:	0ac9      	lsrs	r1, r1, #11
     dd6:	1b89      	subs	r1, r1, r6
     dd8:	e7ea      	b.n	db0 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x1c>
        reserve(idx + add_len + 1);
     dda:	3101      	adds	r1, #1
     ddc:	0028      	movs	r0, r5
     dde:	f7ff ff99 	bl	d14 <_ZN3Str7reserveEi>
        add_len = vsnprintf(Data + idx, add_len + 1, fmt, args2);
     de2:	6828      	ldr	r0, [r5, #0]
     de4:	1c61      	adds	r1, r4, #1
     de6:	1980      	adds	r0, r0, r6
     de8:	9b01      	ldr	r3, [sp, #4]
     dea:	003a      	movs	r2, r7
     dec:	f001 faa0 	bl	2330 <vsniprintf>
     df0:	0004      	movs	r4, r0
    return add_len;
     df2:	e7e7      	b.n	dc4 <_ZN3Str13appendfv_fromEiPKcSt9__va_list+0x30>

00000df4 <_ZN3Str8appendfvEPKcSt9__va_list>:
    int cur_len = length();
    return append_from(cur_len, s, s_end);
}

int     Str::appendfv(const char* fmt, va_list args)
{
     df4:	b570      	push	{r4, r5, r6, lr}
     df6:	0004      	movs	r4, r0
     df8:	000d      	movs	r5, r1
     dfa:	0016      	movs	r6, r2
    inline int          length() const                          { return (int)strlen(Data); }    // by design, allow user to write into the buffer at any time
     dfc:	6800      	ldr	r0, [r0, #0]
     dfe:	f001 f9ab 	bl	2158 <strlen>
     e02:	0001      	movs	r1, r0
    int cur_len = length();
    return appendfv_from(cur_len, fmt, args);
     e04:	0033      	movs	r3, r6
     e06:	002a      	movs	r2, r5
     e08:	0020      	movs	r0, r4
     e0a:	f7ff ffc3 	bl	d94 <_ZN3Str13appendfv_fromEiPKcSt9__va_list>
}
     e0e:	bd70      	pop	{r4, r5, r6, pc}

00000e10 <_ZN3Str7appendfEPKcz>:

int     Str::appendf(const char* fmt, ...)
{
     e10:	b40e      	push	{r1, r2, r3}
     e12:	b500      	push	{lr}
     e14:	b082      	sub	sp, #8
     e16:	aa03      	add	r2, sp, #12
     e18:	ca02      	ldmia	r2!, {r1}
    va_list args;
    va_start(args, fmt);
     e1a:	9201      	str	r2, [sp, #4]
    int len = appendfv(fmt, args);
     e1c:	f7ff ffea 	bl	df4 <_ZN3Str8appendfvEPKcSt9__va_list>
    va_end(args);
    return len;
}
     e20:	b002      	add	sp, #8
     e22:	bc08      	pop	{r3}
     e24:	b003      	add	sp, #12
     e26:	4718      	bx	r3

00000e28 <_ZL8cmd_infoP3GSMPKcS2_>:
static void cmd_info(GSM* gsm, const char* sender, const char* args) {
     e28:	b5f0      	push	{r4, r5, r6, r7, lr}
     e2a:	46d6      	mov	lr, sl
     e2c:	464f      	mov	r7, r9
     e2e:	4646      	mov	r6, r8
     e30:	b5c0      	push	{r6, r7, lr}
     e32:	b084      	sub	sp, #16
     e34:	4681      	mov	r9, r0
     e36:	4688      	mov	r8, r1
    Data = EmptyBuffer;      // Shared READ-ONLY initial buffer for 0 capacity
     e38:	aa02      	add	r2, sp, #8
     e3a:	4b32      	ldr	r3, [pc, #200]	; (f04 <_ZL8cmd_infoP3GSMPKcS2_+0xdc>)
     e3c:	681b      	ldr	r3, [r3, #0]
     e3e:	9302      	str	r3, [sp, #8]
    Capacity = 0;
     e40:	9b03      	ldr	r3, [sp, #12]
     e42:	0d5b      	lsrs	r3, r3, #21
     e44:	0559      	lsls	r1, r3, #21
     e46:	9103      	str	r1, [sp, #12]
    LocalBufSize = 0;
     e48:	015b      	lsls	r3, r3, #5
     e4a:	492f      	ldr	r1, [pc, #188]	; (f08 <_ZL8cmd_infoP3GSMPKcS2_+0xe0>)
     e4c:	400b      	ands	r3, r1
     e4e:	80d3      	strh	r3, [r2, #6]
    Owned = 0;
     e50:	2300      	movs	r3, #0
     e52:	71d3      	strb	r3, [r2, #7]
        return m_data;
     e54:	4b2d      	ldr	r3, [pc, #180]	; (f0c <_ZL8cmd_infoP3GSMPKcS2_+0xe4>)
     e56:	6adc      	ldr	r4, [r3, #44]	; 0x2c
        return m_data + m_size;
     e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e5a:	00de      	lsls	r6, r3, #3
     e5c:	18f6      	adds	r6, r6, r3
     e5e:	00b6      	lsls	r6, r6, #2
     e60:	19a6      	adds	r6, r4, r6
     e62:	e006      	b.n	e72 <_ZL8cmd_infoP3GSMPKcS2_+0x4a>
                    ((sensors::TempHum*)node.data.data)->temperature, ((sensors::TempHum*)node.data.data)->humidity);
     e64:	8962      	ldrh	r2, [r4, #10]
     e66:	89a3      	ldrh	r3, [r4, #12]
                str.appendf(" Temperature + humidity sensor:\n  Temperature: %d\n  Humidity: %d\n",
     e68:	4929      	ldr	r1, [pc, #164]	; (f10 <_ZL8cmd_infoP3GSMPKcS2_+0xe8>)
     e6a:	a802      	add	r0, sp, #8
     e6c:	f7ff ffd0 	bl	e10 <_ZN3Str7appendfEPKcz>
    for(auto& node : net.m_nodes) {
     e70:	3424      	adds	r4, #36	; 0x24
     e72:	42b4      	cmp	r4, r6
     e74:	d028      	beq.n	ec8 <_ZL8cmd_infoP3GSMPKcS2_+0xa0>
            node.data.id, node.data.name, node.data.type, (millis() - node.last_seen) / 1000);
     e76:	2700      	movs	r7, #0
     e78:	57e7      	ldrsb	r7, [r4, r7]
     e7a:	1c65      	adds	r5, r4, #1
     e7c:	7a63      	ldrb	r3, [r4, #9]
     e7e:	469a      	mov	sl, r3
     e80:	f000 fb06 	bl	1490 <millis>
     e84:	6a23      	ldr	r3, [r4, #32]
     e86:	1ac0      	subs	r0, r0, r3
        str.appendf("Node:\n ID: %d\n Name: %s\n Type: %d\n Last seen: %d sec ago\n",
     e88:	21fa      	movs	r1, #250	; 0xfa
     e8a:	0089      	lsls	r1, r1, #2
     e8c:	f000 ff32 	bl	1cf4 <__udivsi3>
     e90:	9001      	str	r0, [sp, #4]
     e92:	4653      	mov	r3, sl
     e94:	9300      	str	r3, [sp, #0]
     e96:	002b      	movs	r3, r5
     e98:	003a      	movs	r2, r7
     e9a:	491e      	ldr	r1, [pc, #120]	; (f14 <_ZL8cmd_infoP3GSMPKcS2_+0xec>)
     e9c:	a802      	add	r0, sp, #8
     e9e:	f7ff ffb7 	bl	e10 <_ZN3Str7appendfEPKcz>
        switch(node.data.type) {
     ea2:	7a63      	ldrb	r3, [r4, #9]
     ea4:	2b02      	cmp	r3, #2
     ea6:	d0dd      	beq.n	e64 <_ZL8cmd_infoP3GSMPKcS2_+0x3c>
     ea8:	2b03      	cmp	r3, #3
     eaa:	d007      	beq.n	ebc <_ZL8cmd_infoP3GSMPKcS2_+0x94>
     eac:	2b01      	cmp	r3, #1
     eae:	d1df      	bne.n	e70 <_ZL8cmd_infoP3GSMPKcS2_+0x48>
                str.appendf(" Soil moisture sensor:\n  Moisture: %d\n", ((sensors::Soil*)node.data.data)->moisture);
     eb0:	8962      	ldrh	r2, [r4, #10]
     eb2:	4919      	ldr	r1, [pc, #100]	; (f18 <_ZL8cmd_infoP3GSMPKcS2_+0xf0>)
     eb4:	a802      	add	r0, sp, #8
     eb6:	f7ff ffab 	bl	e10 <_ZN3Str7appendfEPKcz>
                break;
     eba:	e7d9      	b.n	e70 <_ZL8cmd_infoP3GSMPKcS2_+0x48>
                    ((sensors::Temp*)node.data.data)->temperature);
     ebc:	8962      	ldrh	r2, [r4, #10]
                str.appendf(" Temperature sensor:\n  Temperature: %d\n",
     ebe:	4917      	ldr	r1, [pc, #92]	; (f1c <_ZL8cmd_infoP3GSMPKcS2_+0xf4>)
     ec0:	a802      	add	r0, sp, #8
     ec2:	f7ff ffa5 	bl	e10 <_ZN3Str7appendfEPKcz>
                break;
     ec6:	e7d3      	b.n	e70 <_ZL8cmd_infoP3GSMPKcS2_+0x48>
    gsm->SendSMS(sender, str.c_str());
     ec8:	9a02      	ldr	r2, [sp, #8]
     eca:	4641      	mov	r1, r8
     ecc:	4648      	mov	r0, r9
     ece:	f7ff fb4b 	bl	568 <_ZN3GSM7SendSMSEPKcS1_>
        if (Owned && !is_using_local_buf())
     ed2:	ab02      	add	r3, sp, #8
     ed4:	79db      	ldrb	r3, [r3, #7]
     ed6:	b25b      	sxtb	r3, r3
     ed8:	2b00      	cmp	r3, #0
     eda:	db05      	blt.n	ee8 <_ZL8cmd_infoP3GSMPKcS2_+0xc0>
}
     edc:	b004      	add	sp, #16
     ede:	bc1c      	pop	{r2, r3, r4}
     ee0:	4690      	mov	r8, r2
     ee2:	4699      	mov	r9, r3
     ee4:	46a2      	mov	sl, r4
     ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     ee8:	9802      	ldr	r0, [sp, #8]
     eea:	ab04      	add	r3, sp, #16
     eec:	4298      	cmp	r0, r3
     eee:	d002      	beq.n	ef6 <_ZL8cmd_infoP3GSMPKcS2_+0xce>
            STR_MEMFREE(Data);
     ef0:	f000 fff6 	bl	1ee0 <free>
     ef4:	e7f2      	b.n	edc <_ZL8cmd_infoP3GSMPKcS2_+0xb4>
    inline bool         is_using_local_buf() const              { return Data == local_buf() && LocalBufSize != 0; }
     ef6:	ab02      	add	r3, sp, #8
     ef8:	88da      	ldrh	r2, [r3, #6]
     efa:	4b09      	ldr	r3, [pc, #36]	; (f20 <_ZL8cmd_infoP3GSMPKcS2_+0xf8>)
     efc:	421a      	tst	r2, r3
     efe:	d1ed      	bne.n	edc <_ZL8cmd_infoP3GSMPKcS2_+0xb4>
     f00:	e7f6      	b.n	ef0 <_ZL8cmd_infoP3GSMPKcS2_+0xc8>
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	20000010 	.word	0x20000010
     f08:	ffff801f 	.word	0xffff801f
     f0c:	200000a8 	.word	0x200000a8
     f10:	00002bc4 	.word	0x00002bc4
     f14:	00002b60 	.word	0x00002b60
     f18:	00002b9c 	.word	0x00002b9c
     f1c:	00002c08 	.word	0x00002c08
     f20:	00007fe0 	.word	0x00007fe0

00000f24 <main>:
int main() {
     f24:	b570      	push	{r4, r5, r6, lr}
     f26:	b096      	sub	sp, #88	; 0x58
    g_uart1.init({{GPIO_PORTA, 24}, {GPIO_PORTA, 25}, UART_SER1_TXPO_PA24, UART_SER1_RXPO_PA25}, CALC_BAUD(115200));
     f28:	a90e      	add	r1, sp, #56	; 0x38
     f2a:	4c38      	ldr	r4, [pc, #224]	; (100c <main+0xe8>)
     f2c:	000b      	movs	r3, r1
     f2e:	0022      	movs	r2, r4
     f30:	ca61      	ldmia	r2!, {r0, r5, r6}
     f32:	c361      	stmia	r3!, {r0, r5, r6}
     f34:	ca21      	ldmia	r2!, {r0, r5}
     f36:	c321      	stmia	r3!, {r0, r5}
     f38:	4a35      	ldr	r2, [pc, #212]	; (1010 <main+0xec>)
     f3a:	4836      	ldr	r0, [pc, #216]	; (1014 <main+0xf0>)
     f3c:	f000 faee 	bl	151c <_ZN6uart_t4initERK13uart_pincfg_tt>
    g_spi0.Init({
     f40:	a806      	add	r0, sp, #24
     f42:	3414      	adds	r4, #20
     f44:	0002      	movs	r2, r0
     f46:	cc2a      	ldmia	r4!, {r1, r3, r5}
     f48:	c22a      	stmia	r2!, {r1, r3, r5}
     f4a:	cc2a      	ldmia	r4!, {r1, r3, r5}
     f4c:	c22a      	stmia	r2!, {r1, r3, r5}
     f4e:	cc0a      	ldmia	r4!, {r1, r3}
     f50:	c20a      	stmia	r2!, {r1, r3}
     f52:	2314      	movs	r3, #20
     f54:	9305      	str	r3, [sp, #20]
     f56:	ab09      	add	r3, sp, #36	; 0x24
     f58:	466a      	mov	r2, sp
     f5a:	cb32      	ldmia	r3!, {r1, r4, r5}
     f5c:	c232      	stmia	r2!, {r1, r4, r5}
     f5e:	cb12      	ldmia	r3!, {r1, r4}
     f60:	c212      	stmia	r2!, {r1, r4}
     f62:	9906      	ldr	r1, [sp, #24]
     f64:	9a07      	ldr	r2, [sp, #28]
     f66:	9b08      	ldr	r3, [sp, #32]
     f68:	482b      	ldr	r0, [pc, #172]	; (1018 <main+0xf4>)
     f6a:	f000 f869 	bl	1040 <_ZN5spi_t4InitE12spi_pincfg_tt>
            PORT->Group[port].DIRSET.reg = 1 << pin;
     f6e:	4b2b      	ldr	r3, [pc, #172]	; (101c <main+0xf8>)
     f70:	2210      	movs	r2, #16
     f72:	609a      	str	r2, [r3, #8]
            PORT->Group[port].PINCFG[pin].bit.INEN = 0;
     f74:	2144      	movs	r1, #68	; 0x44
     f76:	5c5a      	ldrb	r2, [r3, r1]
     f78:	2002      	movs	r0, #2
     f7a:	4382      	bics	r2, r0
     f7c:	545a      	strb	r2, [r3, r1]
    if(!net.begin()) {
     f7e:	4828      	ldr	r0, [pc, #160]	; (1020 <main+0xfc>)
     f80:	f000 fdc2 	bl	1b08 <_ZN9Sensornet5beginEv>
     f84:	2800      	cmp	r0, #0
     f86:	d106      	bne.n	f96 <main+0x72>

    inline void toggle(const int port, const int pin) {
        PORT->Group[port].OUTTGL.reg = 1 << pin;
     f88:	4b24      	ldr	r3, [pc, #144]	; (101c <main+0xf8>)
     f8a:	2210      	movs	r2, #16
     f8c:	61da      	str	r2, [r3, #28]
            delay_usec(800000);
     f8e:	4825      	ldr	r0, [pc, #148]	; (1024 <main+0x100>)
     f90:	f001 ff2e 	bl	2df0 <__delay_usec_veneer>
        while(1) {
     f94:	e7f8      	b.n	f88 <main+0x64>
    if(!gsm.Init()) {
     f96:	4824      	ldr	r0, [pc, #144]	; (1028 <main+0x104>)
     f98:	f7ff f9c8 	bl	32c <_ZN3GSM4InitEv>
     f9c:	2800      	cmp	r0, #0
     f9e:	d109      	bne.n	fb4 <main+0x90>
            net.Poll();
     fa0:	481f      	ldr	r0, [pc, #124]	; (1020 <main+0xfc>)
     fa2:	f000 fe27 	bl	1bf4 <_ZN9Sensornet4PollEv>
     fa6:	4b1d      	ldr	r3, [pc, #116]	; (101c <main+0xf8>)
     fa8:	2210      	movs	r2, #16
     faa:	61da      	str	r2, [r3, #28]
            delay_usec(200000);
     fac:	481f      	ldr	r0, [pc, #124]	; (102c <main+0x108>)
     fae:	f001 ff1f 	bl	2df0 <__delay_usec_veneer>
        while(1) {
     fb2:	e7f5      	b.n	fa0 <main+0x7c>
    gsm.AddSMSFunc({ "info", cmd_info, 0 });
     fb4:	aa13      	add	r2, sp, #76	; 0x4c
     fb6:	4b15      	ldr	r3, [pc, #84]	; (100c <main+0xe8>)
     fb8:	3334      	adds	r3, #52	; 0x34
     fba:	cb13      	ldmia	r3!, {r0, r1, r4}
     fbc:	c213      	stmia	r2!, {r0, r1, r4}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
     fbe:	4b1a      	ldr	r3, [pc, #104]	; (1028 <main+0x104>)
     fc0:	689b      	ldr	r3, [r3, #8]
     fc2:	2b00      	cmp	r3, #0
     fc4:	d01e      	beq.n	1004 <main+0xe0>
     fc6:	4a18      	ldr	r2, [pc, #96]	; (1028 <main+0x104>)
     fc8:	68d0      	ldr	r0, [r2, #12]
     fca:	3301      	adds	r3, #1
     fcc:	210c      	movs	r1, #12
     fce:	4359      	muls	r1, r3
     fd0:	f001 f84a 	bl	2068 <realloc>
        if(!new_data) return;
     fd4:	2800      	cmp	r0, #0
     fd6:	d00b      	beq.n	ff0 <main+0xcc>
        m_data = new_data;
     fd8:	4c13      	ldr	r4, [pc, #76]	; (1028 <main+0x104>)
     fda:	60e0      	str	r0, [r4, #12]
        memcpy(m_data + m_size, &elem, sizeof(T));
     fdc:	220c      	movs	r2, #12
     fde:	68a3      	ldr	r3, [r4, #8]
     fe0:	4353      	muls	r3, r2
     fe2:	18c0      	adds	r0, r0, r3
     fe4:	a913      	add	r1, sp, #76	; 0x4c
     fe6:	f000 ff85 	bl	1ef4 <memcpy>
        m_size++;
     fea:	68a3      	ldr	r3, [r4, #8]
     fec:	3301      	adds	r3, #1
     fee:	60a3      	str	r3, [r4, #8]
        gsm.Poll();
     ff0:	480d      	ldr	r0, [pc, #52]	; (1028 <main+0x104>)
     ff2:	f7ff fa65 	bl	4c0 <_ZN3GSM4PollEv>
        net.Poll();
     ff6:	480a      	ldr	r0, [pc, #40]	; (1020 <main+0xfc>)
     ff8:	f000 fdfc 	bl	1bf4 <_ZN9Sensornet4PollEv>
     ffc:	4b07      	ldr	r3, [pc, #28]	; (101c <main+0xf8>)
     ffe:	2210      	movs	r2, #16
    1000:	61da      	str	r2, [r3, #28]
    1002:	e7f5      	b.n	ff0 <main+0xcc>
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1004:	200c      	movs	r0, #12
    1006:	f000 ff61 	bl	1ecc <malloc>
    100a:	e7e3      	b.n	fd4 <main+0xb0>
    100c:	000029ec 	.word	0x000029ec
    1010:	0000f62b 	.word	0x0000f62b
    1014:	200002f4 	.word	0x200002f4
    1018:	200000d8 	.word	0x200000d8
    101c:	41004400 	.word	0x41004400
    1020:	200000a8 	.word	0x200000a8
    1024:	000c3500 	.word	0x000c3500
    1028:	20000094 	.word	0x20000094
    102c:	00030d40 	.word	0x00030d40

00001030 <_GLOBAL__sub_I__ZN3Str11EmptyBufferE>:
    1030:	b510      	push	{r4, lr}
    1032:	4902      	ldr	r1, [pc, #8]	; (103c <_GLOBAL__sub_I__ZN3Str11EmptyBufferE+0xc>)
    1034:	2001      	movs	r0, #1
    1036:	f7ff fe31 	bl	c9c <_Z41__static_initialization_and_destruction_0ii>
    103a:	bd10      	pop	{r4, pc}
    103c:	0000ffff 	.word	0x0000ffff

00001040 <_ZN5spi_t4InitE12spi_pincfg_tt>:
#include "spi.h"

spi_t g_spi0(SERCOM0);
spi_t g_spi1(SERCOM1);

void spi_t::Init(spi_pincfg_t pincfg, uint16_t speed) {
    1040:	b084      	sub	sp, #16
    1042:	b5f0      	push	{r4, r5, r6, r7, lr}
    1044:	46c6      	mov	lr, r8
    1046:	b500      	push	{lr}
    1048:	9107      	str	r1, [sp, #28]
    104a:	9208      	str	r2, [sp, #32]
    104c:	9309      	str	r3, [sp, #36]	; 0x24
    104e:	ab0f      	add	r3, sp, #60	; 0x3c
    1050:	881b      	ldrh	r3, [r3, #0]
    1052:	4698      	mov	r8, r3
    if(m_sercom == SERCOM1) {
    1054:	4b83      	ldr	r3, [pc, #524]	; (1264 <_ZN5spi_t4InitE12spi_pincfg_tt+0x224>)
    1056:	6802      	ldr	r2, [r0, #0]
    1058:	429a      	cmp	r2, r3
    105a:	d100      	bne.n	105e <_ZN5spi_t4InitE12spi_pincfg_tt+0x1e>
    105c:	e0c1      	b.n	11e2 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1a2>
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);*/
        PM->APBCMASK.bit.SERCOM1_ = 1;
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
        while(GCLK->STATUS.bit.SYNCBUSY);
    } else {
        PM->APBCMASK.bit.SERCOM0_ = 1;
    105e:	4a82      	ldr	r2, [pc, #520]	; (1268 <_ZN5spi_t4InitE12spi_pincfg_tt+0x228>)
    1060:	6a13      	ldr	r3, [r2, #32]
    1062:	2404      	movs	r4, #4
    1064:	4323      	orrs	r3, r4
    1066:	6213      	str	r3, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    1068:	4b80      	ldr	r3, [pc, #512]	; (126c <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    106a:	4a81      	ldr	r2, [pc, #516]	; (1270 <_ZN5spi_t4InitE12spi_pincfg_tt+0x230>)
    106c:	805a      	strh	r2, [r3, #2]
            GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
        while(GCLK->STATUS.bit.SYNCBUSY);
    106e:	4b7f      	ldr	r3, [pc, #508]	; (126c <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    1070:	785b      	ldrb	r3, [r3, #1]
    1072:	09db      	lsrs	r3, r3, #7
    1074:	d1fb      	bne.n	106e <_ZN5spi_t4InitE12spi_pincfg_tt+0x2e>
    }
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1076:	ab07      	add	r3, sp, #28
    1078:	7e1b      	ldrb	r3, [r3, #24]
    107a:	2b00      	cmp	r3, #0
    107c:	d100      	bne.n	1080 <_ZN5spi_t4InitE12spi_pincfg_tt+0x40>
    107e:	e0bd      	b.n	11fc <_ZN5spi_t4InitE12spi_pincfg_tt+0x1bc>
    1080:	2503      	movs	r5, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1082:	9a07      	ldr	r2, [sp, #28]
    1084:	9c08      	ldr	r4, [sp, #32]
        if(pin & 1)
    1086:	07e3      	lsls	r3, r4, #31
    1088:	d400      	bmi.n	108c <_ZN5spi_t4InitE12spi_pincfg_tt+0x4c>
    108a:	e0b9      	b.n	1200 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1c0>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    108c:	0fe3      	lsrs	r3, r4, #31
    108e:	191b      	adds	r3, r3, r4
    1090:	105f      	asrs	r7, r3, #1
    1092:	260f      	movs	r6, #15
    1094:	4035      	ands	r5, r6
    1096:	01d3      	lsls	r3, r2, #7
    1098:	4976      	ldr	r1, [pc, #472]	; (1274 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    109a:	468c      	mov	ip, r1
    109c:	4463      	add	r3, ip
    109e:	19db      	adds	r3, r3, r7
    10a0:	3330      	adds	r3, #48	; 0x30
    10a2:	781f      	ldrb	r7, [r3, #0]
    10a4:	012d      	lsls	r5, r5, #4
    10a6:	403e      	ands	r6, r7
    10a8:	432e      	orrs	r6, r5
    10aa:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    10ac:	01d3      	lsls	r3, r2, #7
    10ae:	4a71      	ldr	r2, [pc, #452]	; (1274 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    10b0:	4694      	mov	ip, r2
    10b2:	4463      	add	r3, ip
    10b4:	191b      	adds	r3, r3, r4
    10b6:	3340      	adds	r3, #64	; 0x40
    10b8:	781a      	ldrb	r2, [r3, #0]
    10ba:	2401      	movs	r4, #1
    10bc:	4322      	orrs	r2, r4
    10be:	701a      	strb	r2, [r3, #0]
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    10c0:	ab07      	add	r3, sp, #28
    10c2:	7e5b      	ldrb	r3, [r3, #25]
    10c4:	2b00      	cmp	r3, #0
    10c6:	d100      	bne.n	10ca <_ZN5spi_t4InitE12spi_pincfg_tt+0x8a>
    10c8:	e0a9      	b.n	121e <_ZN5spi_t4InitE12spi_pincfg_tt+0x1de>
    10ca:	2503      	movs	r5, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    10cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        if(pin & 1)
    10d0:	07e3      	lsls	r3, r4, #31
    10d2:	d400      	bmi.n	10d6 <_ZN5spi_t4InitE12spi_pincfg_tt+0x96>
    10d4:	e0a5      	b.n	1222 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1e2>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    10d6:	0fe3      	lsrs	r3, r4, #31
    10d8:	191b      	adds	r3, r3, r4
    10da:	105f      	asrs	r7, r3, #1
    10dc:	260f      	movs	r6, #15
    10de:	4035      	ands	r5, r6
    10e0:	01d3      	lsls	r3, r2, #7
    10e2:	4964      	ldr	r1, [pc, #400]	; (1274 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    10e4:	468c      	mov	ip, r1
    10e6:	4463      	add	r3, ip
    10e8:	19db      	adds	r3, r3, r7
    10ea:	3330      	adds	r3, #48	; 0x30
    10ec:	781f      	ldrb	r7, [r3, #0]
    10ee:	012d      	lsls	r5, r5, #4
    10f0:	403e      	ands	r6, r7
    10f2:	432e      	orrs	r6, r5
    10f4:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    10f6:	01d3      	lsls	r3, r2, #7
    10f8:	4a5e      	ldr	r2, [pc, #376]	; (1274 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    10fa:	4694      	mov	ip, r2
    10fc:	4463      	add	r3, ip
    10fe:	191b      	adds	r3, r3, r4
    1100:	3340      	adds	r3, #64	; 0x40
    1102:	781a      	ldrb	r2, [r3, #0]
    1104:	2401      	movs	r4, #1
    1106:	4322      	orrs	r2, r4
    1108:	701a      	strb	r2, [r3, #0]
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    110a:	ab07      	add	r3, sp, #28
    110c:	7e9b      	ldrb	r3, [r3, #26]
    110e:	2b00      	cmp	r3, #0
    1110:	d100      	bne.n	1114 <_ZN5spi_t4InitE12spi_pincfg_tt+0xd4>
    1112:	e095      	b.n	1240 <_ZN5spi_t4InitE12spi_pincfg_tt+0x200>
    1114:	2503      	movs	r5, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1116:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1118:	9c0c      	ldr	r4, [sp, #48]	; 0x30
        if(pin & 1)
    111a:	07e3      	lsls	r3, r4, #31
    111c:	d400      	bmi.n	1120 <_ZN5spi_t4InitE12spi_pincfg_tt+0xe0>
    111e:	e091      	b.n	1244 <_ZN5spi_t4InitE12spi_pincfg_tt+0x204>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1120:	0fe3      	lsrs	r3, r4, #31
    1122:	191b      	adds	r3, r3, r4
    1124:	105f      	asrs	r7, r3, #1
    1126:	260f      	movs	r6, #15
    1128:	4035      	ands	r5, r6
    112a:	01d3      	lsls	r3, r2, #7
    112c:	4951      	ldr	r1, [pc, #324]	; (1274 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    112e:	468c      	mov	ip, r1
    1130:	4463      	add	r3, ip
    1132:	19db      	adds	r3, r3, r7
    1134:	3330      	adds	r3, #48	; 0x30
    1136:	781f      	ldrb	r7, [r3, #0]
    1138:	012d      	lsls	r5, r5, #4
    113a:	403e      	ands	r6, r7
    113c:	432e      	orrs	r6, r5
    113e:	701e      	strb	r6, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1140:	01d3      	lsls	r3, r2, #7
    1142:	4a4c      	ldr	r2, [pc, #304]	; (1274 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    1144:	4694      	mov	ip, r2
    1146:	4463      	add	r3, ip
    1148:	191b      	adds	r3, r3, r4
    114a:	3340      	adds	r3, #64	; 0x40
    114c:	781a      	ldrb	r2, [r3, #0]
    114e:	2401      	movs	r4, #1
    1150:	4322      	orrs	r2, r4
    1152:	701a      	strb	r2, [r3, #0]

    m_sercom->SPI.CTRLA.bit.ENABLE = 0;
    1154:	6802      	ldr	r2, [r0, #0]
    1156:	6813      	ldr	r3, [r2, #0]
    1158:	2402      	movs	r4, #2
    115a:	43a3      	bics	r3, r4
    115c:	6013      	str	r3, [r2, #0]
	m_sercom->SPI.CTRLA.bit.SWRST = 1;
    115e:	6802      	ldr	r2, [r0, #0]
    1160:	6813      	ldr	r3, [r2, #0]
    1162:	3c01      	subs	r4, #1
    1164:	4323      	orrs	r3, r4
    1166:	6013      	str	r3, [r2, #0]
	while(m_sercom->SPI.CTRLA.bit.SWRST);
    1168:	6803      	ldr	r3, [r0, #0]
    116a:	681a      	ldr	r2, [r3, #0]
    116c:	07d2      	lsls	r2, r2, #31
    116e:	d4fb      	bmi.n	1168 <_ZN5spi_t4InitE12spi_pincfg_tt+0x128>

	m_sercom->SPI.CTRLA.bit.MODE = SERCOM_SPI_CTRLA_MODE_SPI_MASTER_Val;
    1170:	681a      	ldr	r2, [r3, #0]
    1172:	241c      	movs	r4, #28
    1174:	43a2      	bics	r2, r4
    1176:	3c10      	subs	r4, #16
    1178:	4322      	orrs	r2, r4
    117a:	601a      	str	r2, [r3, #0]
	m_sercom->SPI.CTRLA.bit.DOPO = pincfg.mosisckpad;
    117c:	6806      	ldr	r6, [r0, #0]
    117e:	ad07      	add	r5, sp, #28
    1180:	7f2c      	ldrb	r4, [r5, #28]
    1182:	2303      	movs	r3, #3
    1184:	401c      	ands	r4, r3
    1186:	6832      	ldr	r2, [r6, #0]
    1188:	0424      	lsls	r4, r4, #16
    118a:	4f3b      	ldr	r7, [pc, #236]	; (1278 <_ZN5spi_t4InitE12spi_pincfg_tt+0x238>)
    118c:	403a      	ands	r2, r7
    118e:	4322      	orrs	r2, r4
    1190:	6032      	str	r2, [r6, #0]
	m_sercom->SPI.CTRLA.bit.DIPO = pincfg.misopad;
    1192:	6804      	ldr	r4, [r0, #0]
    1194:	7eed      	ldrb	r5, [r5, #27]
    1196:	6822      	ldr	r2, [r4, #0]
    1198:	402b      	ands	r3, r5
    119a:	051b      	lsls	r3, r3, #20
    119c:	4d37      	ldr	r5, [pc, #220]	; (127c <_ZN5spi_t4InitE12spi_pincfg_tt+0x23c>)
    119e:	402a      	ands	r2, r5
    11a0:	4313      	orrs	r3, r2
    11a2:	6023      	str	r3, [r4, #0]

    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    11a4:	6803      	ldr	r3, [r0, #0]
    11a6:	69da      	ldr	r2, [r3, #28]
    11a8:	0752      	lsls	r2, r2, #29
    11aa:	d4fb      	bmi.n	11a4 <_ZN5spi_t4InitE12spi_pincfg_tt+0x164>
    /* SPI receiver is enabled */
    m_sercom->SPI.CTRLB.bit.RXEN = 1;
    11ac:	685c      	ldr	r4, [r3, #4]
    11ae:	2280      	movs	r2, #128	; 0x80
    11b0:	0292      	lsls	r2, r2, #10
    11b2:	4322      	orrs	r2, r4
    11b4:	605a      	str	r2, [r3, #4]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.CTRLB);
    11b6:	6803      	ldr	r3, [r0, #0]
    11b8:	69da      	ldr	r2, [r3, #28]
    11ba:	0752      	lsls	r2, r2, #29
    11bc:	d4fb      	bmi.n	11b6 <_ZN5spi_t4InitE12spi_pincfg_tt+0x176>

    /* baud register value corresponds to the SPI speed */
    m_sercom->SPI.BAUD.reg = speed;
    11be:	4642      	mov	r2, r8
    11c0:	b2d1      	uxtb	r1, r2
    11c2:	7319      	strb	r1, [r3, #12]
    /* SERCOM peripheral enabled */
    m_sercom->SPI.CTRLA.bit.ENABLE = 1;
    11c4:	6802      	ldr	r2, [r0, #0]
    11c6:	6813      	ldr	r3, [r2, #0]
    11c8:	2102      	movs	r1, #2
    11ca:	430b      	orrs	r3, r1
    11cc:	6013      	str	r3, [r2, #0]
    /* synchronization busy */
    while(m_sercom->SPI.SYNCBUSY.bit.ENABLE);
    11ce:	6803      	ldr	r3, [r0, #0]
    11d0:	69db      	ldr	r3, [r3, #28]
    11d2:	079b      	lsls	r3, r3, #30
    11d4:	d4fb      	bmi.n	11ce <_ZN5spi_t4InitE12spi_pincfg_tt+0x18e>
}
    11d6:	bc04      	pop	{r2}
    11d8:	4690      	mov	r8, r2
    11da:	bcf0      	pop	{r4, r5, r6, r7}
    11dc:	bc08      	pop	{r3}
    11de:	b004      	add	sp, #16
    11e0:	4718      	bx	r3
        PM->APBCMASK.bit.SERCOM1_ = 1;
    11e2:	4a21      	ldr	r2, [pc, #132]	; (1268 <_ZN5spi_t4InitE12spi_pincfg_tt+0x228>)
    11e4:	6a13      	ldr	r3, [r2, #32]
    11e6:	2408      	movs	r4, #8
    11e8:	4323      	orrs	r3, r4
    11ea:	6213      	str	r3, [r2, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    11ec:	4b1f      	ldr	r3, [pc, #124]	; (126c <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    11ee:	4a24      	ldr	r2, [pc, #144]	; (1280 <_ZN5spi_t4InitE12spi_pincfg_tt+0x240>)
    11f0:	805a      	strh	r2, [r3, #2]
        while(GCLK->STATUS.bit.SYNCBUSY);
    11f2:	4b1e      	ldr	r3, [pc, #120]	; (126c <_ZN5spi_t4InitE12spi_pincfg_tt+0x22c>)
    11f4:	785b      	ldrb	r3, [r3, #1]
    11f6:	09db      	lsrs	r3, r3, #7
    11f8:	d1fb      	bne.n	11f2 <_ZN5spi_t4InitE12spi_pincfg_tt+0x1b2>
    11fa:	e73c      	b.n	1076 <_ZN5spi_t4InitE12spi_pincfg_tt+0x36>
    gpio::pmuxen(pincfg.miso, pincfg.miso_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    11fc:	2502      	movs	r5, #2
    11fe:	e740      	b.n	1082 <_ZN5spi_t4InitE12spi_pincfg_tt+0x42>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    1200:	0fe3      	lsrs	r3, r4, #31
    1202:	191b      	adds	r3, r3, r4
    1204:	105e      	asrs	r6, r3, #1
    1206:	01d3      	lsls	r3, r2, #7
    1208:	491a      	ldr	r1, [pc, #104]	; (1274 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    120a:	468c      	mov	ip, r1
    120c:	4463      	add	r3, ip
    120e:	199b      	adds	r3, r3, r6
    1210:	3330      	adds	r3, #48	; 0x30
    1212:	781e      	ldrb	r6, [r3, #0]
    1214:	270f      	movs	r7, #15
    1216:	43be      	bics	r6, r7
    1218:	4335      	orrs	r5, r6
    121a:	701d      	strb	r5, [r3, #0]
    121c:	e746      	b.n	10ac <_ZN5spi_t4InitE12spi_pincfg_tt+0x6c>
    gpio::pmuxen(pincfg.mosi, pincfg.mosi_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    121e:	2502      	movs	r5, #2
    1220:	e754      	b.n	10cc <_ZN5spi_t4InitE12spi_pincfg_tt+0x8c>
    1222:	0fe3      	lsrs	r3, r4, #31
    1224:	191b      	adds	r3, r3, r4
    1226:	105e      	asrs	r6, r3, #1
    1228:	01d3      	lsls	r3, r2, #7
    122a:	4912      	ldr	r1, [pc, #72]	; (1274 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    122c:	468c      	mov	ip, r1
    122e:	4463      	add	r3, ip
    1230:	199b      	adds	r3, r3, r6
    1232:	3330      	adds	r3, #48	; 0x30
    1234:	781e      	ldrb	r6, [r3, #0]
    1236:	270f      	movs	r7, #15
    1238:	43be      	bics	r6, r7
    123a:	4335      	orrs	r5, r6
    123c:	701d      	strb	r5, [r3, #0]
    123e:	e75a      	b.n	10f6 <_ZN5spi_t4InitE12spi_pincfg_tt+0xb6>
    gpio::pmuxen(pincfg.sck, pincfg.sck_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1240:	2502      	movs	r5, #2
    1242:	e768      	b.n	1116 <_ZN5spi_t4InitE12spi_pincfg_tt+0xd6>
    1244:	0fe3      	lsrs	r3, r4, #31
    1246:	191b      	adds	r3, r3, r4
    1248:	105e      	asrs	r6, r3, #1
    124a:	01d3      	lsls	r3, r2, #7
    124c:	4909      	ldr	r1, [pc, #36]	; (1274 <_ZN5spi_t4InitE12spi_pincfg_tt+0x234>)
    124e:	468c      	mov	ip, r1
    1250:	4463      	add	r3, ip
    1252:	199b      	adds	r3, r3, r6
    1254:	3330      	adds	r3, #48	; 0x30
    1256:	781e      	ldrb	r6, [r3, #0]
    1258:	270f      	movs	r7, #15
    125a:	43be      	bics	r6, r7
    125c:	4335      	orrs	r5, r6
    125e:	701d      	strb	r5, [r3, #0]
    1260:	e76e      	b.n	1140 <_ZN5spi_t4InitE12spi_pincfg_tt+0x100>
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	42000c00 	.word	0x42000c00
    1268:	40000400 	.word	0x40000400
    126c:	40000c00 	.word	0x40000c00
    1270:	0000400e 	.word	0x0000400e
    1274:	41004400 	.word	0x41004400
    1278:	fffcffff 	.word	0xfffcffff
    127c:	ffcfffff 	.word	0xffcfffff
    1280:	0000400f 	.word	0x0000400f

00001284 <_ZN5spi_tC1EP6Sercom>:

spi_t::spi_t(Sercom* sercom) {
    m_sercom = sercom;
    1284:	6001      	str	r1, [r0, #0]
}
    1286:	4770      	bx	lr

00001288 <_Z41__static_initialization_and_destruction_0ii>:
    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    //m_sercom->SPI.INTFLAG.bit.RXC = 1; // Clear RXC flag by setting it to 1
    m_sercom->SPI.DATA.reg = b;
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
	return m_sercom->SPI.DATA.reg;
    1288:	b510      	push	{r4, lr}
    128a:	2801      	cmp	r0, #1
    128c:	d000      	beq.n	1290 <_Z41__static_initialization_and_destruction_0ii+0x8>
    128e:	bd10      	pop	{r4, pc}
    1290:	4b05      	ldr	r3, [pc, #20]	; (12a8 <_Z41__static_initialization_and_destruction_0ii+0x20>)
    1292:	4299      	cmp	r1, r3
    1294:	d1fb      	bne.n	128e <_Z41__static_initialization_and_destruction_0ii+0x6>
spi_t g_spi0(SERCOM0);
    1296:	4905      	ldr	r1, [pc, #20]	; (12ac <_Z41__static_initialization_and_destruction_0ii+0x24>)
    1298:	4805      	ldr	r0, [pc, #20]	; (12b0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    129a:	f7ff fff3 	bl	1284 <_ZN5spi_tC1EP6Sercom>
spi_t g_spi1(SERCOM1);
    129e:	4905      	ldr	r1, [pc, #20]	; (12b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    12a0:	4805      	ldr	r0, [pc, #20]	; (12b8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    12a2:	f7ff ffef 	bl	1284 <_ZN5spi_tC1EP6Sercom>
    12a6:	e7f2      	b.n	128e <_Z41__static_initialization_and_destruction_0ii+0x6>
    12a8:	0000ffff 	.word	0x0000ffff
    12ac:	42000800 	.word	0x42000800
    12b0:	200000d8 	.word	0x200000d8
    12b4:	42000c00 	.word	0x42000c00
    12b8:	200000dc 	.word	0x200000dc

000012bc <_ZN5spi_t8TransferEh>:
    if(!m_sercom) return 0xFF;
    12bc:	6802      	ldr	r2, [r0, #0]
    12be:	2a00      	cmp	r2, #0
    12c0:	d00a      	beq.n	12d8 <_ZN5spi_t8TransferEh+0x1c>
    while(!m_sercom->SPI.INTFLAG.bit.DRE); // Wait for data register empty
    12c2:	7e13      	ldrb	r3, [r2, #24]
    12c4:	07db      	lsls	r3, r3, #31
    12c6:	d5fc      	bpl.n	12c2 <_ZN5spi_t8TransferEh+0x6>
    m_sercom->SPI.DATA.reg = b;
    12c8:	6291      	str	r1, [r2, #40]	; 0x28
	while(!m_sercom->SPI.INTFLAG.bit.RXC);
    12ca:	6803      	ldr	r3, [r0, #0]
    12cc:	7e1a      	ldrb	r2, [r3, #24]
    12ce:	0752      	lsls	r2, r2, #29
    12d0:	d5fb      	bpl.n	12ca <_ZN5spi_t8TransferEh+0xe>
	return m_sercom->SPI.DATA.reg;
    12d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    12d4:	b2c0      	uxtb	r0, r0
    12d6:	4770      	bx	lr
    if(!m_sercom) return 0xFF;
    12d8:	20ff      	movs	r0, #255	; 0xff
    12da:	e7fc      	b.n	12d6 <_ZN5spi_t8TransferEh+0x1a>

000012dc <_GLOBAL__sub_I_g_spi0>:
    12dc:	b510      	push	{r4, lr}
    12de:	4902      	ldr	r1, [pc, #8]	; (12e8 <_GLOBAL__sub_I_g_spi0+0xc>)
    12e0:	2001      	movs	r0, #1
    12e2:	f7ff ffd1 	bl	1288 <_Z41__static_initialization_and_destruction_0ii>
    12e6:	bd10      	pop	{r4, pc}
    12e8:	0000ffff 	.word	0x0000ffff

000012ec <initializeSystemFor48MHz>:

static volatile uint64_t _cycles;

static void initializeSystemFor48MHz()
{
	SYSCTRL->OSC8M.bit.PRESC = 3; //prescaler 8
    12ec:	4a48      	ldr	r2, [pc, #288]	; (1410 <initializeSystemFor48MHz+0x124>)
    12ee:	6a11      	ldr	r1, [r2, #32]
    12f0:	23c0      	movs	r3, #192	; 0xc0
    12f2:	009b      	lsls	r3, r3, #2
    12f4:	430b      	orrs	r3, r1
    12f6:	6213      	str	r3, [r2, #32]
	// Change the timing of the NVM access
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
    12f8:	4946      	ldr	r1, [pc, #280]	; (1414 <initializeSystemFor48MHz+0x128>)
    12fa:	684a      	ldr	r2, [r1, #4]
    12fc:	231e      	movs	r3, #30
    12fe:	439a      	bics	r2, r3
    1300:	3b1c      	subs	r3, #28
    1302:	4313      	orrs	r3, r2
    1304:	604b      	str	r3, [r1, #4]

	// Enable the bus clock for the clock system.
	PM->APBAMASK.bit.GCLK_ = 1;
    1306:	4a44      	ldr	r2, [pc, #272]	; (1418 <initializeSystemFor48MHz+0x12c>)
    1308:	6991      	ldr	r1, [r2, #24]
    130a:	2308      	movs	r3, #8
    130c:	430b      	orrs	r3, r1
    130e:	6193      	str	r3, [r2, #24]

	// Initialise the DFLL to run in closed-loop mode at 48MHz
	// 1. Make a software reset of the clock system.
	GCLK->CTRL.bit.SWRST = 1;
    1310:	4a42      	ldr	r2, [pc, #264]	; (141c <initializeSystemFor48MHz+0x130>)
    1312:	7813      	ldrb	r3, [r2, #0]
    1314:	2101      	movs	r1, #1
    1316:	430b      	orrs	r3, r1
    1318:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.bit.SWRST && GCLK->STATUS.bit.SYNCBUSY) {};
    131a:	4b40      	ldr	r3, [pc, #256]	; (141c <initializeSystemFor48MHz+0x130>)
    131c:	781b      	ldrb	r3, [r3, #0]
    131e:	07db      	lsls	r3, r3, #31
    1320:	d503      	bpl.n	132a <initializeSystemFor48MHz+0x3e>
    1322:	4b3e      	ldr	r3, [pc, #248]	; (141c <initializeSystemFor48MHz+0x130>)
    1324:	785b      	ldrb	r3, [r3, #1]
    1326:	09db      	lsrs	r3, r3, #7
    1328:	d1f7      	bne.n	131a <initializeSystemFor48MHz+0x2e>
	// 2. Make sure the OCM8M keeps running.
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
    132a:	4b39      	ldr	r3, [pc, #228]	; (1410 <initializeSystemFor48MHz+0x124>)
    132c:	6a19      	ldr	r1, [r3, #32]
    132e:	2280      	movs	r2, #128	; 0x80
    1330:	4391      	bics	r1, r2
    1332:	6219      	str	r1, [r3, #32]
	// 3. Set the division factor to 64, which reduces the 1MHz source to 15.625kHz
	GCLK->GENDIV.reg =
    1334:	4b39      	ldr	r3, [pc, #228]	; (141c <initializeSystemFor48MHz+0x130>)
    1336:	4a3a      	ldr	r2, [pc, #232]	; (1420 <initializeSystemFor48MHz+0x134>)
    1338:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(3) | // Select generator 3
	GCLK_GENDIV_DIV(64); // Set the division factor to 64
	// 4. Create generic clock generator 3 for the 15KHz signal of the DFLL
	GCLK->GENCTRL.reg =
    133a:	4a3a      	ldr	r2, [pc, #232]	; (1424 <initializeSystemFor48MHz+0x138>)
    133c:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(3) | // Select generator 3
	GCLK_GENCTRL_SRC_OSC8M | // Select source OSC8M
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    133e:	4b37      	ldr	r3, [pc, #220]	; (141c <initializeSystemFor48MHz+0x130>)
    1340:	785b      	ldrb	r3, [r3, #1]
    1342:	09db      	lsrs	r3, r3, #7
    1344:	d1fb      	bne.n	133e <initializeSystemFor48MHz+0x52>
	// 5. Configure DFLL with the
	GCLK->CLKCTRL.reg =
    1346:	4b35      	ldr	r3, [pc, #212]	; (141c <initializeSystemFor48MHz+0x130>)
    1348:	2286      	movs	r2, #134	; 0x86
    134a:	01d2      	lsls	r2, r2, #7
    134c:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID_DFLL48 | // Target is DFLL48M
	GCLK_CLKCTRL_GEN(3) | // Select generator 3 as source.
	GCLK_CLKCTRL_CLKEN; // Enable the DFLL48M
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    134e:	4b33      	ldr	r3, [pc, #204]	; (141c <initializeSystemFor48MHz+0x130>)
    1350:	785b      	ldrb	r3, [r3, #1]
    1352:	09db      	lsrs	r3, r3, #7
    1354:	d1fb      	bne.n	134e <initializeSystemFor48MHz+0x62>
	// 6. Workaround to be able to configure the DFLL.
	SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
    1356:	4a2e      	ldr	r2, [pc, #184]	; (1410 <initializeSystemFor48MHz+0x124>)
    1358:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    135a:	2180      	movs	r1, #128	; 0x80
    135c:	438b      	bics	r3, r1
    135e:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1360:	4b2b      	ldr	r3, [pc, #172]	; (1410 <initializeSystemFor48MHz+0x124>)
    1362:	68db      	ldr	r3, [r3, #12]
    1364:	06db      	lsls	r3, r3, #27
    1366:	d5fb      	bpl.n	1360 <initializeSystemFor48MHz+0x74>
	// 7. Change the multiplication factor.
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
    1368:	4b29      	ldr	r3, [pc, #164]	; (1410 <initializeSystemFor48MHz+0x124>)
    136a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    136c:	0c12      	lsrs	r2, r2, #16
    136e:	0412      	lsls	r2, r2, #16
    1370:	21c0      	movs	r1, #192	; 0xc0
    1372:	0109      	lsls	r1, r1, #4
    1374:	4311      	orrs	r1, r2
    1376:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
    1378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    137a:	0192      	lsls	r2, r2, #6
    137c:	0992      	lsrs	r2, r2, #6
    137e:	2180      	movs	r1, #128	; 0x80
    1380:	04c9      	lsls	r1, r1, #19
    1382:	4311      	orrs	r1, r2
    1384:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.FSTEP = 1; // Fine step = 1
    1386:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1388:	4a27      	ldr	r2, [pc, #156]	; (1428 <initializeSystemFor48MHz+0x13c>)
    138a:	4011      	ands	r1, r2
    138c:	2280      	movs	r2, #128	; 0x80
    138e:	0252      	lsls	r2, r2, #9
    1390:	430a      	orrs	r2, r1
    1392:	62da      	str	r2, [r3, #44]	; 0x2c
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    1394:	4b1e      	ldr	r3, [pc, #120]	; (1410 <initializeSystemFor48MHz+0x124>)
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	06db      	lsls	r3, r3, #27
    139a:	d5fb      	bpl.n	1394 <initializeSystemFor48MHz+0xa8>
	// 8. Start closed-loop mode
	SYSCTRL->DFLLCTRL.reg |=
    139c:	4a1c      	ldr	r2, [pc, #112]	; (1410 <initializeSystemFor48MHz+0x124>)
    139e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    13a0:	2181      	movs	r1, #129	; 0x81
    13a2:	0089      	lsls	r1, r1, #2
    13a4:	430b      	orrs	r3, r1
    13a6:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_MODE | // 1 = Closed loop mode.
	SYSCTRL_DFLLCTRL_QLDIS; // 1 = Disable quick lock.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    13a8:	4b19      	ldr	r3, [pc, #100]	; (1410 <initializeSystemFor48MHz+0x124>)
    13aa:	68db      	ldr	r3, [r3, #12]
    13ac:	06db      	lsls	r3, r3, #27
    13ae:	d5fb      	bpl.n	13a8 <initializeSystemFor48MHz+0xbc>
	// 9. Clear the lock flags.
	SYSCTRL->INTFLAG.bit.DFLLLCKC = 1;
    13b0:	4b17      	ldr	r3, [pc, #92]	; (1410 <initializeSystemFor48MHz+0x124>)
    13b2:	6899      	ldr	r1, [r3, #8]
    13b4:	2280      	movs	r2, #128	; 0x80
    13b6:	430a      	orrs	r2, r1
    13b8:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLLCKF = 1;
    13ba:	6899      	ldr	r1, [r3, #8]
    13bc:	2240      	movs	r2, #64	; 0x40
    13be:	430a      	orrs	r2, r1
    13c0:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLRDY = 1;
    13c2:	6899      	ldr	r1, [r3, #8]
    13c4:	2210      	movs	r2, #16
    13c6:	430a      	orrs	r2, r1
    13c8:	609a      	str	r2, [r3, #8]
	// 10. Enable the DFLL
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
    13ca:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    13cc:	2102      	movs	r1, #2
    13ce:	430a      	orrs	r2, r1
    13d0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
    13d2:	4b0f      	ldr	r3, [pc, #60]	; (1410 <initializeSystemFor48MHz+0x124>)
    13d4:	68db      	ldr	r3, [r3, #12]
    13d6:	06db      	lsls	r3, r3, #27
    13d8:	d5fb      	bpl.n	13d2 <initializeSystemFor48MHz+0xe6>
	// 11. Wait for the fine and coarse locks.
	while (!SYSCTRL->INTFLAG.bit.DFLLLCKC && !SYSCTRL->INTFLAG.bit.DFLLLCKF) {};
    13da:	4b0d      	ldr	r3, [pc, #52]	; (1410 <initializeSystemFor48MHz+0x124>)
    13dc:	689b      	ldr	r3, [r3, #8]
    13de:	061b      	lsls	r3, r3, #24
    13e0:	d403      	bmi.n	13ea <initializeSystemFor48MHz+0xfe>
    13e2:	4b0b      	ldr	r3, [pc, #44]	; (1410 <initializeSystemFor48MHz+0x124>)
    13e4:	689b      	ldr	r3, [r3, #8]
    13e6:	065b      	lsls	r3, r3, #25
    13e8:	d5f7      	bpl.n	13da <initializeSystemFor48MHz+0xee>
	// 12. Wait until the DFLL is ready.
	while (!SYSCTRL->INTFLAG.bit.DFLLRDY) {};
    13ea:	4b09      	ldr	r3, [pc, #36]	; (1410 <initializeSystemFor48MHz+0x124>)
    13ec:	689b      	ldr	r3, [r3, #8]
    13ee:	06db      	lsls	r3, r3, #27
    13f0:	d5fb      	bpl.n	13ea <initializeSystemFor48MHz+0xfe>

	// Switch the main clock speed.
	// 1. Set the divisor of generic clock 0 to 0
	GCLK->GENDIV.reg =
    13f2:	4b0a      	ldr	r3, [pc, #40]	; (141c <initializeSystemFor48MHz+0x130>)
    13f4:	2200      	movs	r2, #0
    13f6:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(0) | // Select generator 0
	GCLK_GENDIV_DIV(0);
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    13f8:	4b08      	ldr	r3, [pc, #32]	; (141c <initializeSystemFor48MHz+0x130>)
    13fa:	785b      	ldrb	r3, [r3, #1]
    13fc:	09db      	lsrs	r3, r3, #7
    13fe:	d1fb      	bne.n	13f8 <initializeSystemFor48MHz+0x10c>
	// 2. Switch generic clock 0 to the DFLL
	GCLK->GENCTRL.reg =
    1400:	4b06      	ldr	r3, [pc, #24]	; (141c <initializeSystemFor48MHz+0x130>)
    1402:	4a0a      	ldr	r2, [pc, #40]	; (142c <initializeSystemFor48MHz+0x140>)
    1404:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(0) | // Select generator 0
	GCLK_GENCTRL_SRC_DFLL48M | // Select source DFLL
	GCLK_GENCTRL_IDC | // Set improved duty cycle 50/50
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
    1406:	4b05      	ldr	r3, [pc, #20]	; (141c <initializeSystemFor48MHz+0x130>)
    1408:	785b      	ldrb	r3, [r3, #1]
    140a:	09db      	lsrs	r3, r3, #7
    140c:	d1fb      	bne.n	1406 <initializeSystemFor48MHz+0x11a>
}
    140e:	4770      	bx	lr
    1410:	40000800 	.word	0x40000800
    1414:	41004000 	.word	0x41004000
    1418:	40000400 	.word	0x40000400
    141c:	40000c00 	.word	0x40000c00
    1420:	00004003 	.word	0x00004003
    1424:	00010603 	.word	0x00010603
    1428:	fc00ffff 	.word	0xfc00ffff
    142c:	00030700 	.word	0x00030700

00001430 <systick_init>:

void systick_init() {
    1430:	b510      	push	{r4, lr}
	initializeSystemFor48MHz();
    1432:	f7ff ff5b 	bl	12ec <initializeSystemFor48MHz>
	
	_cycles = 0;
    1436:	4b09      	ldr	r3, [pc, #36]	; (145c <systick_init+0x2c>)
    1438:	2000      	movs	r0, #0
    143a:	2100      	movs	r1, #0
    143c:	6018      	str	r0, [r3, #0]
    143e:	6059      	str	r1, [r3, #4]

	SysTick->CTRL = 0;
    1440:	4b07      	ldr	r3, [pc, #28]	; (1460 <systick_init+0x30>)
    1442:	2200      	movs	r2, #0
    1444:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0xFFFFFF;
    1446:	4a07      	ldr	r2, [pc, #28]	; (1464 <systick_init+0x34>)
    1448:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0xFFFFFF;
    144a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
    144c:	2207      	movs	r2, #7
    144e:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1450:	4b05      	ldr	r3, [pc, #20]	; (1468 <systick_init+0x38>)
    1452:	2280      	movs	r2, #128	; 0x80
    1454:	0612      	lsls	r2, r2, #24
    1456:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(SysTick_IRQn);
}
    1458:	bd10      	pop	{r4, pc}
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	200000e0 	.word	0x200000e0
    1460:	e000e010 	.word	0xe000e010
    1464:	00ffffff 	.word	0x00ffffff
    1468:	e000e100 	.word	0xe000e100

0000146c <systick_cycles>:

uint64_t systick_cycles() {
	return _cycles + (0xFFFFFF - SysTick->VAL);
    146c:	4b05      	ldr	r3, [pc, #20]	; (1484 <systick_cycles+0x18>)
    146e:	689b      	ldr	r3, [r3, #8]
    1470:	4a05      	ldr	r2, [pc, #20]	; (1488 <systick_cycles+0x1c>)
    1472:	1ad0      	subs	r0, r2, r3
    1474:	2100      	movs	r1, #0
    1476:	4b05      	ldr	r3, [pc, #20]	; (148c <systick_cycles+0x20>)
    1478:	681a      	ldr	r2, [r3, #0]
    147a:	685b      	ldr	r3, [r3, #4]
    147c:	1880      	adds	r0, r0, r2
    147e:	4159      	adcs	r1, r3
}
    1480:	4770      	bx	lr
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	e000e010 	.word	0xe000e010
    1488:	00ffffff 	.word	0x00ffffff
    148c:	200000e0 	.word	0x200000e0

00001490 <millis>:
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000000) + 0.99999999 );
	ticks >>= 35;
	return (uint32_t)ticks;
}

uint32_t millis() {
    1490:	b510      	push	{r4, lr}
	// https://en.wikipedia.org/wiki/Division_algorithm#Division_by_a_constant
	uint64_t ticks = systick_cycles();
    1492:	f7ff ffeb 	bl	146c <systick_cycles>
	ticks *= (uint64_t)( ((uint64_t)1 << 35) / (long double)(F_CPU/1000) + 0.99999999 );
    1496:	4a03      	ldr	r2, [pc, #12]	; (14a4 <millis+0x14>)
    1498:	2300      	movs	r3, #0
    149a:	f000 fcb7 	bl	1e0c <__aeabi_lmul>
	ticks >>= 35;
    149e:	08c8      	lsrs	r0, r1, #3
	return (uint32_t)ticks;
}
    14a0:	bd10      	pop	{r4, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	000aec34 	.word	0x000aec34

000014a8 <SysTick_Handler>:

void SysTick_Handler() {
    14a8:	b530      	push	{r4, r5, lr}
	_cycles += 0x1000000;
    14aa:	4905      	ldr	r1, [pc, #20]	; (14c0 <SysTick_Handler+0x18>)
    14ac:	680a      	ldr	r2, [r1, #0]
    14ae:	684b      	ldr	r3, [r1, #4]
    14b0:	2480      	movs	r4, #128	; 0x80
    14b2:	0464      	lsls	r4, r4, #17
    14b4:	2500      	movs	r5, #0
    14b6:	1912      	adds	r2, r2, r4
    14b8:	416b      	adcs	r3, r5
    14ba:	600a      	str	r2, [r1, #0]
    14bc:	604b      	str	r3, [r1, #4]
    14be:	bd30      	pop	{r4, r5, pc}
    14c0:	200000e0 	.word	0x200000e0

000014c4 <_Z41__static_initialization_and_destruction_0ii>:
    g_uart0.sercom_handler();
}

void SERCOM1_Handler() {
    g_uart1.sercom_handler();
    14c4:	b570      	push	{r4, r5, r6, lr}
    14c6:	2801      	cmp	r0, #1
    14c8:	d000      	beq.n	14cc <_Z41__static_initialization_and_destruction_0ii+0x8>
    14ca:	bd70      	pop	{r4, r5, r6, pc}
    14cc:	4b0c      	ldr	r3, [pc, #48]	; (1500 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    14ce:	4299      	cmp	r1, r3
    14d0:	d1fb      	bne.n	14ca <_Z41__static_initialization_and_destruction_0ii+0x6>
    volatile bool m_rxfull = false;

    bool m_used = false;

public:
    uart_t(Sercom* sercom) { m_sercom = sercom; }
    14d2:	4a0c      	ldr	r2, [pc, #48]	; (1504 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    14d4:	2581      	movs	r5, #129	; 0x81
    14d6:	00ad      	lsls	r5, r5, #2
    14d8:	2300      	movs	r3, #0
    14da:	5353      	strh	r3, [r2, r5]
    14dc:	4c0a      	ldr	r4, [pc, #40]	; (1508 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    14de:	5313      	strh	r3, [r2, r4]
    14e0:	2082      	movs	r0, #130	; 0x82
    14e2:	0080      	lsls	r0, r0, #2
    14e4:	5413      	strb	r3, [r2, r0]
    14e6:	4909      	ldr	r1, [pc, #36]	; (150c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    14e8:	5453      	strb	r3, [r2, r1]
    14ea:	4e09      	ldr	r6, [pc, #36]	; (1510 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    14ec:	6016      	str	r6, [r2, #0]
    14ee:	4a09      	ldr	r2, [pc, #36]	; (1514 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    14f0:	5353      	strh	r3, [r2, r5]
    14f2:	5313      	strh	r3, [r2, r4]
    14f4:	5413      	strb	r3, [r2, r0]
    14f6:	5453      	strb	r3, [r2, r1]
    14f8:	4b07      	ldr	r3, [pc, #28]	; (1518 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    14fa:	6013      	str	r3, [r2, #0]
    14fc:	e7e5      	b.n	14ca <_Z41__static_initialization_and_destruction_0ii+0x6>
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	0000ffff 	.word	0x0000ffff
    1504:	200000e8 	.word	0x200000e8
    1508:	00000206 	.word	0x00000206
    150c:	00000209 	.word	0x00000209
    1510:	42000800 	.word	0x42000800
    1514:	200002f4 	.word	0x200002f4
    1518:	42000c00 	.word	0x42000c00

0000151c <_ZN6uart_t4initERK13uart_pincfg_tt>:
void uart_t::init(const uart_pincfg_t& pincfg, uint16_t speed) {
    151c:	b5f0      	push	{r4, r5, r6, r7, lr}
    151e:	46ce      	mov	lr, r9
    1520:	4647      	mov	r7, r8
    1522:	b580      	push	{r7, lr}
    1524:	4691      	mov	r9, r2
    if(m_sercom == SERCOM1) {
    1526:	4b6c      	ldr	r3, [pc, #432]	; (16d8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
    1528:	6804      	ldr	r4, [r0, #0]
    152a:	429c      	cmp	r4, r3
    152c:	d100      	bne.n	1530 <_ZN6uart_t4initERK13uart_pincfg_tt+0x14>
    152e:	e09d      	b.n	166c <_ZN6uart_t4initERK13uart_pincfg_tt+0x150>
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
    1530:	4c6a      	ldr	r4, [pc, #424]	; (16dc <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
    1532:	6a23      	ldr	r3, [r4, #32]
    1534:	2504      	movs	r5, #4
    1536:	432b      	orrs	r3, r5
    1538:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    153a:	4b69      	ldr	r3, [pc, #420]	; (16e0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
    153c:	4c69      	ldr	r4, [pc, #420]	; (16e4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c8>)
    153e:	805c      	strh	r4, [r3, #2]
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    1540:	7c8b      	ldrb	r3, [r1, #18]
    1542:	2b00      	cmp	r3, #0
    1544:	d100      	bne.n	1548 <_ZN6uart_t4initERK13uart_pincfg_tt+0x2c>
    1546:	e09a      	b.n	167e <_ZN6uart_t4initERK13uart_pincfg_tt+0x162>
    1548:	2603      	movs	r6, #3
        else
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
            
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    }
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    154a:	680c      	ldr	r4, [r1, #0]
    154c:	684d      	ldr	r5, [r1, #4]
        if(pin & 1)
    154e:	07eb      	lsls	r3, r5, #31
    1550:	d400      	bmi.n	1554 <_ZN6uart_t4initERK13uart_pincfg_tt+0x38>
    1552:	e096      	b.n	1682 <_ZN6uart_t4initERK13uart_pincfg_tt+0x166>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    1554:	0feb      	lsrs	r3, r5, #31
    1556:	195b      	adds	r3, r3, r5
    1558:	105b      	asrs	r3, r3, #1
    155a:	469c      	mov	ip, r3
    155c:	270f      	movs	r7, #15
    155e:	403e      	ands	r6, r7
    1560:	01e3      	lsls	r3, r4, #7
    1562:	4a61      	ldr	r2, [pc, #388]	; (16e8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    1564:	4690      	mov	r8, r2
    1566:	4443      	add	r3, r8
    1568:	4463      	add	r3, ip
    156a:	3330      	adds	r3, #48	; 0x30
    156c:	781a      	ldrb	r2, [r3, #0]
    156e:	0136      	lsls	r6, r6, #4
    1570:	4017      	ands	r7, r2
    1572:	4337      	orrs	r7, r6
    1574:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1576:	01e3      	lsls	r3, r4, #7
    1578:	4c5b      	ldr	r4, [pc, #364]	; (16e8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    157a:	46a4      	mov	ip, r4
    157c:	4463      	add	r3, ip
    157e:	195b      	adds	r3, r3, r5
    1580:	3340      	adds	r3, #64	; 0x40
    1582:	781c      	ldrb	r4, [r3, #0]
    1584:	2501      	movs	r5, #1
    1586:	432c      	orrs	r4, r5
    1588:	701c      	strb	r4, [r3, #0]
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    158a:	7ccb      	ldrb	r3, [r1, #19]
    158c:	2b00      	cmp	r3, #0
    158e:	d100      	bne.n	1592 <_ZN6uart_t4initERK13uart_pincfg_tt+0x76>
    1590:	e086      	b.n	16a0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x184>
    1592:	2603      	movs	r6, #3
    inline void pmuxen(const gpio_t& gp, const uint8_t mux) { pmuxen(gp.port, gp.pin, mux); }
    1594:	688c      	ldr	r4, [r1, #8]
    1596:	68cd      	ldr	r5, [r1, #12]
        if(pin & 1)
    1598:	07eb      	lsls	r3, r5, #31
    159a:	d400      	bmi.n	159e <_ZN6uart_t4initERK13uart_pincfg_tt+0x82>
    159c:	e082      	b.n	16a4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x188>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXO = mux;
    159e:	0feb      	lsrs	r3, r5, #31
    15a0:	195b      	adds	r3, r3, r5
    15a2:	105b      	asrs	r3, r3, #1
    15a4:	469c      	mov	ip, r3
    15a6:	270f      	movs	r7, #15
    15a8:	403e      	ands	r6, r7
    15aa:	01e3      	lsls	r3, r4, #7
    15ac:	4a4e      	ldr	r2, [pc, #312]	; (16e8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    15ae:	4690      	mov	r8, r2
    15b0:	4443      	add	r3, r8
    15b2:	4463      	add	r3, ip
    15b4:	3330      	adds	r3, #48	; 0x30
    15b6:	781a      	ldrb	r2, [r3, #0]
    15b8:	0136      	lsls	r6, r6, #4
    15ba:	4017      	ands	r7, r2
    15bc:	4337      	orrs	r7, r6
    15be:	701f      	strb	r7, [r3, #0]
        PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    15c0:	01e3      	lsls	r3, r4, #7
    15c2:	4c49      	ldr	r4, [pc, #292]	; (16e8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    15c4:	46a4      	mov	ip, r4
    15c6:	4463      	add	r3, ip
    15c8:	195b      	adds	r3, r3, r5
    15ca:	3340      	adds	r3, #64	; 0x40
    15cc:	781c      	ldrb	r4, [r3, #0]
    15ce:	2501      	movs	r5, #1
    15d0:	432c      	orrs	r4, r5
    15d2:	701c      	strb	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.ENABLE = 0;
    15d4:	6804      	ldr	r4, [r0, #0]
    15d6:	6823      	ldr	r3, [r4, #0]
    15d8:	2502      	movs	r5, #2
    15da:	43ab      	bics	r3, r5
    15dc:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.SWRST = 1;
    15de:	6804      	ldr	r4, [r0, #0]
    15e0:	6823      	ldr	r3, [r4, #0]
    15e2:	3d01      	subs	r5, #1
    15e4:	432b      	orrs	r3, r5
    15e6:	6023      	str	r3, [r4, #0]
    while(m_sercom->USART.CTRLA.bit.SWRST);
    15e8:	6803      	ldr	r3, [r0, #0]
    15ea:	681c      	ldr	r4, [r3, #0]
    15ec:	07e4      	lsls	r4, r4, #31
    15ee:	d4fb      	bmi.n	15e8 <_ZN6uart_t4initERK13uart_pincfg_tt+0xcc>
    m_sercom->USART.CTRLA.bit.MODE = SERCOM_USART_CTRLA_MODE_USART_INT_CLK_Val;
    15f0:	681c      	ldr	r4, [r3, #0]
    15f2:	251c      	movs	r5, #28
    15f4:	43ac      	bics	r4, r5
    15f6:	3d18      	subs	r5, #24
    15f8:	432c      	orrs	r4, r5
    15fa:	601c      	str	r4, [r3, #0]
    m_sercom->USART.CTRLA.bit.DORD = 1;
    15fc:	6804      	ldr	r4, [r0, #0]
    15fe:	6825      	ldr	r5, [r4, #0]
    1600:	2380      	movs	r3, #128	; 0x80
    1602:	05db      	lsls	r3, r3, #23
    1604:	432b      	orrs	r3, r5
    1606:	6023      	str	r3, [r4, #0]
    m_sercom->USART.CTRLA.bit.TXPO = pincfg.tx_pad;
    1608:	6806      	ldr	r6, [r0, #0]
    160a:	7c0d      	ldrb	r5, [r1, #16]
    160c:	2303      	movs	r3, #3
    160e:	401d      	ands	r5, r3
    1610:	6834      	ldr	r4, [r6, #0]
    1612:	042d      	lsls	r5, r5, #16
    1614:	4f35      	ldr	r7, [pc, #212]	; (16ec <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d0>)
    1616:	403c      	ands	r4, r7
    1618:	432c      	orrs	r4, r5
    161a:	6034      	str	r4, [r6, #0]
    m_sercom->USART.CTRLA.bit.RXPO = pincfg.rx_pad;
    161c:	6804      	ldr	r4, [r0, #0]
    161e:	7c4d      	ldrb	r5, [r1, #17]
    1620:	6821      	ldr	r1, [r4, #0]
    1622:	402b      	ands	r3, r5
    1624:	051b      	lsls	r3, r3, #20
    1626:	4d32      	ldr	r5, [pc, #200]	; (16f0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d4>)
    1628:	4029      	ands	r1, r5
    162a:	430b      	orrs	r3, r1
    162c:	6023      	str	r3, [r4, #0]
    m_sercom->USART.BAUD.reg = speed;
    162e:	6803      	ldr	r3, [r0, #0]
    1630:	464a      	mov	r2, r9
    1632:	819a      	strh	r2, [r3, #12]
    m_sercom->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
    1634:	6803      	ldr	r3, [r0, #0]
    1636:	22c0      	movs	r2, #192	; 0xc0
    1638:	0292      	lsls	r2, r2, #10
    163a:	605a      	str	r2, [r3, #4]
    m_sercom->USART.INTENSET.bit.RXC = 1;
    163c:	6802      	ldr	r2, [r0, #0]
    163e:	7d93      	ldrb	r3, [r2, #22]
    1640:	2104      	movs	r1, #4
    1642:	430b      	orrs	r3, r1
    1644:	7593      	strb	r3, [r2, #22]
    if(m_sercom == SERCOM0)
    1646:	6803      	ldr	r3, [r0, #0]
    1648:	4a2a      	ldr	r2, [pc, #168]	; (16f4 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1d8>)
    164a:	4293      	cmp	r3, r2
    164c:	d039      	beq.n	16c2 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1a6>
    else if(m_sercom == SERCOM1)
    164e:	4a22      	ldr	r2, [pc, #136]	; (16d8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1bc>)
    1650:	4293      	cmp	r3, r2
    1652:	d03b      	beq.n	16cc <_ZN6uart_t4initERK13uart_pincfg_tt+0x1b0>
    m_sercom->USART.CTRLA.bit.ENABLE = 1;
    1654:	6802      	ldr	r2, [r0, #0]
    1656:	6813      	ldr	r3, [r2, #0]
    1658:	2102      	movs	r1, #2
    165a:	430b      	orrs	r3, r1
    165c:	6013      	str	r3, [r2, #0]
    m_used = true;
    165e:	4b26      	ldr	r3, [pc, #152]	; (16f8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1dc>)
    1660:	2201      	movs	r2, #1
    1662:	54c2      	strb	r2, [r0, r3]
}
    1664:	bc0c      	pop	{r2, r3}
    1666:	4690      	mov	r8, r2
    1668:	4699      	mov	r9, r3
    166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
    166c:	4c1b      	ldr	r4, [pc, #108]	; (16dc <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c0>)
    166e:	6a23      	ldr	r3, [r4, #32]
    1670:	2508      	movs	r5, #8
    1672:	432b      	orrs	r3, r5
    1674:	6223      	str	r3, [r4, #32]
        GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) |
    1676:	4b1a      	ldr	r3, [pc, #104]	; (16e0 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1c4>)
    1678:	4c20      	ldr	r4, [pc, #128]	; (16fc <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e0>)
    167a:	805c      	strh	r4, [r3, #2]
    167c:	e760      	b.n	1540 <_ZN6uart_t4initERK13uart_pincfg_tt+0x24>
    gpio::pmuxen(pincfg.tx, pincfg.tx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    167e:	2602      	movs	r6, #2
    1680:	e763      	b.n	154a <_ZN6uart_t4initERK13uart_pincfg_tt+0x2e>
            PORT->Group[port].PMUX[pin / 2].bit.PMUXE = mux;
    1682:	0feb      	lsrs	r3, r5, #31
    1684:	195b      	adds	r3, r3, r5
    1686:	105f      	asrs	r7, r3, #1
    1688:	01e3      	lsls	r3, r4, #7
    168a:	4a17      	ldr	r2, [pc, #92]	; (16e8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    168c:	4694      	mov	ip, r2
    168e:	4463      	add	r3, ip
    1690:	19db      	adds	r3, r3, r7
    1692:	3330      	adds	r3, #48	; 0x30
    1694:	781f      	ldrb	r7, [r3, #0]
    1696:	220f      	movs	r2, #15
    1698:	4397      	bics	r7, r2
    169a:	433e      	orrs	r6, r7
    169c:	701e      	strb	r6, [r3, #0]
    169e:	e76a      	b.n	1576 <_ZN6uart_t4initERK13uart_pincfg_tt+0x5a>
    gpio::pmuxen(pincfg.rx, pincfg.rx_alt ? GPIO_PMUX_D : GPIO_PMUX_C);
    16a0:	2602      	movs	r6, #2
    16a2:	e777      	b.n	1594 <_ZN6uart_t4initERK13uart_pincfg_tt+0x78>
    16a4:	0feb      	lsrs	r3, r5, #31
    16a6:	195b      	adds	r3, r3, r5
    16a8:	105f      	asrs	r7, r3, #1
    16aa:	01e3      	lsls	r3, r4, #7
    16ac:	4a0e      	ldr	r2, [pc, #56]	; (16e8 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1cc>)
    16ae:	4694      	mov	ip, r2
    16b0:	4463      	add	r3, ip
    16b2:	19db      	adds	r3, r3, r7
    16b4:	3330      	adds	r3, #48	; 0x30
    16b6:	781f      	ldrb	r7, [r3, #0]
    16b8:	220f      	movs	r2, #15
    16ba:	4397      	bics	r7, r2
    16bc:	433e      	orrs	r6, r7
    16be:	701e      	strb	r6, [r3, #0]
    16c0:	e77e      	b.n	15c0 <_ZN6uart_t4initERK13uart_pincfg_tt+0xa4>
    16c2:	4b0f      	ldr	r3, [pc, #60]	; (1700 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
    16c4:	2280      	movs	r2, #128	; 0x80
    16c6:	0092      	lsls	r2, r2, #2
    16c8:	601a      	str	r2, [r3, #0]
}
    16ca:	e7c3      	b.n	1654 <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    16cc:	4b0c      	ldr	r3, [pc, #48]	; (1700 <_ZN6uart_t4initERK13uart_pincfg_tt+0x1e4>)
    16ce:	2280      	movs	r2, #128	; 0x80
    16d0:	00d2      	lsls	r2, r2, #3
    16d2:	601a      	str	r2, [r3, #0]
}
    16d4:	e7be      	b.n	1654 <_ZN6uart_t4initERK13uart_pincfg_tt+0x138>
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	42000c00 	.word	0x42000c00
    16dc:	40000400 	.word	0x40000400
    16e0:	40000c00 	.word	0x40000c00
    16e4:	0000400e 	.word	0x0000400e
    16e8:	41004400 	.word	0x41004400
    16ec:	fffcffff 	.word	0xfffcffff
    16f0:	ffcfffff 	.word	0xffcfffff
    16f4:	42000800 	.word	0x42000800
    16f8:	00000209 	.word	0x00000209
    16fc:	0000400f 	.word	0x0000400f
    1700:	e000e100 	.word	0xe000e100

00001704 <_ZN6uart_t14sercom_handlerEv>:
    if(!m_used) return;
    1704:	4b11      	ldr	r3, [pc, #68]	; (174c <_ZN6uart_t14sercom_handlerEv+0x48>)
    1706:	5cc3      	ldrb	r3, [r0, r3]
    1708:	2b00      	cmp	r3, #0
    170a:	d01b      	beq.n	1744 <_ZN6uart_t14sercom_handlerEv+0x40>
    if(!m_rxfull) {
    170c:	2382      	movs	r3, #130	; 0x82
    170e:	009b      	lsls	r3, r3, #2
    1710:	5cc3      	ldrb	r3, [r0, r3]
    1712:	2b00      	cmp	r3, #0
    1714:	d117      	bne.n	1746 <_ZN6uart_t14sercom_handlerEv+0x42>
		m_rxbuf[m_rxhead] = m_sercom->USART.DATA.reg;
    1716:	6803      	ldr	r3, [r0, #0]
    1718:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    171a:	2281      	movs	r2, #129	; 0x81
    171c:	0092      	lsls	r2, r2, #2
    171e:	5a83      	ldrh	r3, [r0, r2]
    1720:	b2c9      	uxtb	r1, r1
    1722:	18c3      	adds	r3, r0, r3
    1724:	7119      	strb	r1, [r3, #4]
		m_rxhead = (m_rxhead+1) % sizeof(m_rxbuf);
    1726:	5a83      	ldrh	r3, [r0, r2]
    1728:	3301      	adds	r3, #1
    172a:	05db      	lsls	r3, r3, #23
    172c:	0ddb      	lsrs	r3, r3, #23
    172e:	5283      	strh	r3, [r0, r2]
		m_rxfull = m_rxtail == m_rxhead;
    1730:	4b07      	ldr	r3, [pc, #28]	; (1750 <_ZN6uart_t14sercom_handlerEv+0x4c>)
    1732:	5ac3      	ldrh	r3, [r0, r3]
    1734:	5a82      	ldrh	r2, [r0, r2]
    1736:	1a9b      	subs	r3, r3, r2
    1738:	425a      	negs	r2, r3
    173a:	4153      	adcs	r3, r2
    173c:	b2db      	uxtb	r3, r3
    173e:	2282      	movs	r2, #130	; 0x82
    1740:	0092      	lsls	r2, r2, #2
    1742:	5483      	strb	r3, [r0, r2]
}
    1744:	4770      	bx	lr
		(void)m_sercom->USART.DATA.reg; // Clear RX flag
    1746:	6803      	ldr	r3, [r0, #0]
    1748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    174a:	e7fb      	b.n	1744 <_ZN6uart_t14sercom_handlerEv+0x40>
    174c:	00000209 	.word	0x00000209
    1750:	00000206 	.word	0x00000206

00001754 <_ZN6uart_t5writeEc>:
    if(!m_used) return;
    1754:	4b05      	ldr	r3, [pc, #20]	; (176c <_ZN6uart_t5writeEc+0x18>)
    1756:	5cc3      	ldrb	r3, [r0, r3]
    1758:	2b00      	cmp	r3, #0
    175a:	d006      	beq.n	176a <_ZN6uart_t5writeEc+0x16>
    m_sercom->USART.DATA.reg = c;
    175c:	b289      	uxth	r1, r1
    175e:	6803      	ldr	r3, [r0, #0]
    1760:	8519      	strh	r1, [r3, #40]	; 0x28
	while(!m_sercom->USART.INTFLAG.bit.DRE);
    1762:	6803      	ldr	r3, [r0, #0]
    1764:	7e1b      	ldrb	r3, [r3, #24]
    1766:	07db      	lsls	r3, r3, #31
    1768:	d5fb      	bpl.n	1762 <_ZN6uart_t5writeEc+0xe>
}
    176a:	4770      	bx	lr
    176c:	00000209 	.word	0x00000209

00001770 <_ZN6uart_t5printEPKci>:
void uart_t::print(const char* str, int len) {
    1770:	b570      	push	{r4, r5, r6, lr}
    1772:	0006      	movs	r6, r0
    1774:	0014      	movs	r4, r2
    if(!m_used) return;
    1776:	4b09      	ldr	r3, [pc, #36]	; (179c <_ZN6uart_t5printEPKci+0x2c>)
    1778:	5cc3      	ldrb	r3, [r0, r3]
    177a:	2b00      	cmp	r3, #0
    177c:	d10a      	bne.n	1794 <_ZN6uart_t5printEPKci+0x24>
}
    177e:	bd70      	pop	{r4, r5, r6, pc}
    while((len == -1) ? *str : len--) write(*str++);
    1780:	0023      	movs	r3, r4
    1782:	3c01      	subs	r4, #1
    1784:	2b00      	cmp	r3, #0
    1786:	d0fa      	beq.n	177e <_ZN6uart_t5printEPKci+0xe>
    1788:	1c4d      	adds	r5, r1, #1
    178a:	7809      	ldrb	r1, [r1, #0]
    178c:	0030      	movs	r0, r6
    178e:	f7ff ffe1 	bl	1754 <_ZN6uart_t5writeEc>
    1792:	0029      	movs	r1, r5
    1794:	1c63      	adds	r3, r4, #1
    1796:	d1f3      	bne.n	1780 <_ZN6uart_t5printEPKci+0x10>
    1798:	780b      	ldrb	r3, [r1, #0]
    179a:	e7f3      	b.n	1784 <_ZN6uart_t5printEPKci+0x14>
    179c:	00000209 	.word	0x00000209

000017a0 <_ZN6uart_t7rxemptyEv>:
	return (!m_rxfull && (m_rxhead == m_rxtail));
    17a0:	2382      	movs	r3, #130	; 0x82
    17a2:	009b      	lsls	r3, r3, #2
    17a4:	5cc3      	ldrb	r3, [r0, r3]
    17a6:	2b00      	cmp	r3, #0
    17a8:	d10a      	bne.n	17c0 <_ZN6uart_t7rxemptyEv+0x20>
    17aa:	2381      	movs	r3, #129	; 0x81
    17ac:	009b      	lsls	r3, r3, #2
    17ae:	5ac2      	ldrh	r2, [r0, r3]
    17b0:	b292      	uxth	r2, r2
    17b2:	4b05      	ldr	r3, [pc, #20]	; (17c8 <_ZN6uart_t7rxemptyEv+0x28>)
    17b4:	5ac3      	ldrh	r3, [r0, r3]
    17b6:	b29b      	uxth	r3, r3
    17b8:	429a      	cmp	r2, r3
    17ba:	d003      	beq.n	17c4 <_ZN6uart_t7rxemptyEv+0x24>
    17bc:	2000      	movs	r0, #0
    17be:	e000      	b.n	17c2 <_ZN6uart_t7rxemptyEv+0x22>
    17c0:	2000      	movs	r0, #0
}
    17c2:	4770      	bx	lr
	return (!m_rxfull && (m_rxhead == m_rxtail));
    17c4:	2001      	movs	r0, #1
    17c6:	e7fc      	b.n	17c2 <_ZN6uart_t7rxemptyEv+0x22>
    17c8:	00000206 	.word	0x00000206

000017cc <_ZN6uart_t4getcEv>:
char uart_t::getc() {
    17cc:	b510      	push	{r4, lr}
    17ce:	0004      	movs	r4, r0
    if(!m_used) return '\0';
    17d0:	4b0c      	ldr	r3, [pc, #48]	; (1804 <_ZN6uart_t4getcEv+0x38>)
    17d2:	5cc3      	ldrb	r3, [r0, r3]
    17d4:	2b00      	cmp	r3, #0
    17d6:	d013      	beq.n	1800 <_ZN6uart_t4getcEv+0x34>
	while(rxempty());
    17d8:	0020      	movs	r0, r4
    17da:	f7ff ffe1 	bl	17a0 <_ZN6uart_t7rxemptyEv>
    17de:	2800      	cmp	r0, #0
    17e0:	d1fa      	bne.n	17d8 <_ZN6uart_t4getcEv+0xc>
	uint8_t c = m_rxbuf[m_rxtail];
    17e2:	4a09      	ldr	r2, [pc, #36]	; (1808 <_ZN6uart_t4getcEv+0x3c>)
    17e4:	5aa3      	ldrh	r3, [r4, r2]
    17e6:	18e3      	adds	r3, r4, r3
    17e8:	7918      	ldrb	r0, [r3, #4]
    17ea:	b2c0      	uxtb	r0, r0
	m_rxfull = false;
    17ec:	2382      	movs	r3, #130	; 0x82
    17ee:	009b      	lsls	r3, r3, #2
    17f0:	2100      	movs	r1, #0
    17f2:	54e1      	strb	r1, [r4, r3]
	m_rxtail = (m_rxtail+1) % sizeof(m_rxbuf);
    17f4:	5aa3      	ldrh	r3, [r4, r2]
    17f6:	3301      	adds	r3, #1
    17f8:	05db      	lsls	r3, r3, #23
    17fa:	0ddb      	lsrs	r3, r3, #23
    17fc:	52a3      	strh	r3, [r4, r2]
}
    17fe:	bd10      	pop	{r4, pc}
    if(!m_used) return '\0';
    1800:	2000      	movs	r0, #0
    1802:	e7fc      	b.n	17fe <_ZN6uart_t4getcEv+0x32>
    1804:	00000209 	.word	0x00000209
    1808:	00000206 	.word	0x00000206

0000180c <_ZN6uart_t4peekEi>:
char uart_t::peek(int pos) {
    180c:	b570      	push	{r4, r5, r6, lr}
    180e:	0004      	movs	r4, r0
    1810:	000d      	movs	r5, r1
    if(!m_used) return '\0';
    1812:	4b1f      	ldr	r3, [pc, #124]	; (1890 <_ZN6uart_t4peekEi+0x84>)
    1814:	5cc3      	ldrb	r3, [r0, r3]
    1816:	2b00      	cmp	r3, #0
    1818:	d101      	bne.n	181e <_ZN6uart_t4peekEi+0x12>
    181a:	2000      	movs	r0, #0
}
    181c:	bd70      	pop	{r4, r5, r6, pc}
    if(rxempty() || pos >= available()) return '\0';
    181e:	f7ff ffbf 	bl	17a0 <_ZN6uart_t7rxemptyEv>
    1822:	2800      	cmp	r0, #0
    1824:	d12f      	bne.n	1886 <_ZN6uart_t4peekEi+0x7a>
        m_rxhead = 0;
        m_rxtail = 0;
        m_rxfull = false;
    }
    uint16_t available() {
        if(m_rxhead >= m_rxtail)
    1826:	2381      	movs	r3, #129	; 0x81
    1828:	009b      	lsls	r3, r3, #2
    182a:	5ae2      	ldrh	r2, [r4, r3]
    182c:	b292      	uxth	r2, r2
    182e:	4b19      	ldr	r3, [pc, #100]	; (1894 <_ZN6uart_t4peekEi+0x88>)
    1830:	5ae3      	ldrh	r3, [r4, r3]
    1832:	b29b      	uxth	r3, r3
    1834:	429a      	cmp	r2, r3
    1836:	d313      	bcc.n	1860 <_ZN6uart_t4peekEi+0x54>
            return m_rxhead - m_rxtail;
    1838:	2381      	movs	r3, #129	; 0x81
    183a:	009b      	lsls	r3, r3, #2
    183c:	5ae3      	ldrh	r3, [r4, r3]
    183e:	4a15      	ldr	r2, [pc, #84]	; (1894 <_ZN6uart_t4peekEi+0x88>)
    1840:	5aa2      	ldrh	r2, [r4, r2]
    1842:	1a9b      	subs	r3, r3, r2
    1844:	b29b      	uxth	r3, r3
    1846:	42ab      	cmp	r3, r5
    1848:	dd1f      	ble.n	188a <_ZN6uart_t4peekEi+0x7e>
    if(pos == -1)
    184a:	1c6b      	adds	r3, r5, #1
    184c:	d015      	beq.n	187a <_ZN6uart_t4peekEi+0x6e>
        return m_rxbuf[(m_rxtail + pos) % sizeof(m_rxbuf)];
    184e:	4b11      	ldr	r3, [pc, #68]	; (1894 <_ZN6uart_t4peekEi+0x88>)
    1850:	5ae0      	ldrh	r0, [r4, r3]
    1852:	1940      	adds	r0, r0, r5
    1854:	05c0      	lsls	r0, r0, #23
    1856:	0dc0      	lsrs	r0, r0, #23
    1858:	1824      	adds	r4, r4, r0
    185a:	7920      	ldrb	r0, [r4, #4]
    185c:	b2c0      	uxtb	r0, r0
    185e:	e7dd      	b.n	181c <_ZN6uart_t4peekEi+0x10>
        else
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1860:	2381      	movs	r3, #129	; 0x81
    1862:	009b      	lsls	r3, r3, #2
    1864:	5ae3      	ldrh	r3, [r4, r3]
    1866:	4a0b      	ldr	r2, [pc, #44]	; (1894 <_ZN6uart_t4peekEi+0x88>)
    1868:	5aa2      	ldrh	r2, [r4, r2]
    186a:	1a9b      	subs	r3, r3, r2
    186c:	b29b      	uxth	r3, r3
    186e:	2280      	movs	r2, #128	; 0x80
    1870:	0092      	lsls	r2, r2, #2
    1872:	4694      	mov	ip, r2
    1874:	4463      	add	r3, ip
    1876:	b29b      	uxth	r3, r3
    1878:	e7e5      	b.n	1846 <_ZN6uart_t4peekEi+0x3a>
        return m_rxbuf[m_rxtail];
    187a:	4b06      	ldr	r3, [pc, #24]	; (1894 <_ZN6uart_t4peekEi+0x88>)
    187c:	5ae0      	ldrh	r0, [r4, r3]
    187e:	1824      	adds	r4, r4, r0
    1880:	7920      	ldrb	r0, [r4, #4]
    1882:	b2c0      	uxtb	r0, r0
    1884:	e7ca      	b.n	181c <_ZN6uart_t4peekEi+0x10>
    if(rxempty() || pos >= available()) return '\0';
    1886:	2000      	movs	r0, #0
    1888:	e7c8      	b.n	181c <_ZN6uart_t4peekEi+0x10>
    188a:	2000      	movs	r0, #0
    188c:	e7c6      	b.n	181c <_ZN6uart_t4peekEi+0x10>
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	00000209 	.word	0x00000209
    1894:	00000206 	.word	0x00000206

00001898 <_ZN6uart_t4findEPKc>:
int uart_t::find(const char* str) {
    1898:	b5f0      	push	{r4, r5, r6, r7, lr}
    189a:	46c6      	mov	lr, r8
    189c:	b500      	push	{lr}
    189e:	0007      	movs	r7, r0
    18a0:	000d      	movs	r5, r1
    if(!m_used) return -1;
    18a2:	4b21      	ldr	r3, [pc, #132]	; (1928 <_ZN6uart_t4findEPKc+0x90>)
    18a4:	5cc3      	ldrb	r3, [r0, r3]
    18a6:	2b00      	cmp	r3, #0
    18a8:	d035      	beq.n	1916 <_ZN6uart_t4findEPKc+0x7e>
    for(int i = 0; i < available(); i++) {
    18aa:	2300      	movs	r3, #0
    18ac:	4698      	mov	r8, r3
        if(m_rxhead >= m_rxtail)
    18ae:	2381      	movs	r3, #129	; 0x81
    18b0:	009b      	lsls	r3, r3, #2
    18b2:	5afa      	ldrh	r2, [r7, r3]
    18b4:	b292      	uxth	r2, r2
    18b6:	4b1d      	ldr	r3, [pc, #116]	; (192c <_ZN6uart_t4findEPKc+0x94>)
    18b8:	5afb      	ldrh	r3, [r7, r3]
    18ba:	b29b      	uxth	r3, r3
    18bc:	429a      	cmp	r2, r3
    18be:	d319      	bcc.n	18f4 <_ZN6uart_t4findEPKc+0x5c>
            return m_rxhead - m_rxtail;
    18c0:	2381      	movs	r3, #129	; 0x81
    18c2:	009b      	lsls	r3, r3, #2
    18c4:	5afb      	ldrh	r3, [r7, r3]
    18c6:	4a19      	ldr	r2, [pc, #100]	; (192c <_ZN6uart_t4findEPKc+0x94>)
    18c8:	5aba      	ldrh	r2, [r7, r2]
    18ca:	1a9b      	subs	r3, r3, r2
    18cc:	b29b      	uxth	r3, r3
    18ce:	4543      	cmp	r3, r8
    18d0:	dd25      	ble.n	191e <_ZN6uart_t4findEPKc+0x86>
        int search_idx = 0;
    18d2:	2400      	movs	r4, #0
        while(str[search_idx] == peek(i + search_idx))
    18d4:	5d2e      	ldrb	r6, [r5, r4]
    18d6:	4643      	mov	r3, r8
    18d8:	1919      	adds	r1, r3, r4
    18da:	0038      	movs	r0, r7
    18dc:	f7ff ff96 	bl	180c <_ZN6uart_t4peekEi>
    18e0:	4286      	cmp	r6, r0
    18e2:	d114      	bne.n	190e <_ZN6uart_t4findEPKc+0x76>
            if(!str[++search_idx]) return i;
    18e4:	3401      	adds	r4, #1
    18e6:	5d2b      	ldrb	r3, [r5, r4]
    18e8:	2b00      	cmp	r3, #0
    18ea:	d1f3      	bne.n	18d4 <_ZN6uart_t4findEPKc+0x3c>
}
    18ec:	4640      	mov	r0, r8
    18ee:	bc04      	pop	{r2}
    18f0:	4690      	mov	r8, r2
    18f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    18f4:	2381      	movs	r3, #129	; 0x81
    18f6:	009b      	lsls	r3, r3, #2
    18f8:	5afb      	ldrh	r3, [r7, r3]
    18fa:	4a0c      	ldr	r2, [pc, #48]	; (192c <_ZN6uart_t4findEPKc+0x94>)
    18fc:	5aba      	ldrh	r2, [r7, r2]
    18fe:	1a9b      	subs	r3, r3, r2
    1900:	b29b      	uxth	r3, r3
    1902:	2280      	movs	r2, #128	; 0x80
    1904:	0092      	lsls	r2, r2, #2
    1906:	4694      	mov	ip, r2
    1908:	4463      	add	r3, ip
    190a:	b29b      	uxth	r3, r3
    190c:	e7df      	b.n	18ce <_ZN6uart_t4findEPKc+0x36>
    for(int i = 0; i < available(); i++) {
    190e:	2301      	movs	r3, #1
    1910:	469c      	mov	ip, r3
    1912:	44e0      	add	r8, ip
    1914:	e7cb      	b.n	18ae <_ZN6uart_t4findEPKc+0x16>
    if(!m_used) return -1;
    1916:	2301      	movs	r3, #1
    1918:	425b      	negs	r3, r3
    191a:	4698      	mov	r8, r3
    191c:	e7e6      	b.n	18ec <_ZN6uart_t4findEPKc+0x54>
    return -1;
    191e:	2301      	movs	r3, #1
    1920:	425b      	negs	r3, r3
    1922:	4698      	mov	r8, r3
    1924:	e7e2      	b.n	18ec <_ZN6uart_t4findEPKc+0x54>
    1926:	46c0      	nop			; (mov r8, r8)
    1928:	00000209 	.word	0x00000209
    192c:	00000206 	.word	0x00000206

00001930 <_ZN6uart_t4readEv>:
char* uart_t::read() {
    1930:	b5f0      	push	{r4, r5, r6, r7, lr}
    1932:	46c6      	mov	lr, r8
    1934:	b500      	push	{lr}
    1936:	0005      	movs	r5, r0
    if(!m_used) return NULL;
    1938:	4b1f      	ldr	r3, [pc, #124]	; (19b8 <_ZN6uart_t4readEv+0x88>)
    193a:	5cc3      	ldrb	r3, [r0, r3]
    193c:	2b00      	cmp	r3, #0
    193e:	d036      	beq.n	19ae <_ZN6uart_t4readEv+0x7e>
        if(m_rxhead >= m_rxtail)
    1940:	2381      	movs	r3, #129	; 0x81
    1942:	009b      	lsls	r3, r3, #2
    1944:	5ac2      	ldrh	r2, [r0, r3]
    1946:	b292      	uxth	r2, r2
    1948:	4b1c      	ldr	r3, [pc, #112]	; (19bc <_ZN6uart_t4readEv+0x8c>)
    194a:	5ac3      	ldrh	r3, [r0, r3]
    194c:	b29b      	uxth	r3, r3
    194e:	429a      	cmp	r2, r3
    1950:	d310      	bcc.n	1974 <_ZN6uart_t4readEv+0x44>
            return m_rxhead - m_rxtail;
    1952:	2381      	movs	r3, #129	; 0x81
    1954:	009b      	lsls	r3, r3, #2
    1956:	5ac0      	ldrh	r0, [r0, r3]
    1958:	4b18      	ldr	r3, [pc, #96]	; (19bc <_ZN6uart_t4readEv+0x8c>)
    195a:	5aeb      	ldrh	r3, [r5, r3]
    195c:	1ac0      	subs	r0, r0, r3
    195e:	b280      	uxth	r0, r0
    size_t avail = available();
    1960:	4680      	mov	r8, r0
    if(!avail) return NULL;
    1962:	2800      	cmp	r0, #0
    1964:	d025      	beq.n	19b2 <_ZN6uart_t4readEv+0x82>
    char* data = (char*)malloc(avail + 1);
    1966:	3001      	adds	r0, #1
    1968:	f000 fab0 	bl	1ecc <malloc>
    196c:	1e07      	subs	r7, r0, #0
    if(!data) return NULL;
    196e:	d01a      	beq.n	19a6 <_ZN6uart_t4readEv+0x76>
    for(size_t i = 0; i < avail; i++)
    1970:	2400      	movs	r4, #0
    1972:	e012      	b.n	199a <_ZN6uart_t4readEv+0x6a>
            return sizeof(m_rxbuf) - m_rxtail + m_rxhead;
    1974:	2381      	movs	r3, #129	; 0x81
    1976:	009b      	lsls	r3, r3, #2
    1978:	5ac0      	ldrh	r0, [r0, r3]
    197a:	4b10      	ldr	r3, [pc, #64]	; (19bc <_ZN6uart_t4readEv+0x8c>)
    197c:	5aeb      	ldrh	r3, [r5, r3]
    197e:	1ac0      	subs	r0, r0, r3
    1980:	b280      	uxth	r0, r0
    1982:	2380      	movs	r3, #128	; 0x80
    1984:	009b      	lsls	r3, r3, #2
    1986:	469c      	mov	ip, r3
    1988:	4460      	add	r0, ip
    198a:	b280      	uxth	r0, r0
    198c:	e7e8      	b.n	1960 <_ZN6uart_t4readEv+0x30>
        data[i] = getc();
    198e:	193e      	adds	r6, r7, r4
    1990:	0028      	movs	r0, r5
    1992:	f7ff ff1b 	bl	17cc <_ZN6uart_t4getcEv>
    1996:	7030      	strb	r0, [r6, #0]
    for(size_t i = 0; i < avail; i++)
    1998:	3401      	adds	r4, #1
    199a:	4544      	cmp	r4, r8
    199c:	d3f7      	bcc.n	198e <_ZN6uart_t4readEv+0x5e>
    data[avail] = '\0';
    199e:	4643      	mov	r3, r8
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	2200      	movs	r2, #0
    19a4:	701a      	strb	r2, [r3, #0]
}
    19a6:	0038      	movs	r0, r7
    19a8:	bc04      	pop	{r2}
    19aa:	4690      	mov	r8, r2
    19ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!m_used) return NULL;
    19ae:	2700      	movs	r7, #0
    19b0:	e7f9      	b.n	19a6 <_ZN6uart_t4readEv+0x76>
    if(!avail) return NULL;
    19b2:	2700      	movs	r7, #0
    19b4:	e7f7      	b.n	19a6 <_ZN6uart_t4readEv+0x76>
    19b6:	46c0      	nop			; (mov r8, r8)
    19b8:	00000209 	.word	0x00000209
    19bc:	00000206 	.word	0x00000206

000019c0 <SERCOM0_Handler>:
void SERCOM0_Handler() {
    19c0:	b510      	push	{r4, lr}
    g_uart0.sercom_handler();
    19c2:	4802      	ldr	r0, [pc, #8]	; (19cc <SERCOM0_Handler+0xc>)
    19c4:	f7ff fe9e 	bl	1704 <_ZN6uart_t14sercom_handlerEv>
}
    19c8:	bd10      	pop	{r4, pc}
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	200000e8 	.word	0x200000e8

000019d0 <SERCOM1_Handler>:
void SERCOM1_Handler() {
    19d0:	b510      	push	{r4, lr}
    g_uart1.sercom_handler();
    19d2:	4802      	ldr	r0, [pc, #8]	; (19dc <SERCOM1_Handler+0xc>)
    19d4:	f7ff fe96 	bl	1704 <_ZN6uart_t14sercom_handlerEv>
    19d8:	bd10      	pop	{r4, pc}
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	200002f4 	.word	0x200002f4

000019e0 <_GLOBAL__sub_I_g_uart0>:
    19e0:	b510      	push	{r4, lr}
    19e2:	4902      	ldr	r1, [pc, #8]	; (19ec <_GLOBAL__sub_I_g_uart0+0xc>)
    19e4:	2001      	movs	r0, #1
    19e6:	f7ff fd6d 	bl	14c4 <_Z41__static_initialization_and_destruction_0ii>
    19ea:	bd10      	pop	{r4, pc}
    19ec:	0000ffff 	.word	0x0000ffff

000019f0 <_ZN9SensornetC1ERK4RF24>:

extern "C" {
#include <systick.h>
}

Sensornet::Sensornet(const RF24& radio) :
    19f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19f2:	b093      	sub	sp, #76	; 0x4c
    19f4:	0004      	movs	r4, r0
    m_radio(radio)
    19f6:	0003      	movs	r3, r0
    19f8:	c925      	ldmia	r1!, {r0, r2, r5}
    19fa:	c325      	stmia	r3!, {r0, r2, r5}
    19fc:	c925      	ldmia	r1!, {r0, r2, r5}
    19fe:	c325      	stmia	r3!, {r0, r2, r5}
    1a00:	c925      	ldmia	r1!, {r0, r2, r5}
    1a02:	c325      	stmia	r3!, {r0, r2, r5}
    1a04:	680a      	ldr	r2, [r1, #0]
    1a06:	601a      	str	r2, [r3, #0]
    1a08:	0025      	movs	r5, r4
    1a0a:	3528      	adds	r5, #40	; 0x28
    Vector() : m_size(0), m_data(NULL) {}
    1a0c:	2300      	movs	r3, #0
    1a0e:	62a3      	str	r3, [r4, #40]	; 0x28
    1a10:	62e3      	str	r3, [r4, #44]	; 0x2c
{
    const Node node1 = {
    1a12:	9308      	str	r3, [sp, #32]
    1a14:	2701      	movs	r7, #1
    1a16:	466b      	mov	r3, sp
    1a18:	701f      	strb	r7, [r3, #0]
    1a1a:	4e3a      	ldr	r6, [pc, #232]	; (1b04 <_ZN9SensornetC1ERK4RF24+0x114>)
    1a1c:	2206      	movs	r2, #6
    1a1e:	0031      	movs	r1, r6
    1a20:	1c58      	adds	r0, r3, #1
    1a22:	f000 fa67 	bl	1ef4 <memcpy>
    1a26:	2202      	movs	r2, #2
    1a28:	2100      	movs	r1, #0
    1a2a:	466b      	mov	r3, sp
    1a2c:	1dd8      	adds	r0, r3, #7
    1a2e:	f000 fa6a 	bl	1f06 <memset>
    1a32:	466b      	mov	r3, sp
    1a34:	725f      	strb	r7, [r3, #9]
    1a36:	8933      	ldrh	r3, [r6, #8]
    1a38:	466a      	mov	r2, sp
    1a3a:	8153      	strh	r3, [r2, #10]
    1a3c:	2214      	movs	r2, #20
    1a3e:	2100      	movs	r1, #0
    1a40:	a803      	add	r0, sp, #12
    1a42:	f000 fa60 	bl	1f06 <memset>
            1,
            "test1",
            sensors::TYPE_SOIL,
            { 192 }
        },
        millis()
    1a46:	f7ff fd23 	bl	1490 <millis>
    };
    1a4a:	9008      	str	r0, [sp, #32]
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1a4c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1a4e:	2900      	cmp	r1, #0
    1a50:	d050      	beq.n	1af4 <_ZN9SensornetC1ERK4RF24+0x104>
    1a52:	3101      	adds	r1, #1
    1a54:	00cb      	lsls	r3, r1, #3
    1a56:	1859      	adds	r1, r3, r1
    1a58:	0089      	lsls	r1, r1, #2
    1a5a:	6868      	ldr	r0, [r5, #4]
    1a5c:	f000 fb04 	bl	2068 <realloc>
        if(!new_data) return;
    1a60:	2800      	cmp	r0, #0
    1a62:	d00c      	beq.n	1a7e <_ZN9SensornetC1ERK4RF24+0x8e>
        m_data = new_data;
    1a64:	6068      	str	r0, [r5, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
    1a66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1a68:	00d3      	lsls	r3, r2, #3
    1a6a:	189b      	adds	r3, r3, r2
    1a6c:	009b      	lsls	r3, r3, #2
    1a6e:	18c0      	adds	r0, r0, r3
    1a70:	2224      	movs	r2, #36	; 0x24
    1a72:	4669      	mov	r1, sp
    1a74:	f000 fa3e 	bl	1ef4 <memcpy>
        m_size++;
    1a78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a7a:	3301      	adds	r3, #1
    1a7c:	62a3      	str	r3, [r4, #40]	; 0x28

    m_nodes.push_back(node1);

    const Node node2 = {
    1a7e:	ae09      	add	r6, sp, #36	; 0x24
    1a80:	2300      	movs	r3, #0
    1a82:	9311      	str	r3, [sp, #68]	; 0x44
    1a84:	3302      	adds	r3, #2
    1a86:	7033      	strb	r3, [r6, #0]
    1a88:	4f1e      	ldr	r7, [pc, #120]	; (1b04 <_ZN9SensornetC1ERK4RF24+0x114>)
    1a8a:	0039      	movs	r1, r7
    1a8c:	3120      	adds	r1, #32
    1a8e:	2206      	movs	r2, #6
    1a90:	2025      	movs	r0, #37	; 0x25
    1a92:	4468      	add	r0, sp
    1a94:	f000 fa2e 	bl	1ef4 <memcpy>
    1a98:	2202      	movs	r2, #2
    1a9a:	2100      	movs	r1, #0
    1a9c:	202b      	movs	r0, #43	; 0x2b
    1a9e:	4468      	add	r0, sp
    1aa0:	f000 fa31 	bl	1f06 <memset>
    1aa4:	2303      	movs	r3, #3
    1aa6:	7273      	strb	r3, [r6, #9]
    1aa8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    1aaa:	8173      	strh	r3, [r6, #10]
    1aac:	2214      	movs	r2, #20
    1aae:	2100      	movs	r1, #0
    1ab0:	a80c      	add	r0, sp, #48	; 0x30
    1ab2:	f000 fa28 	bl	1f06 <memset>
            2,
            "test2",
            sensors::TYPE_TEMP,
            { 24 }
        },
        millis()
    1ab6:	f7ff fceb 	bl	1490 <millis>
    };
    1aba:	6230      	str	r0, [r6, #32]
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1abc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1abe:	2900      	cmp	r1, #0
    1ac0:	d01c      	beq.n	1afc <_ZN9SensornetC1ERK4RF24+0x10c>
    1ac2:	3101      	adds	r1, #1
    1ac4:	00cb      	lsls	r3, r1, #3
    1ac6:	1859      	adds	r1, r3, r1
    1ac8:	0089      	lsls	r1, r1, #2
    1aca:	6868      	ldr	r0, [r5, #4]
    1acc:	f000 facc 	bl	2068 <realloc>
        if(!new_data) return;
    1ad0:	2800      	cmp	r0, #0
    1ad2:	d00c      	beq.n	1aee <_ZN9SensornetC1ERK4RF24+0xfe>
        m_data = new_data;
    1ad4:	6068      	str	r0, [r5, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
    1ad6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1ad8:	00d3      	lsls	r3, r2, #3
    1ada:	189b      	adds	r3, r3, r2
    1adc:	009b      	lsls	r3, r3, #2
    1ade:	18c0      	adds	r0, r0, r3
    1ae0:	2224      	movs	r2, #36	; 0x24
    1ae2:	a909      	add	r1, sp, #36	; 0x24
    1ae4:	f000 fa06 	bl	1ef4 <memcpy>
        m_size++;
    1ae8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1aea:	3301      	adds	r3, #1
    1aec:	62a3      	str	r3, [r4, #40]	; 0x28

    m_nodes.push_back(node2);
}
    1aee:	0020      	movs	r0, r4
    1af0:	b013      	add	sp, #76	; 0x4c
    1af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1af4:	2024      	movs	r0, #36	; 0x24
    1af6:	f000 f9e9 	bl	1ecc <malloc>
    1afa:	e7b1      	b.n	1a60 <_ZN9SensornetC1ERK4RF24+0x70>
    1afc:	2024      	movs	r0, #36	; 0x24
    1afe:	f000 f9e5 	bl	1ecc <malloc>
    1b02:	e7e5      	b.n	1ad0 <_ZN9SensornetC1ERK4RF24+0xe0>
    1b04:	00002a34 	.word	0x00002a34

00001b08 <_ZN9Sensornet5beginEv>:

bool Sensornet::begin() {
    1b08:	b570      	push	{r4, r5, r6, lr}
    1b0a:	0004      	movs	r4, r0
    if(!m_radio.begin())
    1b0c:	f7ff f814 	bl	b38 <_ZN4RF245beginEv>
    1b10:	1e05      	subs	r5, r0, #0
    1b12:	d101      	bne.n	1b18 <_ZN9Sensornet5beginEv+0x10>
    m_radio.openReadingPipe(1, (uint64_t)55);

    m_radio.startListening();

    return true;
}
    1b14:	0028      	movs	r0, r5
    1b16:	bd70      	pop	{r4, r5, r6, pc}
    m_radio.setChannel(120);
    1b18:	2178      	movs	r1, #120	; 0x78
    1b1a:	0020      	movs	r0, r4
    1b1c:	f7fe fea3 	bl	866 <_ZN4RF2410setChannelEh>
    m_radio.setAutoAck(true);
    1b20:	2101      	movs	r1, #1
    1b22:	0020      	movs	r0, r4
    1b24:	f7fe ffb0 	bl	a88 <_ZN4RF2410setAutoAckEb>
    m_radio.enableAckPayload();
    1b28:	0020      	movs	r0, r4
    1b2a:	f7fe ff93 	bl	a54 <_ZN4RF2416enableAckPayloadEv>
    m_radio.setRetries(5, 15);
    1b2e:	220f      	movs	r2, #15
    1b30:	2105      	movs	r1, #5
    1b32:	0020      	movs	r0, r4
    1b34:	f7fe fff6 	bl	b24 <_ZN4RF2410setRetriesEhh>
    m_radio.setPayloadSize(32);
    1b38:	2120      	movs	r1, #32
    1b3a:	0020      	movs	r0, r4
    1b3c:	f7fe fe9c 	bl	878 <_ZN4RF2414setPayloadSizeEh>
    m_radio.setPALevel(RF24_PA_MAX);
    1b40:	2103      	movs	r1, #3
    1b42:	0020      	movs	r0, r4
    1b44:	f7fe ffad 	bl	aa2 <_ZN4RF2410setPALevelEh>
    m_radio.setDataRate(RF24_1MBPS);
    1b48:	2100      	movs	r1, #0
    1b4a:	0020      	movs	r0, r4
    1b4c:	f7fe ffc0 	bl	ad0 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    m_radio.openWritingPipe((uint64_t)56);
    1b50:	2238      	movs	r2, #56	; 0x38
    1b52:	2300      	movs	r3, #0
    1b54:	0020      	movs	r0, r4
    1b56:	f7fe fecf 	bl	8f8 <_ZN4RF2415openWritingPipeEy>
    m_radio.openReadingPipe(1, (uint64_t)55);
    1b5a:	2237      	movs	r2, #55	; 0x37
    1b5c:	2300      	movs	r3, #0
    1b5e:	2101      	movs	r1, #1
    1b60:	0020      	movs	r0, r4
    1b62:	f7fe fee1 	bl	928 <_ZN4RF2415openReadingPipeEhy>
    m_radio.startListening();
    1b66:	0020      	movs	r0, r4
    1b68:	f7fe ff30 	bl	9cc <_ZN4RF2414startListeningEv>
    return true;
    1b6c:	e7d2      	b.n	1b14 <_ZN9Sensornet5beginEv+0xc>

00001b6e <_ZN9Sensornet13ProcessPacketERK12SensorPacket>:
    //char asd[32];
    //m_radio.write(asd, 32);
    //m_radio.startListening();
}

void Sensornet::ProcessPacket(const SensorPacket& pkt) {
    1b6e:	b570      	push	{r4, r5, r6, lr}
    1b70:	b08a      	sub	sp, #40	; 0x28
    1b72:	0006      	movs	r6, r0
        return m_data;
    1b74:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
        return m_data + m_size;
    1b76:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1b78:	00dd      	lsls	r5, r3, #3
    1b7a:	18ed      	adds	r5, r5, r3
    1b7c:	00ad      	lsls	r5, r5, #2
    1b7e:	1965      	adds	r5, r4, r5
    for(auto& node : m_nodes) {
    1b80:	42ac      	cmp	r4, r5
    1b82:	d00f      	beq.n	1ba4 <_ZN9Sensornet13ProcessPacketERK12SensorPacket+0x36>
        if(node.data.id == pkt.id) {
    1b84:	2200      	movs	r2, #0
    1b86:	56a2      	ldrsb	r2, [r4, r2]
    1b88:	2300      	movs	r3, #0
    1b8a:	56cb      	ldrsb	r3, [r1, r3]
    1b8c:	429a      	cmp	r2, r3
    1b8e:	d001      	beq.n	1b94 <_ZN9Sensornet13ProcessPacketERK12SensorPacket+0x26>
    for(auto& node : m_nodes) {
    1b90:	3424      	adds	r4, #36	; 0x24
    1b92:	e7f5      	b.n	1b80 <_ZN9Sensornet13ProcessPacketERK12SensorPacket+0x12>
            memcpy(&node.data, &pkt, sizeof(SensorPacket));
    1b94:	2220      	movs	r2, #32
    1b96:	0020      	movs	r0, r4
    1b98:	f000 f9ac 	bl	1ef4 <memcpy>
            node.last_seen = millis();
    1b9c:	f7ff fc78 	bl	1490 <millis>
    1ba0:	6220      	str	r0, [r4, #32]
            return;
    1ba2:	e021      	b.n	1be8 <_ZN9Sensornet13ProcessPacketERK12SensorPacket+0x7a>
        }
    }

    m_nodes.push_back({ pkt, millis() });
    1ba4:	0034      	movs	r4, r6
    1ba6:	3428      	adds	r4, #40	; 0x28
    1ba8:	2220      	movs	r2, #32
    1baa:	a801      	add	r0, sp, #4
    1bac:	f000 f9a2 	bl	1ef4 <memcpy>
    1bb0:	f7ff fc6e 	bl	1490 <millis>
    1bb4:	9009      	str	r0, [sp, #36]	; 0x24
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1bb6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1bb8:	2900      	cmp	r1, #0
    1bba:	d017      	beq.n	1bec <_ZN9Sensornet13ProcessPacketERK12SensorPacket+0x7e>
    1bbc:	3101      	adds	r1, #1
    1bbe:	00cb      	lsls	r3, r1, #3
    1bc0:	1859      	adds	r1, r3, r1
    1bc2:	0089      	lsls	r1, r1, #2
    1bc4:	6860      	ldr	r0, [r4, #4]
    1bc6:	f000 fa4f 	bl	2068 <realloc>
        if(!new_data) return;
    1bca:	2800      	cmp	r0, #0
    1bcc:	d00c      	beq.n	1be8 <_ZN9Sensornet13ProcessPacketERK12SensorPacket+0x7a>
        m_data = new_data;
    1bce:	6060      	str	r0, [r4, #4]
        memcpy(m_data + m_size, &elem, sizeof(T));
    1bd0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    1bd2:	00d3      	lsls	r3, r2, #3
    1bd4:	189b      	adds	r3, r3, r2
    1bd6:	009b      	lsls	r3, r3, #2
    1bd8:	18c0      	adds	r0, r0, r3
    1bda:	2224      	movs	r2, #36	; 0x24
    1bdc:	a901      	add	r1, sp, #4
    1bde:	f000 f989 	bl	1ef4 <memcpy>
        m_size++;
    1be2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1be4:	3301      	adds	r3, #1
    1be6:	62b3      	str	r3, [r6, #40]	; 0x28
    1be8:	b00a      	add	sp, #40	; 0x28
    1bea:	bd70      	pop	{r4, r5, r6, pc}
        auto new_data = m_size ? (T*)realloc(m_data, (m_size + 1) * sizeof(T)) : (T*)malloc(sizeof(T));
    1bec:	2024      	movs	r0, #36	; 0x24
    1bee:	f000 f96d 	bl	1ecc <malloc>
    1bf2:	e7ea      	b.n	1bca <_ZN9Sensornet13ProcessPacketERK12SensorPacket+0x5c>

00001bf4 <_ZN9Sensornet4PollEv>:
void Sensornet::Poll() {
    1bf4:	b510      	push	{r4, lr}
    1bf6:	b088      	sub	sp, #32
    1bf8:	0004      	movs	r4, r0
    if(m_radio.available()) {
    1bfa:	f7fe fe6e 	bl	8da <_ZN4RF249availableEv>
    1bfe:	2800      	cmp	r0, #0
    1c00:	d101      	bne.n	1c06 <_ZN9Sensornet4PollEv+0x12>
}
    1c02:	b008      	add	sp, #32
    1c04:	bd10      	pop	{r4, pc}
        m_radio.read(&pkt, 32);
    1c06:	2220      	movs	r2, #32
    1c08:	4669      	mov	r1, sp
    1c0a:	0020      	movs	r0, r4
    1c0c:	f7fe fe6a 	bl	8e4 <_ZN4RF244readEPvh>
        ProcessPacket(pkt);
    1c10:	4669      	mov	r1, sp
    1c12:	0020      	movs	r0, r4
    1c14:	f7ff ffab 	bl	1b6e <_ZN9Sensornet13ProcessPacketERK12SensorPacket>
}
    1c18:	e7f3      	b.n	1c02 <_ZN9Sensornet4PollEv+0xe>

00001c1a <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
    1c1a:	e7fe      	b.n	1c1a <Dummy_Handler>

00001c1c <Reset_Handler>:
{
    1c1c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1c1e:	4a1e      	ldr	r2, [pc, #120]	; (1c98 <Reset_Handler+0x7c>)
    1c20:	4b1e      	ldr	r3, [pc, #120]	; (1c9c <Reset_Handler+0x80>)
    1c22:	429a      	cmp	r2, r3
    1c24:	d007      	beq.n	1c36 <Reset_Handler+0x1a>
        pDest = &_data;
    1c26:	4b1d      	ldr	r3, [pc, #116]	; (1c9c <Reset_Handler+0x80>)
        pSrc = &_etext;
    1c28:	4a1b      	ldr	r2, [pc, #108]	; (1c98 <Reset_Handler+0x7c>)
    1c2a:	e001      	b.n	1c30 <Reset_Handler+0x14>
                        *pDest++ = *pSrc++;
    1c2c:	ca02      	ldmia	r2!, {r1}
    1c2e:	c302      	stmia	r3!, {r1}
                for (; pDest < &_edata;) {
    1c30:	491b      	ldr	r1, [pc, #108]	; (1ca0 <Reset_Handler+0x84>)
    1c32:	428b      	cmp	r3, r1
    1c34:	d3fa      	bcc.n	1c2c <Reset_Handler+0x10>
        pSrc = &_etext;
    1c36:	4b1b      	ldr	r3, [pc, #108]	; (1ca4 <Reset_Handler+0x88>)
    1c38:	e001      	b.n	1c3e <Reset_Handler+0x22>
                *pDest++ = 0;
    1c3a:	2200      	movs	r2, #0
    1c3c:	c304      	stmia	r3!, {r2}
        for (pDest = &_bss; pDest < &_ebss;) {
    1c3e:	4a1a      	ldr	r2, [pc, #104]	; (1ca8 <Reset_Handler+0x8c>)
    1c40:	4293      	cmp	r3, r2
    1c42:	d3fa      	bcc.n	1c3a <Reset_Handler+0x1e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1c44:	4b19      	ldr	r3, [pc, #100]	; (1cac <Reset_Handler+0x90>)
    1c46:	227f      	movs	r2, #127	; 0x7f
    1c48:	4393      	bics	r3, r2
    1c4a:	4a19      	ldr	r2, [pc, #100]	; (1cb0 <Reset_Handler+0x94>)
    1c4c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c4e:	4a19      	ldr	r2, [pc, #100]	; (1cb4 <Reset_Handler+0x98>)
    1c50:	2390      	movs	r3, #144	; 0x90
    1c52:	005b      	lsls	r3, r3, #1
    1c54:	2102      	movs	r1, #2
    1c56:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1c58:	4b17      	ldr	r3, [pc, #92]	; (1cb8 <Reset_Handler+0x9c>)
    1c5a:	7b9a      	ldrb	r2, [r3, #14]
    1c5c:	312e      	adds	r1, #46	; 0x2e
    1c5e:	438a      	bics	r2, r1
    1c60:	2120      	movs	r1, #32
    1c62:	430a      	orrs	r2, r1
    1c64:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1c66:	7b9a      	ldrb	r2, [r3, #14]
    1c68:	210c      	movs	r1, #12
    1c6a:	438a      	bics	r2, r1
    1c6c:	2108      	movs	r1, #8
    1c6e:	430a      	orrs	r2, r1
    1c70:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1c72:	7b9a      	ldrb	r2, [r3, #14]
    1c74:	2103      	movs	r1, #3
    1c76:	438a      	bics	r2, r1
    1c78:	2102      	movs	r1, #2
    1c7a:	430a      	orrs	r2, r1
    1c7c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c7e:	4a0f      	ldr	r2, [pc, #60]	; (1cbc <Reset_Handler+0xa0>)
    1c80:	6851      	ldr	r1, [r2, #4]
    1c82:	2380      	movs	r3, #128	; 0x80
    1c84:	430b      	orrs	r3, r1
    1c86:	6053      	str	r3, [r2, #4]
        systick_init();
    1c88:	f7ff fbd2 	bl	1430 <systick_init>
        __libc_init_array();
    1c8c:	f000 f8fa 	bl	1e84 <__libc_init_array>
        main();
    1c90:	f7ff f948 	bl	f24 <main>
        while (1);
    1c94:	e7fe      	b.n	1c94 <Reset_Handler+0x78>
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	00002e04 	.word	0x00002e04
    1c9c:	20000000 	.word	0x20000000
    1ca0:	20000078 	.word	0x20000078
    1ca4:	20000078 	.word	0x20000078
    1ca8:	2000051c 	.word	0x2000051c
    1cac:	00000000 	.word	0x00000000
    1cb0:	e000ed00 	.word	0xe000ed00
    1cb4:	41007000 	.word	0x41007000
    1cb8:	41004800 	.word	0x41004800
    1cbc:	41004000 	.word	0x41004000

00001cc0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1cc0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1cc2:	4a06      	ldr	r2, [pc, #24]	; (1cdc <_sbrk+0x1c>)
    1cc4:	6812      	ldr	r2, [r2, #0]
    1cc6:	2a00      	cmp	r2, #0
    1cc8:	d004      	beq.n	1cd4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1cca:	4a04      	ldr	r2, [pc, #16]	; (1cdc <_sbrk+0x1c>)
    1ccc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1cce:	18c3      	adds	r3, r0, r3
    1cd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1cd2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1cd4:	4a01      	ldr	r2, [pc, #4]	; (1cdc <_sbrk+0x1c>)
    1cd6:	4902      	ldr	r1, [pc, #8]	; (1ce0 <_sbrk+0x20>)
    1cd8:	6011      	str	r1, [r2, #0]
    1cda:	e7f6      	b.n	1cca <_sbrk+0xa>
    1cdc:	20000500 	.word	0x20000500
    1ce0:	2000051c 	.word	0x2000051c

00001ce4 <__aeabi_atexit>:
    1ce4:	0003      	movs	r3, r0
    1ce6:	b510      	push	{r4, lr}
    1ce8:	0008      	movs	r0, r1
    1cea:	0019      	movs	r1, r3
    1cec:	f000 f8bc 	bl	1e68 <__cxa_atexit>
    1cf0:	bd10      	pop	{r4, pc}
    1cf2:	Address 0x00001cf2 is out of bounds.


00001cf4 <__udivsi3>:
    1cf4:	2200      	movs	r2, #0
    1cf6:	0843      	lsrs	r3, r0, #1
    1cf8:	428b      	cmp	r3, r1
    1cfa:	d374      	bcc.n	1de6 <__udivsi3+0xf2>
    1cfc:	0903      	lsrs	r3, r0, #4
    1cfe:	428b      	cmp	r3, r1
    1d00:	d35f      	bcc.n	1dc2 <__udivsi3+0xce>
    1d02:	0a03      	lsrs	r3, r0, #8
    1d04:	428b      	cmp	r3, r1
    1d06:	d344      	bcc.n	1d92 <__udivsi3+0x9e>
    1d08:	0b03      	lsrs	r3, r0, #12
    1d0a:	428b      	cmp	r3, r1
    1d0c:	d328      	bcc.n	1d60 <__udivsi3+0x6c>
    1d0e:	0c03      	lsrs	r3, r0, #16
    1d10:	428b      	cmp	r3, r1
    1d12:	d30d      	bcc.n	1d30 <__udivsi3+0x3c>
    1d14:	22ff      	movs	r2, #255	; 0xff
    1d16:	0209      	lsls	r1, r1, #8
    1d18:	ba12      	rev	r2, r2
    1d1a:	0c03      	lsrs	r3, r0, #16
    1d1c:	428b      	cmp	r3, r1
    1d1e:	d302      	bcc.n	1d26 <__udivsi3+0x32>
    1d20:	1212      	asrs	r2, r2, #8
    1d22:	0209      	lsls	r1, r1, #8
    1d24:	d065      	beq.n	1df2 <__udivsi3+0xfe>
    1d26:	0b03      	lsrs	r3, r0, #12
    1d28:	428b      	cmp	r3, r1
    1d2a:	d319      	bcc.n	1d60 <__udivsi3+0x6c>
    1d2c:	e000      	b.n	1d30 <__udivsi3+0x3c>
    1d2e:	0a09      	lsrs	r1, r1, #8
    1d30:	0bc3      	lsrs	r3, r0, #15
    1d32:	428b      	cmp	r3, r1
    1d34:	d301      	bcc.n	1d3a <__udivsi3+0x46>
    1d36:	03cb      	lsls	r3, r1, #15
    1d38:	1ac0      	subs	r0, r0, r3
    1d3a:	4152      	adcs	r2, r2
    1d3c:	0b83      	lsrs	r3, r0, #14
    1d3e:	428b      	cmp	r3, r1
    1d40:	d301      	bcc.n	1d46 <__udivsi3+0x52>
    1d42:	038b      	lsls	r3, r1, #14
    1d44:	1ac0      	subs	r0, r0, r3
    1d46:	4152      	adcs	r2, r2
    1d48:	0b43      	lsrs	r3, r0, #13
    1d4a:	428b      	cmp	r3, r1
    1d4c:	d301      	bcc.n	1d52 <__udivsi3+0x5e>
    1d4e:	034b      	lsls	r3, r1, #13
    1d50:	1ac0      	subs	r0, r0, r3
    1d52:	4152      	adcs	r2, r2
    1d54:	0b03      	lsrs	r3, r0, #12
    1d56:	428b      	cmp	r3, r1
    1d58:	d301      	bcc.n	1d5e <__udivsi3+0x6a>
    1d5a:	030b      	lsls	r3, r1, #12
    1d5c:	1ac0      	subs	r0, r0, r3
    1d5e:	4152      	adcs	r2, r2
    1d60:	0ac3      	lsrs	r3, r0, #11
    1d62:	428b      	cmp	r3, r1
    1d64:	d301      	bcc.n	1d6a <__udivsi3+0x76>
    1d66:	02cb      	lsls	r3, r1, #11
    1d68:	1ac0      	subs	r0, r0, r3
    1d6a:	4152      	adcs	r2, r2
    1d6c:	0a83      	lsrs	r3, r0, #10
    1d6e:	428b      	cmp	r3, r1
    1d70:	d301      	bcc.n	1d76 <__udivsi3+0x82>
    1d72:	028b      	lsls	r3, r1, #10
    1d74:	1ac0      	subs	r0, r0, r3
    1d76:	4152      	adcs	r2, r2
    1d78:	0a43      	lsrs	r3, r0, #9
    1d7a:	428b      	cmp	r3, r1
    1d7c:	d301      	bcc.n	1d82 <__udivsi3+0x8e>
    1d7e:	024b      	lsls	r3, r1, #9
    1d80:	1ac0      	subs	r0, r0, r3
    1d82:	4152      	adcs	r2, r2
    1d84:	0a03      	lsrs	r3, r0, #8
    1d86:	428b      	cmp	r3, r1
    1d88:	d301      	bcc.n	1d8e <__udivsi3+0x9a>
    1d8a:	020b      	lsls	r3, r1, #8
    1d8c:	1ac0      	subs	r0, r0, r3
    1d8e:	4152      	adcs	r2, r2
    1d90:	d2cd      	bcs.n	1d2e <__udivsi3+0x3a>
    1d92:	09c3      	lsrs	r3, r0, #7
    1d94:	428b      	cmp	r3, r1
    1d96:	d301      	bcc.n	1d9c <__udivsi3+0xa8>
    1d98:	01cb      	lsls	r3, r1, #7
    1d9a:	1ac0      	subs	r0, r0, r3
    1d9c:	4152      	adcs	r2, r2
    1d9e:	0983      	lsrs	r3, r0, #6
    1da0:	428b      	cmp	r3, r1
    1da2:	d301      	bcc.n	1da8 <__udivsi3+0xb4>
    1da4:	018b      	lsls	r3, r1, #6
    1da6:	1ac0      	subs	r0, r0, r3
    1da8:	4152      	adcs	r2, r2
    1daa:	0943      	lsrs	r3, r0, #5
    1dac:	428b      	cmp	r3, r1
    1dae:	d301      	bcc.n	1db4 <__udivsi3+0xc0>
    1db0:	014b      	lsls	r3, r1, #5
    1db2:	1ac0      	subs	r0, r0, r3
    1db4:	4152      	adcs	r2, r2
    1db6:	0903      	lsrs	r3, r0, #4
    1db8:	428b      	cmp	r3, r1
    1dba:	d301      	bcc.n	1dc0 <__udivsi3+0xcc>
    1dbc:	010b      	lsls	r3, r1, #4
    1dbe:	1ac0      	subs	r0, r0, r3
    1dc0:	4152      	adcs	r2, r2
    1dc2:	08c3      	lsrs	r3, r0, #3
    1dc4:	428b      	cmp	r3, r1
    1dc6:	d301      	bcc.n	1dcc <__udivsi3+0xd8>
    1dc8:	00cb      	lsls	r3, r1, #3
    1dca:	1ac0      	subs	r0, r0, r3
    1dcc:	4152      	adcs	r2, r2
    1dce:	0883      	lsrs	r3, r0, #2
    1dd0:	428b      	cmp	r3, r1
    1dd2:	d301      	bcc.n	1dd8 <__udivsi3+0xe4>
    1dd4:	008b      	lsls	r3, r1, #2
    1dd6:	1ac0      	subs	r0, r0, r3
    1dd8:	4152      	adcs	r2, r2
    1dda:	0843      	lsrs	r3, r0, #1
    1ddc:	428b      	cmp	r3, r1
    1dde:	d301      	bcc.n	1de4 <__udivsi3+0xf0>
    1de0:	004b      	lsls	r3, r1, #1
    1de2:	1ac0      	subs	r0, r0, r3
    1de4:	4152      	adcs	r2, r2
    1de6:	1a41      	subs	r1, r0, r1
    1de8:	d200      	bcs.n	1dec <__udivsi3+0xf8>
    1dea:	4601      	mov	r1, r0
    1dec:	4152      	adcs	r2, r2
    1dee:	4610      	mov	r0, r2
    1df0:	4770      	bx	lr
    1df2:	e7ff      	b.n	1df4 <__udivsi3+0x100>
    1df4:	b501      	push	{r0, lr}
    1df6:	2000      	movs	r0, #0
    1df8:	f000 f806 	bl	1e08 <__aeabi_idiv0>
    1dfc:	bd02      	pop	{r1, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)

00001e00 <__aeabi_uidivmod>:
    1e00:	2900      	cmp	r1, #0
    1e02:	d0f7      	beq.n	1df4 <__udivsi3+0x100>
    1e04:	e776      	b.n	1cf4 <__udivsi3>
    1e06:	4770      	bx	lr

00001e08 <__aeabi_idiv0>:
    1e08:	4770      	bx	lr
    1e0a:	46c0      	nop			; (mov r8, r8)

00001e0c <__aeabi_lmul>:
    1e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e0e:	0415      	lsls	r5, r2, #16
    1e10:	0c2d      	lsrs	r5, r5, #16
    1e12:	000f      	movs	r7, r1
    1e14:	0001      	movs	r1, r0
    1e16:	002e      	movs	r6, r5
    1e18:	46c6      	mov	lr, r8
    1e1a:	4684      	mov	ip, r0
    1e1c:	0400      	lsls	r0, r0, #16
    1e1e:	0c14      	lsrs	r4, r2, #16
    1e20:	0c00      	lsrs	r0, r0, #16
    1e22:	0c09      	lsrs	r1, r1, #16
    1e24:	4346      	muls	r6, r0
    1e26:	434d      	muls	r5, r1
    1e28:	4360      	muls	r0, r4
    1e2a:	4361      	muls	r1, r4
    1e2c:	1940      	adds	r0, r0, r5
    1e2e:	0c34      	lsrs	r4, r6, #16
    1e30:	1824      	adds	r4, r4, r0
    1e32:	b500      	push	{lr}
    1e34:	42a5      	cmp	r5, r4
    1e36:	d903      	bls.n	1e40 <__aeabi_lmul+0x34>
    1e38:	2080      	movs	r0, #128	; 0x80
    1e3a:	0240      	lsls	r0, r0, #9
    1e3c:	4680      	mov	r8, r0
    1e3e:	4441      	add	r1, r8
    1e40:	0c25      	lsrs	r5, r4, #16
    1e42:	186d      	adds	r5, r5, r1
    1e44:	4661      	mov	r1, ip
    1e46:	4359      	muls	r1, r3
    1e48:	437a      	muls	r2, r7
    1e4a:	0430      	lsls	r0, r6, #16
    1e4c:	1949      	adds	r1, r1, r5
    1e4e:	0424      	lsls	r4, r4, #16
    1e50:	0c00      	lsrs	r0, r0, #16
    1e52:	1820      	adds	r0, r4, r0
    1e54:	1889      	adds	r1, r1, r2
    1e56:	bc04      	pop	{r2}
    1e58:	4690      	mov	r8, r2
    1e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e5c <atoi>:
    1e5c:	b510      	push	{r4, lr}
    1e5e:	220a      	movs	r2, #10
    1e60:	2100      	movs	r1, #0
    1e62:	f000 fa2d 	bl	22c0 <strtol>
    1e66:	bd10      	pop	{r4, pc}

00001e68 <__cxa_atexit>:
    1e68:	b510      	push	{r4, lr}
    1e6a:	0004      	movs	r4, r0
    1e6c:	4804      	ldr	r0, [pc, #16]	; (1e80 <__cxa_atexit+0x18>)
    1e6e:	0013      	movs	r3, r2
    1e70:	2800      	cmp	r0, #0
    1e72:	d004      	beq.n	1e7e <__cxa_atexit+0x16>
    1e74:	000a      	movs	r2, r1
    1e76:	2002      	movs	r0, #2
    1e78:	0021      	movs	r1, r4
    1e7a:	e000      	b.n	1e7e <__cxa_atexit+0x16>
    1e7c:	bf00      	nop
    1e7e:	bd10      	pop	{r4, pc}
    1e80:	00000000 	.word	0x00000000

00001e84 <__libc_init_array>:
    1e84:	b570      	push	{r4, r5, r6, lr}
    1e86:	2600      	movs	r6, #0
    1e88:	4d0c      	ldr	r5, [pc, #48]	; (1ebc <__libc_init_array+0x38>)
    1e8a:	4c0d      	ldr	r4, [pc, #52]	; (1ec0 <__libc_init_array+0x3c>)
    1e8c:	1b64      	subs	r4, r4, r5
    1e8e:	10a4      	asrs	r4, r4, #2
    1e90:	42a6      	cmp	r6, r4
    1e92:	d109      	bne.n	1ea8 <__libc_init_array+0x24>
    1e94:	2600      	movs	r6, #0
    1e96:	f000 ff97 	bl	2dc8 <_init>
    1e9a:	4d0a      	ldr	r5, [pc, #40]	; (1ec4 <__libc_init_array+0x40>)
    1e9c:	4c0a      	ldr	r4, [pc, #40]	; (1ec8 <__libc_init_array+0x44>)
    1e9e:	1b64      	subs	r4, r4, r5
    1ea0:	10a4      	asrs	r4, r4, #2
    1ea2:	42a6      	cmp	r6, r4
    1ea4:	d105      	bne.n	1eb2 <__libc_init_array+0x2e>
    1ea6:	bd70      	pop	{r4, r5, r6, pc}
    1ea8:	00b3      	lsls	r3, r6, #2
    1eaa:	58eb      	ldr	r3, [r5, r3]
    1eac:	4798      	blx	r3
    1eae:	3601      	adds	r6, #1
    1eb0:	e7ee      	b.n	1e90 <__libc_init_array+0xc>
    1eb2:	00b3      	lsls	r3, r6, #2
    1eb4:	58eb      	ldr	r3, [r5, r3]
    1eb6:	4798      	blx	r3
    1eb8:	3601      	adds	r6, #1
    1eba:	e7f2      	b.n	1ea2 <__libc_init_array+0x1e>
    1ebc:	00002dd4 	.word	0x00002dd4
    1ec0:	00002dd4 	.word	0x00002dd4
    1ec4:	00002dd4 	.word	0x00002dd4
    1ec8:	00002de4 	.word	0x00002de4

00001ecc <malloc>:
    1ecc:	b510      	push	{r4, lr}
    1ece:	4b03      	ldr	r3, [pc, #12]	; (1edc <malloc+0x10>)
    1ed0:	0001      	movs	r1, r0
    1ed2:	6818      	ldr	r0, [r3, #0]
    1ed4:	f000 f86a 	bl	1fac <_malloc_r>
    1ed8:	bd10      	pop	{r4, pc}
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	20000014 	.word	0x20000014

00001ee0 <free>:
    1ee0:	b510      	push	{r4, lr}
    1ee2:	4b03      	ldr	r3, [pc, #12]	; (1ef0 <free+0x10>)
    1ee4:	0001      	movs	r1, r0
    1ee6:	6818      	ldr	r0, [r3, #0]
    1ee8:	f000 f816 	bl	1f18 <_free_r>
    1eec:	bd10      	pop	{r4, pc}
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	20000014 	.word	0x20000014

00001ef4 <memcpy>:
    1ef4:	2300      	movs	r3, #0
    1ef6:	b510      	push	{r4, lr}
    1ef8:	429a      	cmp	r2, r3
    1efa:	d100      	bne.n	1efe <memcpy+0xa>
    1efc:	bd10      	pop	{r4, pc}
    1efe:	5ccc      	ldrb	r4, [r1, r3]
    1f00:	54c4      	strb	r4, [r0, r3]
    1f02:	3301      	adds	r3, #1
    1f04:	e7f8      	b.n	1ef8 <memcpy+0x4>

00001f06 <memset>:
    1f06:	0003      	movs	r3, r0
    1f08:	1882      	adds	r2, r0, r2
    1f0a:	4293      	cmp	r3, r2
    1f0c:	d100      	bne.n	1f10 <memset+0xa>
    1f0e:	4770      	bx	lr
    1f10:	7019      	strb	r1, [r3, #0]
    1f12:	3301      	adds	r3, #1
    1f14:	e7f9      	b.n	1f0a <memset+0x4>
    1f16:	Address 0x00001f16 is out of bounds.


00001f18 <_free_r>:
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	0005      	movs	r5, r0
    1f1c:	2900      	cmp	r1, #0
    1f1e:	d010      	beq.n	1f42 <_free_r+0x2a>
    1f20:	1f0c      	subs	r4, r1, #4
    1f22:	6823      	ldr	r3, [r4, #0]
    1f24:	2b00      	cmp	r3, #0
    1f26:	da00      	bge.n	1f2a <_free_r+0x12>
    1f28:	18e4      	adds	r4, r4, r3
    1f2a:	0028      	movs	r0, r5
    1f2c:	f000 fa0e 	bl	234c <__malloc_lock>
    1f30:	4a1d      	ldr	r2, [pc, #116]	; (1fa8 <_free_r+0x90>)
    1f32:	6813      	ldr	r3, [r2, #0]
    1f34:	2b00      	cmp	r3, #0
    1f36:	d105      	bne.n	1f44 <_free_r+0x2c>
    1f38:	6063      	str	r3, [r4, #4]
    1f3a:	6014      	str	r4, [r2, #0]
    1f3c:	0028      	movs	r0, r5
    1f3e:	f000 fa0d 	bl	235c <__malloc_unlock>
    1f42:	bd70      	pop	{r4, r5, r6, pc}
    1f44:	42a3      	cmp	r3, r4
    1f46:	d908      	bls.n	1f5a <_free_r+0x42>
    1f48:	6821      	ldr	r1, [r4, #0]
    1f4a:	1860      	adds	r0, r4, r1
    1f4c:	4283      	cmp	r3, r0
    1f4e:	d1f3      	bne.n	1f38 <_free_r+0x20>
    1f50:	6818      	ldr	r0, [r3, #0]
    1f52:	685b      	ldr	r3, [r3, #4]
    1f54:	1841      	adds	r1, r0, r1
    1f56:	6021      	str	r1, [r4, #0]
    1f58:	e7ee      	b.n	1f38 <_free_r+0x20>
    1f5a:	001a      	movs	r2, r3
    1f5c:	685b      	ldr	r3, [r3, #4]
    1f5e:	2b00      	cmp	r3, #0
    1f60:	d001      	beq.n	1f66 <_free_r+0x4e>
    1f62:	42a3      	cmp	r3, r4
    1f64:	d9f9      	bls.n	1f5a <_free_r+0x42>
    1f66:	6811      	ldr	r1, [r2, #0]
    1f68:	1850      	adds	r0, r2, r1
    1f6a:	42a0      	cmp	r0, r4
    1f6c:	d10b      	bne.n	1f86 <_free_r+0x6e>
    1f6e:	6820      	ldr	r0, [r4, #0]
    1f70:	1809      	adds	r1, r1, r0
    1f72:	1850      	adds	r0, r2, r1
    1f74:	6011      	str	r1, [r2, #0]
    1f76:	4283      	cmp	r3, r0
    1f78:	d1e0      	bne.n	1f3c <_free_r+0x24>
    1f7a:	6818      	ldr	r0, [r3, #0]
    1f7c:	685b      	ldr	r3, [r3, #4]
    1f7e:	1841      	adds	r1, r0, r1
    1f80:	6011      	str	r1, [r2, #0]
    1f82:	6053      	str	r3, [r2, #4]
    1f84:	e7da      	b.n	1f3c <_free_r+0x24>
    1f86:	42a0      	cmp	r0, r4
    1f88:	d902      	bls.n	1f90 <_free_r+0x78>
    1f8a:	230c      	movs	r3, #12
    1f8c:	602b      	str	r3, [r5, #0]
    1f8e:	e7d5      	b.n	1f3c <_free_r+0x24>
    1f90:	6821      	ldr	r1, [r4, #0]
    1f92:	1860      	adds	r0, r4, r1
    1f94:	4283      	cmp	r3, r0
    1f96:	d103      	bne.n	1fa0 <_free_r+0x88>
    1f98:	6818      	ldr	r0, [r3, #0]
    1f9a:	685b      	ldr	r3, [r3, #4]
    1f9c:	1841      	adds	r1, r0, r1
    1f9e:	6021      	str	r1, [r4, #0]
    1fa0:	6063      	str	r3, [r4, #4]
    1fa2:	6054      	str	r4, [r2, #4]
    1fa4:	e7ca      	b.n	1f3c <_free_r+0x24>
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	20000504 	.word	0x20000504

00001fac <_malloc_r>:
    1fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fae:	2303      	movs	r3, #3
    1fb0:	1ccd      	adds	r5, r1, #3
    1fb2:	439d      	bics	r5, r3
    1fb4:	3508      	adds	r5, #8
    1fb6:	0006      	movs	r6, r0
    1fb8:	2d0c      	cmp	r5, #12
    1fba:	d21f      	bcs.n	1ffc <_malloc_r+0x50>
    1fbc:	250c      	movs	r5, #12
    1fbe:	42a9      	cmp	r1, r5
    1fc0:	d81e      	bhi.n	2000 <_malloc_r+0x54>
    1fc2:	0030      	movs	r0, r6
    1fc4:	f000 f9c2 	bl	234c <__malloc_lock>
    1fc8:	4925      	ldr	r1, [pc, #148]	; (2060 <_malloc_r+0xb4>)
    1fca:	680a      	ldr	r2, [r1, #0]
    1fcc:	0014      	movs	r4, r2
    1fce:	2c00      	cmp	r4, #0
    1fd0:	d11a      	bne.n	2008 <_malloc_r+0x5c>
    1fd2:	4f24      	ldr	r7, [pc, #144]	; (2064 <_malloc_r+0xb8>)
    1fd4:	683b      	ldr	r3, [r7, #0]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d104      	bne.n	1fe4 <_malloc_r+0x38>
    1fda:	0021      	movs	r1, r4
    1fdc:	0030      	movs	r0, r6
    1fde:	f000 f84d 	bl	207c <_sbrk_r>
    1fe2:	6038      	str	r0, [r7, #0]
    1fe4:	0029      	movs	r1, r5
    1fe6:	0030      	movs	r0, r6
    1fe8:	f000 f848 	bl	207c <_sbrk_r>
    1fec:	1c43      	adds	r3, r0, #1
    1fee:	d12b      	bne.n	2048 <_malloc_r+0x9c>
    1ff0:	230c      	movs	r3, #12
    1ff2:	0030      	movs	r0, r6
    1ff4:	6033      	str	r3, [r6, #0]
    1ff6:	f000 f9b1 	bl	235c <__malloc_unlock>
    1ffa:	e003      	b.n	2004 <_malloc_r+0x58>
    1ffc:	2d00      	cmp	r5, #0
    1ffe:	dade      	bge.n	1fbe <_malloc_r+0x12>
    2000:	230c      	movs	r3, #12
    2002:	6033      	str	r3, [r6, #0]
    2004:	2000      	movs	r0, #0
    2006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2008:	6823      	ldr	r3, [r4, #0]
    200a:	1b5b      	subs	r3, r3, r5
    200c:	d419      	bmi.n	2042 <_malloc_r+0x96>
    200e:	2b0b      	cmp	r3, #11
    2010:	d903      	bls.n	201a <_malloc_r+0x6e>
    2012:	6023      	str	r3, [r4, #0]
    2014:	18e4      	adds	r4, r4, r3
    2016:	6025      	str	r5, [r4, #0]
    2018:	e003      	b.n	2022 <_malloc_r+0x76>
    201a:	6863      	ldr	r3, [r4, #4]
    201c:	42a2      	cmp	r2, r4
    201e:	d10e      	bne.n	203e <_malloc_r+0x92>
    2020:	600b      	str	r3, [r1, #0]
    2022:	0030      	movs	r0, r6
    2024:	f000 f99a 	bl	235c <__malloc_unlock>
    2028:	0020      	movs	r0, r4
    202a:	2207      	movs	r2, #7
    202c:	300b      	adds	r0, #11
    202e:	1d23      	adds	r3, r4, #4
    2030:	4390      	bics	r0, r2
    2032:	1ac2      	subs	r2, r0, r3
    2034:	4298      	cmp	r0, r3
    2036:	d0e6      	beq.n	2006 <_malloc_r+0x5a>
    2038:	1a1b      	subs	r3, r3, r0
    203a:	50a3      	str	r3, [r4, r2]
    203c:	e7e3      	b.n	2006 <_malloc_r+0x5a>
    203e:	6053      	str	r3, [r2, #4]
    2040:	e7ef      	b.n	2022 <_malloc_r+0x76>
    2042:	0022      	movs	r2, r4
    2044:	6864      	ldr	r4, [r4, #4]
    2046:	e7c2      	b.n	1fce <_malloc_r+0x22>
    2048:	2303      	movs	r3, #3
    204a:	1cc4      	adds	r4, r0, #3
    204c:	439c      	bics	r4, r3
    204e:	42a0      	cmp	r0, r4
    2050:	d0e1      	beq.n	2016 <_malloc_r+0x6a>
    2052:	1a21      	subs	r1, r4, r0
    2054:	0030      	movs	r0, r6
    2056:	f000 f811 	bl	207c <_sbrk_r>
    205a:	1c43      	adds	r3, r0, #1
    205c:	d1db      	bne.n	2016 <_malloc_r+0x6a>
    205e:	e7c7      	b.n	1ff0 <_malloc_r+0x44>
    2060:	20000504 	.word	0x20000504
    2064:	20000508 	.word	0x20000508

00002068 <realloc>:
    2068:	b510      	push	{r4, lr}
    206a:	4b03      	ldr	r3, [pc, #12]	; (2078 <realloc+0x10>)
    206c:	000a      	movs	r2, r1
    206e:	0001      	movs	r1, r0
    2070:	6818      	ldr	r0, [r3, #0]
    2072:	f000 f97b 	bl	236c <_realloc_r>
    2076:	bd10      	pop	{r4, pc}
    2078:	20000014 	.word	0x20000014

0000207c <_sbrk_r>:
    207c:	2300      	movs	r3, #0
    207e:	b570      	push	{r4, r5, r6, lr}
    2080:	4d06      	ldr	r5, [pc, #24]	; (209c <_sbrk_r+0x20>)
    2082:	0004      	movs	r4, r0
    2084:	0008      	movs	r0, r1
    2086:	602b      	str	r3, [r5, #0]
    2088:	f7ff fe1a 	bl	1cc0 <_sbrk>
    208c:	1c43      	adds	r3, r0, #1
    208e:	d103      	bne.n	2098 <_sbrk_r+0x1c>
    2090:	682b      	ldr	r3, [r5, #0]
    2092:	2b00      	cmp	r3, #0
    2094:	d000      	beq.n	2098 <_sbrk_r+0x1c>
    2096:	6023      	str	r3, [r4, #0]
    2098:	bd70      	pop	{r4, r5, r6, pc}
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	20000518 	.word	0x20000518

000020a0 <sniprintf>:
    20a0:	b40c      	push	{r2, r3}
    20a2:	b530      	push	{r4, r5, lr}
    20a4:	4b17      	ldr	r3, [pc, #92]	; (2104 <sniprintf+0x64>)
    20a6:	000c      	movs	r4, r1
    20a8:	681d      	ldr	r5, [r3, #0]
    20aa:	b09d      	sub	sp, #116	; 0x74
    20ac:	2900      	cmp	r1, #0
    20ae:	da08      	bge.n	20c2 <sniprintf+0x22>
    20b0:	238b      	movs	r3, #139	; 0x8b
    20b2:	2001      	movs	r0, #1
    20b4:	602b      	str	r3, [r5, #0]
    20b6:	4240      	negs	r0, r0
    20b8:	b01d      	add	sp, #116	; 0x74
    20ba:	bc30      	pop	{r4, r5}
    20bc:	bc08      	pop	{r3}
    20be:	b002      	add	sp, #8
    20c0:	4718      	bx	r3
    20c2:	2382      	movs	r3, #130	; 0x82
    20c4:	466a      	mov	r2, sp
    20c6:	009b      	lsls	r3, r3, #2
    20c8:	8293      	strh	r3, [r2, #20]
    20ca:	2300      	movs	r3, #0
    20cc:	9002      	str	r0, [sp, #8]
    20ce:	9006      	str	r0, [sp, #24]
    20d0:	4299      	cmp	r1, r3
    20d2:	d000      	beq.n	20d6 <sniprintf+0x36>
    20d4:	1e4b      	subs	r3, r1, #1
    20d6:	9304      	str	r3, [sp, #16]
    20d8:	9307      	str	r3, [sp, #28]
    20da:	2301      	movs	r3, #1
    20dc:	466a      	mov	r2, sp
    20de:	425b      	negs	r3, r3
    20e0:	82d3      	strh	r3, [r2, #22]
    20e2:	0028      	movs	r0, r5
    20e4:	ab21      	add	r3, sp, #132	; 0x84
    20e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
    20e8:	a902      	add	r1, sp, #8
    20ea:	9301      	str	r3, [sp, #4]
    20ec:	f000 f9c6 	bl	247c <_svfiprintf_r>
    20f0:	1c43      	adds	r3, r0, #1
    20f2:	da01      	bge.n	20f8 <sniprintf+0x58>
    20f4:	238b      	movs	r3, #139	; 0x8b
    20f6:	602b      	str	r3, [r5, #0]
    20f8:	2c00      	cmp	r4, #0
    20fa:	d0dd      	beq.n	20b8 <sniprintf+0x18>
    20fc:	2300      	movs	r3, #0
    20fe:	9a02      	ldr	r2, [sp, #8]
    2100:	7013      	strb	r3, [r2, #0]
    2102:	e7d9      	b.n	20b8 <sniprintf+0x18>
    2104:	20000014 	.word	0x20000014

00002108 <strcasecmp>:
    2108:	b5f0      	push	{r4, r5, r6, r7, lr}
    210a:	0005      	movs	r5, r0
    210c:	2400      	movs	r4, #0
    210e:	2703      	movs	r7, #3
    2110:	4e09      	ldr	r6, [pc, #36]	; (2138 <strcasecmp+0x30>)
    2112:	5d2a      	ldrb	r2, [r5, r4]
    2114:	5cb3      	ldrb	r3, [r6, r2]
    2116:	403b      	ands	r3, r7
    2118:	2b01      	cmp	r3, #1
    211a:	d100      	bne.n	211e <strcasecmp+0x16>
    211c:	3220      	adds	r2, #32
    211e:	5d0b      	ldrb	r3, [r1, r4]
    2120:	5cf0      	ldrb	r0, [r6, r3]
    2122:	4038      	ands	r0, r7
    2124:	2801      	cmp	r0, #1
    2126:	d100      	bne.n	212a <strcasecmp+0x22>
    2128:	3320      	adds	r3, #32
    212a:	1ad0      	subs	r0, r2, r3
    212c:	429a      	cmp	r2, r3
    212e:	d102      	bne.n	2136 <strcasecmp+0x2e>
    2130:	3401      	adds	r4, #1
    2132:	2b00      	cmp	r3, #0
    2134:	d1ed      	bne.n	2112 <strcasecmp+0xa>
    2136:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2138:	00002c31 	.word	0x00002c31

0000213c <strchr>:
    213c:	b2c9      	uxtb	r1, r1
    213e:	7803      	ldrb	r3, [r0, #0]
    2140:	2b00      	cmp	r3, #0
    2142:	d004      	beq.n	214e <strchr+0x12>
    2144:	428b      	cmp	r3, r1
    2146:	d100      	bne.n	214a <strchr+0xe>
    2148:	4770      	bx	lr
    214a:	3001      	adds	r0, #1
    214c:	e7f7      	b.n	213e <strchr+0x2>
    214e:	424b      	negs	r3, r1
    2150:	4159      	adcs	r1, r3
    2152:	4249      	negs	r1, r1
    2154:	4008      	ands	r0, r1
    2156:	e7f7      	b.n	2148 <strchr+0xc>

00002158 <strlen>:
    2158:	2300      	movs	r3, #0
    215a:	5cc2      	ldrb	r2, [r0, r3]
    215c:	3301      	adds	r3, #1
    215e:	2a00      	cmp	r2, #0
    2160:	d1fb      	bne.n	215a <strlen+0x2>
    2162:	1e58      	subs	r0, r3, #1
    2164:	4770      	bx	lr

00002166 <strncpy>:
    2166:	0003      	movs	r3, r0
    2168:	b530      	push	{r4, r5, lr}
    216a:	001d      	movs	r5, r3
    216c:	2a00      	cmp	r2, #0
    216e:	d006      	beq.n	217e <strncpy+0x18>
    2170:	780c      	ldrb	r4, [r1, #0]
    2172:	3a01      	subs	r2, #1
    2174:	3301      	adds	r3, #1
    2176:	702c      	strb	r4, [r5, #0]
    2178:	3101      	adds	r1, #1
    217a:	2c00      	cmp	r4, #0
    217c:	d1f5      	bne.n	216a <strncpy+0x4>
    217e:	2100      	movs	r1, #0
    2180:	189a      	adds	r2, r3, r2
    2182:	4293      	cmp	r3, r2
    2184:	d100      	bne.n	2188 <strncpy+0x22>
    2186:	bd30      	pop	{r4, r5, pc}
    2188:	7019      	strb	r1, [r3, #0]
    218a:	3301      	adds	r3, #1
    218c:	e7f9      	b.n	2182 <strncpy+0x1c>

0000218e <strstr>:
    218e:	780a      	ldrb	r2, [r1, #0]
    2190:	b530      	push	{r4, r5, lr}
    2192:	2a00      	cmp	r2, #0
    2194:	d10c      	bne.n	21b0 <strstr+0x22>
    2196:	bd30      	pop	{r4, r5, pc}
    2198:	429a      	cmp	r2, r3
    219a:	d108      	bne.n	21ae <strstr+0x20>
    219c:	2301      	movs	r3, #1
    219e:	5ccc      	ldrb	r4, [r1, r3]
    21a0:	2c00      	cmp	r4, #0
    21a2:	d0f8      	beq.n	2196 <strstr+0x8>
    21a4:	5cc5      	ldrb	r5, [r0, r3]
    21a6:	42a5      	cmp	r5, r4
    21a8:	d101      	bne.n	21ae <strstr+0x20>
    21aa:	3301      	adds	r3, #1
    21ac:	e7f7      	b.n	219e <strstr+0x10>
    21ae:	3001      	adds	r0, #1
    21b0:	7803      	ldrb	r3, [r0, #0]
    21b2:	2b00      	cmp	r3, #0
    21b4:	d1f0      	bne.n	2198 <strstr+0xa>
    21b6:	0018      	movs	r0, r3
    21b8:	e7ed      	b.n	2196 <strstr+0x8>
    21ba:	Address 0x000021ba is out of bounds.


000021bc <_strtol_l.isra.0>:
    21bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21be:	001e      	movs	r6, r3
    21c0:	4b3d      	ldr	r3, [pc, #244]	; (22b8 <_strtol_l.isra.0+0xfc>)
    21c2:	b087      	sub	sp, #28
    21c4:	9005      	str	r0, [sp, #20]
    21c6:	9202      	str	r2, [sp, #8]
    21c8:	0008      	movs	r0, r1
    21ca:	469c      	mov	ip, r3
    21cc:	2208      	movs	r2, #8
    21ce:	9101      	str	r1, [sp, #4]
    21d0:	0003      	movs	r3, r0
    21d2:	4661      	mov	r1, ip
    21d4:	781c      	ldrb	r4, [r3, #0]
    21d6:	1c45      	adds	r5, r0, #1
    21d8:	5d09      	ldrb	r1, [r1, r4]
    21da:	0028      	movs	r0, r5
    21dc:	000f      	movs	r7, r1
    21de:	4017      	ands	r7, r2
    21e0:	4211      	tst	r1, r2
    21e2:	d1f5      	bne.n	21d0 <_strtol_l.isra.0+0x14>
    21e4:	2c2d      	cmp	r4, #45	; 0x2d
    21e6:	d133      	bne.n	2250 <_strtol_l.isra.0+0x94>
    21e8:	2701      	movs	r7, #1
    21ea:	782c      	ldrb	r4, [r5, #0]
    21ec:	1c9d      	adds	r5, r3, #2
    21ee:	2e00      	cmp	r6, #0
    21f0:	d05d      	beq.n	22ae <_strtol_l.isra.0+0xf2>
    21f2:	2e10      	cmp	r6, #16
    21f4:	d109      	bne.n	220a <_strtol_l.isra.0+0x4e>
    21f6:	2c30      	cmp	r4, #48	; 0x30
    21f8:	d107      	bne.n	220a <_strtol_l.isra.0+0x4e>
    21fa:	2220      	movs	r2, #32
    21fc:	782b      	ldrb	r3, [r5, #0]
    21fe:	4393      	bics	r3, r2
    2200:	2b58      	cmp	r3, #88	; 0x58
    2202:	d14f      	bne.n	22a4 <_strtol_l.isra.0+0xe8>
    2204:	2610      	movs	r6, #16
    2206:	786c      	ldrb	r4, [r5, #1]
    2208:	3502      	adds	r5, #2
    220a:	4b2c      	ldr	r3, [pc, #176]	; (22bc <_strtol_l.isra.0+0x100>)
    220c:	0031      	movs	r1, r6
    220e:	18fb      	adds	r3, r7, r3
    2210:	0018      	movs	r0, r3
    2212:	9303      	str	r3, [sp, #12]
    2214:	f7ff fdf4 	bl	1e00 <__aeabi_uidivmod>
    2218:	2300      	movs	r3, #0
    221a:	2201      	movs	r2, #1
    221c:	4684      	mov	ip, r0
    221e:	0018      	movs	r0, r3
    2220:	9104      	str	r1, [sp, #16]
    2222:	4252      	negs	r2, r2
    2224:	0021      	movs	r1, r4
    2226:	3930      	subs	r1, #48	; 0x30
    2228:	2909      	cmp	r1, #9
    222a:	d816      	bhi.n	225a <_strtol_l.isra.0+0x9e>
    222c:	000c      	movs	r4, r1
    222e:	42a6      	cmp	r6, r4
    2230:	dd1f      	ble.n	2272 <_strtol_l.isra.0+0xb6>
    2232:	1c59      	adds	r1, r3, #1
    2234:	d009      	beq.n	224a <_strtol_l.isra.0+0x8e>
    2236:	0013      	movs	r3, r2
    2238:	4584      	cmp	ip, r0
    223a:	d306      	bcc.n	224a <_strtol_l.isra.0+0x8e>
    223c:	d102      	bne.n	2244 <_strtol_l.isra.0+0x88>
    223e:	9904      	ldr	r1, [sp, #16]
    2240:	42a1      	cmp	r1, r4
    2242:	db02      	blt.n	224a <_strtol_l.isra.0+0x8e>
    2244:	2301      	movs	r3, #1
    2246:	4370      	muls	r0, r6
    2248:	1820      	adds	r0, r4, r0
    224a:	782c      	ldrb	r4, [r5, #0]
    224c:	3501      	adds	r5, #1
    224e:	e7e9      	b.n	2224 <_strtol_l.isra.0+0x68>
    2250:	2c2b      	cmp	r4, #43	; 0x2b
    2252:	d1cc      	bne.n	21ee <_strtol_l.isra.0+0x32>
    2254:	782c      	ldrb	r4, [r5, #0]
    2256:	1c9d      	adds	r5, r3, #2
    2258:	e7c9      	b.n	21ee <_strtol_l.isra.0+0x32>
    225a:	0021      	movs	r1, r4
    225c:	3941      	subs	r1, #65	; 0x41
    225e:	2919      	cmp	r1, #25
    2260:	d801      	bhi.n	2266 <_strtol_l.isra.0+0xaa>
    2262:	3c37      	subs	r4, #55	; 0x37
    2264:	e7e3      	b.n	222e <_strtol_l.isra.0+0x72>
    2266:	0021      	movs	r1, r4
    2268:	3961      	subs	r1, #97	; 0x61
    226a:	2919      	cmp	r1, #25
    226c:	d801      	bhi.n	2272 <_strtol_l.isra.0+0xb6>
    226e:	3c57      	subs	r4, #87	; 0x57
    2270:	e7dd      	b.n	222e <_strtol_l.isra.0+0x72>
    2272:	1c5a      	adds	r2, r3, #1
    2274:	d108      	bne.n	2288 <_strtol_l.isra.0+0xcc>
    2276:	9a05      	ldr	r2, [sp, #20]
    2278:	3323      	adds	r3, #35	; 0x23
    227a:	6013      	str	r3, [r2, #0]
    227c:	9b02      	ldr	r3, [sp, #8]
    227e:	9803      	ldr	r0, [sp, #12]
    2280:	2b00      	cmp	r3, #0
    2282:	d109      	bne.n	2298 <_strtol_l.isra.0+0xdc>
    2284:	b007      	add	sp, #28
    2286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2288:	2f00      	cmp	r7, #0
    228a:	d000      	beq.n	228e <_strtol_l.isra.0+0xd2>
    228c:	4240      	negs	r0, r0
    228e:	9a02      	ldr	r2, [sp, #8]
    2290:	2a00      	cmp	r2, #0
    2292:	d0f7      	beq.n	2284 <_strtol_l.isra.0+0xc8>
    2294:	2b00      	cmp	r3, #0
    2296:	d001      	beq.n	229c <_strtol_l.isra.0+0xe0>
    2298:	1e6b      	subs	r3, r5, #1
    229a:	9301      	str	r3, [sp, #4]
    229c:	9b02      	ldr	r3, [sp, #8]
    229e:	9a01      	ldr	r2, [sp, #4]
    22a0:	601a      	str	r2, [r3, #0]
    22a2:	e7ef      	b.n	2284 <_strtol_l.isra.0+0xc8>
    22a4:	2430      	movs	r4, #48	; 0x30
    22a6:	2e00      	cmp	r6, #0
    22a8:	d1af      	bne.n	220a <_strtol_l.isra.0+0x4e>
    22aa:	3608      	adds	r6, #8
    22ac:	e7ad      	b.n	220a <_strtol_l.isra.0+0x4e>
    22ae:	2c30      	cmp	r4, #48	; 0x30
    22b0:	d0a3      	beq.n	21fa <_strtol_l.isra.0+0x3e>
    22b2:	260a      	movs	r6, #10
    22b4:	e7a9      	b.n	220a <_strtol_l.isra.0+0x4e>
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	00002c31 	.word	0x00002c31
    22bc:	7fffffff 	.word	0x7fffffff

000022c0 <strtol>:
    22c0:	b510      	push	{r4, lr}
    22c2:	0013      	movs	r3, r2
    22c4:	000a      	movs	r2, r1
    22c6:	0001      	movs	r1, r0
    22c8:	4802      	ldr	r0, [pc, #8]	; (22d4 <strtol+0x14>)
    22ca:	6800      	ldr	r0, [r0, #0]
    22cc:	f7ff ff76 	bl	21bc <_strtol_l.isra.0>
    22d0:	bd10      	pop	{r4, pc}
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	20000014 	.word	0x20000014

000022d8 <_vsniprintf_r>:
    22d8:	b530      	push	{r4, r5, lr}
    22da:	0014      	movs	r4, r2
    22dc:	0005      	movs	r5, r0
    22de:	001a      	movs	r2, r3
    22e0:	b09b      	sub	sp, #108	; 0x6c
    22e2:	2c00      	cmp	r4, #0
    22e4:	da05      	bge.n	22f2 <_vsniprintf_r+0x1a>
    22e6:	238b      	movs	r3, #139	; 0x8b
    22e8:	6003      	str	r3, [r0, #0]
    22ea:	2001      	movs	r0, #1
    22ec:	4240      	negs	r0, r0
    22ee:	b01b      	add	sp, #108	; 0x6c
    22f0:	bd30      	pop	{r4, r5, pc}
    22f2:	2382      	movs	r3, #130	; 0x82
    22f4:	4668      	mov	r0, sp
    22f6:	009b      	lsls	r3, r3, #2
    22f8:	8183      	strh	r3, [r0, #12]
    22fa:	2300      	movs	r3, #0
    22fc:	9100      	str	r1, [sp, #0]
    22fe:	9104      	str	r1, [sp, #16]
    2300:	429c      	cmp	r4, r3
    2302:	d000      	beq.n	2306 <_vsniprintf_r+0x2e>
    2304:	1e63      	subs	r3, r4, #1
    2306:	9302      	str	r3, [sp, #8]
    2308:	9305      	str	r3, [sp, #20]
    230a:	2301      	movs	r3, #1
    230c:	4669      	mov	r1, sp
    230e:	425b      	negs	r3, r3
    2310:	81cb      	strh	r3, [r1, #14]
    2312:	0028      	movs	r0, r5
    2314:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2316:	f000 f8b1 	bl	247c <_svfiprintf_r>
    231a:	1c43      	adds	r3, r0, #1
    231c:	da01      	bge.n	2322 <_vsniprintf_r+0x4a>
    231e:	238b      	movs	r3, #139	; 0x8b
    2320:	602b      	str	r3, [r5, #0]
    2322:	2c00      	cmp	r4, #0
    2324:	d0e3      	beq.n	22ee <_vsniprintf_r+0x16>
    2326:	2300      	movs	r3, #0
    2328:	9a00      	ldr	r2, [sp, #0]
    232a:	7013      	strb	r3, [r2, #0]
    232c:	e7df      	b.n	22ee <_vsniprintf_r+0x16>
    232e:	Address 0x0000232e is out of bounds.


00002330 <vsniprintf>:
    2330:	b507      	push	{r0, r1, r2, lr}
    2332:	9300      	str	r3, [sp, #0]
    2334:	0013      	movs	r3, r2
    2336:	000a      	movs	r2, r1
    2338:	0001      	movs	r1, r0
    233a:	4802      	ldr	r0, [pc, #8]	; (2344 <vsniprintf+0x14>)
    233c:	6800      	ldr	r0, [r0, #0]
    233e:	f7ff ffcb 	bl	22d8 <_vsniprintf_r>
    2342:	bd0e      	pop	{r1, r2, r3, pc}
    2344:	20000014 	.word	0x20000014

00002348 <__retarget_lock_acquire_recursive>:
    2348:	4770      	bx	lr

0000234a <__retarget_lock_release_recursive>:
    234a:	4770      	bx	lr

0000234c <__malloc_lock>:
    234c:	b510      	push	{r4, lr}
    234e:	4802      	ldr	r0, [pc, #8]	; (2358 <__malloc_lock+0xc>)
    2350:	f7ff fffa 	bl	2348 <__retarget_lock_acquire_recursive>
    2354:	bd10      	pop	{r4, pc}
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	20000510 	.word	0x20000510

0000235c <__malloc_unlock>:
    235c:	b510      	push	{r4, lr}
    235e:	4802      	ldr	r0, [pc, #8]	; (2368 <__malloc_unlock+0xc>)
    2360:	f7ff fff3 	bl	234a <__retarget_lock_release_recursive>
    2364:	bd10      	pop	{r4, pc}
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	20000510 	.word	0x20000510

0000236c <_realloc_r>:
    236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    236e:	0007      	movs	r7, r0
    2370:	000d      	movs	r5, r1
    2372:	0016      	movs	r6, r2
    2374:	2900      	cmp	r1, #0
    2376:	d105      	bne.n	2384 <_realloc_r+0x18>
    2378:	0011      	movs	r1, r2
    237a:	f7ff fe17 	bl	1fac <_malloc_r>
    237e:	0004      	movs	r4, r0
    2380:	0020      	movs	r0, r4
    2382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2384:	2a00      	cmp	r2, #0
    2386:	d103      	bne.n	2390 <_realloc_r+0x24>
    2388:	f7ff fdc6 	bl	1f18 <_free_r>
    238c:	0034      	movs	r4, r6
    238e:	e7f7      	b.n	2380 <_realloc_r+0x14>
    2390:	f000 fb14 	bl	29bc <_malloc_usable_size_r>
    2394:	002c      	movs	r4, r5
    2396:	42b0      	cmp	r0, r6
    2398:	d2f2      	bcs.n	2380 <_realloc_r+0x14>
    239a:	0031      	movs	r1, r6
    239c:	0038      	movs	r0, r7
    239e:	f7ff fe05 	bl	1fac <_malloc_r>
    23a2:	1e04      	subs	r4, r0, #0
    23a4:	d0ec      	beq.n	2380 <_realloc_r+0x14>
    23a6:	0029      	movs	r1, r5
    23a8:	0032      	movs	r2, r6
    23aa:	f7ff fda3 	bl	1ef4 <memcpy>
    23ae:	0029      	movs	r1, r5
    23b0:	0038      	movs	r0, r7
    23b2:	f7ff fdb1 	bl	1f18 <_free_r>
    23b6:	e7e3      	b.n	2380 <_realloc_r+0x14>

000023b8 <__ssputs_r>:
    23b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ba:	688e      	ldr	r6, [r1, #8]
    23bc:	b085      	sub	sp, #20
    23be:	0007      	movs	r7, r0
    23c0:	000c      	movs	r4, r1
    23c2:	9203      	str	r2, [sp, #12]
    23c4:	9301      	str	r3, [sp, #4]
    23c6:	429e      	cmp	r6, r3
    23c8:	d83c      	bhi.n	2444 <__ssputs_r+0x8c>
    23ca:	2390      	movs	r3, #144	; 0x90
    23cc:	898a      	ldrh	r2, [r1, #12]
    23ce:	00db      	lsls	r3, r3, #3
    23d0:	421a      	tst	r2, r3
    23d2:	d034      	beq.n	243e <__ssputs_r+0x86>
    23d4:	2503      	movs	r5, #3
    23d6:	6909      	ldr	r1, [r1, #16]
    23d8:	6823      	ldr	r3, [r4, #0]
    23da:	1a5b      	subs	r3, r3, r1
    23dc:	9302      	str	r3, [sp, #8]
    23de:	6963      	ldr	r3, [r4, #20]
    23e0:	9802      	ldr	r0, [sp, #8]
    23e2:	435d      	muls	r5, r3
    23e4:	0feb      	lsrs	r3, r5, #31
    23e6:	195d      	adds	r5, r3, r5
    23e8:	9b01      	ldr	r3, [sp, #4]
    23ea:	106d      	asrs	r5, r5, #1
    23ec:	3301      	adds	r3, #1
    23ee:	181b      	adds	r3, r3, r0
    23f0:	42ab      	cmp	r3, r5
    23f2:	d900      	bls.n	23f6 <__ssputs_r+0x3e>
    23f4:	001d      	movs	r5, r3
    23f6:	0553      	lsls	r3, r2, #21
    23f8:	d532      	bpl.n	2460 <__ssputs_r+0xa8>
    23fa:	0029      	movs	r1, r5
    23fc:	0038      	movs	r0, r7
    23fe:	f7ff fdd5 	bl	1fac <_malloc_r>
    2402:	1e06      	subs	r6, r0, #0
    2404:	d109      	bne.n	241a <__ssputs_r+0x62>
    2406:	230c      	movs	r3, #12
    2408:	603b      	str	r3, [r7, #0]
    240a:	2340      	movs	r3, #64	; 0x40
    240c:	2001      	movs	r0, #1
    240e:	89a2      	ldrh	r2, [r4, #12]
    2410:	4240      	negs	r0, r0
    2412:	4313      	orrs	r3, r2
    2414:	81a3      	strh	r3, [r4, #12]
    2416:	b005      	add	sp, #20
    2418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    241a:	9a02      	ldr	r2, [sp, #8]
    241c:	6921      	ldr	r1, [r4, #16]
    241e:	f7ff fd69 	bl	1ef4 <memcpy>
    2422:	89a3      	ldrh	r3, [r4, #12]
    2424:	4a14      	ldr	r2, [pc, #80]	; (2478 <__ssputs_r+0xc0>)
    2426:	401a      	ands	r2, r3
    2428:	2380      	movs	r3, #128	; 0x80
    242a:	4313      	orrs	r3, r2
    242c:	81a3      	strh	r3, [r4, #12]
    242e:	9b02      	ldr	r3, [sp, #8]
    2430:	6126      	str	r6, [r4, #16]
    2432:	18f6      	adds	r6, r6, r3
    2434:	6026      	str	r6, [r4, #0]
    2436:	6165      	str	r5, [r4, #20]
    2438:	9e01      	ldr	r6, [sp, #4]
    243a:	1aed      	subs	r5, r5, r3
    243c:	60a5      	str	r5, [r4, #8]
    243e:	9b01      	ldr	r3, [sp, #4]
    2440:	429e      	cmp	r6, r3
    2442:	d900      	bls.n	2446 <__ssputs_r+0x8e>
    2444:	9e01      	ldr	r6, [sp, #4]
    2446:	0032      	movs	r2, r6
    2448:	9903      	ldr	r1, [sp, #12]
    244a:	6820      	ldr	r0, [r4, #0]
    244c:	f000 faa3 	bl	2996 <memmove>
    2450:	68a3      	ldr	r3, [r4, #8]
    2452:	2000      	movs	r0, #0
    2454:	1b9b      	subs	r3, r3, r6
    2456:	60a3      	str	r3, [r4, #8]
    2458:	6823      	ldr	r3, [r4, #0]
    245a:	199e      	adds	r6, r3, r6
    245c:	6026      	str	r6, [r4, #0]
    245e:	e7da      	b.n	2416 <__ssputs_r+0x5e>
    2460:	002a      	movs	r2, r5
    2462:	0038      	movs	r0, r7
    2464:	f7ff ff82 	bl	236c <_realloc_r>
    2468:	1e06      	subs	r6, r0, #0
    246a:	d1e0      	bne.n	242e <__ssputs_r+0x76>
    246c:	0038      	movs	r0, r7
    246e:	6921      	ldr	r1, [r4, #16]
    2470:	f7ff fd52 	bl	1f18 <_free_r>
    2474:	e7c7      	b.n	2406 <__ssputs_r+0x4e>
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	fffffb7f 	.word	0xfffffb7f

0000247c <_svfiprintf_r>:
    247c:	b5f0      	push	{r4, r5, r6, r7, lr}
    247e:	b0a1      	sub	sp, #132	; 0x84
    2480:	9003      	str	r0, [sp, #12]
    2482:	001d      	movs	r5, r3
    2484:	898b      	ldrh	r3, [r1, #12]
    2486:	000f      	movs	r7, r1
    2488:	0016      	movs	r6, r2
    248a:	061b      	lsls	r3, r3, #24
    248c:	d511      	bpl.n	24b2 <_svfiprintf_r+0x36>
    248e:	690b      	ldr	r3, [r1, #16]
    2490:	2b00      	cmp	r3, #0
    2492:	d10e      	bne.n	24b2 <_svfiprintf_r+0x36>
    2494:	2140      	movs	r1, #64	; 0x40
    2496:	f7ff fd89 	bl	1fac <_malloc_r>
    249a:	6038      	str	r0, [r7, #0]
    249c:	6138      	str	r0, [r7, #16]
    249e:	2800      	cmp	r0, #0
    24a0:	d105      	bne.n	24ae <_svfiprintf_r+0x32>
    24a2:	230c      	movs	r3, #12
    24a4:	9a03      	ldr	r2, [sp, #12]
    24a6:	3801      	subs	r0, #1
    24a8:	6013      	str	r3, [r2, #0]
    24aa:	b021      	add	sp, #132	; 0x84
    24ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24ae:	2340      	movs	r3, #64	; 0x40
    24b0:	617b      	str	r3, [r7, #20]
    24b2:	2300      	movs	r3, #0
    24b4:	ac08      	add	r4, sp, #32
    24b6:	6163      	str	r3, [r4, #20]
    24b8:	3320      	adds	r3, #32
    24ba:	7663      	strb	r3, [r4, #25]
    24bc:	3310      	adds	r3, #16
    24be:	76a3      	strb	r3, [r4, #26]
    24c0:	9507      	str	r5, [sp, #28]
    24c2:	0035      	movs	r5, r6
    24c4:	782b      	ldrb	r3, [r5, #0]
    24c6:	2b00      	cmp	r3, #0
    24c8:	d001      	beq.n	24ce <_svfiprintf_r+0x52>
    24ca:	2b25      	cmp	r3, #37	; 0x25
    24cc:	d147      	bne.n	255e <_svfiprintf_r+0xe2>
    24ce:	1bab      	subs	r3, r5, r6
    24d0:	9305      	str	r3, [sp, #20]
    24d2:	42b5      	cmp	r5, r6
    24d4:	d00c      	beq.n	24f0 <_svfiprintf_r+0x74>
    24d6:	0032      	movs	r2, r6
    24d8:	0039      	movs	r1, r7
    24da:	9803      	ldr	r0, [sp, #12]
    24dc:	f7ff ff6c 	bl	23b8 <__ssputs_r>
    24e0:	1c43      	adds	r3, r0, #1
    24e2:	d100      	bne.n	24e6 <_svfiprintf_r+0x6a>
    24e4:	e0ae      	b.n	2644 <_svfiprintf_r+0x1c8>
    24e6:	6962      	ldr	r2, [r4, #20]
    24e8:	9b05      	ldr	r3, [sp, #20]
    24ea:	4694      	mov	ip, r2
    24ec:	4463      	add	r3, ip
    24ee:	6163      	str	r3, [r4, #20]
    24f0:	782b      	ldrb	r3, [r5, #0]
    24f2:	2b00      	cmp	r3, #0
    24f4:	d100      	bne.n	24f8 <_svfiprintf_r+0x7c>
    24f6:	e0a5      	b.n	2644 <_svfiprintf_r+0x1c8>
    24f8:	2201      	movs	r2, #1
    24fa:	2300      	movs	r3, #0
    24fc:	4252      	negs	r2, r2
    24fe:	6062      	str	r2, [r4, #4]
    2500:	a904      	add	r1, sp, #16
    2502:	3254      	adds	r2, #84	; 0x54
    2504:	1852      	adds	r2, r2, r1
    2506:	1c6e      	adds	r6, r5, #1
    2508:	6023      	str	r3, [r4, #0]
    250a:	60e3      	str	r3, [r4, #12]
    250c:	60a3      	str	r3, [r4, #8]
    250e:	7013      	strb	r3, [r2, #0]
    2510:	65a3      	str	r3, [r4, #88]	; 0x58
    2512:	2205      	movs	r2, #5
    2514:	7831      	ldrb	r1, [r6, #0]
    2516:	4854      	ldr	r0, [pc, #336]	; (2668 <_svfiprintf_r+0x1ec>)
    2518:	f000 fa32 	bl	2980 <memchr>
    251c:	1c75      	adds	r5, r6, #1
    251e:	2800      	cmp	r0, #0
    2520:	d11f      	bne.n	2562 <_svfiprintf_r+0xe6>
    2522:	6822      	ldr	r2, [r4, #0]
    2524:	06d3      	lsls	r3, r2, #27
    2526:	d504      	bpl.n	2532 <_svfiprintf_r+0xb6>
    2528:	2353      	movs	r3, #83	; 0x53
    252a:	a904      	add	r1, sp, #16
    252c:	185b      	adds	r3, r3, r1
    252e:	2120      	movs	r1, #32
    2530:	7019      	strb	r1, [r3, #0]
    2532:	0713      	lsls	r3, r2, #28
    2534:	d504      	bpl.n	2540 <_svfiprintf_r+0xc4>
    2536:	2353      	movs	r3, #83	; 0x53
    2538:	a904      	add	r1, sp, #16
    253a:	185b      	adds	r3, r3, r1
    253c:	212b      	movs	r1, #43	; 0x2b
    253e:	7019      	strb	r1, [r3, #0]
    2540:	7833      	ldrb	r3, [r6, #0]
    2542:	2b2a      	cmp	r3, #42	; 0x2a
    2544:	d016      	beq.n	2574 <_svfiprintf_r+0xf8>
    2546:	0035      	movs	r5, r6
    2548:	2100      	movs	r1, #0
    254a:	200a      	movs	r0, #10
    254c:	68e3      	ldr	r3, [r4, #12]
    254e:	782a      	ldrb	r2, [r5, #0]
    2550:	1c6e      	adds	r6, r5, #1
    2552:	3a30      	subs	r2, #48	; 0x30
    2554:	2a09      	cmp	r2, #9
    2556:	d94e      	bls.n	25f6 <_svfiprintf_r+0x17a>
    2558:	2900      	cmp	r1, #0
    255a:	d111      	bne.n	2580 <_svfiprintf_r+0x104>
    255c:	e017      	b.n	258e <_svfiprintf_r+0x112>
    255e:	3501      	adds	r5, #1
    2560:	e7b0      	b.n	24c4 <_svfiprintf_r+0x48>
    2562:	4b41      	ldr	r3, [pc, #260]	; (2668 <_svfiprintf_r+0x1ec>)
    2564:	6822      	ldr	r2, [r4, #0]
    2566:	1ac0      	subs	r0, r0, r3
    2568:	2301      	movs	r3, #1
    256a:	4083      	lsls	r3, r0
    256c:	4313      	orrs	r3, r2
    256e:	002e      	movs	r6, r5
    2570:	6023      	str	r3, [r4, #0]
    2572:	e7ce      	b.n	2512 <_svfiprintf_r+0x96>
    2574:	9b07      	ldr	r3, [sp, #28]
    2576:	1d19      	adds	r1, r3, #4
    2578:	681b      	ldr	r3, [r3, #0]
    257a:	9107      	str	r1, [sp, #28]
    257c:	2b00      	cmp	r3, #0
    257e:	db01      	blt.n	2584 <_svfiprintf_r+0x108>
    2580:	930b      	str	r3, [sp, #44]	; 0x2c
    2582:	e004      	b.n	258e <_svfiprintf_r+0x112>
    2584:	425b      	negs	r3, r3
    2586:	60e3      	str	r3, [r4, #12]
    2588:	2302      	movs	r3, #2
    258a:	4313      	orrs	r3, r2
    258c:	6023      	str	r3, [r4, #0]
    258e:	782b      	ldrb	r3, [r5, #0]
    2590:	2b2e      	cmp	r3, #46	; 0x2e
    2592:	d10a      	bne.n	25aa <_svfiprintf_r+0x12e>
    2594:	786b      	ldrb	r3, [r5, #1]
    2596:	2b2a      	cmp	r3, #42	; 0x2a
    2598:	d135      	bne.n	2606 <_svfiprintf_r+0x18a>
    259a:	9b07      	ldr	r3, [sp, #28]
    259c:	3502      	adds	r5, #2
    259e:	1d1a      	adds	r2, r3, #4
    25a0:	681b      	ldr	r3, [r3, #0]
    25a2:	9207      	str	r2, [sp, #28]
    25a4:	2b00      	cmp	r3, #0
    25a6:	db2b      	blt.n	2600 <_svfiprintf_r+0x184>
    25a8:	9309      	str	r3, [sp, #36]	; 0x24
    25aa:	4e30      	ldr	r6, [pc, #192]	; (266c <_svfiprintf_r+0x1f0>)
    25ac:	2203      	movs	r2, #3
    25ae:	0030      	movs	r0, r6
    25b0:	7829      	ldrb	r1, [r5, #0]
    25b2:	f000 f9e5 	bl	2980 <memchr>
    25b6:	2800      	cmp	r0, #0
    25b8:	d006      	beq.n	25c8 <_svfiprintf_r+0x14c>
    25ba:	2340      	movs	r3, #64	; 0x40
    25bc:	1b80      	subs	r0, r0, r6
    25be:	4083      	lsls	r3, r0
    25c0:	6822      	ldr	r2, [r4, #0]
    25c2:	3501      	adds	r5, #1
    25c4:	4313      	orrs	r3, r2
    25c6:	6023      	str	r3, [r4, #0]
    25c8:	7829      	ldrb	r1, [r5, #0]
    25ca:	2206      	movs	r2, #6
    25cc:	4828      	ldr	r0, [pc, #160]	; (2670 <_svfiprintf_r+0x1f4>)
    25ce:	1c6e      	adds	r6, r5, #1
    25d0:	7621      	strb	r1, [r4, #24]
    25d2:	f000 f9d5 	bl	2980 <memchr>
    25d6:	2800      	cmp	r0, #0
    25d8:	d03c      	beq.n	2654 <_svfiprintf_r+0x1d8>
    25da:	4b26      	ldr	r3, [pc, #152]	; (2674 <_svfiprintf_r+0x1f8>)
    25dc:	2b00      	cmp	r3, #0
    25de:	d125      	bne.n	262c <_svfiprintf_r+0x1b0>
    25e0:	2207      	movs	r2, #7
    25e2:	9b07      	ldr	r3, [sp, #28]
    25e4:	3307      	adds	r3, #7
    25e6:	4393      	bics	r3, r2
    25e8:	3308      	adds	r3, #8
    25ea:	9307      	str	r3, [sp, #28]
    25ec:	6963      	ldr	r3, [r4, #20]
    25ee:	9a04      	ldr	r2, [sp, #16]
    25f0:	189b      	adds	r3, r3, r2
    25f2:	6163      	str	r3, [r4, #20]
    25f4:	e765      	b.n	24c2 <_svfiprintf_r+0x46>
    25f6:	4343      	muls	r3, r0
    25f8:	0035      	movs	r5, r6
    25fa:	2101      	movs	r1, #1
    25fc:	189b      	adds	r3, r3, r2
    25fe:	e7a6      	b.n	254e <_svfiprintf_r+0xd2>
    2600:	2301      	movs	r3, #1
    2602:	425b      	negs	r3, r3
    2604:	e7d0      	b.n	25a8 <_svfiprintf_r+0x12c>
    2606:	2300      	movs	r3, #0
    2608:	200a      	movs	r0, #10
    260a:	001a      	movs	r2, r3
    260c:	3501      	adds	r5, #1
    260e:	6063      	str	r3, [r4, #4]
    2610:	7829      	ldrb	r1, [r5, #0]
    2612:	1c6e      	adds	r6, r5, #1
    2614:	3930      	subs	r1, #48	; 0x30
    2616:	2909      	cmp	r1, #9
    2618:	d903      	bls.n	2622 <_svfiprintf_r+0x1a6>
    261a:	2b00      	cmp	r3, #0
    261c:	d0c5      	beq.n	25aa <_svfiprintf_r+0x12e>
    261e:	9209      	str	r2, [sp, #36]	; 0x24
    2620:	e7c3      	b.n	25aa <_svfiprintf_r+0x12e>
    2622:	4342      	muls	r2, r0
    2624:	0035      	movs	r5, r6
    2626:	2301      	movs	r3, #1
    2628:	1852      	adds	r2, r2, r1
    262a:	e7f1      	b.n	2610 <_svfiprintf_r+0x194>
    262c:	ab07      	add	r3, sp, #28
    262e:	9300      	str	r3, [sp, #0]
    2630:	003a      	movs	r2, r7
    2632:	0021      	movs	r1, r4
    2634:	4b10      	ldr	r3, [pc, #64]	; (2678 <_svfiprintf_r+0x1fc>)
    2636:	9803      	ldr	r0, [sp, #12]
    2638:	e000      	b.n	263c <_svfiprintf_r+0x1c0>
    263a:	bf00      	nop
    263c:	9004      	str	r0, [sp, #16]
    263e:	9b04      	ldr	r3, [sp, #16]
    2640:	3301      	adds	r3, #1
    2642:	d1d3      	bne.n	25ec <_svfiprintf_r+0x170>
    2644:	89bb      	ldrh	r3, [r7, #12]
    2646:	980d      	ldr	r0, [sp, #52]	; 0x34
    2648:	065b      	lsls	r3, r3, #25
    264a:	d400      	bmi.n	264e <_svfiprintf_r+0x1d2>
    264c:	e72d      	b.n	24aa <_svfiprintf_r+0x2e>
    264e:	2001      	movs	r0, #1
    2650:	4240      	negs	r0, r0
    2652:	e72a      	b.n	24aa <_svfiprintf_r+0x2e>
    2654:	ab07      	add	r3, sp, #28
    2656:	9300      	str	r3, [sp, #0]
    2658:	003a      	movs	r2, r7
    265a:	0021      	movs	r1, r4
    265c:	4b06      	ldr	r3, [pc, #24]	; (2678 <_svfiprintf_r+0x1fc>)
    265e:	9803      	ldr	r0, [sp, #12]
    2660:	f000 f87c 	bl	275c <_printf_i>
    2664:	e7ea      	b.n	263c <_svfiprintf_r+0x1c0>
    2666:	46c0      	nop			; (mov r8, r8)
    2668:	00002d94 	.word	0x00002d94
    266c:	00002d9a 	.word	0x00002d9a
    2670:	00002d9e 	.word	0x00002d9e
    2674:	00000000 	.word	0x00000000
    2678:	000023b9 	.word	0x000023b9

0000267c <_printf_common>:
    267c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    267e:	0015      	movs	r5, r2
    2680:	9301      	str	r3, [sp, #4]
    2682:	688a      	ldr	r2, [r1, #8]
    2684:	690b      	ldr	r3, [r1, #16]
    2686:	000c      	movs	r4, r1
    2688:	9000      	str	r0, [sp, #0]
    268a:	4293      	cmp	r3, r2
    268c:	da00      	bge.n	2690 <_printf_common+0x14>
    268e:	0013      	movs	r3, r2
    2690:	0022      	movs	r2, r4
    2692:	602b      	str	r3, [r5, #0]
    2694:	3243      	adds	r2, #67	; 0x43
    2696:	7812      	ldrb	r2, [r2, #0]
    2698:	2a00      	cmp	r2, #0
    269a:	d001      	beq.n	26a0 <_printf_common+0x24>
    269c:	3301      	adds	r3, #1
    269e:	602b      	str	r3, [r5, #0]
    26a0:	6823      	ldr	r3, [r4, #0]
    26a2:	069b      	lsls	r3, r3, #26
    26a4:	d502      	bpl.n	26ac <_printf_common+0x30>
    26a6:	682b      	ldr	r3, [r5, #0]
    26a8:	3302      	adds	r3, #2
    26aa:	602b      	str	r3, [r5, #0]
    26ac:	6822      	ldr	r2, [r4, #0]
    26ae:	2306      	movs	r3, #6
    26b0:	0017      	movs	r7, r2
    26b2:	401f      	ands	r7, r3
    26b4:	421a      	tst	r2, r3
    26b6:	d027      	beq.n	2708 <_printf_common+0x8c>
    26b8:	0023      	movs	r3, r4
    26ba:	3343      	adds	r3, #67	; 0x43
    26bc:	781b      	ldrb	r3, [r3, #0]
    26be:	1e5a      	subs	r2, r3, #1
    26c0:	4193      	sbcs	r3, r2
    26c2:	6822      	ldr	r2, [r4, #0]
    26c4:	0692      	lsls	r2, r2, #26
    26c6:	d430      	bmi.n	272a <_printf_common+0xae>
    26c8:	0022      	movs	r2, r4
    26ca:	9901      	ldr	r1, [sp, #4]
    26cc:	9800      	ldr	r0, [sp, #0]
    26ce:	9e08      	ldr	r6, [sp, #32]
    26d0:	3243      	adds	r2, #67	; 0x43
    26d2:	47b0      	blx	r6
    26d4:	1c43      	adds	r3, r0, #1
    26d6:	d025      	beq.n	2724 <_printf_common+0xa8>
    26d8:	2306      	movs	r3, #6
    26da:	6820      	ldr	r0, [r4, #0]
    26dc:	682a      	ldr	r2, [r5, #0]
    26de:	68e1      	ldr	r1, [r4, #12]
    26e0:	2500      	movs	r5, #0
    26e2:	4003      	ands	r3, r0
    26e4:	2b04      	cmp	r3, #4
    26e6:	d103      	bne.n	26f0 <_printf_common+0x74>
    26e8:	1a8d      	subs	r5, r1, r2
    26ea:	43eb      	mvns	r3, r5
    26ec:	17db      	asrs	r3, r3, #31
    26ee:	401d      	ands	r5, r3
    26f0:	68a3      	ldr	r3, [r4, #8]
    26f2:	6922      	ldr	r2, [r4, #16]
    26f4:	4293      	cmp	r3, r2
    26f6:	dd01      	ble.n	26fc <_printf_common+0x80>
    26f8:	1a9b      	subs	r3, r3, r2
    26fa:	18ed      	adds	r5, r5, r3
    26fc:	2700      	movs	r7, #0
    26fe:	42bd      	cmp	r5, r7
    2700:	d120      	bne.n	2744 <_printf_common+0xc8>
    2702:	2000      	movs	r0, #0
    2704:	e010      	b.n	2728 <_printf_common+0xac>
    2706:	3701      	adds	r7, #1
    2708:	68e3      	ldr	r3, [r4, #12]
    270a:	682a      	ldr	r2, [r5, #0]
    270c:	1a9b      	subs	r3, r3, r2
    270e:	42bb      	cmp	r3, r7
    2710:	ddd2      	ble.n	26b8 <_printf_common+0x3c>
    2712:	0022      	movs	r2, r4
    2714:	2301      	movs	r3, #1
    2716:	9901      	ldr	r1, [sp, #4]
    2718:	9800      	ldr	r0, [sp, #0]
    271a:	9e08      	ldr	r6, [sp, #32]
    271c:	3219      	adds	r2, #25
    271e:	47b0      	blx	r6
    2720:	1c43      	adds	r3, r0, #1
    2722:	d1f0      	bne.n	2706 <_printf_common+0x8a>
    2724:	2001      	movs	r0, #1
    2726:	4240      	negs	r0, r0
    2728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    272a:	2030      	movs	r0, #48	; 0x30
    272c:	18e1      	adds	r1, r4, r3
    272e:	3143      	adds	r1, #67	; 0x43
    2730:	7008      	strb	r0, [r1, #0]
    2732:	0021      	movs	r1, r4
    2734:	1c5a      	adds	r2, r3, #1
    2736:	3145      	adds	r1, #69	; 0x45
    2738:	7809      	ldrb	r1, [r1, #0]
    273a:	18a2      	adds	r2, r4, r2
    273c:	3243      	adds	r2, #67	; 0x43
    273e:	3302      	adds	r3, #2
    2740:	7011      	strb	r1, [r2, #0]
    2742:	e7c1      	b.n	26c8 <_printf_common+0x4c>
    2744:	0022      	movs	r2, r4
    2746:	2301      	movs	r3, #1
    2748:	9901      	ldr	r1, [sp, #4]
    274a:	9800      	ldr	r0, [sp, #0]
    274c:	9e08      	ldr	r6, [sp, #32]
    274e:	321a      	adds	r2, #26
    2750:	47b0      	blx	r6
    2752:	1c43      	adds	r3, r0, #1
    2754:	d0e6      	beq.n	2724 <_printf_common+0xa8>
    2756:	3701      	adds	r7, #1
    2758:	e7d1      	b.n	26fe <_printf_common+0x82>
    275a:	Address 0x0000275a is out of bounds.


0000275c <_printf_i>:
    275c:	b5f0      	push	{r4, r5, r6, r7, lr}
    275e:	b08b      	sub	sp, #44	; 0x2c
    2760:	9206      	str	r2, [sp, #24]
    2762:	000a      	movs	r2, r1
    2764:	3243      	adds	r2, #67	; 0x43
    2766:	9307      	str	r3, [sp, #28]
    2768:	9005      	str	r0, [sp, #20]
    276a:	9204      	str	r2, [sp, #16]
    276c:	7e0a      	ldrb	r2, [r1, #24]
    276e:	000c      	movs	r4, r1
    2770:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2772:	2a78      	cmp	r2, #120	; 0x78
    2774:	d806      	bhi.n	2784 <_printf_i+0x28>
    2776:	2a62      	cmp	r2, #98	; 0x62
    2778:	d808      	bhi.n	278c <_printf_i+0x30>
    277a:	2a00      	cmp	r2, #0
    277c:	d100      	bne.n	2780 <_printf_i+0x24>
    277e:	e0c0      	b.n	2902 <_printf_i+0x1a6>
    2780:	2a58      	cmp	r2, #88	; 0x58
    2782:	d052      	beq.n	282a <_printf_i+0xce>
    2784:	0026      	movs	r6, r4
    2786:	3642      	adds	r6, #66	; 0x42
    2788:	7032      	strb	r2, [r6, #0]
    278a:	e022      	b.n	27d2 <_printf_i+0x76>
    278c:	0010      	movs	r0, r2
    278e:	3863      	subs	r0, #99	; 0x63
    2790:	2815      	cmp	r0, #21
    2792:	d8f7      	bhi.n	2784 <_printf_i+0x28>
    2794:	f000 f91a 	bl	29cc <__gnu_thumb1_case_shi>
    2798:	001f0016 	.word	0x001f0016
    279c:	fff6fff6 	.word	0xfff6fff6
    27a0:	fff6fff6 	.word	0xfff6fff6
    27a4:	fff6001f 	.word	0xfff6001f
    27a8:	fff6fff6 	.word	0xfff6fff6
    27ac:	00a8fff6 	.word	0x00a8fff6
    27b0:	009a0036 	.word	0x009a0036
    27b4:	fff6fff6 	.word	0xfff6fff6
    27b8:	fff600b9 	.word	0xfff600b9
    27bc:	fff60036 	.word	0xfff60036
    27c0:	009efff6 	.word	0x009efff6
    27c4:	0026      	movs	r6, r4
    27c6:	681a      	ldr	r2, [r3, #0]
    27c8:	3642      	adds	r6, #66	; 0x42
    27ca:	1d11      	adds	r1, r2, #4
    27cc:	6019      	str	r1, [r3, #0]
    27ce:	6813      	ldr	r3, [r2, #0]
    27d0:	7033      	strb	r3, [r6, #0]
    27d2:	2301      	movs	r3, #1
    27d4:	e0a7      	b.n	2926 <_printf_i+0x1ca>
    27d6:	6808      	ldr	r0, [r1, #0]
    27d8:	6819      	ldr	r1, [r3, #0]
    27da:	1d0a      	adds	r2, r1, #4
    27dc:	0605      	lsls	r5, r0, #24
    27de:	d50b      	bpl.n	27f8 <_printf_i+0x9c>
    27e0:	680d      	ldr	r5, [r1, #0]
    27e2:	601a      	str	r2, [r3, #0]
    27e4:	2d00      	cmp	r5, #0
    27e6:	da03      	bge.n	27f0 <_printf_i+0x94>
    27e8:	232d      	movs	r3, #45	; 0x2d
    27ea:	9a04      	ldr	r2, [sp, #16]
    27ec:	426d      	negs	r5, r5
    27ee:	7013      	strb	r3, [r2, #0]
    27f0:	4b61      	ldr	r3, [pc, #388]	; (2978 <_printf_i+0x21c>)
    27f2:	270a      	movs	r7, #10
    27f4:	9303      	str	r3, [sp, #12]
    27f6:	e032      	b.n	285e <_printf_i+0x102>
    27f8:	680d      	ldr	r5, [r1, #0]
    27fa:	601a      	str	r2, [r3, #0]
    27fc:	0641      	lsls	r1, r0, #25
    27fe:	d5f1      	bpl.n	27e4 <_printf_i+0x88>
    2800:	b22d      	sxth	r5, r5
    2802:	e7ef      	b.n	27e4 <_printf_i+0x88>
    2804:	680d      	ldr	r5, [r1, #0]
    2806:	6819      	ldr	r1, [r3, #0]
    2808:	1d08      	adds	r0, r1, #4
    280a:	6018      	str	r0, [r3, #0]
    280c:	062e      	lsls	r6, r5, #24
    280e:	d501      	bpl.n	2814 <_printf_i+0xb8>
    2810:	680d      	ldr	r5, [r1, #0]
    2812:	e003      	b.n	281c <_printf_i+0xc0>
    2814:	066d      	lsls	r5, r5, #25
    2816:	d5fb      	bpl.n	2810 <_printf_i+0xb4>
    2818:	680d      	ldr	r5, [r1, #0]
    281a:	b2ad      	uxth	r5, r5
    281c:	4b56      	ldr	r3, [pc, #344]	; (2978 <_printf_i+0x21c>)
    281e:	270a      	movs	r7, #10
    2820:	9303      	str	r3, [sp, #12]
    2822:	2a6f      	cmp	r2, #111	; 0x6f
    2824:	d117      	bne.n	2856 <_printf_i+0xfa>
    2826:	2708      	movs	r7, #8
    2828:	e015      	b.n	2856 <_printf_i+0xfa>
    282a:	3145      	adds	r1, #69	; 0x45
    282c:	700a      	strb	r2, [r1, #0]
    282e:	4a52      	ldr	r2, [pc, #328]	; (2978 <_printf_i+0x21c>)
    2830:	9203      	str	r2, [sp, #12]
    2832:	681a      	ldr	r2, [r3, #0]
    2834:	6821      	ldr	r1, [r4, #0]
    2836:	ca20      	ldmia	r2!, {r5}
    2838:	601a      	str	r2, [r3, #0]
    283a:	0608      	lsls	r0, r1, #24
    283c:	d550      	bpl.n	28e0 <_printf_i+0x184>
    283e:	07cb      	lsls	r3, r1, #31
    2840:	d502      	bpl.n	2848 <_printf_i+0xec>
    2842:	2320      	movs	r3, #32
    2844:	4319      	orrs	r1, r3
    2846:	6021      	str	r1, [r4, #0]
    2848:	2710      	movs	r7, #16
    284a:	2d00      	cmp	r5, #0
    284c:	d103      	bne.n	2856 <_printf_i+0xfa>
    284e:	2320      	movs	r3, #32
    2850:	6822      	ldr	r2, [r4, #0]
    2852:	439a      	bics	r2, r3
    2854:	6022      	str	r2, [r4, #0]
    2856:	0023      	movs	r3, r4
    2858:	2200      	movs	r2, #0
    285a:	3343      	adds	r3, #67	; 0x43
    285c:	701a      	strb	r2, [r3, #0]
    285e:	6863      	ldr	r3, [r4, #4]
    2860:	60a3      	str	r3, [r4, #8]
    2862:	2b00      	cmp	r3, #0
    2864:	db03      	blt.n	286e <_printf_i+0x112>
    2866:	2204      	movs	r2, #4
    2868:	6821      	ldr	r1, [r4, #0]
    286a:	4391      	bics	r1, r2
    286c:	6021      	str	r1, [r4, #0]
    286e:	2d00      	cmp	r5, #0
    2870:	d102      	bne.n	2878 <_printf_i+0x11c>
    2872:	9e04      	ldr	r6, [sp, #16]
    2874:	2b00      	cmp	r3, #0
    2876:	d00c      	beq.n	2892 <_printf_i+0x136>
    2878:	9e04      	ldr	r6, [sp, #16]
    287a:	0028      	movs	r0, r5
    287c:	0039      	movs	r1, r7
    287e:	f7ff fabf 	bl	1e00 <__aeabi_uidivmod>
    2882:	9b03      	ldr	r3, [sp, #12]
    2884:	3e01      	subs	r6, #1
    2886:	5c5b      	ldrb	r3, [r3, r1]
    2888:	7033      	strb	r3, [r6, #0]
    288a:	002b      	movs	r3, r5
    288c:	0005      	movs	r5, r0
    288e:	429f      	cmp	r7, r3
    2890:	d9f3      	bls.n	287a <_printf_i+0x11e>
    2892:	2f08      	cmp	r7, #8
    2894:	d109      	bne.n	28aa <_printf_i+0x14e>
    2896:	6823      	ldr	r3, [r4, #0]
    2898:	07db      	lsls	r3, r3, #31
    289a:	d506      	bpl.n	28aa <_printf_i+0x14e>
    289c:	6863      	ldr	r3, [r4, #4]
    289e:	6922      	ldr	r2, [r4, #16]
    28a0:	4293      	cmp	r3, r2
    28a2:	dc02      	bgt.n	28aa <_printf_i+0x14e>
    28a4:	2330      	movs	r3, #48	; 0x30
    28a6:	3e01      	subs	r6, #1
    28a8:	7033      	strb	r3, [r6, #0]
    28aa:	9b04      	ldr	r3, [sp, #16]
    28ac:	1b9b      	subs	r3, r3, r6
    28ae:	6123      	str	r3, [r4, #16]
    28b0:	9b07      	ldr	r3, [sp, #28]
    28b2:	0021      	movs	r1, r4
    28b4:	9300      	str	r3, [sp, #0]
    28b6:	9805      	ldr	r0, [sp, #20]
    28b8:	9b06      	ldr	r3, [sp, #24]
    28ba:	aa09      	add	r2, sp, #36	; 0x24
    28bc:	f7ff fede 	bl	267c <_printf_common>
    28c0:	1c43      	adds	r3, r0, #1
    28c2:	d135      	bne.n	2930 <_printf_i+0x1d4>
    28c4:	2001      	movs	r0, #1
    28c6:	4240      	negs	r0, r0
    28c8:	b00b      	add	sp, #44	; 0x2c
    28ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28cc:	2220      	movs	r2, #32
    28ce:	6809      	ldr	r1, [r1, #0]
    28d0:	430a      	orrs	r2, r1
    28d2:	6022      	str	r2, [r4, #0]
    28d4:	0022      	movs	r2, r4
    28d6:	2178      	movs	r1, #120	; 0x78
    28d8:	3245      	adds	r2, #69	; 0x45
    28da:	7011      	strb	r1, [r2, #0]
    28dc:	4a27      	ldr	r2, [pc, #156]	; (297c <_printf_i+0x220>)
    28de:	e7a7      	b.n	2830 <_printf_i+0xd4>
    28e0:	0648      	lsls	r0, r1, #25
    28e2:	d5ac      	bpl.n	283e <_printf_i+0xe2>
    28e4:	b2ad      	uxth	r5, r5
    28e6:	e7aa      	b.n	283e <_printf_i+0xe2>
    28e8:	681a      	ldr	r2, [r3, #0]
    28ea:	680d      	ldr	r5, [r1, #0]
    28ec:	1d10      	adds	r0, r2, #4
    28ee:	6949      	ldr	r1, [r1, #20]
    28f0:	6018      	str	r0, [r3, #0]
    28f2:	6813      	ldr	r3, [r2, #0]
    28f4:	062e      	lsls	r6, r5, #24
    28f6:	d501      	bpl.n	28fc <_printf_i+0x1a0>
    28f8:	6019      	str	r1, [r3, #0]
    28fa:	e002      	b.n	2902 <_printf_i+0x1a6>
    28fc:	066d      	lsls	r5, r5, #25
    28fe:	d5fb      	bpl.n	28f8 <_printf_i+0x19c>
    2900:	8019      	strh	r1, [r3, #0]
    2902:	2300      	movs	r3, #0
    2904:	9e04      	ldr	r6, [sp, #16]
    2906:	6123      	str	r3, [r4, #16]
    2908:	e7d2      	b.n	28b0 <_printf_i+0x154>
    290a:	681a      	ldr	r2, [r3, #0]
    290c:	1d11      	adds	r1, r2, #4
    290e:	6019      	str	r1, [r3, #0]
    2910:	6816      	ldr	r6, [r2, #0]
    2912:	2100      	movs	r1, #0
    2914:	0030      	movs	r0, r6
    2916:	6862      	ldr	r2, [r4, #4]
    2918:	f000 f832 	bl	2980 <memchr>
    291c:	2800      	cmp	r0, #0
    291e:	d001      	beq.n	2924 <_printf_i+0x1c8>
    2920:	1b80      	subs	r0, r0, r6
    2922:	6060      	str	r0, [r4, #4]
    2924:	6863      	ldr	r3, [r4, #4]
    2926:	6123      	str	r3, [r4, #16]
    2928:	2300      	movs	r3, #0
    292a:	9a04      	ldr	r2, [sp, #16]
    292c:	7013      	strb	r3, [r2, #0]
    292e:	e7bf      	b.n	28b0 <_printf_i+0x154>
    2930:	6923      	ldr	r3, [r4, #16]
    2932:	0032      	movs	r2, r6
    2934:	9906      	ldr	r1, [sp, #24]
    2936:	9805      	ldr	r0, [sp, #20]
    2938:	9d07      	ldr	r5, [sp, #28]
    293a:	47a8      	blx	r5
    293c:	1c43      	adds	r3, r0, #1
    293e:	d0c1      	beq.n	28c4 <_printf_i+0x168>
    2940:	6823      	ldr	r3, [r4, #0]
    2942:	079b      	lsls	r3, r3, #30
    2944:	d415      	bmi.n	2972 <_printf_i+0x216>
    2946:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2948:	68e0      	ldr	r0, [r4, #12]
    294a:	4298      	cmp	r0, r3
    294c:	dabc      	bge.n	28c8 <_printf_i+0x16c>
    294e:	0018      	movs	r0, r3
    2950:	e7ba      	b.n	28c8 <_printf_i+0x16c>
    2952:	0022      	movs	r2, r4
    2954:	2301      	movs	r3, #1
    2956:	9906      	ldr	r1, [sp, #24]
    2958:	9805      	ldr	r0, [sp, #20]
    295a:	9e07      	ldr	r6, [sp, #28]
    295c:	3219      	adds	r2, #25
    295e:	47b0      	blx	r6
    2960:	1c43      	adds	r3, r0, #1
    2962:	d0af      	beq.n	28c4 <_printf_i+0x168>
    2964:	3501      	adds	r5, #1
    2966:	68e3      	ldr	r3, [r4, #12]
    2968:	9a09      	ldr	r2, [sp, #36]	; 0x24
    296a:	1a9b      	subs	r3, r3, r2
    296c:	42ab      	cmp	r3, r5
    296e:	dcf0      	bgt.n	2952 <_printf_i+0x1f6>
    2970:	e7e9      	b.n	2946 <_printf_i+0x1ea>
    2972:	2500      	movs	r5, #0
    2974:	e7f7      	b.n	2966 <_printf_i+0x20a>
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	00002da5 	.word	0x00002da5
    297c:	00002db6 	.word	0x00002db6

00002980 <memchr>:
    2980:	b2c9      	uxtb	r1, r1
    2982:	1882      	adds	r2, r0, r2
    2984:	4290      	cmp	r0, r2
    2986:	d101      	bne.n	298c <memchr+0xc>
    2988:	2000      	movs	r0, #0
    298a:	4770      	bx	lr
    298c:	7803      	ldrb	r3, [r0, #0]
    298e:	428b      	cmp	r3, r1
    2990:	d0fb      	beq.n	298a <memchr+0xa>
    2992:	3001      	adds	r0, #1
    2994:	e7f6      	b.n	2984 <memchr+0x4>

00002996 <memmove>:
    2996:	b510      	push	{r4, lr}
    2998:	4288      	cmp	r0, r1
    299a:	d902      	bls.n	29a2 <memmove+0xc>
    299c:	188b      	adds	r3, r1, r2
    299e:	4298      	cmp	r0, r3
    29a0:	d303      	bcc.n	29aa <memmove+0x14>
    29a2:	2300      	movs	r3, #0
    29a4:	e007      	b.n	29b6 <memmove+0x20>
    29a6:	5c8b      	ldrb	r3, [r1, r2]
    29a8:	5483      	strb	r3, [r0, r2]
    29aa:	3a01      	subs	r2, #1
    29ac:	d2fb      	bcs.n	29a6 <memmove+0x10>
    29ae:	bd10      	pop	{r4, pc}
    29b0:	5ccc      	ldrb	r4, [r1, r3]
    29b2:	54c4      	strb	r4, [r0, r3]
    29b4:	3301      	adds	r3, #1
    29b6:	429a      	cmp	r2, r3
    29b8:	d1fa      	bne.n	29b0 <memmove+0x1a>
    29ba:	e7f8      	b.n	29ae <memmove+0x18>

000029bc <_malloc_usable_size_r>:
    29bc:	1f0b      	subs	r3, r1, #4
    29be:	681b      	ldr	r3, [r3, #0]
    29c0:	1f18      	subs	r0, r3, #4
    29c2:	2b00      	cmp	r3, #0
    29c4:	da01      	bge.n	29ca <_malloc_usable_size_r+0xe>
    29c6:	580b      	ldr	r3, [r1, r0]
    29c8:	18c0      	adds	r0, r0, r3
    29ca:	4770      	bx	lr

000029cc <__gnu_thumb1_case_shi>:
    29cc:	b403      	push	{r0, r1}
    29ce:	4671      	mov	r1, lr
    29d0:	0849      	lsrs	r1, r1, #1
    29d2:	0040      	lsls	r0, r0, #1
    29d4:	0049      	lsls	r1, r1, #1
    29d6:	5e09      	ldrsh	r1, [r1, r0]
    29d8:	0049      	lsls	r1, r1, #1
    29da:	448e      	add	lr, r1
    29dc:	bc03      	pop	{r0, r1}
    29de:	4770      	bx	lr
    29e0:	00002a74 	.word	0x00002a74
    29e4:	000005d9 	.word	0x000005d9
	...
    29f0:	00000018 	.word	0x00000018
    29f4:	00000000 	.word	0x00000000
    29f8:	00000019 	.word	0x00000019
    29fc:	00000301 	.word	0x00000301
    2a00:	00000000 	.word	0x00000000
    2a04:	00000005 	.word	0x00000005
    2a08:	00000000 	.word	0x00000000
    2a0c:	00000008 	.word	0x00000008
    2a10:	00000000 	.word	0x00000000
    2a14:	00000009 	.word	0x00000009
    2a18:	01010101 	.word	0x01010101
    2a1c:	00000001 	.word	0x00000001
    2a20:	00002b58 	.word	0x00002b58
    2a24:	00000e29 	.word	0x00000e29
    2a28:	00000000 	.word	0x00000000
    2a2c:	4c554e00 	.word	0x4c554e00
    2a30:	ffff004c 	.word	0xffff004c
    2a34:	74736574 	.word	0x74736574
    2a38:	00000031 	.word	0x00000031
    2a3c:	000000c0 	.word	0x000000c0
	...
    2a54:	74736574 	.word	0x74736574
    2a58:	00000032 	.word	0x00000032
    2a5c:	00000018 	.word	0x00000018
	...
    2a70:	ffff0000 	.word	0xffff0000
    2a74:	63657865 	.word	0x63657865
    2a78:	ffffff00 	.word	0xffffff00
    2a7c:	ff005441 	.word	0xff005441
    2a80:	30455441 	.word	0x30455441
    2a84:	00000000 	.word	0x00000000
    2a88:	4552432b 	.word	0x4552432b
    2a8c:	30203a47 	.word	0x30203a47
    2a90:	0000312c 	.word	0x0000312c
    2a94:	432b5441 	.word	0x432b5441
    2a98:	3f474552 	.word	0x3f474552
    2a9c:	00000000 	.word	0x00000000
    2aa0:	432b5441 	.word	0x432b5441
    2aa4:	3d46474d 	.word	0x3d46474d
    2aa8:	00000031 	.word	0x00000031
    2aac:	432b5441 	.word	0x432b5441
    2ab0:	4144474d 	.word	0x4144474d
    2ab4:	4544223d 	.word	0x4544223d
    2ab8:	4c41204c 	.word	0x4c41204c
    2abc:	ff00224c 	.word	0xff00224c
    2ac0:	432b5441 	.word	0x432b5441
    2ac4:	3d52474d 	.word	0x3d52474d
    2ac8:	00006425 	.word	0x00006425
    2acc:	474d432b 	.word	0x474d432b
    2ad0:	00000052 	.word	0x00000052
    2ad4:	0a0d0a0d 	.word	0x0a0d0a0d
    2ad8:	00004b4f 	.word	0x00004b4f
    2adc:	ff00222c 	.word	0xff00222c
    2ae0:	474e4952 	.word	0x474e4952
    2ae4:	00000000 	.word	0x00000000
    2ae8:	00485441 	.word	0x00485441
    2aec:	544d432b 	.word	0x544d432b
    2af0:	ffff0049 	.word	0xffff0049
    2af4:	432b5441 	.word	0x432b5441
    2af8:	3d53474d 	.word	0x3d53474d
    2afc:	22732522 	.word	0x22732522
    2b00:	00000000 	.word	0x00000000
    2b04:	474d432b 	.word	0x474d432b
    2b08:	00000053 	.word	0x00000053
    2b0c:	ffff001a 	.word	0xffff001a
    2b10:	6d6d6f43 	.word	0x6d6d6f43
    2b14:	20646e61 	.word	0x20646e61
    2b18:	656d6974 	.word	0x656d6974
    2b1c:	756f2064 	.word	0x756f2064
    2b20:	00000074 	.word	0x00000074
    2b24:	74726175 	.word	0x74726175
    2b28:	65723e2d 	.word	0x65723e2d
    2b2c:	29286461 	.word	0x29286461
    2b30:	74657220 	.word	0x74657220
    2b34:	656e7275 	.word	0x656e7275
    2b38:	756e2064 	.word	0x756e2064
    2b3c:	ff006c6c 	.word	0xff006c6c

00002b40 <_ZL10child_pipe>:
    2b40:	0d0c0b0a ffff0f0e                       ........

00002b48 <_ZL17child_pipe_enable>:
    2b48:	03020100 ffff0504                       ........

00002b50 <_ZL18child_payload_size>:
    2b50:	14131211 ffff1615 6f666e69 ffffff00     ........info....
    2b60:	65646f4e 49200a3a 25203a44 4e200a64     Node:. ID: %d. N
    2b70:	3a656d61 0a732520 70795420 25203a65     ame: %s. Type: %
    2b80:	4c200a64 20747361 6e656573 6425203a     d. Last seen: %d
    2b90:	63657320 6f676120 0000000a 696f5320      sec ago.... Soi
    2ba0:	6f6d206c 75747369 73206572 6f736e65     l moisture senso
    2bb0:	200a3a72 696f4d20 72757473 25203a65     r:.  Moisture: %
    2bc0:	00000a64 6d655420 61726570 65727574     d... Temperature
    2bd0:	68202b20 64696d75 20797469 736e6573      + humidity sens
    2be0:	0a3a726f 65542020 7265706d 72757461     or:.  Temperatur
    2bf0:	25203a65 20200a64 696d7548 79746964     e: %d.  Humidity
    2c00:	6425203a 0000000a 6d655420 61726570     : %d.... Tempera
    2c10:	65727574 6e657320 3a726f73 5420200a     ture sensor:.  T
    2c20:	65706d65 75746172 203a6572 000a6425     emperature: %d..

00002c30 <_ctype_>:
    2c30:	20202000 20202020 28282020 20282828     .         ((((( 
    2c40:	20202020 20202020 20202020 20202020                     
    2c50:	10108820 10101010 10101010 10101010      ...............
    2c60:	04040410 04040404 10040404 10101010     ................
    2c70:	41411010 41414141 01010101 01010101     ..AAAAAA........
    2c80:	01010101 01010101 01010101 10101010     ................
    2c90:	42421010 42424242 02020202 02020202     ..BBBBBB........
    2ca0:	02020202 02020202 02020202 10101010     ................
    2cb0:	00000020 00000000 00000000 00000000      ...............
	...
    2d30:	ffffff00                                ....

00002d34 <__sf_fake_stderr>:
	...

00002d54 <__sf_fake_stdin>:
	...

00002d74 <__sf_fake_stdout>:
	...
    2d94:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2da4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2db4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2dc4:	ff006665                                ef..

00002dc8 <_init>:
    2dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2dce:	bc08      	pop	{r3}
    2dd0:	469e      	mov	lr, r3
    2dd2:	4770      	bx	lr

00002dd4 <__init_array_start>:
    2dd4:	000000b5 	.word	0x000000b5
    2dd8:	00001031 	.word	0x00001031
    2ddc:	000012dd 	.word	0x000012dd
    2de0:	000019e1 	.word	0x000019e1

00002de4 <_fini>:
    2de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2dea:	bc08      	pop	{r3}
    2dec:	469e      	mov	lr, r3
    2dee:	4770      	bx	lr

00002df0 <__delay_usec_veneer>:
    2df0:	b401      	push	{r0}
    2df2:	4802      	ldr	r0, [pc, #8]	; (2dfc <__delay_usec_veneer+0xc>)
    2df4:	4684      	mov	ip, r0
    2df6:	bc01      	pop	{r0}
    2df8:	4760      	bx	ip
    2dfa:	bf00      	nop
    2dfc:	20000001 	.word	0x20000001

00002e00 <__fini_array_start>:
    2e00:	0000008d 	.word	0x0000008d

Disassembly of section .data:

20000000 <delay_usec>:
	__asm (
20000000:	210f      	movs	r1, #15

20000002 <mydelay1>:
20000002:	3901      	subs	r1, #1
20000004:	d1fd      	bne.n	20000002 <mydelay1>
20000006:	3801      	subs	r0, #1
20000008:	d1fa      	bne.n	20000000 <delay_usec>
}
2000000a:	4770      	bx	lr

2000000c <__dso_handle>:
2000000c:	0000 0000                                   ....

20000010 <_ZN3Str11EmptyBufferE>:
20000010:	2a2c 0000                                   ,*..

20000014 <_impure_ptr>:
20000014:	0018 2000                                   ... 

20000018 <impure_data>:
20000018:	0000 0000 2d54 0000 2d74 0000 2d34 0000     ....T-..t-..4-..
	...
